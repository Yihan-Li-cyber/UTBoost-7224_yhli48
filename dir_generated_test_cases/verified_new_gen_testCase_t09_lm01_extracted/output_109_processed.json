{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..3602993 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,6 +134,23 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n+def test_issue_separable_nested_compound_models():\n+    from astropy.modeling import models\n+    from astropy.modeling.separable import separability_matrix\n+    \n+    cm = models.Linear1D(10) & models.Linear1D(5)\n+    nested_cm = models.Pix2Sky_TAN() & cm\n+\n+    expected_separability_matrix = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, True],\n+        [False, False, True, True]\n+    ])\n+\n+    result_matrix = separability_matrix(nested_cm)\n+    assert_allclose(result_matrix, expected_separability_matrix)\n+\n \n def test_custom_model_separable():\n     @custom_model\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..bf70a09 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -127,7 +127,32 @@ class TestHeaderFunctions(FitsTestCase):\n         c = fits.Card(\"long_int\", -467374636747637647347374734737437)\n         assert str(c) == _pad(\"LONG_INT= -467374636747637647347374734737437\")\n \n-    def test_floating_point_value_card(self):\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        from astropy.io import fits\n+\n+        k = \"HIERARCH ESO IFM CL RADIUS\"\n+        com = \"[m] radius arround actuator to avoid\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 0.0091249, com)\n+        expected_str = f\"{k} = 0.0091249 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n         \"\"\"Test Card constructor with floating point value\"\"\"\n \n         c = fits.Card(\"floatnum\", -467374636747637647347374734737437.0)\n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..3c17141 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,6 +601,28 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n+\n+    def test_identical_vla_files(self):\n+        \"\"\"\n+        Test that FITSDiff does not report differences for identical files with VLA columns.\n+        \"\"\"\n+        # Create a binary table with a variable-length array (VLA) column\n+        col = Column(name='a', format='QD', array=[[0], [0, 0]])\n+        hdu = BinTableHDU.from_columns([col])\n+        \n+        # Write to a temporary file\n+        hdu.writeto('temp_vla.fits', overwrite=True)\n+\n+        # Compare the file to itself\n+        diff = FITSDiff('temp_vla.fits', 'temp_vla.fits')\n+        \n+        # Assert the files are identified as identical\n+        assert diff.identical, \"FITSDiff reported differences in identical VLA files.\"\n+        \n+        # Print diff report if needed (useful for debugging)\n+        if not diff.identical:\n+            printdiff('temp_vla.fits', 'temp_vla.fits')\n+\n     def test_identical_files_basic(self):\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..82c04ac 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -89,7 +89,20 @@ def test_inherit_docstrings():\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n \n-def test_set_locale():\n+def test_inherit_docstrings_property():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return \"Base property\"\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return \"Subclass property\"\n+\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..0fbc0ca 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -197,8 +197,21 @@ def test_unknown_unit3():\n     with pytest.raises(TypeError):\n         unit5 = u.Unit(None)\n \n+import astropy.units as u\n+import pytest\n \n-@raises(TypeError)\n+def test_unrecognized_unit_equality_with_none():\n+    x = u.Unit('asdf', parse_strict='silent')\n+\n+    # The issue states that x == None should not raise TypeError,\n+    # and should return False\n+    assert (x == None) is False\n+\n+    # Also test inequality\n+    assert (x != None) is True\n+\n+    # Additional check using 'not in' to ensure robustness\n+    assert x not in (None,)\n def test_invalid_scale():\n     x = ['a', 'b', 'c'] * u.m\n \n",
  "astropy__astropy-7671": "",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..9675d29 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -84,8 +84,51 @@ class TestHeaderFunctions(FitsTestCase):\n \n         c = fits.Card()\n         assert '' == c.keyword\n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_card_from_str(self):\n+        \"\"\"\n+        Test loading a Card from a `str` object.\n+        \"\"\"\n+\n+        c = fits.Card.fromstring(\"DEF     = 'def'\")\n+        assert c.keyword == 'DEF'\n+        assert c.value == 'def'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n+    def test_header_fromstring_str(self):\n+        \"\"\"\n+        Test reading a Header from a `str` string.\n+        \"\"\"\n+\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read().decode('ascii'))\n \n-    def test_string_value_card(self):\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n         \"\"\"Test Card constructor with string value\"\"\"\n \n         c = fits.Card('abc', '<8 ch')\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..dcdccc8 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -150,7 +150,30 @@ class TestQuantityCreation:\n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n \n-    def test_copy(self):\n+    def test_float_dtype_preservation(self):\n+        \"\"\"Test that float16, float32, float64, and float128 dtypes are preserved.\"\"\"\n+\n+        a_16 = np.float16(1.0)\n+        q_16 = u.Quantity(a_16, u.km)\n+        assert q_16.dtype == np.dtype('float16'), \\\n+            f\"Expected dtype float16, got {q_16.dtype}\"\n+\n+        a_32 = np.float32(1.0)\n+        q_32 = u.Quantity(a_32, u.km)\n+        assert q_32.dtype == np.dtype('float32'), \\\n+            f\"Expected dtype float32, got {q_32.dtype}\"\n+\n+        a_64 = np.float64(1.0)\n+        q_64 = u.Quantity(a_64, u.km)\n+        assert q_64.dtype == np.dtype('float64'), \\\n+            f\"Expected dtype float64, got {q_64.dtype}\"\n+\n+        # Note: np.float128 may not be available on all platforms, especially Windows.\n+        if hasattr(np, \"float128\"):\n+            a_128 = np.float128(1.0)\n+            q_128 = u.Quantity(a_128, u.km)\n+            assert q_128.dtype == np.dtype('float128'), \\\n+                f\"Expected dtype float128, got {q_128.dtype}\"\n \n         # By default, a new quantity is constructed, but not if copy=False\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..becdfbe 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,7 +218,14 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n-    # Trailing newlines not accepted\n+    # URLs with invalid unencoded characters in username/password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), 'http://-.~_!$&\\'()*+,;=%40:80%2f@example.com', ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..9fc9bdf 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n import re\n from decimal import Decimal\n \n from django.core.exceptions import FieldError\n+from django.db.models.expressions import Case, When\n from django.db import connection\n from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n@@ -389,6 +391,36 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_count_distinct_expression(self):\n+        # Test with simple condition using greater than scenario\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+        # Test with a different condition\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(price__gt=20.00, then='rating')), distinct=True),\n+        )\n+        self.assertTrue(isinstance(aggs['distinct_ratings'], int))\n+\n+        # Test with an edge case where no records match the condition\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(rating__gt=10.0, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 0)\n+\n+        # Test with multiple conditions\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(\n+                    When(pages__gt=200, price__lt=100.00, then='rating')\n+                ),\n+                distinct=True\n+            ),\n+        )\n+        self.assertTrue(isinstance(aggs['distinct_ratings'], int))\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..28b6378 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,14 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+\n+    def test_default_upload_file_permissions(self):\n+        \"\"\"\n+        Test that the default file permissions set by FileSystemStorage \n+        are 0o644 when no FILE_UPLOAD_PERMISSIONS is explicitly given.\n+        \"\"\"\n+        # Assert the default file permissions mode is 0o644\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..b5f60ba 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -29,7 +31,52 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def _mock_subprocess_run(self, *args, env=os.environ, **kwargs):\n+        \"\"\"\n+        Mocks the subprocess.run function to capture the PGPASSWORD environment variable.\n+        \"\"\"\n+        self.pgpassword = env.get('PGPASSWORD')\n+        return subprocess.CompletedProcess(args, 0)\n+\n+    def _run_it_with_pgpassword(self, dbinfo):\n+        self.subprocess_args = None\n+        self.pgpassword = None\n+        with mock.patch('subprocess.run', new=self._mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+        return self.subprocess_args, self.pgpassword\n+\n+    def test_subprocess_run_with_pgpassword(self):\n+        \"\"\"\n+        Test to ensure that subprocess.run is being used correctly with the PGPASSWORD environment.\n+        \"\"\"\n+        self.assertEqual(\n+            self._run_it_with_pgpassword({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                'somepassword',\n+            )\n+        )\n+\n+    def test_subprocess_run_no_pgpassword(self):\n+        \"\"\"\n+        Test to ensure that PGPASSWORD is None when no password is provided.\n+        \"\"\"\n+        self.assertEqual(\n+            self._run_it_with_pgpassword({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,\n+            )\n+        )\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +160,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..1286cbc 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n \n \n @override_settings(\n@@ -47,7 +48,20 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_missing_content_type_rename_ignore(self):\n+    class TestRouter:\n+        def db_for_write(self, model, **hints):\n+            return 'other'\n+\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n@@ -63,4 +77,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..2ce8640 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -425,7 +425,42 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n             inlines = [\n                 AlternateInline, MediaInline\n             ]\n+        class TestRequest:\n+            def __init__(self, name=None):\n+                self.name = name\n+\n+        request = TestRequest()\n+\n+        # Verify default behavior without request name\n         ma = EpisodeAdmin(Episode, self.site)\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        # Verify behavior with different request names\n+        for name, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+            request.name = name\n+            self.assertEqual(ma.get_inlines(request, None), (inline_class,))\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), inline_class)\n+\n+        # Additional test cases for broader coverage\n+        # Case when request has no name attribute\n+        request = TestRequest()  # No name attribute\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        # Case when name is irrelevant\n+        request.name = 'invalid'\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        # Ensure handling of None request\n+        self.assertEqual(ma.get_inlines(None, None), [])\n+        self.assertEqual(ma.get_inline_instances(None), [])\n+\n+        # Edge case for object argument check (even though it\u2019s unused in current logic)\n+        obj = Episode()  # Simulating an instance of the model\n+        self.assertEqual(ma.get_inlines(request, obj), [])\n+        self.assertEqual(ma.get_inline_instances(request, obj), [])\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..741d9ca 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -247,8 +247,27 @@ class UsernameValidatorsTests(SimpleTestCase):\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n+    def test_unicode_validator_with_trailing_newline(self):\n+        # These usernames should be invalid due to trailing newlines\n+        invalid_usernames = [\n+            'user\\n', 'anotheruser\\r\\n', 'thirduser\\n '\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_ascii_validator_with_trailing_newline(self):\n+        # ASCII usernames that should be invalid because of a trailing newline\n+        invalid_usernames = [\n+            'user\\n', 'user123\\r\\n', 'abc@def\\n'\n+        ]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +277,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..d6c5ffb 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -1,6 +1,7 @@\n import os\n \n from django.core.exceptions import ImproperlyConfigured\n+from django.template import TemplateSyntaxError\n from django.template import Context\n from django.template.engine import Engine\n from django.test import SimpleTestCase, override_settings\n@@ -21,8 +22,12 @@ class RenderToStringTest(SimpleTestCase):\n             'obj:test\\n',\n         )\n \n-\n-class GetDefaultTests(SimpleTestCase):\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..a2f2492 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -329,8 +329,23 @@ class HttpResponseTests(unittest.TestCase):\n             r.__setitem__('f\u00f8\u00f8', 'bar')\n         with self.assertRaises(UnicodeError):\n             r.__setitem__('f\u00f8\u00f8'.encode(), 'bar')\n-\n-    def test_long_line(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview content'))\n+        self.assertEqual(r.content, b'memoryview content')\n+\n+        # Testing empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+        # Testing memoryview with various scenarios\n+        content = memoryview(b'Multiple scenarios in memoryview')\n+        r = HttpResponse(content)\n+        self.assertEqual(r.content, b'Multiple scenarios in memoryview')\n+\n+        # Test when content includes a variety of byte values\n+        byte_content = bytes(range(256))\n+        r = HttpResponse(memoryview(byte_content))\n+        self.assertEqual(r.content, byte_content)\n         # Bug #20889: long lines trigger newlines to be added to headers\n         # (which is not allowed due to bug #10188)\n         h = HttpResponse()\n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..ec7593e 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -773,6 +773,39 @@ class TestInlinePermissions(TestCase):\n         )\n         self.assertContains(response, 'id=\"id_inner2_set-0-DELETE\"')\n \n+    def test_inline_change_m2m_view_only_perm(self):\n+        # Grant only the 'view' permission on books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        \n+        response = self.client.get(self.author_change_url)\n+        \n+        # Ensure that inline shows up with view permissions\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        # Inline should be non-editable due to lack of change permission\n+        self.assertContains(response, '<p>The inline Book</p>', html=True)\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+\n+    def test_inline_add_m2m_view_only_perm(self):\n+        # Grant only the 'view' permission on books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        \n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        \n+        # Inline should not allow adding new items, should only show existing\n+        self.assertContains(response, '<h2>Author-book relationships</h2>', count=1)\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        self.assertContains(response, '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\"', html=True)\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+\n     def test_inline_change_fk_all_perms(self):\n         permission = Permission.objects.get(codename='add_inner2', content_type=self.inner_ct)\n         self.user.user_permissions.add(permission)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..b44e1e5 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,23 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_empty_fields(self):\n+        \"\"\"Test model_to_dict returns an empty dict when given empty fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields={}), {})\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_specific_fields(self):\n+        \"\"\"Test model_to_dict returns specific requested fields only.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        result = model_to_dict(bw, fields=['name', 'score'])\n+        self.assertEqual(result, {'name': 'Joe Better', 'score': 10})\n+\n+    def test_exclude_all_fields_except_one(self):\n+        \"\"\"Test model_to_dict with excluding all fields except one.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        result = model_to_dict(bw, exclude=['id', 'score', 'writer_ptr'])\n+        self.assertEqual(result, {'name': 'Joe Better'})\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..6668399 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,4 +1,5 @@\n-from math import ceil\n+\n+from django.db.models.deletion import Collector\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n@@ -464,7 +465,29 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_updates_pk(self):\n+        \"\"\"Test that deleting a model instance without dependencies sets the PK to None.\"\"\"\n+        user_without_dependencies = User.objects.create()\n+        self.assertIsNotNone(user_without_dependencies.pk)\n+        user_without_dependencies.delete()\n+        self.assertIsNone(user_without_dependencies.pk)\n+\n+    def test_delete_instance_with_dependencies_does_not_set_pk_none(self):\n+        \"\"\"Test that deleting a model instance with dependencies does not necessarily set the PK to None.\"\"\"\n+        avatar = Avatar.objects.create(desc='user avatar')\n+        user_with_dependencies = User.objects.create(avatar=avatar)\n+        self.assertIsNotNone(user_with_dependencies.pk)\n+        user_with_dependencies.delete()\n+        # We assume in this test context the delete should set pk to None, even for dependencies.\n+        self.assertIsNone(user_with_dependencies.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..5effaa8 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,12 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Test for extremely small decimals when decimal_pos is specified\n+            ('1e-199', 2, '0.00'),  # Should be '0.00' instead of scientific notation\n+            ('1e-200', 2, '0.00'),  # Should be '0.00' instead of scientific notation\n+            # Edge case tests for larger than 200 digit decimals\n+            ('0.{}'.format('0' * 200), 2, '0.00'),\n+            ('0.{}'.format('0' * 201), 2, '0.00'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\nindex 1dc206f..3e58a17 100644\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -1,4 +1,8 @@\n+\n+import uuid\n+from django.contrib.contenttypes.fields import GenericForeignKey\n from django.contrib.contenttypes.models import ContentType\n+from django.db import models\n from django.core.exceptions import ObjectDoesNotExist\n from django.db import connection\n from django.db.models import Prefetch, QuerySet\n@@ -10,9 +14,38 @@ from .models import (\n     Author, Author2, AuthorAddress, AuthorWithAge, Bio, Book, Bookmark,\n     BookReview, BookWithYear, Comment, Department, Employee, FavoriteAuthors,\n     House, LessonEntry, ModelIterableSubclass, Person, Qualification, Reader,\n-    Room, TaggedItem, Teacher, WordEntry,\n+    Room, TaggedItem, Teacher, WordEntry, Article\n )\n \n+class UUIDPrimaryKeyGFKTest(TestCase):\n+    def test_prefetch_related_with_uuid_pk_and_gfk(self):\n+        class Foo(models.Model):\n+            id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+\n+        class Bar(models.Model):\n+            foo_content_type = models.ForeignKey(\n+                ContentType, related_name='actor',\n+                on_delete=models.CASCADE, db_index=True\n+            )\n+            foo_object_id = models.CharField(max_length=255, db_index=True)\n+            foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n+        # Prepare content type for Foo model\n+        foo_content_type = ContentType.objects.create(app_label='test', model='foo')\n+\n+        # Create Foo instance\n+        foo_instance = Foo.objects.create()\n+\n+        # Create Bar instance pointing to Foo using GFK\n+        bar_instance = Bar.objects.create(\n+            foo_content_type=foo_content_type,\n+            foo_object_id=str(foo_instance.id)\n+        )\n+\n+        # Test prefetch_related works\n+        queryset = Bar.objects.prefetch_related('foo')\n+        self.assertEqual([b.foo for b in queryset], [foo_instance])\n+\n \n class TestDataMixin:\n     @classmethod\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..56e8b32 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -81,7 +83,36 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        # Mock the environment to test SSL settings\n+        ssl_env = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'host': 'somehost',\n+            'port': '444',\n+            'sslmode': 'verify-ca',\n+            'sslrootcert': 'root.crt',\n+            'sslcert': 'client.crt',\n+            'sslkey': 'client.key',\n+        }\n+\n+        expected_args = [\n+            'psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'\n+        ]\n+\n+        expected_env = {\n+            'PGSSLCERT': 'client.crt',\n+            'PGSSLKEY': 'client.key',\n+            'PGSSLMODE': 'verify-ca',\n+            'PGSSLROOTCERT': 'root.crt',\n+        }\n+\n+        actual_args, actual_password = self._run_it(ssl_env)\n+        self.assertEqual(actual_args, expected_args)\n+\n+        # Check if environment variables have been set as expected\n+        for key, value in expected_env.items():\n+            self.assertEqual(os.getenv(key), value)\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..0ba4d33 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -82,6 +82,22 @@ class FilteredRelationTests(TestCase):\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2]  # Assuming `self.author2` does not have a book with the title 'poem by alice'\n+        )\n+\n+    def test_exclude_with_no_match(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='non-existent title')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author1, self.author2]  # Assuming none of the authors have books with 'non-existent title'\n+        )\n+\n     def test_without_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..c08de88 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -21,6 +21,18 @@ class TestUtilsHtml(SimpleTestCase):\n             output = value\n         self.assertEqual(function(value), output)\n \n+    def test_html_escape_vs_django_escape(self):\n+        items = (\n+            (\"Hello & 'World'\", 'Hello &amp; &#x27;World&#x27;'),\n+            (\"It's sunny\", 'It&#x27;s sunny'),\n+            ('The \"quote\"', 'The &quot;quote&quot;'),\n+            (\"<script>alert('xss')</script>\", '&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;'),\n+        )\n+        for value, expected_output in items:\n+            with self.subTest(value=value):\n+                actual_output = html.escape(value)\n+                self.assertEqual(actual_output, expected_output)\n+\n     def test_escape(self):\n         items = (\n             ('&', '&amp;'),\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..729ed4d 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -253,8 +253,24 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), 'Set foo')\n \n+    def test_skip_checks_with_checks(self):\n+        \"\"\"\n+        Test that system checks run when `--skip-checks` is not provided.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('System check identified some issues.', err)\n+        self.assertEqual(out.strip(), 'Set foo')\n \n-class UtilsTests(SimpleTestCase):\n+    def test_skip_checks_invalid_option(self):\n+        \"\"\"\n+        Test that an invalid management command option shows an error.\n+        \"\"\"\n+        out, err = self.run_manage(['set_option', '--invalid-option'])\n+        self.assertIn('error: unrecognized arguments: --invalid-option', err)\n+        self.assertNoOutput(out)\n \n     def test_no_existent_external_program(self):\n         msg = 'Error executing a_42_command_that_doesnt_exist_42'\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..cdf644f 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,9 +1,42 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n-class RegexPatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # Ensures that the resolver for a default URLconf (with no argument)\n+        # and for settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_with_explicit_urlconf(self):\n+        # Test explicitly providing the ROOT_URLCONF yields the same resolver as the default.\n+        resolver_with_arg = get_resolver('urlpatterns.path_urls')\n+        resolver_no_arg = get_resolver()\n+        self.assertIs(resolver_with_arg, resolver_no_arg)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_with_different_urlconf(self):\n+        # Test that changing the URLconf results in different resolver instances.\n+        resolver_initial = get_resolver('urlpatterns.path_urls')\n+        resolver_different = get_resolver('different.urls')\n+        self.assertIsNot(resolver_initial, resolver_different)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_called_multiple_times_efficiency(self):\n+        # Ensure calling get_resolver multiple times with the same URLconf does not\n+        # instantiate multiple resolver objects unnecessarily.\n+        resolver1 = get_resolver()\n+        resolver2 = get_resolver()\n+        self.assertIs(resolver1, resolver2)\n+        resolver_named = get_resolver('urlpatterns.path_urls')\n+        self.assertIs(resolver1, resolver_named)\n \n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n@@ -12,4 +45,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..76d8a39 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,8 +226,34 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.contrib.auth import authenticate\n+from django.test import TestCase, override_settings\n+from django.contrib.auth.models import User\n+\n+class CountingMD5PasswordHasher:\n+    calls = 0\n+\n+    def __init__(self, *args, **kwargs):\n+        CountingMD5PasswordHasher.calls += 1\n+\n+    def set_password(self, password):\n+        CountingMD5PasswordHasher.calls += 1\n+\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n     \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..5f0678a 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,17 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_change_columns_with_values_list_in_composed_queries(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+\n+        # Initial query using values_list with both columns\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+\n+        # Modified query using values_list with a single column\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..2d31e57 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -1,6 +1,10 @@\n import asyncore\n import base64\n import mimetypes\n+import socket\n+from unittest import mock\n+...\n+\n import os\n import shutil\n import smtpd\n@@ -370,7 +374,40 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         Regression for #12791 - Encode body correctly with other encodings\n         than utf-8\n         \"\"\"\n-        email = EmailMessage('Subject', 'Firstname S\u00fcrname is a great guy.', 'from@example.com', ['other@example.com'])\n+    \n+    @mock.patch('django.core.mail.utils.DNS_NAME.get_fqdn', return_value='\u6b63\u5b97')\n+    def test_non_ascii_hostname_with_iso_8859_1_encoding(self, mocked_getfqdn):\n+        \"\"\"Test email generation with a non-ASCII hostname and iso-8859-1 encoding.\"\"\"\n+        email = EmailMessage('Subject', 'Body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--8ws00zh9z', message['Message-ID'])\n+\n+    @mock.patch('django.core.mail.utils.DNS_NAME.get_fqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_hostname_with_different_encoding(self, mocked_getfqdn):\n+        \"\"\"Test email generation with a different encoding and a non-ASCII hostname.\"\"\"\n+        email = EmailMessage('Subject', 'Body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'utf-8'\n+        message = email.message()\n+        self.assertIn('@xn--p8s937b', message['Message-ID'])\n+\n+    def test_ascii_hostname_with_iso_8859_1_encoding(self):\n+        \"\"\"Test email generation with an ASCII hostname and iso-8859-1 encoding.\"\"\"\n+        with mock.patch('django.core.mail.utils.DNS_NAME.get_fqdn', return_value='ascii_hostname'):\n+            email = EmailMessage('Subject', 'Body', 'from@example.com', ['to@example.com'])\n+            email.encoding = 'iso-8859-1'\n+            message = email.message()\n+            self.assertIn('@ascii_hostname', message['Message-ID'])\n+\n+    @mock.patch('django.core.mail.utils.DNS_NAME.get_fqdn', return_value='\u6b63\u5b97')\n+    def test_email_subject_encoding(self, mocked_getfqdn):\n+        \"\"\"Test whether the subject gets properly encoded with non-ASCII hostname.\"\"\"\n+        email = EmailMessage('Subjekt', 'Body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertEqual(message['Subject'], Header('Subjekt', 'iso-8859-1').encode())\n+\n+        email = EmailMessage('Subjekt', 'Body', 'from@example.com', ['to@example.com'])\n         email.encoding = 'iso-8859-1'\n         message = email.message()\n         self.assertMessageHasHeaders(message, {\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..50e91c7 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,87 @@\n+\n+class FieldAccessibilityTests(CheckTestCase):\n+\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_not_accessible(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'non_existent_field', \"\n+            \"which is not a callable, an attribute of 'TestModelAdmin', or an attribute or method on 'app_label.TestModel'.\",\n+            'admin.E108'\n+        )\n+\n+    def test_field_is_not_many_to_many(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+        # Test case for a ManyToManyField to ensure that the correct error is raised\n+        class TestModelWithManyToMany(Model):\n+            field = models.ManyToManyField(TestModel)\n+\n+        class TestModelWithManyToManyAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsInvalid(\n+            TestModelWithManyToManyAdmin, TestModelWithManyToMany,\n+            \"The value of 'list_display[0]' must not be a ManyToManyField.\",\n+            'admin.E109'\n+        )\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..f9b6098 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,8 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, OrderedByFArticle, Reference, ChildArticle\n+from datetime import datetime\n \n \n class OrderingTests(TestCase):\n@@ -461,8 +462,33 @@ class OrderingTests(TestCase):\n             articles, ['Article 1', 'Article 4', 'Article 3', 'Article 2'],\n             attrgetter('headline')\n         )\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_with_f_expression_ordering(self):\n+        # Tests ordering with an expression defined in Meta\n+        articles = OrderedByFArticle.objects.all()\n+        self.assertEqual(list(articles), list(articles.order_by('author', 'id')))\n+        # Ensure that additional order_by doesn't crash\n+        articles = OrderedByFArticle.objects.order_by('pub_date', 'id')\n+        self.assertEqual(list(articles), list(articles.order_by('pub_date', 'id')))\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..13eb9f4 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -387,6 +387,14 @@ class AggregateTestCase(TestCase):\n     def test_count(self):\n         vals = Book.objects.aggregate(Count(\"rating\"))\n         self.assertEqual(vals, {\"rating__count\": 6})\n+        from django.db.models import Avg, Sum\n+        # Testing DISTINCT on Avg aggregate\n+        avg_vals = Book.objects.aggregate(distinct_avg_rating=Avg('rating', distinct=True))\n+        self.assertEqual(avg_vals['distinct_avg_rating'], 4.125)\n+\n+        # Testing DISTINCT on Sum aggregate\n+        sum_vals = Book.objects.aggregate(distinct_sum_rating=Sum('rating', distinct=True))\n+        self.assertEqual(sum_vals['distinct_sum_rating'], 16.5)\n \n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..adc278d 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -661,7 +661,32 @@ class AutodetectorTests(TestCase):\n         self.assertEqual([name for name, mgr in changes['otherapp'][0].operations[0].managers],\n                          ['food_qs', 'food_mgr', 'food_mgr_kwargs'])\n \n-    def test_old_model(self):\n+    def test_alter_field_to_fk_creates_dependency(self):\n+        \"\"\"Test altering a UUIDField to ForeignKey should create a dependency.\"\"\"\n+        first_app_state = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        second_app_state = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+        expected_end_state = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+\n+        changes = self.get_changes(\n+            [first_app_state, second_app_state],\n+            [expected_end_state, second_app_state]\n+        )\n+\n+        # Verify if the migration includes the necessary dependency\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         \"\"\"Tests deletion of old models.\"\"\"\n         changes = self.get_changes([self.author_empty], [])\n         # Right number/type of migrations?\n@@ -2399,4 +2424,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..fdf169b 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -219,11 +219,47 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options_with_kwargs(self):\n+        from django.core.management import call_command\n+        from django.core.management.base import CommandError\n+        from io import StringIO\n+\n+        # Test command using keyword arguments for mutually exclusive group\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_args(self):\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options_with_kwargs(self):\n+        from django.core.management import call_command\n+        from django.core.management.base import CommandError\n+        from io import StringIO\n+\n+        # Test command using keyword arguments for mutually exclusive group\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..9c2213b 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -414,6 +414,18 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n \n     @override_settings(AUTH_USER_MODEL='auth_tests.CustomEmailField')\n     def test_username_field_max_length_matches_user_model(self):\n+        \"\"\" Test that the username field's maxlength matches the User model's max_length. \"\"\"\n+        self.assertEqual(CustomEmailField._meta.get_field('username').max_length, 255)\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+            'email': 'test@example.com',\n+        }\n+        CustomEmailField.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].max_length, 255)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)  # Ensure the maxlength attribute is set in the widget\n+        self.assertEqual(form.errors, {})\n         self.assertEqual(CustomEmailField._meta.get_field('username').max_length, 255)\n         data = {\n             'username': 'u' * 255,\n@@ -427,6 +439,17 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n \n     @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n     def test_username_field_max_length_defaults_to_254(self):\n+        \"\"\" Test that the username field defaults to a max_length of 254. \"\"\"\n+        self.assertIsNone(IntegerUsernameUser._meta.get_field('username').max_length)\n+        data = {\n+            'username': '0123456',  # Sample username\n+            'password': 'password',\n+        }\n+        IntegerUsernameUser.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].max_length, 254)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)  # Ensure the maxlength attribute is set in the widget\n+        self.assertEqual(form.errors, {})\n         self.assertIsNone(IntegerUsernameUser._meta.get_field('username').max_length)\n         data = {\n             'username': '0123456',\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..0bc86a8 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -306,6 +306,27 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n \n+    def test_serialize_enum_names(self):\n+        from django.utils.translation import gettext_lazy as _\n+        \n+        class TextTranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+            def __str__(self):\n+                return self.name\n+\n+        # Test serialization uses the Enum name, not translated value\n+        field = models.CharField(default=TextTranslatedEnum.GOOD, choices=[(m.name, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', migrations.test_writer.TextTranslatedEnum['GOOD']), \"\n+            \"('BAD', migrations.test_writer.TextTranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['GOOD'])\"\n+        )\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..7623fca 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -320,7 +321,30 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_asctime(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mock(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        current_dates = [\n+            datetime(2019, 11, 6, 8, 49, 37),  # Current date close to the present time\n+            datetime(2070, 1, 1, 0, 0, 0),   # Current date in far future in 2070\n+        ]\n+\n+        tests = [\n+            # Based on current date in 2019\n+            (current_dates[0], 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (current_dates[0], 'Wednesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            # Based on current date in 2070\n+            (current_dates[1], 'Friday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (current_dates[1], 'Monday, 06-Feb-50 00:00:00 GMT', datetime(2050, 2, 6, 0, 0, 0)),\n+        ]\n+\n+        for current_date, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = current_date\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "",
  "django__django-11951": "",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..f0d0c89 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -39,8 +39,15 @@ class Gender(models.TextChoices):\n \n     __empty__ = '(Undeclared)'\n \n+from django.test import SimpleTestCase\n+from .models import Gender, Suit, YearInSchool, Vehicle\n \n class ChoicesTests(SimpleTestCase):\n+    def test_str_representation(self):\n+        for test_enum in [Gender, Suit, YearInSchool, Vehicle]:\n+            for member in test_enum:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(member), str(member.value))\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..ff68a89 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -150,7 +150,32 @@ class ChoicesTests(SimpleTestCase):\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n-    def test_choices_and_field_display(self):\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        # Test if the get_foo_bar_display method returns the overridden value.\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_overriding_FIELD_display_with_inheritance(self):\n+        class BaseFooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                # This should be overridden in the subclass below.\n+                return 'base_display'\n+\n+        class SubFooBar(BaseFooBar):\n+            def get_foo_bar_display(self):\n+                return 'sub_display'\n+\n+        f = SubFooBar(foo_bar=2)\n+        # Test if the get_foo_bar_display method in the subclass works as expected.\n+        self.assertEqual(f.get_foo_bar_display(), 'sub_display')\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n         values.\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..da16ea2 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db.models import Index\n+from django.db import connection\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db.models import Index\n+from django.db import connection\n \n \n class SchemaIndexesTests(TestCase):\n@@ -34,7 +38,21 @@ class SchemaIndexesTests(TestCase):\n         )\n         self.assertEqual(index_name, \"indexes_article_c1_a52bd80b123\")\n \n-    def test_index_name(self):\n+    def test_create_index_whitespace(self):\n+        index = Index(fields=['-name'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        sql = str(index.create_sql(Article, editor))\n+        self.assertIn('(\"name\" DESC)', sql)\n+        \n+    def test_create_index_with_opclass_whitespace(self):\n+        index = Index(\n+            fields=['name'],\n+            name='opclass_whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            sql = str(index.create_sql(Article, editor))\n+            self.assertIn('(\"name\" text_pattern_ops)', sql)\n         \"\"\"\n         Index names on the built-in database backends::\n             * Are truncated as needed.\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..1fe989c 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -106,6 +107,20 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull, RelatedIsNull)\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n+    \n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])  # Ensure it remains a list\n+\n+    def test_tuple_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))  # Ensure it remains a tuple\n \n     def test_clone_select_related(self):\n         query = Query(Item)\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..b4ee49f 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -180,8 +180,33 @@ class OperationWriterTests(SimpleTestCase):\n         )\n \n \n+from django.db import models\n+\n class WriterTests(SimpleTestCase):\n     \"\"\"\n+    Additional test case for verifying correct path serialization of inner classes.\n+    \"\"\"\n+    class Outer:\n+        class Inner(models.IntegerChoices):\n+            ONE = 1, 'One'\n+            TWO = 2, 'Two'\n+\n+    def test_serialize_nested_class_field(self):\n+        \"\"\"\n+        Ensures that nested classes used in fields are correctly serialized.\n+        \"\"\"\n+        field = models.IntegerField(\n+            default=self.Outer.Inner.ONE, \n+            choices=[(tag.value, tag) for tag in self.Outer.Inner]\n+        )\n+        result = MigrationWriter.serialize(field)[0]\n+        expected_result = (\n+            \"models.IntegerField(choices=[(1, migrations.test_writer.WriterTests.Outer.Inner['ONE']), \"\n+            \"(2, migrations.test_writer.WriterTests.Outer.Inner['TWO'])], \"\n+            \"default=migrations.test_writer.WriterTests.Outer.Inner['ONE'])\"\n+        )\n+        self.assertEqual(result, expected_result)\n+    \"\"\"\n     Tests the migration writer (makes migration files from Migration instances)\n     \"\"\"\n     class NestedEnum(enum.IntEnum):\n@@ -746,4 +771,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..40a150e 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -844,6 +844,26 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n+    def test_get_list_editable_queryset_with_special_chars_in_prefix_escaped(self):\n+        \"\"\"Test with special regex characters in the prefix to ensure data is retrieved correctly.\"\"\"\n+        b = Swallow.objects.create(origin='Swallow C', load=5, speed=3)\n+        data = {\n+            'form$.+-TOTAL_FORMS': '1',\n+            'form$.+-INITIAL_FORMS': '1',\n+            'form$.+-MIN_NUM_FORMS': '0',\n+            'form$.+-MAX_NUM_FORMS': '1000',\n+            'form$.+-0-uuid': str(b.pk),\n+            'form$.+-0-load': '15',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$.+')\n+        self.assertEqual(queryset.count(), 1)\n+\n     def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..0db195b 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,51 @@\n+\n+class TestTrimDocstring(AdminDocsSimpleTestCase):\n+    def test_docstring_with_no_leading_empty_line(self):\n+        \"\"\"\n+        Ensures trim_docstring handles docstrings without a leading empty line correctly.\n+        \"\"\"\n+        docstring = \"\"\"First line of docstring.\n+\n+        Second line of docstring.\n+        \"\"\"\n+        expected = \"First line of docstring.\\n\\nSecond line of docstring.\"\n+        self.assertEqual(trim_docstring(docstring), expected)\n+\n+    def test_docstring_with_leading_empty_line(self):\n+        \"\"\"\n+        Ensures trim_docstring handles docstrings with a leading empty line correctly.\n+        \"\"\"\n+        docstring = \"\"\"\n+\n+        First line of docstring.\n+\n+        Second line of docstring.\n+        \"\"\"\n+        expected = \"First line of docstring.\\n\\nSecond line of docstring.\"\n+        self.assertEqual(trim_docstring(docstring), expected)\n+\n+    def test_parse_docstring_no_leading_line_feed(self):\n+        \"\"\"\n+        Test parse_docstring with no leading line feed.\n+        \"\"\"\n+        docstring = 'First line of docstring.\\n\\n    Second line of docstring.'\n+        title, body, _ = parse_docstring(docstring)\n+        with captured_stderr() as stderr:\n+            self.assertEqual(parse_rst(title, ''), '<p>First line of docstring.</p>\\n')\n+            self.assertEqual(parse_rst(body, ''), '<p>Second line of docstring.</p>\\n')\n+        self.assertEqual(stderr.getvalue(), '')\n+\n+    def test_parse_docstring_with_leading_line_feed(self):\n+        \"\"\"\n+        Test parse_docstring with a leading line feed.\n+        \"\"\"\n+        docstring = '\\n\\nFirst line with leading newline.\\n\\n    Second line of docstring.'\n+        title, body, _ = parse_docstring(docstring)\n+        with captured_stderr() as stderr:\n+            self.assertEqual(parse_rst(title, ''), '<p>First line with leading newline.</p>\\n')\n+            self.assertEqual(parse_rst(body, ''), '<p>Second line of docstring.</p>\\n')\n+        self.assertEqual(stderr.getvalue(), '')\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -5,6 +53,7 @@ from django.contrib.admindocs.utils import (\n )\n \n from .tests import AdminDocsSimpleTestCase\n+from django.test.utils import captured_stderr\n \n \n @unittest.skipUnless(docutils_is_available, \"no docutils installed.\")\n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..fd9145c 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,39 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_splitarrayfield_booleanfield_checked_behavior(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [True, False, True, False])\n+        subwidgets = context['widget']['subwidgets']\n+\n+        # Verify that the 'checked' attribute is correctly set based on data\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in subwidgets],\n+            [{'checked': True}, {}, {'checked': True}, {}]\n+        )\n+\n+    def test_splitarrayfield_booleanfield_no_initial_data(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, False, False])\n+        subwidgets = context['widget']['subwidgets']\n+\n+        # Ensure no subwidget gets 'checked' if all initial data is False\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in subwidgets],\n+            [{}, {}, {}]\n+        )\n+\n+    def test_splitarrayfield_booleanfield_multiple_trues(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=5)\n+        context = widget.get_context('name', [True, True, False, True, False])\n+        subwidgets = context['widget']['subwidgets']\n+\n+        # Verify the correct 'checked' attributes for a mix of True and False\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in subwidgets],\n+            [{'checked': True}, {'checked': True}, {}, {'checked': True}, {}]\n+        )\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "diff --git a/tests/serializers/test_data.py b/tests/serializers/test_data.py\nindex abbb3ab..daacc5e 100644\n--- a/tests/serializers/test_data.py\n+++ b/tests/serializers/test_data.py\n@@ -14,6 +14,32 @@ from django.core import serializers\n from django.db import connection, models\n from django.test import TestCase\n \n+class Sample(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+    name = models.CharField(blank=True, max_length=100)\n+\n+class UUIDDefaultDataTest(TestCase):\n+    def test_explicit_pk_with_default(self):\n+        # Create initial instance to establish a primary key\n+        s0 = Sample.objects.create()\n+        original_pk = s0.pk\n+        \n+        # Create another instance with the explicit primary key\n+        s1 = Sample(pk=original_pk, name='Test 1')\n+\n+        try:\n+            # Attempt to save the instance\n+            s1.save()\n+            insert_failed = False\n+        except Exception as e:\n+            insert_failed = True\n+            print(\"Insert failed as expected due to duplicate primary key: \", e)\n+        \n+        # We expect the second insert attempt to fail\n+        self.assertTrue(insert_failed, \"In Django 3.0 and above, saving a model with an explicit pk should fail if the pk already exists.\")\n+\n+import uuid\n+from django.test import TestCase\n from .models import (\n     Anchor, AutoNowDateTimeData, BigIntegerData, BinaryData, BooleanData,\n     BooleanPKData, CharData, CharPKData, DateData, DatePKData, DateTimeData,\n@@ -26,7 +52,7 @@ from .models import (\n     ModifyingSaveData, NullBooleanData, O2OData, PositiveBigIntegerData,\n     PositiveIntegerData, PositiveIntegerPKData, PositiveSmallIntegerData,\n     PositiveSmallIntegerPKData, SlugData, SlugPKData, SmallData, SmallPKData,\n-    Tag, TextData, TimeData, UniqueAnchor, UUIDData,\n+    Tag, TextData, TimeData, UniqueAnchor, UUIDData, UUIDDefaultData,\n )\n from .tests import register_tests\n \n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..ccf705d 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,8 +77,29 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n         ]\n \n+        # New test cases to handle keyword-only arguments with default values\n+        templates_with_errors = [\n+            # This should raise because 'greeting' is the same keyword used multiple times\n+            ('{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}', \n+             \"'hi' received multiple values for keyword argument 'greeting'\"),\n+            # Test case for the corrected behavior with simple_tag using keyword-only with default\n+            ('{% load custom %}{% simple_keyword_only_default %}', \n+             'simple_keyword_only_default - Expected result: 42'),\n+        ]\n+\n+        for entry in templates_with_errors:\n+            if \"received multiple values\" in entry[1]:\n+                with self.assertRaisesMessage(TemplateSyntaxError, entry[1]):\n+                    t = self.engine.from_string(entry[0])\n+                    t.render(Context())\n+            else:\n+                t = self.engine.from_string(entry[0])\n+                self.assertEqual(t.render(Context()), entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -101,8 +122,29 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+        ]\n+\n+        # New test cases to handle keyword-only arguments with default values\n+        templates_with_errors = [\n+            # This should raise because 'greeting' is the same keyword used multiple times\n+            ('{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}', \n+             \"'hi' received multiple values for keyword argument 'greeting'\"),\n+            # Test case for the corrected behavior with simple_tag using keyword-only with default\n+            ('{% load custom %}{% simple_keyword_only_default %}', \n+             'simple_keyword_only_default - Expected result: 42'),\n         ]\n \n+        for entry in templates_with_errors:\n+            if \"received multiple values\" in entry[1]:\n+                with self.assertRaisesMessage(TemplateSyntaxError, entry[1]):\n+                    t = self.engine.from_string(entry[0])\n+                    t.render(Context())\n+            else:\n+                t = self.engine.from_string(entry[0])\n+                self.assertEqual(t.render(Context()), entry[1])\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -190,8 +232,29 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+        ]\n+\n+        # New test cases to handle keyword-only arguments with default values\n+        templates_with_errors = [\n+            # This should raise because 'greeting' is the same keyword used multiple times\n+            ('{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}', \n+             \"'hi' received multiple values for keyword argument 'greeting'\"),\n+            # Test case for the corrected behavior with simple_tag using keyword-only with default\n+            ('{% load custom %}{% simple_keyword_only_default %}', \n+             'simple_keyword_only_default - Expected result: 42'),\n         ]\n \n+        for entry in templates_with_errors:\n+            if \"received multiple values\" in entry[1]:\n+                with self.assertRaisesMessage(TemplateSyntaxError, entry[1]):\n+                    t = self.engine.from_string(entry[0])\n+                    t.render(Context())\n+            else:\n+                t = self.engine.from_string(entry[0])\n+                self.assertEqual(t.render(Context()), entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..4103a0b 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2430,6 +2431,28 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n         )\n \n+    def test_filefield_with_fileinput_required_and_initial_callable(self):\n+        class FileFormWithCallableInitial(Form):\n+            file1 = FileField(initial=lambda: 'resume.txt')\n+\n+        # A required file field with callable initial data shouldn't contain the 'required' HTML attribute.\n+        f = FileFormWithCallableInitial(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_filefield_with_fileinput_no_initial(self):\n+        class FileFormNoInitial(Form):\n+            file1 = FileField()\n+\n+        # A required file field without initial data should contain the 'required' HTML attribute.\n+        f = FileFormNoInitial(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n         f = FileForm(data={}, files={}, auto_id=False)\n         self.assertHTMLEqual(\n             f.as_table(),\n@@ -2478,6 +2501,28 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n \n+    def test_filefield_with_fileinput_required_and_initial_callable(self):\n+        class FileFormWithCallableInitial(Form):\n+            file1 = FileField(initial=lambda: 'resume.txt')\n+\n+        # A required file field with callable initial data shouldn't contain the 'required' HTML attribute.\n+        f = FileFormWithCallableInitial(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_filefield_with_fileinput_no_initial(self):\n+        class FileFormNoInitial(Form):\n+            file1 = FileField()\n+\n+        # A required file field without initial data should contain the 'required' HTML attribute.\n+        f = FileFormNoInitial(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n     def test_filefield_initial_callable(self):\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..aa79fc6 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -137,6 +138,37 @@ class ChoicesTests(SimpleTestCase):\n                 # A string is not permitted as the second argument to int().\n                 ONE = 1, 'X', 'Invalid'\n \n+from django.template import Context, Template\n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+\n+class Suit(models.IntegerChoices):\n+    DIAMOND = 1, _('Diamond')\n+    SPADE = 2, _('Spade')\n+\n+class YearInSchool(models.TextChoices):\n+    FRESHMAN = 'FR', _('Freshman')\n+    SOPHOMORE = 'SO', _('Sophomore')\n+    JUNIOR = 'JR', _('Junior')\n+    SENIOR = 'SR', _('Senior')\n+\n+class TestEnumIntegrationWithTemplates(SimpleTestCase):\n+\n+    def test_choices_in_templates(self):\n+        template = Template('{% if student.year_in_school == year_in_school.FRESHMAN %}Freshman{% endif %}')\n+        rendered = template.render(Context({'year_in_school': YearInSchool, 'student': {'year_in_school': 'FR'}}))\n+        self.assertEqual(rendered, 'Freshman')\n+\n+    def test_label_in_templates(self):\n+        template = Template('{{ year_in_school.FRESHMAN.label }}')\n+        rendered = template.render(Context({'year_in_school': YearInSchool}))\n+        self.assertEqual(rendered, 'Freshman')\n+\n+    def test_value_in_templates(self):\n+        template = Template('{{ year_in_school.FRESHMAN.value }}')\n+        rendered = template.render(Context({'year_in_school': YearInSchool}))\n+        self.assertEqual(rendered, 'FR')\n+\n         msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..68e839d 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,6 +1015,34 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n+    def test_onetoone_with_parent_link_order(self):\n+        \"\"\"Test the behavior of OneToOneField when ordering matters in relation to parent_link.\"\"\"\n+\n+        class Document(models.Model):\n+            pass\n+\n+        # Case 1: Order without parent_link on `origin`\n+        class Picking1(Document):\n+            document_ptr = models.OneToOneField(\n+                Document, on_delete=models.CASCADE, parent_link=True, related_name='+'\n+            )\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        errors_case1 = Picking1.check()\n+        # This should be fine, no errors expected\n+        self.assertEqual(errors_case1, [])\n+\n+        # Case 2: Order with parent_link mistakenly on `origin` first\n+        class Picking2(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(\n+                Document, on_delete=models.CASCADE, parent_link=True, related_name='+'\n+            )\n+\n+        errors_case2 = Picking2.check()\n+        # Although the order is swapped, it should not require additional parent_link\n+        self.assertEqual(errors_case2, [])\n+\n     def test_m2m_table_name_clash(self):\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..893571f 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -223,6 +223,15 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         ret = self.process_request(\"get\", \"/some/url\")\n         self.assertIsNone(ret)\n \n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY not set, the middleware should default to\n+        \"Referrer-Policy: same-origin\".\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n+\n     @override_settings(SECURE_REFERRER_POLICY=None)\n     def test_referrer_policy_off(self):\n         \"\"\"\n@@ -254,4 +263,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..5a3ae21 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,6 +13,8 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+from django.contrib.auth.models import User\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..37888e4 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,7 +1759,30 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_while_maintaining_unique_together(self):\n+        app_label = 'test_alter_index_together_and_unique'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Remove index together, but keep unique together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..f4e6ac3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..fd2cf21 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,6 +172,10 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n+        # Call the execute_sql_flush without the alias parameter to test the new signature.\n+        connection.ops.execute_sql_flush(sql_list)\n+        \n+        # Keeping the original test case to ensure old behavior remains correct.\n         connection.ops.execute_sql_flush(connection.alias, sql_list)\n \n         with transaction.atomic():\n@@ -181,4 +185,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..a8fa77f 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,8 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -194,7 +196,43 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..717a030 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -905,7 +905,20 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(Child.check(), [])\n \n-    def test_ordering_pointing_to_foreignkey_field(self):\n+    def test_ordering_handles_non_transform_lookups(self):\n+        class Supply(models.Model):\n+            product = models.ForeignKey('Product', models.CASCADE, null=True)\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..c8dbd9d 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,36 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_in_group_by_clause(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        group_by_cols = expr.get_group_by_cols(alias=None)\n+        # For constants, the group by clause should be empty because the const value\n+        # doesn't need to be grouped, thus should not appear in the GROUP BY sql clause.\n+        self.assertEqual(group_by_cols, [])\n+\n+    def test_nested_expression_in_group_by_clause(self):\n+        expr = ExpressionWrapper(ExpressionWrapper(Value(3), output_field=IntegerField()), output_field=IntegerField())\n+        group_by_cols = expr.get_group_by_cols(alias=None)\n+        # Even with wrapping, the constant value should still not be in the GROUP BY clause.\n+        self.assertEqual(group_by_cols, [])\n+\n+    def test_function_in_group_by_clause(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        group_by_cols = expr.get_group_by_cols(alias=None)\n+        # A function over a constant_value should be in the group_by_cols.\n+        self.assertEqual(group_by_cols, [expr.expression])\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "",
  "django__django-13033": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\nindex ec1f9e4..7920510 100644\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -23,7 +23,17 @@ class Author(models.Model):\n         ordering = ('-pk',)\n \n \n-class Article(models.Model):\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"OneModel\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n     author = models.ForeignKey(Author, models.SET_NULL, null=True)\n     second_author = models.ForeignKey(Author, models.SET_NULL, null=True, related_name='+')\n     headline = models.CharField(max_length=100)\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..dc9bb81 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -615,6 +615,32 @@ class BaseCacheTests:\n                 count += 1\n         self.assertEqual(count, final_count)\n \n+    def test_cull_none_subscriptable(self):\n+        # This test simulates the cursor.fetchone() returning None, which leads to 'NoneType' is not subscriptable error\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented for this cache backend.\")\n+        \n+        old_max_entries = cull_cache._max_entries\n+        # Force _cull to happen with no deletions possible (simulate empty table)\n+        cull_cache._max_entries = 0\n+        \n+        # Mock the cursor's fetchone method to return None\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"DELETE FROM cache_table\")  # Assuming 'cache_table' is the cache table name\n+            # Assuming the cull_sql returns some SQL command\n+            cull_sql = connection.ops.cache_key_culling_sql()\n+            cursor.execute(cull_sql % \"cache_table\", [0])\n+            fetch_result = cursor.fetchone()  # This will be None\n+\n+            if fetch_result is not None:\n+                # This is the condition we expect to prevent 'NoneType' error\n+                cursor.execute(\"DELETE FROM cache_table WHERE cache_key < %s\", [fetch_result[0]])\n+\n+        # Return max entries to its original value\n+        cull_cache._max_entries = old_max_entries\n+\n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n \n",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..0aeaa23 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -28,8 +28,20 @@ class Category(models.Model):\n         return self.__str__()\n \n \n+class WriterManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        return qs.filter(archived=False)\n+\n class Writer(models.Model):\n     name = models.CharField(max_length=50, help_text='Use both first and last names.')\n+    archived = models.BooleanField(default=False)\n+\n+    objects = WriterManager()\n+\n+    class Meta:\n+        ordering = ('name',)\n+    name = models.CharField(max_length=50, help_text='Use both first and last names.')\n \n     class Meta:\n         ordering = ('name',)\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..2a58520 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -873,6 +873,37 @@ class StateTests(SimpleTestCase):\n         This test relies on the fact that contenttypes is always loaded.\n         \"\"\"\n         new_apps = Apps()\n+        \n+        class DJ_RegLogin_Category(models.Model):\n+            title = models.CharField(max_length=100, db_index=True)\n+            slug = models.SlugField(max_length=100, db_index=True)\n+\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+\n+        class DJ_RegLogin_Content(models.Model):\n+            title = models.CharField(max_length=100, unique=True)\n+            slug = models.SlugField(max_length=100, unique=True)\n+            category = models.ForeignKey(DJ_RegLogin_Category, on_delete=models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+        \n+        # Create a new state with the models and verify they appear in the app registry\n+        state = ProjectState()\n+        state.add_model(ModelState.from_model(DJ_RegLogin_Category))\n+        state.add_model(ModelState.from_model(DJ_RegLogin_Content))\n+        self.assertEqual(len(state.apps.get_models()), 2)\n+\n+        # Verify that makemigrations for mixed-case app labels does not crash\n+        try:\n+            class MigrationWriter:\n+                pass  # Assume a minimal migration writer to proceed\n+            MigrationWriter(state)  # Attempt to write a migration file\n+        except Exception as e:\n+            self.fail(f\"makemigrations crashed with mixed-case app label: {e}\")\n \n         class TestModel(models.Model):\n             ct = models.ForeignKey(\"contenttypes.ContentType\", models.CASCADE)\n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..0c6db4a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1626,8 +1626,15 @@ class FTimeDeltaTests(TestCase):\n         )\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n-\n-    def test_duration_with_datetime(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Test subtraction of datetime fields directly\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for obj in queryset:\n+            expected_delta = obj.end - obj.start\n+            self.assertEqual(obj.delta, expected_delta)\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..5f623a7 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -45,7 +45,13 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__lte=4)\n         self.assertNumbersEqual(qs1.difference(qs2), [5], ordered=False)\n \n-    def test_union_distinct(self):\n+    def test_union_none_with_queryset_none(self):\n+        \"\"\"\n+        Test that using .none() on a union queryset correctly returns no results.\n+        \"\"\"\n+        qs1 = Number.objects.filter(num__lte=1).union(Number.objects.filter(num__gte=8))\n+        self.assertNumbersEqual(qs1.none(), [])\n+        self.assertNumbersEqual(qs1, [0, 1, 8, 9], ordered=False)\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.all()\n         self.assertEqual(len(list(qs1.union(qs2, all=True))), 20)\n",
  "django__django-13279": "",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..efa7c54 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -590,7 +590,24 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    def test_template_params_filtering(self):\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                # Simulate the environment where kwargs.get returns a SimpleLazyObject\n+                from django.utils.functional import SimpleLazyObject\n+                lazy_offer_slug = SimpleLazyObject(lambda: offer_slug)\n+                offer = get_object_or_404(Account, slug=str(lazy_offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": str(lazy_offer_slug)}\n+\n+        # Mock the Account object method get_object_or_404 for testing\n+        test_slug = 'test-offer-slug'\n+        account = Account.objects.create(slug=test_slug)\n+        response = OfferView.as_view()(self.rf.get('/'), offer_slug=account.slug)\n+        self.assertEqual(response.context_data['offer_slug'], account.slug)\n+        self.assertEqual(response.context_data['offer'], account)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..9042f80 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -16,6 +16,7 @@ from django.forms.models import (\n )\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n@@ -2830,7 +2831,68 @@ class LimitChoicesToTests(TestCase):\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n \n-class FormFieldCallbackTests(SimpleTestCase):\n+class DuplicateForeignKeyOptionsTests(TestCase):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        marley = Character.objects.create(username='Marley', last_action='2023-10-10T00:00:00Z')\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-10T00:00:00Z')\n+\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..996b5ba 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -82,7 +82,27 @@ class FileSystemStorageTests(unittest.TestCase):\n         path, args, kwargs = storage.deconstruct()\n         self.assertEqual(kwargs, kwargs_orig)\n \n-    def test_lazy_base_url_init(self):\n+    def test_deconstruction_retains_callable(self):\n+        \"\"\"\n+        Ensure deconstruction retains the original callable for storage.\n+        \"\"\"\n+        storage_field = Storage()\n+        _, kwargs = storage_field._meta.get_field('storage_callable').deconstruct()[1:3]\n+        self.assertIs(kwargs['storage'], callable_storage)\n+\n+    def test_different_callables(self):\n+        \"\"\"\n+        Test deconstruction with different callable storages.\n+        \"\"\"\n+\n+        def secondary_callable_storage():\n+            return temp_storage\n+\n+        # Add a field with a different callable\n+        storage_field = Storage()\n+        storage_field.storage_callable = secondary_callable_storage\n+        _, kwargs = storage_field._meta.get_field('storage_callable').deconstruct()[1:3]\n+        self.assertIs(kwargs['storage'], secondary_callable_storage)\n         \"\"\"\n         FileSystemStorage.__init__() shouldn't evaluate base_url.\n         \"\"\"\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..31d9ed6 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,7 +632,37 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n-    def test_key_icontains(self):\n+    def test_key_in(self):\n+        tests = [\n+            ('value__c__in', [14], self.objs[3:5]),\n+            ('value__c__in', [14, 15], self.objs[3:5]),\n+            ('value__0__in', [1], [self.objs[5]]),\n+            ('value__0__in', [1, 3], [self.objs[5]]),\n+            ('value__foo__in', ['bar'], [self.objs[7]]),\n+            ('value__foo__in', ['bar', 'baz'], [self.objs[7]]),\n+            ('value__bar__in', [['foo', 'bar']], [self.objs[7]]),\n+            ('value__bar__in', [['foo', 'bar'], ['a']], [self.objs[7]]),\n+            ('value__bax__in', [{'foo': 'bar'}, {'a': 'b'}], [self.objs[7]]),\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n+\n+    def test_in_key_transform(self):\n+        # Assuming self.objs is populated with suitable test data\n+        # Test that the __in operator works with key transforms\n+        # Simulating the issue from the description\n+        first_filter = {'value__key__in': [0]}\n+        second_filter = {'value__key': 0}\n+\n+        first_items = NullableJSONModel.objects.filter(**first_filter)\n+        second_items = NullableJSONModel.objects.filter(**second_filter)\n+\n+        self.assertEqual(len(first_items), len(second_items))\n+        self.assertSequenceEqual(first_items, second_items)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n     def test_key_startswith(self):\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..561168b 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -14,6 +14,8 @@ from django.db.models.functions import (\n     TruncMinute, TruncMonth, TruncQuarter, TruncSecond, TruncTime, TruncWeek,\n     TruncYear,\n )\n+import pytz\n+from datetime import datetime\n from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n@@ -1133,7 +1135,43 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_trunc_date_with_tzinfo(self):\n+        start_datetime = datetime(2023, 10, 25, 13, 45, 20, 123456)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            pacific_date=TruncDate('start_datetime', tzinfo=pacific),\n+        ).order_by('start_datetime').get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        pacific_start_datetime = start_datetime.astimezone(pacific)\n+\n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.pacific_date, pacific_start_datetime.date())\n+\n+    def test_trunc_time_with_tzinfo(self):\n+        start_datetime = datetime(2023, 10, 25, 13, 45, 20, 123456)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+\n+        model = DTModel.objects.annotate(\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            pacific_time=TruncTime('start_datetime', tzinfo=pacific),\n+        ).order_by('start_datetime').get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        pacific_start_datetime = start_datetime.astimezone(pacific)\n+\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.pacific_time, pacific_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..1665a08 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -93,7 +93,76 @@ class BasicFieldTests(SimpleTestCase):\n     def test_field_instance_is_picklable(self):\n         \"\"\"Field instances can be pickled.\"\"\"\n         field = models.Field(max_length=100, default='a string')\n-        # Must be picklable with this cached property populated (#28188).\n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+class FieldEqualityTests(SimpleTestCase):\n+    \n+    def test_abstract_model_field_equality(self):\n+        \"\"\"Fields from different inherited models should not be equal.\"\"\"\n+\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritModel1(AbstractModel):\n+            pass\n+\n+        class InheritModel2(AbstractModel):\n+            pass\n+\n+        # Fetch fields from models\n+        inherit1_field = InheritModel1._meta.get_field('field')\n+        inherit2_field = InheritModel2._meta.get_field('field')\n+\n+        # Test they are not equal\n+        self.assertNotEqual(inherit1_field, inherit2_field)\n+\n+    def test_abstract_model_field_hashing(self):\n+        \"\"\"Hashes of fields from different models should not be equal.\"\"\"\n+\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritModel1(AbstractModel):\n+            pass\n+\n+        class InheritModel2(AbstractModel):\n+            pass\n+\n+        # Fetch fields from models\n+        inherit1_field = InheritModel1._meta.get_field('field')\n+        inherit2_field = InheritModel2._meta.get_field('field')\n+\n+        # Test their hashes are not equal\n+        self.assertNotEqual(hash(inherit1_field), hash(inherit2_field))\n+\n+    def test_abstract_model_field_ordering(self):\n+        \"\"\"Ensure fields from different models have predictable ordering.\"\"\"\n+\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritModel1(AbstractModel):\n+            pass\n+\n+        class InheritModel2(AbstractModel):\n+            pass\n+\n+        # Fetch fields from models\n+        inherit1_field = InheritModel1._meta.get_field('field')\n+        inherit2_field = InheritModel2._meta.get_field('field')\n+\n+        # Order tests based on creation_counter\n+        self.assertLess(inherit1_field.creation_counter, inherit2_field.creation_counter)  # Assuming order by creation_counter\n         field._get_default\n         pickle.dumps(field)\n \n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..6ac7e30 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -16,7 +17,8 @@ from django.core.files.uploadedfile import (\n     InMemoryUploadedFile, SimpleUploadedFile, TemporaryUploadedFile,\n     UploadedFile,\n )\n-from django.test import override_settings\n+from django.core.files import locks\n+from pathlib import Path\n \n try:\n     from PIL import Image\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..941d242 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2076,6 +2076,27 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_empty_queryset(self):\n         self.assertIs(Annotation.objects.none().ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Tag.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Tag.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+        \n+    def test_group_by_with_meta_ordering(self):\n+        qs = Foo.objects.annotate(count=Count('pk'))\n+        self.assertIs(qs.ordered, False, \"QuerySet should not be marked as ordered without explicit ordering when using GROUP BY.\")\n+        qs = qs.order_by('name')\n+        self.assertIs(qs.ordered, True, \"QuerySet should be ordered after adding order_by.\")\n+        \n+    def test_group_by_no_meta_ordering(self):\n+        # Assuming NoOrderFoo is a model with no Meta.ordering defined\n+        qs = NoOrderFoo.objects.annotate(count=Count('pk'))\n+        self.assertIs(qs.ordered, False, \"QuerySet should not be marked as ordered with GROUP BY and no Meta.ordering.\")\n+\n     def test_order_by_extra(self):\n         self.assertIs(Annotation.objects.all().extra(order_by=['id']).ordered, True)\n \n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..b97100c 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from django.contrib.auth.models import User\n+from .with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +40,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertTrue(p0.check_token(user, tk1))\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertFalse(p0.check_token(user, tk1))\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..1d9ed73 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,8 +1,10 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n+from django.db.models import Q, UniqueConstraint\n from django.db import models\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n@@ -194,7 +196,23 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_custom_permission_name_max_length(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithTotalUniqueConstraint')\n+    def test_username_with_total_unique_constraint(self):\n+        class UserWithTotalUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+            \n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_total_unique'),\n+                ]\n+        \n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [])\n         custom_permission_name = 'some ridiculously long verbose name that is out of control' * 5\n \n         class Checked(models.Model):\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..e63a642 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n@@ -815,7 +817,29 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        # Original test to ensure fix\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_within_boundaries(self):\n+        # Additional case to test named tuple with exact match conditions\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_out_of_boundaries(self):\n+        # Additional case to test named tuple with no match\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=200),\n+        )\n+        self.assertSequenceEqual(qs, [])\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..50e54ff 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -14,6 +14,7 @@ import unittest\n from io import StringIO\n from unittest import mock\n \n+import os  # Import os for simulating different argv environments\n from django import conf, get_version\n from django.conf import settings\n from django.core.management import (\n@@ -28,6 +29,7 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from django.test.utils import captured_stderr, captured_stdout  # Import captured_stderr, captured_stdout for output capture\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n",
  "django__django-13670": "",
  "django__django-13741": "",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..7077769 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,65 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_alter_model_options_removes_specified_options(self):\n+        \"\"\"\n+        Test that AlterModelOptions can remove specific options.\n+        Specifically, test squashing AlterModelOptions into CreateModel.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'permissions': [('can_edit', 'Can edit')],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    \"MyModel\",\n+                    options={'verbose_name': 'My New Model'}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My New Model',\n+                    },\n+                ),\n+            ],\n+        )\n+\n+    def test_alter_model_options_empty_squash(self):\n+        \"\"\"\n+        Test squashing AlterModelOptions with empty options dict after CreateModel,\n+        ensuring options are fully removed as expected.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'permissions': [('can_view', 'Can view')],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    \"MyModel\",\n+                    options={}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                ),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n@@ -134,6 +193,65 @@ class OptimizerTests(SimpleTestCase):\n             [],\n         )\n \n+    def test_alter_model_options_removes_specified_options(self):\n+        \"\"\"\n+        Test that AlterModelOptions can remove specific options.\n+        Specifically, test squashing AlterModelOptions into CreateModel.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'permissions': [('can_edit', 'Can edit')],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    \"MyModel\",\n+                    options={'verbose_name': 'My New Model'}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My New Model',\n+                    },\n+                ),\n+            ],\n+        )\n+\n+    def test_alter_model_options_empty_squash(self):\n+        \"\"\"\n+        Test squashing AlterModelOptions with empty options dict after CreateModel,\n+        ensuring options are fully removed as expected.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'permissions': [('can_view', 'Can view')],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    \"MyModel\",\n+                    options={}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                ),\n+            ],\n+        )\n+\n     def test_create_alter_unique_delete_model(self):\n         self._test_create_alter_foo_delete_model(migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]))\n \n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..f3c9e71 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,7 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy\n+from django.utils.functional import lazy\n \n from ..utils import setup\n \n@@ -41,6 +44,26 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add06', {'t1': (3, 4), 't2': (1, 2)})\n         self.assertEqual(output, '(3, 4, 1, 2)')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string('add08', {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')})\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string('add09', {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')})\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_addition(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n+    @setup({'add10': '{{ lazy_s1|add:s2 }}'})\n+    def test_add10(self):\n+        output = self.engine.render_to_string('add10', {'lazy_s1': gettext_lazy('lazy '), 's2': 'string'})\n+        self.assertEqual(output, 'lazy string')\n+\n     @setup({'add07': '{{ d|add:t }}'})\n     def test_add07(self):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n",
  "django__django-13807": "",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..84ae14e 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,12 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import mock\n+from io import StringIO\n+from django.core.management import call_command\n+from django.test import TestCase\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..19ced2d 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,7 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n@@ -512,6 +514,37 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_loading_regular_package_without_file_in_frozen_env(self):\n+        \"\"\"\n+        To support frozen environments, MigrationLoader should load migrations \n+        from regular packages that do not have a __file__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n+        loader = MigrationLoader(connection)\n+        \n+        # Store original state of the module to restore later\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        \n+        try:\n+            # Simulate a frozen environment by removing __file__ and setting attributes\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            \n+            loader.load_disk()\n+            migrations = [\n+                name for app, name in loader.disk_migrations if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            # Restore the original state of the module\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..a9705d1 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -451,6 +451,26 @@ class RestartWithReloaderTests(SimpleTestCase):\n             self.assertEqual(mock_call.call_count, 1)\n             self.assertEqual(mock_call.call_args[0][0], [self.executable, '-Wall', '-m', 'django'] + argv[1:])\n \n+    @mock.patch.dict('sys.modules', {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n+\n+    @mock.patch('sys.argv', ['-m', 'pkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_package_other_than_django(self):\n+        class MockSpec:\n+            parent = 'pkg_other_than_django'\n+        with mock.patch('types.ModuleType.__spec__', MockSpec()):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'pkg_other_than_django', 'runserver']\n+            )\n+\n \n class ReloaderTests(SimpleTestCase):\n     RELOADER_CLS = None\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..7fb4bc6 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -370,6 +370,10 @@ def mocked_is_overridden(self, setting):\n         self.DEFAULT_AUTO_FIELD != 'django.db.models.AutoField'\n     )\n \n+from django.core.checks import Warning, register\n+from django.db import models\n+from django.test import SimpleTestCase, override_settings\n+import mock\n \n @mock.patch('django.conf.UserSettingsHolder.is_overridden', mocked_is_overridden)\n @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n@@ -403,6 +407,22 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n     def test_explicit_pk(self):\n+        class ExplicitParent(models.Model):\n+            identifier = models.CharField(max_length=50, primary_key=True)\n+\n+        class InheritedChild(ExplicitParent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_no_warning_with_default_auto_field_and_explicit_pk(self):\n+        class Parent(models.Model):\n+            custom_id = models.BigAutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n         class Model(models.Model):\n             id = models.BigAutoField(primary_key=True)\n \n@@ -414,4 +434,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..0e63436 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -298,6 +298,15 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n+        # Test ModelChoiceField with custom error message including invalid value\n+        f_custom = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not a valid choice.'\n+            }\n+        )\n+        self.assertFormErrors(['\"invalid\" is not a valid choice.'], f_custom.clean, 'invalid')\n+\n         # ModelMultipleChoiceField\n         e = {\n             'required': 'REQUIRED',\n@@ -307,4 +316,14 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+\n+        # Test ModelMultipleChoiceField with custom error message for multiple invalid values\n+        f_custom_multi = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not a valid choice.'\n+            }\n+        )\n+        self.assertFormErrors(['\"invalid1\" is not a valid choice.'], f_custom_multi.clean, ['invalid1'])\n+        self.assertFormErrors(['\"invalid1\" is not a valid choice.', '\"invalid2\" is not a valid choice.'], f_custom_multi.clean, ['invalid1', 'invalid2'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..957e609 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,12 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..4aba06c 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,10 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, Employee, Foo, CustomAutoFieldModel\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n \n \n class BasicCustomPKTests(TestCase):\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..ecdc59e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -816,6 +816,31 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+    def test_commutative_q_and_exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        # Test commutative property of & operator\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) & Q()),\n+            Employee.objects.filter(Q() & Exists(is_ceo))\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_poc) & Q()),\n+            Employee.objects.filter(Q() & Exists(is_poc))\n+        )\n+        \n+        # Test commutative property of | operator\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) | Q()),\n+            Employee.objects.filter(Q() | Exists(is_ceo))\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_poc) | Q()),\n+            Employee.objects.filter(Q() | Exists(is_poc))\n+        )\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..38f990f 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,29 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicates_in_post_processed_files(self):\n+        # Initialize the command and options for collectstatic\n+        collectstatic_args = {\n+            'interactive': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+        }\n+\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Assert that no file is post-processed more than once\n+        post_processed_set = set(stats['post_processed'])\n+        self.assertCountEqual(stats['post_processed'], post_processed_set)\n+\n+        # Check for specific files if needed\n+        self.assertIn(os.path.join('cached', 'css', 'window.css'), post_processed_set)\n+        self.assertIn(os.path.join('test', 'nonascii.css'), post_processed_set)\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +237,29 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicates_in_post_processed_files(self):\n+        # Initialize the command and options for collectstatic\n+        collectstatic_args = {\n+            'interactive': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+        }\n+\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Assert that no file is post-processed more than once\n+        post_processed_set = set(stats['post_processed'])\n+        self.assertCountEqual(stats['post_processed'], post_processed_set)\n+\n+        # Check for specific files if needed\n+        self.assertIn(os.path.join('cached', 'css', 'window.css'), post_processed_set)\n+        self.assertIn(os.path.join('test', 'nonascii.css'), post_processed_set)\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..c86069d 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -11,6 +12,7 @@ from django.utils.datastructures import (\n     MultiValueDictKeyError, OrderedSet,\n )\n \n+import collections.abc\n \n class OrderedSetTests(SimpleTestCase):\n \n@@ -18,7 +20,24 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        # Test that reversing an OrderedSet returns an iterator\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        # Convert the iterator to a list and check the order is reversed\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        # Test reversing an empty OrderedSet\n+        s = reversed(OrderedSet())\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        # Test reversing an OrderedSet with a single element\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..d3e6125 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -65,6 +66,19 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Ensure that default ordering (Meta.ordering) does not affect the\n+        GROUP BY clauses in aggregate queries.\n+        \"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n+\n     def test_order_by_override(self):\n         \"\"\"\n         Only the last order_by has any effect (since they each override any\n@@ -483,4 +497,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..e44c7e5 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,31 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +107,31 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..1da2d8f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -182,7 +182,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n-    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_dotted(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..561242d 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -229,6 +229,14 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+\n+    # Newlines, carriage returns, and tabs should raise ValidationError\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..6dfad05 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1525,6 +1525,30 @@ class AggregationTests(TestCase):\n             allow_distinct = True\n         DistinctAggregate('foo', distinct=True)\n \n+    @skipUnlessDBFeature('supports_subqueries_in_group_by')\n+    def test_having_subquery_select(self):\n+        authors = Author.objects.filter(pk=self.a1.pk)\n+        books = Book.objects.annotate(Count('authors')).filter(\n+            Q(authors__in=authors) | Q(authors__count__gt=2)\n+        )\n+        self.assertEqual(set(books), {self.b1, self.b4})\n+\n+    def test_q_object_or_behavior(self):\n+        property_groups = PropertyGroup.objects.agent_groups(self.management_agent)\n+        queryset = self.annotate(Count(\"agent__property_groups\"))\n+        with self.assertRaises(ProgrammingError):\n+            queryset.filter(\n+                Q(agent__property_groups__in=property_groups)\n+                | Q(agent__property_groups__count=0)\n+            ).distinct()\n+\n+        # Ensure this works correctly as per the issue fix\n+        queryset = self.annotate(Count(\"agent__property_groups\"))\n+        queryset.filter(\n+            Q(agent__property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n+            | Q(agent__property_groups__count=0)\n+        ).distinct()\n+\n \n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..658cc8d 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -68,6 +68,37 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_non_deprecated_keys_preferred(self):\n+        settings_port = 444\n+        options_port = 555\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'optionpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..b65788f 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2186,6 +2186,24 @@ class SchemaTests(TransactionTestCase):\n         # Re-add unique together\n         with connection.schema_editor() as editor:\n             editor.alter_unique_together(AuthorWithUniqueNameAndBirthday, [], unique_together)\n+\n+    def test_unique_constraint_references_column(self):\n+        # Create model and constraint\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='name_unique')\n+        # Add constraint\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertIs(sql.references_table(table), True)\n+        self.assertIs(sql.references_column(table, 'name'), True)\n+        self.assertIs(sql.references_column(table, 'non_existent_column'), False)\n+        # Remove constraint\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n         constraints = self.get_constraints(AuthorWithUniqueNameAndBirthday._meta.db_table)\n         self.assertIn(custom_constraint_name, constraints)\n         other_constraints = [\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..f3124e4 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -453,6 +453,20 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n             2,\n         )\n \n+from io import StringIO\n+from django.test.utils import override_settings\n+from django.contrib.staticfiles.management.commands.collectstatic import Command as CollectStaticCommand\n+from staticfiles_tests.storage import MyManifestStaticFilesStorage\n+\n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoPostProcessReplacedPathStorage')\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n+\n+    def test_collectstatistic_no_post_process_replaced_paths(self):\n+        stdout = StringIO()\n+        CollectStaticCommand().execute(stdout=stdout, verbosity=1)\n+        self.assertIn('post-processed', stdout.getvalue())\n+\n \n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n class TestCollectionNoneHashStorage(CollectionTestCase):\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..c1f00eb 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -641,6 +641,41 @@ class ExecutorTests(MigrationTestBase):\n         recorder = MigrationRecorder(connection)\n         # Record all replaced migrations as applied\n         recorder.record_applied(\"migrations\", \"0001_initial\")\n+\n+    def test_unapply_squashed_migration_with_replacements(self):\n+        \"\"\"\n+        Test that unapplying a squashed migration does not leave the squashed\n+        migration applied if the replaced migrations are unapplied.\n+        \"\"\"\n+        # Initial setup: Mark the squashed migration as applied\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+\n+        # Verify the squashed migration is marked as applied\n+        self.assertIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n+        # Unapply the squashed migration\n+        executor.migrate([('migrations', None)], fake=False)\n+\n+        # Verify the squashed migration is not marked as applied anymore\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        \n+        # Additional checks ensuring that replacement migrations are also\n+        # unapplied.\n+        self.assertNotIn(\n+            ('migrations', '0001_initial'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            ('migrations', '0002_second'),\n+            executor.recorder.applied_migrations(),\n+        )\n         recorder.record_applied(\"migrations\", \"0002_second\")\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..bf8c438 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -123,7 +123,31 @@ class BulkUpdateTests(TestCase):\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             CustomPk.objects.bulk_update([], ['name'])\n \n-    def test_empty_objects(self):\n+    def test_return_value_no_objects(self):\n+        \"\"\"Test that bulk_update returns 0 when no objects are passed.\"\"\"\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_return_value_multiple_objects(self):\n+        \"\"\"Test that bulk_update returns correct number of updated rows for multiple objects.\"\"\"\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = 'updated-note'\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_return_value_with_duplicates(self):\n+        \"\"\"Test return value when duplicates are present in the input list.\"\"\"\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        # Test with different batch sizes to cover more cases\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         with self.assertNumQueries(0):\n             Note.objects.bulk_update([], ['note'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..9a91977 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -338,6 +338,31 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n \n+    def test_formset_non_form_errors_css_class(self):\n+        \"\"\"\n+        Verify that the nonform CSS class is applied to non-form errors in the formset.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3',  # the number of forms rendered\n+            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'choices-MIN_NUM_FORMS': '1',  # min number of forms\n+            'choices-MAX_NUM_FORMS': '0',  # max number of forms\n+            'choices-0-choice': 'Tea',\n+            'choices-0-votes': '100',\n+            'choices-1-choice': 'Coffee',\n+            'choices-1-votes': '50',\n+            'choices-2-choice': 'Tea',  # Duplicate entry to trigger a non-form error\n+            'choices-2-votes': '70',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=0)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        # Verify that non-form errors contain the \"nonform\" CSS class\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n+\n     def test_formset_validate_min_flag(self):\n         \"\"\"\n         If validate_min is set and min_num is more than TOTAL_FORMS in the\n@@ -983,6 +1008,21 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',  # the number of forms rendered\n+            'drinks-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'drinks-MIN_NUM_FORMS': '0',  # min number of forms\n+            'drinks-MAX_NUM_FORMS': '0',  # max number of forms\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..bf5841e 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,44 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_datetime_clean_initial_callable_disabled_consistency(self):\n+        \"\"\"\n+        Test that the cleaned data for a disabled DateTimeField with\n+        a callable initial value matches the initial value of the BoundField.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        self.assertEqual(form.cleaned_data['dt'], form['dt'].initial)\n+\n+    def test_changed_data_method_logic(self):\n+        \"\"\"\n+        Test that the logic for detecting changes in form data is\n+        accurately moved to the BoundField.\n+        \"\"\"\n+        class SimpleForm(forms.Form):\n+            field_1 = forms.CharField(initial=\"initial value\")\n+            field_2 = forms.CharField()\n+\n+        form = SimpleForm({'field_1': 'initial value', 'field_2': 'changed value'})\n+        self.assertEqual(form.changed_data, ['field_2'])\n+\n+    def test_clean_fields_access_via_boundfield(self):\n+        \"\"\"\n+        Test that _clean_fields accesses field initial values via BoundField.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        bf = form['dt']\n+        self.assertEqual(bf.initial, now)\n+        self.assertEqual(form.cleaned_data['dt'], datetime.datetime(2006, 10, 25, 14, 30, 45))\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..7680bc4 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -3,6 +3,8 @@ from operator import attrgetter\n \n from django.db import IntegrityError\n from django.test import TestCase\n+from django.db import models\n+from django.core.checks import Error\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n@@ -10,8 +12,32 @@ from .models import (\n     Relationship, SymmetricalFriendship,\n )\n \n-\n-class M2mThroughTests(TestCase):\n+class ProxyModelHashTests(TestCase):\n+    def test_proxy_model_m2m_through_fields_hashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            \n+        try:\n+            Child.check()\n+        except TypeError as e:\n+            self.fail(f\"Hashable test failed for proxy model M2M 'through_fields': {e}\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.bob = Person.objects.create(name='Bob')\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..74a401c 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -9,7 +10,11 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n+import datetime\n from django.urls import reverse, reverse_lazy\n+from django.test import TestCase\n+from django.http import JsonResponse\n+from .models import Question\n \n from .admin import AnswerAdmin, QuestionAdmin\n from .models import (\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..34af950 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,6 +923,23 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n+    def test_real_apps_as_set(self):\n+        \"\"\"\n+        Tests that ProjectState accepts 'real_apps' as a set without any issues.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_as_none(self):\n+        \"\"\"\n+        Tests that ProjectState can handle 'real_apps' as None.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps=None)\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError when initialized with None!\")\n \n     def test_ignore_order_wrt(self):\n         \"\"\"\n",
  "django__django-14771": "",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..28d41ba 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,7 +271,37 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n-    def test_new_attribute(self):\n+    def test_wrapper_assignments_preserved(self):\n+        \"\"\"@method_decorator preserves wrapper assignments of a function decorated with a partial object.\"\"\"\n+        from functools import partial, update_wrapper, wraps\n+        \n+        func_name = None\n+        func_module = None\n+\n+        def sample_decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, \"__name__\", None)\n+                func_module = getattr(func, \"__module__\", None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class TestClass:\n+            @method_decorator(sample_decorator)\n+            def method(self):\n+                return \"test\"\n+\n+        # Simulate using partial without proper __name__ preservation\n+        partial_func = partial(TestClass().method)\n+        update_wrapper(partial_func, TestClass().method)\n+\n+        # Call the method to invoke the decorator\n+        partial_func()\n+\n+        # Assert that the wrapper assignments have been preserved\n+        self.assertEqual(func_name, \"method\")\n+        self.assertIsNotNone(func_module)\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n             func.x = 1\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..3e9b115 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,37 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(chapter=chapter, language=language)\n+\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,)))\n+        \n+        # Verifying foreign key link URL for the language field on the specified admin site\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields render as links in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields render as links in a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('namespaced_admin')\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..943bd3d 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -279,7 +280,23 @@ class ModelChoiceFieldTests(TestCase):\n         field = CustomModelChoiceField(Category.objects.all())\n         self.assertIsInstance(field.choices, CustomModelChoiceIterator)\n \n-    def test_choice_iterator_passes_model_to_widget(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        # Ensure that ModelChoiceIteratorValue is hashable\n+        self.assertIsInstance(hash(value_1), int)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+        # Test using ModelChoiceIteratorValue as keys in a dictionary\n+        test_dict = {value_1: \"value1\", value_2: \"value2\"}\n+        self.assertEqual(test_dict[value_1], \"value1\")\n+        self.assertEqual(test_dict[value_2], \"value2\")\n+\n+        # Test using ModelChoiceIteratorValue in a set\n+        test_set = {value_1, value_2}\n+        self.assertIn(value_1, test_set)\n+        self.assertIn(value_2, test_set)\n         class CustomCheckboxSelectMultiple(CheckboxSelectMultiple):\n             def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n                 option = super().create_option(name, value, label, selected, index, subindex, attrs)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..b1a32fb 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -790,6 +790,29 @@ class OperationTests(OperationTestBase):\n         rider = Rider.objects.create()\n         pony.riders.add(rider)\n         self.assertEqual(Pony.objects.count(), 2)\n+\n+    def test_rename_model_with_db_table_noop_extended(self):\n+        # Additional test to ensure RenameModel with db_table is a noop\n+        app_label = 'test_rmwdbtn_extended'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Horse', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'horse'}),\n+            migrations.CreateModel('Stable', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('horse', models.ForeignKey('%s.Horse' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Horse', 'Stallion')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n",
  "django__django-15022": "diff --git a/tests/admin_changelist/admin.py b/tests/admin_changelist/admin.py\nindex 580e58f..daca1d1 100644\n--- a/tests/admin_changelist/admin.py\n+++ b/tests/admin_changelist/admin.py\n@@ -1,9 +1,14 @@\n+\n from django.contrib import admin\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.core.paginator import Paginator\n \n-from .models import Band, Child, Event, Parent, Swallow\n+from .models import Band, Child, Event, Parent, Swallow, Client, ClientOffice\n+from django.test import TestCase\n+from django.urls import reverse\n+from django.db import connection\n+from django.db.models import Count\n \n site = admin.AdminSite(name=\"admin\")\n \n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..9b39a35 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,6 +1,8 @@\n+\n from django.test import SimpleTestCase\n \n from ..utils import setup\n+from django.utils.html import json_script\n \n \n class JsonScriptTests(SimpleTestCase):\n@@ -16,4 +18,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..43c19f0 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -379,5 +380,42 @@ class BaseTests:\n         storage = self.get_storage()\n         storage.level = 0\n         add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', '', 'debug', 'warning', 'bad', 'success', 'custom'])\n+\n+    def test_default_tags_after_override(self):\n+        # Ensure that after overriding, the default tags are restored\n+        with override_settings_tags(MESSAGE_TAGS={\n+            constants.INFO: 'info',\n+            constants.DEBUG: '',\n+            constants.WARNING: '',\n+            constants.ERROR: 'bad',\n+            29: 'custom',\n+        }):\n+            storage = self.get_storage()\n+            storage.level = 0\n+            add_level_messages(storage)\n+            tags = [msg.level_tag for msg in storage]\n+            self.assertEqual(tags, ['info', '', 'debug', 'warning', 'bad', 'success', 'custom'])\n+\n+        # After the override context, the default tags should apply\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success', 'info'])\n+\n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: '',\n+        constants.DEBUG: 'custom-debug',\n+        constants.WARNING: 'custom-warning',\n+        constants.ERROR: 'custom-error',\n+    })\n+    def test_multiple_tags_override(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage if msg.level_tag]\n+        self.assertEqual(tags, ['custom-warning', 'custom-error', 'success'])\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', 'custom', 'extra-tag', '', 'bad', 'success'])\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..caa0ce2 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,7 +30,7 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, BaseUser, Task\n )\n \n \n@@ -2095,13 +2095,59 @@ class QuerySetBitwiseOperationTests(TestCase):\n         cls.room_3 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 3')\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    \n+    def test_conflicting_aliases_during_combine(self):\n+        tag = Tag.objects.create(name=\"test_tag\")\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = annotation_1.notes.create(tag=tag)\n+        base_user_1 = BaseUser.objects.create()\n+        base_user_2 = BaseUser.objects.create()\n+\n+        task = Task.objects.create(\n+            owner=base_user_2, creator=base_user_2, note=note\n+        )\n+        \n+        qs1 = base_user_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+        \n+        self.assertSequenceEqual(qs1, [base_user_1])\n+        self.assertSequenceEqual(qs2, [base_user_2])\n+        # Ensure commutativity\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    \n+    def test_conflicting_aliases_during_combine(self):\n+        tag = Tag.objects.create(name=\"test_tag\")\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = annotation_1.notes.create(tag=tag)\n+        base_user_1 = BaseUser.objects.create()\n+        base_user_2 = BaseUser.objects.create()\n+\n+        task = Task.objects.create(\n+            owner=base_user_2, creator=base_user_2, note=note\n+        )\n+        \n+        qs1 = base_user_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+        \n+        self.assertSequenceEqual(qs1, [base_user_1])\n+        self.assertSequenceEqual(qs2, [base_user_2])\n+        # Ensure commutativity\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=False)\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..6c8dfbe 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1755,6 +1755,27 @@ class ValueTests(TestCase):\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n \n+    def test_deconstruct_F(self):\n+        f = F('name')\n+        path, args, kwargs = f.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('name',))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_expression_wrapper(self):\n+        ew = models.ExpressionWrapper(F('pages'), output_field=models.IntegerField())\n+        path, args, kwargs = ew.deconstruct()\n+        self.assertEqual(path, 'django.db.models.ExpressionWrapper')\n+        self.assertEqual(args, (F('pages'),))\n+        self.assertEqual(kwargs, {'output_field': models.IntegerField()})\n+\n+    def test_deconstruct_order_by(self):\n+        ob = models.OrderBy(F('name').desc())\n+        path, args, kwargs = ob.deconstruct()\n+        self.assertEqual(path, 'django.db.models.OrderBy')\n+        self.assertEqual(args, (F('name').desc(),))\n+        self.assertEqual(kwargs, {})\n+\n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..764bbb5 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1591,7 +1591,29 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'author')},\n         )\n \n-    def test_add_field_and_foo_together(self):\n+    def test_optimization_alter_foo_together(self):\n+        \"\"\"\n+        Test that consecutive AlterUniqueTogether and AlterIndexTogether operations\n+        on the same model with intermediate no-op settings are optimized into one.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together_3],\n+            [self.author_empty, self.book_foo_together_3_optimized]\n+        )\n+        # Check that only two operations remain after optimization\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, \"otherapp\", 0, [\n+            \"AlterUniqueTogether\",\n+            \"AlterIndexTogether\",\n+        ])\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 0, name=\"book\",\n+            unique_together={('title', 'author')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 1, name=\"book\",\n+            index_together={('title', 'author')},\n+        )\n         \"\"\"\n         Added fields will be created before using them in index/unique_together.\n         \"\"\"\n",
  "django__django-15277": "",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..3911059 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -618,13 +618,73 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         # Ensure the field is there\n+from django.db import connection\n+from django.db.models import CASCADE, OneToOneField\n+from .models import Author, Note\n+\n+class AddFieldO2ONullableTest(TestCase):\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField to ensure it does not crash on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Check if 'note_id' is nullable\n+        self.assertTrue(columns['note_id'][1][6])\n         field_type, field_info = columns['thing']\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n         # Make sure the values were transformed correctly\n         self.assertEqual(Author.objects.extra(where=[\"thing = 1\"]).count(), 2)\n \n-    def test_add_field_binary(self):\n+    def test_add_field_o2o_nullable_with_existing_data(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField to a table that already contains data.\n+        \"\"\"\n+        # Create models and add initial data\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        \n+        # Add some initial data to Author\n+        Author.objects.create()\n+\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        \n+        # Attempt to add the new field\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+\n+from django.db import connection\n+from django.db.models import CASCADE, OneToOneField\n+from .models import Author, Note\n+\n+class AddFieldO2ONullableTest(TestCase):\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField to ensure it does not crash on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Check if 'note_id' is nullable\n+        self.assertTrue(columns['note_id'][1][6])\n+        self.assertIn('note_id', columns)\n+        # Check that the 'note_id' field is nullable\n+        self.assertTrue(columns['note_id'][1][6])\n         \"\"\"\n         Tests binary fields get a sane default (#22851)\n         \"\"\"\n@@ -636,7 +696,26 @@ class SchemaTests(TransactionTestCase):\n         new_field.set_attributes_from_name(\"bits\")\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n+from django.db import connection\n+from django.db.models import CASCADE, OneToOneField\n+from .models import Author, Note\n+\n+class AddFieldO2ONullableTest(TestCase):\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField to ensure it does not crash on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Check if 'note_id' is nullable\n+        self.assertTrue(columns['note_id'][1][6])\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..f930ad1 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -10,6 +10,8 @@ from .models import (\n     Bar, Choiceful, Foo, RenamedField, VerboseNameField, Whiz, WhizDelayed,\n     WhizIter, WhizIterEmpty,\n )\n+from django.db import models\n+import unittest\n \n \n class Nested:\n@@ -19,6 +21,28 @@ class Nested:\n \n class BasicFieldTests(SimpleTestCase):\n \n+    def test_hash_immutability(self):\n+        \"\"\"\n+        Test that the hash of a field remains consistent whether or not it is assigned to a model.\n+        \"\"\"\n+        field1 = models.IntegerField()\n+        field1_hash_before = hash(field1)\n+        \n+        class MyModel(models.Model):\n+            rank = field1\n+        \n+        # Test the hash doesn't change after being assigned to a model.\n+        self.assertEqual(field1_hash_before, hash(field1))\n+\n+        field2 = models.IntegerField()\n+        field2_hash_before = hash(field2)\n+\n+        # Test hash consistency with a new model after being assigned to another field\n+        class AnotherModel(models.Model):\n+            level = field2\n+        \n+        self.assertEqual(field2_hash_before, hash(field2))\n+\n     def test_show_hidden_initial(self):\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n",
  "django__django-15368": "",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..5c024c7 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,6 +1049,32 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n+    def test_rename_model_and_field_simultaneously(self):\n+        \"\"\"Tests autodetection when renaming a model and field at the same time.\"\"\"\n+        initial_state = ModelState('testapp', 'MyModel', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('name', models.CharField(max_length=200)),\n+        ])\n+        target_state = ModelState('testapp', 'MyModel2', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('new_name', models.CharField(max_length=200)),\n+        ])\n+        changes = self.get_changes(\n+            [initial_state],\n+            [target_state],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        # Ensure we have exactly one migration for this change\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        # Ensure the operations are RenameModel and RenameField\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='MyModel', new_name='MyModel2',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='new_name',\n+        )\n+\n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..c63c0a9 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,6 +1906,38 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n+from django.db import models\n+from django.db.models import Exists, Q\n+from django.test import TestCase\n+from .models import Manager\n+\n+class ExpressionExistsTests(TestCase):\n+    def setUp(self):\n+        self.manager = Manager.objects.create(name='Test Manager')\n+\n+    def test_negated_empty_exists_with_filter(self):\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()), name='Test Manager')\n+        # The queryset should include the manager instance, as the EXISTS condition is negated.\n+        self.assertSequenceEqual(qs, [self.manager])\n+\n+    def test_negated_empty_exists_with_no_filter(self):\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()))\n+        # The queryset should include the manager instance, as the EXISTS condition is negated.\n+        self.assertSequenceEqual(qs, [self.manager])\n+\n+    def test_non_empty_exists(self):\n+        # Create another manager to ensure non-empty queryset for Exists\n+        Manager.objects.create(name='Another Manager')\n+        qs = Manager.objects.filter(Exists(Manager.objects.all()))\n+        # The queryset should return both managers as the EXISTS condition is true for all.\n+        self.assertEqual(qs.count(), 2)\n+\n+    def test_negated_non_empty_exists(self):\n+        # Simulate scenario where the EXISTS should not be negated\n+        qs = Manager.objects.filter(~Exists(Manager.objects.filter(name='Nonexistent')))\n+        # The queryset should still include the manager instance, as the negation is over a non-existent name.\n+        self.assertSequenceEqual(qs, [self.manager])\n+\n class FieldTransformTests(TestCase):\n \n     @classmethod\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..b2634ef 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -141,6 +141,18 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n         self.assertIsNone(ff.empty_label)\n \n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"main_band\": admin.VERTICAL}\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == 'main_band':\n+                    kwargs['empty_label'] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Event, admin.site)\n+        ff = ma.formfield_for_dbfield(Event._meta.get_field(\"main_band\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n     def test_many_to_many(self):\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..ed546e5 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,54 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_model_with_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_existing_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[(\"existing_manager\", models.Manager())],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"updated_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"updated_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..48e52b7 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,22 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def test_foreign_key_dependency_with_natural_keys(self):\n+        \"\"\"\n+        Test that loading fixtures with natural keys and foreign key dependencies\n+        works on a non-default database.\n+        \"\"\"\n+        management.call_command(\n+            \"loaddata\", \"nk_with_foreign_key.json\", database=\"other\", verbosity=0\n+        )\n+        obj = NaturalKeyWithFKDependency.objects.using(\"other\").get()\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..35ace72 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -320,6 +320,19 @@ class LookupTests(TestCase):\n         self.assertNotIn(\"exactly\", field.get_lookups())\n \n         # registration should bust the cache\n+\n+    def test_unregistration_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register and ensure the cache is populated\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+        \n+        # Unregister the lookup\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        \n+        # The cache should be cleared, and the lookup should not be present\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n         with register_lookup(models.ForeignObject, Exactly):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..220e855 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,6 @@\n+\n+import inspect\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -724,7 +727,17 @@ class ManagerTest(SimpleTestCase):\n \n     def test_manager_methods(self):\n         \"\"\"\n-        This test ensures that the correct set of methods from `QuerySet`\n+        def test_bulk_create_signature(self):\n+            signature = inspect.signature(Article.objects.bulk_create)\n+            expected = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+            self.assertEqual(str(signature), expected)\n+\n+        def test_get_signature(self):\n+            signature = inspect.signature(Article.objects.get)\n+            expected = \"(args, kwargs)\"\n+            # This test ensures the signature for the get method is as expected,\n+            # it might change depending on how Django defines the method.\n+            self.assertEqual(str(signature), expected)\n         are copied onto `Manager`.\n \n         It's particularly useful to prevent accidentally leaking new methods\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..7ff82b4 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,8 +1,11 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n \n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n@@ -74,7 +77,17 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy_string(self):\n+        # Test that get_format can handle a lazy string\n+        self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+    \n+    def test_date_filter_with_lazy_string(self):\n+        # Test that date filter can handle a lazy translation string\n+        with translation.override('en'):\n+            template = Template('{{ t|date:_(\"H:i\") }}')\n+            context = Context({'t': time(0, 0)})\n+            output = template.render(context)\n+            self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..32376a1 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,23 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_with_proxy(self):\n+        custom_model = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        another_model = AnotherModel.objects.create(custom=custom_model)\n+        \n+        # Testing the problematic combination of select_related and only on a proxy model\n+        queryset = AnotherModel.objects.select_related('custom').only('custom__name')\n+        \n+        # Fetch the result and ensure no errors occur and the result is as expected\n+        result = queryset.get(id=another_model.id)\n+        self.assertEqual(result.custom.name, \"Test Name\")\n+        \n+        # Ensure that the result is correct and fetched only required fields\n+        self.assertQuerysetEqual(queryset, [another_model], transform=lambda x: x)\n+        \n+        # Check if accessing fields that are not loaded raises an error\n+        with self.assertRaises(FieldError):\n+            result.custom.id  # Attempting to access an unloaded field should raise an error\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..7285eef 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_with_additional_options(self):\n+        # Test case to verify additional parameters are passed before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..85f46de 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,8 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n@@ -74,7 +76,26 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n-    def test_force_grouping(self):\n+    def test_decimal_precision(self):\n+        # Test preservation of precision for Decimal numbers\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890000\",\n+        )\n+        # Test rounding when exceeding precision\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.2345678901234567890123456789\"), 25),\n+            \"1.2345678901234567890123460\",\n+        )\n+        # Ensure that no scientific notation is used inappropriately\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.000000000012345678901234567890123456789\"), 30),\n+            \"0.000000000012345678901234567890\",\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..f514605 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -415,6 +415,16 @@ class CaseExpressionTests(TestCase):\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n+    def test_annotate_with_negated_q_expression(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_combined_expression(self):\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n",
  "django__django-15987": "",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..05e02aa 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,34 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        awarded_publishers_qs = (\n+            Publisher.objects.filter(num_awards__gt=4)\n+            .annotate(publisher_annotate=Value(1))\n+            .alias(publisher_alias=Value(1))\n+        )\n+        qs = Publisher.objects.filter(pk__in=awarded_publishers_qs)\n+        self.assertCountEqual(qs, [self.p3, self.p4])\n+\n+    def test_annotation_and_alias_filter_related_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(pages__gt=400)\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = Publisher.objects.filter(\n+            book__in=long_books_qs,\n+        ).values(\"name\")\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"},\n+            ],\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..8a66d6c 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,4 +1,8 @@\n+\n import datetime\n+from unittest import mock\n+from django.db import DatabaseError, transaction\n+from django.test import skipUnlessDBFeature\n \n from django.contrib import admin\n from django.contrib.admin.models import LogEntry\n@@ -400,7 +404,83 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity_extended(self):\n+        # Set up initial data\n+        swallow_a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        swallow_b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+        swallow_c = Swallow.objects.create(origin=\"Swallow C\", load=3, speed=3)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+\n+        # Data for POST request to admin to update list_editable fields\n+        data = {\n+            \"form-TOTAL_FORMS\": \"3\",\n+            \"form-INITIAL_FORMS\": \"3\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(swallow_a.pk),\n+            \"form-1-uuid\": str(swallow_b.pk),\n+            \"form-2-uuid\": str(swallow_c.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"form-2-load\": \"7.0\",\n+            \"form-2-speed\": \"2.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Simulate a DatabaseError after the first object update\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=[None, DatabaseError]\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+\n+        # Verify database state was rolled back\n+        swallow_a.refresh_from_db()\n+        self.assertEqual(swallow_a.load, 4)\n+        self.assertEqual(swallow_a.speed, 1)\n+        swallow_b.refresh_from_db()\n+        self.assertEqual(swallow_b.load, 2)\n+        self.assertEqual(swallow_b.speed, 2)\n+        swallow_c.refresh_from_db()\n+        self.assertEqual(swallow_c.load, 3)\n+        self.assertEqual(swallow_c.speed, 3)\n+\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_nested_transactions_in_list_editable(self):\n+        # Set up initial data\n+        swallow_a = Swallow.objects.create(origin=\"Nested Swallow A\", load=6, speed=3)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+\n+        data = {\n+            \"form-TOTAL_FORMS\": \"1\",\n+            \"form-INITIAL_FORMS\": \"1\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(swallow_a.pk),\n+            \"form-0-load\": \"12.0\",\n+            \"form-0-speed\": \"6.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Use a nested transaction\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with transaction.atomic():\n+                with self.assertRaises(DatabaseError):\n+                    self.client.post(changelist_url, data)\n+\n+        # Verify database state was rolled back\n+        swallow_a.refresh_from_db()\n+        self.assertEqual(swallow_a.load, 6)\n+        self.assertEqual(swallow_a.speed, 3)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..139ae6a 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,27 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_without_dry_run(self):\n+        \"\"\"\n+        Test that makemigrations --check exits without creating files \n+        when migration changes are detected without the need for --dry-run.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Ensure that no migration files were written\n+            self.assertFalse(os.path.exists(tmpdir))\n+\n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        Test that makemigrations --check exits normally when no changes are detected.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ) as tmpdir:\n+            call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Ensure that no migration files were written\n+            self.assertFalse(os.path.exists(tmpdir))\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..56f8e46 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,15 +7,49 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import SimpleTestCase, RequestFactory\n+import asyncio\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n from .models import SimpleModel\n \n \n-class CacheTest(SimpleTestCase):\n+class TestHttpResponseNotAllowed(SimpleTestCase):\n+    def test_http_method_not_allowed_async(self):\n+        \"\"\"Test that HttpResponseNotAllowed works in an async context.\"\"\"\n+\n+        class AsyncView(View):\n+            view_is_async = True\n+\n+            async def post(self, request, *args, **kwargs):\n+                return HttpResponse(\"ok\")\n+\n+        request_factory = RequestFactory()\n+        view_instance = AsyncView()\n+        request = request_factory.get(\"/\")\n+\n+        # Test the response to a method not allowed for async\n+        response = view_instance.http_method_not_allowed(request)\n+        self.assertIsInstance(response, HttpResponseNotAllowed)\n+\n+    def test_http_method_not_allowed_sync(self):\n+        \"\"\"Test that HttpResponseNotAllowed works in a sync context.\"\"\"\n+\n+        class SyncView(View):\n+            view_is_async = False\n+\n+            def post(self, request, *args, **kwargs):\n+                return HttpResponse(\"ok\")\n+\n+        request_factory = RequestFactory()\n+        view_instance = SyncView()\n+        request = request_factory.get(\"/\")\n+\n+        # Test the response to a method not allowed for sync\n+        response = view_instance.http_method_not_allowed(request)\n+        self.assertIsInstance(response, HttpResponseNotAllowed)\n     def test_caches_local(self):\n         @async_to_sync\n         async def async_cache():\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..d58e960 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,6 +1,9 @@\n+\n import datetime\n import re\n+import urllib.parse\n from unittest import mock\n+from django.urls import reverse\n \n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm,\n@@ -884,7 +887,25 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # original hashed password contains $\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n-    def test_bug_19349_bound_password_field(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.create_user(username=\"testuser_to_field\", password=\"123\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+        \n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         user = User.objects.get(username=\"testclient\")\n         form = UserChangeForm(data={}, instance=user)\n         # When rendering the bound password field,\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..f646492 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,38 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from django.contrib.sitemaps import Sitemap\n+from django.test import TestCase\n+from django.urls import path\n+from django.utils.datetime_safe import datetime\n+from django.test.utils import override_settings\n+from django.contrib.sitemaps.views import index\n+from django.http import HttpResponse\n+\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapTestsBase(TestCase):\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n \n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+    def test_callable_lastmod_no_items_does_not_raise_error(self):\n+        sitemap = CallableLastmodNoItemsSitemap()\n+        self.assertIsNone(sitemap.get_latest_lastmod())\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..7e99864 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,10 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..9a370fa 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -261,6 +263,62 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = UserCreationForm(data)\n         self.assertTrue(form.is_valid())\n         self.assertEqual(form.cleaned_data[\"password1\"], data[\"password1\"])\n+    \n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+    \n+    def test_custom_form_saves_multiple_many_to_many_fields(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization1, organization2])\n+\n+    def test_custom_form_with_no_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            # No organization added\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n         self.assertEqual(form.cleaned_data[\"password2\"], data[\"password2\"])\n \n     @override_settings(\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..2821f90 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,25 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_aware(self):\n+        now = timezone.now()\n+        d = now - self.onemonth\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_aware_multiple_months(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=65)  # Roughly 2 months\n+        self.assertEqual(timesince(d), \"2\\xa0months\")\n+\n+    def test_long_interval_with_naive_datetime(self):\n+        now = datetime.datetime.now()\n+        d = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..6397da3 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -481,6 +481,40 @@ class UtilsTests(SimpleTestCase):\n         for char in key:\n             self.assertIn(char, \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)\")\n \n+    def test_subparser_error_formatting(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"twelve\"])\n+        self.maxDiff = None\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'twelve'\",\n+        )\n+\n+    def test_subparser_argument_missing(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: the following arguments are required: bar\",\n+        )\n+\n+    def test_subparser_argument_type_error(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"not_an_int\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'not_an_int'\",\n+        )\n+\n     def test_is_ignored_path_true(self):\n         patterns = (\n             [\"foo/bar/baz\"],\n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..364e47a 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -93,6 +93,33 @@ class GetStorageClassTests(SimpleTestCase):\n \n class FileSystemStorageTests(unittest.TestCase):\n     def test_deconstruction(self):\n+        \"\"\"\n+        Deconstructing gives the original callable, not the evaluated value.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_storage)\n+\n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n+    def test_deconstruction_with_random_callable_storage(self):\n+        \"\"\"\n+        Deconstructing a field with a callable that randomly returns either\n+        default_storage or other_storage should include the callable.\n+        \"\"\"\n+        class MyModel(models.Model):\n+            my_file = models.FileField(storage=get_storage)\n+\n+        *_, kwargs = MyModel._meta.get_field(\"my_file\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], get_storage)\n         path, args, kwargs = temp_storage.deconstruct()\n         self.assertEqual(path, \"django.core.files.storage.FileSystemStorage\")\n         self.assertEqual(args, ())\n@@ -1018,6 +1045,33 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n+    def test_deconstruction_with_random_callable_storage(self):\n+        \"\"\"\n+        Deconstructing a field with a callable that randomly returns either\n+        default_storage or other_storage should include the callable.\n+        \"\"\"\n+        class MyModel(models.Model):\n+            my_file = models.FileField(storage=get_storage)\n+\n+        *_, kwargs = MyModel._meta.get_field(\"my_file\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], get_storage)\n+        \"\"\"\n+        Deconstructing gives the original callable, not the evaluated value.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..177acd0 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,9 +1,12 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n from django.contrib.auth.admin import UserAdmin\n+from .tests import get_perm\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n@@ -16,6 +19,41 @@ from .tests import AdminViewBasicTestCase\n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n     request_factory = RequestFactory()\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        # User with change permission only\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+    request_factory = RequestFactory()\n+\n     def test_submit_row(self):\n         \"\"\"\n         submit_row template tag should pass whole context.\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..c53ad05 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -67,6 +67,27 @@ class BaseConstraintTests(SimpleTestCase):\n         )\n         self.assertEqual(c.get_violation_error_message(), \"custom base_name message\")\n \n+    def test_custom_violation_code_attribute(self):\n+        constraint = BaseConstraint(\n+            name=\"base_name\",\n+            violation_error_message=\"custom %(name)s message\",\n+            violation_error_code=\"custom_code\"\n+        )\n+        self.assertEqual(constraint.violation_error_code, \"custom_code\")\n+\n+    def test_validate_with_custom_violation_code(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"custom_code\"\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n+\n     def test_custom_violation_error_message_clone(self):\n         constraint = BaseConstraint(\n             name=\"base_name\",\n",
  "django__django-16569": "",
  "django__django-16595": "",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..8601b54 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -255,6 +255,8 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n@@ -262,6 +264,12 @@ class FileResponseTests(SimpleTestCase):\n                     response = FileResponse(tmp)\n                 self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n                 self.assertFalse(response.has_header(\"Content-Encoding\"))\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n \n     def test_unicode_attachment(self):\n         response = FileResponse(\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..bc0283e 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,35 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..2b441a2 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,31 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_isort_compliant_imports(self):\n+        \"\"\"\n+        Test that generated migration files have isort-compliant imports.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        expected_import_order = (\n+            \"import datetime\\n\"\n+            \"import time\\n\"\n+            \"from django.db import migrations, models\\n\"\n+        )\n+        self.assertIn(expected_import_order, output)\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..2c898b1 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -806,6 +806,43 @@ class SystemChecksTestCase(SimpleTestCase):\n         ]\n         self.assertEqual(errors, expected)\n \n+    def test_readonly_fields_includes_field_name(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = [\"title\", \"nonexistent\"]\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is not a callable, \"\n+                \"an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_nonexistent_callable_in_readonly_fields(self):\n+        class ArtistAdmin(admin.ModelAdmin):\n+            readonly_fields = [\"does_not_exist\"]\n+\n+        errors = ArtistAdmin(Artist, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'does_not_exist', which is not a callable, \"\n+                \"an attribute of 'ArtistAdmin', or an attribute of 'admin_checks.Artist'.\",\n+                obj=ArtistAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_field_on_model_exists(self):\n+        class BandAdmin(admin.ModelAdmin):\n+            readonly_fields = [\"name\"]\n+\n+        errors = BandAdmin(Band, AdminSite()).check()\n+        self.assertEqual(errors, [])\n+\n     def test_nonexistent_field_on_inline(self):\n         class CityInline(admin.TabularInline):\n             model = City\n@@ -822,6 +859,43 @@ class SystemChecksTestCase(SimpleTestCase):\n         ]\n         self.assertEqual(errors, expected)\n \n+    def test_readonly_fields_includes_field_name(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = [\"title\", \"nonexistent\"]\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is not a callable, \"\n+                \"an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_nonexistent_callable_in_readonly_fields(self):\n+        class ArtistAdmin(admin.ModelAdmin):\n+            readonly_fields = [\"does_not_exist\"]\n+\n+        errors = ArtistAdmin(Artist, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'does_not_exist', which is not a callable, \"\n+                \"an attribute of 'ArtistAdmin', or an attribute of 'admin_checks.Artist'.\",\n+                obj=ArtistAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_field_on_model_exists(self):\n+        class BandAdmin(admin.ModelAdmin):\n+            readonly_fields = [\"name\"]\n+\n+        errors = BandAdmin(Band, AdminSite()).check()\n+        self.assertEqual(errors, [])\n+\n     def test_readonly_fields_not_list_or_tuple(self):\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = \"test\"\n",
  "django__django-16901": "",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..aff3777 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -177,7 +177,21 @@ class AppsTests(SimpleTestCase):\n         self.assertIs(apps.is_installed(\"django.contrib.admindocs\"), False)\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n-    def test_get_model(self):\n+    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        \"\"\"\n+        Tests that apps.clear_cache() clears all relevant caches.\n+        \"\"\"\n+        # Setting cache by calling the method\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()  # This call should also populate some cache\n+\n+        # Clear all caches\n+        apps.clear_cache()\n+\n+        # Verify caches are cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n         \"\"\"\n         Tests apps.get_model().\n         \"\"\"\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..d4ace2a 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -638,7 +638,29 @@ class MakeMigrationsTests(MigrationTestBase):\n                 with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n                     with mock.patch.object(TestRouter, 'allow_migrate', return_value=False) as allow_migrate:\n                         call_command('makemigrations', 'migrations', verbosity=0)\n-                allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n+                allow_migrate.assert_any_call('other', 'migrations', model_name='UnicodeModel')\n+\n+                # New test case to ensure correct app_label/model_name pairs\n+                with self.settings(DATABASE_ROUTERS=['migrations.routers.ComplexRouter']):\n+                    with mock.patch.object(TestRouter, 'allow_migrate', return_value=True) as allow_migrate:\n+                        call_command('makemigrations', 'migrations2', verbosity=0)\n+                \n+                # Verify that `allow_migrate` was called with correct pairs\n+                expected_calls = [\n+                    mock.call('default', 'migrations2', model_name='AnotherModel'),\n+                    mock.call('other', 'migrations2', model_name='AnotherModel')\n+                ]\n+                \n+                for call in expected_calls:\n+                    allow_migrate.assert_any_call(*call[0], **call[1])\n+                \n+                # Ensure no incorrect app/model pairs were used\n+                for mock_call in allow_migrate.mock_calls:\n+                    _, call_args, call_kwargs = mock_call\n+                    connection_alias, app_name = call_args\n+                    self.assertIn(connection_alias, ['default', 'other'])\n+                    # This will raise an error if the app_name/model_name combination is invalid.\n+                    apps.get_app_config(app_name).get_model(call_kwargs['model_name'])\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n     def test_failing_migration(self):\n",
  "django__django-9296": "",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..ef9a7d2 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,20 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Test when density=True\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0, \"The first bin edge should be 0\"\n+    assert bins[-1] == 1, \"The last bin edge should be 1\"\n+\n+def test_hist_range_without_density():\n+    # Test when density=False\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0, \"The first bin edge should be 0\"\n+    assert bins[-1] == 1, \"The last bin edge should be 1\"\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6380,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..6464de8 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,37 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+\n+def test_invert_log_scale_axis():\n+    # Test inverting nonlinear axes by setting ylim for log scale\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n+\n+    # Additional test case to ensure setting limits on an already log-scaled axis\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.plot([1, 2, 3], [10, 100, 1000])\n+    # Initially, the ylim should adjust to the data\n+    assert ax.get_ylim() == (10, 1000)\n+\n+    # Invert the limits explicitly\n+    ax.set_ylim(1000, 10)\n+    assert ax.get_ylim() == (1000, 10)\n+    plt.close()\n+\n+    # Another test with log scale and negative limits should raise an error\n+    # because log scale cannot handle negative or zero limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    try:\n+        ax.set_ylim(-10, -1)\n+    except ValueError as e:\n+        assert str(e) == \"Axis limits cannot be negative for a log scale\"\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -939,6 +970,37 @@ def test_inverted_limits():\n     plt.close()\n \n \n+def test_invert_log_scale_axis():\n+    # Test inverting nonlinear axes by setting ylim for log scale\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n+\n+    # Additional test case to ensure setting limits on an already log-scaled axis\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.plot([1, 2, 3], [10, 100, 1000])\n+    # Initially, the ylim should adjust to the data\n+    assert ax.get_ylim() == (10, 1000)\n+\n+    # Invert the limits explicitly\n+    ax.set_ylim(1000, 10)\n+    assert ax.get_ylim() == (1000, 10)\n+    plt.close()\n+\n+    # Another test with log scale and negative limits should raise an error\n+    # because log scale cannot handle negative or zero limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    try:\n+        ax.set_ylim(-10, -1)\n+    except ValueError as e:\n+        assert str(e) == \"Axis limits cannot be negative for a log scale\"\n+    plt.close()\n+\n+\n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n     x = np.arange(0., np.e, 0.01)\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..241d884 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,25 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure with shared axes, no clearing\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure with shared axes, clear is called\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..7112820 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -307,8 +307,17 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert y_units is ax.yaxis.units\n \n \n-def test_hist():\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted. See #22640.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with pytest.warns(None) as record:\n+        ax.plot([], [])\n+    # Check that no warnings were issued\n+    assert len(record) == 0\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..00e5552 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,37 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+from matplotlib import rc_context, get_backend\n+import pytest\n+\n+def test_get_backend_preserves_figures_rccontext():\n+    # Check if `get_backend` correctly preserves figures when created in an `rc_context`.\n+    with rc_context():\n+        fig1 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    assert before == after, 'Gcf.figs has changed:\\n' + before + '\\n' + after\n+\n+def test_get_backend_preserves_figures_no_rccontext():\n+    # Check if `get_backend` correctly preserves figures when not using an `rc_context`.\n+    fig1 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, 'Gcf.figs has changed:\\n' + before + '\\n' + after\n+\n+def test_no_backend_reset_rccontext():\n+    # Existing test case from the original patch\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..9f4e1ea 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -14,6 +14,8 @@ from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import (\n+    image_comparison, check_figures_equal)\n import numpy as np\n \n \n@@ -21,6 +23,14 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d_projection(fig_test, fig_ref):\n+    ax = fig_test.add_subplot(projection='3d')\n+    ax.scatter(1, 1, 1)\n+    ax.set_visible(False)\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_ref.scatter(1, 1, 1)\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..3ddfe82 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -149,6 +149,11 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     assert rect_test.get_angle() == angle\n \n \n+import matplotlib.pyplot as plt\n+import matplotlib.patches as patches\n+import pytest\n+from matplotlib.testing.decorators import check_figures_equal\n+\n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..b9b9b59 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,9 +2866,25 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+from matplotlib.patches import Rectangle\n+\n+\n+def test_stackplot_color_alias():\n+    # Test to check if stackplot can handle CN color aliases without ValueError\n+    fig, ax = plt.subplots()\n+    x = [1, 2, 3]\n+    y = [[1, 1, 1], [1, 2, 3], [4, 3, 2]]\n+    try:\n+        ax.stackplot(x, y, colors=['C2', 'C3', 'C4'])\n+    except ValueError as e:\n+        pytest.fail(f\"stackplot raised ValueError with CN aliases: {e}\")\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n-def test_stackplot_baseline():\n+    # Also test that after using stackplot, the property cycler of ax has not been altered\n+    ax.plot([1, 3], [1, 3], color='C0')  # Should work as expected\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))  # Should also work without issues\n     np.random.seed(0)\n \n     def layers(n, m):\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..83c53f2 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,30 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import warnings\n+import numpy as np\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal\n+from pytest import mark\n+\n+@mark.filterwarnings(\"error\")\n+def test_deprecated_behavior():\n+    \"\"\"\n+    Test to capture the deprecation warning when using out-of-bound\n+    Python integers to uint8 arrays as described in the issue.\n+    \"\"\"\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        cm = mpl.colormaps[\"viridis\"]\n+        result = cm(np.empty((0,), dtype=np.uint8))\n+        \n+        # Verify the usage did raise deprecation warning\n+        assert len(w) > 0\n+        assert any(issubclass(warn.category, DeprecationWarning) for warn in w)\n+\n+        # Just a simple check to ensure no other issues\n+        assert result is not None\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..fbdf7ca 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7825,6 +7825,31 @@ def test_relative_ticklabel_sizes(size):\n             assert tick.label1.get_size() == axis._get_tick_label_size(name)\n \n \n+\n+def test_xaxis_offsetText_color():\n+    import matplotlib.pyplot as plt\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    import matplotlib.pyplot as plt\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+\n def test_multiplot_autoscale():\n     fig = plt.figure()\n     ax1, ax2 = fig.subplots(2, 1, sharex='all')\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..86d28e3 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,29 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [10, 20, 25], label='Speed')\n+    \n+    # Make the legend draggable\n+    legend = ax.legend(draggable=True)\n+    \n+    # Try pickling the figure\n+    pkl = pickle.dumps(fig, protocol=pickle.HIGHEST_PROTOCOL)\n+    \n+    # Ensure no reference to FigureCanvasQTAgg or FigureCanvasAgg in pickle stream\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Attempt to unpickle and verify it doesn't raise exceptions\n+    loaded_fig = pickle.loads(pkl)\n+    assert isinstance(loaded_fig, plt.Figure)\n+    \n+    plt.close(fig)\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..2131efe 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -44,7 +44,25 @@ def test_simple():\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n \n-def _generate_complete_test_figure(fig_ref):\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Ensure we are testing pickling after aligning labels\n+\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        assert pickle_data is not None, \"Pickling should return non-None data\"\n+    except Exception as e:\n+        assert False, f\"Pickling failed with exception: {e}\"\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..bc56cfa 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,84 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n \n-def test_hexbin_log_clim():\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_equals_zero_with_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926, test with mincnt=0, C parameter specified\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # both cases have same result since mincnt=0 includes all\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=0,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..7a1a756 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -646,6 +646,57 @@ class TestScaling:\n             p.plot()\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+from seaborn import Plot\n+from seaborn._core.scales import Nominal\n+\n+class TestNominalScaleBehavior:\n+\n+    def test_nominal_x_axis_tweaks(self):\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_xlim() == (-.5, 2.5)\n+        assert not any(x.get_visible() for x in ax1.xaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(x=lim).plot()._figure.axes[0]\n+        assert ax2.get_xlim() == lim\n+\n+    def test_nominal_y_axis_tweaks(self):\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_ylim() == (2.5, -.5)\n+        assert not any(y.get_visible() for y in ax1.yaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(y=lim).plot()._figure.axes[0]\n+        assert ax2.get_ylim() == lim\n+\n+    def test_grid_visibility_override(self):\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        fig, ax = plt.subplots()\n+        plt.grid(True)\n+        ax1 = p.plot(ax=ax)._figure.axes[0]\n+        # Check if the grid is off even when the global grid is set to True\n+        assert not any(x.get_visible() for x in ax1.xaxis.get_gridlines())\n+\n+    def test_inverted_y_axis_with_grid(self):\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        fig, ax = plt.subplots()\n+        plt.grid(True)\n+        ax1 = p.plot(ax=ax)._figure.axes[0]\n+        # Ensure that y-axis is inverted and no grid is shown\n+        assert ax1.get_ylim() == (2.5, -.5)\n+        assert not any(y.get_visible() for y in ax1.yaxis.get_gridlines())\n+\n+    def test_nominal_axis_with_data_order(self):\n+        p = Plot(x=[\"c\", \"b\", \"a\"], y=[1, 2, 3])\n+        ax1 = p.plot()._figure.axes[0]\n+        # The axis should adapt to the data order\n+        assert ax1.get_xlim() == (-.5, 2.5)\n+        assert not any(x.get_visible() for x in ax1.xaxis.get_gridlines())\n+\n class TestPlotting:\n \n     def test_matplotlib_object_creation(self):\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..618c656 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -256,6 +256,11 @@ def test_dotted_name_not_allowed(app, client):\n         flask.Blueprint(\"app.ui\", __name__)\n \n \n+def test_blueprint_name_with_whitespace(app, client):\n+    # Test that a Blueprint name with only whitespace is not allowed\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n+\n def test_dotted_names_from_app(app, client):\n     test = flask.Blueprint(\"test\", __name__)\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..de36898 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -15,6 +15,9 @@ from . import sessions\n \n \n def request(method, url, **kwargs):\n+    # Ensure that method is always a byte string in Python 2.7\n+    if isinstance(method, unicode):\n+        method = method.encode('ascii')\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n     Returns :class:`Response <Response>` object.\n \n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..c4aabd7 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,16 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://*example.com'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://-example.com'),\n+            (InvalidURL, 'http://example-.com'),\n+            (InvalidURL, 'http://example.com:99999'),\n+            (InvalidURL, 'http://.'),\n+            (InvalidURL, 'http://..'),\n+            (InvalidURL, 'http://example.-com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..80fdb1d 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,23 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_setitem_preserves_object_type_with_values_property():\n+    import xarray as xr\n+    import numpy as np\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    class HasValues:\n+        values = 5\n+\n+    good_indexed = xr.DataArray([None], dims=\"dim_0\")\n+    bad_indexed = xr.DataArray([None], dims=\"dim_0\")\n+\n+    # Assign a set object to the DataArray\n+    good_indexed.loc[{\"dim_0\": 0}] = set()\n+    assert isinstance(good_indexed.values[0], set), \"Failed to preserve set() type in assignment.\"\n+\n+    # Assign an object with a 'values' attribute to the DataArray\n+    bad_indexed.loc[{\"dim_0\": 0}] = HasValues()\n+    assert isinstance(bad_indexed.values[0], HasValues), \"Failed to preserve HasValues instance in assignment.\"\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..c642569 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2069,6 +2069,17 @@ class TestDataset:\n \n             assert data.attrs['Test'] is not copied.attrs['Test']\n \n+    def test_copy_unicode_index_dtype(self):\n+        # Test that the dtype of index variables is preserved after copying\n+        ds = xr.Dataset(coords={'x': ['foo'], 'y': ('x', ['bar'])}, data_vars={'z': ('x', ['baz'])})\n+        ds_copy_deep = ds.copy(deep=True)\n+        ds_copy_shallow = ds.copy(deep=False)\n+\n+        # Assert that the dtype of indices remain unicode '<U3'\n+        assert ds.coords['x'].dtype == '<U3'\n+        assert ds_copy_deep.coords['x'].dtype == '<U3'\n+        assert ds_copy_shallow.coords['x'].dtype == '<U3'\n+\n     def test_copy_with_data(self):\n         orig = create_test_data()\n         new_data = {k: np.random.randn(*v.shape)\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..c1b777b 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,6 +574,24 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n+    def test_combining_non_monotonic_identical_coords(self):\n+        # Test that non-monotonic identical coordinates do not raise a ValueError\n+        ycoord = ['a', 'c', 'b']\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data1)),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data2)),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], np.concatenate([data1, data2], axis=0))),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n     def test_infer_order_from_coords(self):\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..68f5f53 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,24 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n-\n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+        from collections import OrderedDict\n+        \n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        \n+        # Test with keep_attrs=True\n+        out_true = da.quantile(0.9, dim='x', keep_attrs=True)\n+        assert out_true.attrs == {'units': 'K'}, \"Attributes should be preserved when keep_attrs=True\"\n+        \n+        # Test with keep_attrs=False\n+        out_false = da.quantile(0.9, dim='x', keep_attrs=False)\n+        assert out_false.attrs == {}, \"Attributes should be discarded when keep_attrs=False\"\n+\n+        # Test with default (should discard attrs)\n+        out_default = da.quantile(0.9, dim='x')\n+        assert out_default.attrs == {}, \"Attributes should be discarded by default if keep_attrs is not specified\"\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..65665da 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,15 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        # Test merging a Dataset with a DataArray using the merge method\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        expected = xr.merge([ds, da])  # Expected result using top-level merge function\n+\n+        # Ensure that ds.merge(da) produces the same result\n+        assert_identical(ds.merge(da), expected)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..80d3792 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -607,7 +607,19 @@ def test_min_count_dataset(func):\n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n-def test_multiple_dims(dtype, dask, func):\n+def test_multiple_dims_min_count(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+\n+    # Test for min_count with multiple dimensions\n+    with pytest.raises(ValueError, match=\"min_count is not available for reduction with more than one dimensions.\"):\n+        getattr(da, func)(dim=[\"x\", \"y\"], skipna=True, min_count=3)\n+\n+    # Normal reduction for two dimensions without min_count\n+    actual = getattr(da, func)((\"x\", \"y\"), skipna=True)\n+    expected = getattr(getattr(da, func)(\"x\", skipna=True), func)(\"y\", skipna=True)\n+    assert_allclose(actual, expected)\n     if dask and not has_dask:\n         pytest.skip(\"requires dask\")\n     da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..457a8b1 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,29 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"original\"})\n+        ds2 = xr.Dataset(attrs={\"b\": \"another_original\"})\n+        ds_combined = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        # Change an attribute in the combined dataset\n+        ds_combined.attrs[\"a\"] = \"modified\"\n+        # Original datasets should not be affected\n+        assert ds1.attrs[\"a\"] == \"original\"\n+        assert \"b\" not in ds1.attrs\n+        assert ds2.attrs[\"b\"] == \"another_original\"\n+        assert \"a\" not in ds2.attrs\n+\n+    def test_merge_attrs_override_no_side_effect(self):\n+        ds1 = xr.Dataset(attrs={\"a\": 1})\n+        ds2 = xr.Dataset(attrs={\"b\": 2})\n+        ds_combined = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds_combined.attrs[\"c\"] = 3\n+        # Ensure original datasets are unaffected by the modification\n+        assert ds1.attrs == {\"a\": 1}\n+        assert ds2.attrs == {\"b\": 2}\n+        # Combined dataset should hold the new attribute\n+        assert ds_combined.attrs == {\"a\": 1, \"c\": 3}\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..f9584fd 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1922,7 +1922,22 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+def test_where_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+\n+def test_where_dtype() -> None:\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+    data.attrs[\"attr_1\"] = \"test1\"\n+    data.attrs[\"attr_2\"] = \"test2\"\n+    result = xr.where(data == 1, 5, 0)\n+    assert result.dtype == np.int8\n+    assert result.attrs == data.attrs\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..1a624e9 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1920,6 +1920,13 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_scalar_and_attrs() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+\n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..c51b08c 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,20 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import xarray as xr\n+import numpy as np\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"int16\", \"int8\", \"float64\"])\n+def test_multiindex_stack_preserves_dtype(dtype: str) -> None:\n+    ds = xr.Dataset(coords={'a': np.array([0, 1, 2], dtype=dtype)})\n+    stacked_ds = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked_ds['a'].values.dtype, (\n+        f\"Expected dtype {ds['a'].values.dtype}, but got {stacked_ds['a'].values.dtype}.\"\n+    )\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..1a5c274 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,26 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n-def test_unknown_py_version(capsys: CaptureFixture) -> None:\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_short_verbose_argument_error(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure the -v option doesn't require an argument.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\", \"unexpected_argument\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"unrecognized arguments: unexpected_argument\" in output.err\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..8854f0d 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,38 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    \n+    @pytest.mark.parametrize(\n+        \"ignore_option, ignore_value, should_ignore\",\n+        [\n+            (\"--ignore\", \".a/foo.py\", True),\n+            (\"--ignore-paths\", \".*/foo.py\", True),\n+            (\"--ignore-patterns\", \"^\\.a\", True),\n+            (\"--ignore\", \"bar.py\", False),  # Should not ignore\n+            (\"--ignore-paths\", \".*/bar.py\", False),  # Should not ignore\n+            (\"--ignore-patterns\", \"^bar\", False),  # Should not ignore\n+        ],\n+    )\n+    def test_recursive_ignore(self, ignore_option, ignore_value, should_ignore):\n+        run = Run(\n+            [\n+                \"--recursive=y\",\n+                ignore_option, ignore_value,\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+            ],\n+            exit=False,\n+        )\n+        linted_files = run.linter._iterate_file_descrs(\n+            tuple(run.linter._discover_files([join(HERE, \"regrtest_data\", \"directory\")]))\n+        )\n+        linted_file_paths = [file_item.filepath for file_item in linted_files]\n+        \n+        ignored_file = os.path.abspath(join(HERE, \"regrtest_data\", \"directory\", \".a\", \"foo.py\"))\n+        if should_ignore:\n+            assert ignored_file not in linted_file_paths\n+        else:\n+            assert ignored_file in linted_file_paths\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "diff --git a/tests/test_pylint_runners.py b/tests/test_pylint_runners.py\nindex 580708d..7e9d498 100644\n--- a/tests/test_pylint_runners.py\n+++ b/tests/test_pylint_runners.py\n@@ -35,8 +35,8 @@ def test_runner(runner: Callable, tmpdir: LocalPath) -> None:\n def test_runner_with_arguments(runner: Callable, tmpdir: LocalPath) -> None:\n     \"\"\"Check the runners with arguments as parameter instead of sys.argv.\"\"\"\n     filepath = os.path.abspath(__file__)\n-    testargs = [filepath]\n+    testargs = [filepath, \"--jobs=0\"]\n     with tmpdir.as_cwd():\n         with pytest.raises(SystemExit) as err:\n             runner(testargs)\n-        assert err.value.code == 0\n+        assert err.value.code == 0\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..e2695e8 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1329,6 +1329,25 @@ class TestRunTC:\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n                 )\n+    \n+    def test_ignore_path_recursive(self) -> None:\n+        \"\"\"Tests that ignore-paths is respected when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^directory/ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n \n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..d6f3277 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -767,6 +767,30 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n \n             paths = [cwd, \"/custom_pythonpath\", *default_paths]\n             sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [\"\", *default_paths]  # Case where sys.path starts with an empty string\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [\"other_path\", *default_paths]  # Case where sys.path starts with a non-removed path\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths\n+\n+            # Mocking getcwd to simulate runpy run\n+            with patch(\"os.getcwd\", return_value=\"/current_dir\"):\n+                paths = [\"/current_dir\", *default_paths]  # Current working directory\n+                sys.path = copy(paths)\n+                with _test_environ_pythonpath():\n+                    modify_sys_path()\n+                assert sys.path == paths[1:]\n+            sys.path = copy(paths)\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..b3c37b6 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,47 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+\n+def test_caplog_get_records_and_clear_consistency(caplog):\n+    \"\"\"Test to ensure get_records and records remain consistent after clearing.\"\"\"\n+    \n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Initial state consistency\n+    verify_consistency()\n+\n+    # Log a message and verify consistency\n+    logging.warning(\"test message\")\n+    verify_consistency()\n+\n+    # Clear capture logs and verify consistency\n+    caplog.clear()\n+    verify_consistency()  # This would fail if the issue isn't resolved\n+\n+    # Log a new message after clear and verify\n+    logging.info(\"new test message\")\n+    verify_consistency()\n+\n+def test_caplog_clear_independence_between_stages(caplog, logging_during_setup_and_teardown):\n+    \"\"\"Test to ensure clearing call stage logs doesn't affect other stages.\"\"\"\n+    \n+    logger.info(\"another_call_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"another_call_log\"]\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+\n+    caplog.clear()\n+\n+    # After clear, call logs should be empty, setup logs should remain intact\n+    assert caplog.get_records(\"call\") == []\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+\n+    # Log another message to call after clear\n+    logging.info(\"another_call_log_after_clear\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"another_call_log_after_clear\"]\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n",
  "pytest-dev__pytest-10081": "",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..f57bce6 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,9 +1051,31 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+import sys\n+import pytest\n+from _pytest.capture import EncodedFile\n \n-@contextlib.contextmanager\n-def saved_fd(fd):\n+def test_encoded_file_mode():\n+    \"\"\"\n+    Test that EncodedFile does not advertise binary mode.\n+    \"\"\"\n+    with pytest.raises(TypeError, match=\"must be str, not bytes\"):\n+        ef = EncodedFile(buffer=sys.stdout, encoding='utf-8')\n+        ef.write(b\"binary data\")\n+\n+def test_encoded_file_write():\n+    \"\"\"\n+    Test that EncodedFile writes strings correctly.\n+    \"\"\"\n+    ef = EncodedFile(buffer=sys.stdout, encoding='utf-8')\n+    test_string = \"sample text\"\n+    ef.write(test_string)\n+\n+def test_capfd_sys_stdout_mode(capfd):\n+    \"\"\"\n+    Ensure that sys.stdout does not include 'b' in its mode.\n+    \"\"\"\n+    assert \"b\" not in sys.stdout.mode\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..ebbfd56 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,10 +116,34 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n-\n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n \n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        # This test specifically checks if the lexer has been changed to \"text\" to fix HTTP 400 error\n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()  # Verify lexer is set to text\n+        assert \"code=full-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n+    def test_create_new_paste_with_invalid_contents(self, pastebin, mocked_urlopen):\n+        # Test with input that previously caused the HTTP 400 error\n+        invalid_contents = b\"\"\"def foo():\\n  print(\"foo\")\\n\"\"\"  # Example content that could cause issues\n+        result = pastebin.create_new_paste(invalid_contents)\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()  # Ensure lexer is text even for problematic content\n+        assert \"code=\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n@@ -130,4 +154,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "",
  "pytest-dev__pytest-7205": "",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..32a2a52 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -359,28 +360,32 @@ class TestXFail:\n         result = testdir.runpytest(p, \"--runxfail\")\n         result.stdout.fnmatch_lines([\"*1 pass*\"])\n \n-    def test_xfail_imperative_in_setup_function(self, testdir):\n+    def test_dynamic_xfail_marker_during_runtest(self, testdir: Testdir) -> None:\n+        # Test dynamically adding an xfail marker during the test execution\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n-            def setup_function(function):\n-                pytest.xfail(\"hello\")\n-\n-            def test_this():\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"dynamic xfail\"))\n                 assert 0\n-        \"\"\"\n+            \"\"\"\n         )\n-        result = testdir.runpytest(p)\n-        result.stdout.fnmatch_lines([\"*1 xfailed*\"])\n-        result = testdir.runpytest(p, \"-rx\")\n-        result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*reason:*hello*\"])\n-        result = testdir.runpytest(p, \"--runxfail\")\n-        result.stdout.fnmatch_lines(\n+        result = testdir.runpytest(p, \"-rxX\")\n+        result.assert_outcomes(xfailed=1)\n+        result.stdout.fnmatch_lines([\"*XFAIL*test_dynamic_xfail*\", \"*dynamic xfail*\"])\n+\n+    def test_dynamic_xfail_marker_passed_strict(self, testdir: Testdir):\n+        # Test dynamically adding a strict xfail marker during the test execution\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xpass(request):\n+                request.node.add_marker(pytest.mark.xfail(strict=True, reason=\"strict xfail\"))\n             \"\"\"\n-            *def test_this*\n-            *1 fail*\n-        \"\"\"\n         )\n+        result = testdir.runpytest(p, \"-rxX\")\n+        result.stdout.fnmatch_lines([\"*XPASS*test_dynamic_xpass*\", \"*strict xfail*\"])\n+        result.assert_outcomes(failed=1)\n \n     def xtest_dynamic_xfail_set_during_setup(self, testdir):\n         p = testdir.makepyfile(\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..9b67235 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,8 +513,15 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n-\n-    def test_capfdbinary(self, testdir):\n+    @pytest.mark.parametrize(\"input_text, expected_output\", [\n+        (\"Line ending with Carriage Return\\r\", \"\\r\"),\n+        (\"Line ending with Newline\\n\", \"\\n\"),\n+        (\"Line ending with Carriage Return and Newline\\r\\n\", \"\\r\\n\")\n+    ])\n+    def test_cafd_preserves_various_newlines(self, capfd, input_text, expected_output):\n+        print(input_text, end='')\n+        out, err = capfd.readouterr()\n+        assert out.endswith(expected_output)\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n             def test_hello(capfdbinary):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..72df64c 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,7 +51,24 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n-def test_with_statement(caplog):\n+def test_preserve_log_level_across_tests(testdir):\n+    \"\"\"Ensure that log levels are reset between tests when using the caplog fixture.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test_a(caplog):\n+            caplog.set_level(logging.WARNING)\n+            logging.getLogger().debug(\"This should not appear\")\n+            logging.getLogger().warning(\"This should appear\")\n+        \n+        def test_b(caplog):\n+            logging.getLogger().info(\"Info log should also not appear\")\n+            assert caplog.handler.level == 0  # Should be reset\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..6ed8f6a 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,4 +1,49 @@\n+\n import os\n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n+def test_symlink_to_subdirectory_is_collected(pytester: Pytester) -> None:\n+    \"\"\"Ensures that a symlink to a subdirectory is collected.\"\"\"\n+    parent_dir = pytester.mkdir(\"parent_dir\")\n+    sub_dir = parent_dir.mkdir(\"sub_dir\")\n+    sub_dir.joinpath(\"test_it.py\").write_text(\"def test_sub(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_to_sub\").symlink_to(sub_dir)\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=1)  # There should only be 1 test in the symlinked dir\n+\n+\n+def test_symlink_with_multiple_tests(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory with multiple test files is collected.\"\"\"\n+    dir = pytester.mkdir(\"multi_test_dir\")\n+    dir.joinpath(\"test_one.py\").write_text(\"def test_one(): pass\", \"utf-8\")\n+    dir.joinpath(\"test_two.py\").write_text(\"def test_two(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_multi_test\").symlink_to(dir)\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)  # Both test files should be collected\n+\n+\n+def test_symlink_chain_collected(pytester: Pytester) -> None:\n+    \"\"\"Test if a chain of symlinks pointing to a directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"actual_dir_chain\")\n+    dir.joinpath(\"test_chain.py\").write_text(\"def test_chain(): pass\", \"utf-8\")\n+    intermediate_symlink = pytester.path.joinpath(\"intermediate_symlink\")\n+    final_symlink = pytester.path.joinpath(\"final_symlink\")\n+\n+    intermediate_symlink.symlink_to(dir)\n+    final_symlink.symlink_to(intermediate_symlink)\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=1)  # Only one test in the chain\n+\n import pprint\n import sys\n import textwrap\n@@ -9,7 +54,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..2447bb2 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -302,6 +302,34 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec.assertoutcome(passed=3)\n \n \n+def test_fixtures_setup_setUpClass_issue8394(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+            def test_func1(self):\n+                pass\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+        \"\"\"\n+    )\n+    # The --fixtures command should not show the unittest fixture by default\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*no docstring available*\")\n+\n+    # Running with -v should reveal the fixture with no docstring when verbose\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*no docstring available*\"])\n+\n+import pytest\n+from _pytest.pytester import Pytester\n+\n def test_setup_class(pytester: Pytester) -> None:\n     testpath = pytester.makepyfile(\n         \"\"\"\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..ae4673a 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,7 +574,31 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n-def test_ridgecv_store_cv_values():\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+    \n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+    \n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+    \n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    \n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+    \n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..6e69af9 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,16 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+from sklearn.utils.testing import assert_all_finite\n+from sklearn.metrics import fowlkes_mallows_score\n+\n+def test_fowlkes_mallows_score_overflow():\n+    # Create large clusters to trigger potential overflow\n+    labels_true = np.array([1] * (2**16) + [2] * (2**16) + [3] * (2**16))\n+    labels_pred = np.array([1] * (2**16) + [2] * (2**15) + [3] * (2**15) + [4] * (2**14))\n+\n+    # Ensure the fowlkes mallows score is finite and does not raise warnings\n+    assert_all_finite(fowlkes_mallows_score(labels_true, labels_pred))\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..f941060 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -559,7 +559,20 @@ def test_feature_names():\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n \n-def test_vectorizer_max_features():\n+def test_countvectorizer_get_feature_names_with_custom_vocabulary():\n+    from sklearn.feature_extraction.text import CountVectorizer\n+    from sklearn.exceptions import NotFittedError\n+    from numpy.testing import assert_raises\n+\n+    # Custom vocabulary\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    # Initialize CountVectorizer with the custom vocabulary\n+    vectorizer = CountVectorizer(vocabulary=vocab)\n+\n+    # Since the vocabulary is provided, get_feature_names should not raise NotFittedError\n+    feature_names = vectorizer.get_feature_names()\n+    \n+    assert_array_equal(vocab, feature_names)\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..35060d6 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1172,8 +1172,24 @@ def test_search_cv_timing():\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+def test_search_cv_refit_time():\n+    # Test to ensure that the `refit_time_` attribute is present and valid\n+    X = np.random.randn(20, 3)\n+    y = np.random.choice([0, 1], size=20)\n \n-def test_grid_search_correct_score_results():\n+    grid_search = GridSearchCV(SVC(), param_grid={'C': [0.1, 1, 10]}, refit=True)\n+    grid_search.fit(X, y)\n+\n+    assert_true(hasattr(grid_search, \"refit_time_\"), \"Refit time attribute should exist.\")\n+    assert_true(isinstance(grid_search.refit_time_, float), \"Refit time should be a float.\")\n+    assert_greater_equal(grid_search.refit_time_, 0.0, \"Refit time should be non-negative.\")\n+\n+    randomized_search = RandomizedSearchCV(SVC(), param_distributions={'C': [0.1, 1, 10]}, n_iter=3, refit=True)\n+    randomized_search.fit(X, y)\n+\n+    assert_true(hasattr(randomized_search, \"refit_time_\"), \"Refit time attribute should exist.\")\n+    assert_true(isinstance(randomized_search.refit_time_, float), \"Refit time should be a float.\")\n+    assert_greater_equal(randomized_search.refit_time_, 0.0, \"Refit time should be non-negative.\")\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..9d2264a 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -491,8 +491,34 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n+from sklearn.utils.validation import check_is_fitted\n+from sklearn.metrics import log_loss\n+\n+def test_logistic_cv_multinomial_score():\n+    # Ensure LogisticRegressionCV uses the correct scores when multi_class is 'multinomial'\n+    X, y = make_classification(n_samples=200, n_features=5, n_classes=3, n_informative=3, random_state=42)\n+\n+    # Split data into train and test\n+    train_idx = np.arange(150)\n+    test_idx = np.arange(150, 200)\n+\n+    # Create and fit the LogisticRegressionCV model with multinomial\n+    clf = LogisticRegressionCV(cv=5, solver='lbfgs', multi_class='multinomial', random_state=42)\n+    clf.fit(X[train_idx], y[train_idx])\n+\n+    # Check if the classifier is fitted\n+    check_is_fitted(clf)\n+\n+    # Calculate manual log loss using multinomial probabilities\n+    y_prob = clf.predict_proba(X[test_idx])\n+    manual_log_loss = log_loss(y[test_idx], y_prob)\n+\n+    # Compare with LogisticRegressionCV's cross-validated score\n+    # We expect the mean score to closely match the manually computed log loss\n+    cv_scores = clf.scores_[np.unique(y)]\n+    cv_mean_score = np.mean([np.mean(fold_scores) for fold_scores in cv_scores])\n \n-def test_multinomial_logistic_regression_string_inputs():\n+    assert np.isclose(cv_mean_score, -manual_log_loss, atol=1e-2), \"The CV score does not match the expected log loss for multinomial\"\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..98240ee 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,6 +167,19 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n+\n+def test_clone_with_estimator_type():\n+    # Check that clone works for parameters that are classes rather than instances\n+    from sklearn.base import BaseEstimator\n+    class MyEstimator(BaseEstimator):\n+        def __init__(self, estimator_class=None):\n+            self.estimator_class = estimator_class\n+\n+    estimator = MyEstimator(estimator_class=MyEstimator)\n+    cloned_estimator = clone(estimator)\n+\n+    assert estimator.estimator_class is cloned_estimator.estimator_class\n+\n def test_repr():\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..4c79424 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -8,6 +8,8 @@ from scipy import linalg\n import pytest\n \n from sklearn.model_selection import train_test_split\n+import numpy as np\n+from sklearn.linear_model.least_angle import LassoLarsIC\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_less\n@@ -678,7 +680,21 @@ def test_lasso_lars_vs_R_implementation():\n     model_lasso_lars2.fit(X, y)\n     skl_betas2 = model_lasso_lars2.coef_path_\n \n-    # Let's rescale back the coefficients returned by sklearn before comparing\n+@pytest.mark.parametrize('init_copy_X, fit_copy_X', [(True, None), (False, None), (True, False), (False, True)])\n+def test_lasso_lars_ic_fit_copyX_interaction(init_copy_X, fit_copy_X):\n+    \"\"\"\n+    Test the interaction between __init__ and fit's copy_X parameter.\n+    If fit's copy_X is None, it uses the value from __init__,\n+    otherwise it uses the value provided to the fit method.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+    expected = init_copy_X if fit_copy_X is None else fit_copy_X\n+    assert expected == np.array_equal(X, X_copy)\n     # against the R result (read the note above)\n     temp = X - np.mean(X, axis=0)\n     normx = np.sqrt(np.sum(temp ** 2, axis=0))\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..1d4de5a 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -494,6 +494,22 @@ def test_shuffle_stratifiedkfold():\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n+def test_stratifiedkfold_random_state_effects():\n+    # Check that different random states give different splits\n+    # when shuffle=True in StratifiedKFold\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    # Different random states should yield different test set splits\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=43)\n+\n+    test_set1 = [test_idx for _, test_idx in kf1.split(X, y)]\n+    test_set2 = [test_idx for _, test_idx in kf2.split(X, y)]\n+    \n+    # Check that the test indices are different\n+    assert any(not np.array_equal(ts1, ts2) for ts1, ts2 in zip(test_set1, test_set2))\n+\n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n",
  "scikit-learn__scikit-learn-13135": "",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..dd85106 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,16 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    rng = np.random.RandomState(0)\n+    X = rng.randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..cbfd960 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1070,4 +1070,32 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n+\n+\n+def test_pipeline_len():\n+    from sklearn import svm\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SelectKBest, f_regression\n+    from sklearn.pipeline import Pipeline\n+\n+    # Generate some data to play with\n+    X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+\n+    # Create a pipeline with two steps\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = svm.SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    \n+    # Test length of pipeline\n+    assert len(pipe) == 2\n+\n+    # Test length with different steps\n+    pipe_empty = Pipeline([])\n+    assert len(pipe_empty) == 0\n+\n+    pipe_single = Pipeline([('anova', anova_filter)])\n+    assert len(pipe_single) == 1\n+\n+    pipe_three = Pipeline([('anova', anova_filter), ('svc', clf), ('svc2', clf)])\n+    assert len(pipe_three) == 3\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..e38cdec 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -6,6 +7,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>\n # License: BSD 3 clause\n \n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n import pytest\n \n import numpy as np\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..e378416 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -328,6 +328,12 @@ def test_export_text_errors():\n                          export_text, clf, spacing=0)\n \n \n+from sklearn.tree import DecisionTreeClassifier\n+from sklearn.tree import DecisionTreeRegressor\n+from sklearn.tree.export import export_text\n+from sklearn.datasets import load_iris\n+from textwrap import dedent\n+\n def test_export_text():\n     clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n     clf.fit(X, y)\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..00de3ee 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1554,7 +1554,34 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('solver', ('liblinear', 'saga'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+def test_LogisticRegressionCV_no_refit_extended(penalty, solver, multi_class):\n+    # Extended test for LogisticRegressionCV when refit is False\n+    # Including various penalties, solvers, and multi_class options\n+\n+    n_classes = 3\n+    n_features = 3\n+    n_samples = 1000\n+    np.random.seed(29)\n+    X = np.random.normal(size=(n_samples, n_features))\n+    beta = np.random.normal(size=n_features)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    Cs = np.logspace(-4, 4, 3)\n+    l1_ratios = np.linspace(0, 1, 2) if penalty == 'elasticnet' else None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver=solver,\n+                                l1_ratios=l1_ratios, random_state=0,\n+                                multi_class=multi_class, refit=False, cv=5)\n+    lrcv.fit(X, y)\n+    \n+    assert lrcv.C_.shape == (n_classes,)\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..f09393a 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -23,6 +23,7 @@ def test_get_deps_info():\n     assert 'Cython' in deps_info\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n+    assert 'joblib' in deps_info\n \n \n def test_show_versions_with_blas(capsys):\n@@ -30,4 +31,5 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n+    assert 'joblib' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..646154b 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -101,6 +101,52 @@ def test_extract_xi():\n                    xi=0.4).fit(X)\n     assert_array_equal(clust.labels_, expected_labels)\n \n+def test_optics_with_float_min_samples():\n+    # Generate random data to test with float min_samples\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    C4 = [-2, 3] + .3 * rng.randn(n_points_per_cluster, 2)\n+    C5 = [3, -2] + .6 * rng.randn(n_points_per_cluster, 2)\n+    C6 = [5, 6] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]]), C6))\n+    expected_labels = np.r_[[2] * 5, [0] * 5, [1] * 5, [3] * 5, [1] * 5,\n+                            -1, [4] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Test with min_samples as a float\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=2,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+def test_optics_with_int_min_samples():\n+    # Verify the original behavior with integer min_samples\n+    rng = np.random.RandomState(0)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    C4 = [-2, 3] + .3 * rng.randn(n_points_per_cluster, 2)\n+    C5 = [3, -2] + .6 * rng.randn(n_points_per_cluster, 2)\n+    C6 = [5, 6] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]]), C6))\n+    expected_labels = np.r_[[2] * 5, [0] * 5, [1] * 5, [3] * 5, [1] * 5,\n+                            -1, [4] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Test with min_samples as an integer\n+    clust = OPTICS(min_samples=3, min_cluster_size=2,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n     X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]] * 2), C6))\n     expected_labels = np.r_[[1] * 5, [3] * 5, [2] * 5, [0] * 5, [2] * 5,\n                             -1, -1, [4] * 5]\n@@ -112,6 +158,52 @@ def test_extract_xi():\n     # this may fail if the predecessor correction is not at work!\n     assert_array_equal(clust.labels_, expected_labels)\n \n+def test_optics_with_float_min_samples():\n+    # Generate random data to test with float min_samples\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    C4 = [-2, 3] + .3 * rng.randn(n_points_per_cluster, 2)\n+    C5 = [3, -2] + .6 * rng.randn(n_points_per_cluster, 2)\n+    C6 = [5, 6] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]]), C6))\n+    expected_labels = np.r_[[2] * 5, [0] * 5, [1] * 5, [3] * 5, [1] * 5,\n+                            -1, [4] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Test with min_samples as a float\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=2,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+def test_optics_with_int_min_samples():\n+    # Verify the original behavior with integer min_samples\n+    rng = np.random.RandomState(0)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    C4 = [-2, 3] + .3 * rng.randn(n_points_per_cluster, 2)\n+    C5 = [3, -2] + .6 * rng.randn(n_points_per_cluster, 2)\n+    C6 = [5, 6] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]]), C6))\n+    expected_labels = np.r_[[2] * 5, [0] * 5, [1] * 5, [3] * 5, [1] * 5,\n+                            -1, [4] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Test with min_samples as an integer\n+    clust = OPTICS(min_samples=3, min_cluster_size=2,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n     C1 = [[0, 0], [0, 0.1], [0, -.1], [0.1, 0]]\n     C2 = [[10, 10], [10, 9], [10, 11], [9, 10]]\n     C3 = [[100, 100], [100, 90], [100, 110], [90, 100]]\n@@ -124,6 +216,52 @@ def test_extract_xi():\n                    xi=0.04).fit(X)\n     assert_array_equal(clust.labels_, expected_labels)\n \n+def test_optics_with_float_min_samples():\n+    # Generate random data to test with float min_samples\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    C4 = [-2, 3] + .3 * rng.randn(n_points_per_cluster, 2)\n+    C5 = [3, -2] + .6 * rng.randn(n_points_per_cluster, 2)\n+    C6 = [5, 6] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]]), C6))\n+    expected_labels = np.r_[[2] * 5, [0] * 5, [1] * 5, [3] * 5, [1] * 5,\n+                            -1, [4] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Test with min_samples as a float\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=2,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+def test_optics_with_int_min_samples():\n+    # Verify the original behavior with integer min_samples\n+    rng = np.random.RandomState(0)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    C4 = [-2, 3] + .3 * rng.randn(n_points_per_cluster, 2)\n+    C5 = [3, -2] + .6 * rng.randn(n_points_per_cluster, 2)\n+    C6 = [5, 6] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]]), C6))\n+    expected_labels = np.r_[[2] * 5, [0] * 5, [1] * 5, [3] * 5, [1] * 5,\n+                            -1, [4] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Test with min_samples as an integer\n+    clust = OPTICS(min_samples=3, min_cluster_size=2,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n \n def test_cluster_hierarchy_():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..8158544 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -414,4 +414,16 @@ def test_infinite_values_missing_values():\n                                                learning_rate=1, max_depth=2)\n \n     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+\n+@pytest.mark.parametrize(\"scoring\", [None, 'loss'])\n+def test_string_target_early_stopping(scoring):\n+    # Regression tests for #14709 where the targets need to be encoded before\n+    # computing the score\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt.fit(X, y)\n+    # Assert no errors thrown and model is trained correctly\n+    assert gbrt.score(X, y) > 0.5\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..5a3a8ca 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,32 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_no_support_vectors():\n+    # Test case where the input data results in no support vectors\n+    X_train = sparse.csr_matrix([[0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0]])\n+    y_train = np.array([0.0, 0.0, 0.0])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert model.support_.size == 0\n+    assert not model.dual_coef_.data.size\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..c83f03d 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -78,6 +78,31 @@ def lazy_analyze(s):\n \n \n def test_strip_accents():\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaeresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # additional test case: combination of letters with multiple marks\n+    a = \"n\\u0303a\\u0301\"  # n with tilde, a with acute\n+    expected = \"na\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # mixed normalized and non-normalized forms\n+    s1 = chr(241)  # \u00f1\n+    s2 = chr(110) + chr(771)  # n\u0303\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_feature_select.py b/sklearn/feature_selection/tests/test_feature_select.py\nindex 1bc044a..0beb124 100644\n--- a/sklearn/feature_selection/tests/test_feature_select.py\n+++ b/sklearn/feature_selection/tests/test_feature_select.py\n@@ -943,4 +943,63 @@ def test_mutual_info_regression():\n     support = univariate_filter.get_support()\n     gtruth = np.zeros(10)\n     gtruth[:2] = 1\n-    assert_array_equal(support, gtruth)\n+    \n+def test_output_dataframe_dtypes():\n+    \"\"\"Verify output dtypes for DataFrame are preserved for different dtypes.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame(\n+        {\n+            \"a\": pd.Series([1.0, 2.4, 4.5], dtype=np.float32),\n+            \"b\": pd.Series([\"a\", \"b\", \"a\"], dtype=\"category\"),\n+            \"c\": pd.Series([\"j\", \"b\", \"b\"], dtype=\"category\"),\n+            \"d\": pd.Series([3.0, 2.4, 1.2], dtype=np.float64),\n+        }\n+    )\n+\n+    for step in [2, 3]:\n+        sel = StepSelector(step=step).set_output(transform=\"pandas\")\n+        sel.fit(X)\n+\n+        output = sel.transform(X)\n+        for name, dtype in output.dtypes.items():\n+            assert dtype == X.dtypes[name]\n+\n+    # step=0 will select nothing\n+    sel0 = StepSelector(step=0).set_output(transform=\"pandas\")\n+    sel0.fit(X)\n+\n+    msg = \"No features were selected\"\n+    with pytest.warns(UserWarning, match=msg):\n+        output0 = sel0.transform(X)\n+\n+    assert_array_equal(output0.index, X.index)\n+    assert output0.shape == (X.shape[0], 0)\n+\n+\n+def test_dataframe_output_dtypes_enhanced():\n+    \"\"\"Check that the output datafarme dtypes are the same as the input, including custom types.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"petal length (cm)\": np.float32,\n+            \"petal width (cm)\": np.float16,\n+        }\n+    )\n+    X[\"cat\"] = y.astype(\"category\")\n+    X[\"sepal length (cm)\"] = X[\"sepal length (cm)\"].astype(\"Int64\")  # Nullable integer\n+\n+    selector = SelectKBest(chi2, k=2).set_output(transform=\"pandas\")\n+    output = selector.fit_transform(X, y)\n+\n+    expected_dtypes = {\n+        \"petal length (cm)\": np.float32,\n+        \"petal width (cm)\": np.float16,\n+        \"cat\": \"category\",\n+    }\n+\n+    for column, expected_dtype in expected_dtypes.items():\n+        assert output[column].dtype == expected_dtype\n+    assert_array_equal(support, gtruth)\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..e7b461e 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1515,6 +1515,51 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     \"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n \n+def test_iterative_imputer_constant_fill_value():\n+    \"\"\"Check that we propagate properly the parameter `fill_value`.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+\n+    fill_value = 100\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    imputed_data = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [100, 2, 3, 100])\n+\n+def test_iterative_imputer_fill_value_with_nan():\n+    \"\"\"Test IterativeImputer with fill_value set to np.nan.\"\"\"\n+    X = np.array([[np.nan, 2, np.nan], [4, np.nan, 5], [6, 7, np.nan], [8, 9, 0]])\n+    \n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        missing_values=np.nan,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=1,\n+        random_state=0\n+    )\n+    imputer.fit_transform(X)\n+    expected_statistics = np.array([np.nan, 2, np.nan])\n+    assert np.isnan(imputer.initial_imputer_.statistics_).all()\n+    assert_array_equal(imputer.initial_imputer_.statistics_, expected_statistics)\n+\n+def test_iterative_imputer_fill_value_different_constant():\n+    \"\"\"Test different constant fill_value for each feature.\"\"\"\n+    X = np.array([[-1, 2, -1], [4, -1, 5], [-1, -1, -1], [8, 9, 0]])\n+    \n+    fill_value = 10\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0\n+    )\n+    imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [10, 10, 10])\n+\n     imputer = IterativeImputer(\n         initial_strategy=initial_strategy, keep_empty_features=True\n     )\n@@ -1529,6 +1574,51 @@ def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n \n+def test_iterative_imputer_constant_fill_value():\n+    \"\"\"Check that we propagate properly the parameter `fill_value`.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+\n+    fill_value = 100\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    imputed_data = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [100, 2, 3, 100])\n+\n+def test_iterative_imputer_fill_value_with_nan():\n+    \"\"\"Test IterativeImputer with fill_value set to np.nan.\"\"\"\n+    X = np.array([[np.nan, 2, np.nan], [4, np.nan, 5], [6, 7, np.nan], [8, 9, 0]])\n+    \n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        missing_values=np.nan,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=1,\n+        random_state=0\n+    )\n+    imputer.fit_transform(X)\n+    expected_statistics = np.array([np.nan, 2, np.nan])\n+    assert np.isnan(imputer.initial_imputer_.statistics_).all()\n+    assert_array_equal(imputer.initial_imputer_.statistics_, expected_statistics)\n+\n+def test_iterative_imputer_fill_value_different_constant():\n+    \"\"\"Test different constant fill_value for each feature.\"\"\"\n+    X = np.array([[-1, 2, -1], [4, -1, 5], [-1, -1, -1], [8, 9, 0]])\n+    \n+    fill_value = 10\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0\n+    )\n+    imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [10, 10, 10])\n+\n     imputer = KNNImputer(keep_empty_features=keep_empty_features)\n \n     for method in [\"fit_transform\", \"transform\"]:\n",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..298d8ea 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -333,9 +333,27 @@ def test_base_estimator_property_deprecated():\n     model = IsolationForest()\n     model.fit(X, y)\n \n+def test_iforest_no_warning_with_dataframe():\n+    \"\"\"Test that IsolationForest does not raise a warning with DataFrame and non-default contamination.\"\"\"\n+    import pandas as pd\n+    import warnings\n+    from sklearn.ensemble import IsolationForest\n+    import numpy as np\n+\n+    # Creating a simple DataFrame\n+    X = pd.DataFrame({\"a\": np.random.randn(10)})\n+    \n+    model = IsolationForest(random_state=0, contamination=0.1)\n+\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        model.fit(X)\n+        # Check that no warnings of type UserWarning are raised\n+        assert not any(item.category == UserWarning for item in w)\n+\n     warn_msg = (\n         \"Attribute `base_estimator_` was deprecated in version 1.2 and \"\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..1c6786f 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n+import pandas as pd\n+import pytest\n+import numpy as np\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..ce4f56f 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,30 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+    inertia_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).inertia_\n+    assert_almost_equal(inertia_1, inertia_2, decimal=6)\n+\n+def test_result_of_kmeans_with_high_n_jobs():\n+    # Testing with more jobs to ensure consistent results\n+    rnd = np.random.RandomState(42)\n+    X = rnd.normal(size=(100, 5))\n+\n+    inertia_1 = KMeans(n_clusters=5, random_state=42, n_jobs=1).fit(X).inertia_\n+    inertia_3 = KMeans(n_clusters=5, random_state=42, n_jobs=3).fit(X).inertia_\n+    inertia_4 = KMeans(n_clusters=5, random_state=42, n_jobs=4).fit(X).inertia_\n \n-def test_minibatch_kmeans_partial_fit_int_data():\n+    assert_almost_equal(inertia_1, inertia_3, decimal=6)\n+    assert_almost_equal(inertia_1, inertia_4, decimal=6)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..02296b4 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,8 +251,15 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n-\n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_with_indentation(literal_inc_path):\n+    # Test to verify that prepend retains leading whitespace as expected\n+    options = {'lines': '19-21', 'dedent': 4, 'prepend': '    <plugin>'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"    <plugin>\\n\"\n+                       \"    <groupId>org.apache.maven.plugins</groupId>\\n\"\n+                       \"    <artifactId>maven-compiler-plugin</artifactId>\\n\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n     # tab-width: 4\n     options = {'tab-width': 4, 'pyobject': 'Qux'}\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..759b13f 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,9 +1023,27 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n-\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_without_return_type(app):\n+    # This test verifies that a class with an __init__ method that returns None\n+    # does not incorrectly display a \"Return type\" in the documentation.\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints.Square(width, height)\\n'\n+            '\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **width** (*int*) --\\n'\n+            '\\n'\n+            '      **height** (*int*) --\\n'\n+            '\\n' not in context)\n def test_autodoc_typehints_description_with_documented_init(app):\n     (app.srcdir / 'index.rst').write_text(\n         '.. autoclass:: target.typehints._ClassWithDocumentedInit\\n'\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..ce2115d 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -10,12 +11,38 @@ import pytest\n \n from sphinx.util.osutil import cd\n \n-\n-@pytest.mark.sphinx('gettext', srcdir='root-gettext')\n-def test_build_gettext(app):\n-    # Generic build; should fail only when the builder is horribly broken.\n-    app.builder.build_all()\n-\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n+\n+def test_Catalog_duplicated_message():\n+    catalog = Catalog()\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 2))\n+    catalog.add('hello', MsgOrigin('/path/to/yetanother', 1))\n+    catalog.add('world', MsgOrigin('/path/to/filename', 1))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'hello'\n+    assert sorted(msg1.locations) == sorted([('/path/to/filename', 1),\n+                              ('/path/to/filename', 2),\n+                              ('/path/to/yetanother', 1)])\n+    assert msg2.text == 'world'\n+    assert msg2.locations == [('/path/to/filename', 1)]\n+\n+def test_Catalog_no_duplicate_locations():\n+    catalog = Catalog()\n+    catalog.add('test', MsgOrigin('/path/to/file', 10))\n+    catalog.add('test', MsgOrigin('/path/to/file', 10))\n+    catalog.add('test', MsgOrigin('/path/to/file', 20))\n+\n+    assert len(list(catalog)) == 1\n+\n+    msg = list(catalog)[0]\n+    assert msg.text == 'test'\n+    assert sorted(msg.locations) == sorted([('/path/to/file', 10),\n+                             ('/path/to/file', 20)])\n     # Do messages end up in the correct location?\n     # top-level documents end up in a message catalog\n     assert (app.outdir / 'extapi.pot').isfile()\n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..d4591d2 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -336,8 +336,19 @@ def test_get_toctree_for_includehidden(app):\n                 ([list_item, compact_paragraph, reference, \"quux\"],\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n-\n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n+\n+    # Test case to verify that toctree with genindex, modindex, and search does not raise warnings\n+    @pytest.mark.sphinx('xml', testroot='toctree-index')\n+    def test_toctree_indices(app):\n+        app.build()\n+        toctree = app.env.tocs['index']\n+        \n+        # Verify the expected structure of the toctree including indices\n+        assert_node(toctree[1][1], addnodes.toctree,\n+                    caption=\"Indices\", glob=False, hidden=False,\n+                    titlesonly=False, maxdepth=-1, numbered=0,\n+                    entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')])\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n     assert_node(toctree[1][0][1][2][0][0], reference, refuri=\"foo#foo-2\", secnumber=[1, 3])\n@@ -345,4 +356,4 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n \n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..a90a8ac 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -148,7 +148,26 @@ def test_glossary(app):\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n \n-def test_glossary_warning(app, status, warning):\n+def test_glossary_case_sensitivity(app, status, warning):\n+    # Test for case sensitivity in glossary terms\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       A popular database.\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       A command line tool.\\n\")\n+    \n+    # Parse the glossary text\n+    restructuredtext.parse(app, text, \"case_sensitivity\")\n+\n+    # Check if both terms are parsed without warnings\n+    assert \"duplicate term description\" not in warning.getvalue()\n+\n+    # Get the glossary entries as objects\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..38e9265 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,22 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+def test_signature_from_str_positional_only_with_defaults():\n+    # This test checks if the positional only argument with a default is handled correctly\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+    assert list(sig.parameters.keys()) == ['a', 'b']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n+    assert sig.parameters['b'].default == Parameter.empty\n+\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..3e263a7 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -49,6 +50,16 @@ def test_MockObject():\n     assert SubClass.__doc__ == \"docstring of SubClass\"\n     assert isinstance(obj, SubClass)\n     assert obj.method() == \"string\"\n+\n+    # Test for generically typed class\n+    T = TypeVar('T')\n+\n+    class SubClassGeneric(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClassGeneric\"\"\"\n+\n+    obj_generic = SubClassGeneric()\n+    assert SubClassGeneric.__doc__ == \"docstring of SubClassGeneric\"\n+    assert isinstance(obj_generic, SubClassGeneric)\n     assert isinstance(obj.other_method(), SubClass)\n \n \n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..a6624f7 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -9,11 +10,35 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+class SampleClassWithDecoratedInit:\n+    @simple_decorator\n+    def __init__(self):\n+        \"\"\"This is a decorated __init__ method.\"\"\"\n+        pass\n+\n+class TestDecoratedInit(TestCase):\n+    def setUp(self):\n+        self.app = mock.Mock()\n+        self.config = Config(\n+            napoleon_include_init_with_doc=True,\n+            napoleon_include_private_with_doc=False,\n+            napoleon_include_special_with_doc=False,\n+        )\n+\n+    def test_decorated_init_doc(self):\n+        # This simulates checking whether the decorated __init__ is included in the docs\n+        docstring = _process_docstring(\n+            self.app, 'class', 'SampleClassWithDecoratedInit.__init__',\n+            SampleClassWithDecoratedInit.__init__, self.config\n+        )\n+        self.assertIn(\"This is a decorated __init__ method.\", docstring)\n+\n import sys\n from collections import namedtuple\n from unittest import TestCase, mock\n \n from sphinx.application import Sphinx\n+from sphinx.testing.util import simple_decorator\n from sphinx.ext.napoleon import _process_docstring, _skip_member, Config, setup\n \n \n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..43f73b9 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -13,9 +13,19 @@ import re\n from unittest import mock\n import pytest\n \n-\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n-def test_defaults(app, status, warning):\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # Check for valid local files, should not produce errors\n+    assert \"local-file\" not in content\n+    # Check for invalid local files, should produce errors\n+    assert \"[broken] path/to/notfound\" in content\n+    assert len(content.splitlines()) == 5\n     app.builder.build_all()\n \n     assert (app.outdir / 'output.txt').exists()\n@@ -32,9 +42,32 @@ def test_defaults(app, status, warning):\n     assert \"Not Found for url: https://www.google.com/image2.png\" in content\n     assert len(content.splitlines()) == 5\n \n-\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n-def test_defaults_json(app, status, warning):\n+def test_local_links_json(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.json').exists()\n+    content = (app.outdir / 'output.json').read_text()\n+    print(content)\n+\n+    rows = [json.loads(x) for x in content.splitlines()]\n+    row = rows[0]\n+    for attr in [\"filename\", \"lineno\", \"status\", \"code\", \"uri\",\n+                 \"info\"]:\n+        assert attr in row\n+\n+    assert len(content.splitlines()) == 8\n+    assert len(rows) == 8\n+    # the output order of the rows is not stable\n+    # due to possible variance in network latency\n+    rowsby = {row[\"uri\"]:row for row in rows}\n+    \n+    # Check for valid local files, should not produce errors\n+    assert rowsby[\"conf.py\"][\"status\"] == \"working\"\n+    \n+    # Check for invalid local files\n+    assert rowsby[\"path/to/notfound\"][\"status\"] == \"broken\"\n+    assert rowsby[\"path/to/notfound\"][\"info\"] == \"[Errno 2] No such file or directory: 'path/to/notfound'\"\n     app.builder.build_all()\n \n     assert (app.outdir / 'output.json').exists()\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..2fb5c47 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -59,4 +60,38 @@ def test_private_field_and_private_members(app):\n         '',\n         '   :meta private:',\n         '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_private_function,_another_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_function is a docstring().',\n+        '',\n+        '.. py:function:: _another_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   _another_private_function is a docstring().',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_no_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": \"\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n     ]\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..095bd11 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,39 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n-\n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+import os\n+from babel.messages import pofile\n+from sphinx import locale\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_locale_translation(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # Clear the translators cache to ensure fresh test setup\n+        locale.translators.clear()\n+\n+        # Setup the directory for the custom PO file\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            # Add custom translation entries\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Build the application and convert the PO file into an MO file\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        # Clear the cache again to avoid side effects on other tests\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..849da7a 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,38 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import sys\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='Python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={\n+                        'autodoc_typehints': 'description',\n+                        'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'},\n+                    })\n+def test_autodoc_typehints_aliases_for_JSONObject(app: SphinxTestApp):\n+    (app.srcdir / 'annotations.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    context = (app.outdir / 'annotations.txt').read_text()\n+    expected_output = (\n+        \"types.sphinx_doc(data)\\n\"\n+        \"\\n\"\n+        \"   Does it work.\\n\"\n+        \"\\n\"\n+        \"   Parameters:\\n\"\n+        \"      * **data** (*types.JSONObject*) --\\n\"\n+        \"        Does it args.\\n\"\n+        \"\\n\"\n+        \"   Returns:\\n\"\n+        \"      Does it work in return.\\n\"\n+        \"\\n\"\n+        \"   Return type:\\n\"\n+        \"      types.JSONObject\\n\"\n+    )\n+    assert expected_output in context\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..ac1f177 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -20,7 +20,44 @@ from sphinx import addnodes\n from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_module_with_empty_all_attribute(app):\n+    # Test when __all__ is empty, no members should be documented unless explicitly listed\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    expected = [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+    assert list(actual) == expected\n+\n+    # Test when __all__ is empty and specific members are requested\n+    options = {'members': ['foo', 'bar']}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    expected = [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: bar()',\n+        '   :module: target.empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+    assert list(actual) == expected\n+\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..82f6405 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,15 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    description = inspect.object_description(MyEnum.ValueA)\n+    assert description == \"MyEnum.ValueA\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..77b2184 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -17,8 +17,66 @@ from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n \n+import sys\n+from unittest.mock import patch, MagicMock\n+\n warnfile = StringIO()\n \n+def test_exits_when_existing_confpy(monkeypatch):\n+    # The code detects existing conf.py with path.isfile()\n+    # so we mock it as True with pytest's monkeypatch\n+    def mock_isfile(p):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    qs.term_input = lambda prompt: ''\n+    d = {}\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n+\n+\n+def test_correct_behavior_when_existing_confpy(monkeypatch):\n+    \"\"\"\n+    Test that sphinx-quickstart exits correctly when Enter is pressed at the\n+    root path prompt and an existing conf.py is detected.\n+    \"\"\"\n+    def mock_isfile(p):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    qs.term_input = lambda prompt: ''\n+\n+    with patch('sys.exit') as mock_exit:\n+        d = {}\n+        qs.ask_user(d)\n+        mock_exit.assert_called_once_with(1)\n+\n+\n+def test_behavior_with_new_path(monkeypatch):\n+    \"\"\"\n+    Test that sphinx-quickstart continues when a new valid path is provided\n+    that doesn't contain an existing conf.py.\n+    \"\"\"\n+    def mock_isfile(p):\n+        return p == 'existing/conf.py'\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    def mock_input(prompt):\n+        if \"Root path for the documentation\" in prompt:\n+            return 'newpath'\n+        return ''\n+\n+    qs.term_input = mock_input\n+\n+    d = {}\n+    with patch('sys.exit') as mock_exit:\n+        qs.ask_user(d)\n+        assert d['path'] == 'newpath'\n+        mock_exit.assert_not_called()\n+\n \n def setup_module():\n     nocolor()\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..b81927d 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                            # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..db85ec7 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -846,8 +846,48 @@ def test_pyproperty(app):\n     assert 'Class.prop2' in domain.objects\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n+def test_property_cross_reference(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: y\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n \n-def test_pydecorator_signature(app):\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_name, \"Point\"])],\n+                                  desc_content)]))\n+    assert_node(doctree[1][1][1], addnodes.index,\n+                entries=[('single', 'x (Point attribute)', 'Point.x', '', None)])\n+    assert_node(doctree[1][1][3], addnodes.index,\n+                entries=[('single', 'y (Point attribute)', 'Point.y', '', None)])\n+    assert 'Point.x' in domain.objects\n+    assert domain.objects['Point.x'] == ('index', 'Point.x', 'attribute', False)\n+    assert 'Point.y' in domain.objects\n+    assert domain.objects['Point.y'] == ('index', 'Point.y', 'attribute', False)\n+\n+    assert_node(doctree[2][1][1], addnodes.index,\n+                entries=[('single', 'start (Square attribute)', 'Square.start', '', None)])\n+    assert_node(doctree[2][1][3], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, \": Point\"])],\n+                                   [desc_content, ()]))\n+    assert 'Square.start' in domain.objects\n+    assert domain.objects['Square.start'] == ('index', 'Square.start', 'attribute', False)\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..82633b2 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -679,6 +679,18 @@ def test_pyclass_options(app):\n     assert domain.objects['Class2'] == ('index', 'Class2', 'class', False)\n \n \n+def test_pymethod_as_property_no_parens(app):\n+    text = (\".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   .. py:method:: meth_no_parens\\n\"\n+            \"      :property:\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree[0][1][0], addnodes.index,\n+                entries=[('single', 'meth_no_parens (Class property)', 'Class.meth_no_parens', '', None)])\n+    assert 'Class.meth_no_parens' in domain.objects\n+    assert domain.objects['Class.meth_no_parens'] == ('index', 'Class.meth_no_parens', 'method', False)\n+\n def test_pymethod_options(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n@@ -756,7 +768,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..084b0cc 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,35 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy.geometry import Point2D, Point3D\n+from sympy import sqrt\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_mixed_dimensions():\n+    # Test with another 3D point and compare with another 2D point\n+    p1 = Point3D(3, 1, 4)\n+    p2 = Point2D(6, 1)\n+    assert p1.distance(p2) == sqrt(25)\n+\n+    # Test with identical 2D and 3D points\n+    p1 = Point3D(1, 1, 0)\n+    p2 = Point2D(1, 1)\n+    assert p1.distance(p2) == 0\n+\n+    # Further test with 3D points\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 6, 8)\n+    assert p1.distance(p2) == sqrt(50)\n+\n+    # Edge case with minimal coordinates\n+    p1 = Point3D(0, 0, 0)\n+    p2 = Point2D(0, 0)\n+    assert p1.distance(p2) == 0\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..b6b1a8f 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,31 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    assert f(f(2)).evalf() == Float(16)\n+\n+def test_issue_recursive_evalf():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+\n+    # Test deeper nesting\n+    assert f(f(g(2))).evalf() == Float(256)\n+    assert g(f(f(2))).evalf() == Float(32)\n+\n+    # Test with other mathematical operations\n+    h = implemented_function('h', lambda x: x + 3)\n+    assert h(f(2)).evalf() == Float(7)\n+    assert f(h(2)).evalf() == Float(25)\n+\n+    # Combining all three functions\n+    assert f(g(h(2))).evalf() == Float(196)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..c356766 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,16 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+    i, j = symbols('i j', integer=True)\n \n-def test_Identity_doit():\n+    # Check that the sum of elements in an identity matrix of size 3 is indeed 3\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).subs(n, 3).doit() == 3\n+\n+    # Test for multiple sizes to catch any inconsistencies\n+    for size in range(1, 5):\n+        In_size = Identity(size)\n+        total_sum = Sum(Sum(In_size[i, j], (i, 0, size-1)), (j, 0, size-1)).doit()\n+        assert total_sum == size, f\"Failed for size = {size}, got {total_sum} instead of {size}\"\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..5868a37 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,16 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # Test for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation(0, 1)  # should be identity\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation(0, 2, 1)  # should result in (0, 2, 1)\n+    assert Permutation([[0, 2], [0, 1]]) == Permutation(1)  # should result in (0, 2, 1)\n+    assert Permutation([[0, 1], [0, 2], [0, 1]]) == Permutation(2)  # should result in (0, 2)\n+    assert Permutation([[0, 3], [0, 1], [1, 2]]) == Permutation(0, 3, 2, 1)  # should result in (0, 3, 2, 1)\n+\n+    # Ensure original tests are not affected\n+    assert Permutation([0]) == Permutation((0, ))\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..510fd76 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,6 +170,19 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import Mul, Max, NS, symbols\n+\n+x, y = symbols('x y')\n+\n+def test_issue_13076():\n+    # Original test case\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    # Test with order changed\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    # More cases with different argument order\n+    assert NS(Mul(Max(1, x), y, evaluate=False).evalf()) == 'Max(1, x)*y'\n+    assert NS(Mul(y, Max(1, x), evaluate=False).evalf()) == 'y*Max(1, x)'\n+    assert NS(Mul(Max(1, x), Max(0, y), evaluate=False).evalf()) == 'Max(1, x)*Max(0, y)'\n \n def test_evalf_bugs():\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..9810ed6 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -268,10 +268,38 @@ def test_coth():\n     assert coth(x*I) == -cot(x)*I\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n+\n+    # Test cases for coth(log(tan(x))) substitution\n+    e = coth(log(tan(x)))\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n+    # Test cases for coth(log(tan(x))) substitution\n+    e = coth(log(tan(x)))\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n+\n \n def test_coth_series():\n     x = Symbol('x')\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..1a53af4 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -181,6 +181,18 @@ def test_Complement():\n \n     assert (not 0 in S.Reals.intersect(S.Integers - FiniteSet(0)))\n \n+    # Test for issue with Complement when input is a mixture of Symbols and numbers\n+    from sympy import symbols, FiniteSet, Interval, Complement\n+\n+    x, y = symbols('x y')\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 10))\n+    # Additional test cases\n+    assert Complement(FiniteSet(x, 2, 3), Interval(0, 5)) == \\\n+           Complement(FiniteSet(x), Interval(0, 5))\n+    assert Complement(FiniteSet(1, x, y), Interval(1, 2)) == \\\n+           FiniteSet(x, y)\n+\n     assert S.EmptySet - S.Integers == S.EmptySet\n \n     assert (S.Integers - FiniteSet(0)) - FiniteSet(1) == S.Integers - FiniteSet(0, 1)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..908f4ff 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,49 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    import sympy as sm\n+\n+    # Create a 6x6 identity matrix\n+    M = sm.eye(6)\n+    \n+    # Create a 6x2 matrix of 2's\n+    V = 2 * sm.ones(6, 2)\n+    \n+    # Expected result after column insertion\n+    expected_result = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    \n+    # Perform column insertion and assert\n+    result = M.col_insert(3, V)\n+    assert result == expected_result, f\"Expected: {expected_result}, Got: {result}\"\n+\n+    # Additional cases with different insertion positions\n+    M = sm.eye(3)\n+    V = sm.ones(3, 1)\n+    assert M.col_insert(0, V) == sm.Matrix([\n+        [1, 1, 0, 0],\n+        [1, 0, 1, 0],\n+        [1, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == sm.Matrix([\n+        [1, 0, 0, 1],\n+        [0, 1, 0, 1],\n+        [0, 0, 1, 1]\n+    ])\n+\n+    # Test inserting beyond current columns\n+    assert M.col_insert(4, V) == sm.Matrix([\n+        [1, 0, 0, 0, 1],\n+        [0, 1, 0, 0, 1],\n+        [0, 0, 1, 0, 1]\n+    ])\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..a65a935 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -665,8 +665,33 @@ def test_Poly_sub():\n def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n-\n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+from sympy import S, Poly\n+from sympy.abc import x\n+\n+def test_issue_13079():\n+    # Initial cases from the original test patch\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n+    # Additional test cases\n+    # Testing with another polynomial\n+    assert Poly(x**2 + 1) * Poly(x) == Poly(x**3 + x, x, domain='ZZ')\n+    assert x * Poly(x**2 + 1) == Poly(x**3 + x, x, domain='ZZ')\n+    \n+    # Testing with negative symbol\n+    assert Poly(x) * (-x) == Poly(-x**2, x, domain='ZZ')\n+    assert (-x) * Poly(x) == Poly(-x**2, x, domain='ZZ')\n+\n+    # Testing with zero\n+    assert Poly(x)*0 == Poly(0, x, domain='ZZ')\n+    assert 0*Poly(x) == Poly(0, x, domain='ZZ')\n+\n+    # Testing with a constant rational number\n+    assert S(1/2) * Poly(x) == Poly(S(1/2)*x, x, domain='QQ')\n+    assert Poly(x) * S(1/2) == Poly(S(1/2)*x, x, domain='QQ')\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..e87e850 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,16 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_custom_mul_symbol():\n+    from sympy import symbols, latex, Integral\n+    x, y = symbols('x y')\n+    assert latex(3 * x**2 * y, mul_symbol='\\\\,') == r\"3\\, x^{2}\\, y\"\n+    assert latex(1.5 * 3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+    # Add more cases to ensure thoroughness\n+    assert latex(2 * x * y, mul_symbol='times') == r\"2 \\times x \\times y\"\n+    assert latex(2 * x * y, mul_symbol='ldot') == r\"2 \\,. \\, x \\,. \\, y\"\n+    assert latex(Integral(2 * x**2 * y, x), mul_symbol='\\\\,') == r\"\\int 2 \\, x^{2} \\, y\\, dx\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..31b1141 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,19 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+def test_determinant_symbolic_entries_issue():\n+    # Import necessary symbols and Matrix\n+    from sympy import symbols, Matrix\n+\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    \n+    # Test cases based on the issue description\n+    assert M(3).det() == 0\n+    assert M(4).det() == 0\n+    # These checks are in line with issue report and fix expectations\n+    assert M(5).det() == 0  # Originally should have given nan\n+    assert M(6).det() == 0  # Originally should have raised TypeError\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..2dfebb2 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,31 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+from sympy import symbols, Mul\n+from sympy.physics.quantum import TensorProduct as TP, tensor_product_simp\n+from sympy.physics.paulialgebra import Pauli\n+\n+def test_tensor_product_simp_powers():\n+    A, B, C, D, x = symbols('A B C D x', commutative=False)\n+    \n+    # Test cases for power simplification\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tensor_product_simp(Mul(x, TP(A, B)**2)) == Mul(x, TP(A**2, B**2))\n+    assert tensor_product_simp(Mul(x, TP(A, B)**2, TP(C, D))) == x*TP(A**2*C, B**2*D)\n+    assert tensor_product_simp(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n+\n+    # Additional tests from the issue example\n+    a = symbols('a', commutative=False)\n+    t1 = TP(1, 1) * TP(1, 1)\n+    assert tensor_product_simp(t1) == TP(1, 1)\n+    \n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tensor_product_simp(t2) == TP(1, Pauli(3))\n+    \n+    # Check with substitution to ensure correct simplification\n+    assert tensor_product_simp(TP(1, 1) * TP(1, a)).subs(a, 1) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, Pauli(3)) * TP(1, a)).subs(a, Pauli(3)) == TP(1, 1)\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..5d8f53f 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -80,7 +80,7 @@ def test_python_keyword_function_name_escaping():\n \n \n def test_python_relational():\n-    assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n     assert python(Gt(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x > y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..f9b9244 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -7,8 +7,19 @@ from sympy.utilities.pytest import raises\n Vector.simp = True\n A = ReferenceFrame('A')\n \n-\n-def test_Vector():\n+def test_vector_add_zero():\n+    # Test adding a vector and zero multiplied by another vector\n+    result = sum([N.x, (0 * N.x)])\n+    assert result == N.x\n+    \n+    # Test adding zero to a vector directly\n+    assert N.x + 0 == N.x\n+    assert 0 + N.y == N.y\n+    \n+    # Test summing a list containing a zero vector and another vector\n+    zero_vec = 0 * N.x\n+    another_vec = N.y\n+    assert sum([zero_vec, another_vec]) == N.y\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..1ea479d 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -144,6 +145,20 @@ def test_mpmath_lambda():\n            # if this succeeds, it can't be a mpmath function\n \n \n+@conserve_mpmath_dps\n+def test_lambdify_mpmath_rational():\n+    from sympy.functions.combinatorial.numbers import rising_factorial as rf\n+    mpmath.mp.dps = 64\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source = inspect.getsource(f)\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in source # check if rational is wrapped\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected = mpmath.mpf(\"77.3333333333333285963817615993320941925048828125\")\n+    assert abs(result - expected) < mpmath.mpf('1e-50')\n+\n @conserve_mpmath_dps\n def test_number_precision():\n     mpmath.mp.dps = 50\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..2c0b54d 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -79,6 +80,14 @@ def test_ndim_array_initiation():\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n+    # Test for issue: len of rank-0 arrays should return 1\n+    rank_zero_array_fix = ImmutableDenseNDimArray(23)\n+    assert len(rank_zero_array_fix) == 1\n+    assert rank_zero_array_fix.shape == ()\n+    assert rank_zero_array_fix.rank() == 0\n+    assert rank_zero_array_fix[()] == 23\n+    raises(ValueError, lambda: rank_zero_array_fix[0])\n+\n \n def test_reshape():\n     array = ImmutableDenseNDimArray(range(50), 50)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..19ad4eb 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -18,6 +19,22 @@ def test_Integer():\n def test_Rational():\n     assert mcode(Rational(3, 7)) == \"3/7\"\n     assert mcode(Rational(18, 9)) == \"2\"\n+    \n+def test_Max_Min():\n+    # Original test case\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+    \n+    # New test cases for the issue\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, Integer(2))) == \"Max[x, 2]\"\n+    assert mcode(Max(Integer(2), x)) == \"Max[2, x]\"\n+\n+    # Edge case with a single argument\n+    assert mcode(Max(x)) == \"Max[x]\"\n+    \n+    # Nested Max function\n+    assert mcode(Max(Max(x, 2), 3)) == \"Max[Max[x, 2], 3]\"\n     assert mcode(Rational(3, -7)) == \"-3/7\"\n     assert mcode(Rational(-3, -7)) == \"3/7\"\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..5ef4c91 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,47 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_iss1593():\n+    \"\"\"\n+    Test for the correct sign in the rotation matrix derived from a quaternion.\n+    This test verifies the fix for issue 1593.\n+    \"\"\"\n+    from sympy import symbols, cos, sin, trigsimp, Matrix\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix = Matrix([\n+                [1,      0,      0],\n+                [0, cos(x), -sin(x)],\n+                [0, sin(x), cos(x)]])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n+def test_quaternion_rotation_various():\n+    \"\"\"\n+    Additional test cases to ensure correctness across different quaternion inputs.\n+    \"\"\"\n+    from sympy import symbols, cos, sin, trigsimp, Matrix\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    x = symbols('x')\n+\n+    # Test with another quaternion\n+    q2 = Quaternion(cos(x/2), 0, 0, sin(x/2))\n+    expected_matrix_2 = Matrix([\n+        [cos(x), -sin(x), 0],\n+        [sin(x),  cos(x), 0],\n+        [0,       0,      1]])\n+    assert trigsimp(q2.to_rotation_matrix()) == expected_matrix_2\n+\n+    # Test with zero rotation (identity quaternion)\n+    q_identity = Quaternion(1, 0, 0, 0)\n+    expected_identity_matrix = Matrix([\n+        [1, 0, 0],\n+        [0, 1, 0],\n+        [0, 0, 1]])\n+    assert trigsimp(q_identity.to_rotation_matrix()) == expected_identity_matrix\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +160,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..d919a84 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,6 +1625,16 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n+    # issue 15493 - test various scenarios to ensure the fix holds\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(15*i, 5) == 0  # multiple of the modulus\n+    assert Mod(3*i + 4, 2) == 1  # additional constant term\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(6*i + 6*j, 3) == 0  # multiple terms\n+    assert Mod(i + j + 7, 3) == (i + j + 1) % 3  # general case with symbolic sum\n+    assert Mod(8*i, 4) == 0\n+\n     # issue 8677\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..050d25b 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,7 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +156,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..481f8ab 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,36 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+def test_issue_15873():\n+    # Original test case\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None  # As it cannot be decisively determined without simplification\n \n-def test_issue_14392():\n+    # Additional test cases to ensure thoroughness\n+    assert simplify(e).is_zero is True  # Simplified version should be zero\n+\n+    # Complex number with known zero result\n+    e2 = I**2 + 1\n+    assert e2.is_zero is True\n+\n+    # Complex number expected to be non-zero\n+    e3 = I + 1\n+    assert e3.is_zero is None\n+\n+    # Complex expression requiring simplification\n+    e4 = (2*I + 3) - (2*I + 3)\n+    assert e4.is_zero is True  # This is zero after simplification\n+\n+    # Real and imaginary parts canceling out\n+    e5 = -1 + I + 1 - I\n+    assert e5.is_zero is True  # Real and imaginary parts cancel out\n+\n+    # Expression that is definitely non-zero\n+    e6 = (I + 2)**2\n+    assert e6.is_zero is False\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..567b595 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -478,6 +478,29 @@ def test_logcombine_complex_coeff():\n         i + log(x**2)\n \n \n+from sympy import Symbol, posify, symbols\n+\n+def test_posify_preserves_finite():\n+    # Original test for finite assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] is True\n+    assert eq.assumptions0['infinite'] is False\n+\n+def test_posify_preserves_other_assumptions():\n+    # Test for integer, rational, prime, even, odd assumptions\n+    x = Symbol('x', finite=True, integer=True, rational=True, prime=True, even=False, odd=True)\n+\n+    eq, rep = posify(x)\n+\n+    # Check all original assumptions are preserved\n+    assert eq.assumptions0['finite'] is True\n+    assert eq.assumptions0['integer'] is True\n+    assert eq.assumptions0['rational'] is True\n+    assert eq.assumptions0['prime'] is True\n+    assert eq.assumptions0['even'] is False\n+    assert eq.assumptions0['odd'] is True\n+\n def test_issue_5950():\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..e4390be 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -30,6 +32,11 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(Assignment(x, 2)) == 'x = 2'\n     assert prntr.doprint(Piecewise((1, Eq(x, 0)),\n                         (2, x>6))) == '((1) if (x == 0) else (2) if (x > 6) else None)'\n+    # Test for Indexed support in PythonCodePrinter\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == \"p[0]\"\n+    assert prntr.doprint(p[0, 1]) == \"p[0, 1]\"\n+\n     assert prntr.doprint(Piecewise((2, Le(x, 0)),\n                         (3, Gt(x, 0)), evaluate=False)) == '((2) if (x <= 0) else'\\\n                                                         ' (3) if (x > 0) else None)'\n",
  "sympy__sympy-16792": "",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..8d387a9 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -238,6 +238,8 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n \n+from sympy.crypto.crypto import encode_morse\n+\n def test_encode_morse():\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..35f7192 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n@@ -175,8 +177,12 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n-\n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    assert _sqrt_match(4 + I) == []\n+    assert sqrtdenest((3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2) == (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..0260c82 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -95,6 +96,25 @@ def test_point():\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n+    # Test multiplication of Point by a scalar\n+    # Multiplication should be commutative\n+    assert (p4 * sympy.sympify(2.0)) == Point(2, 2)\n+    assert (sympy.sympify(2.0) * p4) == Point(2, 2)\n+\n+    # Check with different ordering in addition\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    assert (point1 + point2 * sympy.sympify(2.0)) == Point(2, 2)\n+    assert (point1 + sympy.sympify(2.0) * point2) == Point(2, 2)\n+\n+    # Test occurrences of the issue\n+    try:\n+        result1 = point1 + point2 * sympy.sympify(2.0)\n+        result2 = point1 + sympy.sympify(2.0) * point2\n+        assert result1 == result2 == Point(2, 2), \"Test failed for sympify multiplication commutativity\"\n+    except GeometryError as e:\n+        assert False, f\"Unexpected exception raised: {e}\"\n+\n     # Point differences should be simplified\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..dfce567 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,12 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy.abc import x, y\n+    # Testing the permutation issue with diophantine.\n+    expected = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == expected\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == expected\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..b9b8f62 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -672,12 +672,21 @@ def test_latex_derivatives():\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n \n+from sympy import Subs, latex\n+from sympy.abc import x, y\n+\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+    # Test case for issue: Incorrect parenthesizing of Subs\n+    assert latex(3*Subs(-x+y, (x,),(1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Additional test cases\n+    assert latex(Subs(2*x + y, (x, y), (1, 2))) == r'\\left. 2 x + y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(2*Subs(x**2 - y, (x,),(0,))) == r'2 \\left. \\left(x^{2} - y\\right) \\right|_{\\substack{ x=0 }}'\n+    assert latex(-4*Subs(x/y, (y,),(1,))) == r'-4 \\left. \\left(\\frac{x}{y}\\right) \\right|_{\\substack{ y=1 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..2bb3f70 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,42 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_issue_kernS_unboundlocal():\n+    from sympy.core.sympify import kernS\n+    from sympy.abc import x, y\n+\n+    # Test with a simple expression to ensure 'kern' is assigned properly.\n+    expr = \"(2*x)/(x-1)\"\n+    result = kernS(expr)\n+    assert result == 2*x/(x-1)\n+\n+    # Test with more complex nested expressions\n+    complex_expr = \"((x+1)*(y-1))/(2*x)\"\n+    complex_result = kernS(complex_expr)\n+    assert complex_result == ((x+1)*(y-1))/(2*x)\n+\n+    # Test with an expression that includes a negative sign and parentheses\n+    negative_expr = \"-(x + 1)/(2*x)\"\n+    negative_result = kernS(negative_expr)\n+    assert negative_result == -(x + 1)/(2*x)\n+\n+    # Test with parentheses mismatch to ensure proper error is raised\n+    try:\n+        malformed_expr = \"(x + 1)/(2*x\"  # missing closing parenthesis\n+        kernS(malformed_expr)\n+        assert False, \"SympifyError expected due to mismatched parentheses.\"\n+    except SympifyError:\n+        pass\n+\n+    # Test with strings including symbol names that might confuse the kern logic\n+    symbol_confusion_expr = \"x_kern + y_kern\"\n+    symbol_confusion_result = kernS(symbol_confusion_expr)\n+    assert symbol_confusion_result == Symbol(\"x_kern\") + Symbol(\"y_kern\")\n+\n+    # Ensure symbols aren't inadvertently replaced when none exist\n+    no_symbol_expr = \"2 + 3\"\n+    no_symbol_result = kernS(no_symbol_expr)\n+    assert no_symbol_result == 5\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..3d2550e 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -85,6 +86,15 @@ def test_unitary():\n \n \n def test_identity():\n+    I_dagger = Dagger(I)  # Identity is Hermitian, so Dagger(I) should be I itself\n+\n+    # Additional test cases for issue verification\n+    O = Operator('O')\n+    O_dagger = Dagger(O)\n+\n+    # Test multiplication with IdentityOperator\n+    assert O_dagger * I == O_dagger, \"Dagger(O) * Identity did not simplify correctly to Dagger(O)\"\n+    assert I * O_dagger == O_dagger, \"Identity * Dagger(O) did not simplify correctly to Dagger(O)\"\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..f3ed51c 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -864,6 +864,20 @@ def test_sylow_subgroup():\n     assert S.order() == 3\n \n     P = PermutationGroup(Permutation(1, 5)(2, 4), Permutation(0, 1, 2, 3, 4, 5), Permutation(0, 2))\n+\n+    # Test cases related to the original issue reported\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Additional coverage for different dihedral groups\n+    G = DihedralGroup(2 * 25)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 8  # Expected value to verify the fix; adjust as necessary\n     S = P.sylow_subgroup(3)\n     assert S.order() == 9\n     S = P.sylow_subgroup(2)\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..e026f1a 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,8 +513,34 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n-\n-def test_binary_partitions():\n+def test_partitions_issue():\n+    # Test if each yielded partition is a distinct object\n+    partitions_6_k2 = list(partitions(6, k=2))\n+    assert len(partitions_6_k2) == len(set(id(p) for p in partitions_6_k2)), \"Partitions reuse the same dictionary object\"\n+\n+    partitions_6_k3 = list(partitions(6, k=3))\n+    assert len(partitions_6_k3) == len(set(id(p) for p in partitions_6_k3)), \"Partitions reuse the same dictionary object\"\n+\n+    # Test if modifying one dictionary doesn't affect others\n+    original_partition = list(partitions(6, k=2))[0]\n+    modified_copy = original_partition.copy()\n+    modified_copy[2] = 10\n+    assert modified_copy != original_partition, \"Modifying a partition modified others\"\n+\n+    # Check if no references are shared between partitions\n+    results = [p.copy() for p in partitions(6, k=2)]\n+    for p1 in results:\n+        for p2 in results:\n+            if p1 is not p2:\n+                assert p1 != p2, \"Partitions reuse the same dictionary object or share references\"\n+\n+    # Test with size=True parameter\n+    results_with_size = [(ms, p.copy()) for ms, p in partitions(6, k=2, size=True)]\n+    for ms1, p1 in results_with_size:\n+        for ms2, p2 in results_with_size:\n+            if p1 is not p2:\n+                assert p1 != p2, \"Partitions with size=True reuse the same dictionary object or share references\"\n+            assert isinstance(ms1, int) and isinstance(p1, dict), \"Incorrect types returned with size=True\"\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..b903732 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -571,25 +571,115 @@ def test_Float():\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=10))\n     raises(ValueError, lambda: Float(\"1.23\", dps=3, precision=\"\"))\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=\"\"))\n-\n+from sympy import S\n+\n+def test_zero_float_not_false():\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+\n+def test_zero_int_not_false():\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+def test_non_zero_not_false():\n+    assert (S(1.0) == S.false) is False\n+    assert (S.false == S(1.0)) is False\n+    assert (S(-1.0) == S.false) is False\n+    assert (S.false == S(-1.0)) is False\n+    assert (S(1) == S.false) is False\n+    assert (S.false == S(1)) is False\n+    assert (S(-1) == S.false) is False\n+    assert (S.false == S(-1)) is False\n     # from NumberSymbol\n     assert same_and_same_prec(Float(pi, 32), pi.evalf(32))\n     assert same_and_same_prec(Float(Catalan), Catalan.evalf())\n-\n+from sympy import S\n+\n+def test_zero_float_not_false():\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+\n+def test_zero_int_not_false():\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+def test_non_zero_not_false():\n+    assert (S(1.0) == S.false) is False\n+    assert (S.false == S(1.0)) is False\n+    assert (S(-1.0) == S.false) is False\n+    assert (S.false == S(-1.0)) is False\n+    assert (S(1) == S.false) is False\n+    assert (S.false == S(1)) is False\n+    assert (S(-1) == S.false) is False\n+    assert (S.false == S(-1)) is False\n     # oo and nan\n     u = ['inf', '-inf', 'nan', 'iNF', '+inf']\n     v = [oo, -oo, nan, oo, oo]\n     for i, a in zip(u, v):\n         assert Float(i) is a\n-\n-\n-\n+from sympy import S\n+\n+def test_zero_float_not_false():\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+\n+def test_zero_int_not_false():\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+def test_non_zero_not_false():\n+    assert (S(1.0) == S.false) is False\n+    assert (S.false == S(1.0)) is False\n+    assert (S(-1.0) == S.false) is False\n+    assert (S.false == S(-1.0)) is False\n+    assert (S(1) == S.false) is False\n+    assert (S.false == S(1)) is False\n+    assert (S(-1) == S.false) is False\n+    assert (S.false == S(-1)) is False\n+\n+from sympy import S\n+\n+def test_zero_float_not_false():\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+\n+def test_zero_int_not_false():\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+def test_non_zero_not_false():\n+    assert (S(1.0) == S.false) is False\n+    assert (S.false == S(1.0)) is False\n+    assert (S(-1.0) == S.false) is False\n+    assert (S.false == S(-1.0)) is False\n+    assert (S(1) == S.false) is False\n+    assert (S.false == S(1)) is False\n+    assert (S(-1) == S.false) is False\n+    assert (S.false == S(-1)) is False\n @conserve_mpmath_dps\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n     mp_pi = mpmath.pi()\n-\n+from sympy import S\n+\n+def test_zero_float_not_false():\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+\n+def test_zero_int_not_false():\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+def test_non_zero_not_false():\n+    assert (S(1.0) == S.false) is False\n+    assert (S.false == S(1.0)) is False\n+    assert (S(-1.0) == S.false) is False\n+    assert (S.false == S(-1.0)) is False\n+    assert (S(1) == S.false) is False\n+    assert (S.false == S(1)) is False\n+    assert (S(-1) == S.false) is False\n+    assert (S.false == S(-1)) is False\n     assert Float(mp_pi, 100) == Float(mp_pi._mpf_, 100) == pi.evalf(100)\n \n     mpmath.mp.dps = 15\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..65d12b5 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,14 +1,44 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n     Lambda, atan2, cse, cot, tan, S, Tuple, Basic, Dict,\n-    Piecewise, oo, Mul, factor, nsimplify, zoo, Subs, RootOf,\n+    sinh, Piecewise, oo, Mul, factor, nsimplify, zoo, Subs, RootOf,\n     AccumBounds, Matrix, zeros, ZeroMatrix)\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n-def test_subs():\n+def test_issue_21373_subs_Piecewise_with_hyperbolic():\n+    # Test for issue 21373 - Ensure no PolynomialError is raised\n+\n+    # Test with real=True assumptions and clear cache\n+    x_r, y_r, z = symbols('x_r y_r z', real=True)\n+\n+    # Clear any existing cached data\n+    from sympy.core.cache import clear_cache\n+    clear_cache()\n+\n+    # Expression that previously caused PolynomialError\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+\n+    try:\n+        result = expr.subs({1: 1.0})\n+        assert result is not None  # Ensure the substitution returns a valid expression\n+    except PolynomialError as e:\n+        assert False, f\"PolynomialError was raised: {e}\"\n+\n+    # Additional similar tests to ensure robustness\n+    # Change sinh to cosh and tanh and verify no error\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+\n+    for expr_variant in [expr_cosh, expr_tanh]:\n+        try:\n+            result_variant = expr_variant.subs({1: 1.0})\n+            assert result_variant is not None\n+        except PolynomialError as e:\n+            assert False, f\"PolynomialError was raised with variant: {e}\"\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..99f76fc 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -11,7 +11,8 @@ from sympy.polys.monomials import (\n \n from sympy.polys.polyerrors import ExactQuotientFailed\n \n-from sympy.abc import a, b, c, x, y, z\n+from sympy.abc import a, b, c, x, y, z, i, j, k\n+from sympy.polys.monomials import itermonomials\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..d851a11 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -261,11 +261,15 @@ def test_none():\n     assert none.func(*none.args) == none\n \n \n+from sympy.codegen.ast import String\n+\n def test_String():\n     st = String('foobar')\n     assert st.is_Atom\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n+    # Test for argument invariance: expr.func(*expr.args)\n+    assert st.func(*st.args) == st\n     assert st.func(**st.kwargs()) == st\n \n \n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..960cc20 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,6 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -440,7 +442,26 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        assert Point2D(1, 2) == Point2D(Integer(1), Integer(2))\n+\n+    # Test using symbolic expressions\n+    x, y = symbols('x y', real=True)\n+    with evaluate(False):\n+        assert Point2D(x, y) == Point2D(Symbol('x'), Symbol('y'))\n+\n+    # Test with non-integer rationals and floats\n+    with evaluate(False):\n+        assert Point2D(Rational(1, 2), Rational(2, 3)) == Point2D(Rational(1, 2), Rational(2, 3))\n+\n+    with evaluate(False):\n+        assert Point2D(Float(0.5), Float(0.25)) == Point2D(Rational(1, 2), Rational(1, 4))\n+\n+    # Test with a mix of integers and symbolic values\n+    with evaluate(False):\n+        assert Point2D(1, y) == Point2D(Integer(1), y)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..e861e80 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -53,6 +54,22 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n     assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    \n+    # Test for Min and Max\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    \n+    # Further test cases for Min\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Min(1, x, 2)) == \"min(1, x, 2)\"\n+    \n+    # Further test cases for Max\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    assert prntr.doprint(Max(1, x, 2)) == \"max(1, x, 2)\"\n+    \n+    # Edge case with single argument\n+    assert prntr.doprint(Min(x)) == \"min(x)\"\n+    assert prntr.doprint(Max(y)) == \"max(y)\"\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..c813070 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..8752aa7 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,7 +1,9 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n@@ -303,6 +305,20 @@ def test_symbols():\n     assert sym('a1(2:4)') == '(a12, a13)'\n     assert sym('a0:2.0:2') == '(a0.0, a0.1, a1.0, a1.1)'\n     assert sym('aa:cz') == '(aaz, abz, acz)'\n+\n+    # Test for issue related to symbols with extra parentheses and Function class\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction  # Each q should be an UndefinedFunction\n+    assert type(u[0]) == UndefinedFunction  # Each u should be an UndefinedFunction\n+\n+    # Verify with different combinations\n+    single_symbol = symbols(('s',), cls=Function)\n+    assert type(single_symbol[0]) == UndefinedFunction  # Single symbol with extra parentheses\n+\n+    mixed_types = symbols(('a', 'b:2', 'c:3'), cls=Function)\n+    assert type(mixed_types[0]) == UndefinedFunction  # 'a' should be an UndefinedFunction\n+    assert all(type(m) == UndefinedFunction for m in mixed_types[1])  # 'b:2' each should be an UndefinedFunction\n+    assert all(type(m) == UndefinedFunction for m in mixed_types[2])  # 'c:3' each should be an UndefinedFunction\n     assert sym('aa:c0:2') == '(aa0, aa1, ab0, ab1, ac0, ac1)'\n     assert sym('aa:ba:b') == '(aaa, aab, aba, abb)'\n     assert sym('a:3b') == '(a0b, a1b, a2b)'\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..92647ba 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -261,8 +261,24 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n+def test_kahane_leading_uncontracted_order():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Initial order should be preserved after simplification\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), \"Order was not preserved in leading uncontracted matrices.\"\n \n-def test_gamma_matrix_class():\n+    # Test: Order should remain unchanged\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), \"Order was not preserved in leading uncontracted matrices.\"\n+\n+    # Multiple leading gamma matrices\n+    t = G(mu)*G(nu)*G(-nu)*G(-mu)*G(rho)*G(sigma)*G(tensor_indices(\"alpha\", LorentzIndex)[0])*G(tensor_indices(\"beta\", LorentzIndex)[0])\n+    r = kahane_simplify(t)\n+    assert r.equals(16*G(rho)*G(sigma)*G(tensor_indices(\"alpha\", LorentzIndex)[0])*G(tensor_indices(\"beta\", LorentzIndex)[0])), \\\n+            \"Order in a complex leading uncontracted matrices was not preserved.\"\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..8571dfd 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -46,6 +46,18 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # Check that as_set raises NotImplementedError as expected\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n+\n+    # Example of what a correct implementation could be:\n+    # assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    # assert Contains(x, S.Integers).as_set() == S.Integers\n+    # assert Contains(x, S.Reals).as_set() == S.Reals\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..e3c4c0b 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,12 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+from sympy import exp\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units import Quantity\n+from sympy.physics.units.dimensions import Dimension\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n@@ -541,7 +547,23 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..4124a3d 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,43 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_collect_factor_and_dimension_equivalence():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1*t1 + v1\n+    # This should not raise a ValueError if the issue is resolved\n+    SI._collect_factor_and_dimension(expr1)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..864def5 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -56,8 +57,16 @@ def test_homomorphism():\n     assert T.domain == F\n     assert T.codomain == D\n     assert T(a*b) == p\n+def test_check_homomorphism():\n+    a = Permutation(1,2,3,4)\n+    b = Permutation(1,3)\n+    G = PermutationGroup([a, b])\n+    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n \n-def test_isomorphisms():\n+    # New test case to check the homomorphism with inverted generator\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..1e6ea5b 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -267,6 +267,38 @@ def test_PolyElement_as_expr():\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n+    # Original test patch incorporated\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Additional tests\n+    # Test with different sets of symbols\n+    A, B, C = symbols(\"a,b,c\")\n+    g_abc = 3*A**2*B - A*B*C + 7*C**3 + 1\n+    assert f.as_expr(A, B, C) == g_abc\n+\n+    # Test with insufficient symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with no symbols on a different polynomial ring\n+    R2, u, v, w = ring(\"u,v,w\", ZZ)\n+    f2 = 2*u**2*v + v*w - 5\n+    g2 = 2*u**2*v + v*w - 5\n+    assert f2.as_expr() == g2\n+\n+    # Test with full symbols provided\n+    A2, B2, C2 = symbols(\"u,v,w\")\n+    g2_uvw = 2*A2**2*B2 + B2*C2 - 5\n+    assert f2.as_expr(A2, B2, C2) == g2_uvw\n+\n+    # Test with different ring and custom symbols\n+    R3, p, q = ring(\"p,q\", ZZ)\n+    f3 = p**2 + 2*q\n+    P, Q = symbols(\"P,Q\")\n+    g3_pq = P**2 + 2*Q\n+    assert f3.as_expr(P, Q) == g3_pq\n+\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n",
  "sympy__sympy-24661": "",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..3295c07 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -63,6 +63,8 @@ def test_unit_grammar_fail(string):\n         ([\"10pix/nm\"], u.Unit(10 * u.pix / u.nm)),\n         ([\"1.5x10+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"1.5\u00d710+11m\"], u.Unit(1.5e11 * u.m)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n         ([\"m2\"], u.m**2),\n         ([\"10+21m\"], u.Unit(u.m * 1e21)),\n         ([\"2.54cm\"], u.Unit(u.cm * 2.54)),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..aa4200d 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,8 +163,30 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n+    def test_translate_url_with_optional_groups(self):\n+        with translation.override('en'):\n+            # Test URL with an optional group that is present\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                             '/nl/with-arguments/regular-argument/optional.html')\n+\n+            # Test URL with an optional group that is missing\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                             '/nl/with-arguments/regular-argument/')\n \n-class URLNamespaceTests(URLTestCaseBase):\n+        with translation.override('nl'):\n+            # Ensure the language override does not affect other translations\n+            self.assertEqual(translate_url('/nl/with-arguments/regular-argument/optional.html', 'en'),\n+                             '/en/with-arguments/regular-argument/optional.html')\n+            self.assertEqual(translate_url('/nl/with-arguments/regular-argument/', 'en'),\n+                             '/en/with-arguments/regular-argument/')\n+\n+        # Additional tests to ensure correct behavior with different translations and patterns\n+        with translation.override('nl'):\n+            self.assertEqual(translate_url('/nl/nonexistent-url/', 'en'), '/nl/nonexistent-url/')\n+        \n+        with translation.override('it'):\n+            self.assertEqual(translate_url('/it/with-arguments/argumento/optional.html', 'nl'),\n+                             '/nl/with-arguments/argumento/optional.html')\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n     \"\"\"\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..6c01f85 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,4 +1,33 @@\n+\n \"\"\"\n+class PrimaryKeyResetTestCase(TestCase):\n+    def setUp(self):\n+        self.first_instance = Derived.objects.create(f=True)\n+\n+    def test_reset_primary_key_creates_new_instance(self):\n+        # Fetch the derived instance and reset its primary key\n+        original = Derived.objects.get(pk=self.first_instance.pk)\n+        original.reset()\n+        original.save()\n+\n+        # Ensure a new instance is created\n+        self.assertEqual(Derived.objects.count(), 2)\n+        self.assertTrue(Derived.objects.filter(pk=self.first_instance.pk).exists())\n+        self.assertFalse(Derived.objects.filter(pk=original.pk, f=False).exists())\n+\n+    def test_reset_primary_key_fields(self):\n+        # Fetch the derived instance and reset its fields\n+        original = Derived.objects.get(pk=self.first_instance.pk)\n+        original.reset()\n+        original.save()\n+        \n+        # Fetch new instance\n+        new_instance = Derived.objects.exclude(pk=self.first_instance.pk).get()\n+        \n+        # Ensure the new instance has reset fields\n+        self.assertIsNone(new_instance.uid)\n+        self.assertFalse(new_instance.f)\n+\n Regression tests for Model inheritance behavior.\n \"\"\"\n import datetime\n@@ -14,7 +43,14 @@ from .models import (\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    Congressman, DerivedM, InternalCertificationAudit, ItalianRestaurant,\n+    M2MChild, MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A,\n+    ParkingLot4B, Person, Place, Politician, Profile, QualityControl,\n+    Restaurant, SelfRefChild, SelfRefParent, Senator, Supplier, TrainStation,\n+    User, Wholesaler, Item, Derived\n )\n+import uuid\n+from django.db import models\n \n \n class ModelInheritanceTest(TestCase):\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..8ff9d8d 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -604,9 +604,16 @@ class DeletionTests(TestCase):\n                 signal.disconnect(receiver, sender=Referrer)\n \n \n+from django.test import TestCase\n+\n class FastDeleteTests(TestCase):\n \n-    def test_fast_delete_fk(self):\n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure no subquery is used for a complete delete.\n+        self.assertNotIn('SELECT', sql)\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n         )\n@@ -702,4 +709,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..fcfd422 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,23 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(1, 1),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..3783cc4 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,7 +6,8 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n+from django.db.models import Sum\n \n \n class PickleabilityTestCase(TestCase):\n@@ -259,8 +261,41 @@ class PickleabilityTestCase(TestCase):\n         event.edition_set.create()\n         self.assert_pickles(event.edition_set.order_by('event'))\n \n-\n-class InLookupTests(TestCase):\n+class ToyPickleTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+    def test_pickle_values_annotate(self):\n+        # Original queryset\n+        prices = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        self.assertEqual(type(prices[0]), dict)\n+        \n+        # Reloaded from pickled query\n+        prices2 = Toy.objects.all()\n+        prices2.query = pickle.loads(pickle.dumps(prices.query))\n+        self.assertEqual(type(prices2[0]), dict)  # should still be a dict\n+        self.assertEqual(prices2[0]['material'], 'plastic')\n+        self.assertEqual(prices2[0]['total_price'], 20)\n+\n+    def test_pickle_values_list(self):\n+        prices_list = Toy.objects.values_list('material', flat=True)\n+        self.assertEqual(type(prices_list[0]), str)\n+\n+        prices_list2 = Toy.objects.all()\n+        prices_list2.query = pickle.loads(pickle.dumps(prices_list.query))\n+        self.assertEqual(type(prices_list2[0]), str)\n+        self.assertEqual(set(prices_list2), {'wood', 'plastic'})\n+\n+    def test_pickle_values_list_named(self):\n+        prices_named = Toy.objects.values_list('material', named=True)\n+        self.assertEqual(type(prices_named[0]).__name__, 'Row')\n+\n+        prices_named2 = Toy.objects.all()\n+        prices_named2.query = pickle.loads(pickle.dumps(prices_named.query))\n+        self.assertEqual(type(prices_named2[0]).__name__, 'Row')\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex a61da37..205ad50 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -195,6 +195,20 @@ class UtilsTests(SimpleTestCase):\n                     display_value,\n                 )\n \n+    def test_unicode_json_display_for_field(self):\n+        tests = [\n+            ({'a': '\u4f60\u597d\uff0c\u4e16\u754c'}, '{\"a\": \"\u4f60\u597d\uff0c\u4e16\u754c\"}'),\n+            ({'emoji': '\ud83d\ude00\ud83d\udc31'}, '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}'),\n+            (['\u4f60\u597d', '\u4e16\u754c'], '[\"\u4f60\u597d\", \"\u4e16\u754c\"]'),\n+            ('\u4f60\u597d\uff0c\u4e16\u754c', '\"\u4f60\u597d\uff0c\u4e16\u754c\"'),\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n+\n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..94ffcfd 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6615,7 +6615,25 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, '/test_admin/admin/login/?next=/test_admin/admin/admin_views/article')\n \n-    @override_settings(APPEND_SLASH=False)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/custom/')\n+    def test_missing_slash_with_custom_script_name_and_append_slash(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/custom' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_false(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..af47014 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -649,6 +649,40 @@ class WriterTests(SimpleTestCase):\n \n     def test_serialize_functools_partialmethod(self):\n         value = functools.partialmethod(datetime.timedelta, 1, seconds=2)\n+\n+    def test_serialize_mymodel_migration(self):\n+        \"\"\"\n+        Test serialization of a migration involving mixed bases and custom fields.\n+        \"\"\"\n+        class MyMixin:\n+            pass\n+\n+        class MyField(models.TextField):\n+            pass\n+\n+        fields = {\n+            'name': MyField(primary_key=True),\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    tuple(fields.items()),\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Ensure models import is present\n+        self.assertIn(\"from django.db import models\", output)\n+        \n+        # Ensure app.models is properly used for MyField and MyMixin\n+        self.assertIn(\"import tests.migrations.test_writer\", output)\n+        self.assertIn(\"bases=(tests.migrations.test_writer.MyMixin, models.Model)\", output)\n         result = self.serialize_round_trip(value)\n         self.assertIsInstance(result, functools.partialmethod)\n         self.assertEqual(result.func, value.func)\n",
  "django__django-15375": "",
  "django__django-15695": "",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..76285fb 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,6 +3496,34 @@ class FormFieldCallbackTests(SimpleTestCase):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+    def test_formfield_callback_in_meta_applies_in_factory(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = callback\n+\n+        # Check if ModelForm uses the formfield_callback in its Meta\n+        FactoryForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_factory_form_no_callback_overwrites_meta(self):\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = lambda db_field, **kwargs: forms.CharField(widget=forms.Textarea)\n+\n+        FactoryForm = modelform_factory(model=Person, form=BaseForm, formfield_callback=None)\n+\n+        # Ensure fields are of the default type since callback is not applied\n+        for field in FactoryForm.base_fields.values():\n+            self.assertNotEqual(type(field.widget), forms.Textarea)\n \n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..2cdaf6b 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -10,8 +10,48 @@ from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n from django.utils.translation import gettext_lazy, override\n+from django.core.serializers import serialize\n+from django.db import models\n+from django.core.exceptions import FieldError\n+\n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        return qs.select_related(\"master\")\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n \n-from .models import Score\n+class JsonSerializerTestCase(SerializersTestBase, TestCase):\n+    ...\n+\n+    def test_m2m_serialization_with_custom_manager(self):\n+        \"\"\"\n+        Test serialization of many-to-many relation with a custom manager\n+        using select_related.\n+        \"\"\"\n+        # Setup test data\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = Test.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+        \n+        try:\n+            # Serialize the object\n+            serialized_data = serialize(\"json\", [test_instance])\n+            # Ensure the serialization completes without error\n+            self.assertIsInstance(serialized_data, str)\n+        except FieldError as e:\n+            self.fail(f\"Serialization raised a FieldError: {e}\")\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n \n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_backend_macosx.py b/lib/matplotlib/tests/test_backend_macosx.py\nindex 06d044f..952bf4f 100644\n--- a/lib/matplotlib/tests/test_backend_macosx.py\n+++ b/lib/matplotlib/tests/test_backend_macosx.py\n@@ -22,6 +22,20 @@ def test_cached_renderer():\n     fig.draw_without_rendering()\n     assert fig._cachedRenderer is not None\n \n+@pytest.mark.backend('macosx')\n+def test_dpi_after_unpickling():\n+    import pickle\n+    fig = plt.figure()\n+    initial_dpi = fig.dpi\n+    num_iterations = 10\n+\n+    for _ in range(num_iterations):\n+        out = io.BytesIO()\n+        pickle.dump(fig, out)\n+        out.seek(0)\n+        fig = pickle.load(out)\n+        assert fig.dpi == initial_dpi, \"DPI changed after unpickling\"\n+\n \n @pytest.mark.backend('macosx')\n def test_savefig_rcparam(monkeypatch, tmp_path):\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..480b604 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6596,7 +6596,18 @@ def test_integrate(dask):\n     assert_equal(actual, ds.integrate(\"y\")[\"var\"])\n     assert_equal(ds[\"var\"].integrate(\"y\"), ds.integrate(\"y\")[\"var\"])\n \n-    # along x and y\n+    # Test using 'coord' for DataArray.integrate and Dataset.integrate\n+    actual = da.integrate(coord=\"y\")\n+    expected_y = xr.DataArray(\n+        np.trapz(da, da[\"y\"], axis=1),\n+        dims=[\"x\"],\n+        coords={k: v for k, v in da.coords.items() if \"y\" not in v.dims},\n+    )\n+    assert_allclose(expected_y, actual.compute())\n+    assert_equal(actual, ds.integrate(coord=\"y\")[\"var\"])\n+    assert_equal(ds[\"var\"].integrate(coord=\"y\"), ds.integrate(coord=\"y\")[\"var\"])\n+\n+    # along x and y using coord\n     actual = da.integrate((\"y\", \"x\"))\n     assert actual.ndim == 0\n \n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..c4b9b55 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3020,8 +3020,17 @@ class TestDataset:\n \n         y = D.to_stacked_array(\"features\", sample_dims, name=name)\n         assert y.name == name\n-\n-    def test_to_stacked_array_dtype_dims(self):\n+    def test_to_unstacked_dataset_single_dim_variable(self):\n+        # single dimension: regression test for GH4049\n+        import numpy as np\n+        import xarray as xr\n+        from xarray.testing import assert_identical\n+        \n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # make a two dimensional dataset\n         a, b = create_test_stacked_array()\n         D = xr.Dataset({\"a\": a, \"b\": b})\n",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..a2b4aab 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,9 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import re\n+from typing import Any\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n@@ -131,7 +134,29 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     assert assertString in output.err\n \n \n-def test_csv_regex_error(capsys: CaptureFixture) -> None:\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"foo{1,3}\", [\"foo{1,3}\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+    \n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n     \"\"\"\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..6083941 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1155,8 +1155,41 @@ def test_summary_list_after_errors(testdir):\n         ]\n     )\n \n+def test_does_not_eagerly_collect_init_py(testdir):\n+    # Create a test file that should be executed\n+    testdir.makepyfile(test_sample=\"\"\"\n+    def test_sample():\n+        assert True\n+    \"\"\")\n+\n+    # Create a package directory with an __init__.py that fails if collected as a test\n+    pydir = testdir.mkpydir(\"sample_pkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+\n+    # Run pytest\n+    result = testdir.runpytest()\n+    \n+    # Ensure pytest succeeded, meaning it didn't try to collect and run __init__.py\n+    assert result.ret == ExitCode.OK\n+\n+\n+def test_does_not_import_unreachable_modules(testdir):\n+    # Create package structure that should be unreachable\n+    srcdir = testdir.tmpdir.mkdir(\"src\")\n+    pkgdir = srcdir.mkdir(\"unreachable_pkg\")\n+    pkgdir.join(\"__init__.py\").write(\"raise ImportError('This should not be imported')\")\n \n-def test_importorskip():\n+    # Create a test file that should be executed\n+    testdir.makepyfile(\"\"\"\n+    import pytest\n+\n+    def test_import_error():\n+        with pytest.raises(ImportError):\n+            import unreachable_pkg\n+    \"\"\")\n+\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n     with pytest.raises(\n         pytest.skip.Exception,\n         match=\"^could not import 'doesnotexist': No module named .*\",\n@@ -1184,4 +1217,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..81538b9 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -131,6 +131,9 @@ def test_syntax_errors(expr: str, column: int, message: str) -> None:\n         \"True\",\n         \"False\",\n         \"if\",\n+        \"None\",\n+        \"True\",\n+        \"False\",\n         \"else\",\n         \"while\",\n     ),\n@@ -139,6 +142,16 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+def test_compile_reserved_identifier() -> None:\n+    with pytest.raises(AssertionError):\n+        Expression.compile(\"None\")\n+    \n+    with pytest.raises(AssertionError):\n+        Expression.compile(\"True\")\n+\n+    with pytest.raises(AssertionError):\n+        Expression.compile(\"False\")\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..68c09d2 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,32 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output using a custom transformer\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().to_frame(name='sum')\n+\n+    set_config(transform_output=\"pandas\")\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    transformed_data = union.fit_transform(data)\n+\n+    expected_index = pd.to_datetime([\"2020-01-01\", \"2020-01-02\", \"2020-01-03\", \"2020-01-04\"])\n+    expected_data = pd.DataFrame(data=[240, 240, 240, 240], index=expected_index, columns=[\"my_transformer__sum\"])\n+\n+    pd.testing.assert_frame_equal(transformed_data, expected_data)\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..5478878 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -267,6 +267,11 @@ def test_parse_annotation():\n                           [desc_sig_punctuation, \"]\"]))\n \n \n+def test_parse_annotation_none():\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n def test_pyfunction_signature(app):\n     text = \".. py:function:: hello(name: str) -> str\"\n     doctree = restructuredtext.parse(app, text)\n@@ -742,4 +747,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..ec4b94e 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,3 +1,6 @@\n+\n+_foo = None  #: :meta public:\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n@@ -8,4 +11,4 @@ def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..c82216f 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,7 +984,46 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n-def test_info_field_list_var(app):\n+def test_rendering_of_dict_param_type(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..e0dcc96 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,6 +1008,40 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_info_field_list_union_type(app):\n+    \"\"\"Test for union type parsing using the pipe symbol.\"\"\"\n+\n+    # RST text with a union type hint for a parameter\n+    text = (\".. py:function:: function\\n\"\n+            \"\\n\"\n+            \"   :param data: Data can be either a list or a dictionary.\\n\"\n+            \"   :type data: list | dict\\n\")\n+\n+    # Parse the RST text\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Assert the structure of the parsed doctree\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[1][1][0][0], ([nodes.field_name, \"Parameters\"],\n+                                      [nodes.field_body, nodes.paragraph]))\n+\n+    # Checking the type annotations for the 'data' parameter\n+    assert_node(doctree[1][1][0][0][1], ([addnodes.literal_strong, \"data\"],\n+                                         \" (\",\n+                                         [pending_xref, addnodes.literal_emphasis, \"list\"],\n+                                         [addnodes.literal_emphasis, \" | \"],\n+                                         [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                                         \") -- Data can be either a list or a dictionary.\"))\n+\n+    # Ensure the pending_xref is correctly initialized for both list and dict\n+    assert_node(doctree[1][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"list\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[1][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..5cab328 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -862,6 +862,25 @@ def test_autodoc_typehints_description_no_undoc(app):\n             '      another tuple\\n'\n             '\\n'\n             '   Return type:\\n'\n+            '      int\\n'\n+            '\\n'\n+            '.. autofunction:: target.typehints.decr_with_doc\\n'\n+            '\\n'\n+            '   :returns: decremented value\\n'\n+            '\\n'\n+            'target.typehints.decr_with_doc(a: int, b: int) -> int\\n'\n+            '\\n'\n+            '   Description.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **a** (*int*) -- first parameter\\n'\n+            '      **b** (*int*) -- second parameter\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented value\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n             '      Tuple[int, int]\\n'\n             in context)\n \n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..de39f4a 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1067,6 +1067,17 @@ def test_conditionset():\n     assert solveset(y**x-z, x, S.Reals) == \\\n         ConditionSet(x, Eq(y**x - z, 0), S.Reals)\n \n+    # Test for the specific issue where solveset should return a ConditionSet\n+    from sympy import cos, sin, Eq, Reals, ConditionSet, Symbol\n+    n = Symbol('n', real=True)\n+    result = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert result.as_set() == ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)\n+\n+    # Additional test case with a different equation\n+    x = Symbol('x', real=True)\n+    result2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert result2.as_set() == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n+\n \n @XFAIL\n def test_conditionset_equality():\n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..ec84ab9 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,6 +3265,8 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n+from sympy import Symbol, sqf_list, poly\n+\n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n@@ -3330,6 +3332,23 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+def test_issue_8695_modified():\n+    x = Symbol('x')\n+    # Test case as given in the issue description\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n+\n+def test_additional_sqf_list_cases():\n+    x = Symbol('x')\n+    # Additional test cases for more thorough verification\n+    p1 = (x - 1)**4\n+    assert sqf_list(p1) == (1, [(x - 1, 4)])\n+\n+    p2 = x**2 - 4\n+    assert sqf_list(p2) == (1, [(x - 2, 1), (x + 2, 1)])\n+\n+    p3 = (x**2 - 1)*(x**2 + 1)**2\n+    assert sqf_list(p3) == (1, [(x - 1, 1), (x + 1, 1), (x**2 + 1, 2)])\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..c7ce955 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3248,9 +3248,18 @@ def test_poly_matching_consistency():\n     assert I * Poly(x, x) == Poly(I*x, x)\n     assert Poly(x, x) * I == Poly(I*x, x)\n \n-\n-@XFAIL\n-def test_issue_5786():\n+from sympy import symbols, I, expand, factor\n+\n+def test_issue_18895():\n+    x, y = symbols('x y')\n+    z = expand((x-1)*(y-1))\n+    \n+    # Verifying the normal factorization first\n+    assert factor(z) == (x - 1)*(y - 1)\n+    \n+    # Verifying the factorization with extension=[I]\n+    # The resulting factorization should still include both (x - 1) and (y - 1)\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..50d00e1 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,18 @@\n+\n+from sympy.core.symbol import Symbol\n+from sympy.testing.pytest import raises\n+\n+def test_symbol_slots():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbols should not have a __dict__\"\n+    assert hasattr(s, '__slots__'), \"Symbols should have __slots__\"\n+    assert s.__slots__ == ('name',), \"Symbol __slots__ should be ('name',)\"\n+\n+def test_immutable_symbol():\n+    s = Symbol('s')\n+    with raises(AttributeError):\n+        s.name = 'new_name'  # This should raise an AttributeError due to immutability\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..609c43a 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,6 +3202,29 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n+    def test_boundwidget_id_for_label_ignores_options_id(self):\n+        \"\"\"\n+        Test that `id_for_label` in BoundWidget uses the correct `id` for subwidgets \n+        of a widget of type CheckboxSelectMultiple.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        # Test when auto_id is set\n+        form = SomeForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n+\n+        # Test with default auto_id\n+        form = SomeForm()\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'id_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'id_field_1')\n+\n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n             first_name = CharField()\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..94dd2ef 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,8 +301,61 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n-\n-def check_lasso_selector(**kwargs):\n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n+from matplotlib.testing.widgets import do_event\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound_with_default_behavior(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound, y_bound = ax.get_xbound(), ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data, move_data = [10.5, 11.5], [11, 13]\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], move_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_no_zero_include_when_dragging_outside(direction):\n+    # Additional test to check behavior when dragging outside the initial boundary\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound, y_bound = ax.get_xbound(), ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    # Start dragging outside of the initial boundary to check behavior\n+    do_event(tool, 'press', xdata=30, ydata=30, button=1)\n+    do_event(tool, 'onmove', xdata=35, ydata=35, button=1)\n+\n+    # Ensure the bounds have not been reset to include zero\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    do_event(tool, 'release', xdata=35, ydata=35, button=1)\n+\n+    # Still, the bounds should not include zero unless data explicitly requires\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..872d802 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_sparse_coder_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                                        n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge with low max_iter\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges without warnings when max_iter is sufficiently large\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..156c305 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,40 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.ensemble import RandomForestClassifier\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+\n+# Add new test function to verify the issue fix\n+def test_cross_val_predict_with_multi_output_classifier_predict_proba():\n+    # Create a multilabel classification problem\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20)\n+\n+    # Use MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # Perform cross_val_predict with method='predict_proba'\n+    try:\n+        pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+        \n+        # Check that we get a list of arrays (one for each output)\n+        assert isinstance(pred_proba, list)\n+        assert len(pred_proba) == Y.shape[1]  # Should match the number of outputs\n+        \n+        # Check that each array in the list has the correct shape\n+        for i, preds in enumerate(pred_proba):\n+            n_classes = len(np.unique(Y[:, i]))\n+            assert preds.shape == (X.shape[0], n_classes)\n+            \n+    except AttributeError as e:\n+        # Fail the test if an AttributeError is raised, indicating the issue persists\n+        pytest.fail(f\"AttributeError occurred: {e}\")\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..6ecfc86 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -292,5 +292,27 @@ def test_stringify_type_union_operator():\n     assert stringify(int | str | None) == \"int | str | None\"  # type: ignore\n \n \n-def test_stringify_broken_type_hints():\n+def test_restify_mock_base_class():\n+    \"\"\"\n+    Test restify for a class inheriting from a mocked base class.\n+    This should ensure that the output includes the full base class name.\n+    \"\"\"\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockedModule(nn.Module):\n+            pass\n+\n+        assert restify(MockedModule) == ':py:class:`torch.nn.Module`'\n+        \n+def test_stringify_mock_base_class():\n+    \"\"\"\n+    Test stringify for a class inheriting from a mocked base class.\n+    This should ensure that the output includes the full base class name.\n+    \"\"\"\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockedModule(nn.Module):\n+            pass\n+\n+        assert stringify(MockedModule) == 'torch.nn.Module'\n     assert stringify(BrokenType) == 'tests.test_util_typing.BrokenType'\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..e2d7a76 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,28 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    from sympy import Symbol, Product, S\n+    n = Symbol('n', integer=True, positive=True)\n+    k = Symbol('k', integer=True, positive=True)\n+    # Test for n=2 as per the issue description\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    \n+    # Additional tests\n+    # Test for n=1\n+    assert Product(n + 1 / 2**k, (k, 0, n-1)).doit().subs(n, 1) == S(3)\n+    \n+    # Test for n=3, should be (3 + 1) * (3 + 1/2) * (3 + 1/4) = 525/8\n+    assert Product(n + 1 / 2**k, (k, 0, n-1)).doit().subs(n, 3).simplify() == S(525)/8\n+    \n+    # Test symbolic simplification\n+    from sympy import simplify\n+    p_simplified = simplify(Product(n + 1 / 2**k, (k, 0, n-1)).doit())\n+    assert p_simplified.subs(n, 2) == S(15)/2\n+    assert p_simplified.subs(n, 3) == S(525)/8\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +379,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}