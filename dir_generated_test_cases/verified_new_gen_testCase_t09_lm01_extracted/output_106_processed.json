{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..1c91e21 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,9 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..fdd21b3 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -125,6 +125,47 @@ class TestHeaderFunctions(FitsTestCase):\n         \"\"\"Test Card constructor with long integer value\"\"\"\n \n         c = fits.Card(\"long_int\", -467374636747637647347374734737437)\n+\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\" Ensures Card formats float values with the correct precision, avoiding comment truncation \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        \n+        # Test with the problematic float value\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with another float value\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a negative float value\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+    def test_additional_floating_point_cases(self):\n+        \"\"\"Additional tests for floating point precision in Card\"\"\"\n+\n+        k = \"HIERARCH XYZ PQR STU VWX\"\n+        com = \"Testing potential edge cases\"\n+\n+        # Edge case: very small float\n+        c = fits.Card(k, 1e-16, com)\n+        expected_str = f\"{k} = 1E-16 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Edge case: very large float\n+        c = fits.Card(k, 3.4e38, com)\n+        expected_str = f\"{k} = 3.4E+38 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Random float\n+        c = fits.Card(k, 12345.6789, com)\n+        expected_str = f\"{k} = 12345.6789 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n         assert str(c) == _pad(\"LONG_INT= -467374636747637647347374734737437\")\n \n     def test_floating_point_value_card(self):\n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..ec3ac15 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,6 +601,15 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n+    # Test to verify VLAs do not cause false differences\n+    def test_fitsdiff_identical_vla(self):\n+        col = Column(\"a\", format=\"QD\", array=[[0], [0, 0]])\n+        hdu = BinTableHDU.from_columns([col])\n+        hdu.writeto(\"diffbug_vla.fits\", overwrite=True)\n+        \n+        diff = FITSDiff(\"diffbug_vla.fits\", \"diffbug_vla.fits\")\n+        assert diff.identical, \"FITSDiff reported differences in identical files with VLAs.\"\n+\n     def test_identical_files_basic(self):\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..a91589b 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -85,6 +85,23 @@ def test_inherit_docstrings():\n             pass\n \n     if Base.__call__.__doc__ is not None:\n+        assert Subclass.__call__.__doc__ == \"FOO\"\n+\n+\n+def test_inherit_docstrings_for_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"\"\"BAR\"\"\"\n+            return 'bar'\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 'new bar'\n+\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..0020dc8 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -171,6 +171,8 @@ def test_multiple_solidus():\n     with pytest.raises(ValueError):\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n+import astropy.units as u\n+import pytest\n \n def test_unknown_unit3():\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n@@ -198,7 +200,10 @@ def test_unknown_unit3():\n         unit5 = u.Unit(None)\n \n \n-@raises(TypeError)\n+def test_unrecognized_unit_equality_with_none():\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    assert unit != None  # noqa\n+    assert not (unit == None)  # noqa\n def test_invalid_scale():\n     x = ['a', 'b', 'c'] * u.m\n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..4c545e9 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -69,7 +69,17 @@ def test_minversion():\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n     bad_versions = ['1', '1.2rc1']\n+    # Additional test cases to verify fix for LooseVersion issue with strings and integers\n+    version_conflict_cases = [\n+        ('1.14.3', '1.14dev', True),  # Should return True since '1.14.3' is greater than '1.14dev'\n+        ('1.14', '1.14dev', False),   # Should return False since '1.14' is not equal to '1.14dev'\n+        ('1.14dev', '1.14.2', False), # Should return False since '1.14dev' is less than '1.14.2'\n+    ]\n+    test_module_new = ModuleType(str(\"test_module_new\"))\n+    for have_version, min_version, expected in version_conflict_cases:\n+        test_module_new.__version__ = have_version\n+        assert minversion(test_module_new, min_version) == expected\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..b11998e 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -2329,8 +2329,49 @@ class TestHeaderFunctions(FitsTestCase):\n             else:\n                 c.verify('exception')\n \n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n \n-class TestRecordValuedKeywordCards(FitsTestCase):\n+    def test_header_fromstring_unicode(self):\n+        \"\"\"\n+        Test reading a Header from a unicode `str` string.\n+        \"\"\"\n+        header_str = \"SIMPLE  =                    T / Standard FITS\".ljust(80)\n+        header_str += \"BITPIX  =                   16 /\".ljust(80)\n+        header_str += \"NAXIS   =                    0 /\".ljust(80)\n+        header_str += \"END\".ljust(80)\n+\n+        header = fits.Header.fromstring(header_str)\n+        assert header['SIMPLE'] == True\n+        assert header['BITPIX'] == 16\n+        assert header['NAXIS'] == 0\n+\n+    def test_card_from_unicode(self):\n+        \"\"\"\n+        Test loading a Card from a unicode string.\n+        \"\"\"\n+        c = fits.Card.fromstring(\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n     \"\"\"\n     Tests for handling of record-valued keyword cards as used by the\n     `FITS WCS distortion paper\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..443d1d3 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -34,9 +34,31 @@ except ImportError:\n \n \"\"\" The Quantity class will represent a number + unit + uncertainty \"\"\"\n \n+import numpy as np\n+import pytest\n+import astropy.units as u\n \n class TestQuantityCreation:\n \n+    def test_float_dtype_preservation(self):\n+        # Test to ensure float16 does not upgrade to float64\n+        value_float16 = np.float16(1.0)\n+        quantity_16 = value_float16 * u.km\n+        assert quantity_16.dtype == np.float16\n+\n+        # Test to verify other float types remain unchanged\n+        value_float32 = np.float32(1.0)\n+        quantity_32 = value_float32 * u.km\n+        assert quantity_32.dtype == np.float32\n+\n+        value_float64 = np.float64(1.0)\n+        quantity_64 = value_float64 * u.km\n+        assert quantity_64.dtype == np.float64\n+\n+        value_float128 = np.float128(1.0)\n+        quantity_128 = value_float128 * u.km\n+        assert quantity_128.dtype == np.float128\n+\n     def test_1(self):\n         # create objects through operations with Unit objects:\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..e424e48 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -217,6 +217,25 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n+    # Test cases for invalid characters in username and password.\n+    # Based on the issue, these should raise ValidationError.\n+\n+    # Invalid '@' in username\n+    (URLValidator(), 'http://user@name@example.com', ValidationError),\n+    # Invalid ':' in username\n+    (URLValidator(), 'http://user:name@example.com', ValidationError),\n+    # Invalid '/' in username\n+    (URLValidator(), 'http://user/name@example.com', ValidationError),\n+    # Invalid ':' in password\n+    (URLValidator(), 'http://user:pass:word@example.com', ValidationError),\n+    # Invalid '@' in password\n+    (URLValidator(), 'http://user:pass@word@example.com', ValidationError),\n+    # Invalid '/' in password\n+    (URLValidator(), 'http://user:pass/word@example.com', ValidationError),\n+    # Complex mixed invalid characters\n+    (URLValidator(), 'http://user:pass@word@example.com', ValidationError),\n+    (URLValidator(), \"http://invalid-.com/?m=foo@example.com\", ValidationError),\n+\n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..a9a34cf 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -11,6 +12,7 @@ from django.db.models import (\n from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n+from django.db.models.expressions import Case, When\n \n from .models import Author, Book, Publisher, Store\n \n@@ -395,6 +397,14 @@ class AggregateTestCase(TestCase):\n         sql = ctx.captured_queries[0]['sql']\n         self.assertIn('SELECT COUNT(*) ', sql)\n \n+    def test_count_distinct_expression(self):\n+        # Test case to verify the issue fix for COUNT(DISTINCT Case WHEN ...)\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        # Assuming 'distinct_ratings' should return 4 as given in the original patch.\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n     def test_non_grouped_annotation_not_in_group_by(self):\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..52cf49a 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1093,6 +1093,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default FILE_UPLOAD_PERMISSIONS should be 0o644 if not explicitly overridden.\n+        \"\"\"\n+        # Ensure default permissions are checked without any settings modification\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n     def test_override_file_upload_permissions(self):\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..d7e3dc5 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,6 +1,8 @@\n+\n import os\n import signal\n from unittest import mock\n+import subprocess\n \n from django.db.backends.postgresql.client import DatabaseClient\n from django.test import SimpleTestCase\n@@ -29,7 +31,24 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_pgpassword_set_correctly(self):\n+        \"\"\"\n+        Test that PGPASSWORD is set correctly in the environment when subprocess.run is used.\n+        \"\"\"\n+        def _mock_subprocess_run(args, env=None, **kwargs):\n+            self.assertIn('PGPASSWORD', env)\n+            self.assertEqual(env['PGPASSWORD'], 'somepassword')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +132,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..e5bd01e 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -2,6 +2,7 @@ from django.apps.registry import apps\n from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n+from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n@@ -38,7 +39,23 @@ class ContentTypeOperationsTests(TransactionTestCase):\n                     self.assertEqual(next_operation.old_model, operation.old_name_lower)\n                     self.assertEqual(next_operation.new_model, operation.new_name_lower)\n \n-    def test_existing_content_type_rename(self):\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Create a content type in the 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        \n+        # Call migrate on the 'other' database\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        \n+        # Check that 'foo' was renamed in the 'other' database\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        \n+        # Rollback migration and verify the model is restored\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +80,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..e76feee 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -425,7 +425,44 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n             inlines = [\n                 AlternateInline, MediaInline\n             ]\n-        ma = EpisodeAdmin(Episode, self.site)\n+        \n+        class EpisodeAdminWithGetInlines(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+        \n+        ma = EpisodeAdminWithGetInlines(Episode, self.site)\n+        request = type('Request', (object,), {})()\n+        # Test with no name on request\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        # Test with 'alternate' request name\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, None), (AlternateInline,))\n+        instances = ma.get_inline_instances(request)\n+        self.assertEqual(len(instances), 1)\n+        self.assertEqual(type(instances[0]), AlternateInline)\n+\n+        # Test with 'media' request name\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, None), (MediaInline,))\n+        instances = ma.get_inline_instances(request)\n+        self.assertEqual(len(instances), 1)\n+        self.assertEqual(type(instances[0]), MediaInline)\n+\n+        # Test with a different object\n+        another_obj = type('AnotherObj', (object,), {})()\n+        self.assertEqual(ma.get_inlines(request, another_obj), (MediaInline,))\n+        instances = ma.get_inline_instances(request, another_obj)\n+        self.assertEqual(len(instances), 1)\n+        self.assertEqual(type(instances[0]), MediaInline)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..b50583a 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -235,9 +235,10 @@ class UsernameValidatorsTests(SimpleTestCase):\n     def test_unicode_validator(self):\n         valid_usernames = ['joe', 'Ren\u00e9', '\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30', '\u0623\u062d\u0645\u062f']\n         invalid_usernames = [\n-            \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n+            \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\", \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n+            \"trailingnewline\\n\"\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\",\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +251,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", \"trailingnewline\\n\"]\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +259,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..3dd9c6c 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -288,6 +288,24 @@ class QueryDictTests(SimpleTestCase):\n \n class HttpResponseTests(unittest.TestCase):\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+    \n+    def test_memoryview_with_non_ascii_content(self):\n+        non_ascii_bytes = 'caf\u00e9'.encode('utf-8')\n+        r = HttpResponse(memoryview(non_ascii_bytes))\n+        self.assertEqual(r.content, non_ascii_bytes)\n+\n+    def test_memoryview_empty_content(self):\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_large_content(self):\n+        large_content = b'x' * 10000\n+        r = HttpResponse(memoryview(large_content))\n+        self.assertEqual(r.content, large_content)\n+\n     def test_headers_type(self):\n         r = HttpResponse()\n \n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..504610d 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,7 +501,15 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n-    def test_ignore_files(self):\n+    def test_namespace_packages_without_init_py(self):\n+        \"\"\"Test migration loading from namespace packages without __init__.py.\"\"\"\n+        with self.temporary_migration_module(\n+                module='migrations.test_migrations_namespace_package') as migration_dir:\n+            os.remove(os.path.join(migration_dir, '__init__.py'))  # Simulate namespace package\n+            loader = MigrationLoader(connection)\n+            loader.load_disk()\n+            migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n+            self.assertListEqual(migrations, ['0001_initial'])\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n         loader.load_disk()\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..6a7466e 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -665,6 +665,52 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n         self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n+    def test_inline_change_m2m_view_only_perm(self):\n+        # Set only view permission on books.\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        \n+        response = self.client.get(self.author_change_url)\n+        \n+        # The inline should be viewable but not editable.\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" id=\"id_Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'name=\"Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # The field in the inline is read-only.\n+        self.assertContains(response, '<p>%s</p>' % self.user.book.name, html=False)\n+        self.assertNotContains(\n+            response,\n+            'id=\"id_Author_books-0-DELETE\"',  # Delete option should not be available\n+        )\n+\n+    def test_inline_change_m2m_view_add_perm(self):\n+        # Set view and add permission, expect no edit but can see inline\n+        self.test_inline_change_m2m_view_only_perm()\n+        permission = Permission.objects.get(codename='add_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        \n+        response = self.client.get(self.author_change_url)\n+\n+        # The inline should still not be editable, as there's no change permission.\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" id=\"id_Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'name=\"Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # Ensure the add button is present due to add permission\n+        self.assertContains(response, 'Add another Author-book relationship')\n+        self.assertNotContains(\n+            response, \n+            'id=\"id_Author_books-0-DELETE\"'\n+        )\n+\n     def test_inline_change_m2m_change_perm(self):\n         permission = Permission.objects.get(codename='change_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n",
  "django__django-11163": "",
  "django__django-11179": "",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..c25c8d6 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,11 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),  # Test case for very small numbers with correct output\n+            ('1e-200', 2, '0.00'),  # This replicates the issue to see if it is fixed\n+            ('1e-200', 8, '0.00000000'),  # More significant decimal digits\n+            ('5e-250', 4, '0.0000'),  # Another small number case\n+            ('5.678e-300', 5, '0.00000')  # Testing format for very small decimals with specific digits\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..bce5dba 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,5 +1,16 @@\n+\n import uuid\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n from django.contrib.contenttypes.fields import (\n     GenericForeignKey, GenericRelation,\n )\n@@ -7,25 +18,75 @@ from django.contrib.contenttypes.models import ContentType\n from django.db import models\n from django.db.models.query import ModelIterable, QuerySet\n from django.utils.functional import cached_property\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class Author(models.Model):\n     name = models.CharField(max_length=50, unique=True)\n     first_book = models.ForeignKey('Book', models.CASCADE, related_name='first_time_authors')\n     favorite_authors = models.ManyToManyField(\n         'self', through='FavoriteAuthors', symmetrical=False, related_name='favors_me')\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     def __str__(self):\n         return self.name\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class AuthorWithAge(Author):\n     author = models.OneToOneField(Author, models.CASCADE, parent_link=True)\n     age = models.IntegerField()\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class FavoriteAuthors(models.Model):\n     author = models.ForeignKey(Author, models.CASCADE, to_field='name', related_name='i_like')\n@@ -164,13 +225,43 @@ class TaggedItem(models.Model):\n     )\n     favorite_fkey = models.CharField(max_length=64, null=True)\n     favorite = GenericForeignKey('favorite_ct', 'favorite_fkey')\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     def __str__(self):\n         return self.tag\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class Bookmark(models.Model):\n     url = models.URLField()\n@@ -179,31 +270,101 @@ class Bookmark(models.Model):\n                                     content_type_field='favorite_ct',\n                                     object_id_field='favorite_fkey',\n                                     related_query_name='favorite_bookmarks')\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class Comment(models.Model):\n     comment = models.TextField()\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     # Content-object field\n     content_type = models.ForeignKey(ContentType, models.CASCADE)\n     object_pk = models.TextField()\n     content_object = GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_pk\")\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n # Models for lookup ordering tests\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n class House(models.Model):\n     name = models.CharField(max_length=50)\n     address = models.CharField(max_length=255)\n     owner = models.ForeignKey('Person', models.SET_NULL, null=True)\n     main_room = models.OneToOneField('Room', models.SET_NULL, related_name='main_room_of', null=True)\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n \n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..eaa1e88 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,7 +81,40 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,\n+            )\n+        )\n+\n+    def test_ssl_certificate_with_password(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'complexpassword',\n+                'host': 'somehost',\n+                'port': '5432',\n+                'sslmode': 'require',\n+                'sslrootcert': '/etc/ssl/root.crt',\n+                'sslcert': '/etc/ssl/client.crt',\n+                'sslkey': '/etc/ssl/client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '5432', 'dbname'],\n+                'complexpassword',\n+            )\n+        )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..4d702ad 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -90,6 +90,20 @@ class FilteredRelationTests(TestCase):\n             [self.author1, self.author2]\n         )\n \n+    def test_exclude_with_multiple_conditions(self):\n+        # Test excluding with multiple conditions\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_special=FilteredRelation(\n+                    'book', condition=Q(\n+                        Q(book__title__istartswith='poem') &\n+                        Q(book__state=Book.AVAILABLE)\n+                    ),\n+                ),\n+            ).exclude(book_special__isnull=False),\n+            [self.author2],\n+        )\n+\n     def test_with_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n@@ -98,7 +112,27 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n-    def test_with_join_and_complex_condition(self):\n+    def test_exclude_with_multiple_conditions(self):\n+        # Test excluding with multiple conditions\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_special=FilteredRelation(\n+                    'book', condition=Q(\n+                        Q(book__title__istartswith='poem') &\n+                        Q(book__state=Book.AVAILABLE)\n+                    ),\n+                ),\n+            ).exclude(book_special__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n                 book_alice=FilteredRelation(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..4771491 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -27,7 +27,7 @@ class TestUtilsHtml(SimpleTestCase):\n             ('<', '&lt;'),\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n-            (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..8a0b31b 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -253,8 +253,31 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), 'Set foo')\n \n+    def test_checks_run_by_default(self):\n+        \"\"\"\n+        Ensure that system checks run by default when `--skip-checks` is\n+        not provided.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or\n+            # list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertNotEqual(err, '')  # Expecting some error output from system checks\n \n-class UtilsTests(SimpleTestCase):\n+    def test_skip_checks_flag(self):\n+        \"\"\"\n+        Ensure that system checks are skipped when `--skip-checks` is provided.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or\n+            # list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n \n     def test_no_existent_external_program(self):\n         msg = 'Error executing a_42_command_that_doesnt_exist_42'\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..2b3c71c 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,8 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n+from django.urls import set_urlconf\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +12,44 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default__root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    def test_get_resolver_before_and_after_set_urlconf(self):\n+        # Call get_resolver with None before set_urlconf is called\n+        resolver_before = get_resolver(None)\n+        \n+        # Set a specific ROOT_URLCONF\n+        set_urlconf('urlpatterns.path_urls')\n+        \n+        # Call get_resolver with ROOT_URLCONF after set_urlconf is called\n+        resolver_after = get_resolver('urlpatterns.path_urls')\n+        \n+        # Assert that resolver instances differ before and after set_urlconf\n+        self.assertIsNot(resolver_before, resolver_after)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_get_resolver_with_and_without_set_urlconf(self):\n+        # Call get_resolver with default URLCONF\n+        resolver_with_default = get_resolver()\n+        \n+        # Set URLCONF to a new one\n+        set_urlconf('urlpatterns.path_dynamic_urls')\n+        \n+        # Call get_resolver again and ensure different resolver is returned\n+        resolver_with_new = get_resolver()\n+        \n+        # Assert different resolvers\n+        self.assertIsNot(resolver_with_default, resolver_with_new)\n+\n+\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..9292e57 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -241,8 +241,19 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             email='test2@example.com',\n             password='test',\n         )\n-\n-    def test_authenticate_inactive(self):\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        credentials_list = [\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ]\n+        for credentials in credentials_list:\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..f43f2c7 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,31 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_union_with_values_list_single_column(self):\n+        # Ensure changing column list in union with values_list works correctly.\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # Original test case described in the issue text\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+        \n+        # Test changing the column to 'name' only\n+        reserved_name = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name, ('a',))\n+\n+    def test_union_with_values_list_multiple_queries(self):\n+        # Test the behavior with two different queries and columns.\n+        ReservedName.objects.create(name='b', order=3)\n+        qs1 = ReservedName.objects.filter(name='a')\n+        qs2 = ReservedName.objects.filter(order=3)\n+\n+        # Both queries should return identical columns when using union\n+        reserved_union = qs1.union(qs2).values_list('name', 'order').get(name='b')\n+        self.assertEqual(reserved_union, ('b', 3))\n+        \n+        reserved_order = qs1.union(qs2).values_list('order').get(name='b')\n+        self.assertEqual(reserved_order, (3,))\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..ab1dfce 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n@@ -12,6 +13,78 @@ from .models import (\n     Band, Song, User, ValidationTestInlineModel, ValidationTestModel,\n )\n \n+# Test case to verify correct behavior with a custom field accessible only on instance\n+\n+def test_valid_field_accessible_via_instance(self):\n+    class PositionField(Field):\n+        \"\"\"Custom field accessible only via instance.\"\"\"\n+        def contribute_to_class(self, cls, name):\n+            super().contribute_to_class(cls, name)\n+            setattr(cls, self.name, self)\n+\n+        def __get__(self, instance, owner):\n+            if instance is None:\n+                raise AttributeError()\n+\n+    class TestModel(Model):\n+        field = PositionField()\n+\n+    class TestModelAdmin(ModelAdmin):\n+        list_display = ('field',)\n+\n+    self.assertIsValid(TestModelAdmin, TestModel)\n+\n+# Additional test cases based on issue description\n+\n+class ListDisplayCheckTests(CheckTestCase):\n+\n+    def test_list_display_with_callable(self):\n+        # Test with callable in list_display\n+        def a_callable(obj):\n+            return obj.name\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('name', a_callable)\n+\n+        self.assertIsValid(TestModelAdmin, ValidationTestModel)\n+\n+    def test_list_display_with_field_not_in_meta(self):\n+        # Test for field not present in _meta but available via getattr\n+        class TestField(Field):\n+            pass\n+\n+        class TestModel(Model):\n+            test_field = TestField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('test_field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_accessible_only_via_instance(self):\n+        # Force an E108 error with an invalid field access setup\n+        class BrokenPositionField(Field):\n+            \"\"\"Field intended to simulate a scenario provoking E108.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                return None  # Simulate issue by always returning None\n+\n+        class TestModel(Model):\n+            broken_field = BrokenPositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('broken_field',)\n+\n+        error_msg = (\n+            \"The value of 'list_display[0]' refers to 'broken_field', which is not a callable, \"\n+            \"an attribute of 'TestModelAdmin', or an attribute or method on 'testapp.TestModel'.\"\n+        )\n+\n+        self.assertIsInvalid(TestModelAdmin, TestModel, error_msg, 'admin.E108')\n+\n \n class CheckTestCase(SimpleTestCase):\n \n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..c06f0a2 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,10 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n+from django.db.models.expressions import OrderBy\n+from django.db.models import F\n+from datetime import datetime\n \n \n class OrderingTests(TestCase):\n",
  "django__django-11603": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex 8d54185..461fa5b 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -96,6 +96,10 @@ class Aggregate(Func):\n         return options\n \n \n+from django.db.models import Avg, Sum, Count, Case, When\n+from django.test import TestCase\n+from .models import Book  # Assuming `Book` is a model defined in models.py used for testing\n+\n class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):\n     function = 'AVG'\n     name = 'Avg'\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..a3020b7 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1856,7 +1856,52 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"CreateModel\"])\n \n-    def test_replace_string_with_foreignkey(self):\n+    def test_alter_uuid_field_to_fk_with_dependency(self):\n+        \"\"\"\n+        Test altering a UUID field to a ForeignKey and ensure it creates correct dependency.\n+        \"\"\"\n+        before = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True))\n+        ])\n+        after = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL))\n+        ])\n+        changes = self.get_changes([before, self.book_with_no_author], [after, self.book_with_no_author])\n+        self.assertNumberMigrations(changes, \"testapp1\", 1)\n+        self.assertOperationTypes(changes, \"testapp1\", 0, [\"AlterField\"])\n+        self.assertMigrationDependencies(changes, \"testapp1\", 0, [(\"testapp2\", \"__first__\")])\n+\n+    def test_alter_uuid_field_to_fk_no_author_dependency(self):\n+        \"\"\"\n+        Test altering a UUID field to a ForeignKey without providing the correct app/model dependency.\n+        \"\"\"\n+        before = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True))\n+        ])\n+        after = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"nonexistent.App2\", null=True, blank=True, on_delete=models.SET_NULL))\n+        ])\n+        changes = self.get_changes([before], [after])\n+        # Expected to raise a ValueError because \"nonexistent.App2\" cannot be resolved\n+        with self.assertRaises(ValueError, msg=\"Related model 'nonexistent.App2' cannot be resolved\"):\n+            self.assertNumberMigrations(changes, \"testapp1\", 1)\n+        # Ensure that if we have a valid app label but a nonexistent model, it raises the right error\n+        after_valid_app = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.NonExistentModel\", null=True, blank=True, on_delete=models.SET_NULL))\n+        ])\n+        changes_valid_app = self.get_changes([before, self.book_with_no_author], [after_valid_app, self.book_with_no_author])\n+        with self.assertRaises(ValueError, msg=\"Related model 'testapp2.NonExistentModel' cannot be resolved\"):\n+            self.assertNumberMigrations(changes_valid_app, \"testapp1\", 1)\n         \"\"\"\n         #22300 - Adding an FK in the same \"spot\" as a deleted CharField should\n         work.\n@@ -2399,4 +2444,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..b6c3ecc 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -224,7 +224,16 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n-    def test_subparser_dest_required_args(self):\n+    def test_mutually_exclusive_group_required_options(self):\n+        out = StringIO()\n+        # Testing call_command with exclusive group using kwargs\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..d51b1e2 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,22 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_maxlength_attribute(self):\n+        # Test for default user model where max_length should be 254\n+        data = {'username': 'testuser', 'password': 'password'}\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n+\n+        # Test for custom user model with a different max_length\n+        with override_settings(AUTH_USER_MODEL='auth_tests.CustomEmailField'):\n+            data = {\n+                'username': 'u' * 255,\n+                'password': 'pwd',\n+                'email': 'test@example.com',\n+            }\n+            CustomEmailField.objects.create_user(**data)\n+            form = AuthenticationForm(None, data)\n+            self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..9aa5be7 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -269,6 +269,21 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum('a-value')\", {'import migrations.test_writer'})\n         )\n+\n+        # Test for translated Enum values behaving correctly in migration serialization\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        field = models.CharField(default=TextTranslatedEnum.A, choices=[(m.name, m.value) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('A', 'a-value'), \"\n+            \"('B', 'value-b')], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\"migrations.test_writer.BinaryEnum(b'a-value')\", {'import migrations.test_writer'})\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..9b04334 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,7 +317,29 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_two_digit_years(self, mocked_datetime):\n+        # Mock the current UTC time to verify year handling logic\n+        mocked_datetime.utcnow = mock.Mock()\n+        \n+        test_cases = [\n+            # Current date set to 2019\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(1969, 12, 31, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            # Current date set to 2020\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            # Current date set to 2048\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        ]\n+        \n+        for current_time, rfc850_str, expected in test_cases:\n+            with self.subTest(rfc850_str=rfc850_str):\n+                mocked_datetime.utcnow.return_value = current_time\n+                parsed_timestamp = parse_http_date(rfc850_str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed_timestamp), expected)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..25ef9ef 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3680,12 +3680,43 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertTrue(f.is_valid())\n         self.assertEqual(f.cleaned_data, {'data': 'xyzzy'})\n \n-    def test_empty_data_files_multi_value_dict(self):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_field_error_messages_are_independent(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Custom error'}\n+                super().__init__(**kwargs)\n+\n+        field1 = CustomCharField()\n+        field2 = copy.deepcopy(field1)\n+\n+        # Modify error messages in one field\n+        field1.error_messages['invalid'] = 'New error message'\n+\n+        # Ensure they are independent\n+        self.assertNotEqual(field1.error_messages['invalid'], field2.error_messages['invalid'])\n+\n+        # Ensure other fields are not affected\n+        original_field2_invalid_message = 'Custom error'\n+        self.assertEqual(field2.error_messages['invalid'], original_field2_invalid_message)\n         p = Person()\n         self.assertIsInstance(p.data, MultiValueDict)\n         self.assertIsInstance(p.files, MultiValueDict)\n \n \n+import copy\n+import unittest\n+\n class CustomRenderer(DjangoTemplates):\n     pass\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..e58a30f 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,4 @@\n+\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -7,6 +8,7 @@ from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n \n+from math import ceil\n from .models import (\n     Country, NoFields, NullableFields, Pizzeria, ProxyCountry,\n     ProxyMultiCountry, ProxyMultiProxyCountry, ProxyProxyCountry, Restaurant,\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..23eaf9a 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,21 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.test import SimpleTestCase\n+import enum\n+\n+class Suit(models.IntegerChoices):\n+    DIAMOND = 1, 'Diamond'\n+    SPADE = 2, 'Spade'\n+    HEART = 3, 'Heart'\n+    CLUB = 4, 'Club'\n+\n+\n+class Vehicle(models.IntegerChoices):\n+    CAR = 1, 'Carriage'\n+    TRUCK = 2, 'Truck'\n+    JET_SKI = 3, 'Jet Ski'\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n@@ -85,6 +100,15 @@ class ChoicesTests(SimpleTestCase):\n             ('FR', 'Freshman'), ('SO', 'Sophomore'), ('JR', 'Junior'), ('SR', 'Senior'), ('GR', 'Graduate'),\n         ])\n         self.assertEqual(YearInSchool.labels, ['Freshman', 'Sophomore', 'Junior', 'Senior', 'Graduate'])\n+\n+    def test_str_representation_of_enum(self):\n+        \"\"\"\n+        Test that the string representation of enum members matches their values.\n+        \"\"\"\n+        for choice_class in [Suit, Vehicle, YearInSchool, Gender]:\n+            for member in choice_class:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(member), member.value)\n         self.assertEqual(YearInSchool.values, ['FR', 'SO', 'JR', 'SR', 'GR'])\n         self.assertEqual(YearInSchool.names, ['FRESHMAN', 'SOPHOMORE', 'JUNIOR', 'SENIOR', 'GRADUATE'])\n \n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..2d31069 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,8 +148,39 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.test import TestCase\n+from django.db import models\n+\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_default_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'foo')\n+        \n+    def test_overridden_FIELD_display_with_unset_value(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+            \n+            def get_foo_bar_display(self):\n+                return \"something else\"\n+\n+        f = FooBar(foo_bar=None)\n+        self.assertEqual(f.get_foo_bar_display(), 'something else')\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..bce2134 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db import connection\n+from django.db.models import Index\n \n \n class SchemaIndexesTests(TestCase):\n@@ -22,7 +26,45 @@ class SchemaIndexesTests(TestCase):\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n \n-    def test_index_name_hash(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names should be deterministic.\n         \"\"\"\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..dc58da4 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -107,7 +108,19 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_iterable_lookup_value_with_list(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+        \n+    def test_iterable_lookup_value_with_tuple(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..08b5772 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -844,6 +844,28 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n+    def test_get_list_editable_queryset_with_special_regex_chars_in_prefix(self):\n+        \"\"\"Test formset prefix with special regex characters like '.*+?^${}()|[]\\\\'. \"\"\"\n+        a = Swallow.objects.create(origin='Swallow X', load=5, speed=3)\n+        Swallow.objects.create(origin='Swallow Y', load=3, speed=4)\n+        special_chars_prefix = 'form.*+?^${}()|[]\\\\'\n+        data = {\n+            '{}-TOTAL_FORMS'.format(special_chars_prefix): '2',\n+            '{}-INITIAL_FORMS'.format(special_chars_prefix): '2',\n+            '{}-MIN_NUM_FORMS'.format(special_chars_prefix): '0',\n+            '{}-MAX_NUM_FORMS'.format(special_chars_prefix): '1000',\n+            '{}-0-uuid'.format(special_chars_prefix): str(a.pk),\n+            '{}-0-load'.format(special_chars_prefix): '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix=special_chars_prefix)\n+        self.assertEqual(queryset.count(), 1)\n+\n     def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..ccbb812 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,8 +1,10 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n     docutils_is_available, parse_docstring, parse_rst, trim_docstring,\n )\n+from django.test.utils import captured_stderr\n \n from .tests import AdminDocsSimpleTestCase\n \n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..7532369 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,16 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_splitarrayfield_checkbox_preserve_state(self):\n+        # Test that each checkbox in SplitArrayField with CheckboxInput maintains correct checked state\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [True, False, True, False])\n+        self.assertEqual(context['widget']['value'], '[True, False, True, False]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}, {'checked': True}, {}]\n+        )\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n@@ -1112,6 +1122,16 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             \"\"\"\n         )\n \n+    def test_splitarrayfield_checkbox_preserve_state(self):\n+        # Test that each checkbox in SplitArrayField with CheckboxInput maintains correct checked state\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [True, False, True, False])\n+        self.assertEqual(context['widget']['value'], '[True, False, True, False]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}, {'checked': True}, {}]\n+        )\n+\n     def test_render_attrs(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2),\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..8f73dc1 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -246,6 +246,13 @@ class SlugPKData(models.Model):\n class SmallPKData(models.Model):\n     data = models.SmallIntegerField(primary_key=True)\n \n+import uuid\n+from django.db import models\n+\n+class Sample(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+    name = models.CharField(blank=True, max_length=100)\n+\n # class TextPKData(models.Model):\n #     data = models.TextField(primary_key=True)\n \n",
  "django__django-12262": "",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..4c26a1c 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2477,7 +2478,29 @@ Password: <input type=\"password\" name=\"password\" required>\n             f.as_table(),\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n+    \n+    def test_filefield_with_fileinput_no_initial(self):\n+        class FileForm(Form):\n+            file1 = FileField()\n+\n+        # Case without initial data\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+    def test_filefield_with_fileinput_with_initial(self):\n+        class FileForm(Form):\n+            file1 = FileField()\n \n+        # Case with initial data\n+        f = FileForm(initial={'file1': 'initial_file.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+        \n     def test_filefield_initial_callable(self):\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..3cfb6d4 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -6,6 +7,7 @@ import uuid\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -143,7 +145,10 @@ class ChoicesTests(SimpleTestCase):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n-    def test_str(self):\n+    def test_templates_enum_usage(self):\n+        template = Template('{{ YearInSchool.FRESHMAN.label }}|{{ YearInSchool.FRESHMAN.value }}')\n+        output = template.render(Context({'YearInSchool': YearInSchool}))\n+        self.assertEqual(output, 'Freshman|1')\n         for test in [Gender, Suit, YearInSchool, Vehicle]:\n             for member in test:\n                 with self.subTest(member=member):\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..1eab1d3 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1006,6 +1006,29 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(ShippingMethod.check(), [])\n \n+    def test_onetoone_mti_field_order_importance(self):\n+        \"\"\"\n+        Test order importance in OneToOneField with parent_link in an MTI setup.\n+        \"\"\"\n+        class Base(models.Model):\n+            pass\n+\n+        # Test case where the order of OneToOne fields matches the issue description\n+        class Derived1(Base):\n+            base_ptr = models.OneToOneField(Base, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            related_field = models.OneToOneField(Base, on_delete=models.PROTECT, related_name='derived_relation')\n+\n+        # Should not raise issues as ordering is as per the issue's suggested order\n+        self.assertEqual(Derived1.check(), [])\n+\n+        # Test case where the order of OneToOne fields is reversed\n+        class Derived2(Base):\n+            related_field = models.OneToOneField(Base, on_delete=models.PROTECT, related_name='derived_relation')\n+            base_ptr = models.OneToOneField(Base, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        # We expect no ImproperlyConfigured error here\n+        self.assertEqual(Derived2.check(), [])\n+\n     def test_missing_parent_link(self):\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n",
  "django__django-12419": "",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..82818ac 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,10 +13,14 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+from django.test import TestCase\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n )\n+from django.test import TestCase\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n@@ -26,6 +30,8 @@ from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n )\n+from django.test import TestCase\n+from django.utils.functional import SimpleLazyObject\n \n \n class BasicExpressionsTests(TestCase):\n@@ -35,6 +41,40 @@ class BasicExpressionsTests(TestCase):\n             name=\"Example Inc.\", num_employees=2300, num_chairs=5,\n             ceo=Employee.objects.create(firstname=\"Joe\", lastname=\"Smith\", salary=10)\n         )\n+        \n+    def test_subquery_with_simplelazyobject(self):\n+        # We want to test the use of SimpleLazyObject with a nested Subquery\n+        from .models import Manager, Company, Employee\n+        \n+        # Create a manager instance\n+        manager = Manager.objects.create(name='Manager1')\n+        # Wrap manager in SimpleLazyObject\n+        lazy_manager = SimpleLazyObject(lambda: Manager.objects.get(pk=manager.pk))\n+        \n+        # Create employee with manager\n+        employee = Employee.objects.create(firstname='John', lastname='Doe', salary=1000)\n+        employee.manager = manager\n+        employee.save()\n+        \n+        # Create company with CEO\n+        company = Company.objects.create(\n+            name='Test Company', \n+            num_employees=1,\n+            ceo=employee\n+        )\n+        \n+        # Create a subquery to annotate manager\n+        ceo_manager_subquery = Subquery(\n+            Employee.objects.filter(lastname=OuterRef('ceo__lastname')).values('manager')\n+        )\n+        \n+        # Annotate companies with the manager from subquery and filter using SimpleLazyObject\n+        qs = Company.objects.annotate(\n+            ceo_manager=ceo_manager_subquery\n+        ).filter(ceo_manager=lazy_manager)\n+        \n+        # Verify that the query returns the expected company\n+        self.assertEqual(qs.get(), company)\n         cls.foobar_ltd = Company.objects.create(\n             name=\"Foobar Ltd.\", num_employees=3, num_chairs=4, based_in_eu=True,\n             ceo=Employee.objects.create(firstname=\"Frank\", lastname=\"Meyer\", salary=20)\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..c75e7aa 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,8 +1759,28 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n-    def test_add_constraint(self):\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together(self):\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n         gt_constraint = models.CheckConstraint(check=gt_check, name=\"test_add_constraint_pony_pink_gt_2\")\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..907c387 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -4,6 +4,9 @@ import re\n from datetime import datetime, timedelta\n from importlib import import_module\n \n+from django.contrib.admin import widgets as admin_widgets\n+from django.forms import widgets\n+\n import pytz\n \n from django import forms\n@@ -14,7 +17,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -137,6 +140,48 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         self.assertEqual(f1.widget.attrs['maxlength'], '100')\n         self.assertEqual(f2.widget.attrs['maxlength'], '20')\n         self.assertEqual(f2.widget.attrs['size'], '10')\n+    \n+    def test_formfield_for_manytomany_widget_override(self):\n+        \"\"\"\n+        Test that formfield_for_manytomany allows widget to be overridden via formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_formfield_for_manytomany_autocomplete(self):\n+        \"\"\"\n+        Test that formfield_for_manytomany uses AutocompleteSelectMultiple for autocomplete_fields.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            autocomplete_fields = ['members']\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, admin_widgets.AutocompleteSelectMultiple)\n+\n+    def test_formfield_for_manytomany_raw_id(self):\n+        \"\"\"\n+        Test that formfield_for_manytomany uses ManyToManyRawIdWidget for raw_id_fields.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            raw_id_fields = ['members']\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, admin_widgets.ManyToManyRawIdWidget)\n+\n+    def test_formfield_for_manytomany_filtered_select(self):\n+        \"\"\"\n+        Test that formfield_for_manytomany uses FilteredSelectMultiple for filter_horizontal.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_horizontal = ['members']\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, admin_widgets.FilteredSelectMultiple)\n \n     def test_formfield_overrides_for_datetime_field(self):\n         \"\"\"\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..b5fe708 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -10,6 +10,8 @@ from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n \n+from django.db import models\n+from django.test.utils import isolate_apps\n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n )\n@@ -179,6 +181,46 @@ class LookupTests(TestCase):\n         with self.assertNumQueries(expected_num_queries):\n             self.assertEqual(Author.objects.in_bulk(authors), authors)\n \n+    def test_in_bulk_meta_constraint(self):\n+        # Test in_bulk for a field with UniqueConstraint.\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        # Test in_bulk for fields that are not unique.\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n+\n     def test_in_bulk_with_field(self):\n         self.assertEqual(\n             Article.objects.in_bulk([self.a1.slug, self.a2.slug, self.a3.slug], field_name='slug'),\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..9a402b9 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -893,7 +893,23 @@ class OtherModelTests(SimpleTestCase):\n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n \n-    def test_ordering_pointing_to_related_model_pk(self):\n+    def test_ordering_with_isnull_lookup_in_relations(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=100, null=True)\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey(Parent, models.SET_NULL, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..12b5af0 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1210,8 +1210,22 @@ class Queries1Tests(TestCase):\n             [],\n         )\n \n-\n-class Queries2Tests(TestCase):\n+class FilterableFieldsTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.n2 = Note.objects.create(note=\"n2\", misc=\"misc\", id=2)\n+        cls.e2 = ExtraInfo.objects.create(info=\"e2\", note=cls.n2, value=41)\n+        cls.a3 = Author.objects.create(name=\"a3\", num=3003, extra=cls.e2)\n+\n+    def test_field_with_filterable_false(self):\n+        # This test checks if filtering on an object with a filterable=False field works properly.\n+        e2 = ExtraInfo.objects.create(info='e2_unique', note=self.n2, value=41)\n+        a3 = Author.objects.create(name='a3_unique', num=3004, extra=e2)\n+        cache_list = list(Author.objects.filter(name='a3_unique'))\n+        self.assertSequenceEqual(\n+            Author.objects.filter(extra=e2),\n+            [a3],\n+        )\n     @classmethod\n     def setUpTestData(cls):\n         Number.objects.create(num=4)\n",
  "django__django-13033": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\nindex ec1f9e4..9cfbe23 100644\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -13,7 +13,19 @@ The ordering attribute is not required. If you leave it off, ordering will be\n undefined -- not random, just undefined.\n \"\"\"\n \n-from django.db import models\n+from django.db import models, connection\n+\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"self\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n \n \n class Author(models.Model):\n",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..c78f9e7 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1644,8 +1644,49 @@ class ModelFormBasicTests(TestCase):\n         obj.name = 'Alice'\n         obj.full_clean()\n \n+from django import forms\n+from django.test import TestCase\n+from django.core.exceptions import ValidationError\n+from .models import Article, Writer, WriterManager\n+\n+class ArticleManagerTests(TestCase):\n \n-class ModelMultipleChoiceFieldTests(TestCase):\n+    def test_validate_using_default_manager_fails_for_archived(self):\n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Writer\n+                fields = '__all__'\n+\n+        # Attempt to create a form with an archived Writer instance using the default manager\n+        writer = Writer.objects.create(name='Archived Writer', archived=True)\n+        data = {'name': writer.pk}\n+        form = FavoriteArticleForm(data=data)\n+        \n+        # The form should not be valid, as the instance is filtered out by _default_manager\n+        self.assertFalse(form.is_valid())\n+        self.assertIn('name', form.errors)\n+        self.assertIn('Select a valid choice.', form.errors['name'])\n+\n+    def test_validate_using_base_manager_succeeds_for_archived(self):\n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Writer\n+                fields = '__all__'\n+            \n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                # Overridden to use the base manager\n+                self.fields['name'].queryset = Writer._base_manager.all()\n+\n+        # Use the base manager that includes archived Writers\n+        writer = Writer.objects.create(name='Archived Writer', archived=True)\n+        data = {'name': writer.pk}\n+        form = FavoriteArticleForm(data=data)\n+\n+        # The form should be valid, as it uses the base manager\n+        self.assertTrue(form.is_valid())\n+        instance = form.save()\n+        self.assertEqual(instance.name, writer.name)\n     @classmethod\n     def setUpTestData(cls):\n         cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n",
  "django__django-13112": "",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..ef48a4e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1210,13 +1210,33 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+    # Verify if DurationField expressions work properly on SQLite and MySQL.\n+    def test_duration_field_arithmetic(self):\n+        from datetime import timedelta\n+        from django.db.models import F\n+        from .models import Experiment\n+        # Adding a timedelta to the DurationField.\n+        delta = timedelta(days=1)\n+        Experiment.objects.create(estimated_time=timedelta(days=2))\n+        qs = Experiment.objects.annotate(duration_sum=F('estimated_time') + delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration_sum, obj.estimated_time + delta)\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+    # Verify if DurationField expressions work properly on SQLite and MySQL.\n+    def test_duration_field_arithmetic(self):\n+        from datetime import timedelta\n+        from django.db.models import F\n+        from .models import Experiment\n+        # Adding a timedelta to the DurationField.\n+        delta = timedelta(days=1)\n+        Experiment.objects.create(estimated_time=timedelta(days=2))\n+        qs = Experiment.objects.annotate(duration_sum=F('estimated_time') + delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration_sum, obj.estimated_time + delta)\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n         Employee.objects.update(salary=F('salary').bitxor(48))\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..fac0b2e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1584,7 +1584,15 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n-    def test_datetime_subtraction(self):\n+    def test_temporal_subtraction_no_expression_wrapper(self):\n+        queryset = Experiment.objects.annotate(delta=F('end') - F('start'))\n+        for experiment in queryset:\n+            self.assertEqual(experiment.delta, experiment.end - experiment.start)\n+\n+        # Test with timedelta addition to ensure complex expressions work.\n+        queryset = Experiment.objects.annotate(delta=(F('end') - F('start')) + Value(datetime.timedelta(days=1)))\n+        for experiment in queryset:\n+            self.assertEqual(experiment.delta, (experiment.end - experiment.start) + datetime.timedelta(days=1))\n         under_estimate = [\n             e.name for e in Experiment.objects.filter(estimated_time__gt=F('end') - F('start'))\n         ]\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..36e2caa 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,9 @@\n import operator\n \n+from django.forms import ModelForm\n+from .models import Number\n+from django import forms\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n",
  "django__django-13279": "",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..9d011c6 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -6,6 +6,10 @@ from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n )\n from django.test.utils import require_jinja2\n+from django.shortcuts import get_object_or_404\n+from django.urls import path\n+from .models import Artist, Account\n+from django.utils.functional import SimpleLazyObject\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n@@ -590,6 +594,23 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+\n+            def get_context_data(self, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Account, slug=offer_slug)\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        account = Account.objects.create(slug='test-slug')\n+        lazy_offer_slug = SimpleLazyObject(lambda: account.slug)\n+        response = OfferView.as_view()(self.rf.get('/'), offer_slug=lazy_offer_slug)\n+        self.assertEqual(response.context_data['offer'], account)\n+        self.assertEqual(response.context_data['offer_slug'], 'test-slug')\n+\n     def test_template_params_warning(self):\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..c6badf4 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2809,8 +2810,58 @@ class LimitChoicesToTests(TestCase):\n \n     def test_custom_field_with_queryset_but_no_limit_choices_to(self):\n         \"\"\"\n-        A custom field with a `queryset` attribute but no `limit_choices_to`\n-        works (#23795).\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Setup data for the test\n+        threepwood = Character.objects.create(username='threepwood', last_action='2023-10-01T10:00Z')\n+        marley = Character.objects.create(username='marley', last_action='2023-10-01T10:00Z')\n+        \n+        joke1 = StumpJoke.objects.create(most_recently_fooled=threepwood, funny=True)\n+        joke2 = StumpJoke.objects.create(most_recently_fooled=threepwood, funny=True)\n+        joke3 = StumpJoke.objects.create(most_recently_fooled=marley, funny=True)\n+        StumpJoke.objects.create(most_recently_fooled=marley, funny=False)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(jokes__funny=True, jokes_today__funny=True),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={'jokes__funny': True, 'jokes_today__funny': True},\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(jokes__funny=True, jokes_today__funny=True),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         \"\"\"\n         f = StumpJokeWithCustomFieldForm()\n         self.assertEqual(f.fields['custom'].queryset, 42)\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..4488030 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -17,14 +17,23 @@ from django.core.files.storage import (\n     FileSystemStorage, Storage as BaseStorage, default_storage,\n     get_storage_class,\n )\n+from django.core.files.storage import default_storage\n+from .models import callable_storage\n+from django.db import models\n from django.core.files.uploadedfile import (\n     InMemoryUploadedFile, SimpleUploadedFile, TemporaryUploadedFile,\n )\n+from django.core.files.storage import default_storage\n+from .models import callable_storage\n+from django.db import models\n from django.db.models import FileField\n from django.db.models.fields.files import FileDescriptor\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from django.core.files.storage import default_storage\n+from .models import callable_storage\n+from django.db import models\n from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n@@ -906,7 +915,17 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         obj = FileField(storage=GetStorage)\n         self.assertIsInstance(obj.storage, BaseStorage)\n \n-    def test_callable_storage_file_field_in_model(self):\n+    def test_filefield_callable_storage_deconstruction(self):\n+        \"\"\"\n+        Test FileField with callable storage that deconstructs to the original callable.\n+        \"\"\"\n+        class MyModel(models.Model):\n+            file = models.FileField(storage=callable_storage)\n+        \n+        field = MyModel._meta.get_field('file')\n+        *_, kwargs = field.deconstruct()\n+        storage = kwargs.get('storage')\n+        self.assertIs(storage, callable_storage)\n         obj = Storage()\n         self.assertEqual(obj.storage_callable.storage, temp_storage)\n         self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..1d1121b 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,7 +632,17 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n-    def test_key_icontains(self):\n+    def test_key_in_with_jsonfield(self):\n+        tests = [\n+            ('value__key__in', [0], []),  # Expect empty because original issue showed it does not work\n+            ('value__key', 0, self.objs[:312]),  # Expect non-empty because this works\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n     def test_key_startswith(self):\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..b6fec92 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -20,6 +20,10 @@ from django.test import (\n from django.utils import timezone\n \n from ..models import Author, DTModel, Fan\n+import pytz\n+from datetime import datetime\n+from django.db.models import Count\n+from django.utils import timezone\n \n \n def truncate_to(value, kind, tzinfo=None):\n@@ -1133,7 +1137,45 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_with_timezone(self):\n+        # Create a model with a known datetime\n+        start_datetime = datetime(2023, 3, 12, 23, 0, 0)  # Arbitrary date selection\n+        model = self.create_model(start_datetime, start_datetime)\n+\n+        # Define timezones\n+        utc = pytz.utc\n+        ny = pytz.timezone('America/New_York')\n+\n+        model = DTModel.objects.annotate(\n+            utc_date=TruncDate('start_datetime', tzinfo=utc),\n+            ny_date=TruncDate('start_datetime', tzinfo=ny),\n+        ).get()\n+\n+        utc_dt = start_datetime.astimezone(utc)\n+        ny_dt = start_datetime.astimezone(ny)\n+\n+        self.assertEqual(model.utc_date, utc_dt.date())\n+        self.assertEqual(model.ny_date, ny_dt.date())\n+\n+    def test_trunctime_with_timezone(self):\n+        # Create a model with a known datetime\n+        start_datetime = datetime(2023, 3, 12, 23, 0, 0)  # Arbitrary date selection\n+        model = self.create_model(start_datetime, start_datetime)\n+\n+        # Define timezones\n+        utc = pytz.utc\n+        ny = pytz.timezone('America/New_York')\n+\n+        model = DTModel.objects.annotate(\n+            utc_time=TruncTime('start_datetime', tzinfo=utc),\n+            ny_time=TruncTime('start_datetime', tzinfo=ny),\n+        ).get()\n+\n+        utc_dt = start_datetime.astimezone(utc)\n+        ny_dt = start_datetime.astimezone(ny)\n+\n+        self.assertEqual(model.utc_time, utc_dt.time())\n+        self.assertEqual(model.ny_time, ny_dt.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..2c45c0c 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,40 @@\n+\n+class FileLockTestCase(unittest.TestCase):\n+\n+    def test_exclusive_lock_non_blocking_failure(self):\n+        file_path = Path(__file__).parent / 'test_tmp.txt'\n+        with open(file_path, 'wb') as f:\n+            f.write(b'Testing locks')\n+        try:\n+            with open(file_path) as f1, open(file_path) as f2:\n+                # Acquire an exclusive lock on f1 and verify\n+                self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+                # Attempt a non-blocking exclusive lock on f2 should fail\n+                self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+                # Now, release the lock on f1\n+                self.assertIs(locks.unlock(f1), True)\n+                # Retry gaining a lock on f2 should succeed as f1 is unlocked\n+                self.assertIs(locks.lock(f2, locks.LOCK_EX), True)\n+                self.assertIs(locks.unlock(f2), True)\n+        finally:\n+            os.remove(file_path)\n+\n+    def test_shared_lock_non_blocking_success(self):\n+        file_path = Path(__file__).parent / 'test_tmp.txt'\n+        with open(file_path, 'wb') as f:\n+            f.write(b'Testing shared locks')\n+        try:\n+            with open(file_path) as f1, open(file_path) as f2:\n+                # Acquire a shared lock on f1\n+                self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+                # Non-blocking shared lock should succeed\n+                self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+                # Unlock both files\n+                self.assertIs(locks.unlock(f1), True)\n+                self.assertIs(locks.unlock(f2), True)\n+        finally:\n+            os.remove(file_path)\n+\n import errno\n import gzip\n import os\n@@ -6,6 +43,8 @@ import tempfile\n import unittest\n from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n+from pathlib import Path\n+from django.core.files import locks\n from unittest import mock\n \n from django.core.files import File\n",
  "django__django-13417": "",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..0eed87d 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -341,8 +341,20 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser('prog_name', 'subcommand', epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n+from django.core.management import call_command\n+from django.utils.six import StringIO\n+from unittest import mock\n \n class CommandRunTests(AdminScriptTestCase):\n+    # Test case to ensure flush is working as expected.\n+    def test_output_flush_during_management_command(self):\n+        out = StringIO()\n+        with mock.patch.object(out, 'flush', wraps=out.flush) as mocked_flush:\n+            call_command('outputwrapper', stdout=out)\n+            self.assertIn('Working...', out.getvalue())\n+            self.assertTrue(mocked_flush.called)\n+            content_after_flush = out.getvalue()\n+            self.assertIn('OK', content_after_flush)\n     \"\"\"\n     Tests that need to run by simulating the command line, not by call_command.\n     \"\"\"\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..40109b8 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models.with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +39,25 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_email_change_invalidates_token(self):\n+        \"\"\"\n+        Changing the user's email should invalidate existing password reset tokens.\n+        \"\"\"\n+        user = CustomEmailField.objects.create_user(\n+            'changeemailuser',\n+            email='test4@example.com',\n+            password='testpw',\n+        )\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+\n+        # Change the user's email, which should invalidate the token\n+        setattr(user, user.get_email_field_name(), 'newemail@example.com')\n+        user.save()\n+\n+        # The old token should now be invalid\n+        self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..e8c6948 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,7 +1,9 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n+from django.db.models import Q, UniqueConstraint\n from django.core import checks\n from django.db import models\n from django.test import (\n@@ -85,7 +87,67 @@ class UserModelChecksTests(SimpleTestCase):\n                 ),\n             ])\n \n-    @override_settings(AUTH_USER_MODEL='auth_tests.BadUser')\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraintNoCheck')\n+    def test_username_unique_constraint_no_check(self):\n+        \"\"\"\n+        Test that no auth.E003 error is raised when USERNAME_FIELD has a unique constraint.\n+        \"\"\"\n+        class CustomUserUniqueConstraintNoCheck(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+    \n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique_constraint_no_check'),\n+                ]\n+    \n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+        with self.settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.ModelBackend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserPartiallyUniqueWithCondition')\n+    def test_username_partially_unique_with_condition(self):\n+        \"\"\"\n+        Test handling when USERNAME_FIELD has a partial unique constraint with a condition.\n+        \"\"\"\n+        class CustomUserPartiallyUniqueWithCondition(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+    \n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='partial_username_unique_with_condition',\n+                        condition=Q(is_active=True),\n+                    ),\n+                ]\n+    \n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'CustomUserPartiallyUniqueWithCondition.username' must be unique because \"\n+                \"it is named as the 'USERNAME_FIELD'.\",\n+                obj=CustomUserPartiallyUniqueWithCondition,\n+                id='auth.E003',\n+            ),\n+        ])\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [\n+                checks.Warning(\n+                    \"'CustomUserPartiallyUniqueWithCondition.username' is named as the \"\n+                    \"'USERNAME_FIELD', but it is not unique.\",\n+                    hint=(\n+                        'Ensure that your authentication backend(s) can '\n+                        'handle non-unique usernames.'\n+                    ),\n+                    obj=CustomUserPartiallyUniqueWithCondition,\n+                    id='auth.W004',\n+                ),\n+            ])\n     def test_is_anonymous_authenticated_methods(self):\n         \"\"\"\n         <User Model>.is_anonymous/is_authenticated must not be methods.\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..b0c9ab3 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,16 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_random_order_by_does_not_affect_aggregation(self):\n+        # Setup initial state for testing\n+        t = Thing.objects.create()\n+        [Related.objects.create(thing=t) for _ in range(2)]\n+        \n+        # Test random ordering shouldn't affect aggregation\n+        things = Thing.objects.annotate(rc=Count('related')).order_by('?')\n+        self.assertSetEqual(\n+            {(thing.id, thing.rc) for thing in things},\n+            {(t.id, 2)}\n+        )\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..e6159a7 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -815,7 +816,35 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        # Original test patch for the issue\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_with_non_integer(self):\n+        # Test using namedtuple with non-integer values for related field types\n+        SalaryRange = namedtuple('SalaryRange', ['min_value', 'max_value'])\n+        qs = Company.objects.filter(\n+            num_employees__range=SalaryRange(min_value=20, max_value=100)\n+        )\n+        expected_companies = Company.objects.filter(name__in=['5020 Ltd', '5040 Ltd', '5050 Ltd', '5060 Ltd', '99300 Ltd'])\n+        self.assertQuerysetEqual(qs, map(repr, expected_companies), ordered=False)\n+\n+    def test_range_lookup_with_custom_namedtuple(self):\n+        # Test with a custom namedtuple with more complex logic\n+        ComplexRange = namedtuple('ComplexRange', ['start', 'end'])\n+        complex_range = ComplexRange(start=50, end=200)\n+        qs = Company.objects.filter(\n+            num_employees__range=complex_range\n+        )\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>', '<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..bf4a038 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -28,9 +28,43 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from django.test.utils import captured_stderr, captured_stdout\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_invalid_sys_argv(self):\n+        \"\"\"\n+        Ensure proper function when sys.argv contains None program name.\n+        \"\"\"\n+        args = ['check', '--list-tags']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-management'] + args)\n+        self.assertIn('usage: django-management check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_direct_usage(self):\n+        \"\"\"\n+        Directly passing all args should correctly consider argv[0] for prog name.\n+        \"\"\"\n+        args = ['inspectdb']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin inspectdb', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..831c751 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -19,6 +20,31 @@ class DateFormatTests(SimpleTestCase):\n     def tearDown(self):\n         translation.activate(self._orig_lang)\n \n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n+\n+    def test_year_edge_cases(self):\n+        # Test year 1000, which should properly convert to '00'\n+        self.assertEqual(dateformat.format(datetime(1000, 1, 1), 'y'), '00')\n+\n+        # Test exactly 2-digit boundary years\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'y'), '99')\n+        self.assertEqual(dateformat.format(datetime(100, 1, 1), 'y'), '00')\n+\n+        # Test early 2-digit years\n+        self.assertEqual(dateformat.format(datetime(101, 1, 1), 'y'), '01')\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'y'), '01')\n+\n     def test_date(self):\n         d = date(2009, 5, 16)\n         self.assertEqual(date.fromtimestamp(int(format(d, 'U'))), d)\n@@ -164,4 +190,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex ac42308..b209bc6 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -55,6 +55,7 @@ class ReadOnlyPasswordHashField(forms.Field):\n     widget = ReadOnlyPasswordHashWidget\n \n     def __init__(self, *args, **kwargs):\n+        kwargs.setdefault(\"disabled\", True) # Set disabled=True by default\n         kwargs.setdefault(\"required\", False)\n         super().__init__(*args, **kwargs)\n \n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..b102846 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,40 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_create_model_and_empty_model_options_with_other_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'permissions': [('edit_model', 'Can edit model')]},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ]\n+        )\n+\n+    def test_create_model_with_multiple_options_and_alter_empty(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'permissions': [('edit_model', 'Can edit model')],\n+                        'ordering': ['name'],\n+                    },\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ]\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n@@ -134,6 +168,40 @@ class OptimizerTests(SimpleTestCase):\n             [],\n         )\n \n+    def test_create_model_and_empty_model_options_with_other_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'permissions': [('edit_model', 'Can edit model')]},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ]\n+        )\n+\n+    def test_create_model_with_multiple_options_and_alter_empty(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'permissions': [('edit_model', 'Can edit model')],\n+                        'ordering': ['name'],\n+                    },\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ]\n+        )\n+\n     def test_create_alter_unique_delete_model(self):\n         self._test_create_alter_foo_delete_model(migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]))\n \n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..18ce88d 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,9 +1,12 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n from ..utils import setup\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n \n \n class AddTests(SimpleTestCase):\n@@ -46,6 +49,27 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add_numbers(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n \n class FunctionTests(SimpleTestCase):\n \n",
  "django__django-13807": "",
  "django__django-13809": "",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..64773fb 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,4 +1,6 @@\n+\n from django.conf import settings\n+import asyncio\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n from django.test import RequestFactory, SimpleTestCase, override_settings\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..5a1e0ed 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,7 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..86e8ad3 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -16,6 +16,8 @@ from django.test import (\n )\n from django.test.utils import isolate_apps\n \n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n from ..models import Author, Item, Object, Square\n \n try:\n@@ -36,7 +38,12 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_min_required(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..3070fc7 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -155,8 +155,38 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                     frozenset(),\n                 )\n \n+import sys\n+from pathlib import Path\n+from unittest import mock\n+from django.utils import autoreload\n+from django.test import SimpleTestCase\n+from .test_module import __main__ as test_main\n \n class TestChildArguments(SimpleTestCase):\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n+\n+    @mock.patch('sys.argv', ['package/main.py', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch('pathlib.Path.exists', return_value=True)\n+    def test_run_as_non_django_script(self, mock_exists):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, 'package/main.py', 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', ['not_exist/runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch('pathlib.Path.exists', return_value=False)\n+    def test_non_existing_script_raises_exception(self, mock_exists):\n+        with self.assertRaises(RuntimeError):\n+            autoreload.get_child_arguments()\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..19f77eb 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -395,6 +395,24 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_inherited_manual_pk_no_warning(self):\n+        class Parent(models.Model):\n+            custom_id = models.BigAutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_inherited_manual_pk_with_parent_link(self):\n+        class Parent(models.Model):\n+            custom_id = models.BigAutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.BigAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -414,4 +432,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..43a458d 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -298,6 +298,21 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n+        # Additional test for checking the correct behavior of ModelChoiceField\n+        def test_modelchoicefield_value_provided_in_error(self):\n+            # This test ensures that the value of an invalid choice is included in the error message after the fix.\n+            f = ModelChoiceField(\n+                queryset=ChoiceModel.objects.all(),\n+                error_messages={\n+                    'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+                },\n+            )\n+            self.assertFormErrors(\n+                ['\"nonexistent\" is not one of the available choices.'],\n+                f.clean,\n+                'nonexistent',\n+            )\n+\n         # ModelMultipleChoiceField\n         e = {\n             'required': 'REQUIRED',\n@@ -307,4 +322,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..957e609 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,12 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..d65d792 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .models import CustomAutoFieldModel\n+from .fields import MyWrapper\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -220,6 +223,22 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that the custom auto field uses MyWrapper when an instance is created.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that the custom auto field uses MyWrapper in bulk_create.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n     # SQLite lets objects be saved with an empty primary key, even though an\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..4abc90d 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -816,6 +816,25 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+    def test_commutativity_of_q_and_exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        tests = [\n+            (Exists(is_poc) & Q(), [self.max]),\n+            (Q() & Exists(is_poc), [self.max]),\n+            (Exists(is_poc) | Q(), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Q() | Exists(is_poc), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Exists(is_ceo) & Q(salary__gte=30), [self.max]),\n+            (Q(salary__gte=30) & Exists(is_ceo), [self.max]),\n+            (Exists(is_ceo) | Q(salary__gte=30), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Q(salary__gte=30) | Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+        ]\n+        for conditions, expected in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n+\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..4305076 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,7 +205,19 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n-    def test_css_import_case_insensitive(self):\n+    def test_no_duplicate_yields_in_post_process(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+\n+        # Capture the output of the collect process\n+        stats = collectstatic_cmd.collect()\n+\n+        # Ensure no file is yielded more than once\n+        self.assertCountEqual(\n+            stats['post_processed'],\n+            set(stats['post_processed']),\n+            \"The post_process method yielded a file more than once.\"\n+        )\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n         with storage.staticfiles_storage.open(relpath) as relfile:\n",
  "django__django-14089": "diff --git a/django/utils/datastructures.py b/django/utils/datastructures.py\nindex d3f62c3..3bfd9d8 100644\n--- a/django/utils/datastructures.py\n+++ b/django/utils/datastructures.py\n@@ -25,6 +25,9 @@ class OrderedSet:\n     def __iter__(self):\n         return iter(self.dict)\n \n+    def __reversed__(self):\n+        return reversed(self.dict.keys())\n+\n     def __contains__(self, item):\n         return item in self.dict\n \n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..22479c8 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -65,6 +66,20 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Test to ensure that Meta.ordering fields are not included in the GROUP BY clause.\n+        \"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+\n+        # Group by author and count articles. Author should be grouped correctly without additional ordering.\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n+\n     def test_order_by_override(self):\n         \"\"\"\n         Only the last order_by has any effect (since they each override any\n@@ -483,4 +498,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..252edc0 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -815,14 +815,80 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n             [self.example_inc.ceo, self.max],\n         )\n+    \n+    def test_combining_q_objects_with_boolean_expressions(self):\n+        # Setting up test data and conditions\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q_single = Q(Exists(tagged))\n+        \n+        # Test deconstruction\n+        path, args, kwargs = q_single.deconstruct()\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n+        \n+        # Test combining Q with boolean expressions\n+        q_combined_and = q_single & Q()\n+        q_combined_or = q_single | Q()\n+        \n+        _, args_and, kwargs_and = q_combined_and.deconstruct()\n+        _, args_or, kwargs_or = q_combined_or.deconstruct()\n+        \n+        self.assertEqual(args_and, (Exists(tagged),))\n+        self.assertEqual(kwargs_and, {'_connector': 'AND'})\n+        self.assertEqual(args_or, (Exists(tagged),))\n+        self.assertEqual(kwargs_or, {'_connector': 'OR'})\n         self.assertCountEqual(\n             Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n             [self.max],\n         )\n+    \n+    def test_combining_q_objects_with_boolean_expressions(self):\n+        # Setting up test data and conditions\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q_single = Q(Exists(tagged))\n+        \n+        # Test deconstruction\n+        path, args, kwargs = q_single.deconstruct()\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n+        \n+        # Test combining Q with boolean expressions\n+        q_combined_and = q_single & Q()\n+        q_combined_or = q_single | Q()\n+        \n+        _, args_and, kwargs_and = q_combined_and.deconstruct()\n+        _, args_or, kwargs_or = q_combined_or.deconstruct()\n+        \n+        self.assertEqual(args_and, (Exists(tagged),))\n+        self.assertEqual(kwargs_and, {'_connector': 'AND'})\n+        self.assertEqual(args_or, (Exists(tagged),))\n+        self.assertEqual(kwargs_or, {'_connector': 'OR'})\n         self.assertCountEqual(\n             Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n             [self.example_inc.ceo, self.max],\n         )\n+    \n+    def test_combining_q_objects_with_boolean_expressions(self):\n+        # Setting up test data and conditions\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q_single = Q(Exists(tagged))\n+        \n+        # Test deconstruction\n+        path, args, kwargs = q_single.deconstruct()\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n+        \n+        # Test combining Q with boolean expressions\n+        q_combined_and = q_single & Q()\n+        q_combined_or = q_single | Q()\n+        \n+        _, args_and, kwargs_and = q_combined_and.deconstruct()\n+        _, args_or, kwargs_or = q_combined_or.deconstruct()\n+        \n+        self.assertEqual(args_and, (Exists(tagged),))\n+        self.assertEqual(kwargs_and, {'_connector': 'AND'})\n+        self.assertEqual(args_or, (Exists(tagged),))\n+        self.assertEqual(kwargs_or, {'_connector': 'OR'})\n \n     def test_boolean_expression_combined_with_empty_Q(self):\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..9037cc1 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import override_settings\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -66,7 +68,23 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, models.BigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +100,23 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, models.BigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "",
  "django__django-14349": "",
  "django__django-14351": "",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..7ed3fbd 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,6 +38,67 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_preferred_keys_used(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_deprecated_kwargs_fallback(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n         options_port = 555\n@@ -68,6 +129,67 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_preferred_keys_used(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_deprecated_kwargs_fallback(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n@@ -89,6 +211,67 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_preferred_keys_used(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_deprecated_kwargs_fallback(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "",
  "django__django-14493": "",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..c0b521d 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -653,7 +653,34 @@ class ExecutorTests(MigrationTestBase):\n             recorder.applied_migrations(),\n         )\n \n-    # When the feature is False, the operation and the record won't be\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_unapply_squashed_migration_marks_replacements_unapplied(self):\n+        \"\"\"Test that unapplying a squashed migration marks its replacements as unapplied.\"\"\"\n+        executor = MigrationExecutor(connection)\n+        # Apply the squashed migration\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        try:\n+            self.assertIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+        finally:\n+            executor.loader.build_graph()\n+            # Unapply the squashed migration\n+            executor.migrate([('migrations', None)])\n+            self.assertNotIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            # Check that the replaced migrations are also marked as unapplied\n+            self.assertNotIn(\n+                ('migrations', '0001_initial'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            self.assertNotIn(\n+                ('migrations', '0002_second'),\n+                executor.recorder.applied_migrations(),\n+            )\n     # performed in a transaction and the test will systematically pass.\n     @skipUnlessDBFeature('can_rollback_ddl')\n     def test_migrations_applied_and_recorded_atomically(self):\n",
  "django__django-14539": "",
  "django__django-14559": "",
  "django__django-14608": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 0b8d2fa..df3a478 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -3348,7 +3348,7 @@ class AdminViewListEditable(TestCase):\n         response = self.client.post(reverse('admin:admin_views_person_changelist'), data)\n         non_form_errors = response.context['cl'].formset.non_form_errors()\n         self.assertIsInstance(non_form_errors, ErrorList)\n-        self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"])))\n+        self.assertEqual(str(non_form_errors), '<ul class=\"errorlist nonform\"><li>Grace is not a Zombie</li></ul>')\n \n     def test_list_editable_ordering(self):\n         collector = Collector.objects.create(id=1, name=\"Frederick Clegg\")\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..bfb54f7 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,30 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_datetime_clean_fields_access_through_boundfield(self):\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 0)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = forms.DateTimeField(disabled=True)\n+\n+        form = DateTimeForm(initial={'dt': now})\n+        bound_field_value = form['dt'].initial\n+        cleaned_value = form.cleaned_data['dt']\n+\n+        # Ensure cleaned data's value equals the BoundField's initial value\n+        self.assertEqual(cleaned_value, bound_field_value)\n+\n+    def test_changed_data_logic_moved_to_boundfield(self):\n+        class SimpleForm(forms.Form):\n+            field = forms.CharField(initial='initial value')\n+\n+        form = SimpleForm({'field': 'new value'})\n+        # BindField should handle changed logic and report as changed\n+        self.assertEqual(form.changed_data, ['field'])\n+\n+        form = SimpleForm({'field': 'initial value'})\n+        # Now should be handled as unchanged\n+        self.assertEqual(form.changed_data, [])\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..fc4714f 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -2,7 +2,9 @@ from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n from django.db import IntegrityError\n+from django.core.checks import Error\n from django.test import TestCase\n+from django.db import models\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..09db2f6 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,7 +1,11 @@\n+\n import json\n from contextlib import contextmanager\n \n from django.contrib import admin\n+from django.test import TestCase\n+from django.utils import timezone\n+from .models import Question\n from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n from django.contrib.auth.models import Permission, User\n@@ -297,6 +301,24 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n+    \n+    def test_serialize_result_with_custom_field(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return super().serialize_result(obj, to_field_name) | {'pub_date': str(obj.pub_date)}\n+\n+        Question.objects.create(question='Question 1', pub_date=timezone.now())\n+        Question.objects.create(question='Question 2', pub_date=timezone.now())\n+\n+        request = RequestFactory().get('/admin/autocomplete/', {'term': 'Question', 'app_label': 'admin_views', 'model_name': 'question', 'field_name': 'question'})\n+        request.user = self.superuser\n+\n+        response = CustomAutocompleteJsonView.as_view(admin_site=admin.site)(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data['results'][0]['text'], 'Question 1')\n+        self.assertIn('pub_date', data['results'][0])\n \n     def setUp(self):\n         self.superuser = User.objects.create_superuser(\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..c121139 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -924,7 +924,21 @@ class StateTests(SimpleTestCase):\n             1,\n         )\n \n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_non_set(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_set(self):\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_none(self):\n+        try:\n+            ProjectState(real_apps=None)\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..0522bfe 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,6 +195,7 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -235,6 +236,7 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..75c5eab 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,24 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        book = Book.objects.create(name='Test Book')\n+        lang = Language.objects.create(iso='en', name='English')\n+        chapter = Chapter.objects.create(title='Ch 1', content='Content', book=book, language=lang)\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_chapter_change', args=(chapter.pk,)))\n+\n+        # Verify that the link URL for the ForeignKey field is correct\n+        book_url = reverse(f'{admin_site}:admin_views_book_change', args=(quote(book.pk),))\n+        lang_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(lang.pk),))\n+        self.assertContains(response, f'<a href=\"{book_url}\">Test Book</a>', html=True)\n+        self.assertContains(response, f'<a href=\"{lang_url}\">en</a>', html=True)\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        self._test_readonly_foreignkey_links('namespaced_admin')\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..a8be457 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,39 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_no_constraints_modified(self):\n+        app_label = \"test_rmwdbtn_constraints\"\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel(\"Rider\", fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+            ], options={\"db_table\": \"rider\"}),\n+            migrations.CreateModel(\"Pony\", fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"rider\", models.ForeignKey(\"%s.Rider\" % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        Pony = project_state.apps.get_model(app_label, \"Pony\")\n+        Rider = project_state.apps.get_model(app_label, \"Rider\")\n+        pony = Pony.objects.create()\n+        rider = Rider.objects.create()\n+        pony.rider = rider\n+        pony.save()\n+\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel(\"Rider\", \"Runner\")\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Test reverse operation as no-op\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertEqual(Rider.objects.count(), 2)\n+        self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..aa914b8 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -153,7 +153,26 @@ class ChangeListTests(TestCase):\n         cl = ia.get_changelist_instance(request)\n         self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n \n-    def test_result_list_empty_changelist_value(self):\n+    def test_search_with_multiple_terms_reduces_joins(self):\n+        \"\"\"\n+        Ensure searching with multiple terms does not result in unnecessary joins.\n+        \"\"\"\n+        parent = Parent.objects.create(name='John')\n+        Child.objects.create(parent=parent, name='Michael', age=10)\n+        Child.objects.create(parent=parent, name='Michelle', age=15)\n+\n+        m = ParentAdminTwoSearchFields(Parent, custom_site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'michael michelle'})\n+        request.user = self.superuser\n+\n+        with CaptureQueriesContext(connection) as context:\n+            cl = m.get_changelist_instance(request)\n+            object_count = cl.queryset.count()\n+        \n+        # There should not be multiple JOINS for each term due to optimization.\n+        sql = context.captured_queries[0]['sql']\n+        self.assertEqual(sql.count('JOIN'), 1)\n+        self.assertEqual(object_count, 1)\n         \"\"\"\n         Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored\n         for relationship fields\n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..8284508 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n \n+from django.utils.html import json_script\n from ..utils import setup\n \n \n@@ -16,4 +18,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..4a6e20a 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2827,6 +2827,28 @@ class AutodetectorTests(TestCase):\n             ('0002_custom_name_20380101_1112_squashed_0003_model', 3),\n             ('2_squashed_4', 4),\n         ]\n+\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n         for migration_name, expected_number in tests:\n             with self.subTest(migration_name=migration_name):\n                 self.assertEqual(\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..bec9a52 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -367,7 +368,7 @@ class BaseTests:\n         add_level_messages(storage)\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n-\n+    \n     @override_settings_tags(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n@@ -379,5 +380,21 @@ class BaseTests:\n         storage = self.get_storage()\n         storage.level = 0\n         add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        # Check that the tags match the overridden settings\n+        self.assertEqual(tags, ['info', '', 'debug', 'warning', 'bad', 'custom'])\n+\n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.DEBUG: 'debug-tag',\n+        constants.SUCCESS: 'success-tag',\n+    })\n+    def test_override_settings_new_tags(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        storage.add(constants.DEBUG, 'Debug message')\n+        storage.add(constants.SUCCESS, 'Success message')\n+        tags = [msg.level_tag for msg in storage]\n+        # Confirm that the custom tags are applied\n+        self.assertEqual(tags, ['debug-tag', 'success-tag'])\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', 'custom', 'extra-tag', '', 'bad', 'success'])\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..ce2b638 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,9 +30,40 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, BaseUser, Task, Note, Annotation, Tag,\n )\n \n+from django.db.models import Q\n+from django.test import TestCase\n+\n+\n+class QuerySetAliasConflictTests(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Setting up data to reproduce the issue\n+        tag = Tag.objects.create(name=\"test_tag\")\n+        cls.annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = cls.annotation_1.notes.create(tag=tag)\n+        cls.base_user_1 = BaseUser.objects.create(annotation=cls.annotation_1)\n+        cls.base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        cls.task = Task.objects.create(\n+            owner=cls.base_user_2, creator=cls.base_user_2, note=note\n+        )\n+\n+    def test_conflicting_aliases_during_combine(self):\n+        qs1 = self.annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=self.annotation_1.notes.all()) |\n+            Q(creator__note__in=self.annotation_1.notes.all())\n+        )\n+        # Validate initial query results\n+        self.assertSequenceEqual(list(qs1), [self.base_user_1])\n+        self.assertSequenceEqual(list(qs2), [self.base_user_2])\n+        # Check that the union of the queryset works both ways\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [self.base_user_1, self.base_user_2])\n \n class Queries1Tests(TestCase):\n     @classmethod\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..5c95f86 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1775,7 +1775,36 @@ class ValueTests(TestCase):\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n \n-    def test_repr(self):\n+    def test_deconstruct_func(self):\n+        func = Func('rating', function='ABS')\n+        path, args, kwargs = func.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Func')\n+        self.assertEqual(args, ('rating',))\n+        self.assertEqual(kwargs['function'], 'ABS')\n+    \n+    def test_deconstruct_case(self):\n+        case = Case(\n+            When(name='special', then=Value('X')),\n+            default=Value('other'),\n+        )\n+        path, args, kwargs = case.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Case')\n+        self.assertEqual(len(args), 0)\n+        self.assertIsInstance(kwargs['default'], Value)\n+\n+    def test_deconstruct_expression_wrapper(self):\n+        expression = ExpressionWrapper(F('pages'), output_field=IntegerField())\n+        path, args, kwargs = expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.ExpressionWrapper')\n+        self.assertIsInstance(args[0], F)\n+        self.assertEqual(kwargs['output_field'].deconstruct(), IntegerField().deconstruct())\n+\n+    def test_deconstruct_order_by(self):\n+        order_by = OrderBy(F('name').desc())\n+        path, args, kwargs = order_by.deconstruct()\n+        self.assertEqual(path, 'django.db.models.OrderBy')\n+        self.assertIsInstance(args[0], F)\n+        self.assertTrue(kwargs['descending'])\n         tests = [\n             (None, 'Value(None)'),\n             ('str', \"Value('str')\"),\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..0c302a3 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1591,6 +1591,23 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'author')},\n         )\n \n+    def test_optimize_alter_foo_together(self):\n+        \"\"\"\n+        Check that multiple AlterFooTogether operations can be optimized into one.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together],\n+            [self.author_empty, self.book_foo_together_2]\n+        )\n+        # Simulate the optimizer running\n+        optimized_operations = self.optimizer.optimize(changes['otherapp'][0].operations, \"otherapp\")\n+        # Expecting only two operations after optimization\n+        self.assertEqual(len(optimized_operations), 2)\n+        self.assertEqual(optimized_operations[0].name, 'book')\n+        self.assertEqual(optimized_operations[0].unique_together, {('title', 'author')})\n+        self.assertEqual(optimized_operations[1].name, 'book')\n+        self.assertEqual(optimized_operations[1].index_together, {('title', 'author')})\n+\n     def test_add_field_and_foo_together(self):\n         \"\"\"\n         Added fields will be created before using them in index/unique_together.\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..4b08da4 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,7 +1847,38 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n-    def test_resolve_output_field_failure(self):\n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'test string',  # typical string\n+            '',  # empty string\n+            'a' * 256,  # long string without explicitly set max_length\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                # Ensure no exception is raised and no broken validator exists\n+                try:\n+                    field.clean(value, model_instance=None)\n+                except Exception as e:\n+                    self.fail(f\"Exception {e} was raised for value {value} with type {type(value)}\")\n+                if isinstance(value, str):\n+                    max_length_validators = [v for v in field.validators if isinstance(v, validators.MaxLengthValidator)]\n+                    self.assertFalse(any([v.limit_value is None for v in max_length_validators]), \"MaxLengthValidator with None limit_value found\")\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..1be24c8 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -624,7 +624,32 @@ class SchemaTests(TransactionTestCase):\n         # Make sure the values were transformed correctly\n         self.assertEqual(Author.objects.extra(where=[\"thing = 1\"]).count(), 2)\n \n-    def test_add_field_binary(self):\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField on SQLite does not crash.\n+        \"\"\"\n+        # Create initial models\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+\n+        # Add a nullable OneToOneField\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+\n+        # Verify the field was added\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Check that the field allows NULL values\n+        self.assertTrue(columns['note_id'][1][6])  # Check nullability\n+\n+        # Verify that no UNIQUE constraint error occurs\n+        with self.assertRaises(OperationalError) as e:\n+            with connection.schema_editor() as editor:\n+                editor.add_field(Author, new_field)\n+        self.assertNotIn('Cannot add a UNIQUE column', str(e.exception))\n         \"\"\"\n         Tests binary fields get a sane default (#22851)\n         \"\"\"\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..ed0a208 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -19,7 +19,45 @@ class Nested:\n \n class BasicFieldTests(SimpleTestCase):\n \n-    def test_show_hidden_initial(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+        \n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_field_in_dict_pre_assignment(self):\n+        \"\"\"Ensure a field can be used as a dict key before model class assignment without hash change.\"\"\"\n+        field = models.CharField(max_length=200)\n+        d = {field: \"test\"}\n+        self.assertIn(field, d)\n+        \n+        class Book(models.Model):\n+            title = field\n+        \n+        self.assertIn(field, d)  # The field should still be in the dict\n+\n+    def test_field_hash_post_assignment(self):\n+        \"\"\"Ensure that hash remains the same after field assignment to a model.\"\"\"\n+        field = models.CharField(max_length=200)\n+        original_hash = hash(field)\n+        \n+        class Book(models.Model):\n+            title = field\n+        \n+        self.assertEqual(original_hash, hash(field))\n+\n+    def test_field_dict_usage_post_assignment(self):\n+        \"\"\"Ensure dict usage works correctly after field assignment to a model.\"\"\"\n+        field = models.CharField(max_length=200)\n+        d = {field: \"test\"}\n+        \n+        class Book(models.Model):\n+            title = field\n+        \n+        self.assertEqual(d[field], \"test\")\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n         formfield().\n",
  "django__django-15368": "",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..ab3c353 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1038,6 +1038,21 @@ class AutodetectorTests(TestCase):\n         self.assertOperationAttributes(\n             changes, 'app', 0, 0, model_name='bar', name='foo',\n         )\n+\n+    def test_rename_model_and_field_together(self):\n+        \"\"\"Test renaming a model and a field simultaneously.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [ModelState('testapp', 'RenamedAuthor', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('renamed_name', models.CharField(max_length=200)),\n+            ])],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name')\n         self.assertEqual(changes['app'][0].operations[0].field.deconstruct(), (\n             'foo',\n             'django.db.models.ForeignKey',\n@@ -1049,6 +1064,21 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n+    def test_rename_model_and_field_together(self):\n+        \"\"\"Test renaming a model and a field simultaneously.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [ModelState('testapp', 'RenamedAuthor', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('renamed_name', models.CharField(max_length=200)),\n+            ])],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name')\n+\n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n@@ -1056,6 +1086,21 @@ class AutodetectorTests(TestCase):\n             [self.author_renamed_with_book, self.book_with_author_renamed],\n             MigrationQuestioner({\"ask_rename_model\": True}),\n         )\n+\n+    def test_rename_model_and_field_together(self):\n+        \"\"\"Test renaming a model and a field simultaneously.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [ModelState('testapp', 'RenamedAuthor', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('renamed_name', models.CharField(max_length=200)),\n+            ])],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name')\n         # Right number/type of migrations?\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RenameModel\"])\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..d477f18 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1905,8 +1905,36 @@ class ExistsTests(TestCase):\n         )\n         self.assertNotIn('ORDER BY', captured_sql)\n \n-\n-class FieldTransformTests(TestCase):\n+from django.db import models\n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import Manager\n+\n+class ExistsSubqueryTests(TestCase):\n+    def test_negated_empty_exists(self):\n+        # Original test case to ensure it works as expected\n+        manager = Manager.objects.create(name='test_manager')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_non_negated_empty_exists(self):\n+        # New test case for non-negated empty Exists\n+        manager = Manager.objects.create(name='test_manager2')\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.none()), pk=manager.pk\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_exists_with_non_empty_queryset(self):\n+        # New test case with non-empty queryset in Exists\n+        manager1 = Manager.objects.create(name='test_manager3')\n+        manager2 = Manager.objects.create(name='test_manager4')\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.filter(pk=manager2.pk)), pk=manager2.pk\n+        )\n+        self.assertSequenceEqual(qs, [manager2])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..ea1660a 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -141,7 +141,36 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n         self.assertIsNone(ff.empty_label)\n \n-    def test_many_to_many(self):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_foreignkey_default_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        expected_label = _(\"None\") if Inventory._meta.get_field(\"parent\").blank else None\n+        self.assertEqual(ff.empty_label, expected_label)\n+\n+    def test_radio_fields_foreignkey_no_empty_label_when_not_blank(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = MyModelAdmin(NonBlankInventory, admin.site)\n+        ff = ma.formfield_for_dbfield(NonBlankInventory._meta.get_field(\"parent\"), request=None)\n+        self.assertIsNone(ff.empty_label)\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "",
  "django__django-15525": "",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..cb20e53 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,6 +3961,44 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n+    def test_alter_field_choices_noop(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_with_same_choices(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=old_field.choices,  # Keeping the same choices\n+            max_length=old_field.max_length,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+\n+    def test_alter_field_remove_choices(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = CharField(\n+            name=\"name\",\n+            choices=((\"A\", \"A\"), (\"B\", \"B\")),\n+            max_length=255,\n+        )\n+        new_field = Author._meta.get_field(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+\n     def test_add_textfield_unhashable_default(self):\n         # Create the table\n         with connection.schema_editor() as editor:\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..0bc12bf 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -324,6 +324,26 @@ class LookupTests(TestCase):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n \n+    def test_unregister_lookup_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register a lookup and ensure it's cached\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+            ForeignObject._unregister_lookup(Exactly)\n+            # Ensure cache is cleared after unregistering\n+            self.assertNotIn(\"exactly\", field.get_lookups())\n+        field = Article._meta.get_field(\"author\")\n+\n+        # clear and re-cache\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+\n+        # registration should bust the cache\n+        with register_lookup(models.ForeignObject, Exactly):\n+            # getting the lookups again should re-cache\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n \n class BilateralTransformTests(TestCase):\n     def test_bilateral_upper(self):\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..f208346 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -6,6 +7,7 @@ from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n+import inspect\n from django.test import (\n     SimpleTestCase,\n     TestCase,\n@@ -737,6 +739,41 @@ class ManagerTest(SimpleTestCase):\n         )\n \n \n+class ManagerMethodSignatureTests(TestCase):\n+    def test_manager_method_attributes(self):\n+        self.assertEqual(Article.objects.get.__doc__, models.QuerySet.get.__doc__)\n+        self.assertEqual(Article.objects.count.__name__, models.QuerySet.count.__name__)\n+\n+    def test_manager_method_signature(self):\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.bulk_create)),\n+            \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\",\n+        )\n+\n+    def test_correct_signature_on_other_methods(self):\n+        # Test another method to ensure that inspecting its signature works correctly.\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.filter)),\n+            \"(self, *args, **kwargs)\",\n+        )\n+\n+    def test_custom_manager_method_signature(self):\n+        # Assuming there is a custom manager method we want to test\n+        class CustomQuerySet(models.QuerySet):\n+            def custom_method(self, param1, param2=True):\n+                pass\n+\n+        class CustomManager(models.Manager):\n+            def get_queryset(self):\n+                return CustomQuerySet(self.model, using=self._db)\n+\n+        custom_manager = CustomManager()\n+\n+        self.assertEqual(\n+            str(inspect.signature(custom_manager.get_queryset().custom_method)),\n+            \"(param1, param2=True)\",\n+        )\n+\n class SelectOnSaveTests(TestCase):\n     def test_select_on_save(self):\n         a1 = Article.objects.create(pub_date=datetime.now())\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..89093ea 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,8 +1,10 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n+from django.utils.translation import gettext_lazy\n \n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n@@ -77,6 +79,19 @@ class FunctionTests(SimpleTestCase):\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n+    def test_get_format_with_lazy_string(self):\n+        # Test lazy string with DATE_FORMAT\n+        lazy_date_format = gettext_lazy(\"DATE_FORMAT\")\n+        self.assertEqual(get_format(lazy_date_format), \"N j, Y\")\n+\n+        # Test lazy string with TIME_FORMAT\n+        lazy_time_format = gettext_lazy(\"TIME_FORMAT\")\n+        self.assertEqual(get_format(lazy_time_format), \"P\")\n+\n+        # Test lazy string with DATETIME_FORMAT\n+        lazy_datetime_format = gettext_lazy(\"DATETIME_FORMAT\")\n+        self.assertEqual(get_format(lazy_datetime_format), \"N j, Y, P\")\n+\n     def test_no_args(self):\n         self.assertEqual(date(\"\"), \"\")\n         self.assertEqual(date(None), \"\")\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..bdbc05a 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,6 +399,39 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from django.db import models\n+\n+# Define models used in the test\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class SelectRelatedOnlyTests(TestCase):\n+    def setUp(self):\n+        self.custom_model_instance = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        self.another_model_instance = AnotherModel.objects.create(custom=self.custom_model_instance)\n+\n+    def test_select_related_only_proxy_model(self):\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+        self.assertEqual(result.custom.name, \"Test Name\")\n+\n+    def test_select_related_only_with_nonexistent_field(self):\n+        with self.assertRaises(FieldError):\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__nonexistent\").all())\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..2b8e775 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_dbshell_parameter_order(self):\n+        # This test verifies that additional parameters are correctly placed before the database name.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT * FROM some_table;\"]),\n+            ([\"psql\", \"-c\", \"SELECT * FROM some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..c2012ac 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -74,6 +74,38 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n+    def test_decimal_precision(self):\n+        # Original issue test case\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\"\n+        )\n+        # Test with a number having a large number of decimal places\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.123456789012345678901234567890\"), 30),\n+            \"42.123456789012345678901234567890\"\n+        )\n+        # Test with zero precision\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 0),\n+            \"42\"\n+        )\n+        # Test with rounding up\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345\"), 4),\n+            \"42.1235\"\n+        )\n+        # Test with negative precision (ignore decimal part)\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.98765\"), -3),\n+            \"43.0\"\n+        )\n+        # Test with scientific notation input\n+        self.assertEqual(\n+            floatformat(Decimal(\"4.2E+1\"), 1),\n+            \"42.0\"\n+        )\n+\n     def test_force_grouping(self):\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..6a98e6f 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -404,6 +404,18 @@ class CaseExpressionTests(TestCase):\n             ),\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n+        \n+    def test_annotate_with_negated_empty_q(self):\n+        # This test checks the scenario where ~Q(pk__in=[]) should yield a correct Case expression.\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        # All objects should be annotated with \"selected\" because ~Q(pk__in=[]) should evaluate to True for all.\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n \n     def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n@@ -412,6 +424,18 @@ class CaseExpressionTests(TestCase):\n                 default=Value(\"not selected\"),\n             )\n         )\n+        \n+    def test_annotate_with_negated_empty_q(self):\n+        # This test checks the scenario where ~Q(pk__in=[]) should yield a correct Case expression.\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        # All objects should be annotated with \"selected\" because ~Q(pk__in=[]) should evaluate to True for all.\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..90b6674 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -556,7 +557,14 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\", Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_path_duplicates(self):\n+        \"\"\"\n+        Test that settings.FIXTURE_DIRS cannot contain duplicate directories when using Path instances.\n+        \"\"\"\n+        msg = \"Duplicate fixture directories detected: '%s'\" % os.path.join(_cur_dir, \"fixtures\")\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..29638e8 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,30 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..ba3238e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n@@ -2427,6 +2427,8 @@ class CombinedExpressionTests(SimpleTestCase):\n                         connector,\n                         Expression(rhs()),\n                     )\n+                    result_field = expr.output_field()\n+                    self.assertIsInstance(result_field, combined)\n                     self.assertIsInstance(expr.output_field, combined)\n \n     def test_resolve_output_field_with_null(self):\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..c372661 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from django.db import DatabaseError\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +404,55 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        \n+        # Test that a DatabaseError during log_change does not commit partial changes\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        # Test that a DatabaseError after some but not all log_changes does not commit partial changes\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..b1792dd 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2386,7 +2386,27 @@ class MakeMigrationsTests(MigrationTestBase):\n                 \"makemigrations\", \"migrations\", \"--name\", \"invalid name\", \"--empty\"\n             )\n \n-    def test_makemigrations_check(self):\n+    def test_makemigrations_check_no_dry_run_required(self):\n+        \"\"\"\n+        makemigrations --check should exit with a non-zero status\n+        if there are changes without needing --dry-run.\n+        \"\"\"\n+        with self.temporary_migration_module():\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+\n+    def test_makemigrations_check_no_migrations_written(self):\n+        \"\"\"\n+        makemigrations --check should not write any migrations to disk.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertFalse(os.path.exists(tmpdir))\n         \"\"\"\n         makemigrations --check should exit with a non-zero status when\n         there are changes to an app requiring migrations.\n",
  "django__django-16136": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..35ff4e5 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -25,6 +26,8 @@ from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n+from django.urls import reverse\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..22848ad 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1593,6 +1593,22 @@ class ManageRunserver(SimpleTestCase):\n         self.assertServerSettings(\"::1\", \"8000\", ipv6=True, raw_ipv6=True)\n \n         call_command(self.cmd, addrport=\"7000\", use_ipv6=True)\n+\n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_zero_ip_addr_long_form(self, *mocked_objects):\n+        # This test case checks the output when using the full zero IP form.\n+        call_command(\n+            \"runserver\",\n+            addrport=\"0.0.0.0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n         self.assertServerSettings(\"::1\", \"7000\", ipv6=True, raw_ipv6=True)\n \n         call_command(self.cmd, addrport=\"[2001:0db8:1234:5678::9]:7000\")\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..a50b2d9 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,6 +507,16 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..7e99864 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,10 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..0ece916 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -15,6 +16,7 @@ from django.contrib.auth.forms import (\n     UserCreationForm,\n )\n from django.contrib.auth.models import User\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from django.contrib.auth.signals import user_login_failed\n from django.contrib.sites.models import Site\n from django.core import mail\n@@ -252,7 +254,61 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_saves_multiple_many_to_many_fields(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"multipleorgs@example.com\",\n+            \"password1\": \"multipleorgs\",\n+            \"password2\": \"multipleorgs\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization1, organization2])\n+\n+    def test_custom_form_invalid_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+        \n+        # Providing a non-existent Organization ID\n+        data = {\n+            \"username\": \"invalidorg@example.com\",\n+            \"password1\": \"invalidorg\",\n+            \"password2\": \"invalidorg\",\n+            \"orgs\": [\"999\"],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), False)\n+        self.assertIn(\"orgs\", form.errors)\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..241e625 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -7,6 +8,8 @@ from django.utils.timesince import timesince, timeuntil\n from django.utils.translation import npgettext_lazy\n \n \n+from django.test.utils import override_settings, requires_tz_support\n+\n class TimesinceTests(TestCase):\n     def setUp(self):\n         self.t = datetime.datetime(2007, 8, 14, 13, 46, 0)\n@@ -160,7 +163,29 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n-    def test_naive_datetime_with_tzinfo_attribute(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_offset_aware(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        d = timezone.make_aware(d, timezone.get_default_timezone())\n+        self.assertEqual(timesince(d, now), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=60)\n+        self.assertEqual(timesince(d, now), \"1\\xa0month, 4\\xa0weeks\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_tz_cross_year(self):\n+        now = timezone.now()\n+        future = now + datetime.timedelta(days=365)\n+        past = now - datetime.timedelta(days=366)\n+        self.assertEqual(timesince(past, now), \"1\\xa0year\")\n+        self.assertEqual(timesince(future, now), \"0\\xa0minutes\")\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n                 return None\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..d5dcd5d 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -481,7 +481,40 @@ class UtilsTests(SimpleTestCase):\n         for char in key:\n             self.assertIn(char, \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)\")\n \n-    def test_is_ignored_path_true(self):\n+    def test_subparser_error_formatting(self):\n+        from django.core.management import CommandParser\n+        import argparse\n+        class TestCommand(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(parser_class=argparse.ArgumentParser)\n+                parser_create = subparsers.add_parser(\"create\")\n+                parser_create.add_argument(\"name\")\n+\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        # Testing when subcommand 'create' is called without required 'name' argument\n+        out, err = self.run_manage([\"subparser\", \"create\"])\n+        self.maxDiff = None\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertTrue(\"manage.py subparser create: error: the following arguments are required: name\" in err_lines[1])\n+\n+    def test_subparser_arg_type_error(self):\n+        from django.core.management import CommandParser\n+        import argparse\n+        class TestCommand(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(parser_class=argparse.ArgumentParser)\n+                parser_create = subparsers.add_parser(\"create\")\n+                parser_create.add_argument(\"age\", type=int)\n+\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        # Testing invalid type provided for 'age' argument\n+        out, err = self.run_manage([\"subparser\", \"create\", \"twenty\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertTrue(\"manage.py subparser create: error: argument age: invalid int value: 'twenty'\" in err_lines[1])\n         patterns = (\n             [\"foo/bar/baz\"],\n             [\"baz\"],\n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..c2b792e 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,15 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..dad06d0 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,9 +1,12 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..adb182a 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -108,6 +108,11 @@ class BaseConstraintTests(SimpleTestCase):\n         self.assertEqual(c.get_violation_error_message(), \"custom name message\")\n \n \n+from django.core.exceptions import ValidationError\n+from django.db import models\n+from django.db.models import F, Q\n+from django.test import TestCase\n+\n class CheckConstraintTests(TestCase):\n     def test_eq(self):\n         check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n@@ -149,6 +154,37 @@ class CheckConstraintTests(TestCase):\n             ),\n         )\n \n+    def test_custom_violation_error_code(self):\n+        # Check for CheckConstraint\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"custom_check_code\"\n+        )\n+        self.assertEqual(constraint.violation_error_code, \"custom_check_code\")\n+\n+        # Validate failure raises ValidationError with the custom code\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_check_code\")\n+\n+        # UniqueConstraint\n+        unique_constraint = models.UniqueConstraint(\n+            fields=[\"name\", \"color\"],\n+            name=\"unique_product\",\n+            violation_error_code=\"custom_unique_code\"\n+        )\n+        self.assertEqual(unique_constraint.violation_error_code, \"custom_unique_code\")\n+\n+        non_unique_product = UniqueConstraintProduct(\n+            name=self.p1.name, color=self.p1.color\n+        )\n+        with self.assertRaises(ValidationError) as cm:\n+            unique_constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"custom_unique_code\")\n+\n     def test_repr(self):\n         constraint = models.CheckConstraint(\n             check=models.Q(price__gt=models.F(\"discounted_price\")),\n",
  "django__django-16569": "",
  "django__django-16595": "",
  "django__django-16612": "",
  "django__django-16642": "",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..7f937f7 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,45 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+\n+        # Original tests from the patch\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n+        # Additional tests\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name__iexact\", \"test_value\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name__startswith\", \"test\"), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..1308391 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,30 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_ordering_matches_isort_defaults(self):\n+        \"\"\"\n+        Verify that generated migration imports are sorted correctly.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Check that 'import time' is before 'from django.db ...'\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..4b9bf72 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -328,6 +328,17 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = Person\n \n+    def test_post_init_not_connected(self):\n+        \"\"\"\n+        Test that the post_init signal handler is not connected\n+        for models without width_field and height_field.\n+        \"\"\"\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..3f4bff9 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -783,8 +783,40 @@ class SystemChecksTestCase(SimpleTestCase):\n \n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n+    \n+    def test_readonly_fields_with_field_names(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"nonexistent\", \"another_nonexistent\")\n \n-    def test_readonly_method_on_model(self):\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent', which is not a callable, an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            ),\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'another_nonexistent', which is not a callable, an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_fields_with_methods_on_inline(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"nonexistent_method\"]\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent_method', which is not a callable, an attribute of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"readonly_method_on_model\",)\n \n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..ea0ca8a 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -54,7 +55,31 @@ class XorLookupsTests(TestCase):\n             [self.numbers[0]],\n         )\n \n-    def test_pk_q(self):\n+    def test_xor_parity(self):\n+        # Verify odd number of conditions: one condition matched\n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+            ^ Q(num__gte=7)\n+            ^ Q(num__gte=9)\n+        )\n+        self.assertCountEqual(\n+            qs.values_list(\"num\", flat=True),\n+            [i for i in range(10) if (i >= 1) ^ (i >= 3) ^ (i >= 5) ^ (i >= 7) ^ (i >= 9)]\n+        )\n+\n+        # Verify even number of conditions: zero or even number matched\n+        qs = Number.objects.filter(\n+            Q(num__gte=2)\n+            ^ Q(num__gte=4)\n+            ^ Q(num__gte=6)\n+            ^ Q(num__gte=8)\n+        )\n+        self.assertCountEqual(\n+            qs.values_list(\"num\", flat=True),\n+            [i for i in range(10) if (i >= 2) ^ (i >= 4) ^ (i >= 6) ^ (i >= 8)]\n+        )\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk=self.numbers[0].pk) ^ Q(pk=self.numbers[1].pk)),\n             self.numbers[:2],\n@@ -64,4 +89,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..63a26ce 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -32,7 +32,29 @@ SOME_INSTALLED_APPS_NAMES = [\n HERE = os.path.dirname(__file__)\n \n \n+from unittest.mock import patch\n+from django.test import SimpleTestCase, override_settings\n+from django.apps import apps, Apps\n+from django.contrib.admin.models import LogEntry\n+\n class AppsTests(SimpleTestCase):\n+\n+    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        \"\"\"\n+        Test that apps.clear_cache() clears all necessary caches including\n+        get_models and get_swappable_settings_name.\n+        \"\"\"\n+        # Set cache for get_swappable_settings_name\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+        \n+        # Clear caches\n+        apps.clear_cache()\n+        \n+        # Check cache sizes are zero\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_singleton_main(self):\n         \"\"\"\n         Only one main registry can exist.\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..bff8423 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -298,6 +298,41 @@ class PaginationTests(SimpleTestCase):\n             paginator.get_page(1)\n \n \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_iteration_exact_page_size(self):\n+        paginator = Paginator([1, 2, 3, 4], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3, 4]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_iteration_single_page(self):\n+        paginator = Paginator([1, 2], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2],), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_iteration_empty(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_stop_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        next(page_iterator)  # First page\n+        next(page_iterator)  # Second page\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)  # No more pages\n+\n class ModelPaginationTests(TestCase):\n     \"\"\"\n     Test pagination with Django model instances\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..9c312d8 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,34 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    \"\"\"Test that hist respects the range when density=True.\"\"\"\n+    _, bins, _ = plt.hist(np.random.rand(10), bins=\"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_without_density():\n+    \"\"\"Test that hist respects the range when density=False.\"\"\"\n+    _, bins, _ = plt.hist(np.random.rand(10), bins=\"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_fixed_bin_number():\n+    \"\"\"Test that hist works correctly with a fixed number of bins.\"\"\"\n+    _, bins, _ = plt.hist(np.random.rand(10), bins=5, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+    assert len(bins) == 6  # 5 bins require 6 edges\n+\n+def test_hist_fixed_bin_edges():\n+    \"\"\"Test that hist works correctly with specific bin edges.\"\"\"\n+    _, bins, _ = plt.hist(np.random.rand(10), bins=[0, 0.5, 1], density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+    assert len(bins) == 3  # 2 bins defined by 3 edges\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6394,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..ee6fc6a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -939,7 +939,25 @@ def test_inverted_limits():\n     plt.close()\n \n \n-@image_comparison(baseline_images=['nonfinite_limits'])\n+def test_invert_log_yscale():\n+    # Test inverting a log-scaled y-axis by setting limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    \n+    # Check that the limits have indeed inverted without errors\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close(fig)\n+\n+def test_invert_log_xscale():\n+    # Test inverting a log-scaled x-axis by setting limits\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(10, 1)\n+    \n+    # Check that the limits have indeed inverted without errors\n+    assert ax.get_xlim() == (10, 1)\n+    plt.close(fig)\n def test_nonfinite_limits():\n     x = np.arange(0., np.e, 0.01)\n     # silence divide by zero warning from log(0)\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..6d39107 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6950,6 +6950,48 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[0].plot([1, 2], [1, 2], c=color.reshape(-1))\n     axs[1].scatter([1, 2], [1, 2], c=color.reshape(-1))\n     axs[2].step([1, 2], [1, 2], c=color.reshape(-1))\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Create reference subplot without clearing\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    # Create test subplot clearing the axes before plotting\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+def test_shared_axes_correct_ticks():\n+    fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n+\n+    x = np.arange(0.0, 2 * np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # After clearing and plotting, verify that the ticks are consistent\n+    for ax in axs.flat:\n+        assert len(ax.xaxis.get_ticklocs()) == len(axs[0, 0].xaxis.get_ticklocs())\n+        assert len(ax.yaxis.get_ticklocs()) == len(axs[0, 0].yaxis.get_ticklocs())\n+\n+    fig.canvas.draw()  # Ensure the plot is updated\n+\n+    # Verify tick visibility on shared axes\n+    for i, ax in enumerate(axs.flat):\n+        if i in [0, 1]:  # Top row should not have x-tick labels\n+            assert not ax.xaxis.get_major_ticks()[0].label1.get_visible()\n+        if i in [0, 2]:  # Left column should not have y-tick labels\n+            assert not ax.yaxis.get_major_ticks()[0].label1.get_visible()\n     axs[3].hist(np.arange(10), color=color.reshape(-1))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape(-1))\n     # plot with 2D-color:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..4592b88 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -919,6 +919,54 @@ def test_proportional_colorbars():\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import from_levels_and_colors\n+import matplotlib as mpl\n+from matplotlib.colorbar import Colorbar\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, res\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, res):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                    drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), res))\n+\n+def test_colorbar_drawedges_with_extend_both():\n+    # Test case for the specific issue of drawedges=True with extend='both'\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(10)\n+    colors = cmap(np.linspace(100, 255, len(bounds) + 1).astype(int))\n+    cmap, norm = from_levels_and_colors(bounds, colors, extend='both')\n+\n+    fig, ax = plt.subplots(figsize=(5, 1))\n+    colorbar = mpl.colorbar.ColorbarBase(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+    \n+    # Check the dividers to ensure edges are drawn correctly\n+    dividers = colorbar.dividers.get_segments()\n+    expected_segments_count = len(bounds) + 1  # One more than the number of bounds\n+    assert len(dividers) == expected_segments_count, f\"Expected {expected_segments_count} divider segments, got {len(dividers)}\"\n+\n+    # Optionally, inspect the positions of the dividers\n+    for segment in dividers:\n+        assert len(segment) == 2, \"Each segment should have start and end points\"\n+\n def test_negative_boundarynorm():\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..e8cc4e5 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -495,6 +495,28 @@ def test_keymaps():\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+import pytest\n+\n+def test_no_figures_cleared_by_get_backend_with_rc_context():\n+    \"\"\"Test that get_backend does not clear figures from Gcf when using rc_context.\"\"\"\n+    # Ensure no figures exist initially\n+    plt.close('all')\n+\n+    # Create a figure within rc_context\n+    with rc_context():\n+        fig = plt.figure()\n+\n+    # Capture the state of figures before calling get_backend\n+    before = f\"{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}\"\n+\n+    # Call get_backend and capture the state again\n+    get_backend()\n+    after = f\"{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}\"\n+\n+    # The states should be identical\n+    assert before == after, f\"Figures changed from {before} to {after} after get_backend call\"\n \n def test_rcparams_reset_after_fail():\n     # There was previously a bug that meant that if rc_context failed and\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..f0bfea0 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,6 +15,18 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_false(fig_test, fig_ref):\n+    # fig_test has the axes invisible\n+    ax = fig_test.add_subplot(111, projection='3d')\n+    ax.scatter([1], [1], [1], c='b')\n+    ax.set_visible(False)\n+\n+    # fig_ref has the axes visible (default behavior for comparison)\n+    ax2 = fig_ref.add_subplot(111, projection='3d')\n+    ax2.scatter([1], [1], [1], c='b')\n \n \n mpl3d_image_comparison = functools.partial(\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..dccdc72 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,8 +148,25 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+from matplotlib.patches import Rectangle\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_with_patch_objects(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    # References with expected behavior using Line2D\n+    ax_ref.plot([0, 1], [0, 1], ls=(0, (10, 10)), color='b', linewidth=4)\n+    ax_ref.plot([0, 1], [0, 1], ls=(10, (10, 10)), color='r', linewidth=4)\n+\n+    # Patch objects that should mimic the expected Line2D behavior\n+    rect_test1 = Rectangle((0.1, 0.1), 0.7, 0.3, linewidth=4, edgecolor='b', linestyle=(0, (10, 10)))\n+    rect_test2 = Rectangle((0.1, 0.1), 0.7, 0.3, linewidth=4, edgecolor='r', linestyle=(10, (10, 10)))\n \n-def test_negative_rect():\n+    ax_test.add_patch(rect_test1)\n+    ax_test.add_patch(rect_test2)\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n     pos_vertices = Rectangle((-3, -2), 3, 2).get_verts()[:-1]\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..e478110 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,28 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-\n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+def test_stackplot_color_cycler():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n+    \n+    # Test data\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+\n+    # Plot a line using color cycle C0\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    # Add a rectangle with color cycle C1\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    # Attempt stackplot with color cycle C2, C3, C4\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+\n+    # Verify colors are assigned correctly and no error is raised\n+    line_color = ax.lines[0].get_color()\n+    patch_color = ax.patches[0].get_facecolor()\n+    # Check that the stackplot does not change the color cycle of the axes\n+    assert line_color == plt.rcParams['axes.prop_cycle'].by_key()['color'][0], \"Line color does not match cycle\"\n+    assert patch_color == plt.rcParams['axes.prop_cycle'].by_key()['color'][1], \"Patch color does not match cycle\"\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..7793bc4 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,30 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.int32, np.float16, float])\n+def test_index_dtype_no_warnings(dtype):\n+    \"\"\"\n+    Test that using different data types for indexing a colormap does not\n+    raise deprecation warnings related to integer conversion of out-of-bound\n+    values.\n+    \"\"\"\n+    cm = plt.get_cmap(\"viridis\")\n+\n+    # Use try-except to capture warnings\n+    with pytest.warns(None) as record:\n+        cm(dtype(0))  # Test with valid input\n+        cm(dtype(-1))  # Test with out-of-bound negative input\n+        cm(dtype(300))  # Test with out-of-bound large positive input\n+\n+    # Assert no warnings were raised\n+    assert not record, \"Deprecation warnings were raised unexpectedly.\"\n+\n+import numpy as np\n+import pytest\n+from matplotlib import colors as mcolors\n+from matplotlib import pyplot as plt\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..91edf38 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -622,8 +622,29 @@ class TestSpectral:\n         # these should not be almost equal\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n+    def test_psd_window_flattop(self):\n+        if self.NFFT_density is None:\n+            return \n+        # flattop window, known for having negative values\n+        from scipy import signal\n+        win = signal.windows.flattop(self.NFFT_density_real)\n \n-    def test_psd_window_hanning_detrend_linear(self):\n+        spec, fsp = mlab.psd(x=self.y,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=win,\n+                             scale_by_freq=False)\n+        spec_a, fsp_a = mlab.psd(x=self.y,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=win)\n+        assert_allclose(spec * win.sum()**2,\n+                        spec_a * self.Fs * (win**2).sum(),\n+                        atol=1e-08)\n         if self.NFFT_density is None:\n             return\n         ydata = np.arange(self.NFFT_density)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..8740489 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,9 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n@@ -7825,7 +7828,30 @@ def test_relative_ticklabel_sizes(size):\n             assert tick.label1.get_size() == axis._get_tick_label_size(name)\n \n \n-def test_multiplot_autoscale():\n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])  # Force offset text to appear\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])  # Force offset text to appear\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])  # Force offset text to appear\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])  # Force offset text to appear\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n     fig = plt.figure()\n     ax1, ax2 = fig.subplots(2, 1, sharex='all')\n     ax1.scatter([1, 2, 3, 4], [2, 3, 2, 3])\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..dd66db6 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,33 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n-\n @mpl.style.context(\"default\")\n+def test_pickle_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [2, 1, 3], label=\"Line\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    assert \"FigureCanvasAgg\" not in [\n+        arg for op, arg, pos in pickletools.genops(pkl)\n+    ]\n+\n+    loaded = pickle.loads(pkl)\n+    plt.close(loaded)\n+\n+def test_pickle_with_draggable_annotation():\n+    fig, ax = plt.subplots()\n+    ann = ax.annotate(\"Test\", xy=(0.5, 0.5))\n+    ann.draggable(True)\n+\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    assert \"FigureCanvasAgg\" not in [\n+        arg for op, arg, pos in pickletools.genops(pkl)\n+    ]\n+\n+    loaded = pickle.loads(pkl)\n+    plt.close(loaded)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..3ad8ad3 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -90,6 +90,38 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n+def test_pickle_with_aligned_labels():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n+\n+    # Recreate the scenario from the issue\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    buffer = BytesIO()\n+    try:\n+        pickle.dump(fig, buffer, pickle.HIGHEST_PROTOCOL)\n+        print(\"Pickling successful\")\n+    except TypeError as e:\n+        print(f\"Pickling failed with error: {e}\")\n+    finally:\n+        plt.close(fig)\n+\n+\n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..75f6a1a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -990,9 +990,83 @@ def test_hexbin_linear():\n     fig, ax = plt.subplots()\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n+from matplotlib.testing.decorators import check_figures_equal\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_c_parameter(fig_test, fig_ref):\n+    # Set up the data points\n+    datapoints = [\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    # Plot without the C parameter\n+    ax_ref = fig_ref.subplots()\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")\n+\n+    # Plot with the C parameter\n+    ax_test = fig_test.subplots()\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n \n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_greater_than_1(fig_test, fig_ref):\n+    # Set up additional data points\n+    datapoints = [\n+        (1, 1),\n+        (1, 1),\n+        (5, 5),\n+        (5, 5),\n+        (5, 5),\n+        (5, 5),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [0, 6, 0, 6]\n+    gridsize = (6, 6)\n \n-def test_hexbin_log_clim():\n+    # Plot without the C parameter and mincnt=3\n+    ax_ref = fig_ref.subplots()\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=3,\n+    )\n+    ax_ref.set_facecolor(\"red\")\n+\n+    # Plot with the C parameter and mincnt=3\n+    ax_test = fig_test.subplots()\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=3,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"red\")\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..56dc1f7 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -661,7 +661,29 @@ class TestPlotting:\n         Plot().plot()\n         assert m.n_splits == 0\n \n-    def test_single_split_single_layer(self, long_df):\n+    def test_nominal_x_axis_tweaks_grid_behavior(self):\n+        # Check grid behavior when using Nominal scale on x-axis\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert not any(x.get_visible() for x in ax1.xaxis.get_gridlines())  # grid should be invisible\n+\n+    def test_nominal_y_axis_tweaks_grid_behavior(self):\n+        # Check grid behavior when using Nominal scale on y-axis\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert not any(y.get_visible() for y in ax1.yaxis.get_gridlines())  # grid should be invisible\n+\n+    def test_nominal_x_axis_margin_logic(self):\n+        # Test for axis margin logic for x-axis\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_xlim() == (-.5, 2.5)  # Check for margins\n+\n+    def test_nominal_y_axis_inversion(self):\n+        # Test for correct axis inversion for y-axis\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_ylim() == (2.5, -.5)  # Check for inversion\n \n         m = MockMark()\n         p = Plot(long_df, x=\"f\", y=\"z\").add(m).plot()\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..09255a0 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,24 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import flask\n+import pytest\n+\n+def test_empty_name_not_allowed(app, client):\n+    # Original test to ensure empty string raises ValueError\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_none_name_not_allowed(app, client):\n+    # New test to ensure None as a name raises ValueError\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(None, __name__)\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    # New test to ensure whitespace name raises ValueError\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"    \", __name__)\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..db2c46d 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -12,6 +12,46 @@ This module implements the Requests API.\n \"\"\"\n \n from . import sessions\n+import requests\n+import unittest\n+from requests.exceptions import RequestException\n+\n+class TestRequests(unittest.TestCase):\n+    \n+    def test_unicode_method_name(self):\n+        files = {'file': open('test_requests.py', 'rb')}\n+        try:\n+            r = requests.request(method=u'POST', url='http://httpbin.org/post', files=files)\n+            self.assertEqual(r.status_code, 200)\n+        finally:\n+            files['file'].close()\n+    \n+    def test_string_method_name(self):\n+        files = {'file': open('test_requests.py', 'rb')}\n+        try:\n+            r = requests.request(method='POST', url='http://httpbin.org/post', files=files)\n+            self.assertEqual(r.status_code, 200)\n+        finally:\n+            files['file'].close()\n+    \n+    def test_invalid_unicode_method_name(self):\n+        files = {'file': open('test_requests.py', 'rb')}\n+        try:\n+            with self.assertRaises(RequestException):\n+                requests.request(method=u'INVALID', url='http://httpbin.org/post', files=files)\n+        finally:\n+            files['file'].close()\n+            \n+    def test_empty_method_name(self):\n+        files = {'file': open('test_requests.py', 'rb')}\n+        try:\n+            with self.assertRaises(RequestException):\n+                requests.request(method=u'', url='http://httpbin.org/post', files=files)\n+        finally:\n+            files['file'].close()\n+\n+if __name__ == '__main__':\n+    unittest.main()\n \n \n def request(method, url, **kwargs):\n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..c3b8270 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,11 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example'),\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://-example.com'),\n+            (InvalidURL, 'http://example-.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..677c821 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,30 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+import numpy as np\n+import xarray as xr\n+\n+def test_variable_setitem_with_object_having_values():\n+    # Creating a DataArray with dtype 'object'\n+    good_indexed = xr.DataArray([None], dims=[\"dim_0\"], dtype=object)\n+    bad_indexed = xr.DataArray([None], dims=[\"dim_0\"], dtype=object)\n+\n+    # Custom class with a 'values' property\n+    class HasValues:\n+        values = 5\n+\n+    # Assigning a set to one of the indices\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+\n+    # This should not coerce 'HasValues' into its 'values' attribute\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Verify that the assignment does not coerce the object into its 'values'\n+    assert isinstance(good_indexed.values[0], set), \"Expected a set in good_indexed\"\n+    assert isinstance(bad_indexed.values[0], HasValues), \"Expected HasValues instance in bad_indexed\"\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    # Verify the value is unchanged\n+    assert bad_indexed.values[0].values == 5\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..92b6d48 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2107,7 +2107,16 @@ class TestDataset:\n \n         assert_identical(ds.coords['a'], expected_orig)\n \n-    def test_copy_with_data_errors(self):\n+    @pytest.mark.parametrize('deep', [True, False])\n+    def test_deep_copy_preserves_unicode_dtype(self, deep):\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])})\n+        \n+        copied = ds.copy(deep=deep)\n+        \n+        assert ds.coords['x'].dtype.str == \"<U3\"\n+        assert copied.coords['x'].dtype.str == \"<U3\" if not deep else ds.coords['x'].dtype.str\n         orig = create_test_data()\n         new_var1 = np.arange(orig['var1'].size).reshape(orig['var1'].shape)\n         with raises_regex(ValueError, 'Data must be dict-like'):\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..c2632c7 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,6 +574,43 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n+    def test_combine_non_monotonic_identical_coords(self):\n+        # This test checks if combine_by_coords works with non-monotonic identical coordinates\n+        yCoord = ['a', 'c', 'b']\n+        \n+        ds1 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(3, 3))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3],\n+                y=yCoord\n+            )\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(4, 3))\n+            ),\n+            coords=dict(\n+                x=[4, 5, 6, 7],\n+                y=yCoord\n+            )\n+        )\n+\n+        expected = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.concatenate((ds1.data.values, ds2.data.values), axis=0))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3, 4, 5, 6, 7],\n+                y=yCoord\n+            )\n+        )\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n     def test_infer_order_from_coords(self):\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..7fcee8d 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,23 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n-\n-    def test_reduce_keep_attrs(self):\n+    \n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+        from collections import OrderedDict\n+        \n+        # Create a DataArray with attributes\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K', 'description': 'test array'})\n+        \n+        # Compute the quantile and check if attributes are kept\n+        out = da.quantile(0.9, dim='x', keep_attrs=True)\n+        expected_attrs = OrderedDict([('units', 'K'), ('description', 'test array')])\n+        assert out.attrs == expected_attrs\n+\n+        # Compute the quantile without keeping attributes\n+        out_no_attrs = da.quantile(0.9, dim='x', keep_attrs=False)\n+        assert out_no_attrs.attrs == OrderedDict()\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..4292ef4 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,21 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Test merging a DataArray into a Dataset\n+        expected = xr.merge([ds, da])\n+        result = ds.merge(da)\n+        assert_identical(result, expected)\n+\n+        # Edge case: Merging empty DataArray\n+        da_empty = xr.DataArray(name=\"c\")\n+        expected_empty = xr.merge([ds, da_empty])\n+        result_empty = ds.merge(da_empty)\n+        assert_identical(result_empty, expected_empty)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..5bc8aff 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -594,6 +594,18 @@ def test_min_count(dim_num, dtype, dask, func, aggdim):\n     assert_allclose(actual, expected)\n     assert_dask_array(actual, dask)\n \n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n+@pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_multiple_dims(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+    min_count = 3\n+    actual = getattr(da, func)(dim=[\"x\", \"y\", \"z\"], skipna=True, min_count=min_count)\n+    expected = series_reduce(da, func, skipna=True, dim=[\"x\", \"y\", \"z\"], min_count=min_count)\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n \n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n def test_min_count_dataset(func):\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..51b8c8a 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,24 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"b\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"c\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Assert initial values\n+        assert ds1.attrs[\"a\"] == \"b\"\n+        assert ds2.attrs[\"a\"] == \"c\"\n+        assert ds3.attrs[\"a\"] == \"b\"\n+\n+        # Modify merged dataset attributes\n+        ds3.attrs[\"a\"] = \"d\"\n+\n+        # Assert ds1 and ds2 are unchanged\n+        assert ds1.attrs[\"a\"] == \"b\"\n+        assert ds2.attrs[\"a\"] == \"c\"\n+        # Assert ds3 is updated\n+        assert ds3.attrs[\"a\"] == \"d\"\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..9c024c2 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,29 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+def test_where_attrs_different_dtypes() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1.0, 1.0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0.0, 0.0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1.0, 0.0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+def test_where_no_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\")\n+    x = xr.DataArray([1, 1], dims=\"x\")\n+    y = xr.DataArray([0, 0], dims=\"x\")\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..6948c4a 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,6 +13,7 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+import numpy as np\n \n def test_CFMaskCoder_decode():\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..678e660 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1919,6 +1919,28 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+    # ensure keep_attrs can handle scalar values with condition being a DataArray\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # when where is used with scalar values for x and y\n+    cond_scalar = xr.DataArray(True)\n+    actual_scalar = xr.where(cond_scalar, 1, 0, keep_attrs=True)\n+    expected_scalar = xr.DataArray(1)\n+    assert_identical(expected_scalar, actual_scalar)\n+\n+    cond_scalar_false = xr.DataArray(False)\n+    actual_scalar_false = xr.where(cond_scalar_false, 1, 0, keep_attrs=True)\n+    expected_scalar_false = xr.DataArray(0)\n+    assert_identical(expected_scalar_false, actual_scalar_false)\n+\n+    # ensure keep_attrs can handle scalar values with x being a DataArray\n+    x_dataarray = xr.DataArray([1, 2], dims=\"x\", attrs={\"source\": \"xarray\"})\n+    actual = xr.where(cond, x_dataarray, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"source\": \"xarray\"})\n+    assert_identical(expected, actual)\n+\n \n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n@@ -1928,6 +1950,28 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+    # ensure keep_attrs can handle scalar values with condition being a DataArray\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # when where is used with scalar values for x and y\n+    cond_scalar = xr.DataArray(True)\n+    actual_scalar = xr.where(cond_scalar, 1, 0, keep_attrs=True)\n+    expected_scalar = xr.DataArray(1)\n+    assert_identical(expected_scalar, actual_scalar)\n+\n+    cond_scalar_false = xr.DataArray(False)\n+    actual_scalar_false = xr.where(cond_scalar_false, 1, 0, keep_attrs=True)\n+    expected_scalar_false = xr.DataArray(0)\n+    assert_identical(expected_scalar_false, actual_scalar_false)\n+\n+    # ensure keep_attrs can handle scalar values with x being a DataArray\n+    x_dataarray = xr.DataArray([1, 2], dims=\"x\", attrs={\"source\": \"xarray\"})\n+    actual = xr.where(cond, x_dataarray, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"source\": \"xarray\"})\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..2fd0ec2 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,7 +221,14 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n-    def test_repr(self) -> None:\n+    @pytest.mark.skipif(not has_zarr, reason='requires zarr')\n+    def test_zarr_chunks_access(self) -> None:\n+        import xarray as xr\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = xr.open_dataset(url, engine='zarr')\n+        assert set(ds.chunks.keys()) == set(ds.dims)\n+        for dim, chunk in ds.chunks.items():\n+            assert len(chunk) > 0\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..49975c4 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -50,6 +50,20 @@ class TestDataArrayRolling:\n                 )\n \n     @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [3])\n+    def test_rolling_iter_center(self, da, center: bool, size: int) -> None:\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        result_iter = [window.mean(\"time\").item() for label, window in rolling_obj]\n+\n+        expected_result = rolling_obj_mean.values\n+\n+        np.testing.assert_array_equal(\n+            np.array(result_iter),\n+            expected_result\n+        )\n     def test_rolling_repr(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..d68b2a6 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -93,10 +93,21 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n+def test_short_verbose_option(capsys: CaptureFixture) -> None:\n+    \"\"\"Verify the -v option does not expect an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+    assert \"Warning\" not in output.err\n \n-def test_unknown_py_version(capsys: CaptureFixture) -> None:\n+def test_long_verbose_option(capsys: CaptureFixture) -> None:\n+    \"\"\"Verify the --verbose option behaves as expected.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+    assert \"Warning\" not in output.err\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex d5ccd91..2e08e80 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -863,8 +863,47 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         # computed for that module\n         assert module_stats[\"statement\"] == linter2.stats.statement\n \n+import os\n+from pylint.lint import Run\n+\n+def test_recursive_ignore_with_ignore_option():\n+    \"\"\"Tests that --ignore option works correctly in recursive mode.\"\"\"\n+    run = Run(\n+        [\"--recursive=y\", \"--ignore=.a\", \".\"],\n+        exit=False,\n+    )\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([\".\"]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n+    ignored_file = os.path.abspath('.a/foo.py')\n+    assert ignored_file not in linted_file_paths\n \n-def test_import_sibling_module_from_namespace(initialized_linter: PyLinter) -> None:\n+def test_recursive_ignore_with_ignore_paths_option():\n+    \"\"\"Tests that --ignore-paths option works correctly in recursive mode.\"\"\"\n+    run = Run(\n+        [\"--recursive=y\", \"--ignore-paths=.a\", \".\"],\n+        exit=False,\n+    )\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([\".\"]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n+    ignored_file = os.path.abspath('.a/foo.py')\n+    assert ignored_file not in linted_file_paths\n+\n+def test_recursive_ignore_with_ignore_patterns_option():\n+    \"\"\"Tests that --ignore-patterns option works correctly in recursive mode.\"\"\"\n+    run = Run(\n+        [\"--recursive=y\", \"--ignore-patterns=^\\\\.a\", \".\"],\n+        exit=False,\n+    )\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([\".\"]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n+    ignored_file = os.path.abspath('.a/foo.py')\n+    assert ignored_file not in linted_file_paths\n     \"\"\"If the parent directory above `namespace` is on sys.path, ensure that\n     modules under `namespace` can import each other without raising `import-error`.\"\"\"\n     linter = initialized_linter\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..2b504d8 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,8 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -172,7 +174,31 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n-def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n+def test_caplog_clear_and_get_records_consistency(caplog):\n+    \"\"\"\n+    Test to ensure that caplog.get_records(\"call\") and caplog.records\n+    behave consistently after caplog.clear() is called.\n+    \"\"\"\n+    logger = logging.getLogger()\n+\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Initially, they should be the same\n+    verify_consistency()\n+\n+    # Log something and check consistency again\n+    logger.warning(\"A warning\")\n+    verify_consistency()\n+\n+    # Clear caplog and check that records are cleared and consistent\n+    caplog.clear()\n+    verify_consistency()\n+\n+    # Log again and ensure the consistency holds\n+    logger.info(\"Information after clear\")\n+    verify_consistency()\n+    assert [record.message for record in caplog.get_records(\"call\")] == [\"Information after clear\"]\n     pytester.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..e5ddb30 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1274,6 +1274,33 @@ def test_pdb_teardown_skipped(\n     assert tracked == []\n \n \n+def test_pdb_teardown_not_called_for_skipped_classes(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"Ensure setUp and tearDown are not called for classes skipped using unittest.skip when --pdb is used.\"\"\"\n+    tracked: List[str] = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skip(\"skipped class\")\n+        class MyTestCase(unittest.TestCase):\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_one(self):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n+\n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n \n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..2f7a568 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1052,7 +1052,23 @@ class TestFDCapture(object):\n             pytest.raises(AttributeError, cap.suspend)\n \n \n-@contextlib.contextmanager\n+# Additional imports for our new test cases\n+import sys\n+import pytest\n+from _pytest.capture import EncodedFile\n+\n+@pytest.mark.parametrize(\"mode\", [\"r\", \"w\", \"a\"])\n+def test_encoded_file_mode_does_not_include_b(mode):\n+    # Create a mock buffer\n+    class MockBuffer:\n+        def __init__(self):\n+            self.mode = mode\n+        def write(self, obj):\n+            pass  # mock write method\n+    buffer = MockBuffer()\n+    encoded_file = EncodedFile(buffer, \"utf-8\")\n+    # Verify that the mode of encoded_file does not wrongly include 'b'\n+    assert \"b\" not in encoded_file.buffer.mode\n def saved_fd(fd):\n     new_fd = os.dup(fd)\n     try:\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..cbc6d1c 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -6,13 +6,28 @@ import textwrap\n import py\n \n import pytest\n+import numpy as np\n+from unittest.mock import patch\n from _pytest.main import _in_venv\n from _pytest.main import ExitCode\n from _pytest.main import Session\n \n \n class TestCollector:\n-    def test_collect_versus_item(self):\n+    def test_valueerror_with_numpy_array_patch(self, testdir):\n+        \"\"\"Test to check if ValueError is raised when patching with a numpy array.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            from unittest.mock import patch\n+            import numpy as np\n+\n+            @patch('dummy.FOO', new=np.array([-5.5, 3.0]))\n+            def test_dummy():\n+                pass\n+            \"\"\"\n+        )\n+        result = testdir.inline_run()\n+        result.assertoutcome(passed=1)\n         from pytest import Collector, Item\n \n         assert not issubclass(Collector, Item)\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..47d24c8 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -119,15 +119,39 @@ class TestPaste(object):\n \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n-\n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n+        # Ensure the lexer is set to \"text\"\n         assert url == \"https://bpaste.net\"\n-        assert \"lexer=%s\" % lexer in data.decode()\n+        assert \"lexer=text\" in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n+    def test_create_new_paste_with_special_content(self, pastebin, mocked_urlopen):\n+        # Test with special content that previously caused HTTP 400\n+        special_content = b\"This is a test content with special characters !@#$%^&*()\"\n+        result = pastebin.create_new_paste(special_content)\n+        assert result == \"https://bpaste.net/show/specialcontenthash\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n+    def test_create_new_paste_empty_content(self, pastebin, mocked_urlopen):\n+        # Test with empty content to ensure it handles it gracefully\n+        result = pastebin.create_new_paste(b\"\")\n+        assert result == \"https://bpaste.net/show/emptycontenthash\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..64b5c3f 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -702,6 +702,26 @@ class Test_genitems:\n         assert items[1].name == \"testmethod_one\"\n         assert items[2].name == \"testmethod_one\"\n \n+        # Original Test Patch verification\n+        p = testdir.makepyfile(\n+            '''\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(arg0):\n+                pass\n+            \n+            class TestY:\n+                @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+                def testmethod_two(self, arg0):\n+                    pass\n+            '''\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 4\n+        assert items[3].name == \"testmethod_two[.[]\"\n+        assert items[3].getmodpath() == \"TestY.testmethod_two[.[]\"\n+\n         # let's also test getmodpath here\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..4e3cf4e 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n@@ -397,6 +399,29 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_dynamic_xfail_no_run(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..8007c4b 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -514,6 +514,17 @@ class TestCaptureFixture:\n         )\n         reprec.assertoutcome(passed=1)\n \n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n+\n+    def test_cafd_includes_carriage_return(self, capfd):\n+        print('Greetings from DOS', end='\\r')\n+        out, err = capfd.readouterr()\n+        assert out.endswith('\\r')\n+\n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..f9d3432 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -27,7 +28,51 @@ def test_change_level(caplog):\n     assert \"CRITICAL\" in caplog.text\n \n \n-def test_change_level_undo(testdir):\n+def test_change_level_undos_handler_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\n+\n+    Issue #7569. Tests the handler level specifically.\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n+def test_logger_levels_reset(testdir: Testdir) -> None:\n+    \"\"\"Verify that logger levels are reset after each test, even for sub-loggers.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test4(caplog):\n+            logger = logging.getLogger('mylogger')\n+            assert logger.level == logging.NOTSET\n+            caplog.set_level(logging.WARNING, logger='mylogger')\n+            assert logger.level == logging.WARNING\n+\n+        def test5(caplog):\n+            logger = logging.getLogger('mylogger')\n+            assert logger.level == logging.NOTSET\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n     \"\"\"Ensure that 'set_level' is undone after the end of the test\"\"\"\n     testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..4f1adcf 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Pytester, Testdir\n \n \n class TestCollector:\n@@ -1178,6 +1179,39 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_symlink_to_empty_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked empty directory is followed and should not cause errors.\"\"\"\n+    empty_dir = pytester.mkdir(\"empty_dir\")\n+    pytester.path.joinpath(\"symlink_empty\").symlink_to(empty_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=0)\n+\n+def test_symlink_to_non_existing_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlink to a non-existing directory should be handled gracefully.\"\"\"\n+    non_existent_target = pytester.path.joinpath(\"non_existent\")\n+    pytester.path.joinpath(\"broken_symlink\").symlink_to(non_existent_target)\n+    result = pytester.runpytest()\n+    result.stdout.fnmatch_lines([\"*Error: could not find*\"])\n+    assert result.ret != 0\n+\n+def test_nested_symlink_dirs(pytester: Pytester) -> None:\n+    \"\"\"Symlinks within symlinked directories should be followed.\"\"\"\n+    outer_dir = pytester.mkdir(\"outer_dir\")\n+    inner_dir = outer_dir.mkdir(\"inner_dir\")\n+    inner_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"outer_symlink\").symlink_to(outer_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..eb687b4 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -302,6 +302,9 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec.assertoutcome(passed=3)\n \n \n+import pytest\n+from _pytest.pytester import Pytester\n+\n def test_setup_class(pytester: Pytester) -> None:\n     testpath = pytester.makepyfile(\n         \"\"\"\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..75d95e7 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,31 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+import numpy as np\n+from sklearn.utils.testing import assert_equal\n+from sklearn.linear_model import RidgeClassifierCV\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n \n-def test_ridgecv_store_cv_values():\n+    n_samples = 8\n+    n_features = 5\n+    X = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    y = rng.choice([1, -1], n_samples)\n+    r.fit(X, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_alphas))\n+\n+    # with len(y.shape) == 2\n+    y_multiclass = (np.arange(n_samples) % 3).astype(float)\n+    r.fit(X, y_multiclass)\n+    assert_equal(r.cv_values_.shape, (n_samples, 3, n_alphas))\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-10844": "",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..873fa65 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,27 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+def test_countvectorizer_with_custom_vocabulary():\n+    # Custom vocabulary provided\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocab)\n+    \n+    # Ensure get_feature_names does not raise NotFittedError and returns correct feature names\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(feature_names, vocab)\n+\n+    # Transform should work without fitting because vocabulary is given\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = cv.transform(corpus)\n+    \n+    # Check the shape of the output matrix\n+    assert_equal(X.shape, (4, 9))\n+    assert_true(hasattr(cv, \"vocabulary_\"))  # vocabulary_ should now be set\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..109c565 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -18,6 +18,10 @@ from sklearn.utils.testing import assert_greater\n from sklearn.utils.testing import assert_raise_message\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_true\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.utils._testing import assert_array_almost_equal\n+from sklearn.datasets import make_classification\n+from sklearn.linear_model import _log_reg_scoring_path\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n@@ -491,8 +495,32 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..f43e42d 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,7 +167,25 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n-def test_repr():\n+from sklearn.base import clone\n+from sklearn.utils.estimator_checks import check_estimator\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than\n+    # instances\n+    from sklearn.preprocessing import StandardScaler\n+    # Creating a custom estimator for testing\n+    class MyEstimator:\n+        def __init__(self, empty):\n+            self.empty = empty\n+\n+        def get_params(self, deep=False):\n+            return {'empty': self.empty}\n+\n+    clf = MyEstimator(empty=StandardScaler)  # Parameter is a class, not an instance\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n     repr(my_estimator)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..45abb15 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -19,6 +19,7 @@ from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import LassoLarsIC\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..e1af569 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -494,7 +494,33 @@ def test_shuffle_stratifiedkfold():\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+def test_shuffle_stratifiedkfold_different_random_states():\n+    # Verifies that different random states result in different splits\n+    X = np.arange(30)\n+    y = [0] * 15 + [1] * 15\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=43)\n+    \n+    # Collect test indices for different random states\n+    test_indices_1 = [test_idx for _, test_idx in kf1.split(X, y)]\n+    test_indices_2 = [test_idx for _, test_idx in kf2.split(X, y)]\n+    \n+    # Ensure that the test indices are different for different random states\n+    assert test_indices_1 != test_indices_2\n+\n+def test_shuffle_stratifiedkfold_consistency_same_random_states():\n+    # Verifies that the same random state results in consistent splits\n+    X = np.arange(50)\n+    y = [0] * 25 + [1] * 25\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=123)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=123)\n+    \n+    # Collect test indices for the same random state\n+    test_indices_1 = [test_idx for _, test_idx in kf1.split(X, y)]\n+    test_indices_2 = [test_idx for _, test_idx in kf2.split(X, y)]\n+    \n+    # Ensure that the test indices are the same for the same random state\n+    assert test_indices_1 == test_indices_2\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..1bd5e56 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 4594f40..e1dbdfa 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -131,6 +131,10 @@ class Pipeline(_BaseComposition):\n         self._validate_steps()\n         self.memory = memory\n \n+    def __len__(self):\n+        \"\"\"Return the number of steps in the pipeline.\"\"\"\n+        return len(self.steps)\n+\n     def get_params(self, deep=True):\n         \"\"\"Get parameters for this estimator.\n \n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..7ed0c38 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -320,6 +320,31 @@ def test_export_text_errors():\n     assert_raise_message(ValueError,\n                          \"feature_names must contain 2 elements, got 1\",\n                          export_text, clf, feature_names=['a'])\n+\n+def test_export_text_single_feature():\n+    # Test exporting a tree with only one feature\n+    clf = DecisionTreeClassifier(random_state=0)\n+    X_single_feature = [[2], [3], [5], [7], [11], [13]]\n+    y_single_feature = [0, 0, 1, 1, 2, 2]\n+    clf.fit(X_single_feature, y_single_feature)\n+\n+    expected_report = dedent(\"\"\"\n+    |--- feature_0 <= 4.00\n+    |   |--- class: 0\n+    |--- feature_0 >  4.00\n+    |   |--- class: 1.5\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf, decimals=2) == expected_report\n+\n+    expected_report_with_feature_name = dedent(\"\"\"\n+    |--- single_feature <= 4.00\n+    |   |--- class: 0\n+    |--- single_feature >  4.00\n+    |   |--- class: 1.5\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf, feature_names=['single_feature'], decimals=2) == expected_report_with_feature_name\n     assert_raise_message(ValueError,\n                          \"decimals must be >= 0, given -1\",\n                          export_text, clf, decimals=-1)\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..53d3cce 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,7 +1532,8 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))  # Adding penalty as new parameter\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))  # Adding auto as an option for multi_class\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..752c0c4 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -13,6 +13,14 @@ def test_get_sys_info():\n \n \n def test_get_deps_info():\n+    # Check if joblib is included for sklearn versions > 0.20\n+    import sklearn\n+    from packaging import version\n+\n+    deps_info = _get_deps_info()\n+\n+    if version.parse(sklearn.__version__) > version.parse(\"0.20\"):\n+        assert 'joblib' in deps_info\n     deps_info = _get_deps_info()\n \n     assert 'pip' in deps_info\n@@ -26,8 +34,17 @@ def test_get_deps_info():\n \n \n def test_show_versions_with_blas(capsys):\n+    # Check if joblib appears in the output of show_versions for sklearn versions > 0.20\n+    import sklearn\n+    from packaging import version\n+\n+    show_versions()\n+    out, err = capsys.readouterr()\n+\n+    if version.parse(sklearn.__version__) > version.parse(\"0.20\"):\n+        assert 'joblib' in out\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..9df511a 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -409,9 +409,41 @@ def test_infinite_values_missing_values():\n     X = np.asarray([-np.inf, 0, 1, np.inf, np.nan]).reshape(-1, 1)\n     y_isnan = np.isnan(X.ravel())\n     y_isinf = X.ravel() == np.inf\n+from sklearn.experimental import enable_hist_gradient_boosting  # noqa\n+from sklearn.ensemble import HistGradientBoostingClassifier\n+import numpy as np\n+import pytest\n+\n+@pytest.mark.parametrize(\"scoring\", [None, 'loss'])\n+def test_string_target_early_stopping(scoring):\n+    # Regression test for issue where string targets cause an error in\n+    # early stopping due to mismatched types.\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt.fit(X, y)\n+\n+@pytest.mark.parametrize(\"scoring\", [None, 'accuracy'])\n+def test_string_target_with_different_scorer(scoring):\n+    # Additional test to ensure other scorers like 'accuracy' don't break\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['cat'] * 45 + ['dog'] * 35 + ['bird'] * 20, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt.fit(X, y)\n+\n+@pytest.mark.parametrize(\"n_iter_no_change\", [5, 10, 15])\n+def test_string_target_different_early_stopping(n_iter_no_change):\n+    # Test different early stopping parameters with string targets\n+    rng = np.random.RandomState(0)\n+    X = rng.randn(200, 20)\n+    y = np.array(['apple'] * 70 + ['banana'] * 60 + ['cherry'] * 70, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=n_iter_no_change, scoring='accuracy')\n+    gbrt.fit(X, y)\n \n     stump_clf = HistGradientBoostingClassifier(min_samples_leaf=1, max_iter=1,\n                                                learning_rate=1, max_depth=2)\n \n     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..d22e7f9 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,22 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+    \n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..df86466 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -92,7 +92,25 @@ def test_strip_accents():\n     expected = '\\u0627'  # simple alef: \u0627\n     assert strip_accents_unicode(a) == expected\n \n-    # mix letters accentuated and not\n+    # test already decomposed form: combining diacritic\n+    a = 'o\\u0308'  # o with diaeresis\n+    expected = 'o'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # test string with multiple combining characters\n+    a = '\\u004F\\u0301\\u0302'  # O with acute and circumflex\n+    expected = 'O'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # test combining marks by themselves\n+    a = '\\u0300\\u0301\\u0302\\u0303'  # various combining marks\n+    expected = ''\n+    assert strip_accents_unicode(a) == expected\n+\n+    # test multiple combining marks on one character\n+    a = 'o\\u0308\\u0304'  # o with diaeresis and macron\n+    expected = 'o'\n+    assert strip_accents_unicode(a) == expected\n     a = \"this is \u00e0 test\"\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..41f4b78 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,28 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n-\n-def test_get_support():\n+def test_dtype_preservation_with_selector():\n+    \"\"\"Check if the selector preserves input data types in the output DataFrame.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"sepal length (cm)\": np.float32,\n+            \"sepal width (cm)\": np.float64,\n+        }\n+    )\n+    X[\"sepal_length_binned\"] = pd.cut(X[\"sepal length (cm)\"], bins=3)\n+\n+    selector = SelectKBest(chi2, k=2).set_output(transform=\"pandas\")\n+    output = selector.fit_transform(X, y)\n+\n+    assert_array_equal(\n+        output.columns, [\"sepal length (cm)\", \"sepal width (cm)\"]\n+    )\n+    for name, dtype in output.dtypes.items():\n+        assert dtype == X.dtypes[name]\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..62afce1 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -333,9 +333,31 @@ def test_base_estimator_property_deprecated():\n     model = IsolationForest()\n     model.fit(X, y)\n \n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not 'auto'.\"\"\"\n+\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(0)\n+\n+    # Test with a DataFrame with a single feature\n+    X_single_feature = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model_single = IsolationForest(random_state=0, contamination=0.05)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model_single.fit(X_single_feature)\n+\n+    # Test with a DataFrame with multiple features\n+    X_multi_feature = pd.DataFrame(data=rng.randn(4, 3), columns=[\"a\", \"b\", \"c\"])\n+    model_multi = IsolationForest(random_state=0, contamination=0.1)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model_multi.fit(X_multi_feature)\n+\n     warn_msg = (\n         \"Attribute `base_estimator_` was deprecated in version 1.2 and \"\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..aced1ca 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.feature_selection import VarianceThreshold\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..062c71f 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -252,6 +253,52 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n \n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+\n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_indent_with_prepend(tmp_path):\n+    # Create a temporary XML file for testing\n+    xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>com.github.ekryd.sortpom</groupId>\n+        <artifactId>sortpom-maven-plugin</artifactId>\n+        <version>2.15.0</version>\n+        <configuration>\n+          <verifyFailOn>strict</verifyFailOn>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>\n+\"\"\"\n+    xml_file = tmp_path / \"test.xml\"\n+    xml_file.write_text(xml_content)\n+\n+    # Test with prepend\n+    options = {\n+        'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+        'end-at': '</plugin>',\n+        'prepend': '      <plugin>',\n+        'dedent': None\n+    }\n+\n+    reader = LiteralIncludeReader(xml_file, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+\n+    expected_content = (\n+        \"      <plugin>\\n\"\n+        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+        \"        <version>2.15.0</version>\\n\"\n+        \"        <configuration>\\n\"\n+        \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+        \"        </configuration>\\n\"\n+        \"      </plugin>\\n\"\n+    )\n+\n+    assert content == expected_content\n def test_LiteralIncludeReader_tabwidth(testroot):\n     # tab-width: 4\n     options = {'tab-width': 4, 'pyobject': 'Qux'}\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..19f07de 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1057,7 +1057,29 @@ def test_autodoc_typehints_description_with_documented_init(app):\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n-                                   'autodoc_typehints_description_target': 'documented'})\n+                                   'autodoc_typehints_description_target': 'documented',\n+                                   'autodoc_class_signature': 'merged'})\n+def test_autodoc_typehints_description_on_class(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._Square\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints._Square\\n'\n+            '\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n'\n+            '   __init__(width, height)\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **width** (*int*) --\\n'\n+            '         **height** (*int*) --\\n' == context)\n+\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_class_signature': 'merged'})\n def test_autodoc_typehints_description_with_documented_init_no_undoc(app):\n     (app.srcdir / 'index.rst').write_text(\n         '.. autoclass:: target.typehints._ClassWithDocumentedInit\\n'\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..ad8b103 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +10,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "",
  "sphinx-doc__sphinx-7757": "",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..27a48dd 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -51,8 +52,17 @@ def test_MockObject():\n     assert obj.method() == \"string\"\n     assert isinstance(obj.other_method(), SubClass)\n \n+from typing import TypeVar\n+\n+def test_mock_typing_with_generics():\n+    T = TypeVar('T')\n+\n+    class SubClassWithGeneric(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClassWithGeneric\"\"\"\n \n-def test_mock():\n+    obj_with_generic = SubClassWithGeneric()\n+    assert SubClassWithGeneric.__doc__ == \"docstring of SubClassWithGeneric\"\n+    assert isinstance(obj_with_generic, SubClassWithGeneric)\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..1d72ebf 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -164,8 +165,18 @@ class SkipMemberTest(TestCase):\n         self.assertSkip('class', '__special_doc__',\n                         SampleClass.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n-\n-    def test_class_special_undoc(self):\n+    def test_class_decorated_init_doc(self):\n+        from sphinx.testing.util import simple_decorator\n+\n+        class SampleClassWithDecoratedInit:\n+            @simple_decorator\n+            def __init__(self, param1):\n+                \"\"\"This is a decorated __init__ method\"\"\"\n+                self.param1 = param1\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n         self.assertSkip('class', '__special_undoc__',\n                         SampleClass.__special_undoc__, True,\n                         'napoleon_include_special_with_doc')\n",
  "sphinx-doc__sphinx-7985": "",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..f9bb484 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,20 @@ from test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": \"_hidden_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _hidden_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   hidden_function is a hidden docstring().',\n+        '']\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..341f740 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1287,5 +1287,34 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n \n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+from babel.messages import pofile\n+from sphinx import locale\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_customize_danish_translation(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 7842f56..5368aac 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -97,6 +97,55 @@ def test_defaults_json(app, status, warning):\n                        'https://www.google.com/image2.png',\n                        'path/to/notfound']\n                    })\n+class HttpServerThread(threading.Thread):\n+    def __init__(self, handler, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.server = http.server.HTTPServer((\"localhost\", 7777), handler)\n+\n+    def run(self):\n+        self.server.serve_forever(poll_interval=0.01)\n+\n+    def terminate(self):\n+        self.server.shutdown()\n+        self.server.server_close()\n+        self.join()\n+\n+class NotFoundErrorHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        self.send_error(404, \"Not Found\")\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_404_error(app, status, warning):\n+    server_thread = HttpServerThread(NotFoundErrorHandler, daemon=True)\n+    server_thread.start()\n+    try:\n+        app.builder.build_all()\n+    finally:\n+        server_thread.terminate()\n+    content = (app.outdir / 'output.txt').read_text()\n+    assert content == (\n+        \"index.rst:1: [broken] http://localhost:7777/#anchor: \"\n+        \"404 Client Error: Not Found \"\n+        \"for url: http://localhost:7777/\\n\"\n+    )\n+\n+class RedirectErrorHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        self.send_response(301)\n+        self.send_header('Location', 'http://localhost:7777/new-location')\n+        self.end_headers()\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_redirect_error(app, status, warning):\n+    server_thread = HttpServerThread(RedirectErrorHandler, daemon=True)\n+    server_thread.start()\n+    try:\n+        app.builder.build_all()\n+    finally:\n+        server_thread.terminate()\n+    content = (app.outdir / 'output.txt').read_text()\n+    assert \"301\" in content\n+\n def test_anchors_ignored(app, status, warning):\n     app.builder.build_all()\n \n@@ -159,4 +208,11 @@ def test_linkcheck_request_headers(app, status, warning):\n                 assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n                 assert headers[\"X-Secret\"] == \"open sesami\"\n             else:\n-                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..f4f6c77 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,8 @@ import sys\n import pytest\n \n from sphinx.testing import restructuredtext\n+import pytest\n+import sys\n \n from .test_ext_autodoc import do_autodoc\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..c49dc6d 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,9 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+import os\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n@@ -61,7 +64,13 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/cpp/' in stuff\n \n \n-@pytest.mark.sphinx(testroot='ext-viewcode-find')\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode',\n+                    confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+    \n+    # Check that module pages are not created when viewcode_enable_epub is False\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n         if modname == 'not_a_package':\n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..f1bc21e 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,14 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+\n+    # Test that the object description for a MyEnum member is rendered correctly\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..931ed7a 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -9,6 +9,7 @@\n \"\"\"\n \n import time\n+import sys\n from io import StringIO\n \n import pytest\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 6ac780b..807f8f9 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -11,6 +11,7 @@\n from typing import TYPE_CHECKING, Any, Dict\n \n from sphinx.config import Config\n+from packaging.version import parse as parse_version\n from sphinx.errors import VersionRequirementError\n from sphinx.locale import __\n from sphinx.util import logging\n@@ -51,7 +52,7 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version' or parse_version(reqversion) > parse_version(extension.version):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..af75b21 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,45 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    \n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_3d_2d():\n+    # Test with both points having three dimensions but one is a 2D point\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point3D(2, 0, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_same_dimensions():\n+    # Test with both points having three dimensions\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 6, 3)\n+    assert p1.distance(p2) == 5\n+\n+def test_distance_different_dimensions():\n+    # Test with one point in 2D and another in 3D\n+    p2 = Point2D(2, 0)\n+    p3 = Point3D(2, 0, 0)\n+    assert p2.distance(p3) == 0\n+\n+def test_distance_2d_points():\n+    # Test with both points in 2D\n+    p1 = Point2D(1, 0)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == 1\n+\n+def test_distance_3d_points():\n+    # Test with both points in 3D\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 6, 8)\n+    assert p1.distance(p2) == sqrt(50)\n+\n+from sympy import sqrt\n+from sympy.geometry import Point, Point3D, Point2D\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..c9e399f 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,29 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    assert f(f(2)).evalf() == Float(16)\n+\n+def test_evalf_recursive_composition():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    \n+    # Single level function evaluation\n+    assert f(2).evalf() == Float(4)\n+    assert g(2).evalf() == Float(4)\n+\n+    # Nested function evaluation\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    \n+    # More complex composition\n+    assert f(f(g(2))).evalf() == Float(256)\n+    assert g(g(f(2))).evalf() == Float(16)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..97e6ada 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -90,8 +90,26 @@ def test_Identity_doit():\n     assert Inn.doit() == Identity(2*n)\n     assert isinstance(Inn.doit().rows, Mul)\n \n+def test_identity_matrix_sum():\n+    from sympy import (\n+        symbols, MatrixSymbol, Identity, Sum, Symbol\n+    )\n+    # Test setup\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+\n+    # Test if sum of all elements equals `n`\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n+    # Verify using a specific example\n+    assert Sum(Sum(In[i, j], (i, 0, 2)), (j, 0, 2)).doit() == 3\n \n-def test_addition():\n+    # Check identity matrix properties\n+    assert In[0, 0] == 1\n+    assert In[0, 1] == 0\n+    assert In[1, 0] == 0\n+    assert In[1, 1] == 1\n     A = MatrixSymbol('A', n, m)\n     B = MatrixSymbol('B', n, m)\n \n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..612cacc 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -332,6 +332,18 @@ def test_args():\n     assert p._cyclic_form is None\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n+\n+    # Additional test cases for non-disjoint cycles\n+    # Identity permutation with repeated cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    # Multiple non-disjoint cycles resulting in identity\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])\n+    # Non-disjoint cycles that alter the permutation\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([0, 2, 1])\n+    # Overlapping cycles that create a new permutation\n+    assert Permutation([[1, 2], [2, 3]]) == Permutation([0, 2, 3, 1])\n+    # Duplicate element in cycles that results in error\n+    raises(ValueError, lambda: Permutation([[0, 1], [1, 2, 1]]))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n         Permutation(((0, ), [1]))\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..9fb76ec 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -489,8 +489,21 @@ def test_errors():\n     raises(ShapeError,\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n-\n-def test_len():\n+def test_issue_sympy_1_1():\n+    # Test case based on the reported issue about hstack behavior change\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    result = SparseMatrix.hstack(M1, M2, M3, M4)\n+    assert result.shape == (0, 6), f\"Expected (0, 6), got {result.shape}\"\n+\n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(1, 2)\n+    M4 = SparseMatrix.zeros(1, 3)\n+    result = SparseMatrix.hstack(M1, M2, M3, M4)\n+    assert result.shape == (1, 6), f\"Expected (1, 6), got {result.shape}\"\n     assert not SparseMatrix()\n     assert SparseMatrix() == SparseMatrix([])\n     assert SparseMatrix() == SparseMatrix([[]])\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..4b324de 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -162,6 +162,16 @@ def test_evalf_near_integers():\n \n def test_evalf_ramanujan():\n     assert NS(exp(pi*sqrt(163)) - 640320**3 - 744, 10) == '-7.499274028e-13'\n+\n+    # issue 13076\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(Max(1, y), x, evaluate=False).evalf()) == 'x*Max(1, y)'\n+    assert NS(Mul(x, Max(1, y), evaluate=False).evalf()) == 'x*Max(1, y)'\n+    assert NS(Mul(Max(0, x), y, evaluate=False).evalf()) == 'y*Max(0, x)'\n+    assert NS(Mul(y, Max(0, x), evaluate=False).evalf()) == 'y*Max(0, x)'\n+    assert NS(Mul(Max(1, x), y, evaluate=False).evalf()) == 'y*Max(1, x)'\n+    assert NS(Mul(y, Max(1, x), evaluate=False).evalf()) == 'y*Max(1, x)'\n     # A related identity\n     A = 262537412640768744*exp(-pi*sqrt(163))\n     B = 196884*exp(-2*pi*sqrt(163))\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..6258a24 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -268,10 +268,38 @@ def test_coth():\n     assert coth(x*I) == -cot(x)*I\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n+\n+    # Testing the specific issue with substituting integral values\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Known problematic integral values from the issue description\n+    problematic_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+\n+    for val in problematic_values:\n+        assert e.subs(x, val) is not None\n+\n+    # Test specific values to ensure behavior is correct (conceptual, not exact value checking)\n+    assert isinstance(e.subs(x, 2), Expr)\n+    assert isinstance(e.subs(x, 3), Expr)\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n+    # Testing the specific issue with substituting integral values\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Known problematic integral values from the issue description\n+    problematic_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+\n+    for val in problematic_values:\n+        assert e.subs(x, val) is not None\n+\n+    # Test specific values to ensure behavior is correct (conceptual, not exact value checking)\n+    assert isinstance(e.subs(x, 2), Expr)\n+    assert isinstance(e.subs(x, 3), Expr)\n+\n \n def test_coth_series():\n     x = Symbol('x')\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..a94805b 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -189,6 +189,15 @@ def test_Complement():\n             Intersection(S.Reals - S.Naturals, S.Reals - FiniteSet(pi))\n \n def test_complement():\n+    # Test case for issue 12712\n+    from sympy import Complement, FiniteSet, Interval, symbols\n+\n+    x, y = symbols('x y')\n+    # Testing complement of a FiniteSet with symbols and numbers against an Interval\n+    a = FiniteSet(x, y, 2)\n+    b = Interval(-10, 10)\n+    expected_result = FiniteSet(x, y)\n+    assert Complement(a, b) == expected_result, f\"Expected {expected_result}, but got {Complement(a, b)}\"\n     assert Interval(0, 1).complement(S.Reals) == \\\n         Union(Interval(-oo, 0, True, True), Interval(1, oo, True, True))\n     assert Interval(0, 1, True, False).complement(S.Reals) == \\\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..6bb3588 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,63 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    # Test case based on the issue description\n+    M = Matrix.eye(6)\n+    V = 2 * Matrix.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1],\n+    ])\n+    assert result == expected\n+\n+    # Additional test cases to verify col_insert correctness\n+    # Insert at the start\n+    M = Matrix.eye(4)\n+    V = 3 * Matrix.ones(4, 1)\n+    result = M.col_insert(0, V)\n+    expected = Matrix([\n+        [3, 1, 0, 0, 0],\n+        [3, 0, 1, 0, 0],\n+        [3, 0, 0, 1, 0],\n+        [3, 0, 0, 0, 1],\n+    ])\n+    assert result == expected\n+\n+    # Insert at the end\n+    M = Matrix.eye(4)\n+    V = Matrix([[1], [1], [1], [1]])\n+    result = M.col_insert(4, V)\n+    expected = Matrix([\n+        [1, 0, 0, 0, 1],\n+        [0, 1, 0, 0, 1],\n+        [0, 0, 1, 0, 1],\n+        [0, 0, 0, 1, 1],\n+    ])\n+    assert result == expected\n+\n+    # Insert with non-square matrices\n+    M = Matrix.zeros(3, 2)\n+    V = Matrix([[1], [1], [1]])\n+    result = M.col_insert(1, V)\n+    expected = Matrix([\n+        [0, 1, 0],\n+        [0, 1, 0],\n+        [0, 1, 0],\n+    ])\n+    assert result == expected\n+\n+    # Insert with a single row matrix\n+    M = Matrix([1, 2, 3])\n+    V = Matrix([4])\n+    result = M.col_insert(1, V)\n+    expected = Matrix([1, 4, 2, 3])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..367faa9 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -678,6 +678,17 @@ def test_Poly_mul():\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n+from sympy import Poly, Symbol, S\n+\n+x = Symbol('x')\n+\n+def test_issue_13079():\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n def test_Poly_sqr():\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..d910999 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -64,6 +64,20 @@ def test_latex_basic():\n     assert latex(2*x*y) == \"2 x y\"\n     assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n \n+    assert latex(3*x**2*y, mul_symbol=r'\\\\,') == r\"3\\\\,x^{2}\\\\,y\"\n+    assert latex(1.5*3**x, mul_symbol=r'\\\\,') == r\"1.5\\\\,3^{x}\"\n+\n+    # Test with different valid mul_symbols\n+    assert latex(2*x*y, mul_symbol='ldot') == r\"2 \\,. x \\,. y\"\n+    assert latex(2*x*y, mul_symbol='times') == r\"2 \\times x \\times y\"\n+    assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n+\n+    # Test with no mul_symbol (default behavior)\n+    assert latex(2*x*y) == \"2 x y\"\n+\n+    # Test with a custom LaTeX thin space as mul_symbol\n+    assert latex(3*x**2*y, mul_symbol=r'\\:') == r\"3\\:x^{2}\\:y\"\n+\n     assert latex(1/x) == r\"\\frac{1}{x}\"\n     assert latex(1/x, fold_short_frac=True) == \"1 / x\"\n     assert latex(-S(3)/2) == r\"- \\frac{3}{2}\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..558efa2 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,26 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+def test_issue_13835_matrix_determinant_with_symbolic_entries():\n+    from sympy import Matrix, symbols, nan\n+\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+\n+    # Testing the fixed cases\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    # Expand to verify symbolic handling precision\n+    assert M(3).det().expand() == 0\n+    assert M(4).det().expand() == 0\n+    # Previously failed case, now expected to yield correct result\n+    assert M(5).det().expand() == 0\n+    assert M(6).det().expand() == 0\n+    assert M(7).det().expand() == 0\n+\n+    # Check no returns of NaN or errors; ensure result is correctly simplified/handled\n+    for i in range(1, 8):\n+        assert M(i).det() is not nan\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..bbbb89e 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -175,8 +175,47 @@ def test_ContinuousRV():\n     assert variance(X) == variance(Y)\n     assert P(X > 0) == P(Y > 0)\n \n+from sympy import S, symbols, simplify\n+from sympy.stats import Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum, cdf, density\n \n-def test_arcsin():\n+def test_precomputed_cdf_for_issue():\n+    x = symbols(\"x\", real=True, finite=True)\n+\n+    # Test precomputed CDF for Arcsin distribution\n+    assert simplify(diff(cdf(Arcsin(\"x\", 0, 3))(x), x)) == density(Arcsin(\"x\", 0, 3))(x)\n+\n+    # Test precomputed CDF for Dagum distribution\n+    assert simplify(diff(cdf(Dagum(\"x\", S(1)/3, S(1)/5, 2))(x), x)) == density(Dagum(\"x\", S(1)/3, S(1)/5, 2))(x)\n+    \n+    # Test precomputed CDF for Erlang distribution\n+    assert simplify(diff(cdf(Erlang(\"x\", 1, 1))(x), x)) == density(Erlang(\"x\", 1, 1))(x)\n+\n+    # Test precomputed CDF for Frechet distribution\n+    assert simplify(diff(cdf(Frechet(\"x\", S(4)/3, 1, 2))(x), x)) == density(Frechet(\"x\", S(4)/3, 1, 2))(x)\n+\n+    # Test precomputed CDF for Gamma distribution\n+    assert simplify(diff(cdf(Gamma(\"x\", 0.1, 2))(x), x)) == density(Gamma(\"x\", 0.1, 2))(x)\n+\n+    # Test precomputed CDF for Inverse Gamma distribution\n+    assert simplify(diff(cdf(GammaInverse(\"x\", S(5)/7, 2))(x), x)) == density(GammaInverse(\"x\", S(5)/7, 2))(x)\n+\n+    # Test precomputed CDF for Kumaraswamy distribution\n+    assert simplify(diff(cdf(Kumaraswamy(\"x\", S(1)/123, 5))(x), x)) == density(Kumaraswamy(\"x\", S(1)/123, 5))(x)\n+\n+    # Test precomputed CDF for Laplace distribution\n+    assert simplify(diff(cdf(Laplace(\"x\", 2, 3))(x), x)) == density(Laplace(\"x\", 2, 3))(x)\n+\n+    # Test precomputed CDF for Logistic distribution\n+    assert simplify(diff(cdf(Logistic(\"x\", 1, 0.1))(x), x)) == density(Logistic(\"x\", 1, 0.1))(x)\n+\n+    # Test precomputed CDF for Nakagami distribution\n+    assert simplify(diff(cdf(Nakagami(\"x\", S(7)/3, 1))(x), x)) == density(Nakagami(\"x\", S(7)/3, 1))(x)\n+\n+    # Test precomputed CDF for StudentT distribution\n+    assert simplify(diff(cdf(StudentT(\"x\", 10))(x), x)) == density(StudentT(\"x\", 10))(x)\n+\n+    # Test precomputed CDF for UniformSum distribution\n+    assert simplify(diff(cdf(UniformSum(\"x\", 5))(x), x)) == density(UniformSum(\"x\", 5))(x)\n     a = Symbol(\"a\", real=True)\n     b = Symbol(\"b\", real=True)\n \n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..81c8bc4 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,35 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+def test_tensor_product_pow():\n+    # Import necessary modules for this test\n+    from sympy import symbols\n+    from sympy.physics.quantum import TensorProduct as TP\n+    from sympy.physics.quantum import tensor_product_simp\n+    from sympy.physics.paulialgebra import Pauli\n+\n+    # Define non-commutative symbols\n+    A, B, C, D = symbols('A B C D', commutative=False)\n+\n+    # Test simplification of TensorProduct powers\n+    assert tensor_product_simp(TP(A, B)**2) == TP(A**2, B**2)\n+    assert tensor_product_simp(TP(A, B)**3) == TP(A**3, B**3)\n+\n+    # Test simplification with scalar multiplication\n+    x = symbols('x')\n+    assert tensor_product_simp(x * TP(A, B)**2) == x * TP(A**2, B**2)\n+    assert tensor_product_simp(x * (TP(A, B)**2) * TP(C, D)) == x * TP(A**2 * C, B**2 * D)\n+\n+    # Testing with Pauli matrices\n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tensor_product_simp(t2) == TP(1, Pauli(3)**2)\n+    assert tensor_product_simp(TP(1, Pauli(3))*TP(1, Pauli(3))) == TP(1, 1)\n+\n+    # Test more complex expressions\n+    t1 = TP(A, B) * TP(C, D)\n+    assert tensor_product_simp(t1**2) == TP(A**2 * C**2, B**2 * D**2)\n+\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..d111315 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -87,6 +87,9 @@ def test_python_relational():\n     assert python(Lt(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x < y\"\n     assert python(Ne(x/(y + 1), y**2)) in [\"e = Ne(x/(1 + y), y**2)\", \"e = Ne(x/(y + 1), y**2)\"]\n \n+    # Test that symbol declarations are included in the output for Eq\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+\n \n def test_python_functions():\n     # Simple\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..75b6fa5 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,15 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n+def test_vector_add_0():\n+    N = ReferenceFrame('N')\n+    # Test case based on the issue\n+    result = sum([N.x, (0 * N.x)])\n+    assert isinstance(result, Vector)\n+    assert result == N.x\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..9ca0ae6 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -38,6 +39,11 @@ def test_PythonCodePrinter():\n \n \n def test_MpmathPrinter():\n+    # Test for Rational numbers with MpmathPrinter\n+    p = MpmathPrinter()\n+    assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n+    assert p.doprint(Rational(3, 7)) == 'mpmath.mpf(3)/mpmath.mpf(7)'\n+    assert p.doprint(Rational(232, 3)) == 'mpmath.mpf(232)/mpmath.mpf(3)'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n \n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..87200a1 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -72,6 +73,32 @@ def test_ndim_array_initiation():\n     raises(ValueError, lambda: vector_with_long_shape[long(5)])\n \n     from sympy.abc import x\n+    # New test case for checking rank-0 arrays\n+    rank_zero_array = ImmutableDenseNDimArray(x)\n+    assert len(rank_zero_array) == 1\n+    assert rank_zero_array.shape == ()\n+    assert rank_zero_array.rank() == 0\n+    assert rank_zero_array[()] == x\n+    \n+    # Additional test case for comparison with numpy behavior\n+    import numpy as np\n+    np_scalar = np.asarray(1)\n+    assert np_scalar.size == 1\n+\n+    # Test with rank-1 array to ensure no effect on other ranks\n+    rank_one_array = ImmutableDenseNDimArray([1])\n+    assert len(rank_one_array) == 1\n+    assert rank_one_array.shape == (1,)\n+    assert rank_one_array.rank() == 1\n+    assert rank_one_array[0] == 1\n+\n+    # Test with multi-dimensional array\n+    rank_two_array = ImmutableDenseNDimArray([[1, 2], [3, 4]])\n+    assert len(rank_two_array) == 4\n+    assert rank_two_array.shape == (2, 2)\n+    assert rank_two_array.rank() == 2\n+    assert rank_two_array[0, 0] == 1\n+    assert rank_two_array[1, 1] == 4\n     rank_zero_array = ImmutableDenseNDimArray(x)\n     assert len(rank_zero_array) == 0\n     assert rank_zero_array.shape == ()\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..b7b39a9 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -18,6 +19,13 @@ def test_Integer():\n def test_Rational():\n     assert mcode(Rational(3, 7)) == \"3/7\"\n     assert mcode(Rational(18, 9)) == \"2\"\n+\n+def test_Max_function():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    assert mcode(Max(3, 2, 1)) == \"Max[3, 2, 1]\"\n+    assert mcode(Max(x, y + z)) == \"Max[x, y + z]\"\n     assert mcode(Rational(3, -7)) == \"-3/7\"\n     assert mcode(Rational(-3, -7)) == \"3/7\"\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..a7e7669 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,50 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix_sign_issue():\n+    from sympy import symbols, trigsimp, cos, sin\n+    from sympy.algebras.quaternion import Quaternion\n+    \n+    x = symbols('x')\n+    # Quaternion representing a rotation about the x-axis\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix = Matrix([\n+        [1, 0, 0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x), cos(x)]\n+    ])\n+    \n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n+def test_quaternion_to_rotation_matrix_identity():\n+    from sympy import symbols, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+    \n+    # Quaternion representing no rotation (identity quaternion)\n+    q = Quaternion(1, 0, 0, 0)\n+    expected_matrix = Matrix([\n+        [1, 0, 0],\n+        [0, 1, 0],\n+        [0, 0, 1]\n+    ])\n+    \n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n+def test_quaternion_to_rotation_matrix_around_z_axis():\n+    from sympy import symbols, trigsimp, cos, sin\n+    from sympy.algebras.quaternion import Quaternion\n+    \n+    x = symbols('x')\n+    # Quaternion representing a rotation about the z-axis\n+    q = Quaternion(cos(x/2), 0, 0, sin(x/2))\n+    expected_matrix = Matrix([\n+        [cos(x), -sin(x), 0],\n+        [sin(x), cos(x), 0],\n+        [0, 0, 1]\n+    ])\n+    \n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +163,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..eabfe99 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,6 +1625,27 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional test cases for the fix\n+    # Testing with negative coefficient\n+    assert Mod(-3*i, 2) == Mod(-i, 2)\n+\n+    # Testing with different modulo bases\n+    assert Mod(6*i, 4) == 2*Mod(i, 2)\n+    assert Mod(9*i, 3) == 0\n+\n+    # Edge case: i is zero\n+    assert Mod(3*0, 2) == 0\n+\n+    # Edge case: i part of a larger expression\n+    expr = 3*i + 2*j\n+    assert Mod(expr, 2) == Mod(i + j, 2)\n+\n     # issue 8677\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..df59349 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,8 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n+    assert Min(x) == x\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +157,8 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n+    assert Max(x) == x\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..49063f5 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,43 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n-def test_issue_14392():\n+def test_issue_15873():\n+    # Issue 15873\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None  # The expression is zero, but uncertainty is expected due to complexity\n+\n+    # Additional test cases\n+    # Case where the expression is actually zero: (2 + 3*I) - (2 + 3*I)\n+    e1 = (2 + 3*I) - (2 + 3*I)\n+    assert e1.is_zero is True\n+\n+    # Non-zero expression: 1 + I\n+    e2 = 1 + I\n+    assert e2.is_zero is False\n+\n+    # A more complex expression, which simplifies to zero: I**2 + 1\n+    e3 = I**2 + 1  # This simplifies to zero\n+    from sympy import simplify\n+    assert simplify(e3).is_zero is True\n+\n+    # Expressions with symbolic variables\n+    x, y = symbols('x y')\n+    e4 = x + I*y\n+    assert e4.is_zero is None  # Can't determine with symbols alone\n+\n+    # Check behavior with zero property\n+    x, y = symbols('x y', zero=True)\n+    e5 = x + y\n+    assert e5.is_zero is True\n+\n+    # Making sure it handles addition of zero properly\n+    e6 = x + 0\n+    assert e6.is_zero is True\n+    e7 = 0*x + 0*y\n+    assert e7.is_zero is True\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..cc38799 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,8 +477,38 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n-\n-def test_issue_5950():\n+def test_posify_preserves_assumptions():\n+    from sympy import posify, Symbol, symbols\n+\n+    # Test that finite assumption is preserved\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+\n+    # Test that infinite assumption is preserved\n+    m = Symbol('m', infinite=True)\n+    eq, rep = posify(m)\n+    assert eq.assumptions0['infinite'] == True\n+\n+    # Test that integer assumption is preserved\n+    n = Symbol('n', integer=True)\n+    eq, rep = posify(n)\n+    assert eq.assumptions0['integer'] == True\n+\n+    # Test that rational assumption is preserved\n+    r = Symbol('r', rational=True)\n+    eq, rep = posify(r)\n+    assert eq.assumptions0['rational'] == True\n+\n+    # Test that even assumption is preserved\n+    e = Symbol('e', even=True)\n+    eq, rep = posify(e)\n+    assert eq.assumptions0['even'] == True\n+\n+    # Test that odd assumption is preserved\n+    o = Symbol('o', odd=True)\n+    eq, rep = posify(o)\n+    assert eq.assumptions0['odd'] == True\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n     assert logcombine(log(x) - log(y)) == log(x/y)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..36d2588 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -11,7 +12,7 @@ from sympy.matrices import SparseMatrix, MatrixSymbol\n from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n-from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -36,7 +37,11 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n \n-def test_MpmathPrinter():\n+def test_Indexed_in_PythonCodePrinter():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..e1c4271 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -48,7 +48,18 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n-def test_cython_wrapper_outarg():\n+import numpy as np\n+from sympy import MatrixSymbol\n+from sympy.utilities.autowrap import autowrap\n+\n+def test_autowrap_cython_with_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in the final expression\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    # Should return 1.0 without raising a TypeError\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..b60c2db 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,8 +248,15 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n-\n-def test_decode_morse():\n+def test_encode_and_decode_morse():\n+    # Test if the encoding for '1' is correct\n+    assert encode_morse('1') == '.----'\n+    # Ensure decode function can decode '.----' back to '1'\n+    assert decode_morse('.----') == '1'\n+\n+    # Additional tests for other numbers to ensure no regression\n+    assert encode_morse('012') == '-----|.----|..---'\n+    assert decode_morse('-----|.----|..---') == '012'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..7501a88 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -175,8 +178,12 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n-\n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    assert _sqrt_match(4 + I) == []\n+    assert sqrtdenest((3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2) == (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..73d6ab9 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,12 +1,28 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n+from sympy import sympify\n from sympy.utilities.pytest import raises, warns\n \n+def test_issue_multiplicative_operations_on_points():\n+    from sympy.geometry import Point2D\n+\n+    point1 = Point2D(0, 0)\n+    point2 = Point2D(1, 1)\n+\n+    expr1 = point1 + point2 * sympify(2.0)\n+    expr2 = point1 + sympify(2.0) * point2\n+\n+    assert expr1 == expr2, \"Multiplication with sympify(2.0) should be commutative for Point2D\"\n \n-def test_point():\n+    p4 = Point2D(1, 1)\n+    assert 5 * p4 == Point2D(5, 5)\n+    assert sympify(5.0) * p4 == Point2D(5, 5)\n+    assert p4 * sympify(5.0) == Point2D(5, 5)\n+    assert p4 * 5 == Point2D(5, 5)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..84bb00e 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,13 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy import symbols\n+    x, y = symbols('x y', integer=True)\n+    # Test case for issue 18186\n+    expected_result = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == expected_result\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == expected_result\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..9f4e93f 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -664,6 +664,9 @@ def test_latex_derivatives():\n     x2 = Symbol('x2')\n     assert latex(diff(f(x1, x2), x1)) == r'\\frac{\\partial}{\\partial x_{1}} f{\\left(x_{1},x_{2} \\right)}'\n \n+    from sympy import Subs  # Needed for test cases involving Subs\n+    from sympy.abc import x, y  # Symbols used in the Subs tests\n+\n     n1 = Symbol('n1')\n     assert latex(diff(f(x), (x, n1))) ==  r'\\frac{d^{n_{1}}}{d x^{n_{1}}} f{\\left(x \\right)}'\n \n@@ -677,7 +680,16 @@ def test_latex_subs():\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+def test_latex_subs():\n+    assert latex(Subs(x*y, (\n+        x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+\n+    # Testing the parenthesizing fix\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(2*Subs(x-y, (y,), (2,))) == r'2 \\left. \\left(x - y\\right) \\right|_{\\substack{ y=2 }}'\n+    assert latex(Subs(x**2 + y**2, (x, y), (0, 0))) == r'\\left. \\left(x^{2} + y^{2}\\right) \\right|_{\\substack{ x=0\\\\ y=0 }}'\n+    assert latex(Subs((x+y)**2, (x,), (y,))) == r'\\left. \\left(x + y\\right)^{2} \\right|_{\\substack{ x=y }}'\n+    assert latex(5*Subs(x*y + x-y, (x,), (1,))) == r'5 \\left. \\left(x y + x - y\\right) \\right|_{\\substack{ x=1 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..ef72a69 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -86,8 +87,29 @@ def test_free_symbols():\n     assert ConditionSet(x, Eq(x, 0), FiniteSet(x, z)\n         ).free_symbols == {x, z}\n \n-\n-def test_subs_CondSet():\n+def test_issue_17341_conditionset_imageset_subs():\n+    from sympy import asin, pi, Symbol, S, Lambda, imageset, ConditionSet, Interval\n+    \n+    k = Symbol('k')\n+    y = Symbol('y')\n+    x = Symbol('x')\n+    \n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+    \n+    # Test substitution within ConditionSet\n+    assert cond_set.subs(y, S.One/3).dummy_eq(img2)\n+\n+    # Check proper substitution with simultaneous=True\n+    assert cond_set.subs({y: S.One/3}, simultaneous=True).dummy_eq(img2)\n+\n+    # Direct xreplace should give the expected result\n+    assert cond_set.xreplace({y: S.One/3}).dummy_eq(img2)\n+\n+    # Confirm substitution directly on ImageSet\n+    img = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    assert img.subs(y, S.One/3) == imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n     s = FiniteSet(z, y)\n     c = ConditionSet(x, x < 2, s)\n     # you can only replace sym with a symbol that is not in\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..7ee2499 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -513,8 +513,25 @@ def test_kernS():\n     one = kernS('x - (x - 1)')\n     assert one != 1 and one.expand() == 1\n \n-\n-def test_issue_6540_6552():\n+def test_kernS_enhanced():\n+    from sympy.abc import x, y, _kern\n+    # test the original issue case\n+    assert kernS('(2*x)/(x-1)') == 2*x/(x-1)\n+    \n+    # test edge cases\n+    try:\n+        kernS('(2*x)/(x-1')  # mismatched parentheses\n+    except Exception as e:\n+        assert isinstance(e, SympifyError)\n+    \n+    # complex expression with nested parentheses\n+    assert kernS('2*(3*(4*(x+y)))') == 2 * 3 * (4 * (x + y))\n+    \n+    # expression where kern should not be created\n+    assert kernS('x - (x - 1)') == x - (x - 1)\n+    \n+    # case with a symbol _kern to ensure the function handles it correctly\n+    assert kernS('Interval(-1, _kern - 2*(-3))') == Interval(-1, _kern + 6)\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..b832df4 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,5 +1,7 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n+from sympy.physics.quantum.operator import IdentityOperator\n from sympy.physics.quantum.qexpr import QExpr\n from sympy.physics.quantum.dagger import Dagger\n from sympy.physics.quantum.hilbert import HilbertSpace\n@@ -83,8 +85,13 @@ def test_unitary():\n     assert U.is_commutative is False\n     assert Dagger(U).is_commutative is False\n \n-\n-def test_identity():\n+def test_dagger_identity_operator_simplification():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    \n+    # Check if multiplying a dagger operator by identity simplifies correctly\n+    assert Dagger(O) * I == Dagger(O)\n+    assert I * Dagger(O) == Dagger(O)\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..e52e83b 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -860,6 +860,19 @@ def test_sylow_subgroup():\n     assert S.order() == 4\n \n     P = DihedralGroup(12)\n+\n+    # Additional test cases for DihedralGroup to verify the fix for sylow_subgroup() IndexError\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(2*25)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n     S = P.sylow_subgroup(3)\n     assert S.order() == 3\n \n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..fc1e06b 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -514,7 +514,36 @@ def test_partitions():\n         assert i == RGS_enum(n)\n \n \n-def test_binary_partitions():\n+def test_partitions_dictionary_reuse():\n+    # Directly collect partitions into a list and verify they are independent\n+    partitions_list = list(partitions(6, k=2))\n+    assert partitions_list == [\n+        {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}\n+    ]\n+\n+    # Modify one of the dictionaries and ensure others are unaffected\n+    modified_partitions_list = [p.copy() for p in partitions_list]\n+    modified_partitions_list[0][2] = 2\n+    \n+    assert partitions_list == [\n+        {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}\n+    ], \"Original list should remain unchanged when modifying copies\"\n+\n+    # Test with m and k parameters combined\n+    partitions_list_mk = list(partitions(8, k=4, m=3))\n+    assert partitions_list_mk == [\n+        {4: 2}, {1: 1, 3: 1, 4: 1}, {2: 2, 4: 1}, {2: 1, 3: 2}\n+    ]\n+\n+    # Check size parameter usage\n+    partitions_size_list = [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]\n+    assert partitions_size_list == [\n+        (3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})\n+    ], \"Size parameter should return correct (M, P) tuples\"\n+\n+    # Test edge cases like partitions of 0\n+    assert list(partitions(0)) == [{}], \"Partition of 0 should return [{}]\"\n+    assert list(partitions(0, size=True)) == [(0, {})], \"Partition of 0 with size=True should return [(0, {})]\"\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..7e3ea55 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,6 +583,17 @@ def test_Float():\n         assert Float(i) is a\n \n \n+def test_zero_not_false_issue_20796():\n+    from sympy import S\n+\n+    # Ensure that S(0.0) == S.false is False\n+    assert (S(0.0) == S.false) is False\n+    # Ensure that S.false == S(0.0) is also False\n+    assert (S.false == S(0.0)) is False\n+\n+    # Test related comparisons for completeness\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n \n @conserve_mpmath_dps\n def test_float_mpf():\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..9e566ad 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -7,6 +8,8 @@ from sympy import (\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+from sympy.functions.elementary.trigonometric import sinh\n+from sympy.functions.elementary.piecewise import Piecewise\n \n def test_subs():\n     n3 = Rational(3)\n@@ -20,6 +23,41 @@ def test_subs():\n     assert e == Rational(6)\n \n \n+def test_issue_21373():\n+    # Test substitution with piecewise and hyperbolic functions\n+\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+\n+    # Original MWE from issue\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr.subs({1: 1.0}) is not None\n+\n+    # Variations to further test fix\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_cosh.subs({1: 1.0}) is not None\n+\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_div.subs({1: 1.0}) is not None\n+\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    assert expr_no_exp.subs({1: 1.0}) is not None\n+\n+    expr_other_func = sin(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    assert expr_other_func.subs({1: 1.0}) is not None\n+\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_tanh.subs({1: 1.0}) is not None\n+\n+    expr_removes = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    assert expr_removes.subs({1: 1.0}) is not None\n+\n+    # Ensure the error does not occur when using Piecewise and substitutions\n+    expr_simple = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)))\n+    assert expr_simple.subs({1: 1.0}) is not None\n+\n+    expr_combination = exp(sinh(Piecewise((x_r + y_r, y_r > x_r), (z_r, True)) / z_r))\n+    assert expr_combination.subs({1: 1.0}) is not None\n+\n def test_subs_Matrix():\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..ac6f0ad 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -17,6 +17,18 @@ from sympy.testing.pytest import raises\n \n \n def test_monomials():\n+    # Adding test cases for issue with min_degrees argument\n+    x1, x2, x3 = symbols('x1, x2, x3')\n+    # Verify monomials of exactly degree 3\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, x1*x2**2, x2*x3**2, x1*x3**2, x2*x1**2, x3*x1**2, x3*x2**2,\n+        x1*x2*x3\n+    }\n+    # Verify that increasing max_degrees includes all degree 3 monomials\n+    assert set(itermonomials([x1, x2, x3], 4, 3)).issuperset(\n+        {x1**3, x2**3, x3**3, x1*x2**2, x2*x3**2, x1*x3**2, x2*x1**2, x3*x1**2, x3*x2**2,\n+         x1*x2*x3}\n+    )\n \n     # total_degree tests\n     assert set(itermonomials([], 0)) == {S.One}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..88a1b03 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -261,9 +261,14 @@ def test_none():\n     assert none.func(*none.args) == none\n \n \n+from sympy.codegen.ast import String\n+\n def test_String():\n     st = String('foobar')\n     assert st.is_Atom\n+    \n+    # Test that func(*args) works as expected\n+    assert st.func(*st.args) == st\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..bf9a324 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -10,6 +11,8 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n+from sympy.geometry import Point2D\n \n \n def test_point():\n@@ -443,8 +446,24 @@ def test_unit():\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+        assert p == Point2D(1, 2)\n+\n+    # Check with imaginary coordinates, which should raise an error\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        with evaluate(False):\n+            Point2D(1, 2*I)\n+\n+    # Check without evaluate(False) to ensure normal behavior\n+    p = Point2D(1, 2)\n+    assert p == Point2D(1, 2)\n \n-def test__normalize_dimension():\n+    # Check evaluate=False in the constructor directly\n+    p = Point2D(1, 2, evaluate=False)\n+    assert p == Point2D(1, 2, evaluate=False)\n     assert Point._normalize_dimension(Point(1, 2), Point(3, 4)) == [\n         Point(1, 2), Point(3, 4)]\n     assert Point._normalize_dimension(\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..a601146 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -55,6 +56,21 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n+    # Test cases to check Min and Max printing\n+    assert prntr.doprint(Min(x, y)) == 'min(x, y)'\n+    assert prntr.doprint(Max(x, y)) == 'max(x, y)'\n+    assert prntr.doprint(Min(x, y, z)) == 'min(x, y, z)'\n+    assert prntr.doprint(Max(x, y, z)) == 'max(x, y, z)'\n+\n+    a, b = symbols('a b')\n+    # Test Min and Max with expressions\n+    assert prntr.doprint(Min(a + b, a * b)) == 'min(a + b, a*b)'\n+    assert prntr.doprint(Max(a**2, sqrt(b))) == 'max(a**2, sqrt(b))'\n+\n+    # Test Min and Max with numeric values\n+    assert prntr.doprint(Min(1, 2, 3)) == 'min(1, 2, 3)'\n+    assert prntr.doprint(Max(1, 2, 3)) == 'max(1, 2, 3)'\n+\n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..c813070 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..5faad60 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n-from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.symbol import uniquely_named_symbol, _symbol, Str, symbols\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n@@ -292,7 +294,14 @@ def test_symbols():\n \n     assert symbols('aa:d') == (aa, ab, ac, ad)\n     assert symbols('aa:d,x:z') == (aa, ab, ac, ad, x, y, z)\n-    assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n+    assert symbols(('aa:d', 'x:z')) == ((aa, ab, ac, ad), (x, y, z))\n+\n+def test_symbols_with_function_cls():\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction  # issue 23532 original test\n+    assert type(u[1]) == UndefinedFunction  # additional test case\n+    assert type(q[1]) == UndefinedFunction  # additional test case\n+    assert type(u[0]) == UndefinedFunction  # additional test case\n \n \n     # issue 6675\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..0ff55ee 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -262,6 +262,31 @@ def test_kahane_simplify1():\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n+def test_kahane_leading_gamma_matrix_order():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Original bug case\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Test failed for expression 1: {r}\"\n+    \n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Test failed for expression 2: {r}\"\n+\n+    # Additional cases to verify fix\n+    t = G(mu)*G(nu)*G(-nu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(mu)*G(nu)), f\"Test failed for expression 3: {r}\"\n+\n+    t = G(nu)*G(-mu)*G(mu)*G(-nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(nu)*G(-nu)), f\"Test failed for expression 4: {r}\"\n+    \n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)*G(nu)*G(-nu)*G(sigma)*G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*G(rho)*G(sigma)*G(rho)*G(sigma)), f\"Test failed for expression 5: {r}\"\n+\n def test_gamma_matrix_class():\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..9fa136f 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -45,7 +45,17 @@ def test_as_set():\n     # containment in a Set -- rewriting as a Set is not yet implemented\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n+from sympy import Symbol, S, Reals, Integers, FiniteSet\n+from sympy.sets.contains import Contains\n+from sympy.testing.pytest import raises\n \n-def test_type_error():\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # Verifies that as_set correctly raises NotImplementedError\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..e3224c5 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,31 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24213": "",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..6163f0c 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -103,6 +104,29 @@ def test_isomorphisms():\n \n \n def test_check_homomorphism():\n+    # Test case based on the issue description\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+    \n+    # Additional test cases\n+    # CyclicGroup homomorphism where it should match perfectly with itself\n+    C3 = CyclicGroup(3)\n+    T = homomorphism(C3, C3, C3.generators, C3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Check that a trivial homomorphism (sending all generators to the identity) is not an isomorphism\n+    trivial_hom = homomorphism(C3, C3, C3.generators, [C3.identity])\n+    assert not trivial_hom.is_isomorphism()\n+\n+    # Verifying a homomorphism between two different groups (should raise ValueError)\n+    G = PermutationGroup([Permutation([1, 0]), Permutation([0, 2, 1])])\n+    raises(ValueError, lambda: homomorphism(G, C3, G.generators, C3.generators))\n+\n+    # Another valid homomorphism between isomorphic groups (DihedralGroup -> DihedralGroup)\n+    D4 = DihedralGroup(4)\n+    T = homomorphism(D4, D4, D4.generators, D4.generators)\n+    assert T.is_isomorphism()\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..1303f18 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -267,6 +267,29 @@ def test_PolyElement_as_expr():\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n+    # Additional test cases\n+    U, V, W = symbols(\"u,v,w\")\n+    g_custom = 3*U**2*V - U*V*W + 7*W**3 + 1\n+\n+    # Test with entirely different symbols\n+    assert f.as_expr(U, V, W) == g_custom\n+\n+    # Test with incorrect number of symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with identical symbols\n+    M, N, P = symbols(\"x,y,z\")\n+    g_identical = 3*M**2*N - M*N*P + 7*P**3 + 1\n+    assert f.as_expr(M, N, P) == g_identical\n+\n+    # Test with partially overlapping symbols\n+    A, B, C = symbols(\"a,y,z\")\n+    h = 3*A**2*B - A*B*C + 7*C**3 + 1\n+    raises(ValueError, lambda: f.as_expr(A, B))  # Missing one symbol\n+\n+    # Test with no symbols (should use default ring symbols)\n+    assert f.as_expr() == g\n+\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..a621b47 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -266,8 +266,22 @@ def test_match_parentheses_implicit_multiplication():\n def test_convert_equals_signs():\n     transformations = standard_transformations + \\\n                         (convert_equals_signs, )\n-    x = Symbol('x')\n-    y = Symbol('y')\n+from sympy.parsing.sympy_parser import parse_expr\n+from sympy.core import Eq, Lt, Le, Gt, Ge, Ne\n+\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, expected_result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == expected_result\n+\n+def test_parse_expr_with_function():\n     assert parse_expr(\"1*2=x\", transformations=transformations) == Eq(2, x)\n     assert parse_expr(\"y = x\", transformations=transformations) == Eq(y, x)\n     assert parse_expr(\"(2*y = x) = False\",\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..1fdd921 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -66,6 +66,8 @@ def test_unit_grammar_fail(string):\n         ([\"m2\"], u.m**2),\n         ([\"10+21m\"], u.Unit(u.m * 1e21)),\n         ([\"2.54cm\"], u.Unit(u.cm * 2.54)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n         ([\"20%\"], 0.20 * u.dimensionless_unscaled),\n         ([\"10+9\"], 1.0e9 * u.dimensionless_unscaled),\n         ([\"2x10-9\"], 2.0e-9 * u.dimensionless_unscaled),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..55d5e1a 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1889,6 +1889,30 @@ class OperationTests(OperationTestBase):\n         from_state = to_state\n         to_state = from_state.clone()\n         operation.state_forwards(app_label, to_state)\n+\n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_or_and(self):\n+        app_label = 'test_checkconstraintwithorand'\n+        constraint_name = 'complex_constraint_or_and'\n+        from_state = self.set_up_test_model(app_label)\n+        # Creating a complex CheckConstraint using both OR and AND clauses\n+        check = models.Q(pink__isnull=True, weight__gt=2) | models.Q(pink__exact=1, weight__lt=5)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('Pony', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+\n+        # Fetch the model from the state\n+        Pony = to_state.apps.get_model(app_label, 'Pony')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            Pony.objects.create(pink=2, weight=3.0)  # This should fail due to constraint\n+        Pony.objects.create(pink=3, weight=1.0)  # This should pass\n+        Pony.objects.bulk_create([\n+            Pony(pink=None, weight=3.0),  # This should pass due to constraint\n+            Pony(pink=1, weight=4.0),  # This should pass because of OR condition\n+        ])\n         Author = to_state.apps.get_model(app_label, 'Author')\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, from_state, to_state)\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..3391124 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -164,7 +164,36 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translation.get_language(), 'nl')\n \n \n-class URLNamespaceTests(URLTestCaseBase):\n+    def test_translate_url_with_optional_parameters(self):\n+        # Test translation of URLs with optional parameters\n+        self.assertEqual(\n+            translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+            '/nl/with-arguments/regular-argument/'\n+        )\n+        self.assertEqual(\n+            translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+            '/nl/with-arguments/regular-argument/optional.html'\n+        )\n+        \n+        # Test optional parameters missing scenario\n+        self.assertEqual(\n+            translate_url('/en/regex_optional/1/2/', 'nl'),\n+            '/nl/regex_optional/1/2/'\n+        )\n+        self.assertEqual(\n+            translate_url('/en/regex_optional/1/', 'nl'),\n+            '/nl/regex_optional/1/'\n+        )\n+        \n+        # Test named optional parameters\n+        self.assertEqual(\n+            translate_url('/en/optional/1/', 'nl'),\n+            '/nl/optional/1/'\n+        )\n+        self.assertEqual(\n+            translate_url('/en/optional/1/', 'nl', {'arg1': 1}),\n+            '/nl/optional/1/'\n+        )\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n     \"\"\"\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..771f595 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -14,11 +15,35 @@ from .models import (\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    Congressman, DerivedM, InternalCertificationAudit, ItalianRestaurant,\n+    M2MChild, MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A,\n+    ParkingLot4B, Person, Place, Politician, Profile, QualityControl,\n+    Restaurant, SelfRefChild, SelfRefParent, Senator, Supplier, TrainStation,\n+    User, Wholesaler, Item, Derived\n )\n \n+import uuid\n+from django.db import models\n+\n \n class ModelInheritanceTest(TestCase):\n-    def test_model_inheritance(self):\n+    def test_create_new_derived_instance_with_pk_equals_none(self):\n+        d1 = Derived.objects.create(f=True)  # Create the first derived object\n+        d2 = Item.objects.get(pk=d1.pk).derived\n+        # Reset and create a new derived instance by setting pk = None.\n+        d2.uid = None\n+        d2.f = False\n+        d2.save()\n+        self.assertEqual(Derived.objects.count(), 2)\n+        self.assertTrue(Derived.objects.get(pk=d1.pk).f)\n+\n+    def test_reset_and_save_derived_object(self):\n+        derived_instance = Derived.objects.create(f=True)\n+        derived_instance.reset()\n+        derived_instance.save()\n+        self.assertEqual(Derived.objects.count(), 2)\n+        original_instance = Derived.objects.get(pk=derived_instance.pk)\n+        self.assertFalse(original_instance.f)\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n         # existent child instance, saving the Parent doesn't duplicate the\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..bde5b92 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -603,9 +603,19 @@ class DeletionTests(TestCase):\n                 )\n                 signal.disconnect(receiver, sender=Referrer)\n \n+from django.db import connection\n \n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all_performance(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure the generated SQL does not include any subqueries.\n+        self.assertNotIn('SELECT', sql)\n+        # The SQL should match the pattern 'DELETE FROM table_name'\n+        self.assertTrue(sql.strip().startswith('DELETE FROM'))\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +712,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..b0a5a52 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,12 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_to_python_dict_value(self):\n+        \"\"\"Test that a dict raises a ValidationError in DecimalField.to_python.\"\"\"\n+        f = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        with self.assertRaisesMessage(ValidationError, msg % ({})):\n+            f.to_python({})\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..e616def 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -109,6 +110,17 @@ class PickleabilityTestCase(TestCase):\n         reloaded = pickle.loads(dumped)\n         self.assertEqual(original, reloaded)\n         self.assertIs(reloaded.__class__, dynclass)\n+    def test_pickle_values_annotate_query(self):\n+        \"\"\"\n+        Test a queryset with values() and annotate() after pickling and unpickling.\n+        \"\"\"\n+        expected_data = [\n+            {'name': 'test', 'latest_time': self.happening.when}\n+        ]\n+        qs = Happening.objects.values('name').annotate(latest_time=models.Max('when'))\n+        reloaded_qs = Happening.objects.all()\n+        reloaded_qs.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertEqual(list(reloaded_qs), expected_data)\n \n     def test_specialized_queryset(self):\n         self.assert_pickles(Happening.objects.values('name'))\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex a61da37..394da3f 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -178,9 +178,37 @@ class UtilsTests(SimpleTestCase):\n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n+    def test_unicode_json_display(self):\n+        tests = [\n+            ({'a': '\u4f60\u597d \u4e16\u754c'}, '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}'),\n+            ('\u4f60\u597d\uff0c\u4e16\u754c', '\"\u4f60\u597d\uff0c\u4e16\u754c\"'),\n+            ({'a': '\ud83d\ude00\ud83d\udc31'}, '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}'),\n+            ([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"], '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]'),\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n+\n         display_value = display_for_field(None, models.JSONField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n+    def test_unicode_json_display(self):\n+        tests = [\n+            ({'a': '\u4f60\u597d \u4e16\u754c'}, '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}'),\n+            ('\u4f60\u597d\uff0c\u4e16\u754c', '\"\u4f60\u597d\uff0c\u4e16\u754c\"'),\n+            ({'a': '\ud83d\ude00\ud83d\udc31'}, '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}'),\n+            ([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"], '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]'),\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n+\n     def test_json_display_for_field(self):\n         tests = [\n             ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n",
  "django__django-14404": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..f56b371 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -690,6 +690,36 @@ class WriterTests(SimpleTestCase):\n         # Just make sure it runs for now, and that things look alright.\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n+    def test_migration_with_custom_field_and_mixin(self):\n+        \"\"\"\n+        Tests that a migration containing a custom field and mixin correctly\n+        imports the necessary modules.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=[\n+                        (\"name\", MyField(primary_key=True)),\n+                    ],\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+            \"initial\": True,\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"import tests.migrations.test_writer\", output)\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n \n     def test_migration_path(self):\n         test_apps = [\n",
  "django__django-15375": "",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..72b9dab 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2980,7 +2980,22 @@ class OperationTests(OperationTestBase):\n \n         new_state = project_state.clone()\n         operation.state_forwards(app_label, new_state)\n-        # Rename index.\n+        # Test renaming of an index when moving backward and forward.\n+        # Initial rename forward\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # Now we move backward and expect the old auto-generated name to be restored\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameDoesNotExist(table_name, \"new_pony_test_idx\")\n+        self.assertIndexNameExists(table_name, \"pony_pink_weight_idx\")  # Assuming this is the old auto-generated name\n+\n+        # Move forward again to ensure index can be renamed without crashing\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..3312660 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,6 +3497,65 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n+from django.test import TestCase\n+from django import forms\n+from django.forms import modelform_factory\n+from .models import Person, Triple  # Assuming these models are defined in models.py\n+\n+class CustomFormfieldCallbackTest(TestCase):\n+    def test_custom_callback_in_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class NewForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"id\", \"name\"]\n+                formfield_callback = callback\n+\n+        for field in NewForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_custom_callback_from_base_form_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        NewForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        class InheritedForm(NewForm):\n+            pass\n+\n+        for name, field in NewForm.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+            self.assertEqual(\n+                type(field.widget),\n+                type(InheritedForm.base_fields[name].widget),\n+            )\n+\n+    def test_factory_form_inherits_callback_from_meta(self):\n+        def all_required(field, **kwargs):\n+            formfield = field.formfield(**kwargs)\n+            formfield.required = True\n+            return formfield\n+\n+        class MyForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['name']\n+                formfield_callback = all_required\n+\n+        FactoryForm = modelform_factory(Person, form=MyForm)\n+        form = FactoryForm()\n+\n+        for name, field in form.fields.items():\n+            self.assertTrue(field.required)\n+\n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..37881d0 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,8 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.core import serializers\n+from django.core.exceptions import FieldError\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n@@ -258,7 +259,39 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_not_iterable(self):\n+    def test_serialization_with_custom_manager_using_select_related(self):\n+        \"\"\"\n+        Test serialization of m2m relation with a custom manager using select_related\n+        to ensure the FieldError is resolved.\n+        \"\"\"\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        # Create test instances\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+\n+        try:\n+            # Attempt to serialize\n+            serializers.serialize(\"json\", [test])\n+        except FieldError:\n+            self.fail(\"FieldError raised during serialization with select_related on m2m relation.\")\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..3b4c073 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6596,6 +6596,15 @@ def test_integrate(dask):\n     assert_equal(actual, ds.integrate(\"y\")[\"var\"])\n     assert_equal(ds[\"var\"].integrate(\"y\"), ds.integrate(\"y\")[\"var\"])\n \n+    # test integration with coord argument in DataArray\n+    actual = da.integrate(coord=\"y\")\n+    assert_equal(actual, ds.integrate(coord=\"y\")[\"var\"])\n+    assert_equal(ds[\"var\"].integrate(coord=\"y\"), ds.integrate(coord=\"y\")[\"var\"])\n+\n+    # test deprecated dim argument\n+    with pytest.warns(FutureWarning, match=\"dim is deprecated; use coord instead\"):\n+        da.integrate(dim=\"y\")\n+\n     # along x and y\n     actual = da.integrate((\"y\", \"x\"))\n     assert actual.ndim == 0\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..01e8081 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3030,6 +3030,14 @@ class TestDataset:\n         assert y.indexes[\"features\"].levels[1].dtype == D.y.dtype\n         assert y.dims == (\"x\", \"features\")\n \n+    def test_to_unstacked_dataset_single_dim_variable(self):\n+        # single dimension: regression test for the reported issue with GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n+\n     def test_to_stacked_array_to_unstacked_dataset(self):\n         # make a two dimensional dataset\n         a, b = create_test_stacked_array()\n",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..82e9574 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,32 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,2}, bar{1,3})\", [\"(foo{1,2})\", \"(bar{1,3})\"]),\n+    (\"[a-z],[0-9]\", [\"[a-z]\", \"[0-9]\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_handling(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex including cases with commas.\"\"\"\n+    \n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n+import re\n+from typing import Any\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pytest-dev__pytest-6197": "",
  "pytest-dev__pytest-7324": "",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..379b566 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -11,16 +11,36 @@\n import pytest\n \n from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx.ext.autodoc import TestApp, do_autodoc\n+from sphinx.ext.intersphinx import setup as intersphinx_setup\n+from sphinx.ext.autodoc.typehints import format_annotation\n+from types import ModuleType\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n def test_autodoc(app, status, warning):\n+    intersphinx_setup(app)\n     app.builder.build_all()\n \n     content = app.env.get_doctree('index')\n-    assert isinstance(content[3], addnodes.desc)\n-    assert content[3][0].astext() == 'autodoc_dummy_module.test'\n-    assert content[3][1].astext() == 'Dummy function using dummy.*'\n+\n+    # Testing `autodoc_typehints='signature'` behavior\n+    app.config.autodoc_typehints = 'signature'\n+    signature_content = do_autodoc(app, 'function', 'type_hint_test.f1', {})\n+    assert_node(signature_content, [addnodes.desc, addnodes.desc_signature, ([addnodes.desc_name, \"f1\"], addnodes.desc_returns, \"None\")])\n+\n+    # Testing `autodoc_typehints='description'` behavior\n+    app.config.autodoc_typehints = 'description'\n+    description_content = do_autodoc(app, 'function', 'type_hint_test.f1', {})\n+    assert_node(description_content, [addnodes.desc, ([addnodes.desc_signature,(([addnodes.desc_name, \"f1\"], addnodes.desc_returns, pending_xref, \"None\"))], addnodes.desc_content)])\n+\n+    # Ensure both configurations link `None` appropriately\n+    signature_links = set(node['reftarget'] for node in description_content.findall(addnodes.pending_xref))\n+    assert \"None\" in signature_links\n+\n+    description_links = set(node['reftarget'] for node in signature_content.findall(addnodes.pending_xref))\n+    assert \"None\" in description_links\n \n     # issue sphinx-doc/sphinx#2437\n     assert content[11][-1].astext() == \"\"\"Dummy class Bar with alias.\n@@ -30,4 +50,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..0bfa10f 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,57 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_multiple_parameters(self):\n+        # Test multiple parameters on the same line\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_optional(self):\n+        # Test multiple parameters with optional\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..5abb026 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -774,6 +774,68 @@ def test_pydecoratormethod_signature(app):\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n \n+from docutils import nodes\n+from sphinx import addnodes\n+from sphinx.testing.restructuredtext import parse\n+import pytest\n+\n+@pytest.mark.sphinx(freshenv=True)\n+def test_cross_reference_disambiguation_in_type_and_rtype(app):\n+    text = (\"\"\"\n+    .. py:class:: mod.A\n+    .. py:class:: mod.submod.A\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param mod.A a:\n+        :param mod.submod.A b:\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`A`\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod.submod\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`A`\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \"\"\")\n+\n+    doctree = parse(app, text)\n+    \n+    # Check for warnings in the app\n+    warnings = app._warning.getvalue()\n+\n+    # Assert that no cross-reference warnings are present\n+    assert \"more than one target found for cross-reference\" not in warnings\n+\n+    # More detailed checks can be added here if necessary\n+\n @pytest.mark.sphinx(freshenv=True)\n def test_module_index(app):\n     text = (\".. py:module:: docutils\\n\"\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..5dccf4a 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,11 +1,18 @@\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n-\n+# Variable definitions to test `:meta public:` and `:meta private:`\n+PRIVATE_CONSTANT = None  #: :meta private:\n+_PUBLIC_CONSTANT = None  #: :meta public:\n     :meta private:\n     \"\"\"\n-\n+# Variable definitions to test `:meta public:` and `:meta private:`\n+PRIVATE_CONSTANT = None  #: :meta private:\n+_PUBLIC_CONSTANT = None  #: :meta public:\n def _public_function(name):\n     \"\"\"public_function is a docstring().\n-\n+# Variable definitions to test `:meta public:` and `:meta private:`\n+PRIVATE_CONSTANT = None  #: :meta private:\n+_PUBLIC_CONSTANT = None  #: :meta public:\n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..de53785 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,8 +1008,45 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_info_field_list_union_type(app):\n+    text = (\".. py:module:: example\\\\n\"\n+            \".. py:function:: function_name\\\\n\"\n+            \"\\\\n\"\n+            \"   :param value: this can be of multiple types\\\\n\"\n+            \"   :type value: int | bytes | str\\\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Check that the doctree is constructed correctly\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature, [desc_annotation, \"function \"],\n+                                  [desc_name, \"function_name\"])],\n+                          [desc_content, nodes.field_list, nodes.field]))\n+\n+    desc_content = doctree[1][1][0][0][1][0]\n+\n+    # Verify each type is being parsed and cross-referenced correctly\n+    assert_node(desc_content, ([nodes.paragraph, ([addnodes.literal_strong, \"value\"],\n+                                                  \" (\",\n+                                                  [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                                                  [addnodes.literal_emphasis, \" | \"],\n+                                                  [pending_xref, addnodes.literal_emphasis, \"bytes\"],\n+                                                  [addnodes.literal_emphasis, \" | \"],\n+                                                  [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                                  \")\",\n+                                                  \" -- \",\n+                                                  \"this can be of multiple types\")],))\n+\n+    assert_node(desc_content[0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:function\": \"function_name\"})\n+\n+    assert_node(desc_content[0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"bytes\",\n+                **{\"py:module\": \"example\", \"py:function\": \"function_name\"})\n \n-def test_info_field_list_var(app):\n+    assert_node(desc_content[0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:function\": \"function_name\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..8e3c0c2 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,6 +3265,9 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n+from sympy import Symbol, sqf_list, poly\n+from sympy.abc import x, y\n+\n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n@@ -3276,7 +3279,26 @@ def test_factor_terms():\n     assert sqf_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n \n \n-def test_as_list():\n+def test_issue_8695():\n+    # Test case from the issue showing incorrect behavior\n+    p1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result1 = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p1) == expected_result1\n+\n+    # Test case showing correct behavior for distinct factors\n+    p2 = x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2\n+    expected_result2 = (1, [(x - 2, 1), (x**2 - 1, 2)])\n+    assert sqf_list(p2) == expected_result2\n+\n+    # Additional test case to verify similar behavior with a different polynomial\n+    p3 = (x - 1)**3 * (x - 2)**3\n+    expected_result3 = (1, [(x**2 - 3*x + 2, 3)])\n+    assert sqf_list(p3) == expected_result3\n+\n+    # Test case where all factors appear with multiplicity 1\n+    p4 = (x + 1) * (x - 1) * (x - 2) * (x - 3)\n+    expected_result4 = (1, [(x + 1, 1), (x - 1, 1), (x - 2, 1), (x - 3, 1)])\n+    assert sqf_list(p4) == expected_result4\n     # issue 14496\n     assert Poly(x**3 + 2, x, domain='ZZ').as_list() == [1, 0, 0, 2]\n     assert Poly(x**2 + y + 1, x, y, domain='ZZ').as_list() == [[1], [], [1, 1]]\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..031cd4c 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3241,8 +3241,13 @@ def test_keep_coeff():\n     assert _keep_coeff(x, 1/x) == 1\n     assert _keep_coeff(x + 1, S(2)) == u\n \n+from sympy import symbols, I, expand, factor\n \n-def test_poly_matching_consistency():\n+def test_issue_18895():\n+    x, y = symbols('x y')\n+    z = expand((x - 1)*(y - 1))\n+    assert factor(z) == (x - 1)*(y - 1)\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     # Test for this issue:\n     # https://github.com/sympy/sympy/issues/5514\n     assert I * Poly(x, x) == Poly(I*x, x)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..f2fa3ad 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -28,7 +29,11 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n-def test_structure():\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol instance should not have a __dict__ attribute\"\n+    with raises(AttributeError):\n+        _ = s.__dict__\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n     assert bool(b1)\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..ce55dbd 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -362,6 +362,15 @@ def test_Rational_new():\n         pass\n \n     assert Rational(mpq(2, 6)) == Rational(1, 3)\n+\n+    def test_rational_string_inputs():\n+        # Testing the issue described with Rational('0.5', '100')\n+        assert Rational('0.5', '100') == Rational(1, 200), \"Rational('0.5', '100') should be 1/200\"\n+        assert Rational('1.5', '100') == Rational(3, 200), \"Rational('1.5', '100') should be 3/200\"\n+        assert Rational('0.5', '50') == Rational(1, 100), \"Rational('0.5', '50') should be 1/100\"\n+        # Ensure other typical cases are correct\n+        assert Rational('1/2') == Rational(1, 2), \"Rational('1/2') should be 1/2\"\n+        assert Rational('3/4') == Rational(3, 4), \"Rational('3/4') should be 3/4\"\n     assert Rational(PythonRational(2, 6)) == Rational(1, 3)\n \n     assert Rational(2, 4, gcd=1).q == 4\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..0762984 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,6 +3201,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    def test_boundwidget_id_for_label_override_by_subwidget_attrs(self):\n+        \"\"\"\n+        If an id is provided in `Widget.attrs` via `ChoiceWidget.options`, it\n+        should override the generated ID in a subwidget of CheckboxSelectMultiple.\n+        \"\"\"\n+        class ChoiceForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'override_id'}),\n+            )\n+\n+        form = ChoiceForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'override_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'override_id_1')\n \n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..6df9923 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -302,6 +302,12 @@ def test_tool_line_handle():\n     assert tool_line_handle.positions == positions\n \n \n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n+from matplotlib.widgets import SpanSelector\n+from matplotlib.testing.widgets import do_event\n+\n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n \n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..bdd7a3b 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,64 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+def test_sparse_coder_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25)) \n+             * (1 - (x - center) ** 2 / width ** 2) \n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # Check that the underlying model fails to converge with low max_iter\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # Check that the underlying model converges w/o warnings with higher max_iter\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n+    # Additionally, test default behavior when max_iter is not set\n+    with pytest.warns(None) as default_record:\n+        default_model = SparseCoder(D_multi, transform_algorithm=transform_algorithm)\n+        default_model.fit_transform(X)\n+    assert not default_record.list\n+\n+import pytest\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..df7cb21 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -137,8 +137,29 @@ def test_multi_target_sample_weights():\n     w = [2., 1.]\n     rgr_w = MultiOutputRegressor(GradientBoostingRegressor(random_state=0))\n     rgr_w.fit(Xw, yw, w)\n-\n-    # unweighted, but with repeated samples\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from numpy.testing import assert_array_equal\n+\n+def test_cross_val_predict_with_multi_output_classifier_predict_proba():\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=0)\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    mo_clf.fit(X, Y)\n+    \n+    # Test cross_val_predict using 'predict'\n+    pred = cross_val_predict(mo_clf, X, Y, cv=5)\n+    assert pred.shape == Y.shape\n+    \n+    # Test cross_val_predict using 'predict_proba'\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+    assert len(pred_proba) == Y.shape[1]\n+    assert all(prob.shape == (X.shape[0], len(mo_clf.estimators_[i].classes_)) for i, prob in enumerate(pred_proba))\n+\n+    # Ensure predict_proba outputs are valid probability distributions\n+    for output_probs in pred_proba:\n+        assert_array_equal(output_probs.sum(axis=1), 1.0)\n     X = [[1, 2, 3], [1, 2, 3], [4, 5, 6]]\n     y = [[3.141, 2.718], [3.141, 2.718], [2.718, 3.141]]\n     rgr = MultiOutputRegressor(GradientBoostingRegressor(random_state=0))\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..5467380 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -158,7 +158,32 @@ def test_restify_pep_585():\n                                                    \"[:py:class:`int`, ...]]\")\n \n \n-@pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n+from sphinx.ext.autodoc import mock\n+from sphinx.util.typing import restify, stringify\n+\n+def test_restify_mock_with_inheritance():\n+    # Test restify with mocked modules and inherited classes\n+    with mock(['torch.nn']):\n+        import torch.nn as nn  # Mocked import\n+        class MockBase:\n+            pass\n+        class InheritedClass(MockBase, nn.Module):\n+            pass\n+        \n+        # Simulate the restification for inherited class\n+        assert restify(InheritedClass) == ':py:class:`tests.test_util_typing.InheritedClass`'\n+\n+def test_stringify_mock_with_inheritance():\n+    # Test stringify with mocked modules and inherited classes\n+    with mock(['torch.nn']):\n+        import torch.nn as nn  # Mocked import\n+        class MockBase:\n+            pass\n+        class InheritedClass(MockBase, nn.Module):\n+            pass\n+        \n+        # Simulate the stringification for inherited class\n+        assert stringify(InheritedClass) == 'tests.test_util_typing.InheritedClass'\n def test_restify_type_union_operator():\n     assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n     assert restify(int | str) == \":py:class:`int` | :py:class:`str`\"  # type: ignore\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..e4c4488 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,19 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    from sympy import Symbol, Product, S\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2  # Original test case\n+\n+    # Additional test cases to ensure the fix covers other scenarios\n+    assert p.subs(n, 1).doit() == S(3)  # For n=1, the product is (1 + 2^0) = 3\n+    assert p.subs(n, 3).doit() == S(35)/4  # For n=3, (3 + 2^0)*(3 + 2^(-1))*(3 + 2^(-2)) = 35/4\n+    assert p.subs(n, 4).doit() == S(315)/16  # For n=4, the correct product calculation\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +370,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}