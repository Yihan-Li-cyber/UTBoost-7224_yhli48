{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..aa006bb 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -128,6 +128,11 @@ def test_arith_oper():\n     with pytest.raises(ModelDefinitionError, match=r\"Unsupported operands for arithmetic operator: .*\"):\n         _arith_oper(sh1, map1)\n \n+import numpy as np\n+import pytest\n+from astropy.modeling import models as m\n+from astropy.modeling.separable import separability_matrix\n+from numpy.testing import assert_allclose\n \n @pytest.mark.parametrize(('compound_model', 'result'), compound_models.values())\n def test_separable(compound_model, result):\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..563a57b 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,10 +1,11 @@\n+\n import gc\n import warnings\n-\n+from astropy.io.fits import connect\n import numpy as np\n import pytest\n from numpy.testing import assert_allclose, assert_array_equal\n-\n+from astropy.io.fits import connect\n from astropy import units as u\n from astropy.io import fits\n from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..f9d721a 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -136,6 +136,34 @@ class TestHeaderFunctions(FitsTestCase):\n             \"FLOATNUM= -4.6737463674763E+032\"\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for avoiding unnecessary float expansion.\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        \n+        # Original problematic case\n+        c1 = fits.Card(k, 0.009125, com)\n+        expected_str1 = f\"{k} = 0.009125 / {com}\"\n+        assert str(c1)[: len(expected_str1)] == expected_str1\n+        \n+        # Other float cases to ensure consistency\n+        c2 = fits.Card(k, 8.95, com)\n+        expected_str2 = f\"{k} = 8.95 / {com}\"\n+        assert str(c2)[: len(expected_str2)] == expected_str2\n+        \n+        c3 = fits.Card(k, -99.9, com)\n+        expected_str3 = f\"{k} = -99.9 / {com}\"\n+        assert str(c3)[: len(expected_str3)] == expected_str3\n+        \n+        # Additional test for float with more precision\n+        c4 = fits.Card(k, 0.123456789012345, com)\n+        expected_str4 = f\"{k} = 0.123456789012345 / {com}\"\n+        assert str(c4)[: len(expected_str4)] == expected_str4\n \n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..7217748 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,19 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_issue_vla_identical_files(self):\n+        \"\"\"\n+        Test for the specific issue reported where FITSDiff indicates differences\n+        between identical files containing VLAs.\n+        \"\"\"\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        hdu.writeto('test_vla_diffbug.fits', overwrite=True)\n+\n+        diff = fits.FITSDiff('test_vla_diffbug.fits', 'test_vla_diffbug.fits')\n+\n+        assert diff.identical, \"FITSDiff should report identical for the same file\"\n+        assert diff.diff_total == 0, \"There should be no differences reported\"\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..fce4e6a 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,21 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_with_properties():\n+    class BaseWithProperty(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"\"\"BAR\"\"\"\n+            pass\n+\n+    class SubclassWithProperty(BaseWithProperty):\n+        @property\n+        def bar(self):\n+            pass\n \n-def test_set_locale():\n+    if BaseWithProperty.bar.__doc__ is not None:\n+        # Check if Subclass inherits the docstring for property `bar`\n+        assert SubclassWithProperty.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..ed250c3 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -198,7 +198,20 @@ def test_unknown_unit3():\n         unit5 = u.Unit(None)\n \n \n-@raises(TypeError)\n+def test_unrecognized_unit_equality_with_none():\n+    # Create an unrecognized unit with parse_strict set to 'silent'\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    \n+    # Test equality with None\n+    assert (unit == None) is False  # noqa: Explicitly using `==` for this test\n+\n+    # Test inequality with None\n+    assert unit != None  # noqa\n+    assert None != unit  # Test reverse inequality\n+    \n+    # Test None is not in a list with unit\n+    assert unit not in (None, u.m)\n+    assert unit not in [None]\n def test_invalid_scale():\n     x = ['a', 'b', 'c'] * u.m\n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..7f49cf0 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -62,8 +62,25 @@ def test_find_mod_objs():\n     assert 'collections.namedtuple' not in fqns\n     assert namedtuple not in objs\n \n+from distutils.version import LooseVersion\n+from astropy.utils import minversion\n \n def test_minversion():\n+    # Test case for the issue described where LooseVersion fails\n+    # when comparing certain types of versions.\n+    # This will ensure the minversion works for the described cases in the issue.\n+    assert not minversion('numpy', '1.14dev'), \"Expected False as '1.14dev' is a prerelease compared to standard versions\"\n+\n+    # Direct LooseVersion test to verify the described issue.\n+    # This should help expose the original problem.\n+    loose_version_comparison_issue = False\n+    try:\n+        # This should raise a TypeError indicating that the underlying issue is present.\n+        _ = LooseVersion('1.14.3') >= LooseVersion('1.14dev')\n+    except TypeError:\n+        loose_version_comparison_issue = True\n+\n+    assert loose_version_comparison_issue, \"LooseVersion should fail when comparing '1.14.3' with '1.14dev'\"\n     from types import ModuleType\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n@@ -72,4 +89,4 @@ def test_minversion():\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "",
  "astropy__astropy-8872": "",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..0717487 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -215,6 +215,16 @@ TEST_DATA = [\n \n     (URLValidator(EXTENDED_SCHEMES), 'file://localhost/path', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n+    \n+    # Test cases for validating that URLValidator rejects URLs with invalid characters in username and password.\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..4112688 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When  # Make sure the necessary imports are present\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -388,8 +390,35 @@ class AggregateTestCase(TestCase):\n \n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n+    \n+    def test_count_distinct_expression_with_case(self):\n+        # Check distinct count with a Case condition, specifically for the reported issue.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_with_different_case(self):\n+        # Add a test case to validate a different condition.\n+        aggs = Book.objects.aggregate(\n+            distinct_high_ratings=Count(Case(When(rating__gt=3, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_high_ratings'], 5)\n \n-    def test_count_star(self):\n+    def test_count_distinct_with_no_match_case(self):\n+        # Test case where the condition doesn't match any records.\n+        aggs = Book.objects.aggregate(\n+            distinct_unmatched=Count(Case(When(rating__gt=10, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_unmatched'], 0)\n+\n+    def test_count_distinct_case_all_records(self):\n+        # Test case where the condition matches all records.\n+        aggs = Book.objects.aggregate(\n+            distinct_all=Count(Case(When(pages__gte=0, then='rating')), distinct=True),\n+        )\n+        # Assuming that 4 is the correct result for the current dataset and distinct ratings\n+        self.assertEqual(aggs['distinct_all'], 4)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..d94c68c 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1100,6 +1100,9 @@ class OverrideSettingsTests(SimpleTestCase):\n         django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertIsNone(default_storage.file_permissions_mode)\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o644):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..1683b71 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -11,11 +12,14 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n     def _run_it(self, dbinfo):\n         \"\"\"\n         That function invokes the runshell command, while mocking\n-        subprocess.call. It returns a 2-tuple with:\n+        subprocess.run. It returns a 2-tuple with:\n         - The command line list\n         - The content of the file pointed by environment PGPASSFILE, or None.\n         \"\"\"\n-        def _mock_subprocess_call(*args):\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.subprocess_args = list(*args)\n+            self.pgpassword = env.get('PGPASSWORD') if env else None\n+            return subprocess.CompletedProcess(args, 0)\n             self.subprocess_args = list(*args)\n             if 'PGPASSFILE' in os.environ:\n                 with open(os.environ['PGPASSFILE']) as f:\n@@ -25,7 +29,7 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             return 0\n         self.subprocess_args = None\n         self.pgpass = None\n-        with mock.patch('subprocess.call', new=_mock_subprocess_call):\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n@@ -101,9 +105,27 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_pgpassword_set_with_subprocess_run(self):\n+        \"\"\"Test that PGPASSWORD is set correctly in the environment when using subprocess.run.\"\"\"\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'testuser',\n+            'password': 'testpassword',\n+            'host': 'localhost',\n+            'port': '5432',\n+        }\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            # Check that PGPASSWORD environment variable is set correctly.\n+            self.assertEqual(env.get('PGPASSWORD'), 'testpassword')\n+            return subprocess.CompletedProcess(args, 0)\n+        \n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n-        def _mock_subprocess_call(*args):\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.subprocess_args = list(*args)\n+            self.pgpassword = env.get('PGPASSWORD') if env else None\n+            return subprocess.CompletedProcess(args, 0)\n             handler = signal.getsignal(signal.SIGINT)\n             self.assertEqual(handler, signal.SIG_IGN)\n \n@@ -113,4 +135,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..f872563 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n \n \n @override_settings(\n@@ -55,7 +56,25 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_content_type_rename_conflict(self):\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Create content type in 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        \n+        # Rename model using migration on 'other' database\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        \n+        # Verify that the old content type no longer exists, and the new one does\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        \n+        # Rollback the migration on 'other' database\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        \n+        # Verify rollback\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         ContentType.objects.create(app_label='contenttypes_tests', model='renamedfoo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0)\n@@ -63,4 +82,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..b0819ab 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,43 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+        # Test get_inlines method\n+        def test_modeladmin_get_inlines_method(self):\n+            class MediaInline(GenericTabularInline):\n+                model = Media\n+\n+            class AlternateInline(GenericTabularInline):\n+                model = Media\n+\n+            class EpisodeAdmin(admin.ModelAdmin):\n+                inlines = (AlternateInline, MediaInline)\n+\n+                def get_inlines(self, request, obj=None):\n+                    if hasattr(request, 'name'):\n+                        if request.name == 'alternate':\n+                            return self.inlines[:1]\n+                        elif request.name == 'media':\n+                            return self.inlines[1:2]\n+                    return []\n+\n+            request1 = self.factory.get('/')\n+            request2 = self.factory.get('/')\n+            request3 = self.factory.get('/')\n+\n+            ma = EpisodeAdmin(Episode, self.site)\n+\n+            # Initial condition when 'name' is not set\n+            self.assertEqual(ma.get_inlines(request1, None), [])\n+            self.assertEqual(ma.get_inline_instances(request1), [])\n+\n+            # When 'name' is 'alternate'\n+            request2.name = 'alternate'\n+            self.assertEqual(ma.get_inlines(request2, None), (AlternateInline,))\n+            self.assertEqual(type(ma.get_inline_instances(request2)[0]), AlternateInline)\n+\n+            # When 'name' is 'media'\n+            request3.name = 'media'\n+            self.assertEqual(ma.get_inlines(request3, None), (MediaInline,))\n+            self.assertEqual(type(ma.get_inline_instances(request3)[0]), MediaInline)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..fb7bd5e 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\"\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -248,6 +248,24 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n+    def test_username_with_trailing_newline_unicode(self):\n+        invalid_usernames = [\"user\\n\", \"name\\n\"]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_username_with_trailing_newline_ascii(self):\n+        invalid_usernames = [\"user\\n\", \"name\\n\"]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n@@ -258,4 +276,22 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n+\n+    def test_username_with_trailing_newline_unicode(self):\n+        invalid_usernames = [\"user\\n\", \"name\\n\"]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_username_with_trailing_newline_ascii(self):\n+        invalid_usernames = [\"user\\n\", \"name\\n\"]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..9671bb6 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -2,7 +2,7 @@ import os\n \n from django.core.exceptions import ImproperlyConfigured\n from django.template import Context\n-from django.template.engine import Engine\n+from django.template import Context, Template, Engine\n from django.test import SimpleTestCase, override_settings\n \n from .utils import ROOT, TEMPLATE_DIR\n@@ -22,7 +22,36 @@ class RenderToStringTest(SimpleTestCase):\n         )\n \n \n-class GetDefaultTests(SimpleTestCase):\n+class AutoescapeAttributeTests(SimpleTestCase):\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+    \n+    def test_autoescape_on_with_context_object(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        context = Context({'obj': '<b>'})\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', context),\n+            'obj:&lt;b&gt;\\n',\n+        )\n+\n+    def test_autoescape_off_with_context_object(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        context = Context({'obj': '<b>'})\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', context),\n+            'obj:<b>\\n',\n+        )\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..1c8abed 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,6 +501,36 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n+    def test_loading_namespace_package_with_multiple_migrations(self):\n+        \"\"\"\n+        Migration directories with multiple migration files and without an __init__.py file are loaded correctly.\n+        \"\"\"\n+        with self.temporary_migration_module(module='migrations.test_migrations_namespace_package') as migration_dir:\n+            # Creating additional dummy migration files for testing\n+            with open(os.path.join(migration_dir, '0002_second.py'), 'w') as f:\n+                f.write('''\n+from django.db import migrations, models\n+\n+class Migration(migrations.Migration):\n+\n+    dependencies = [\n+        ('migrations', '0001_initial'),\n+    ]\n+\n+    operations = [\n+        migrations.AddField(\n+            model_name='author',\n+            name='birthday',\n+            field=models.DateField(null=True),\n+        ),\n+    ]\n+                ''')\n+            migration_loader = MigrationLoader(connection)\n+            self.assertEqual(\n+                migration_loader.graph.forwards_plan(('migrations', '0002_second')),\n+                [('migrations', '0001_initial'), ('migrations', '0002_second')],\n+            )\n+\n     def test_ignore_files(self):\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..f9c3281 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -665,7 +665,45 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n         self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n-    def test_inline_change_m2m_change_perm(self):\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines should show but not allow adding\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines should show but not allow changes\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # The field in the inline should be read-only.\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n         permission = Permission.objects.get(codename='change_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.author_change_url)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..7165dc3 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,6 +2900,12 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n+    def test_empty_fields_argument(self):\n+        \"\"\"model_to_dict should return an empty dict for an empty fields list.\"\"\"\n+        bw = BetterWriter.objects.create(name='Sample Writer', score=10)\n+        result = model_to_dict(bw, fields=[])\n+        self.assertEqual(result, {})\n+\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..d251b50 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n@@ -464,7 +466,25 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_bulk_delete(self):\n+        u1 = User.objects.create()\n+        u2 = User.objects.create()\n+        User.objects.filter(id=u1.id).delete()\n+        self.assertIsNone(u1.pk)\n+        self.assertIsNotNone(u2.pk)  # Ensure other instances are not affected\n+\n+    def test_fast_delete_new_instance(self):\n+        u = User()\n+        u.delete()  # This should not raise an error and should keep u.pk as None\n+        self.assertIsNone(u.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..1bffa2a 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,16 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # New tests to ensure small numbers are formatted as expected\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-201', 2, '0.00'),\n+            ('1e-202', 10, '0.0000000000'),\n+            ('1e-300', 5, '0.00000'),\n+            ('5e-201', 2, '0.00'),\n+            ('5e-202', 3, '0.000'),\n+            ('9.999e-201', 2, '0.00'),\n+            ('9.999e-202', 5, '0.00000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..1c73b9d 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n",
  "django__django-11265": "",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..94c913b 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -29,6 +29,17 @@ class TestUtilsHtml(SimpleTestCase):\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n         )\n+        # Testing difference between Django's escape and standard library's escape for single quote\n+        additional_items = [\n+            (\"'\", '&#x27;'),  # Common output for html.escape()\n+        ]\n+\n+        for value, output in additional_items:\n+            with self.subTest(value=value, output=output):\n+                for pattern in patterns:\n+                    with self.subTest(value=value, output=output, pattern=pattern):\n+                        self.check_output(escape, pattern % value, pattern % output)\n+                        self.check_output(escape, lazystr(pattern % value), pattern % output)\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n         for value, output in items:\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..5661b46 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,6 +243,30 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n+    def test_skip_checks_functionality(self):\n+        \"\"\"\n+        Test that the --skip-checks option is properly preventing system checks from running.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # Invalid STATICFILES_DIRS setting to trigger a check failure if checks are not skipped.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_skip_checks_absent_functionality(self):\n+        \"\"\"\n+        Test that the command fails with a system check error when --skip-checks is not provided.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # Invalid STATICFILES_DIRS setting to trigger a check failure if checks are not skipped.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('SystemCheckError', err)\n+        self.assertNoOutput(out)\n+\n     def test_disallowed_abbreviated_options(self):\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..03d91f8 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.test.utils import override_settings\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -12,4 +14,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..9f110cc 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -261,8 +261,21 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n         )\n         self.assertEqual(authenticate(username='test', password='test'), user)\n \n-\n-@override_settings(AUTH_USER_MODEL='auth_tests.ExtensionUser')\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_with_none_username_and_password(self):\n+        \"\"\"\n+        authenticate() should not make a database query when username or password is None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {'username': None, 'password': 'test'},\n+            {'username': 'test', 'password': None},\n+            {'username': None, 'password': None},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n class ExtensionUserModelBackendTest(BaseModelBackendTest, TestCase):\n     \"\"\"\n     Tests for the ModelBackend using the custom ExtensionUser model.\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..9df0b70 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,15 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_union_with_different_values_calls(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        # First check with 'name' and 'order'\n+        with_name_order = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(with_name_order, ('a', 2))\n+        # Then check with only 'order'\n+        with_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(with_order, (2,))\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..378e0c6 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..6d52905 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -2,6 +2,8 @@ from datetime import datetime\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from django.db.models.expressions import OrderBy\n+from datetime import datetime\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n@@ -462,6 +464,60 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n+    def test_ordering_with_expression_in_meta(self):\n+        \"\"\"\n+        Test that ordering works when Meta.ordering contains expressions.\n+        This ensures the original issue is resolved.\n+        \"\"\"\n+        # Set up test data specific to this case\n+        ca1 = ChildArticle.objects.create(\n+            headline='Child Article 1',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='Child Article 2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='Child Article 3',\n+            pub_date=datetime(2005, 7, 28),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(\n+            headline='Child Article 4',\n+            pub_date=datetime(2005, 7, 28)\n+        )\n+        articles = OrderedByFArticle.objects.all()\n+        self.assertEqual(articles[0], ca2)\n+        self.assertEqual(articles[1], ca1)\n+        self.assertEqual(articles[2], ca3)\n+        self.assertEqual(articles[3], ca4)\n+\n+    def test_order_by_with_expression_directly(self):\n+        \"\"\"\n+        Test the order_by method directly with an expression.\n+        \"\"\"\n+        ca1 = ChildArticle.objects.create(\n+            headline='Test Article 1',\n+            pub_date=datetime(2005, 7, 29),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='Test Article 2',\n+            pub_date=datetime(2005, 7, 28),\n+            author=self.author_1,\n+        )\n+        articles = ChildArticle.objects.order_by(OrderBy(F('pub_date').desc(), nulls_last=True))\n+        self.assertEqual(articles[0], ca1)\n+        self.assertEqual(articles[1], ca2)\n+        articles.filter(headline='Article 3').update(author=self.author_1)\n+        self.assertQuerysetEqual(\n+            articles, ['Article 1', 'Article 4', 'Article 3', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n     def test_deprecated_values_annotate(self):\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..6adf153 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -403,7 +403,27 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(aggs['distinct_ratings'], 4)\n \n-    def test_non_grouped_annotation_not_in_group_by(self):\n+    def test_distinct_avg_aggregate(self):\n+        \"\"\" Test AVG with DISTINCT \"\"\"\n+        ratings_avg = Book.objects.aggregate(avg=Avg('rating', distinct=True))\n+        self.assertEqual(ratings_avg['avg'], 4.125)\n+    \n+    def test_distinct_sum_aggregate(self):\n+        \"\"\" Test SUM with DISTINCT \"\"\"\n+        ratings_sum = Book.objects.aggregate(total=Sum('rating', distinct=True))\n+        self.assertEqual(ratings_sum['total'], 16.5)\n+        \n+    def test_distinct_min_aggregate(self):\n+        \"\"\" Test MIN with DISTINCT \"\"\"\n+        # Even though DISTINCT is allowed, it is pointless for MIN, but should not fail\n+        ratings_min = Book.objects.aggregate(min_rating=Min('rating', distinct=True))\n+        self.assertEqual(ratings_min['min_rating'], 3)\n+        \n+    def test_distinct_max_aggregate(self):\n+        \"\"\" Test MAX with DISTINCT \"\"\"\n+        # Even though DISTINCT is allowed, it is pointless for MAX, but should not fail\n+        ratings_max = Book.objects.aggregate(max_rating=Max('rating', distinct=True))\n+        self.assertEqual(ratings_max['max_rating'], 5)\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..46c0ef2 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1099,7 +1099,29 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel'])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='EntityA', new_name='RenamedEntityA')\n \n-    def test_fk_dependency(self):\n+    def test_uuid_to_fk_dependency(self):\n+        \"\"\"\n+        Tests that changing a UUIDField to a ForeignKey creates the appropriate dependency.\n+        \"\"\"\n+        app1_initial = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        app1_modified = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+        changes = self.get_changes([app1_initial, app2], [app1_modified, app2])\n+        # Ensure that the dependency is created for the ForeignKey\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, [\"AlterField\"])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [(\"testapp2\", \"__first__\")])\n         \"\"\"Having a ForeignKey automatically adds a dependency.\"\"\"\n         # Note that testapp (author) has no dependencies,\n         # otherapp (book) depends on testapp (author),\n@@ -2399,4 +2421,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "",
  "django__django-11790": "",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..064b509 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -269,6 +269,24 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum('a-value')\", {'import migrations.test_writer'})\n         )\n+\n+        # Additional test for translated enum values\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        field_translated = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            max_length=128\n+        )\n+        string_translated = MigrationWriter.serialize(field_translated)[0]\n+        self.assertEqual(\n+            string_translated,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\"migrations.test_writer.BinaryEnum(b'a-value')\", {'import migrations.test_writer'})\n",
  "django__django-11848": "",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..d8d37f4 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3686,6 +3686,41 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertIsInstance(p.files, MultiValueDict)\n \n \n+from django.forms import CharField, Form\n+import copy\n+from unittest import TestCase\n+\n+class FormFieldDeepCopyTests(TestCase):\n+    def test_field_deep_copy_error_messages(self):\n+        # Original test patch which ensures deepcopy results in distinct error_messages dicts.\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_field_deep_copy_error_messages_modification(self):\n+        # Additional test to check if modifying the error_messages dictionary in the copy\n+        # does not affect the original field's error_messages.\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Initial error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+\n+        # Update the error message in the copied field\n+        field_copy.error_messages['invalid'] = 'Modified error message.'\n+\n+        # Ensure the original field's error_messages are not changed\n+        self.assertEqual(field.error_messages['invalid'], 'Initial error message.')\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Modified error message.')\n+\n class CustomRenderer(DjangoTemplates):\n     pass\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..f6a2792 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..7ae3730 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,27 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+class EnumFieldReturnTypeTests(TestCase):\n+    \n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        # Ensure that the created object has the correct type (str)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        # Ensure that the retrieved object has the correct type (str)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+from django.db import models\n+from django.test import SimpleTestCase, TestCase\n+from django.utils.translation import gettext_lazy as _\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n@@ -40,6 +61,15 @@ class Gender(models.TextChoices):\n     __empty__ = '(Undeclared)'\n \n \n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+\n class ChoicesTests(SimpleTestCase):\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n@@ -110,6 +140,12 @@ class ChoicesTests(SimpleTestCase):\n         self.assertEqual(Gender.values[0], None)\n         self.assertEqual(Gender.names[0], '__empty__')\n \n+    def test_enum_str(self):\n+        for cls in [Gender, Suit, YearInSchool, Vehicle]:\n+            for member in cls:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(cls[member.name]), str(member.value))\n+\n     def test_textchoices_functional_api(self):\n         Medal = models.TextChoices('Medal', 'GOLD SILVER BRONZE')\n         self.assertEqual(Medal.labels, ['Gold', 'Silver', 'Bronze'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..2f0abe9 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,7 +148,36 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n-class GetFieldDisplayTests(SimpleTestCase):\n+class FooBar(models.Model):\n+    foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')], max_length=3)\n+\n+    def get_foo_bar_display(self):\n+        return \"something_else\"\n+\n+class OverridingGetFieldDisplayTest(TestCase):\n+    def test_override_get_FIELD_display(self):\n+        \"\"\"Test the overridden get_foo_bar_display method works.\"\"\"\n+        obj = FooBar(foo_bar=1)\n+        self.assertEqual(obj.get_foo_bar_display(), \"something_else\")\n+    \n+    def test_default_get_FIELD_display(self):\n+        \"\"\"Test the default get_FIELD_display behavior for a different instance.\"\"\"\n+        class AnotherModel(models.Model):\n+            status = models.CharField(max_length=20, choices=[(1, 'Active'), (2, 'Inactive')])\n+\n+        obj = AnotherModel(status=1)\n+        self.assertEqual(obj.get_status_display(), \"Active\")\n+\n+    def test_override_with_different_field_name(self):\n+        \"\"\"Test overriding get_FIELD_display with different field name and type.\"\"\"\n+        class TestModel(models.Model):\n+            number = models.IntegerField(choices=[(1, 'One'), (2, 'Two')])\n+\n+            def get_number_display(self):\n+                return \"Overridden\"\n+\n+        obj = TestModel(number=1)\n+        self.assertEqual(obj.get_number_display(), \"Overridden\")\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..b4707a1 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db.models import Index\n+from django.db import connection\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db.models import Index\n+from django.db import connection\n \n \n class SchemaIndexesTests(TestCase):\n@@ -22,7 +26,45 @@ class SchemaIndexesTests(TestCase):\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n \n-    def test_index_name_hash(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names should be deterministic.\n         \"\"\"\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..c050b1d 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,7 +8,7 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n-from django.db.models.sql.where import OR\n+from django.db.models.sql.where import OR, Exact\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n \n@@ -102,7 +103,20 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(a_isnull, RelatedIsNull)\n         self.assertIsInstance(a_isnull.lhs, SimpleCol)\n         self.assertEqual(a_isnull.lhs.target, ObjectC._meta.get_field('objecta'))\n-        b_isnull = where.children[1]\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_pickledfield_lookup_with_list(self):\n+        query = Query(Item)\n+        # Assuming PickledField is a type of field here for demonstration purposes.\n+        where = query.build_where(Q(pickled_field__exact=['data1', 'data2']))\n+        pickled_exact = where.children[0]\n+        self.assertIsInstance(pickled_exact, Exact)\n+        self.assertEqual(pickled_exact.rhs, ['data1', 'data2'])\n         self.assertIsInstance(b_isnull, RelatedIsNull)\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n",
  "django__django-12125": "",
  "django__django-12143": "",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..ccbb812 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,8 +1,10 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n     docutils_is_available, parse_docstring, parse_rst, trim_docstring,\n )\n+from django.test.utils import captured_stderr\n \n from .tests import AdminDocsSimpleTestCase\n \n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..b212d17 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1102,8 +1102,36 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n                 }\n             }\n         )\n+    def test_split_arrayfield_with_boolean_values(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n \n-    def test_render(self):\n+        # Test with all True values\n+        context = widget.get_context('name', [True, True, True])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {'checked': True}, {'checked': True}]\n+        )\n+\n+        # Test with all False values\n+        context = widget.get_context('name', [False, False, False])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}]\n+        )\n+\n+        # Test mixed values, True followed by False\n+        context = widget.get_context('name', [True, False, True])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}, {'checked': True}]\n+        )\n+    \n+        # Test with empty array\n+        context = widget.get_context('name', [])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            []\n+        )\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n             \"\"\"\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..04ef3fa 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -256,6 +256,10 @@ class SmallPKData(models.Model):\n class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n \n+class UUIDDefaultData(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid4)\n+    name = models.CharField(blank=True, max_length=100)\n+\n \n class FKToUUID(models.Model):\n     data = models.ForeignKey(UUIDData, models.CASCADE)\n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..85451bc 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,8 +77,24 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world')\n         ]\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        additional_tests = [\n+            # Additional tests to check for multiple keyword arguments error handling\n+            ('{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}',\n+             \"'hello' received unexpected keyword argument 'greeting'\")\n+        ]\n+\n+        for entry in additional_tests:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[1]):\n+                t = self.engine.from_string(entry[0])\n+                t.render(c)\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -101,8 +117,24 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world')\n         ]\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        additional_tests = [\n+            # Additional tests to check for multiple keyword arguments error handling\n+            ('{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}',\n+             \"'hello' received unexpected keyword argument 'greeting'\")\n+        ]\n+\n+        for entry in additional_tests:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[1]):\n+                t = self.engine.from_string(entry[0])\n+                t.render(c)\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -190,8 +222,24 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world')\n+        ]\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        additional_tests = [\n+            # Additional tests to check for multiple keyword arguments error handling\n+            ('{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}',\n+             \"'hello' received unexpected keyword argument 'greeting'\")\n         ]\n \n+        for entry in additional_tests:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[1]):\n+                t = self.engine.from_string(entry[0])\n+                t.render(c)\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..d050760 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -15,6 +16,7 @@ from django.forms import (\n     TimeField, ValidationError, forms,\n )\n from django.forms.renderers import DjangoTemplates, get_default_renderer\n+from django.forms import FileInput\n from django.forms.utils import ErrorList\n from django.http import QueryDict\n from django.template import Context, Template\n@@ -2478,7 +2480,23 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n \n-    def test_filefield_initial_callable(self):\n+    def test_filefield_with_fileinput_not_required_when_initial(self):\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput)\n+\n+        # Case where initial file data exists\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+        # Case where no initial data is present and required should be set\n+        f = FileForm(data={}, files={}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n \n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..c4d9f80 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -6,6 +7,7 @@ import uuid\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -143,7 +145,18 @@ class ChoicesTests(SimpleTestCase):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n-    def test_str(self):\n+    def test_templates_enum(self):\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', _('Freshman')\n+            SOPHOMORE = 'SO', _('Sophomore')\n+            JUNIOR = 'JR', _('Junior')\n+            SENIOR = 'SR', _('Senior')\n+            \n+            do_not_call_in_templates = True\n+\n+        template = Template('{{ year_in_school.FRESHMAN.label }}|{{ year_in_school.FRESHMAN.value }}')\n+        output = template.render(Context({'year_in_school': YearInSchool}))\n+        self.assertEqual(output, 'Freshman|FR')\n         for test in [Gender, Suit, YearInSchool, Vehicle]:\n             for member in test:\n                 with self.subTest(member=member):\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..4d5879b 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -138,8 +138,23 @@ class UtilsTests(SimpleTestCase):\n                 resolved_value = display_for_field(resolved_value, field, self.empty_value)\n \n             self.assertEqual(value, resolved_value)\n-\n-    def test_null_display_for_field(self):\n+    def test_json_display_for_field_readonly(self):\n+        \"\"\"\n+        Test JSONField is properly rendered as JSON string when readonly in admin.\n+        \"\"\"\n+        tests = [\n+            ({'foo': 'bar'}, '{\"foo\": \"bar\"}'),  # Regular dict\n+            ({'nested': {'key': 'value'}}, '{\"nested\": {\"key\": \"value\"}}'),  # Nested dict\n+            ([1, 2, 3], '[1, 2, 3]'),  # List\n+            ('string', '\"string\"'),  # String value should be wrapped in quotes\n+            (None, self.empty_value),  # None should use empty display value\n+            (123, '123'),  # Integer should be converted to string\n+            (3.14, '3.14'),  # Float should be converted to string\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n         \"\"\"\n         Regression test for #12550: display_for_field should handle None\n         value.\n",
  "django__django-12325": "",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..a202be7 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,12 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        Test the default value of SECURE_REFERRER_POLICY is 'same-origin'.\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -254,4 +259,12 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+\n+    def test_referrer_policy_default_setting(self):\n+        \"\"\"\n+        When SECURE_REFERRER_POLICY is not set, it should default to 'same-origin'.\n+        \"\"\"\n+        # Assuming the default setting applies if the SECURE_REFERRER_POLICY is not set at all.\n+        with self.settings():\n+            self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n",
  "django__django-12663": "",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..f6c1bc3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, ManyToManyField, UUIDField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -116,8 +116,19 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n     def test_filtered_many_to_many(self):\n         self.assertFormfield(Band, 'members', widgets.FilteredSelectMultiple,\n                              filter_vertical=['members'])\n-\n-    def test_formfield_overrides(self):\n+    def test_formfield_overrides_m2m_filter_widget(self):\n+        \"\"\"\n+        The autocomplete_fields, raw_id_fields, filter_vertical, and\n+        filter_horizontal widgets for ManyToManyFields may be overridden by\n+        specifying a widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {ManyToManyField: {'widget': forms.CheckboxSelectMultiple}}\n+        \n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n         self.assertFormfield(Event, 'start_date', forms.TextInput,\n                              formfield_overrides={DateField: {'widget': forms.TextInput}})\n \n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..e40a869 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -8,6 +8,7 @@ from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n+from django.test.utils import isolate_apps\n from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import (\n@@ -194,7 +195,33 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    @isolate_apps('lookup')\n+    def test_in_bulk_unique_constraint(self):\n+        # Create a temporary model with a unique constraint\n+        class TestModel(models.Model):\n+            field1 = models.CharField(max_length=100)\n+            field2 = models.IntegerField()\n+            \n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['field1'], name='unique_field1')\n+                ]\n+        \n+        # Create instances\n+        obj1 = TestModel.objects.create(field1='unique_value1', field2=10)\n+        obj2 = TestModel.objects.create(field1='unique_value2', field2=20)\n+        \n+        # Test in_bulk with the field having a unique constraint\n+        self.assertEqual(\n+            TestModel.objects.in_bulk([obj1.field1, obj2.field1], field_name='field1'),\n+            {obj1.field1: obj1, obj2.field1: obj2},\n+        )\n+\n+    def test_non_unique_constraint(self):\n+        # Test in_bulk with a field having a non-unique constraint should raise ValueError\n+        msg = \"in_bulk()'s field_name must be a unique field but 'non_unique_field' isn't.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            self.NonUniqueModel.objects.in_bulk(field_name='non_unique_field')\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..368fe6a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,25 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_group_by_constant_expression(self):\n+        # Ensuring constant values are not part of the GROUP BY clause\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        annotated_query_set = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+        sql_query = str(annotated_query_set.query)\n+        self.assertNotIn('GROUP BY \"model\".\"column_a\", 3', sql_query)\n+        self.assertIn('GROUP BY \"model\".\"column_a\"', sql_query)\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..0be5e4e 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1211,7 +1211,33 @@ class Queries1Tests(TestCase):\n         )\n \n \n-class Queries2Tests(TestCase):\n+class NotSupportedErrorTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.brand_metadata = ProductMetaDataType.objects.create(label=\"Brand\", filterable=False)\n+        cls.filtered_metadata = ProductMetaDataType.objects.create(label=\"Filtered\", filterable=True)\n+        cls.product_metadata_one = ProductMetaData.objects.create(\n+            value=\"Dark Vador\",\n+            metadata_type=cls.brand_metadata,\n+            product_id=1,                   # Assuming product_id is allowed in creation\n+            marketplace_id=1                # Assuming marketplace_id is allowed in creation\n+        )\n+        cls.product_metadata_two = ProductMetaData.objects.create(\n+            value=\"Darth Vader\",\n+            metadata_type=cls.filtered_metadata,\n+            product_id=1,\n+            marketplace_id=1\n+        )\n+\n+    def test_query_with_non_filterable_metadata_type(self):\n+        with self.assertRaises(NotSupportedError):\n+            list(ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.brand_metadata))\n+\n+    def test_query_with_filterable_metadata_type(self):\n+        qs = ProductMetaData.objects.filter(value=\"Darth Vader\", metadata_type=self.filtered_metadata)\n+        self.assertGreater(qs.count(), 0)\n+\n+class Queries2Tests(TestCase):  # Ensuring existing tests are untouched\n     @classmethod\n     def setUpTestData(cls):\n         Number.objects.create(num=4)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..f1e44db 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,31 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        article_1 = Article.objects.create(\n+            author=author_1, headline=\"Article 1\", pub_date=\"2022-01-01\"\n+        )\n+        article_2 = Article.objects.create(\n+            author=author_2, headline=\"Article 2\", pub_date=\"2022-01-02\"\n+        )\n+        article_1.author.name = \"Editor 1\"\n+        article_1.author.save()\n+        article_2.author.name = \"Editor 2\"\n+        article_2.author.save()\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by(\"author__name\"), \n+            [\"Article 1\", \"Article 2\"], \n+            attrgetter(\"headline\")\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by(\"author__name\"), \n+            [\"Article 2\", \"Article 1\"], \n+            attrgetter(\"headline\")\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +378,31 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_order_by_self_referential_fk(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        article_1 = Article.objects.create(\n+            author=author_1, headline=\"Article 1\", pub_date=\"2022-01-01\"\n+        )\n+        article_2 = Article.objects.create(\n+            author=author_2, headline=\"Article 2\", pub_date=\"2022-01-02\"\n+        )\n+        article_1.author.name = \"Editor 1\"\n+        article_1.author.save()\n+        article_2.author.name = \"Editor 2\"\n+        article_2.author.save()\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by(\"author__name\"), \n+            [\"Article 1\", \"Article 2\"], \n+            attrgetter(\"headline\")\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by(\"author__name\"), \n+            [\"Article 2\", \"Article 1\"], \n+            attrgetter(\"headline\")\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..ec746cb 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1644,8 +1644,32 @@ class ModelFormBasicTests(TestCase):\n         obj.name = 'Alice'\n         obj.full_clean()\n \n+from django.test import TestCase\n+from django import forms\n+from .models import Article, Writer\n+import datetime\n \n class ModelMultipleChoiceFieldTests(TestCase):\n+    def test_foreign_key_validation_uses_base_manager(self):\n+        class FavoriteArticlesForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteAricles\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                # Set the queryset to use the base manager to include archived articles.\n+                self.fields['article'].queryset = Article._base_manager.all()\n+        \n+        # Create an archived Article instance.\n+        archived_article = Article.objects.create(title='Archived Article', archived=True)\n+        data = {'article': archived_article.pk}\n+        form = FavoriteArticlesForm(data)\n+        \n+        # The form should be valid because it uses the base manager which does not filter out archived articles.\n+        self.assertIs(form.is_valid(), True)\n+        instance = form.save()\n+        self.assertEqual(instance.article, archived_article)\n     @classmethod\n     def setUpTestData(cls):\n         cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..71a996b 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,6 +867,37 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n+    def test_reference_mixed_case_app_label(self):\n+        \"\"\"\n+        Test ForeignKey references with mixed-case app labels don't cause issues.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Author(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Magazine(models.Model):\n+            authors = models.ManyToManyField(Author)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Author))\n+        project_state.add_model(ModelState.from_model(Book))\n+        project_state.add_model(ModelState.from_model(Magazine))\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n+\n     def test_real_apps(self):\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..d796f39 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,6 +1627,16 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_datetime_direct_subtraction(self):\n+        # Test subtracting two DateTimeFields directly\n+        Experiment.objects.update(start=datetime.datetime(2023, 5, 20, 14, 0), end=datetime.datetime(2023, 5, 25, 14, 0))\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for exp in queryset:\n+            self.assertEqual(exp.delta, datetime.timedelta(days=5))\n+\n     def test_duration_with_datetime(self):\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n",
  "django__django-13158": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex c769d76..74124c0 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -170,7 +170,41 @@ class ModelChoiceFieldTests(TestCase):\n         self.assertIsNot(field1, ModelChoiceForm.base_fields['category'])\n         self.assertIs(field1.widget.choices.field, field1)\n \n-    def test_result_cache_not_shared(self):\n+from django import forms\n+from django.test import TestCase\n+from .models import Category, Publication, Article\n+\n+class ModelMultipleChoiceFieldIssueTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.pub1 = Publication.objects.create(pk=1)\n+        cls.pub2 = Publication.objects.create(pk=2)\n+        cls.pub3 = Publication.objects.create(pk=6)\n+        cls.pub4 = Publication.objects.create(pk=9)\n+\n+    def test_union_none_behavior(self):\n+        class ArticleForm(forms.ModelForm):\n+            publications = forms.ModelMultipleChoiceField(\n+                Publication.objects.filter(id__lt=2).union(\n+                    Publication.objects.filter(id__gt=5)\n+                ),\n+                required=False,\n+            )\n+            class Meta:\n+                model = Article\n+                fields = ['publications']\n+\n+        form_data = {'publications': []}\n+        form = ArticleForm(data=form_data)\n+        self.assertTrue(form.is_valid())\n+        article = form.save(commit=False)\n+        self.assertEqual(article.publications.count(), 0)\n+\n+        form_data = {'publications': [self.pub1.pk, self.pub4.pk]}\n+        form = ArticleForm(data=form_data)\n+        self.assertTrue(form.is_valid())\n+        article = form.save(commit=False)\n+        self.assertEqual(set(article.publications.values_list('pk', flat=True)), {self.pub1.pk, self.pub4.pk})\n         class ModelChoiceForm(forms.Form):\n             category = forms.ModelChoiceField(Category.objects.all())\n \n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..8fcd971 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -323,7 +323,25 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n-    def test_decode_failure_logged_to_security(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_legacy_encode_decode(self):\n+        # Ensure legacy encode-decode works with DEFAULT_HASHING_ALGORITHM = 'sha1'\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'another test key': 'another test value'}\n+            encoded = self.session.encode(data)\n+            decoded = self.session._legacy_decode(encoded)\n+            self.assertEqual(decoded, data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_mixed_version_session_compatibility(self):\n+        # Simulate transitioning between Django versions\n+        # Test that session encoded in pre-3.1 can be decoded\n+        legacy_data = {'key1': 'value1'}\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            legacy_encoded = self.session._legacy_encode(legacy_data)\n+\n+        # Now simulate the new version behavior\n+        self.assertEqual(self.session.decode(legacy_encoded), legacy_data)\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n             self.assertEqual({}, self.session.decode(bad_encode))\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..9dcdd57 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -9,6 +9,9 @@ from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n+from django.utils.functional import SimpleLazyObject\n+from django.shortcuts import get_object_or_404\n+from .models import Artist\n \n from . import views\n \n@@ -590,7 +593,26 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering_with_simplelazyobject(self):\n+        # Create a test artist\n+        artist = Artist.objects.create(name='Edvard Munch')\n+\n+        # Define a view that uses get_object_or_404 filtering\n+        class ArtistView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, *, artist_name, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                # Simulate passing a SimpleLazyObject as an artist_name\n+                lazy_artist_name = SimpleLazyObject(lambda: artist_name)\n+                # The conversion to string should be necessary if issue is not fixed\n+                artist = get_object_or_404(Artist, name=str(lazy_artist_name))\n+                return {**context, 'artist': artist}\n+\n+        # Trigger the view with a lazy object\n+        response = ArtistView.as_view()(self.client.get('/'), artist_name='Edvard Munch')\n+        self.assertEqual(response.context_data['artist'], artist)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..6a0be33 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2829,6 +2830,67 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+class DuplicateChoicesTestCase(TestCase):\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates_with_q_object(self):\n+        # Create test characters\n+        marley = Character.objects.create(username='Marley', last_action='2023-01-01')\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-01-01')\n+\n+        # Create StumpJoke instances with relationships to the test characters\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        # Relate some StumpJokes to days they fooled\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+        \n+        # Define model with `limit_choices_to` using Q objects\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            \n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            \n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        # Form to test the choices in fields\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        # Assert that each field includes only unique Characters\n+        self.assertCountEqual(form.fields['character1'].queryset, [marley, threepwood])\n+        self.assertCountEqual(form.fields['character2'].queryset, [marley, threepwood])\n+        self.assertCountEqual(form.fields['character3'].queryset, [marley, threepwood])\n \n class FormFieldCallbackTests(SimpleTestCase):\n \n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..73e7c6b 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,29 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n+\n+class FileFieldDeconstructionTests(SimpleTestCase):\n+    def test_filefield_with_callable_storage_deconstructs_to_callable(self):\n+        \"\"\"\n+        Ensure that FileField with callable storage deconstructs without\n+        evaluating the callable, returning the callable itself.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n+    def test_filefield_with_callable_upload_to_deconstructs_to_callable(self):\n+        \"\"\"\n+        Ensure that FileField with callable upload_to deconstructs without\n+        evaluating the callable, returning the callable itself.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('upload_to_callable').deconstruct()\n+        upload_to_callable = kwargs['upload_to']\n+        # Assuming that callable_upload_to is defined in models\n+        self.assertIs(upload_to_callable, callable_upload_to)\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..7d5db61 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,7 +632,23 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n-    def test_key_icontains(self):\n+    def test_key_in_jsonfield(self):\n+        # Test '__in' lookup on key transforms with JSONField\n+        tests = [\n+            # Check single int in a list\n+            ('value__key__in', [0], []),\n+            ('value__key', 0, self.objs[:]),  # assuming all objects have key 0\n+            # Check multiple keys in a list\n+            ('value__key__in', [0, 1], []),\n+            # Mixed types in list\n+            ('value__key__in', ['0', 1, 'some_string'], []),\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n     def test_key_startswith(self):\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..314c640 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -19,6 +19,7 @@ from django.test import (\n )\n from django.utils import timezone\n \n+import pytz\n from ..models import Author, DTModel, Fan\n \n \n@@ -1133,7 +1134,41 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_trunc_date_with_tzinfo(self):\n+        start_datetime = datetime(2023, 3, 10, 15, 30, 50)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+\n+        new_york = pytz.timezone('America/New_York')\n+        london = pytz.timezone('Europe/London')\n+\n+        model = DTModel.objects.annotate(\n+            ny_date=TruncDate('start_datetime', tzinfo=new_york),\n+            london_date=TruncDate('start_datetime', tzinfo=london),\n+        ).get()\n+\n+        ny_start_datetime = start_datetime.astimezone(new_york)\n+        london_start_datetime = start_datetime.astimezone(london)\n+\n+        self.assertEqual(model.ny_date, ny_start_datetime.date())\n+        self.assertEqual(model.london_date, london_start_datetime.date())\n+\n+    def test_trunc_time_with_tzinfo(self):\n+        start_datetime = datetime(2023, 6, 15, 5, 30, 50)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+\n+        melbourne = pytz.timezone('Australia/Melbourne')\n+        india = pytz.timezone('Asia/Kolkata')\n+\n+        model = DTModel.objects.annotate(\n+            melb_time=TruncTime('start_datetime', tzinfo=melbourne),\n+            india_time=TruncTime('start_datetime', tzinfo=india),\n+        ).get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melbourne)\n+        india_start_datetime = start_datetime.astimezone(india)\n+\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.india_time, india_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..7aa7a38 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,6 +103,43 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+class AbstractModelFieldComparisonTest(SimpleTestCase):\n+    def test_fields_from_different_models_not_equal(self):\n+        \"\"\"Field instances from abstract models should not be equal if they belong to different models.\"\"\"\n+        \n+        class AbstractModel(models.Model):\n+            abstract_field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Model1(AbstractModel):\n+            pass\n+\n+        class Model2(AbstractModel):\n+            pass\n+\n+        abstract_field_1 = Model1._meta.get_field('abstract_field')\n+        abstract_field_2 = Model2._meta.get_field('abstract_field')\n+\n+        self.assertNotEqual(abstract_field_1, abstract_field_2)\n+        self.assertNotEqual(hash(abstract_field_1), hash(abstract_field_2))\n+\n+    def test_field_equality_same_model(self):\n+        \"\"\"Field instances from the same model should be equal.\"\"\"\n+        \n+        class SingleModel(models.Model):\n+            field = models.IntegerField()\n+\n+        field1 = SingleModel._meta.get_field('field')\n+        field2 = SingleModel._meta.get_field('field')\n+\n+        self.assertEqual(field1, field2)\n+        self.assertEqual(hash(field1), hash(field2))\n+\n class ChoicesTests(SimpleTestCase):\n \n     @classmethod\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..ef8aeaa 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -6,6 +7,7 @@ import tempfile\n import unittest\n from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n+from django.core.files import locks\n from unittest import mock\n \n from django.core.files import File\n@@ -170,7 +172,37 @@ class FileTests(unittest.TestCase):\n             self.assertEqual(test_file.read(), (content * 2).encode())\n \n \n-class NoNameFileTestCase(unittest.TestCase):\n+class FileLocksTestCase(unittest.TestCase):\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write('Test content')\n+\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write('Test content')\n+\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_unlock_without_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write('Test content')\n+\n+        with open(file_path) as f1:\n+            # Attempting to unlock without a prior lock should also return True indicating it's unlocked.\n+            self.assertIs(locks.unlock(f1), True)\n     \"\"\"\n     Other examples of unnamed files may be tempfile.SpooledTemporaryFile or\n     urllib.urlopen()\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..1cbe085 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,26 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('id'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Annotation.objects.values('name').annotate(num_notes=Count('id'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_queryset_with_group_by(self):\n+        # This test is designed to check the behavior of ordered property for GROUP BY queries.\n+        qs = Annotation.objects.annotate(num_notes=Count('id')).values('name')\n+        self.assertIs(qs.ordered, False)\n+\n+    def test_annotated_queryset_with_explicit_ordering(self):\n+        # This test checks if the explicit ordering is respected.\n+        qs = Annotation.objects.annotate(num_notes=Count('id')).order_by('name')\n+        self.assertIs(qs.ordered, True)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..117b264 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -341,6 +341,23 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser('prog_name', 'subcommand', epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n+    def test_outputwrapper_flush_during_migration(self):\n+        out = StringIO()\n+        err = StringIO()\n+        with mock.patch('django.core.management.base.ConnectionHandler.get') as mock_get:\n+            # Mock the connection to avoid actual DB access\n+            mock_get.return_value = mock.Mock(spec=['schema_editor'])\n+            management.call_command('migrate', stdout=out, stderr=err)\n+        \n+        # Verify that the output stream has been flushed correctly\n+        self.assertIn('Apply all migrations', out.getvalue())\n+        self.assertIn('Running migrations:', out.getvalue())\n+        self.assertIn('Applying', out.getvalue())  # Expecting migration steps to be shown\n+\n+\n+from django.core import management\n+from io import StringIO\n+from unittest import mock\n \n class CommandRunTests(AdminScriptTestCase):\n     \"\"\"\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..a521826 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models.with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +39,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..5e41b43 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,6 +1,8 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n+from django.db.models import Q, UniqueConstraint\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n from django.db import models\n@@ -138,6 +140,24 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithFullUniqueConstraints')\n+    def test_username_unique_with_full_unique_constraints(self):\n+        \"\"\"\n+        Test to ensure no auth.E003 error is raised if a full UniqueConstraint\n+        is defined on the USERNAME_FIELD.\n+        \"\"\"\n+        class UserWithFullUniqueConstraints(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='user_username_unq')\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n     def test_non_clashing_custom_permissions(self):\n         class Checked(models.Model):\n             class Meta:\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..ca533af 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n@@ -884,6 +886,37 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n+\n+    def test_range_lookup_namedtuple_edge_case(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        # Edge case where the boundaries are equal, but should include 99 employees.\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n+\n+    def test_range_lookup_namedtuple_no_match(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        # Case with no matches in the defined range.\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=200, maximum=300),\n+        )\n+        self.assertQuerysetEqual(qs, [])\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..2d4875c 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -28,10 +28,40 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from django.test.utils import captured_stderr, captured_stdout\n from django.test import (\n-    LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n+    LiveServerTestCase, SimpleTestCase, TestCase, mock, override_settings,\n )\n \n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"Program name is computed from the execute_from_command_line()'s argv argument, not sys.argv.\"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_custom_prog(self):\n+        \"\"\"Test with a custom prog name.\"\"\"\n+        args = ['help']\n+        custom_prog_name = 'custom-admin'\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line([custom_prog_name] + args)\n+        self.assertIn(f'usage: {custom_prog_name} help', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_empty_prog(self):\n+        \"\"\"Test with an empty prog name in argv.\"\"\"\n+        args = ['help']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line([''] + args)\n+        self.assertIn('usage:  help', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..6f3df97 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -56,8 +57,21 @@ class DateFormatTests(SimpleTestCase):\n         self.assertEqual(datetime.fromtimestamp(int(format(dt, 'U'))), dt.astimezone(ltz).replace(tzinfo=None))\n         self.assertEqual(datetime.fromtimestamp(int(format(dt, 'U')), tz).utctimetuple(), dt.utctimetuple())\n         self.assertEqual(datetime.fromtimestamp(int(format(dt, 'U')), ltz).utctimetuple(), dt.utctimetuple())\n-\n-    def test_epoch(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (99, '99'),\n+            (123, '23'),\n+            (999, '99'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         udt = datetime(1970, 1, 1, tzinfo=utc)\n         self.assertEqual(format(udt, 'U'), '0')\n \n@@ -164,4 +178,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..c6ba479 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,7 +1020,9 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..fbebd8d 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,9 +1,11 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n from ..utils import setup\n+from django.utils.translation import gettext_lazy, lazy\n \n \n class AddTests(SimpleTestCase):\n",
  "django__django-13807": "",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..34d7e59 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,46 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import io\n+import unittest\n+from unittest import mock\n+from django.core.management import call_command\n+from django.test import TestCase\n+from django.utils.six import StringIO\n+\n+...\n+\n+class ManageRunserverSkipChecks(TestCase):\n+    def setUp(self):\n+        self.output = StringIO()\n+\n+    @mock.patch('django.core.management.commands.runserver.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check_migrations')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_checks_option(self, mocked_check, *mocked_objects):\n+        # Test with skip_checks=True, checks should not run\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+        self.output.truncate(0)\n+        self.output.seek(0)\n+\n+        # Test with skip_checks=False, checks should run\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.output,\n+        )\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..378cd13 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,7 +1,8 @@\n+\n import compileall\n import os\n \n-from django.db import connection, connections\n+from importlib import import_module\n from django.db.migrations.exceptions import (\n     AmbiguityError, InconsistentMigrationHistory, NodeNotFoundError,\n )\n@@ -512,6 +513,31 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_file'})\n+    def test_loading_package_with_no_file_and_path_list(self):\n+        \"\"\"\n+        Test loading a regular package without __file__ and with a list __path__\n+        to verify migrations are loaded correctly in frozen environments.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_no_file')\n+        loader = MigrationLoader(connection)\n+        # Simulate a module with no __file__ and a list __path__\n+        module_file = test_module.__file__\n+        module_path = test_module.__path__\n+        try:\n+            del test_module.__file__\n+            test_module.__path__ = ['dummy_path']\n+            loader.load_disk()\n+            migrations = [\n+                name for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            # Restore the original attributes\n+            test_module.__file__ = module_file\n+            test_module.__path__ = module_path\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..a9e396b 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -36,6 +36,23 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n+    def test_check_sqlite_version_accept(self):\n+        \"\"\"Test that SQLite 3.9.0 and later are accepted.\"\"\"\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly for version 3.9.0\")\n+\n+    def test_check_sqlite_version_reject(self):\n+        \"\"\"Test that SQLite versions older than 3.9.0 are rejected.\"\"\"\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n     def test_aggregation(self):\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..d4af051 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -165,6 +165,17 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'django', 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch('builtins.__import__', side_effect=ImportError)\n+    def test_run_as_non_django_module_using_m(self, mock_import):\n+        with mock.patch('sys.modules.__main__.__spec__') as mock_spec:\n+            mock_spec.parent = 'utils_tests.test_module'\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+            )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..421da97 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -394,8 +394,26 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n                 id='models.W042',\n             ),\n         ])\n+    \n+    def test_explicit_inherited_pk_no_warning(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+    \n+        class Child(Parent):\n+            pass\n+    \n+        # Check that no warnings are raised for explicitly inherited PK.\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n-    @override_settings(DEFAULT_AUTO_FIELD='django.db.models.BigAutoField')\n+    def test_explicit_inherited_parent_link_no_warning(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+    \n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+    \n+        # Check that no warnings are raised for explicitly inherited parent link.\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n             pass\n@@ -414,4 +432,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..a1936df 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -297,6 +297,14 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n+        # Test for ModelChoiceField with invalid choice\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n \n         # ModelMultipleChoiceField\n         e = {\n@@ -307,4 +315,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..64bc63b 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -81,6 +81,12 @@ class ToFieldChild(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, to_field='name', related_name='to_field_children')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n # Multiple paths to the same model (#7110, #7125)\n class Category(models.Model):\n     name = models.CharField(max_length=20)\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..d81522f 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyAutoField, MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..1a54cc0 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,25 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        collectstatic_args = {\n+            'interactive': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'link': False,\n+            'post_process': True,\n+            'verbosity': 0,\n+        }\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Extract the list of files that were post-processed\n+        post_processed_files = stats['post_processed']\n+\n+        # Check that each file was yielded only once\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +233,25 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        collectstatic_args = {\n+            'interactive': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'link': False,\n+            'post_process': True,\n+            'verbosity': 0,\n+        }\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Extract the list of files that were post-processed\n+        post_processed_files = stats['post_processed']\n+\n+        # Check that each file was yielded only once\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..7c5b19d 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -6,6 +7,7 @@ import copy\n import pickle\n \n from django.test import SimpleTestCase\n+import collections.abc\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n     MultiValueDictKeyError, OrderedSet,\n@@ -18,7 +20,28 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        # Basic case\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        # Test reversing an empty OrderedSet\n+        s = reversed(OrderedSet())\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        # Test reversing an OrderedSet with a single element\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_order_preservation(self):\n+        # Test that reversing preserves the correct order in special cases\n+        s = reversed(OrderedSet(['a', 'b', 'c', 'd']))\n+        self.assertEqual(list(s), ['d', 'c', 'b', 'a'])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..fe1e1b7 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -320,7 +321,17 @@ class OrderingTests(TestCase):\n             [a.pk for a in Author.objects.order_by('-pk')],\n         )\n \n-    def test_order_by_fk_attname(self):\n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Ensure that Meta.ordering fields are not included in GROUP BY clause.\n+        \"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n         \"\"\"\n         ordering by a foreign key by its attribute name prevents the query\n         from inheriting its related model ordering option (#19195).\n@@ -483,4 +494,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..d208ae7 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,4 +1,7 @@\n-from django.db.models import F, Q\n+\n+from django.db.models import Exists, F, OuterRef, Q\n+from django.contrib.auth import get_user_model\n+from .models import Tag\n from django.test import SimpleTestCase\n \n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..4ceb5ff 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,7 +1,11 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n+from django.db import models\n+from django.test import SimpleTestCase, override_settings\n+from django.test.utils import isolate_apps\n \n \n @isolate_apps('model_options')\n@@ -65,8 +69,29 @@ class TestDefaultPK(SimpleTestCase):\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Model(models.Model):\n                 pass\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -81,8 +106,29 @@ class TestDefaultPK(SimpleTestCase):\n             pass\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..139f5e8 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -229,7 +229,14 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n-    # Trailing junk does not take forever to reject\n+    # Test forbidden characters in URLs\n+    # Newlines and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..3bdca81 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1525,6 +1525,45 @@ class AggregationTests(TestCase):\n             allow_distinct = True\n         DistinctAggregate('foo', distinct=True)\n \n+class QObjectTests(TestCase):\n+    def setUp(self):\n+        self.author1 = Author.objects.create(name=\"Author 1\")\n+        self.author2 = Author.objects.create(name=\"Author 2\")\n+        self.book1 = Book.objects.create(title=\"Book 1\")\n+        self.book4 = Book.objects.create(title=\"Book 4\")\n+        self.book1.authors.add(self.author1)\n+        self.book4.authors.add(self.author2)\n+\n+    @skipUnlessDBFeature('supports_subqueries_in_group_by')\n+    def test_having_subquery_select(self):\n+        authors = Author.objects.filter(pk=self.author1.pk)\n+        books = Book.objects.annotate(Count('authors')).filter(\n+            Q(authors__in=authors) | Q(authors__count__gt=2)\n+        )\n+        self.assertEqual(set(books), {self.book1, self.book4})\n+\n+    def test_q_object_or_behavior_with_id_in(self):\n+        authors = Author.objects.filter(pk=self.author1.pk)\n+        books = Book.objects.annotate(Count('authors')).filter(\n+            Q(authors__id__in=authors.values_list(\"id\", flat=True)) | Q(authors__count=0)\n+        ).distinct()\n+        self.assertEqual(set(books), {self.book1})\n+\n+    def test_q_object_or_behavior_with_object_in(self):\n+        authors = Author.objects.filter(pk=self.author1.pk)\n+        books = Book.objects.annotate(Count('authors')).filter(\n+            Q(authors__in=authors) | Q(authors__count=0)\n+        ).distinct()\n+        self.assertEqual(set(books), {self.book1})\n+\n+    def test_subquery_returns_one_column(self):\n+        # This test aims to reproduce the original issue where a subquery returns multiple columns\n+        with self.assertRaises(ProgrammingError):\n+            authors = Author.objects.all()  # Assuming this returns more than one column\n+            Book.objects.annotate(Count('authors')).filter(\n+                Q(authors__in=authors) | Q(authors__count=0)\n+            ).distinct()\n+\n \n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..f8ccf32 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -179,7 +179,14 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n-    def test_twelve_hour_format(self):\n+    def test_Y_format_year_before_1000(self):\n+        # Test years before 1000 to ensure zero-padding to 4 digits.\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+        # Additional test cases\n+        self.assertEqual(dateformat.format(datetime(10, 1, 1), 'Y'), '0010')\n+        self.assertEqual(dateformat.format(datetime(9999, 1, 1), 'Y'), '9999')\n+        self.assertEqual(dateformat.format(datetime(1000, 1, 1), 'Y'), '1000')\n         tests = [\n             (0, '12'),\n             (1, '1'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..7dab8b6 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,6 +38,39 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_and_new_kwargs(self):\n+        # This test checks that both the deprecated and new keywords work\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                settings_port = 444\n+                options_port = 555\n+                expected_args = [\n+                    'mysql',\n+                    '--user=optionuser',\n+                    '--host=optionhost',\n+                    '--port=%s' % options_port,\n+                    'optiondbname',\n+                ]\n+                expected_env = {'MYSQL_PWD': 'optionpassword'}\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n         options_port = 555\n",
  "django__django-14434": "",
  "django__django-14493": "",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..24cf190 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -640,7 +640,42 @@ class ExecutorTests(MigrationTestBase):\n         \"\"\"\n         recorder = MigrationRecorder(connection)\n         # Record all replaced migrations as applied\n-        recorder.record_applied(\"migrations\", \"0001_initial\")\n+import unittest\n+from django.test import override_settings\n+from django.db import connection\n+from django.db.migrations.executor import MigrationExecutor\n+\n+class SquashedMigrationTests(unittest.TestCase):\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_unapply_squashed_migration(self):\n+        \"\"\"Test that unapplying a squashed migration marks all of its replaced migrations as unapplied.\"\"\"\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+\n+        # Assert that the squashed migration is applied\n+        self.assertIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n+        # Unapply the squashed migration\n+        executor.migrate([('migrations', None)])\n+\n+        # Assert that the squashed migration is marked as unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        # Assert that the replaced migrations are also marked as unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_initial'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            ('migrations', '0002_second'),\n+            executor.recorder.applied_migrations(),\n+        )\n         recorder.record_applied(\"migrations\", \"0002_second\")\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..7a5e246 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -250,10 +250,18 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for google.com/?q=! and see.',\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>! and see.'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n             (\n                 lazystr('Search for google.com/?q=!'),\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n         )\n         for value, output in tests:\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..c0f266e 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -127,7 +127,28 @@ class BulkUpdateTests(TestCase):\n         with self.assertNumQueries(0):\n             Note.objects.bulk_update([], ['note'])\n \n-    def test_large_batch(self):\n+    def test_bulk_update_return_value(self):\n+        # Test for no objects passed.\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+        # Create and update 2000 Notes.\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_with_duplicates(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        # Passing duplicates in the same batch\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        # Passing duplicates in different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         Note.objects.bulk_create([\n             Note(note=str(i), misc=str(i))\n             for i in range(0, 2000)\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..7a28cf4 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +361,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +988,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..50cbc19 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,39 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_datetime_clean_initial_callable_enabled(self):\n+        \"\"\"\n+        Cleaning a form with an enabled DateTimeField and callable initial\n+        should match the form's initial data.\n+        \"\"\"\n+        now = datetime.datetime(2007, 11, 26, 15, 31, 47, 654321)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now)\n+\n+        form = DateTimeForm({'dt': '2007-11-26 15:31:47'})\n+        cleaned = form.cleaned_data['dt']\n+        self.assertEqual(cleaned, datetime.datetime(2007, 11, 26, 15, 31, 47))\n+        bf = form['dt']\n+        self.assertEqual(cleaned, bf.initial)\n+\n+    def test_datetime_changed_data_callable_enabled(self):\n+        \"\"\"\n+        Ensure that a form with an enabled DateTimeField and callable initial\n+        correctly identifies changed data.\n+        \"\"\"\n+        now = datetime.datetime(2007, 11, 26, 15, 31, 47, 654321)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now)\n+\n+        # Simulate user input that matches the initial value\n+        form = DateTimeForm({'dt': '2007-11-26 15:31:47'})\n+        self.assertEqual(form.changed_data, [])\n+\n+        # Simulate user input that differs from the initial value\n+        form = DateTimeForm({'dt': '2007-11-27 15:31:47'})\n+        self.assertEqual(form.changed_data, ['dt'])\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..a43a900 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -3,6 +3,9 @@ from operator import attrgetter\n \n from django.db import IntegrityError\n from django.test import TestCase\n+from django.db import models\n+from django.core.checks import Error\n+from .models import PersonChild, Membership, Person\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n@@ -31,6 +34,42 @@ class M2mThroughTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n+    def test_through_fields_hashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # Attempt to access the M2M through fields\n+        child_field = Child._meta.get_field('many_to_many_field')\n+        self.assertEqual(child_field.through_fields, ('child', 'parent'))\n+        # Test that hashing works as expected\n+        self.assertIsInstance(hash(child_field), int)\n+\n+    def test_inherited_m2m_through_fields_list_hashable(self):\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        # Test that the hash for inherited M2M fields is the same\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n+\n     def test_get_on_intermediate_model(self):\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..82db7d6 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -8,10 +9,11 @@ from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n+import datetime\n from django.test import RequestFactory, override_settings\n from django.urls import reverse, reverse_lazy\n \n-from .admin import AnswerAdmin, QuestionAdmin\n+from .models import Question\n from .models import (\n     Answer, Author, Authorship, Bonus, Book, Employee, Manager, Parent,\n     PKChild, Question, Toy, WorkHour,\n@@ -281,7 +283,34 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[:PAGINATOR_SIZE]],\n             'pagination': {'more': True},\n         })\n-        # The second page of results.\n+    def test_serialize_result(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        \n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(admin_site=self.admin_site)(request)\n+        \n+        self.assertEqual(response.status_code, 200)\n+        \n+        data = json.loads(response.content.decode('utf-8'))\n+        \n+        expected_results = [\n+            {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+            for q in Question.objects.order_by('-posted')\n+        ]\n+        \n+        self.assertEqual(data, {\n+            'results': expected_results,\n+            'pagination': {'more': False},\n+        })\n         request = self.factory.get(self.url, {'term': '', 'page': '2', **self.opts})\n         request.user = self.superuser\n         with model_admin(Question, PKOrderingQuestionAdmin):\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..650fad8 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,8 +923,39 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n+    def test_real_apps_none(self):\n+        \"\"\"\n+        Ensure no assertion error when real_apps is None.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps=None)\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly when real_apps is None.\")\n+\n+    def test_real_apps_empty_set(self):\n+        \"\"\"\n+        Ensure no assertion error when real_apps is an empty set.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps=set())\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly when real_apps is an empty set.\")\n \n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_empty_list(self):\n+        \"\"\"\n+        Test that ProjectState raises an AssertionError for an empty list.\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=[])\n+\n+    def test_real_apps_correct_set(self):\n+        \"\"\"\n+        Ensure no assertion error when real_apps is a correct set.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps={'contenttypes', 'auth'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly when real_apps is a correct set.\")\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..af6cad8 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,7 +195,14 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -235,8 +242,15 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+    @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n         del module.__spec__\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..e738deb 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5132,7 +5132,35 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n-    def test_readonly_manytomany_backwards_ref(self):\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields render with correct URLs in custom admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 2'),\n+        )\n+        language = Language.objects.create(iso='_41', name='Test Language Custom')\n+        chapter.language = language\n+        chapter.save()\n+        \n+        custom_admin_url = reverse(\n+            'custom-admin:admin_views_chapter_change',\n+            args=(quote(chapter.pk),)\n+        )\n+        response = self.client.get(custom_admin_url)\n+        self.assertEqual(response.status_code, 200)\n+\n+        language_url = reverse(\n+            'custom-admin:admin_views_language_change',\n+            args=(quote(language.pk),)\n+        )\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_41</a></div>' % language_url,\n+            html=True,\n+        )\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n         broke if the related field is read-only due to the help_text attribute\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..c0c4a47 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -279,7 +281,31 @@ class ModelChoiceFieldTests(TestCase):\n         field = CustomModelChoiceField(Category.objects.all())\n         self.assertIsInstance(field.choices, CustomModelChoiceIterator)\n \n-    def test_choice_iterator_passes_model_to_widget(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        # Test that hash values are consistent for the same data\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        # Test that different instances have different hash values\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_model_choice_with_dict(self):\n+        # Create a custom widget to test the issue\n+        class CustomSelect(forms.Select):\n+            def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+                context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+                if not value:\n+                    return context\n+                # Simulate the issue scenario\n+                show_fields = {self.c1.pk: ['field1', 'field2']}\n+                if value in show_fields:\n+                    context['attrs']['data-fields'] = json.dumps(show_fields[value])\n+                return context\n+        \n+        field = forms.ModelChoiceField(Category.objects.all(), widget=CustomSelect)\n+        rendered = field.widget.render('name', '')\n+        # Assert that the custom attribute is added correctly\n+        self.assertIn('data-fields=\"[&quot;field1&quot;, &quot;field2&quot;]\"', rendered)\n         class CustomCheckboxSelectMultiple(CheckboxSelectMultiple):\n             def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n                 option = super().create_option(name, value, label, selected, index, subindex, attrs)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..5581594 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,30 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop_preserves_fk_constraints(self):\n+        app_label = \"test_rmwdbtn_fk_constraints\"\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        \n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/admin.py b/tests/admin_changelist/admin.py\nindex 580e58f..e7d6559 100644\n--- a/tests/admin_changelist/admin.py\n+++ b/tests/admin_changelist/admin.py\n@@ -1,9 +1,11 @@\n+\n from django.contrib import admin\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.core.paginator import Paginator\n \n-from .models import Band, Child, Event, Parent, Swallow\n+from .models import Band, Child, Event, Parent, Swallow, Client, ClientOffice\n+from django.utils.translation import gettext as _\n \n site = admin.AdminSite(name=\"admin\")\n \n",
  "django__django-15037": "",
  "django__django-15103": "",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..0b701d5 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2827,6 +2827,34 @@ class AutodetectorTests(TestCase):\n             ('0002_custom_name_20380101_1112_squashed_0003_model', 3),\n             ('2_squashed_4', 4),\n         ]\n+\n+    def test_custom_fk_with_hardcoded_to_handled_properly(self):\n+        class CustomFKField(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.HardcodedModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(\n+            ModelState('testapp', 'TestModel', [\n+                ('custom', CustomFKField(on_delete=models.CASCADE))\n+            ])\n+        )\n+\n+        autodetector = MigrationAutodetector(before, after)\n+        changes = autodetector._detect_changes()\n+\n+        self.assertIn('testapp', changes)\n+        self.assertEqual(len(changes['testapp']), 1)\n+        self.assertEqual(changes['testapp'][0].operations[0].name, 'TestModel')\n         for migration_name, expected_number in tests:\n             with self.subTest(migration_name=migration_name):\n                 self.assertEqual(\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..abd72bd 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -361,6 +362,29 @@ class BaseTests:\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n \n+    def test_override_settings_level_tags_correctly_updates_level_tags(self):\n+        # Use the override_settings decorator to temporarily change the MESSAGE_TAGS\n+        with override_settings(MESSAGE_TAGS={\n+            constants.INFO: 'info_changed',\n+            constants.DEBUG: 'debug_changed',\n+            constants.WARNING: 'warning_changed',\n+            constants.ERROR: 'error_changed',\n+        }):\n+            storage = self.get_storage()\n+            storage.level = 0\n+            add_level_messages(storage)\n+            # Verify if the LEVEL_TAGS in the base module matches the overridden settings\n+            expected_tags = ['info_changed', 'debug_changed', 'debug', 'warning_changed', 'error_changed', 'success']\n+            tags = [msg.level_tag for msg in storage]\n+            self.assertEqual(tags, expected_tags)\n+        # Ensure LEVEL_TAGS is reset after context manager is exited\n+        original_tags = ['info', '', 'debug', 'warning', 'bad', 'success']\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, original_tags)\n+\n     def test_level_tag(self):\n         storage = self.get_storage()\n         storage.level = 0\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..397fe83 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2086,8 +2086,55 @@ class SubqueryTests(TestCase):\n         )\n \n \n+from django.test import TestCase\n+from django.db.models import Q\n+from .models import Qux, Foo, BaseUser, Task, Annotation, Note\n+\n class QuerySetBitwiseOperationTests(TestCase):\n     @classmethod\n+    def setUpTestData(cls):\n+        # Create data for the original test patch\n+        tag = Tag.objects.create()\n+        cls.annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = cls.annotation_1.notes.create(tag=tag)\n+        cls.base_user_1 = BaseUser.objects.create(annotation=cls.annotation_1)\n+        cls.base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        cls.task = Task.objects.create(\n+            owner=cls.base_user_2, creator=cls.base_user_2, note=note,\n+        )\n+\n+    def test_conflicting_aliases_during_combine(self):\n+        qs1 = self.annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=self.annotation_1.notes.all()) |\n+            Q(creator__note__in=self.annotation_1.notes.all())\n+        )\n+        self.assertSequenceEqual(qs1, [self.base_user_1])\n+        self.assertSequenceEqual(qs2, [self.base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [self.base_user_1, self.base_user_2])\n+\n+    def test_query_change_aliases_issue(self):\n+        qux = Qux.objects.create()\n+        qs1 = qux.foos.all()\n+        qs2 = Foo.objects.filter(\n+            Q(bars__baz__in=qux.bazes.all()) | Q(other_bars__baz__in=qux.bazes.all())\n+        )\n+        # The following should not raise AssertionError\n+        try:\n+            combined_qs1_qs2 = qs1 | qs2\n+        except AssertionError as e:\n+            self.fail(f\"AssertionError was raised: {e}\")\n+\n+        try:\n+            combined_qs2_qs1 = qs2 | qs1\n+        except AssertionError as e:\n+            self.fail(f\"AssertionError was raised: {e}\")\n+\n+        # Verifying that the operations are successful and the result sets are correct\n+        self.assertCountEqual(combined_qs1_qs2, combined_qs2_qs1)\n+    @classmethod\n     def setUpTestData(cls):\n         cls.school = School.objects.create()\n         cls.room_1 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 1')\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..1a502d4 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1766,6 +1766,13 @@ class ValueTests(TestCase):\n         self.assertEqual(path, 'django.db.models.expressions.Value')\n         self.assertEqual(args, (value.value,))\n         self.assertEqual(kwargs, {})\n+    \n+    def test_deconstruct_F_expression(self):\n+        f_expression = F('name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('name',))\n+        self.assertEqual(kwargs, {})\n \n     def test_deconstruct_output_field(self):\n         value = Value('name', output_field=CharField())\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..5ebacf1 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1661,7 +1661,40 @@ class AutodetectorTests(TestCase):\n             changes, 'otherapp', 0, 4, model_name='book', name='newfield',\n         )\n \n-    def test_alter_field_and_foo_together(self):\n+    def test_optimize_alter_foo_together(self):\n+        \"\"\"\n+        Test that AlterFooTogether operations are optimized by collapsing\n+        consecutive operations that remove and then add constraints.\n+        \"\"\"\n+        initial_model = ModelState('testapp', 'MyModel', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('col', models.CharField(max_length=50)),\n+        ], {\n+            'unique_together': {('col',)},\n+            'index_together': {('col',)},\n+        })\n+        \n+        optimized_model = ModelState('testapp', 'MyModel', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('col', models.CharField(max_length=50)),\n+        ])\n+\n+        changes = self.get_changes([initial_model], [optimized_model])\n+        # Expected to optimize operations to zero as initial and optimized are the same\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+\n+        # Change again to add back the constraints\n+        changes = self.get_changes([optimized_model], [initial_model])\n+        # Expected to optimize directly to adding constraints\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n         \"\"\"Fields are altered after deleting some index/unique_together.\"\"\"\n         initial_author = ModelState('testapp', 'Author', [\n             ('id', models.AutoField(primary_key=True)),\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..6455d9e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,6 +1847,46 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        from django.db.models import Value\n+        import datetime\n+        from decimal import Decimal\n+        import uuid\n+\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                # Ensure no validators cause an error when cleaning\n+                field.clean(value, model_instance=None)\n+\n+    def test_charfield_does_not_add_maxlength_validator_when_max_length_is_none(self):\n+        \"\"\"\n+        Ensure that CharField does not add a MaxLengthValidator when max_length is None\n+        in the context of Value._resolve_output_field().\n+        \"\"\"\n+        from django.db.models.fields import CharField\n+\n+        char_field = CharField(max_length=None)\n+        self.assertNotIn('MaxLengthValidator', [v.__class__.__name__ for v in char_field.validators])\n+\n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..b823f1b 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -619,6 +619,30 @@ class SchemaTests(TransactionTestCase):\n             editor.add_field(Author, new_field)\n         # Ensure the field is there\n         columns = self.column_classes(Author)\n+\n+    def test_add_nullable_o2o_field(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField does not raise an exception on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        \n+        # Define a new nullable OneToOneField\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        \n+        # Attempt to add the new field using the schema editor\n+        with connection.schema_editor() as editor:\n+            try:\n+                editor.add_field(Author, new_field)\n+            except OperationalError as e:\n+                self.fail(f\"Adding nullable OneToOneField raised an OperationalError: {e}\")\n+\n+        # Verify that the field was added\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])  # Ensure the field allows nulls\n         field_type, field_info = columns['thing']\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n         # Make sure the values were transformed correctly\n@@ -637,6 +661,30 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n+\n+    def test_add_nullable_o2o_field(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField does not raise an exception on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        \n+        # Define a new nullable OneToOneField\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        \n+        # Attempt to add the new field using the schema editor\n+        with connection.schema_editor() as editor:\n+            try:\n+                editor.add_field(Author, new_field)\n+            except OperationalError as e:\n+                self.fail(f\"Adding nullable OneToOneField raised an OperationalError: {e}\")\n+\n+        # Verify that the field was added\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])  # Ensure the field allows nulls\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..952c9b3 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -10,6 +10,8 @@ from .models import (\n     Bar, Choiceful, Foo, RenamedField, VerboseNameField, Whiz, WhizDelayed,\n     WhizIter, WhizIterEmpty,\n )\n+from django.db import models\n+from django.test import SimpleTestCase\n \n \n class Nested:\n@@ -133,7 +135,44 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n \n \n-class ChoicesTests(SimpleTestCase):\n+class FieldHashImmutabilityTests(SimpleTestCase):\n+\n+    def test_hash_immutability(self):\n+        # Test that the hash of a field doesn't change after assignment to a model class.\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_dict_key(self):\n+        # Test that the field can be reliably used as a key in a dictionary.\n+        field = models.CharField(max_length=200)\n+        field_dict = {field: \"test value\"}\n+        self.assertIn(field, field_dict)\n+\n+        class AnotherModel(models.Model):\n+            name = field\n+\n+        # Check that the dictionary key is still valid\n+        self.assertIn(field, field_dict)\n+        self.assertEqual(field_dict[field], \"test value\")\n+\n+    def test_hash_after_multiple_assignments(self):\n+        # Test that assigning the field to multiple models does not change the hash.\n+        field = models.FloatField()\n+        initial_hash = hash(field)\n+\n+        class ModelOne(models.Model):\n+            number = field\n+\n+        class ModelTwo(models.Model):\n+            value = field\n+\n+        # Hash should remain the same after multiple assignments\n+        self.assertEqual(initial_hash, hash(field))\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-15368": "",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..10f27b1 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,7 +1049,48 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n-    def test_rename_model(self):\n+    def test_rename_model_and_field(self):\n+        \"\"\"Test for renaming a model and a field in a single step.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [ModelState('testapp', 'RenamedAuthor', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('renamed_name', models.CharField(max_length=200)),\n+            ])],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+\n+    def test_rename_model_and_field_conflict(self):\n+        \"\"\"Test autodetector handling of simultaneous model and field rename with conflicting names.\"\"\"\n+        initial_state = [ModelState('app', 'MyModel', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('name', models.CharField(max_length=200)),\n+        ])]\n+        final_state = [ModelState('app', 'MyModel2', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('renamed_name', models.CharField(max_length=200)),\n+        ])]\n+        changes = self.get_changes(\n+            initial_state,\n+            final_state,\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'app', 0, 0, old_name='MyModel', new_name='MyModel2',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'app', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n             [self.author_with_book, self.book],\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..1c17691 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,28 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+from django.db.models import Exists, Q\n+from django.test import TestCase\n+from .models import Manager, MyModel\n+\n+class ExistsSubqueryTests(TestCase):\n+    def test_empty_exists(self):\n+        manager = Manager.objects.create(name='Manager1')\n+        # Test Exists with an empty subquery\n+        qs = Manager.objects.filter(Exists(Manager.objects.none()))\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_exists_with_other_conditions(self):\n+        manager = Manager.objects.create(name='Manager2')\n+        # Test Exists with additional filter conditions\n+        qs = Manager.objects.filter(Exists(Manager.objects.none()), name='Manager2')\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_negated_exists_with_empty_subquery(self):\n+        manager = Manager.objects.create(name='Manager3')\n+        # Test negated Exists with an empty subquery\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()), pk=manager.pk)\n+        self.assertSequenceEqual(qs, [manager])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..2579d74 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -29,6 +29,7 @@ from django.urls import reverse\n from django.utils import translation\n \n from .models import (\n+    Inventory,\n     Advisor,\n     Album,\n     Band,\n@@ -141,7 +142,17 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n         self.assertIsNone(ff.empty_label)\n \n-    def test_many_to_many(self):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == \"parent\":\n+                    kwargs[\"empty_label\"] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..60a4037 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -127,6 +127,163 @@ class OptimizerTests(SimpleTestCase):\n                     \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n                 ),\n             ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_managers_and_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+                migrations.AlterModelOptions(\n+                    name=\"Bar\",\n+                    options={\"verbose_name\": \"The Bar\"},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                    options={\"verbose_name\": \"The Bar\"},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_different_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"primary\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"secondary\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"secondary\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+        )\n+\n+    def test_no_optimization_with_unchanged_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[],\n+                    managers=[\n+                        (\"main\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[\n+                        (\"main\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[],\n+                    managers=[\n+                        (\"main\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[\n+                        (\"main\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n         )\n \n     def test_create_model_and_remove_model_options(self):\n@@ -137,10 +294,162 @@ class OptimizerTests(SimpleTestCase):\n                     fields=[],\n                     options={\"verbose_name\": \"My Model\"},\n                 ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n                 migrations.AlterModelOptions(\"MyModel\", options={}),\n             ],\n             [migrations.CreateModel(\"MyModel\", fields=[])],\n         )\n+\n+    def test_create_model_with_managers_and_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+                migrations.AlterModelOptions(\n+                    name=\"Bar\",\n+                    options={\"verbose_name\": \"The Bar\"},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                    options={\"verbose_name\": \"The Bar\"},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_different_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"primary\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"secondary\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"secondary\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+        )\n+\n+    def test_no_optimization_with_unchanged_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[],\n+                    managers=[\n+                        (\"main\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[\n+                        (\"main\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[],\n+                    managers=[\n+                        (\"main\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[\n+                        (\"main\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+        )\n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel(\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..8ec24dc 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -790,8 +790,55 @@ class NaturalKeyFixtureTests(TestCase):\n             transform=repr,\n         )\n \n-\n-class M2MNaturalKeyFixtureTests(TestCase):\n+from django.core import management\n+from django.test import TestCase\n+from .models import Person, NaturalKeyWithFKDependency\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        self.person_data = {\n+            \"model\": \"fixtures_regress.person\",\n+            \"fields\": {\"name\": \"J.R.R. Tolkien\"},\n+        }\n+        self.book_data = {\n+            \"model\": \"fixtures_regress.naturalkeywithfkdependency\",\n+            \"fields\": {\n+                \"name\": \"The Lord of the Rings\",\n+                \"author\": [\"J.R.R. Tolkien\"],\n+            },\n+        }\n+        self.json_data = [self.person_data, self.book_data]\n+\n+    def test_natural_key_dependencies_on_other_db(self):\n+        \"\"\"\n+        Ensures that natural keys with foreign keys in dependencies work\n+        in a multiple database setup.\n+        \"\"\"\n+        with open(\"test_data.json\", \"w\") as f:\n+            import json\n+            json.dump(self.json_data, f)\n+\n+        # Load data into the 'other' database\n+        management.call_command(\n+            \"loaddata\",\n+            \"test_data.json\",\n+            database=\"other\",\n+            verbosity=0\n+        )\n+\n+        # Fetch the objects from the 'other' database and validate\n+        book = NaturalKeyWithFKDependency.objects.using(\"other\").get()\n+        author = Person.objects.using(\"other\").get()\n+        \n+        self.assertEqual(book.name, \"The Lord of the Rings\")\n+        self.assertEqual(book.author.name, \"J.R.R. Tolkien\")\n+        self.assertEqual(author.name, \"J.R.R. Tolkien\")\n+\n+        # Cleanup the test data file\n+        import os\n+        os.remove(\"test_data.json\")\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n     def test_dependency_sorting_m2m_simple(self):\n",
  "django__django-15561": "",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..ee5fb70 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -326,7 +326,21 @@ class LookupTests(TestCase):\n \n \n class BilateralTransformTests(TestCase):\n-    def test_bilateral_upper(self):\n+    def test_lookups_unregister_bust_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Initially, cache is empty\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+\n+        # Register a lookup and ensure it's added\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+        \n+        # Unregister the lookup and check that the cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n         with register_lookup(models.CharField, UpperBilateralTransform):\n             author1 = Author.objects.create(name=\"Doe\")\n             author2 = Author.objects.create(name=\"doe\")\n",
  "django__django-15572": "",
  "django__django-15731": "",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..c6b7293 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,5 +1,8 @@\n+\n from datetime import datetime, time\n \n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n@@ -74,7 +77,13 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy_format(self):\n+        self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..4fb969d 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -386,10 +386,78 @@ class ProxyModelTests(TestCase):\n         resp = ProxyImprovement.objects.select_related().get(\n             associated_bug__summary__icontains=\"fix\"\n         )\n+\n+    def test_select_related_only_with_proxy(self):\n+        custom = ProxyCustomModel.objects.create(name=\"Proxy Test\")\n+        another_model_instance = AnotherModel.objects.create(custom=custom)\n+        \n+        # Test if select_related with only() works on proxy models\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.first()\n+        \n+        self.assertEqual(result.custom.name, \"Proxy Test\")\n+        self.assertEqual(result, another_model_instance)\n+\n+    def test_select_related_only_with_concrete_model(self):\n+        custom = CustomModel.objects.create(name=\"Concrete Test\")\n+        another_model_instance = AnotherModel.objects.create(custom=custom)\n+        \n+        # Test if select_related with only() works on concrete models\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.first()\n+        \n+        self.assertEqual(result.custom.name, \"Concrete Test\")\n+        self.assertEqual(result, another_model_instance)\n+\n+    def test_select_related_only_with_multiple_fields(self):\n+        custom = ProxyCustomModel.objects.create(name=\"Multiple Field Test\")\n+        another_model_instance = AnotherModel.objects.create(custom=custom)\n+        \n+        # Test with multiple fields\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\", \"custom__id\")\n+        result = qs.first()\n+        \n+        self.assertEqual(result.custom.name, \"Multiple Field Test\")\n+        self.assertEqual(result.custom.id, custom.id)\n+        self.assertEqual(result, another_model_instance)\n         self.assertEqual(\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n+    def test_select_related_only_with_proxy(self):\n+        custom = ProxyCustomModel.objects.create(name=\"Proxy Test\")\n+        another_model_instance = AnotherModel.objects.create(custom=custom)\n+        \n+        # Test if select_related with only() works on proxy models\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.first()\n+        \n+        self.assertEqual(result.custom.name, \"Proxy Test\")\n+        self.assertEqual(result, another_model_instance)\n+\n+    def test_select_related_only_with_concrete_model(self):\n+        custom = CustomModel.objects.create(name=\"Concrete Test\")\n+        another_model_instance = AnotherModel.objects.create(custom=custom)\n+        \n+        # Test if select_related with only() works on concrete models\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.first()\n+        \n+        self.assertEqual(result.custom.name, \"Concrete Test\")\n+        self.assertEqual(result, another_model_instance)\n+\n+    def test_select_related_only_with_multiple_fields(self):\n+        custom = ProxyCustomModel.objects.create(name=\"Multiple Field Test\")\n+        another_model_instance = AnotherModel.objects.create(custom=custom)\n+        \n+        # Test with multiple fields\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\", \"custom__id\")\n+        result = qs.first()\n+        \n+        self.assertEqual(result.custom.name, \"Multiple Field Test\")\n+        self.assertEqual(result.custom.id, custom.id)\n+        self.assertEqual(result, another_model_instance)\n+\n     def test_proxy_load_from_fixture(self):\n         management.call_command(\"loaddata\", \"mypeople.json\", verbosity=0)\n         p = MyPerson.objects.get(pk=100)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..bb42179 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,40 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_with_command(self):\n+        # Test additional parameters are correctly ordered before the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+        \n+    def test_multiple_additional_parameters(self):\n+        # Test multiple additional parameters correctly ordered before the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-h\", \"localhost\", \"-p\", \"5432\"]),\n+            ([\"psql\", \"-h\", \"localhost\", \"-p\", \"5432\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_with_command(self):\n+        # Test additional parameters are correctly ordered before the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+        \n+    def test_multiple_additional_parameters(self):\n+        # Test multiple additional parameters correctly ordered before the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-h\", \"localhost\", \"-p\", \"5432\"]),\n+            ([\"psql\", \"-h\", \"localhost\", \"-p\", \"5432\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..c6bc759 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -405,6 +405,16 @@ class CaseExpressionTests(TestCase):\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n \n+    def test_case_with_negated_empty_q_expression(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n             selected=Case(\n",
  "django__django-15987": "",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..29638e8 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,30 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..fc2e4d7 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2406,6 +2406,34 @@ class CombinableTests(SimpleTestCase):\n             object() ^ Combinable()\n \n \n+from django.test import SimpleTestCase\n+from django.db.models.expressions import CombinedExpression, Expression\n+from django.db.models.fields import IntegerField, DecimalField, FloatField, AutoField\n+from django.db.models.aggregates import Combinable\n+\n+class CombinedExpressionTests(SimpleTestCase):\n+    def test_resolve_output_field_number(self):\n+        tests = [\n+            (IntegerField, AutoField, IntegerField),\n+            (AutoField, IntegerField, IntegerField),\n+            (IntegerField, DecimalField, DecimalField),\n+            (DecimalField, IntegerField, DecimalField),\n+            (IntegerField, FloatField, FloatField),\n+            (FloatField, IntegerField, FloatField),\n+        ]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n+        for lhs, rhs, combined in tests:\n+            for connector in connectors:\n+                with self.subTest(\n+                    lhs=lhs, connector=connector, rhs=rhs, combined=combined\n+                ):\n+                    expr = CombinedExpression(\n+                        Expression(lhs()),\n+                        connector,\n+                        Expression(rhs()),\n+                    )\n+                    self.assertIsInstance(expr.output_field, combined)\n+\n class CombinedExpressionTests(SimpleTestCase):\n     def test_resolve_output_field_number(self):\n         tests = [\n@@ -2416,7 +2444,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..e0c98ae 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError, models\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..4c11594 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,28 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_exits_without_creating_migrations(self):\n+        \"\"\"\n+        makemigrations --check should exit without creating migrations.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Ensure that no migration files are created\n+            self.assertFalse(os.path.exists(tmpdir))\n+\n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with a zero status when\n+        there are no changes to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            try:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            except SystemExit as e:\n+                self.assertEqual(e.code, 0)\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..6251a62 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory\n+import asyncio\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..5cc7025 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -22,6 +23,9 @@ from django.core.mail import EmailMultiAlternatives\n from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n+from django.urls import reverse\n+import re\n+import urllib.parse\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n@@ -892,6 +896,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..07981c6 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -494,18 +494,30 @@ class HTTPSitemapTests(SitemapTestsBase):\n         <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc><lastmod>2014-03-13T10:00:00</lastmod></sitemap>\n         </sitemapindex>\n         \"\"\"\n-        expected_content_sitemap = (\n-            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n-            '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" '\n-            'xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\\n'\n-            \"<url><loc>http://example.com/location/</loc>\"\n-            \"<lastmod>2013-03-13</lastmod></url>\"\n-            \"<url><loc>http://example.com/location/</loc>\"\n-            \"<lastmod>2014-03-13</lastmod></url>\\n\"\n-            \"</urlset>\"\n-        )\n+import os\n+from django.contrib.sitemaps import Sitemap\n+from django.test import TestCase\n+from django.urls import path\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapTests(TestCase):\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n-        self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n # RemovedInDjango50Warning\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..7e99864 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,10 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..0a4872c 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,7 +254,64 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_does_not_save_m2m_with_commit_false(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient2\",\n+            \"password2\": \"testclient2\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=False)\n+        self.assertFalse(user.orgs.exists())  # orgs should not be saved\n+\n+    def test_custom_form_saves_m2m_after_commit_false(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 3\")\n+\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient3\",\n+            \"password2\": \"testclient3\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=False)\n+        user.save()  # explicitly save user\n+        form.save_m2m()  # now save m2m\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..66c6d4a 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -7,6 +8,8 @@ from django.utils.timesince import timesince, timeuntil\n from django.utils.translation import npgettext_lazy\n \n \n+from django.test.utils import override_settings, requires_tz_support\n+...\n class TimesinceTests(TestCase):\n     def setUp(self):\n         self.t = datetime.datetime(2007, 8, 14, 13, 46, 0)\n@@ -236,7 +239,35 @@ class TimesinceTests(TestCase):\n             with self.subTest():\n                 self.assertEqual(timesince(t, value), expected)\n \n-    def test_depth_invalid(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        d = timezone.make_aware(d, timezone.get_default_timezone())\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_more_than_one_month_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=62)\n+        d = timezone.make_aware(d, timezone.get_default_timezone())\n+        self.assertEqual(timesince(d), \"2\\xa0months\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_aware_and_naive_datetimes(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        # 'd' is naive, 'now' is aware\n+        with self.assertRaises(TypeError):\n+            timesince(d, now)\n+\n+    def test_timesince_naive_datetimes(self):\n+        now_naive = datetime.datetime.now()\n+        d_naive = now_naive - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d_naive, now_naive), \"1\\xa0month\")\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             timesince(self.t, self.t, depth=0)\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..587ca78 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,6 +469,42 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n+class SubparserFormattingTests(SimpleTestCase):\n+    def test_missing_subparser_argument(self):\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command = Command()\n+        out, err = self.run_manage([\"cheeses\", \"create\"])\n+        self.assertIn(\n+            \"manage.py cheeses create: error: the following arguments are required: name\",\n+            err,\n+        )\n+\n+    def test_invalid_type_subparser_argument(self):\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"number\", type=int)\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command = Command()\n+        out, err = self.run_manage([\"cheeses\", \"create\", \"not_a_number\"])\n+        self.assertIn(\n+            \"manage.py cheeses create: error: argument number: invalid int value: 'not_a_number'\",\n+            err,\n+        )\n+\n+\n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..90a1fac 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -93,6 +93,14 @@ class GetStorageClassTests(SimpleTestCase):\n \n class FileSystemStorageTests(unittest.TestCase):\n     def test_deconstruction(self):\n+        \"\"\"\n+        Deconstructing a FileField where storage is a callable that returns \n+        default_storage should include the callable in the deconstruction.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n         path, args, kwargs = temp_storage.deconstruct()\n         self.assertEqual(path, \"django.core.files.storage.FileSystemStorage\")\n         self.assertEqual(args, ())\n@@ -1010,6 +1018,14 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         self.assertIsInstance(obj.storage_callable_class.storage, BaseStorage)\n \n     def test_deconstruction(self):\n+        \"\"\"\n+        Deconstructing a FileField where storage is a callable that returns \n+        default_storage should include the callable in the deconstruction.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n         \"\"\"\n         Deconstructing gives the original callable, not the evaluated value.\n         \"\"\"\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..1b0b967 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..94cc11e 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -109,6 +109,19 @@ class BaseConstraintTests(SimpleTestCase):\n \n \n class CheckConstraintTests(TestCase):\n+    def test_custom_violation_code_message(self):\n+        check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check1,\n+            name=\"price\",\n+            violation_error_code=\"custom_code\",\n+        )\n+        self.assertEqual(constraint.violation_error_code, \"custom_code\")\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n+\n     def test_eq(self):\n         check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n         check2 = models.Q(price__lt=models.F(\"discounted_price\"))\n@@ -289,6 +302,19 @@ class UniqueConstraintTests(TestCase):\n         cls.p1 = UniqueConstraintProduct.objects.create(name=\"p1\", color=\"red\")\n         cls.p2 = UniqueConstraintProduct.objects.create(name=\"p2\")\n \n+    def test_custom_violation_code_message(self):\n+        check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check1,\n+            name=\"price\",\n+            violation_error_code=\"custom_code\",\n+        )\n+        self.assertEqual(constraint.violation_error_code, \"custom_code\")\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n+\n     def test_eq(self):\n         self.assertEqual(\n             models.UniqueConstraint(fields=[\"foo\", \"bar\"], name=\"unique\"),\n",
  "django__django-16569": "",
  "django__django-16595": "",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..e8e9bb9 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8456,6 +8456,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_and_append_slash_true(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8463,6 +8499,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_and_append_slash_true(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8471,6 +8543,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_and_append_slash_true(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n@@ -8481,6 +8589,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_and_append_slash_true(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n     def test_missing_slash_append_slash_true_force_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8489,6 +8633,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_and_append_slash_true(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8499,6 +8679,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_and_append_slash_true(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n@@ -8507,6 +8723,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"user@example.com\",\n             is_staff=False,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_and_append_slash_true(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(user)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8622,6 +8874,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_and_append_slash_true(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8629,6 +8917,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_and_append_slash_true(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=False)\n     def test_missing_slash_append_slash_false_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n@@ -8637,6 +8961,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_and_append_slash_true(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..e212b44 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,21 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+\n+    def test_brotli_and_compress_mime_types(self):\n+        \"\"\"\n+        Test that FileResponse correctly identifies the MIME types for .br and .Z files.\n+        \"\"\"\n+        test_tuples = (\n+            (\".br\", \"application/x-brotli\"),\n+            (\".Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..3d20b00 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,37 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    def test_lookup_allowed_foreign_primary(self):\n+        @isolate_apps('modeladmin')\n+        def test_case(self):\n+            class Country(models.Model):\n+                name = models.CharField(max_length=256)\n+\n+            class Place(models.Model):\n+                country = models.ForeignKey(Country, models.CASCADE)\n+\n+            class Restaurant(models.Model):\n+                place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+            class Waiter(models.Model):\n+                restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+            class WaiterAdmin(ModelAdmin):\n+                list_filter = [\n+                    'restaurant__place__country',\n+                    'restaurant__place__country__name',\n+                ]\n+\n+            ma = WaiterAdmin(Waiter, self.site)\n+\n+            # Verify that lookups involving the foreign key as primary key are allowed\n+            self.assertIs(ma.lookup_allowed('restaurant__place__country', '1'), True)\n+            self.assertIs(ma.lookup_allowed('restaurant__place__country__id__exact', '1'), True)\n+            self.assertIs(ma.lookup_allowed('restaurant__place__country__name', 'test_value'), True)\n+        \n+        # Execute the test within the isolated apps context\n+        test_case(self)\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..bf44c83 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -921,8 +921,38 @@ class WriterTests(SimpleTestCase):\n             \"import datetime\\nfrom django.db import migrations, models\\n\",\n             output,\n         )\n-\n-    def test_migration_file_header_comments(self):\n+        \n+    def test_isort_default_import_ordering(self):\n+        \"\"\"\n+        Test that generated migration imports adhere to isort defaults and Django style.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield1\",\n+                        models.IntegerField(),\n+                    ),\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Check that imports are ordered correctly based on the issue description.\n+        expected_import_order = (\n+            \"import datetime\\n\"\n+            \"import time\\n\"\n+            \"from django.db import migrations, models\\n\"\n+        )\n+        self.assertIn(expected_import_order, output)\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..32639b4 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -321,6 +321,39 @@ class ImageFieldTwoDimensionsTests(ImageFieldTestMixin, TestCase):\n \n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n+class ImageFieldPostInitSignalTests(TestCase):\n+    def test_post_init_signal_not_connected_without_dimensions(self):\n+        \"\"\"\n+        Test that the post_init signal is not connected if width_field and height_field are not set.\n+        \"\"\"\n+        person_model_id = id(Person)\n+        # Ensure that Person (which doesn't use width_field/height_field) is not a sender\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_signal_connected_with_one_dimension(self):\n+        \"\"\"\n+        Test that the post_init signal is connected if one of width_field or height_field is set.\n+        \"\"\"\n+        person_model_id = id(PersonWithHeight)\n+        # Check that PersonWithHeight (which uses one dimension field) is a sender\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_signal_connected_with_both_dimensions(self):\n+        \"\"\"\n+        Test that the post_init signal is connected if both width_field and height_field are set.\n+        \"\"\"\n+        person_model_id = id(PersonWithWidthAndHeight)\n+        # Check that PersonWithWidthAndHeight (which uses both dimension fields) is a sender\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n     \"\"\"\n     Tests behavior of an ImageField with no dimension fields.\n@@ -330,6 +363,39 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n+class ImageFieldPostInitSignalTests(TestCase):\n+    def test_post_init_signal_not_connected_without_dimensions(self):\n+        \"\"\"\n+        Test that the post_init signal is not connected if width_field and height_field are not set.\n+        \"\"\"\n+        person_model_id = id(Person)\n+        # Ensure that Person (which doesn't use width_field/height_field) is not a sender\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_signal_connected_with_one_dimension(self):\n+        \"\"\"\n+        Test that the post_init signal is connected if one of width_field or height_field is set.\n+        \"\"\"\n+        person_model_id = id(PersonWithHeight)\n+        # Check that PersonWithHeight (which uses one dimension field) is a sender\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_signal_connected_with_both_dimensions(self):\n+        \"\"\"\n+        Test that the post_init signal is connected if both width_field and height_field are set.\n+        \"\"\"\n+        person_model_id = id(PersonWithWidthAndHeight)\n+        # Check that PersonWithWidthAndHeight (which uses both dimension fields) is a sender\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n     \"\"\"\n     Tests behavior of an ImageField with one dimensions field.\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..d935121 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1157,4 +1157,57 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n+\n+    def test_add_remove_index(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+            ],\n+            [],\n+        )\n+\n+    def test_add_index_twice(self):\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"power\"], name=\"idx_pony_power\"\n+                    ),\n+                ),\n+            ]\n+        )\n+\n+    def test_remove_index_twice(self):\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_power\"),\n+            ]\n+        )\n+\n+    def test_add_remove_different_indices(self):\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_power\"),\n+            ]\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..c54cdef 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -798,8 +798,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n-                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n             )\n@@ -814,8 +815,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n-                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n+                \"not a callable, an attribute of 'CityInline', or an attribute of \"\n+                \"'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n             )\n",
  "django__django-16901": "",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..0e54158 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -640,8 +640,26 @@ class MakeMigrationsTests(MigrationTestBase):\n                         call_command('makemigrations', 'migrations', verbosity=0)\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n-\n-    def test_failing_migration(self):\n+    def test_makemigrations_correct_model_app_pairs(self):\n+        \"\"\"\n+        Test that makemigrations calls allow_migrate with\n+        correct (app_label, model_name) pairs only.\n+        \"\"\"\n+        apps.register_model('migrations', UnicodeModel)\n+        apps.register_model('migrations2', UnserializableModel)\n+        with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+            with mock.patch.object(TestRouter, 'allow_migrate', return_value=True) as allow_migrate:\n+                call_command('makemigrations', 'migrations', 'migrations2', verbosity=0)\n+                # Check that allow_migrate is called with correct pairs\n+                for mock_call in allow_migrate.mock_calls:\n+                    _, call_args, call_kwargs = mock_call\n+                    connection_alias, app_name = call_args\n+                    model_name = call_kwargs['model_name']\n+                    # Verify if app_name has the model model_name\n+                    try:\n+                        apps.get_app_config(app_name).get_model(model_name)\n+                    except LookupError:\n+                        self.fail(f\"Invalid allow_migrate call with app '{app_name}' and model '{model_name}'\")\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..54f53b8 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -290,7 +290,31 @@ class PaginationTests(SimpleTestCase):\n \n     def test_get_page_empty_object_list_and_allow_empty_first_page_false(self):\n         \"\"\"\n-        Paginator.get_page() raises EmptyPage if allow_empty_first_page=False\n+from django.core.paginator import Paginator\n+from django.test import TestCase\n+\n+class PaginatorIterationTests(TestCase):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator(self):\n+        paginator = Paginator([], 2)\n+        pages = list(paginator)\n+        self.assertEqual(pages, [])\n+\n+    def test_single_page_paginator(self):\n+        paginator = Paginator([1, 2], 3)\n+        pages = list(paginator)\n+        self.assertEqual(pages, [[1, 2]])\n+\n+    def test_multiple_pages(self):\n+        paginator = Paginator([1, 2, 3, 4, 5], 2)\n+        pages = list(paginator)\n+        self.assertEqual(pages, [[1, 2], [3, 4], [5]])\n         and object_list is empty.\n         \"\"\"\n         paginator = Paginator([], 2, allow_empty_first_page=False)\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..c73588a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,6 +6359,29 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+    def test_hist_range_and_density():\n+        import matplotlib.pyplot as plt\n+        import numpy as np\n+\n+        # Test the original issue scenario\n+        _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+        assert bins[0] == 0\n+        assert bins[-1] == 1\n+\n+        # Test with a different range\n+        _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(-1, 1), density=True)\n+        assert bins[0] == -1\n+        assert bins[-1] == 1\n+\n+        # Test with density=False to confirm it behaves similarly\n+        _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+        assert bins[0] == 0\n+        assert bins[-1] == 1\n+\n+        # Test with explicit bin count and density=True\n+        _, bins, _ = plt.hist(np.random.rand(10), bins=5, range=(0, 1), density=True)\n+        assert bins[0] == 0\n+        assert bins[-1] == 1\n \n     data = [1, 2, 3]\n     nan_data = data + [np.nan]\n@@ -6368,4 +6391,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..d63c159 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -918,7 +918,14 @@ def test_hexbin_log():\n     plt.colorbar(h)\n \n \n-def test_inverted_limits():\n+def test_invert_log_axis_with_limits():\n+    # Test if inverting an axis with log scale using limits works correctly\n+    fig, ax = plt.subplots()\n+    ax.set_yscale('log')\n+    ax.set_ylim(1000, 1)  # Intend to invert\n+    assert ax.get_ylim() == (1000, 1), \"Log scale axis limits should be inverted\"\n+\n+    plt.close()\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n     # while still maintaining the inverted direction\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..3ffbee9 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,36 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+    \n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Check that shared properties are maintained after clear\n+    for i in range(2):\n+        for j in range(2):\n+            # Axes on the left should have visible y-tick labels\n+            assert axs_test[i, 0].yaxis.majorTicks[0].label1.get_visible()\n+            # Axes on the bottom should have visible x-tick labels\n+            assert axs_test[1, j].xaxis.majorTicks[0].label1.get_visible()\n+            # Ensure that other axes do not have visible tick labels\n+            if j > 0:\n+                assert not axs_test[i, j].yaxis.majorTicks[0].label1.get_visible()\n+            if i < 1:\n+                assert not axs_test[i, j].xaxis.majorTicks[0].label1.get_visible()\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..1a03707 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,25 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Test to check that no deprecation warning is emitted when plotting empty data.\n+    \"\"\"\n+    with pytest.warns(None) as record:\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+    # Ensure that no warnings were raised\n+    assert not record.list\n+\n+def test_convert_empty_data():\n+    \"\"\"\n+    Test to check that converting empty data does not raise any exceptions.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    # This should not raise any errors\n+    result = ax.convert_xunits([])\n+    assert result == []\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..c5699d0 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -13,6 +13,9 @@ from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n \n+import functools\n+import pytest\n+from matplotlib.testing.decorators import check_figures_equal\n import matplotlib.pyplot as plt\n import numpy as np\n \n@@ -21,6 +24,16 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_invisible_axes(fig_test, fig_ref):\n+    ax = fig_test.add_subplot(projection='3d')\n+    ax.plot([1, 2, 3], [1, 2, 3], [1, 2, 3])\n+    ax.set_visible(False)\n+\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_ref.set_visible(False)\n+\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..6a6b74e 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -156,8 +156,33 @@ def test_negative_rect():\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import matplotlib.patches as mpatches\n \n-@image_comparison(['clip_to_bbox'])\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch():\n+    fig_test, fig_ref = plt.figure(figsize=(6, 6)), plt.figure(figsize=(6, 6))\n+    ax_test, ax_ref = fig_test.add_subplot(), fig_ref.add_subplot()\n+\n+    # Reference: using equivalent on-off sequences with no offset\n+    rect_ref = mpatches.Rectangle((0.2, 0.2), 0.6, 0.6, linewidth=2, edgecolor='b', linestyle=(0, [5, 5]))\n+    rect_ref2 = mpatches.Rectangle((0.2, 0.2), 0.6, 0.6, linewidth=2, edgecolor='r', linestyle=(0, [0, 5, 5, 0]))\n+    \n+    assert rect_ref.get_linestyle() == (0, [5, 5])\n+    assert rect_ref2.get_linestyle() == (0, [0, 5, 5, 0])\n+\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+    \n+    # Test: using dash offset\n+    rect_test = mpatches.Rectangle((0.2, 0.2), 0.6, 0.6, linewidth=2, edgecolor='b', linestyle=(5, [5, 5]))\n+    rect_test2 = mpatches.Rectangle((0.2, 0.2), 0.6, 0.6, linewidth=2, edgecolor='r', linestyle=(0, [5, 5]))\n+    \n+    assert rect_test.get_linestyle() == (5, [5, 5])\n+    assert rect_test2.get_linestyle() == (0, [5, 5])\n+\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n def test_clip_to_bbox():\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..ef41fff 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,42 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.patches import Rectangle\n+\n+def test_stackplot_color_cycler():\n+    # Test to ensure stackplot doesn't raise ValueError and doesn't affect the Axes color cycler.\n+    x = np.array([1, 2, 3])\n+    y = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    \n+    fig, ax = plt.subplots()\n+    \n+    # Use 'C0' color for plot\n+    ax.plot([1, 3], [1, 3], color='C0')\n+\n+    # Add rectangle with facecolor 'C1'\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+\n+    # Test stackplot with color aliases without errors\n+    ax.stackplot(x, y, colors=['C2', 'C3', 'C4'])\n+\n+    # Verify colors have not changed the cycler\n+    assert ax._get_lines.prop_cycler.by_key()['color'] == ['C0', 'C1', 'C2', 'C3', 'C4']\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+    plt.close(fig)\n+\n+@pytest.mark.parametrize(\"colors\", [['C0', 'C1', 'C2'], ['C3', 'C4', 'C5']])\n+def test_stackplot_colors_parametrize(colors):\n+    # Test stackplot with different color aliases\n+    x = np.array([1, 2, 3])\n+    y = np.array([[1, 2, 3], [3, 2, 1], [1, 1, 1]])\n+\n+    fig, ax = plt.subplots()\n+    ax.stackplot(x, y, colors=colors)\n+\n+    # Ensure no error is raised\n+    plt.close(fig)\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..a863218 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -11,12 +11,43 @@ import matplotlib.patches as mpatches\n import matplotlib.lines as mlines\n from matplotlib.backend_bases import MouseButton, MouseEvent\n \n+from matplotlib.patches import Rectangle\n from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n     OffsetImage, TextArea, _get_packed_offsets)\n \n \n-@image_comparison(['offsetbox_clipping'], remove_text=True)\n+@pytest.mark.parametrize(\"align\", [\"baseline\", \"bottom\", \"top\", \"center\"])\n+def test_hpacker_alignment(align):\n+    fig = plt.figure(dpi=72)\n+    x1, y1 = 10, 20\n+    x2, y2 = 10, 30\n+    da1 = DrawingArea(x1, y1)\n+    da1.add_artist(Rectangle((0, 0), x1, y1))\n+    da2 = DrawingArea(x2, y2)\n+    da2.add_artist(Rectangle((0, 0), x2, y2))\n+    \n+    hpacker = HPacker(children=[da1, da2], pad=0, sep=0, align=align)\n+    renderer = fig.canvas.get_renderer()\n+\n+    # Getting extent and offsets\n+    *extents, offset_pairs = hpacker.get_extent_offsets(renderer)\n+    \n+    # Test assertions for different alignments\n+    if align == \"bottom\":\n+        expected_offsets = [(0, 0), (x1, 0)]\n+    elif align == \"top\":\n+        expected_offsets = [(0, y2 - y1), (x1, 0)]\n+    elif align == \"center\":\n+        expected_offsets = [(0, (y2 - y1) / 2), (x1, 0)]\n+    elif align == \"baseline\":\n+        expected_offsets = [(0, 0), (x1, 0)]\n+\n+    assert_allclose(offset_pairs, expected_offsets)\n+\n+    # Expected dimensions: width = x1 + x2, height = max(y1, y2)\n+    expected_extents = (x1 + x2, max(y1, y2), 0, 0)\n+    assert_allclose(extents, expected_extents)\n def test_offsetbox_clipping():\n     # - create a plot\n     # - put an AnchoredOffsetbox with a child DrawingArea\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..ff60dc7 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,8 +576,41 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n+    from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+    import numpy as np\n+\n     plt.rcParams[\"svg.fonttype\"] = \"none\"\n \n+    def test_annotationbbox_gid():\n+        # Test that the gid of an AnnotationBbox is included in the SVG output.\n+        fig, ax = plt.subplots()\n+\n+        # Create a sample image (a small white square)\n+        arr_img = np.ones((32, 32))\n+\n+        # Set position for the AnnotationBbox\n+        xy = (0.3, 0.55)\n+\n+        # Create OffsetImage and AnnotationBbox\n+        imagebox = OffsetImage(arr_img, zoom=0.1)\n+        imagebox.image.axes = ax\n+        ab = AnnotationBbox(imagebox, xy, xybox=(120., -80.), xycoords='data',\n+                            boxcoords=\"offset points\", pad=0.5,\n+                            arrowprops=dict(\n+                                arrowstyle=\"->\",\n+                                connectionstyle=\"angle,angleA=0,angleB=90,rad=3\"\n+                            ))\n+        ab.set_gid(\"test_annotationbbox_gid\")\n+        ax.add_artist(ab)\n+\n+        # Render the figure to SVG and check if gid is present\n+        with BytesIO() as fd:\n+            fig.savefig(fd, format='svg')\n+            buf = fd.getvalue().decode('utf-8')\n+\n+        expected_gid = '<g id=\"test_annotationbbox_gid\">'\n+        assert expected_gid in buf\n+\n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n         generic_options = [\"sans\", \"sans-serif\", \"sans serif\"]\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..98fe322 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,20 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+from matplotlib.testing.decorators import check_figures_equal\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+import matplotlib.colors as mcolors\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_no_deprecation_warnings(dtype):\n+    cm = plt.get_cmap(\"viridis\")\n+    with pytest.warns(None) as record:\n+        cm(np.empty((0,), dtype=dtype))\n+    assert not any(item.category == DeprecationWarning for item in record)\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..8917528 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,9 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..f85a4d3 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,30 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n-\n @mpl.style.context(\"default\")\n+def test_figure_with_draggable_legend():\n+    # Create a simple figure with a single plot and a draggable legend\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    ax.plot(time, speed, label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+    \n+    # Try to pickle the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Ensure no references to FigureCanvasQTAgg, which caused issues\n+    pkl_content = pkl.getvalue()\n+    assert b\"FigureCanvasAgg\" not in pkl_content\n+    assert b\"FigureCanvasQTAgg\" not in pkl_content\n+    \n+    # Load the figure from pickle and ensure it renders\n+    loaded_fig = pickle.loads(pkl_content)\n+    loaded_fig.canvas.draw()\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..639edac 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -44,6 +44,11 @@ def test_simple():\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n \n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n+from io import BytesIO\n+\n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n@@ -90,7 +95,28 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n-@mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Align the labels\n+\n+    # Test if the figure can be pickled\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    loaded = pickle.loads(pkl.getbuffer())\n+    assert loaded is not None\n+    loaded.canvas.draw()  # Ensure the loaded figure can be drawn\n+\n+    plt.close(loaded)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..aab10f5 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,6 +991,48 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n \n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..3146b77 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,42 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    # Create a contour in fig_test and fig_ref with different data\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[1, 0], [2, 1]])\n+\n+    # Set paths from cs_ref to cs_test\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+    # Assert that paths in cs_test are now the same as those in cs_ref\n+    assert len(cs_test.collections[0].get_paths()) == len(cs_ref.collections[0].get_paths())\n+    for path_test, path_ref in zip(cs_test.collections[0].get_paths(), cs_ref.collections[0].get_paths()):\n+        assert np.array_equal(path_test.vertices, path_ref.vertices)\n+        assert np.array_equal(path_test.codes, path_ref.codes)\n+\n+def test_contour_set_paths_empty():\n+    fig, ax = plt.subplots()\n+    cs = ax.contour([[0, 1], [1, 2]])\n+    # Test setting empty paths\n+    cs.set_paths([])\n+\n+    assert len(cs.collections[0].get_paths()) == 0\n+\n+def test_contour_set_paths_invalid():\n+    fig, ax = plt.subplots()\n+    cs = ax.contour([[0, 1], [1, 2]])\n+    # Test setting invalid paths\n+    try:\n+        cs.set_paths(None)\n+    except TypeError:\n+        pass\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..7a2d072 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -251,6 +251,24 @@ def test_templates_list(test_apps):\n     assert templates == [\"admin/index.html\", \"frontend/index.html\"]\n \n \n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_none_as_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(None, __name__)\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n+\n+def test_valid_name_allowed(app, client):\n+    try:\n+        blueprint = flask.Blueprint(\"valid_name\", __name__)\n+    except ValueError:\n+        pytest.fail(\"Blueprint raised ValueError unexpectedly!\")\n+        \n def test_dotted_name_not_allowed(app, client):\n     with pytest.raises(ValueError):\n         flask.Blueprint(\"app.ui\", __name__)\n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "diff --git a/requests/auth.py b/requests/auth.py\nindex ff8249e..0578894 100644\n--- a/requests/auth.py\n+++ b/requests/auth.py\n@@ -55,6 +55,11 @@ class HTTPProxyAuth(HTTPBasicAuth):\n         return r\n \n \n+import hashlib\n+import os\n+import time\n+from urllib.parse import urlparse\n+...\n class HTTPDigestAuth(AuthBase):\n     \"\"\"Attaches HTTP Digest Authentication to the given Request object.\"\"\"\n     def __init__(self, username, password):\n",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..19d10ac 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,11 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://-example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://example.-com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..2920068 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,23 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+import numpy as np\n+import xarray as xr\n+\n+def test_variable_setitem_with_custom_object():\n+    # Initial setup for testing __setitem__ with a custom object having a 'values' property\n+    good_indexed, bad_indexed = xr.DataArray([None], dims=[\"dim_0\"]), xr.DataArray([None], dims=[\"dim_0\"])\n+\n+    class HasValues:\n+        values = 5\n+\n+    # Perform assignments\n+    good_indexed.loc[{\"dim_0\": 0}] = set()\n+    bad_indexed.loc[{\"dim_0\": 0}] = HasValues()\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    # Assertions\n+    assert isinstance(good_indexed.values[0], set), \"Expected value to be of type 'set'\"\n+    assert isinstance(bad_indexed.values[0], HasValues), \"Expected value to be an instance of HasValues\"\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..1dd1efe 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2069,7 +2069,24 @@ class TestDataset:\n \n             assert data.attrs['Test'] is not copied.attrs['Test']\n \n-    def test_copy_with_data(self):\n+    def test_copy_unicode_indices(self):\n+        import numpy as np\n+        import xarray as xr\n+\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+\n+        # Check that dtype of 'x' coordinate remains as Unicode after deep copy\n+        ds_copy = ds.copy(deep=True)\n+        assert ds.coords['x'].dtype == ds_copy.coords['x'].dtype\n+        assert ds.coords['x'].dtype.kind == 'U'\n+        \n+        # Ensure that shallow copy also retains the dtype\n+        ds_copy_shallow = ds.copy(deep=False)\n+        assert ds.coords['x'].dtype == ds_copy_shallow.coords['x'].dtype\n+        assert ds.coords['x'].dtype.kind == 'U'\n         orig = create_test_data()\n         new_data = {k: np.random.randn(*v.shape)\n                     for k, v in orig.data_vars.items()}\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..2918028 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,7 +574,45 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n-    def test_infer_order_from_coords(self):\n+    def test_combine_leaving_bystander_dimensions(self):\n+        # Check non-monotonic bystander dimension coord doesn't raise\n+        # ValueError on combine (https://github.com/pydata/xarray/issues/3150)\n+        ycoord = ['a', 'c', 'b']\n+        \n+        data = np.random.rand(7, 3)\n+        \n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+        \n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+        \n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+        \n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n+    def test_non_monotonic_identical_coords(self):\n+        # Ensures the function works with identical but non-monotonic coordinates.\n+        ycoord = ['z', 'x', 'y']\n+        \n+        data_1 = np.random.rand(2, 3)\n+        data_2 = np.random.rand(3, 3)\n+        \n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data_1)),\n+                      coords=dict(x=[1, 2], y=ycoord))\n+        \n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data_2)),\n+                      coords=dict(x=[3, 4, 5], y=ycoord))\n+        \n+        combined = combine_by_coords([ds1, ds2])\n+        \n+        expected_data = np.concatenate([data_1, data_2], axis=0)\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], expected_data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5], y=ycoord))\n+        \n+        assert_identical(expected, combined)\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n         actual = combine_by_coords(objs)\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..b4c84b0 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,6 +2310,29 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units':'K'})\n+        out = da.quantile(.9, dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}\n+\n+        # Also test when keep_attrs=False (default behavior)\n+        out_no_attrs = da.quantile(.9, dim='x', keep_attrs=False)\n+        assert out_no_attrs.attrs == {}\n+\n+        # Test when quantile is a list and keep_attrs=True\n+        out_multiple_q = da.quantile([0.1, 0.9], dim='x', keep_attrs=True)\n+        assert out_multiple_q.attrs == {'units': 'K'}\n+\n+        # Test when quantile and attrs are not affected for scalar quantile\n+        out_scalar_q = da.quantile(0.5, dim='x', keep_attrs=True)\n+        assert out_scalar_q.attrs == {'units': 'K'}\n+\n+        # Ensure no attributes are kept when they are not set initially\n+        da_no_attrs = xr.DataArray([0, 0], dims=\"x\")\n+        out_no_attrs_initial = da_no_attrs.quantile(.9, dim='x', keep_attrs=True)\n+        assert out_no_attrs_initial.attrs == {}\n+\n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..bdaa765 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,31 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n+        # Test with a more complex DataArray\n+        da2 = xr.DataArray(data=[1, 2, 3], dims=\"x\", name=\"c\")\n+        ds2 = xr.Dataset({\"b\": (\"x\", [4, 5, 6])})\n+        \n+        expected = xr.Dataset({\"a\": 0, \"b\": (\"x\", [4, 5, 6]), \"c\": (\"x\", [1, 2, 3])})\n+        assert_identical(ds2.merge(da2), expected)\n+\n+        # Test with conflicting DataArray (should raise an error)\n+        da_conflict = xr.DataArray(data=[1, 2, 3], dims=\"x\", name=\"b\")\n+        ds_conflict = xr.Dataset({\"b\": (\"x\", [4, 5, 6])})\n+\n+        with pytest.raises(xr.MergeError):\n+            ds_conflict.merge(da_conflict)\n+\n+        # Test merging with a DataArray without a name (should raise an error)\n+        da_noname = xr.DataArray(data=[1, 2, 3], dims=\"x\")\n+        with pytest.raises(ValueError, match=\"DataArray must have a name\"):\n+            ds2.merge(da_noname)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..099b8e3 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -603,17 +603,35 @@ def test_min_count_dataset(func):\n     expected = getattr(ds[\"var1\"], func)(dim=\"x\", skipna=True, min_count=3)\n     assert_allclose(actual, expected)\n \n+import pytest\n+import numpy as np\n+from xarray import DataArray, Dataset\n+from xarray.testing import assert_allclose\n+from xarray.tests import assert_dask_array, has_dask, construct_dataarray\n \n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n-def test_multiple_dims(dtype, dask, func):\n+def test_min_count_nd(dtype, dask, func):\n     if dask and not has_dask:\n         pytest.skip(\"requires dask\")\n-    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n \n-    actual = getattr(da, func)((\"x\", \"y\"))\n-    expected = getattr(getattr(da, func)(\"x\"), func)(\"y\")\n+    min_count = 3\n+    dim_num = 3\n+    da = construct_dataarray(dim_num, dtype, contains_nan=True, dask=dask)\n+    actual = getattr(da, func)(dim=[\"x\", \"y\", \"z\"], skipna=True, min_count=min_count)\n+    # Supplying all dims is equivalent to supplying `...` or `None`\n+    expected = getattr(da, func)(dim=..., skipna=True, min_count=min_count)\n+\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n+\n+\n+@pytest.mark.parametrize(\"skipna\", [False, True])\n+def test_multiple_dims_with_min_count(skipna):\n+    da = DataArray([[np.nan, 2, 3], [4, np.nan, 6]], dims=[\"x\", \"y\"])\n+    actual = da.sum(dim=[\"x\", \"y\"], skipna=skipna, min_count=2)\n+    expected = da.stack(z=(\"x\", \"y\")).sum(dim=\"z\", skipna=skipna, min_count=2)\n     assert_allclose(actual, expected)\n \n \n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..179bc7d 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,24 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        import xarray as xr\n+        \n+        # Create two datasets with different attribute values\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        \n+        # Merge the datasets with combine_attrs set to 'override'\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Modify an attribute in the merged dataset\n+        ds3.attrs[\"x\"] = 2\n+        \n+        # Assert that the original dataset's attribute remains unchanged\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..ddddd01 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,24 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs_preservation() -> None:\n+    # Test if attributes are preserved with keep_attrs=True\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"description\": \"condition\"})\n+    x = xr.DataArray([1, 2], dims=\"x\", attrs={\"units\": \"meters\", \"description\": \"values for true\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"units\": \"meters\", \"description\": \"values for false\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"units\": \"meters\", \"description\": \"values for true\"})\n+    assert_identical(expected, actual)\n+\n+    # Test if attributes are not preserved with keep_attrs=False\n+    actual_no_attrs = xr.where(cond, x, y, keep_attrs=False)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+    cond = xr.DataArray([True, False], dims=\"x\")\n+    actual = xr.where(cond, 1, 0)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..7328aed 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -4,6 +4,7 @@ import numpy as np\n import pandas as pd\n import pytest\n \n+import numpy as np\n import xarray as xr\n from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n@@ -12,9 +13,33 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n \n with suppress(ImportError):\n     import dask.array as da\n+import pytest\n \n-\n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_from_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == unsigned_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..fb16de5 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1920,6 +1920,27 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_with_scalars_and_keep_attrs() -> None:\n+    # Test with scalar True and False values and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    # Test with scalar values and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 3.14, -1, keep_attrs=True)\n+    expected = xr.DataArray([3.14, -1, 3.14], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    # Ensure attributes are retained when arrays are present\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"condition\"})\n+    x = xr.DataArray([100, 100, 100], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([-100, -100, -100], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([100, -100, 100], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..5b27ce8 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,7 +221,12 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n-    def test_repr(self) -> None:\n+    @pytest.mark.slow\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # regression test for the issue regarding loading entire dataset into memory\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = xr.open_dataset(url, engine='zarr')\n+        assert ds.chunks is not None  # Ensure chunks can be accessed\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..24a4990 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -49,7 +49,21 @@ class TestDataArrayRolling:\n                     expected.values[expected.values.nonzero()],\n                 )\n \n-    @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n+    @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    def test_rolling_iter_center(self, da, center) -> None:\n+        size = 3\n+        rolling_obj = da.rolling(time=size, center=center)\n+\n+        expected_results = (\n+            rolling_obj.mean().values\n+            if center\n+            else [float('nan')] * (size - 1) + list(da.values[: len(da) - size + 1])\n+        )\n+\n+        result = [window.mean().values.item() for label, window in rolling_obj]\n+\n+        np.testing.assert_allclose(result, expected_results, equal_nan=True)\n     def test_rolling_repr(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..9f9b04b 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,12 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import numpy as np\n+import xarray as xr\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"int64\", \"float32\", \"float64\"])\n+def test_stack_preserve_dtype(dtype: str) -> None:\n+    ds = xr.Dataset(coords={'a': np.array([0, 1], dtype=dtype)})\n+    stacked = ds.stack(b=('a',))\n+    assert str(stacked['a'].values.dtype) == dtype\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..a666600 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,14 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+from pylint.lint import Run\n+from _pytest.capture import CaptureFixture\n+from test_data import EMPTY_MODULE\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..cb0538d 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,28 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    def test_recursive_ignore(self):\n+        \"\"\"Ensures files and directories are ignored in recursive mode using various ignore options.\"\"\"\n+        ignore_cases = [\n+            (\"--ignore\", \"ignored_subdirectory\"),\n+            (\"--ignore\", \"failing.py\"),\n+            (\"--ignore-patterns\", \"ignored_.*\"),\n+            (\"--ignore-patterns\", \"failing.*\"),\n+            (\"--ignore-paths\", \".*ignored.*\"),\n+            (\"--ignore-paths\", \".*failing.*\"),\n+        ]\n+        \n+        for ignore_parameter, ignore_value in ignore_cases:\n+            self._runtest(\n+                [\n+                    join(HERE, \"regrtest_data\", \"directory\"),\n+                    \"--recursive=y\",\n+                    ignore_parameter,\n+                    ignore_value,\n+                ],\n+                code=0,\n+            )\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..7fb3176 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -751,19 +751,67 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n             \"/usr/local/lib/python3.9/lib-dynload\",\n             \"/usr/local/lib/python3.9/site-packages\",\n         ]\n-        with _test_sys_path(), patch(\"os.getcwd\") as mock_getcwd:\n+        with _test_sys_path(), patch(\"os.getcwd\") as mock_getcwd, patch(\"os.environ\", {'PYTHONPATH': ''}):\n             mock_getcwd.return_value = cwd\n             paths = [cwd, *default_paths]\n             sys.path = copy(paths)\n             with _test_environ_pythonpath():\n                 modify_sys_path()\n-            assert sys.path == paths[1:]\n+            assert sys.path == paths[1:], f\"Failed when sys.path started with {paths[0]}\"\n+\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], f\"Failed when sys.path started with {paths[0]}\"\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], f\"Failed when sys.path started with {paths[0]}\"\n+\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths, f\"Unexpected removal when sys.path started with {paths[0]}\"\n+\n+            paths = [\"/absolute_path_not_to_remove\", \".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath(\".\"):\n+                modify_sys_path()\n+            assert sys.path == paths, f\"Unexpected removal with PYTHONPATH and sys.path started with {paths[0]}\"\n \n             paths = [cwd, cwd, *default_paths]\n             sys.path = copy(paths)\n             with _test_environ_pythonpath(\".\"):\n                 modify_sys_path()\n-            assert sys.path == paths[1:]\n+            assert sys.path == paths[1:], f\"Failed when sys.path started with {paths[0]}\"\n+\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], f\"Failed when sys.path started with {paths[0]}\"\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], f\"Failed when sys.path started with {paths[0]}\"\n+\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths, f\"Unexpected removal when sys.path started with {paths[0]}\"\n+\n+            paths = [\"/absolute_path_not_to_remove\", \".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath(\".\"):\n+                modify_sys_path()\n+            assert sys.path == paths, f\"Unexpected removal with PYTHONPATH and sys.path started with {paths[0]}\"\n \n             paths = [cwd, \"/custom_pythonpath\", *default_paths]\n             sys.path = copy(paths)\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..44e9441 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -159,8 +159,40 @@ def logging_during_setup_and_teardown(caplog):\n     logger.info(\"a_teardown_log\")\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n+import logging\n+\n+def test_caplog_get_records_and_clear_consistency(caplog):\n+    \"\"\"Test to ensure caplog.get_records and caplog.records are consistent after clear.\"\"\"\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Verify initial consistency\n+    verify_consistency()\n+    logging.warning(\"initial log\")\n+    verify_consistency()\n+    \n+    # Clear the caplog and verify consistency\n+    caplog.clear()\n+    verify_consistency()\n \n-def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n+    # Log after clearing and verify consistency again\n+    logging.warning(\"post-clear log\")\n+    verify_consistency()\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"post-clear log\"]\n+\n+def test_caplog_clear_only_affects_call_stage(caplog, logging_during_setup_and_teardown):\n+    \"\"\"Test to ensure caplog.clear only clears the 'call' stage records.\"\"\"\n+    logger.info(\"a_call_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log\"]\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+    \n+    caplog.clear()\n+    \n+    assert caplog.get_records(\"call\") == []\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+    logging.info(\"a_call_log_after_clear\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log_after_clear\"]\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n     logger.info(\"a_call_log\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..fcc1b33 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1273,6 +1273,32 @@ def test_pdb_teardown_skipped(\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+def test_pdb_teardown_skipped_for_unittest_classes(pytester: Pytester) -> None:\n+    \"\"\"Ensure setUp and tearDown are not called for unittest classes skipped at class level with --pdb.\"\"\"\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        @unittest.skip(\"skip class\")\n+        class SkippedTestCase(unittest.TestCase):\n+            def setUp(self):\n+                self.executed_methods.append('setUp')\n+\n+            def tearDown(self):\n+                self.executed_methods.append('tearDown')\n+\n+            def test_something(self):\n+                pass\n+\n+        def test_execution(pytester):\n+            pytester.executed_methods = []\n+            SkippedTestCase().run()\n+            assert pytester.executed_methods == []\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+\n \n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..a202cfc 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1048,6 +1048,26 @@ class TestFDCapture(object):\n             s = cap.snap()\n             assert s == \"but now yes\\n\"\n             cap.suspend()\n+\n+    def test_encodedfile_mode(self):\n+        # Ensure that the EncodedFile mode does not advertise 'b'\n+        capfd = pytest.helpers.capture.CaptureManager(suspend_exc_info=None)\n+        captured = capfd.suspend_global_capture()\n+        assert 'b' not in captured.out.mode\n+        assert 'b' not in captured.err.mode\n+\n+    def test_encodedfile_write_str(self):\n+        # Test that writing a string to EncodedFile works\n+        capfd = pytest.helpers.capture.CaptureManager(suspend_exc_info=None)\n+        sys.stdout.write(\"This is a string.\\n\")\n+        captured = capfd.suspend_global_capture()\n+        assert 'This is a string.\\n' in captured.out\n+\n+    def test_encodedfile_write_bytes_exception(self):\n+        # Test that writing bytes to EncodedFile raises TypeError\n+        encoded_file = pytest.helpers.capture.EncodedFile(sys.stdout, encoding='utf-8')\n+        with pytest.raises(TypeError, match=\"write\\(\\) argument must be str, not bytes\"):\n+            encoded_file.write(b'This should fail\\n')\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..6d53a5e 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,6 +178,29 @@ class TestMockDecoration:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n+    def test_mock_sentinel_check_with_numpy_array(self, testdir):\n+        \"\"\"\n+        Ensure that using unittest.mock.patch with numpy.array as 'new' value\n+        does not raise a ValueError during test collection.\n+        \"\"\"\n+        testdir.makepyfile(\n+            test_file=\"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+\n+            class DummyClass:\n+                FOO = None\n+\n+            class TestExample:\n+                @patch('test_file.DummyClass.FOO', new=np.array([-5.5, 3.0]))\n+                def test_with_numpy_array(self):\n+                    assert DummyClass.FOO[0] == -5.5\n+                    assert DummyClass.FOO[1] == 3.0\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n+\n     def test_mock(self, testdir):\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..aac0b65 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -126,8 +126,7 @@ class TestPaste(object):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n         assert url == \"https://bpaste.net\"\n-        assert \"lexer=%s\" % lexer in data.decode()\n+        assert \"lexer=text\" in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..71169ae 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -199,6 +200,25 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n     assert result.ret == 0\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n+def test_show_fixture_action_with_bytes(testdir):\n+    \"\"\"\n+    Test for Issue: BytesWarning when using --setup-show with bytes parameter.\n+    Ensures bytes are handled correctly without raising BytesWarning.\n+    \"\"\"\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World', b'Bytes Test'])\n+        def test_data(data):\n+            assert isinstance(data, bytes)\n+        \"\"\"\n+    )\n+    result = testdir.runpytest(\"--setup-show\", str(test_file))\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\n+        [\"*SETUP    F data*Hello World*\", \"*SETUP    F data*Bytes Test*\"]\n+    )\n \n \n def test_dynamic_fixture_request(testdir):\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..3ff76b9 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,6 +1,8 @@\n+\n import sys\n \n import pytest\n+from _pytest.pytester import Testdir\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..14e588a 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,8 +513,11 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n-\n-    def test_capfdbinary(self, testdir):\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n             def test_hello(capfdbinary):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..6393e43 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,6 +51,27 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n+def test_logger_level_restoration(testdir):\n+    \"\"\"Ensure that 'set_level' restores the logger level after the end of the test\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            root_logger = logging.getLogger()\n+            assert root_logger.level == logging.WARNING\n+            caplog.set_level(logging.DEBUG)\n+            assert root_logger.level == logging.DEBUG\n+\n+        def test2(caplog):\n+            root_logger = logging.getLogger()\n+            assert root_logger.level == logging.WARNING\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..b7237b4 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,4 +1,37 @@\n+\n import os\n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_symlink_nested_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory within another directory is collected.\"\"\"\n+    parent_dir = pytester.mkdir(\"parent_dir\")\n+    nested_dir = parent_dir.mkdir(\"nested_dir\")\n+    nested_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_to_nested\").symlink_to(nested_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_symlink_with_ignore(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is ignored if listed in collect_ignore.\"\"\"\n+    dir = pytester.mkdir(\"dir_with_ignore\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_ignore\").symlink_to(dir)\n+    pytester.makeconftest(\"collect_ignore = ['symlink_ignore']\")\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=0)\n+\n+def test_collect_broken_symlink(pytester: Pytester) -> None:\n+    \"\"\"A broken symlink does not cause errors but is not collected.\"\"\"\n+    pytester.path.joinpath(\"broken_symlink\").symlink_to(\"non_existent_path\")\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=0, errors=0)\n+\n import pprint\n import sys\n import textwrap\n@@ -9,7 +42,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..52e14ed 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,26 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_fix_private_setUpClass_fixture(pytester: Pytester) -> None:\n+    testpath = pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class TestExample(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            def test_sample(self):\n+                assert True\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_*\")\n+\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_TestExample*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..8b36383 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,10 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+import numpy as np\n+from sklearn.linear_model import RidgeClassifierCV\n+from numpy.testing import assert_equal\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n@@ -597,8 +601,28 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    y = rng.choice([-1, 1], size=n_samples)\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_alphas))\n \n-def test_ridgecv_sample_weight():\n+    # with len(y.shape) == 2\n+    n_targets = 3\n+    y = rng.choice([-1, 1], size=(n_samples, n_targets))\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_targets, n_alphas))\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..0d2a5eb 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,15 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Test overflow in fowlkes_mallows_score\n+    # Create large input arrays to trigger the overflow\n+    x = np.array([1] * (50000 + 2000) + [2] * (14000 + 800) + [3] * (3200 + 200) + [4] * (800 + 40) + [5] * (300 + 20))\n+    y = np.array([0] * 50000 + [1] * 2000 + [0] * 14000 + [1] * 800 + [0] * 3200 + [1] * 200 + [0] * 800 + [1] * 40 + [0] * 300 + [1] * 20)\n+\n+    # fowlkes_mallows_score should not produce a RuntimeWarning or 'nan'\n+    score = fowlkes_mallows_score(x, y)\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..95114e5 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,30 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_provided_vocabulary_get_feature_names():\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocab)\n \n-def test_vectorizer_max_features():\n+    # Check if vocabulary_ attribute is None before transform\n+    assert not hasattr(cv, \"vocabulary_\")\n+\n+    # get_feature_names should not raise NotFittedError with a provided vocabulary\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(feature_names, vocab)\n+\n+    # Transform the corpus\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = cv.transform(corpus)\n+    assert_equal(X.shape, (4, 9))\n+\n+    # After transform, the vocabulary_ attribute should be set\n+    assert hasattr(cv, \"vocabulary_\")\n+    assert_array_equal(cv.get_feature_names(), vocab)\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..1faa5c6 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1159,7 +1159,15 @@ def test_search_cv_timing():\n     gs = GridSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0)\n     rs = RandomizedSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, n_iter=2)\n \n+    from sklearn.utils import assert_true\n+    from sklearn.utils import assert_greater_equal\n+\n     for search in (gs, rs):\n+        search.fit(X, y)\n+        # Check that refit_time_ is available and is a non-negative float\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n         search.fit(X, y)\n         for key in ['mean_fit_time', 'std_fit_time']:\n             # NOTE The precision of time.time in windows is not high\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..72d7d62 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,7 +21,7 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n-\n+from sklearn.metrics.scorer import get_scorer\n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..c570805 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,7 +154,32 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n-def test_clone_sparse_matrices():\n+from sklearn.base import BaseEstimator, clone\n+from sklearn.preprocessing import StandardScaler\n+import pytest\n+\n+\n+class MyCustomEstimator(BaseEstimator):\n+    def __init__(self, estimator_class=None):\n+        self.estimator_class = estimator_class\n+\n+\n+def test_clone_estimator_types():\n+    # Verify that clone works for estimator class types as parameters\n+    estimator = MyCustomEstimator(estimator_class=StandardScaler)\n+    cloned_estimator = clone(estimator)\n+\n+    # Ensure the cloned estimator has the same class type for 'estimator_class'\n+    assert cloned_estimator.estimator_class is estimator.estimator_class\n+\n+    # Ensure the estimator class type parameter is preserved and unchanged\n+    assert cloned_estimator.estimator_class == StandardScaler\n+\n+\n+def test_clone_errors_on_non_estimators():\n+    # Verify that attempting to clone non-estimator types raises TypeError\n+    with pytest.raises(TypeError):\n+        clone(object())\n     sparse_matrix_classes = [\n         getattr(sp, name)\n         for name in dir(sp) if name.endswith('_matrix')]\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..a7e2f40 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -7,7 +7,8 @@ from scipy import linalg\n \n import pytest\n \n-from sklearn.model_selection import train_test_split\n+import numpy as np\n+from sklearn.linear_model.least_angle import LassoLarsIC\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_less\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..d0f4707 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -494,6 +494,25 @@ def test_shuffle_stratifiedkfold():\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n+def test_stratified_kfold_shuffles_with_different_random_states():\n+    import numpy as np\n+    from sklearn.model_selection import StratifiedKFold\n+\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    # Using different random states to test that shuffling yields different results\n+    skf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n+    skf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=2)\n+    test_indices1 = [test_idx for _, test_idx in skf1.split(X, y)]\n+    test_indices2 = [test_idx for _, test_idx in skf2.split(X, y)]\n+\n+    # Convert to sorted tuple of tuples to ensure consistent comparison\n+    test_set1 = sorted([tuple(sorted(idx)) for idx in test_indices1])\n+    test_set2 = sorted([tuple(sorted(idx)) for idx in test_indices2])\n+\n+    assert test_set1 != test_set2, \"Shuffling with different random states did not produce different test sets\"\n+\n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..d460ff6 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n@@ -202,6 +202,11 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     Xt = est.fit_transform(X)\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n \n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..010416d 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,7 +598,16 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n-def test_gaussian_mixture_fit():\n+import numpy as np\n+from sklearn.utils.testing import assert_array_equal\n+\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..db69e5d 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -503,7 +503,47 @@ def test_transform():\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n                               eclf2.transform(X))\n+\n+\n+from sklearn.datasets import load_iris, make_regression\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n+from sklearn.utils._testing import assert_array_equal, assert_array_almost_equal\n+import numpy as np\n+import pytest\n+\n+@pytest.mark.filterwarnings('ignore: Default solver will be changed')  # 0.22\n+@pytest.mark.filterwarnings('ignore: Default multi_class will')  # 0.22\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(load_iris(return_X_y=True)[0], load_iris(return_X_y=True)[1], VotingClassifier(\n+        [('lr', LogisticRegression()), \n+         ('rf', RandomForestClassifier(n_estimators=5))]))]\n+)\n+def test_none_estimator_with_weights(X, y, voter):\n+    # Check that an estimator can be set to None and passing some weight\n+    # Regression test for\n+    # https://github.com/scikit-learn/scikit-learn/issues/13777\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(make_regression(n_samples=100, n_features=4)[0], make_regression(n_samples=100, n_features=4)[1], VotingClassifier(\n+        [('lr', LogisticRegression()), \n+         ('rf', RandomForestClassifier(n_estimators=5))]))]\n+)\n+def test_none_estimator_no_weights(X, y, voter):\n+    # Check that an estimator can be set to None without passing weights\n+    voter.fit(X, y)\n+    voter.set_params(lr=None)\n+    voter.fit(X, y)\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == (100,)\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..98dac4e 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -397,7 +397,34 @@ def test_export_text():\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n \n-def test_plot_tree_entropy(pyplot):\n+def test_single_feature_export_text():\n+    from sklearn.tree import DecisionTreeClassifier\n+    from sklearn.tree import export_text\n+    from sklearn.datasets import load_iris\n+\n+    # Load the iris dataset\n+    X, y = load_iris(return_X_y=True)\n+    # Use only a single feature\n+    X_single_feature = X[:, 0].reshape(-1, 1)\n+\n+    # Train the Decision Tree Classifier\n+    tree = DecisionTreeClassifier()\n+    tree.fit(X_single_feature, y)\n+\n+    # Expected report for a tree with only one feature\n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 5.45\n+    |   |--- class: 0\n+    |--- sepal_length >  5.45\n+    |   |--- class: 2\n+    \"\"\").lstrip()\n+\n+    # Check if export_text works without raising an error\n+    tree_text = export_text(tree, feature_names=['sepal_length'])\n+    assert tree_text.startswith(\"|---\")\n+\n+    # No IndexError should be raised and the output should be consistent\n+    print(tree_text)\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..8cd5055 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -24,10 +24,16 @@ def test_get_deps_info():\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n \n+def test_get_deps_info_with_joblib():\n+    deps_info = _get_deps_info()\n+    assert 'joblib' in deps_info\n \n def test_show_versions_with_blas(capsys):\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'joblib' in out\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..624f8c0 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -125,7 +125,35 @@ def test_extract_xi():\n     assert_array_equal(clust.labels_, expected_labels)\n \n \n-def test_cluster_hierarchy_():\n+def test_float_min_samples():\n+    # Test the fix for handling float min_samples in OPTICS\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 10\n+\n+    C1 = [-5, -2] + .9 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .2 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [2, 3] + .5 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * 10, [1] * 10, [2] * 10]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Using float for min_samples\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=2,\n+                   max_eps=np.inf, cluster_method='xi',\n+                   xi=0.05).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+    \n+    # Test with min_samples just below and above thresholds\n+    clust_low = OPTICS(min_samples=0.05, min_cluster_size=2,\n+                   max_eps=np.inf, cluster_method='xi',\n+                   xi=0.05).fit(X)\n+    clust_high = OPTICS(min_samples=0.2, min_cluster_size=2,\n+                   max_eps=np.inf, cluster_method='xi',\n+                   xi=0.05).fit(X)\n+    \n+    assert len(set(clust_low.labels_)) > 1  # Ensure some clustering is detected\n+    assert len(set(clust_high.labels_)) > 1  # Ensure some clustering is detected\n     rng = np.random.RandomState(0)\n     n_points_per_cluster = 100\n     C1 = [0, 0] + 2 * rng.randn(n_points_per_cluster, 2)\n",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..6dd8f52 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -414,4 +414,41 @@ def test_infinite_values_missing_values():\n                                                learning_rate=1, max_depth=2)\n \n     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+\n+import pytest\n+import numpy as np\n+from sklearn.experimental import enable_hist_gradient_boosting\n+from sklearn.ensemble import HistGradientBoostingClassifier\n+\n+@pytest.mark.parametrize(\"scoring\", [None, 'loss'])\n+def test_string_target_early_stopping(scoring):\n+    # Regression tests for #14709 where the targets need to be encoded before\n+    # to compute the score\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt.fit(X, y)\n+\n+def test_string_target_with_custom_scorer():\n+    # Test early stopping with a custom scorer\n+    from sklearn.metrics import make_scorer, accuracy_score\n+\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    \n+    custom_scorer = make_scorer(accuracy_score)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=custom_scorer)\n+    gbrt.fit(X, y)\n+\n+@pytest.mark.parametrize(\"n_iter_no_change\", [None, 5])\n+def test_string_target_no_early_stopping(n_iter_no_change):\n+    # Test that string targets work without early stopping enabled\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    \n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=n_iter_no_change)\n+    gbrt.fit(X, y)\n+    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..ec35988 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,41 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+from sklearn import svm\n+from scipy import sparse\n+import numpy as np\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_empty_X():\n+    # Test behavior when X is empty\n+    X_train = sparse.csr_matrix((0, 0))\n+    y_train = np.array([])\n+    model = svm.SVR(kernel='linear')\n+    try:\n+        model.fit(X_train, y_train)\n+        assert False, \"Expected ValueError due to empty X_train\"\n+    except ValueError as e:\n+        assert \"could not broadcast input array\" in str(e)\n+\n+def test_sparse_fit_no_support_vectors():\n+    # Test when there are no support vectors\n+    X_train = sparse.csr_matrix([[0, 0, 0, 0],\n+                                 [0, 0, 0, 0]])\n+    y_train = np.array([0, 0])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert model.dual_coef_.shape == (1, 0)\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..06c4590 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -98,7 +98,46 @@ def test_strip_accents():\n     assert strip_accents_unicode(a) == expected\n \n \n-def test_to_ascii():\n+def test_strip_accents():\n+    # check some classical latin accentuated symbols\n+    a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n+    expected = 'aaaaaaceeee'\n+    assert strip_accents_unicode(a) == expected\n+\n+    a = '\u00ec\u00ed\u00ee\u00ef\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd'\n+    expected = 'iiiinooooouuuuy'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # check some arabic\n+    a = '\\u0625'  # alef with a hamza below: \u0625\n+    expected = '\\u0627'  # simple alef: \u0627\n+    assert strip_accents_unicode(a) == expected\n+\n+    # mix letters accentuated and not\n+    a = \"this is \u00e0 test\"\n+    expected = 'this is a test'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test for issue case with NFKD form\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..d0059b3 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -338,4 +338,22 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n+\n+def test_iforest_no_warning_with_dataframe_contamination():\n+    \"\"\"Check that no warnings are raised when fitting with a DataFrame and contamination != 'auto'.\"\"\"\n+    import warnings\n+    import numpy as np\n+    import pandas as pd\n+    from sklearn.ensemble import IsolationForest\n+\n+    rng = np.random.RandomState(42)\n+\n+    # Create a DataFrame with random data\n+    X = pd.DataFrame(rng.randn(100, 5), columns=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n+    model = IsolationForest(random_state=0, contamination=0.1)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        # This should not raise any warnings\n+        model.fit(X)\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..eb9356e 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -13,6 +13,28 @@ from sklearn.utils._testing import assert_array_equal\n from sklearn.utils._testing import assert_allclose_dense_sparse\n from sklearn.utils._testing import assert_almost_equal\n \n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for ignoring the transformer in remainder.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.compose import (\n     ColumnTransformer,\n@@ -21,6 +43,10 @@ from sklearn.compose import (\n )\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n+from sklearn.feature_selection import VarianceThreshold\n+import pytest\n+import pandas as pd\n+import numpy as np\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n \n \n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..006f7c8 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,10 +945,20 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+def test_kmeans_inertia_equal_in_diff_n_jobs():\n+    # Additional test to check if inertia is same for different n_jobs\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(100, 5))\n \n-def test_minibatch_kmeans_partial_fit_int_data():\n-    # Issue GH #14314\n-    X = np.array([[-1], [1]], dtype=np.int)\n-    km = MiniBatchKMeans(n_clusters=2)\n-    km.partial_fit(X)\n-    assert km.cluster_centers_.dtype.kind == \"f\"\n+    inertia_1 = KMeans(n_clusters=5, random_state=42, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=5, random_state=42, n_jobs=4).fit(X).inertia_\n+    assert_almost_equal(inertia_1, inertia_2, decimal=5)\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..a64c268 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,6 +251,26 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(reason=\"Pending fix for prepend indentation\")\n+def test_LiteralIncludeReader_prepend_and_dedent(literal_inc_path):\n+    # This test case covers the scenario described in the issue where prepend indentation is not preserved.\n+    options = {\n+        'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+        'end-at': '</plugin>',\n+        'prepend': '      <plugin>',  # Intentional spaces to check indentation preservation\n+        'dedent': None\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path / 'pom.xml', options, DUMMY_CONFIG)\n+    content, _ = reader.read()\n+    \n+    assert content == (\"      <plugin>\\n\"\n+                       \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                       \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                       \"        <version>2.15.0</version>\\n\"\n+                       \"        <configuration>\\n\"\n+                       \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+                       \"        </configuration>\\n\"\n+                       \"      </plugin>\\n\")\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..6ae4be8 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,17 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_no_return_type_for_class(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: sample_package.Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert 'Return type:' not in context\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..c191b9f 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -147,6 +147,40 @@ def test_glossary(app):\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n+    # Test for case sensitivity\n+    text_case_sensitive = (\".. glossary::\\n\"\n+                           \"\\n\"\n+                           \"   mysql\\n\"\n+                           \"       MySQL database system\\n\"\n+                           \"\\n\"\n+                           \"   MySQL\\n\"\n+                           \"       Relational database management system\\n\")\n+\n+    # doctree\n+    doctree_case_sensitive = restructuredtext.parse(app, text_case_sensitive)\n+    assert_node(doctree_case_sensitive, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree_case_sensitive[0][0][0][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][0][1],\n+                [definition, nodes.paragraph, \"MySQL database system\"])\n+    \n+    assert_node(doctree_case_sensitive[0][0][1][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][1][1],\n+                [definition, nodes.paragraph, \"Relational database management system\"])\n+\n+    # index\n+    objects_case_sensitive = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects_case_sensitive\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects_case_sensitive\n+\n \n def test_glossary_warning(app, status, warning):\n     # empty line between terms\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..f26ebc7 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -324,7 +324,19 @@ def test_signature_from_str_complex_annotations():\n \n \n def test_signature_from_str_kwonly_args():\n-    sig = inspect.signature_from_str('(a, *, b)')\n+    import pytest\n+    from sphinx.util import inspect\n+    from inspect import Parameter\n+\n+    def test_signature_with_positional_only_default():\n+        sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+        assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+        assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+        assert sig.parameters['a'].default == Parameter.empty\n+        assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+        assert sig.parameters['b'].default == '0'\n+        assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+        assert sig.parameters['c'].default == '1'\n     assert list(sig.parameters.keys()) == ['a', 'b']\n     assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n     assert sig.parameters['a'].default == Parameter.empty\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..c48a742 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -11,6 +12,7 @@\n import abc\n import sys\n from importlib import import_module\n+from typing import TypeVar, Generic\n \n import pytest\n \n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..33d4ec5 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -165,11 +166,33 @@ class SkipMemberTest(TestCase):\n                         SampleClass.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init(self):\n+        class SampleClassWithInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"SampleClassWithInit.__init__.DOCSTRING\"\"\"\n+                pass\n+        \n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_class_special_undoc(self):\n         self.assertSkip('class', '__special_undoc__',\n                         SampleClass.__special_undoc__, True,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init(self):\n+        class SampleClassWithInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"SampleClassWithInit.__init__.DOCSTRING\"\"\"\n+                pass\n+        \n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_private_doc(self):\n         self.assertSkip('exception', '_private_doc',\n                         SampleError._private_doc, False,\n@@ -185,6 +208,17 @@ class SkipMemberTest(TestCase):\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init(self):\n+        class SampleClassWithInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"SampleClassWithInit.__init__.DOCSTRING\"\"\"\n+                pass\n+        \n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_special_undoc(self):\n         self.assertSkip('exception', '__special_undoc__',\n                         SampleError.__special_undoc__, True,\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..05785fd 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,53 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import os\n+import shutil\n+from pathlib import Path\n+\n+@pytest.fixture(scope=\"function\")\n+def temp_project_dir(tmp_path):\n+    # Setup a temporary Sphinx project directory\n+    source_dir = tmp_path / \"source\"\n+    build_dir = tmp_path / \"build\"\n+    os.makedirs(source_dir)\n+    os.makedirs(build_dir)\n+\n+    (source_dir / \"conf.py\").write_text(\"\"\"\n+extensions = ['sphinx.ext.linkcheck']\n+master_doc = 'index'\n+\"\"\")\n+\n+    yield source_dir, build_dir\n+\n+    # Teardown\n+    shutil.rmtree(source_dir)\n+    shutil.rmtree(build_dir)\n+\n+@pytest.mark.sphinx('linkcheck', freshenv=True)\n+def test_local_links(temp_project_dir, app_params):\n+    srcdir, outdir = temp_project_dir\n+    app = app_params(srcdir=srcdir, buildername='linkcheck', confoverrides={'linkcheck_anchors_ignore': []})\n+\n+    (srcdir / \"index.rst\").write_text('''\n+Valid local link_\n+Invalid local link_\n+\n+.. _local-link: conf.py\n+.. _invalid-link: doesntexist\n+''')\n+\n+    app.builder.build_all()\n+\n+    content = (outdir / 'output.txt').read_text()\n+    print(content)\n+\n+    # Check that the valid local link is acknowledged\n+    assert \"-local-   conf.py\" in content\n+\n+    # Check that the invalid local link is reported as broken\n+    assert \"[broken] doesntexist\" in content\n+\n import json\n import re\n from unittest import mock\n",
  "sphinx-doc__sphinx-8035": "",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..9d4d392 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1287,5 +1287,39 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n \n+from babel.messages import pofile\n+from babel.messages.catalog import Catalog\n+from sphinx import locale\n+\n+import pytest\n+\n+def test_custom_translation_override(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # Clear translators cache\n+        locale.translators.clear()\n+\n+        # Prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+\n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 7842f56..b59562d 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -107,6 +107,10 @@ def test_anchors_ignored(app, status, warning):\n     assert not content\n \n \n+import pytest\n+import http.server\n+import threading\n+\n @pytest.mark.sphinx(\n     'linkcheck', testroot='linkcheck', freshenv=True,\n     confoverrides={'linkcheck_auth': [\n@@ -159,4 +163,11 @@ def test_linkcheck_request_headers(app, status, warning):\n                 assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n                 assert headers[\"X-Secret\"] == \"open sesami\"\n             else:\n-                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..d318780 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,26 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    srcdir='autodoc_typehints_description_and_type_aliases_extended',\n+                    confoverrides={'autodoc_typehints': 'description',\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_with_description_and_aliases(app: SphinxTestApp):\n+    # Create .rst file for testing\n+    (app.srcdir / 'index.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    # Build the Sphinx docs\n+    app.build()\n+    # Read the output and verify the content\n+    content = (app.outdir / 'index.txt').read_text()\n+    assert 'sphinx_doc(data: types.JSONObject) -> types.JSONObject' in content\n+    assert 'Parameters:\\n   data (types.JSONObject) -- Does it args.' in content\n+    assert 'Return type:\\n   types.JSONObject' in content\n+\n+import sys\n+import pytest\n+from sphinx.testing.util import SphinxTestApp, with_app\n+from sphinx.testing.path import path\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..35e960a 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,6 +372,38 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import pytest\n+import http.server\n+import json\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.testing.path import path\n+from sphinx.testing.fixtures import make_app, shared_result\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_too_many_redirects_handling(app: SphinxTestApp):\n+    class TooManyRedirectsOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        redirect_count = 0\n+\n+        def do_HEAD(self):\n+            if self.redirect_count < 5:\n+                self.redirect_count += 1\n+                self.send_response(302, \"Found\")\n+                self.send_header(\"Location\", \"/\")\n+                self.end_headers()\n+            else:\n+                self.send_response(500, \"Too Many Redirects\")\n+                self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"Redirect handled by GET\\n\")\n+\n+    # Deploy the test server that triggers Too Many Redirects on HEAD\n+    with http_server(TooManyRedirectsOnHeadHandler):\n+        app.builder.build_all()\n+\n+    # Verify that GET request handled the situation\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n@@ -381,4 +413,4 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..9d537c6 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,14 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n-\n-def test_getslots():\n+def test_object_description_enum():\n+    import enum\n+    \n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..d749474 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -13,6 +13,7 @@ from io import StringIO\n \n import pytest\n \n+from os import path\n from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..1a06396 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,41 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_pyproperty_type_annotation_cross_reference(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: x\\n\"\n+            \"   .. py:attribute:: y\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"   .. py:attribute:: width\\n\"\n+            \"      :type: int\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index, desc, desc_content))\n+    assert_node(doctree[1][1][0], addnodes.index,\n+                entries=[('single', 'start (Square attribute)', 'Square.start', '', None)])\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"attribute \"],\n+                                                     [desc_name, \"start\"],\n+                                                     [pending_xref, \"Point\"],\n+                                                     [desc_annotation, \": Point\"])],\n+                                   [desc_content, ()]))\n+    assert_node(doctree[1][1][2], addnodes.index,\n+                entries=[('single', 'end (Square property)', 'Square.end', '', None)])\n+    assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"Point\"],\n+                                                     [desc_annotation, \": Point\"])],\n+                                   [desc_content, ()]))\n+    assert 'Square.start' in domain.objects\n+    assert domain.objects['Square.start'] == ('index', 'Square.start', 'attribute', False)\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..049a3ba 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,43 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_2d_to_3d_distance():\n+    # Additional test to verify 2D to 3D distance in reverse\n+    p1 = Point2D(2, 0)\n+    p2 = Point3D(1, 0, 2)\n+    assert p2.distance(p1) == sqrt(5)\n+\n+def test_same_dimension_distance():\n+    # Test when both points are in the same 3D space\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 6, 3)\n+    assert p1.distance(p2) == 5  # sqrt((4-1)^2 + (6-2)^2)\n+\n+def test_different_dimension_points():\n+    # Test 3D and 2D points where 2D is a subset of 3D\n+    p1 = Point3D(3, 4, 5)\n+    p2 = Point2D(3, 4)\n+    assert p1.distance(p2) == 5  # sqrt((5-0)^2)\n+\n+def test_zero_distance():\n+    # Test zero distance for the same point\n+    p1 = Point3D(1, 1, 1)\n+    assert p1.distance(Point3D(1, 1, 1)) == 0\n+\n+def test_collinear_points_in_3d():\n+    # Expansion on issue 9214, to check distance on 3D collinear points\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 8, 12)\n+    assert p1.distance(p2) == sqrt(62)  # sqrt((4-1)^2 + (8-2)^2 + (12-3)^2)\n+\n+from sympy import sqrt\n+from sympy.geometry import Point2D, Point3D\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..c2a9a20 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,25 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+    # Original test case\n+    assert f(f(2)).evalf() == Float(16)\n+\n+    # New test cases\n+    # Test nested compositions\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    assert f(g(f(g(2)))).evalf() == Float(256)\n+\n+    # Test with more complex nested compositions\n+    assert f(f(f(2))).evalf() == Float(256)\n+    assert g(g(g(2))).evalf() == Float(16)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..3eec9a9 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,18 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Symbol, Identity, Sum, symbols\n \n-def test_Identity_doit():\n+def test_Identity_sum():\n+    n = Symbol('n', integer=True, positive=True)\n+    In = Identity(n)\n+    \n+    # Test that the trace (sum of diagonal elements) is correct\n+    assert Sum(In[i, i], (i, 0, n-1)).doit() == n\n+    \n+    # Test that the total sum of all elements in the identity matrix is also correct\n+    i, j = symbols('i j', integer=True)\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..98864f0 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -332,6 +332,13 @@ def test_args():\n     assert p._cyclic_form is None\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n+\n+    # Test non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1], [0, 2]]) == Permutation([0, 1, 2])\n+    assert Permutation([[0, 2], [2, 1]]) == Permutation([0, 2, 1])  # Non-disjoint, left-to-right\n+    assert Permutation([[0, 1, 2], [2, 0]]) == Permutation([2, 1, 0])  # Overlapping cycles\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([0, 2, 1])  # Complex case\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n         Permutation(((0, ), [1]))\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n",
  "sympy__sympy-13031": "",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..58e1635 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,8 +170,19 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n-\n-def test_evalf_bugs():\n+from sympy import Mul, Max, symbols, NS\n+\n+x, y = symbols('x y')\n+\n+def test_mul_max_evalf():\n+    # Test the specific issue 13076\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    # Add more variations to ensure the issue has been thoroughly resolved\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(Max(0, y), evaluate=False).evalf()) == 'Max(0, y)'\n+    assert NS(Mul(x, 2, Max(0, y), evaluate=False).evalf()) == '2.0*x*Max(0, y)'\n+    assert NS(Mul(2, Max(0, y), x, evaluate=False).evalf()) == '2.0*x*Max(0, y)'\n+    assert NS(Mul(2, x, Max(0, y), evaluate=False).evalf()) == '2.0*x*Max(0, y)'\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n     assert NS(exp(10**10) + sin(1), 10) == NS(exp(10**10), 10)\n     assert NS('log(1+1/10**50)', 20) == '1.0000000000000000000e-50'\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..b3ffb33 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,25 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+def test_coth_subs_issue():\n+    # Test the specific case mentioned in the issue\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # The output for coth(log(tan(x))) when x=2 should not raise an error\n+    try:\n+        result = e.subs(x, 2)\n+        assert result == coth(log(tan(2)))  # We just verify it doesn't throw an error, and the result should be well-defined\n+    except NameError:\n+        assert False, \"NameError was raised when substituting x=2, which indicates the issue persists.\"\n+\n+    # Test other integral values mentioned in the issue\n+    problematic_values = [3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for value in problematic_values:\n+        try:\n+            result = e.subs(x, value)\n+            assert result == coth(log(tan(value)))\n+        except NameError:\n+            assert False, f\"NameError was raised when substituting x={value}, which indicates the issue persists.\"\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..fa6d89c 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -164,8 +164,20 @@ def test_difference():\n \n     assert -1 in S.Reals - S.Naturals\n \n+from sympy import symbols, FiniteSet, Interval, Complement\n+\n+x, y = symbols('x y')\n \n def test_Complement():\n+    # Test case for issue 12712\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n+    # Additional test cases for mixed sets of numbers and symbols\n+    assert Complement(FiniteSet(x, y, -5, 3.5), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, y, 0, 7, 11), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y, 11), Interval(-10, 10))\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..94ad802 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -187,6 +187,58 @@ def test_col_join():\n                    [0, 0, 1],\n                    [7, 7, 7]])\n \n+def test_issue_13643():\n+    from sympy import Matrix, eye, ones\n+    # Original test from issue description\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([[1, 0, 0, 2, 2, 0, 0, 0],\n+                       [0, 1, 0, 2, 2, 0, 0, 0],\n+                       [0, 0, 1, 2, 2, 0, 0, 0],\n+                       [0, 0, 0, 2, 2, 1, 0, 0],\n+                       [0, 0, 0, 2, 2, 0, 1, 0],\n+                       [0, 0, 0, 2, 2, 0, 0, 1]])\n+    assert result == expected\n+\n+    # Additional test case 1: Insert at beginning\n+    M = eye(4)\n+    V = ones(4, 1)\n+    result = M.col_insert(0, V)\n+    expected = Matrix([[1, 1, 0, 0, 0],\n+                       [1, 0, 1, 0, 0],\n+                       [1, 0, 0, 1, 0],\n+                       [1, 0, 0, 0, 1]])\n+    assert result == expected\n+\n+    # Additional test case 2: Insert at end\n+    M = eye(3)\n+    V = ones(3, 1)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([[1, 0, 0, 1],\n+                       [0, 1, 0, 1],\n+                       [0, 0, 1, 1]])\n+    assert result == expected\n+\n+    # Additional test case 3: Insert with mismatched row dimensions (should raise an error)\n+    M = eye(3)\n+    V = ones(4, 1)\n+    try:\n+        M.col_insert(1, V)\n+    except ShapeError:\n+        assert True\n+    else:\n+        assert False\n+\n+    # Additional test case 4: Insert multiple columns\n+    M = eye(3)\n+    V = Matrix([[1, 1], [1, 1], [1, 1]])\n+    result = M.col_insert(1, V)\n+    expected = Matrix([[1, 1, 1, 0, 0],\n+                       [0, 1, 1, 1, 0],\n+                       [0, 0, 1, 1, 1]])\n+    assert result == expected\n+\n def test_row_insert():\n     r4 = Matrix([[4, 4, 4]])\n     for i in range(-4, 5):\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..01d75e2 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -677,8 +677,28 @@ def test_Poly_mul():\n     assert Poly(x, x) * 2 == Poly(2*x, x)\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n-\n-def test_Poly_sqr():\n+def test_issue_13079():\n+    # Existing tests from the original patch\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n+    # Additional test cases\n+    assert Poly(x)*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert Poly(x*y)*x == Poly(x**2*y, x, y, domain='ZZ')\n+    assert x*Poly(x*y) == Poly(x**2*y, x, y, domain='ZZ')\n+    assert S(3)*x*Poly(x) == Poly(3*x**2, x, domain='ZZ')\n+\n+    # Test with more complex expressions\n+    assert (x + 1)*Poly(x) == Poly(x**2 + x, x, domain='ZZ')\n+    assert Poly(x)*(x + 1) == Poly(x**2 + x, x, domain='ZZ')\n+    assert (x - 2)*Poly(x + 1) == Poly(x**2 - x - 2, x, domain='ZZ')\n+    assert Poly(x - 2)*Poly(x + 1) == Poly(x**2 - x - 2, x, domain='ZZ')\n+\n+    # Test with fractional coefficient\n+    assert Rational(1, 2)*Poly(x) == Poly(Rational(1, 2)*x, x, domain='QQ')\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..4c05b7a 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -64,6 +64,17 @@ def test_latex_basic():\n     assert latex(2*x*y) == \"2 x y\"\n     assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n \n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+\n+    # Additional test cases\n+    assert latex(3*x**2*y, mul_symbol=None) == \"3 x^{2} y\"  # Default behavior\n+    assert latex(3*x**2*y, mul_symbol='ldot') == r\"3 \\,.\\, x^{2} \\,.\\, y\"\n+    assert latex(x*y*z, mul_symbol='times') == r\"x \\times y \\times z\"\n+\n+    # Testing with an arbitrary string as mul_symbol\n+    assert latex(x*y*z, mul_symbol='@@@') == r\"x@@@y@@@z\"\n+\n     assert latex(1/x) == r\"\\frac{1}{x}\"\n     assert latex(1/x, fold_short_frac=True) == \"1 / x\"\n     assert latex(-S(3)/2) == r\"- \\frac{3}{2}\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..057b8c1 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -307,8 +307,23 @@ def test_tolist():\n     m = Matrix(lst)\n     assert m.tolist() == lst\n \n-\n-def test_as_mutable():\n+def test_issue_13835():\n+    from sympy import symbols, Matrix\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+\n+    # Test cases based on the provided issue\n+    assert M(1).det() == 0  # Determinant of 1x1 matrix should be 0\n+    assert M(2).det() == -a  # Determinant of 2x2 matrix should be -a\n+    # Check if the determinant of 3x3 matrix evaluates correctly\n+    assert M(3).det() == 2*a*(a + 2) + 2*a*(2*a + 1) - 3*a*(2*a + 2)\n+    assert M(4).det() == 0  # Determinant of 4x4 matrix should be 0\n+    assert M(5).det() == 0  # As per the test patch, this should resolve to 0\n+    assert M(6).det() == 0  # As per the test patch, this should resolve to 0\n+    assert M(7).det() == 0  # As per the test patch, this should resolve to 0\n+\n+    # Since the original problem hits a NaN or raises an error,\n+    # the assertions above should suffice to check if the issue has been fixed.\n     assert zeros(0, 3).as_mutable() == zeros(0, 3)\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..5cedbbe 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,8 +708,59 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n+from sympy import S, symbols, integrate, oo, Rational\n+from sympy.stats import cdf, density, Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum\n \n def test_precomputed_cdf():\n+    x = symbols('x', real=True)\n+\n+    # Test for Arcsin distribution\n+    arcsin_dist = Arcsin(\"x\", 0, 3)\n+    assert cdf(arcsin_dist)(1).doit() == 2/3\n+\n+    # Test for Dagum distribution\n+    dagum_dist = Dagum(\"x\", S(1)/3, S(1)/5, 2)\n+    assert cdf(dagum_dist)(3)  # Check if it evaluates without hanging\n+\n+    # Test for Erlang distribution\n+    erlang_dist = Erlang(\"x\", 1, 1)\n+    assert cdf(erlang_dist)(1) == integrate(density(erlang_dist)(x), (x, 0, 1)).evalf()\n+\n+    # Test for Frechet distribution\n+    frechet_dist = Frechet(\"x\", S(4)/3, 1, 2)\n+    assert cdf(frechet_dist)(3)  # Check if it evaluates correctly\n+\n+    # Test for Gamma distribution\n+    gamma_dist = Gamma(\"x\", 0.1, 2)\n+    assert cdf(gamma_dist)(3).is_number  # Check if it evaluates to a number\n+\n+    # Test for Inverse Gamma distribution\n+    gamma_inv_dist = GammaInverse(\"x\", S(5)/7, 2)\n+    assert cdf(gamma_inv_dist)(3)  # Check if it evaluates correctly\n+\n+    # Test for Kumaraswamy distribution\n+    kumaraswamy_dist = Kumaraswamy(\"x\", S(1)/123, 5)\n+    assert cdf(kumaraswamy_dist)(S(1)/3)  # Check if it evaluates correctly\n+\n+    # Test for Laplace distribution\n+    laplace_dist = Laplace(\"x\", 2, 3)\n+    assert cdf(laplace_dist)(5).is_number  # Check if it evaluates to a number\n+\n+    # Test for Logistic distribution\n+    logistic_dist = Logistic(\"x\", 1, 0.1)\n+    assert cdf(logistic_dist)(2)  # Check if it evaluates correctly\n+\n+    # Test for Nakagami distribution\n+    nakagami_dist = Nakagami(\"x\", S(7)/3, 1)\n+    assert cdf(nakagami_dist)(2)  # Check if it evaluates correctly\n+\n+    # Test for StudentT distribution\n+    student_t_dist = StudentT(\"x\", 10)\n+    assert cdf(student_t_dist)(2)  # Check if it evaluates correctly\n+\n+    # Test for UniformSum distribution\n+    uniform_sum_dist = UniformSum(\"x\", 5)\n+    assert cdf(uniform_sum_dist)(2)  # Check if it evaluates correctly\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..ae133bc 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,7 +79,16 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n+from sympy import Symbol, Eq, Ne, Rational\n+from sympy.printing.python import python\n+\n def test_python_relational():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    assert python(Ne(x/(y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"]\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..1fb3ad9 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -3,6 +3,7 @@ from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n+from sympy.physics.vector import ReferenceFrame, Vector\n \n Vector.simp = True\n A = ReferenceFrame('A')\n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..d3cf0b7 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -40,6 +41,8 @@ def test_PythonCodePrinter():\n def test_MpmathPrinter():\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n+    # Test for mpmath printer handling of Rational\n+    assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n \n \n def test_NumPyPrinter():\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..c518d72 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -72,7 +73,24 @@ def test_ndim_array_initiation():\n     raises(ValueError, lambda: vector_with_long_shape[long(5)])\n \n     from sympy.abc import x\n+    # Test for rank-0 array created using ImmutableDenseNDimArray\n     rank_zero_array = ImmutableDenseNDimArray(x)\n+    assert len(rank_zero_array) == 1, \"Rank-0 array should have length 1\"\n+    assert rank_zero_array.shape == ()\n+    assert rank_zero_array.rank() == 0\n+    assert rank_zero_array[()] == x\n+    raises(ValueError, lambda: rank_zero_array[0])\n+\n+    # Additional Test for rank-0 array using NDimArray\n+    # This covers the case described in the issue\n+    rank_zero_array_from_ndimarray = NDimArray(x)\n+    assert len(rank_zero_array_from_ndimarray) == 1, \"Rank-0 NDimArray should have length 1\"\n+    assert rank_zero_array_from_ndimarray[()] == x\n+\n+    # Test for rank-0 array using Array\n+    rank_zero_array_from_array = Array(x)\n+    assert len(rank_zero_array_from_array) == 1, \"Rank-0 Array should have length 1\"\n+    assert rank_zero_array_from_array[()] == x\n     assert len(rank_zero_array) == 0\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..dfc8498 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,3 +1,13 @@\n+\n+def test_Max():\n+    # Test single-variable Max\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    # Test multi-variable Max\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    # Reverse order to see if it still outputs correctly\n+    assert mcode(Max(2, x)) == \"Max[x, 2]\"\n+    assert mcode(Max(y, 3, x)) == \"Max[y, 3, x]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n@@ -5,6 +15,7 @@ from sympy.concrete import Sum\n from sympy.functions import exp, sin, cos, conjugate\n \n from sympy import mathematica_code as mcode\n+from sympy.functions import Max, Min  # Ensure all necessary functions are imported\n \n x, y, z = symbols('x,y,z')\n f = Function('f')\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..b5c3caf 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,40 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_iss1593():\n+    \"\"\"Test for the sign mistake in to_rotation_matrix\"\"\"\n+    from sympy import symbols, cos, sin, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+    \n+    x = symbols('x')\n+    \n+    # Quaternion representing rotation about x axis\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix_x = Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix_x\n+\n+    # Quaternion representing rotation about y axis\n+    q = Quaternion(cos(x/2), 0, sin(x/2), 0)\n+    expected_matrix_y = Matrix([\n+        [ cos(x), 0, sin(x)],\n+        [      0, 1,      0],\n+        [-sin(x), 0, cos(x)]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix_y\n+\n+    # Quaternion representing rotation about z axis\n+    q = Quaternion(cos(x/2), 0, 0, sin(x/2))\n+    expected_matrix_z = Matrix([\n+        [cos(x), -sin(x), 0],\n+        [sin(x),  cos(x), 0],\n+        [     0,       0, 1]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix_z\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +153,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..754bf04 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1624,6 +1624,20 @@ def test_Mod():\n     i = Symbol('i', integer=True)\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n+    # Additional test cases for issue #15493\n+    # Test with zero\n+    assert Mod(3*0, 2) == Mod(0, 2)\n+    # Test with simple symbolic expressions\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    # Test with power expressions\n+    assert Mod(3*i**2, 2) == Mod(i**2, 2)\n+    # Test with negative integer\n+    j = Symbol('j', integer=True)\n+    assert Mod(3*(-j), 2) == Mod(-j, 2)\n+    # Test with symbolic expression having a sum\n+    assert Mod(3*(i + 2), 2) == Mod(i + 2, 2)\n+    # Test with composite expressions\n+    assert Mod(3*(i + j), 2) == Mod(i + j, 2)\n \n     # issue 8677\n     n = Symbol('n', integer=True, positive=True)\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..050d25b 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,7 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +156,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..a242e51 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,33 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n-def test_issue_14392():\n+def test_issue_15873():\n+    from sympy import I, simplify\n+\n+    # Original test from the issue\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True\n+\n+    # Additional test cases for thorough testing\n+    # Test with an expression that is clearly zero\n+    e_zero = I + 1 - I - 1\n+    assert e_zero.is_zero is True\n+\n+    # Test with an expression that is clearly non-zero\n+    e_non_zero = I + 1\n+    assert e_non_zero.is_zero is False\n+\n+    # Test with more complex expressions\n+    e_complex = (1 + 2*I) + (2 - 2*I) - 3\n+    assert e_complex.is_zero is None\n+    assert simplify(e_complex).is_zero is True\n+\n+    e_complex_non_zero = (1 + 2*I) + (2 - 2*I) - 2\n+    assert e_complex_non_zero.is_zero is False\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..df00e11 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -478,6 +478,10 @@ def test_logcombine_complex_coeff():\n         i + log(x**2)\n \n \n+from sympy import Symbol, posify, symbols, Rational, log\n+from sympy.integrals import Integral\n+from sympy.summations import Sum\n+\n def test_issue_5950():\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n@@ -512,7 +516,51 @@ def test_posify():\n         'Sum(_x**(-n), (n, 1, 3))'\n \n \n-def test_issue_4194():\n+def test_issue_posify_finite_assumption():\n+    # issue 16438\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq._assumptions['finite'] is True\n+    assert eq.is_finite is True\n+    assert 'infinite' in eq._assumptions\n+    assert eq.assumptions0 == {\n+        'positive': True,\n+        'zero': False,\n+        'imaginary': False,\n+        'nonpositive': False,\n+        'commutative': True,\n+        'hermitian': True,\n+        'real': True,\n+        'nonzero': True,\n+        'nonnegative': True,\n+        'negative': False,\n+        'complex': True,\n+        'finite': True,\n+        'infinite': False\n+    }\n+\n+    # Additional test cases for integer, rational, prime, even, odd assumptions\n+    m = Symbol('m', integer=True)\n+    eq, rep = posify(m)\n+    assert eq._assumptions['integer'] is True\n+    assert eq.is_integer is True\n+\n+    n = Symbol('n', rational=True)\n+    eq, rep = posify(n)\n+    assert eq._assumptions['rational'] is True\n+    assert eq.is_rational is True\n+\n+    p = Symbol('p', prime=True)\n+    eq, rep = posify(p)\n+    assert eq._assumptions['prime'] is True\n+\n+    e = Symbol('e', even=True)\n+    eq, rep = posify(e)\n+    assert eq._assumptions['even'] is True\n+\n+    o = Symbol('o', odd=True)\n+    eq, rep = posify(o)\n+    assert eq._assumptions['odd'] is True\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..7d3c106 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..9a45bc9 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -30,8 +30,18 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     output.close()\n     return source\n \n-\n-def test_cython_wrapper_scalar_function():\n+def test_autowrap_cython_with_unused_array_arg():\n+    from sympy import MatrixSymbol\n+    from sympy.utilities.autowrap import autowrap\n+    import numpy as np\n+    \n+    x = MatrixSymbol('x', 2, 1)\n+    # Expression doesn't use 'x'\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..a3b9725 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -252,6 +252,7 @@ def test_encode_morse():\n def test_decode_morse():\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n+    assert decode_morse('.----') == '1'\n     raises(KeyError, lambda: decode_morse('.....----'))\n \n \n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..4b3fb59 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -807,6 +807,20 @@ def test_issue_15965():\n     B = Integral(x*y, x)\n     bnew = y*Integral(x, x)\n     assert simplify(A + B) == anew + bnew\n+\n+def test_issue_17137():\n+    x = Symbol('x')\n+    # Original test cases from the patch\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    \n+    # Additional test cases\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(tan(x)**I) == tan(x)**I\n+    assert simplify(cos(x)**(I * x)) == cos(x)**(I * x)\n+    assert simplify(cos(x)**(3 + 4*I)) == cos(x)**(3 + 4*I)\n+    assert simplify(exp(I * x)) == exp(I * x)\n+    assert simplify(log(x)**I) == log(x)**I\n     assert simplify(A) == anew\n     assert simplify(B) == bnew\n \n@@ -814,4 +828,4 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..3b78866 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, I, Symbol, sqrtdenest, Integral, cos\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -176,6 +179,22 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n+def test_issue_12420():\n+    # Verifying _sqrt_match doesn't raise issues and returns expected results\n+    assert _sqrt_match(4 + I) == []\n+\n+    # Case in the original issue, should return the expression unchanged\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert unchanged(sqrtdenest, expr)\n+\n+    # Another test case for non-denestable expression\n+    expr = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert unchanged(sqrtdenest, expr)\n+\n+    # Adding more test cases to cover different complex structures\n+    expr = sqrt(1 + sqrt(5 + 2*I))\n+    assert unchanged(sqrtdenest, expr)\n+\n def test_issue_5653():\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..5dbe6e3 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -95,6 +96,12 @@ def test_point():\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n+    # Test scalar multiplication commutativity for Point\n+    assert Point(0, 0) + p4 * sympify(2.0) == Point(0, 0) + sympify(2.0) * p4\n+    assert Point(1, 1) * 2 == 2 * Point(1, 1)\n+    assert sympify(2.0) * p4 == Point(2, 2)\n+    assert p4 * sympify(2.0) == Point(2, 2)\n+\n     # Point differences should be simplified\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..ddb7f2e 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,20 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+def test_issue_18186():\n+    from sympy.abc import m, n\n \n-def test_general_pythagorean():\n+    # The expression to test: n**4 + m**4 - 2**4 - 3**4\n+    expr = n**4 + m**4 - 2**4 - 3**4\n+\n+    # Test with syms=(m, n)\n+    result_mn = diophantine(expr, syms=(m, n), permute=True)\n+    expected_result = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert result_mn == expected_result\n+\n+    # Test with syms=(n, m)\n+    result_nm = diophantine(expr, syms=(n, m), permute=True)\n+    assert result_nm == expected_result\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..fa78ec2 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -677,7 +677,24 @@ def test_latex_subs():\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+def test_latex_subs_extended():\n+    from sympy import Subs, symbols\n+    from sympy.abc import x, y, z\n+\n+    # New test case: simple subtraction\n+    assert latex(Subs(-x + y, (x,), (1,))) == r'\\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # New test case: a more complex expression\n+    assert latex(3*Subs(-x + y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # New test case: multiple substitutions\n+    assert latex(Subs(x*y + z, (x, y), (1, 2))) == r'\\left. \\left(x y + z\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    \n+    # New test case: handling multiplication\n+    assert latex(3*Subs(x*y, (x,), (2,))) == r'3 \\left. \\left(x y\\right) \\right|_{\\substack{ x=2 }}'\n+\n+    # New test case: nested substitutions\n+    assert latex(Subs(Subs(x - y, (x,), (z,)), (z,), (1,))) == r'\\left. \\left(\\left. \\left(x - y\\right) \\right|_{\\substack{ x=z }}\\right) \\right|_{\\substack{ z=1 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..2cd0e91 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,60 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_issue_kernS_unboundlocalerror():\n+    from sympy.core.sympify import kernS\n+    from sympy import x, y, Interval, Symbol, exp, sin, cos\n+\n+    # Original test case\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+\n+    # Additional test cases\n+    # Test with simple expression\n+    assert kernS(\"x + 1\") == x + 1\n+\n+    # Test with nested parentheses\n+    assert kernS(\"((x + y))\") == x + y\n+\n+    # Test with unmatched parentheses\n+    try:\n+        kernS(\"(x + y\")\n+        assert False, \"Expected SympifyError due to unmatched parentheses\"\n+    except Exception as e:\n+        assert isinstance(e, SympifyError)\n+\n+    # Test with operators without operands\n+    try:\n+        kernS(\"+\")\n+        assert False, \"Expected SympifyError due to invalid expression\"\n+    except Exception as e:\n+        assert isinstance(e, SympifyError)\n+\n+    # Test with leading and trailing spaces\n+    assert kernS(\"  x + y  \") == x + y\n+\n+    # Complex expression with multiplication and negation\n+    assert kernS(\"-(2*sin(x)**2 + 2*sin(x)*cos(x))*y/2\") == \\\n+        -y*(2*sin(x)**2 + 2*sin(x)*cos(x))/2\n+\n+    # Test with an interval expression\n+    assert kernS('Interval(-1,-2 - 4*(-3))') == Interval(-1, -2 + 12)\n+\n+    # Test with a simple symbol\n+    assert kernS('E**-(x)') == exp(-x)\n+\n+    # Test the hack scenario where kern might not be defined\n+    assert kernS(' 2 * (x + y)') == 2*(x + y)\n+\n+    # Edge cases to ensure no UnboundLocalError\n+    assert kernS(\"(1-2**-(4+1)*(1-y)*x)\") == (1 - x*(1 - y)/32)\n+    assert kernS(\"(1-2**(4+1)*(1-y)*x)\") == (1 - 32*x*(1 - y))\n+\n+    # Test scenario causing potential UnboundLocalError\n+    try:\n+        kernS(\"((x\")\n+        assert False, \"Expected SympifyError due to unmatched parentheses\"\n+    except Exception as e:\n+        assert isinstance(e, SympifyError)\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_dagger.py b/sympy/physics/quantum/tests/test_dagger.py\nindex ad97a01..094731e 100644\n--- a/sympy/physics/quantum/tests/test_dagger.py\n+++ b/sympy/physics/quantum/tests/test_dagger.py\n@@ -1,7 +1,8 @@\n+\n from sympy import I, Matrix, symbols, conjugate, Expr, Integer\n \n from sympy.physics.quantum.dagger import adjoint, Dagger\n-from sympy.external import import_module\n+from sympy.physics.quantum.operator import Operator, IdentityOperator\n from sympy.testing.pytest import skip\n \n \n@@ -35,7 +36,25 @@ class Foo(Expr):\n         return I\n \n \n-def test_eval_adjoint():\n+def test_dagger_mul():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    assert Dagger(O) * O == Dagger(O) * O\n+    assert Dagger(O) * O * I == Mul(Dagger(O), O) * I\n+    assert Dagger(O) * Dagger(O) == Dagger(O)**2\n+    assert Dagger(O) * Dagger(I) == Dagger(O)\n+\n+    assert I * Dagger(O) == Dagger(O)\n+    assert Dagger(O) * I == Dagger(O)  # The test case for issue verification\n+\n+    # Additional test cases to verify the fix comprehensively\n+    assert Dagger(I) * O == O\n+    assert I * I == I\n+    assert Dagger(I) * I == I\n+    assert Dagger(O * I) == Dagger(O)\n+    assert Dagger(I * O) == Dagger(O)\n+    assert (Dagger(O) * I) * I == Dagger(O)\n+    assert I * (I * Dagger(O)) == Dagger(O)\n     f = Foo()\n     d = Dagger(f)\n     assert d == I\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..432bb3d 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,9 +905,20 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n+def test_specific_sylow_subgroup_issue():\n+    from sympy.combinatorics import DihedralGroup\n \n-@slow\n-def test_presentation():\n+    # Test with a Dihedral group of order 18 where p=2\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4  # Known order of 2-Sylow for D18\n+\n+    # Test with a Dihedral group of order 50 where p=2\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4  # Known order of 2-Sylow for D50\n+\n+    # Add more test cases if necessary for other prime numbers or group orders\n     def _test(P):\n         G = P.presentation()\n         return G.order() == P.order()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..4a97f15 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,6 +513,28 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n+def test_partition_reusing():\n+    # Ensure the partitions iterator is not reusing dictionary objects\n+    partitions_list = list(partitions(6, k=2))\n+    # Check if each partition is a different object\n+    ids = [id(p) for p in partitions_list]\n+    assert len(ids) == len(set(ids)), \"Dictionaries are being reused!\"\n+\n+    partitions_list = list(partitions(6, k=3))\n+    ids = [id(p) for p in partitions_list]\n+    assert len(ids) == len(set(ids)), \"Dictionaries are being reused!\"\n+\n+    partitions_list = list(partitions(8, k=4, m=3))\n+    ids = [id(p) for p in partitions_list]\n+    assert len(ids) == len(set(ids)), \"Dictionaries are being reused!\"\n+\n+    partitions_list = list(partitions(S(3), m=2))\n+    ids = [id(p) for p in partitions_list]\n+    assert len(ids) == len(set(ids)), \"Dictionaries are being reused!\"\n+\n+    partitions_list = list(partitions(4, k=3))\n+    ids = [id(p) for p in partitions_list]\n+    assert len(ids) == len(set(ids)), \"Dictionaries are being reused!\"\n \n def test_binary_partitions():\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n",
  "sympy__sympy-20801": "",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..c3f4460 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,6 +20,32 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # Test for issue regarding PolynomialError in specific subs case\n+    from sympy import sinh, Piecewise, exp\n+\n+    # Define symbols with real assumptions\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    \n+    # Case 1: Expression with real symbols causes the PolynomialError\n+    expr_real = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        expr_real.subs({1: 1.0})\n+    except PolynomialError:\n+        assert False, \"PolynomialError raised unexpectedly for real symbols\"\n+    \n+    # Case 2: Removing division by z resolves the issue\n+    expr_no_division = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    expr_no_division.subs({1: 1.0})  # Should not raise an error\n+\n+    # Case 3: Using non-real symbols should work without the error\n+    x_nr, y_nr = symbols('x_nr y_nr')\n+    expr_non_real = exp(sinh(Piecewise((x_nr, y_nr > x_nr), (y_nr, True)) / z_r))\n+    expr_non_real.subs({1: 1.0})  # Should not raise an error\n+\n+    # Case 4: Confirming that without exp or sinh the original error does not occur\n+    expr_no_exp_sinh = Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r\n+    expr_no_exp_sinh.subs({1: 1.0})  # Should not raise an error\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..bc7a8b8 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -166,6 +166,17 @@ def test_monomial_count():\n     assert monomial_count(2, 2) == 6\n     assert monomial_count(2, 3) == 10\n \n+def test_itermonomials_issue_with_min_degrees():\n+    # Issue example with three variables and min/max degree of 3\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x2**3, x3**3, x1*x2**2, x1*x3**2, x2*x1**2, x2*x3**2, x3*x1**2, x3*x2**2, x1*x2*x3}\n+    \n+    # Check when min_degrees is less than max_degrees\n+    assert set(itermonomials([x1, x2], 3, 2)) == {x1**2, x1*x2, x2**2, x1**3, x1**2*x2, x1*x2**2, x2**3}\n+    \n+    # Ensuring behavior is consistent even if max_degrees is greater than min_degrees\n+    assert set(itermonomials([x1, x2, x3], 4, 3)) >= {x1**3, x2**3, x3**3, x1*x2**2, x1*x3**2, x2*x1**2, x2*x3**2, x3*x1**2, x3*x2**2, x1*x2*x3}\n+\n def test_monomial_mul():\n     assert monomial_mul((3, 4, 1), (1, 2, 0)) == (4, 6, 1)\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..7c2f6de 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Test if argument invariance holds for String\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..88f1d68 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,7 +10,10 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n-from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n+from sympy.core.numbers import Integer\n+from sympy.parsing.sympy_parser import parse_expr\n+from sympy.core.sympify import sympify\n \n \n def test_point():\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..e2b6979 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..673cba4 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,7 +1175,16 @@ def test_scipy_polys():\n \n \n \n-def test_lambdify_inspect():\n+def test_lambdify_tuple_single_element():\n+    # Test for the issue where lambdify should return a single element tuple\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+    assert 'return (1,)' in inspect.getsource(f_single)\n+\n+    # Additional test for multiple elements to ensure no regression\n+    f_multiple = lambdify([], (1, 2))\n+    assert f_multiple() == (1, 2)\n+    assert 'return (1, 2)' in inspect.getsource(f_multiple)\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..8ec0c8e 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n@@ -7,7 +8,11 @@ from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n \n-def test_Str():\n+from sympy.core.function import Function, UndefinedFunction  # Import necessary functions\n+\n+def test_create_functions_with_extra_parentheses():\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction, \"Expected UndefinedFunction, got: {}\".format(type(q[0]))\n     a1 = Str('a')\n     a2 = Str('a')\n     b = Str('b')\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..a1051e1 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -183,6 +183,10 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     assert _is_tensor_eq(st, t)\n \n \n+from sympy import eye\n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, kahane_simplify\n+from sympy.tensor.tensor import tensor_indices, LorentzIndex\n+\n def test_kahane_algorithm():\n     # Wrap this function to convert to and from TIDS:\n \n@@ -262,7 +266,33 @@ def test_kahane_simplify1():\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n-def test_gamma_matrix_class():\n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Test case from the issue: G(mu)*G(-mu)*G(rho)*G(sigma)\n+    t1 = G(mu) * G(-mu) * G(rho) * G(sigma)\n+    r1 = kahane_simplify(t1)\n+    assert r1.equals(4 * G(rho) * G(sigma)), f\"Failed on: {t1}\"\n+\n+    # Test case from the issue: G(rho)*G(sigma)*G(mu)*G(-mu)\n+    t2 = G(rho) * G(sigma) * G(mu) * G(-mu)\n+    r2 = kahane_simplify(t2)\n+    assert r2.equals(4 * G(rho) * G(sigma)), f\"Failed on: {t2}\"\n+\n+    # Additional test: G(sigma)*G(rho)*G(mu)*G(-mu)\n+    t3 = G(sigma) * G(rho) * G(mu) * G(-mu)\n+    r3 = kahane_simplify(t3)\n+    assert r3.equals(4 * G(sigma) * G(rho)), f\"Failed on: {t3}\"\n+\n+    # Additional test: G(mu)*G(-mu)*G(sigma)*G(rho)\n+    t4 = G(mu) * G(-mu) * G(sigma) * G(rho)\n+    r4 = kahane_simplify(t4)\n+    assert r4.equals(4 * G(sigma) * G(rho)), f\"Failed on: {t4}\"\n+\n+    # Additional test for no contraction case\n+    t5 = G(mu) * G(rho) * G(sigma)\n+    r5 = kahane_simplify(t5)\n+    assert r5.equals(t5), f\"Failed on: {t5}\"\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..e91fd39 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,22 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Symbol, Piecewise, S, FiniteSet, Reals, Integers, Eq\n+from sympy.sets.contains import Contains\n+from sympy.core.compatibility import raises\n+\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Test the original issue directly\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n+    \n+    # Test Contains within a Piecewise statement causing errors due to as_set method    \n+    raises(NotImplementedError, lambda: Piecewise((6, Contains(x, Reals).as_set()), (7, True)))\n+    raises(NotImplementedError, lambda: Piecewise((6, Contains(x, Integers).as_set()), (7, True)))\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -48,4 +64,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..b3f01e1 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,27 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+from sympy.core.numbers import E\n+from sympy.physics.units import exp, impedance, capacitance, time, ohm, farad, second, Quantity\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units.dimensions import Dimension\n+\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..86c6f90 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,46 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_collect_factor_and_dimension_for_equivalent_dimensions():\n+    # Setup quantities with scale factors and dimensions\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+\n+    # This should not raise any ValueError if equivalent dimensions are handled correctly\n+    factor, dimension = SI._collect_factor_and_dimension(expr1)\n+    assert dimension == SI.get_dimension_system().quantity_dimensionality(v1)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..9eb760d 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -103,7 +104,14 @@ def test_isomorphisms():\n \n \n def test_check_homomorphism():\n+    from sympy.combinatorics.named_groups import DihedralGroup\n+\n     a = Permutation(1,2,3,4)\n+    \n+    # Test for verifying the fix for _check_homomorphism with PermutationGroups\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n     raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..2c41725 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -253,22 +253,30 @@ def test_PolyElement_as_expr():\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n \n+    # Check default behavior with ring's own symbols\n     X, Y, Z = R.symbols\n     g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n \n     assert f != g\n     assert f.as_expr() == g\n \n-    X, Y, Z = symbols(\"x,y,z\")\n-    g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+    # Check behavior with custom symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n \n     assert f != g\n-    assert f.as_expr(X, Y, Z) == g\n+    assert f.as_expr(U, V, W) == g\n \n-    raises(ValueError, lambda: f.as_expr(X))\n+    # Test with symbolic mismatch\n+    raises(ValueError, lambda: f.as_expr(U))\n \n-    R, = ring(\"\", ZZ)\n-    assert R(3).as_expr() == 3\n+    # Edge case: no symbols\n+    R_empty, = ring(\"\", ZZ)\n+    assert R_empty(3).as_expr() == 3\n+\n+    # Additional test with different number of symbols\n+    M, N = symbols(\"m,n\")\n+    raises(ValueError, lambda: f.as_expr(M, N))\n \n def test_PolyElement_from_expr():\n     x, y, z = symbols(\"x,y,z\")\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..83a60e6 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -274,6 +274,43 @@ def test_convert_equals_signs():\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n \n+from sympy.parsing.sympy_parser import parse_expr\n+from sympy.core import Symbol, Function, Float, Rational, Integer, I, Mul, Pow, Eq, Lt, Le, Gt, Ge, Ne\n+\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+def test_additional_relations_eval_false():\n+    # Test more complex relational expressions with evaluate=False\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    inputs = {\n+        \"x < y\": Lt(x, y, evaluate=False),\n+        \"x <= y\": Le(x, y, evaluate=False),\n+        \"x > y\": Gt(x, y, evaluate=False),\n+        \"x >= y\": Ge(x, y, evaluate=False),\n+        \"x != y\": Ne(x, y, evaluate=False),\n+        \"x == y\": Eq(x, y, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+    # Test mixed expressions\n+    assert parse_expr(\"x + 1 < y + 2\", evaluate=False) == Lt(x + 1, y + 2, evaluate=False)\n+    assert parse_expr(\"x - 1 <= y - 2\", evaluate=False) == Le(x - 1, y - 2, evaluate=False)\n+    assert parse_expr(\"x * 2 > y / 2\", evaluate=False) == Gt(x * 2, y / 2, evaluate=False)\n+    assert parse_expr(\"x / 2 >= y * 2\", evaluate=False) == Ge(x / 2, y * 2, evaluate=False)\n+\n def test_parse_function_issue_3539():\n     x = Symbol('x')\n     f = Function('f')\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..4710551 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -66,6 +66,8 @@ def test_unit_grammar_fail(string):\n         ([\"m2\"], u.m**2),\n         ([\"10+21m\"], u.Unit(u.m * 1e21)),\n         ([\"2.54cm\"], u.Unit(u.cm * 2.54)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n         ([\"20%\"], 0.20 * u.dimensionless_unscaled),\n         ([\"10+9\"], 1.0e9 * u.dimensionless_unscaled),\n         ([\"2x10-9\"], 2.0e-9 * u.dimensionless_unscaled),\n@@ -111,6 +113,9 @@ def test_cds_grammar(strings, unit):\n         \"km*s\",\n         \"km**2\",\n         \"5x8+3m\",\n+        \"J km/s\",  # Incorrectly spaced composite unit\n+        \"10+3J/ m/s/kpc2\",  # Incorrect space in composite unit\n+        \"10+3J/m/s kpc2\",   # Incorrect space in composite unit\n         \"0.1---\",\n         \"---m\",\n         \"m---\",\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..690defc 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1890,9 +1890,39 @@ class OperationTests(OperationTestBase):\n         to_state = from_state.clone()\n         operation.state_forwards(app_label, to_state)\n         Author = to_state.apps.get_model(app_label, 'Author')\n+        # Test for the specific issue of incorrect SQL generation with CheckConstraint and OR\n+        check = models.Q(field_1__isnull=False, flag__exact=True) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name='field_1_has_value_if_flag_set')\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards('app', to_state)\n+        \n+        with connection.schema_editor() as editor:\n+            operation.database_forwards('app', editor, from_state, to_state)\n+\n+        TestConstraint = to_state.apps.get_model('app', 'TestConstraint')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        TestConstraint.objects.create(field_1=42, flag=True)\n+        TestConstraint.objects.create(field_1=None, flag=False)\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, from_state, to_state)\n         Author = to_state.apps.get_model(app_label, 'Author')\n+        # Test for the specific issue of incorrect SQL generation with CheckConstraint and OR\n+        check = models.Q(field_1__isnull=False, flag__exact=True) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name='field_1_has_value_if_flag_set')\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards('app', to_state)\n+        \n+        with connection.schema_editor() as editor:\n+            operation.database_forwards('app', editor, from_state, to_state)\n+\n+        TestConstraint = to_state.apps.get_model('app', 'TestConstraint')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        TestConstraint.objects.create(field_1=42, flag=True)\n+        TestConstraint.objects.create(field_1=None, flag=False)\n         with self.assertRaises(IntegrityError), transaction.atomic():\n             Author.objects.create(name='Albert', rebate='10$')\n         author = Author.objects.create(name='Albert', rebate='10%')\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..6f8d0b4 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -153,6 +153,12 @@ class URLTranslationTests(URLTestCaseBase):\n         with translation.override('en'):\n             self.assertEqual(translate_url('/en/nonexistent/', 'nl'), '/en/nonexistent/')\n             self.assertEqual(translate_url('/en/users/', 'nl'), '/nl/gebruikers/')\n+            # Optional arguments in URL patterns\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'), '/nl/with-arguments/regular-argument/optional.html')\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'), '/nl/with-arguments/regular-argument/')\n+            # Test with missing optional arguments\n+            self.assertEqual(translate_url('/regex_optional/1/2/', 'nl'), '/nl/regex_optional/1/2/')\n+            self.assertEqual(translate_url('/regex_optional/1/', 'nl'), '/nl/regex_optional/1/')\n             # Namespaced URL\n             self.assertEqual(translate_url('/en/account/register/', 'nl'), '/nl/profiel/registreren/')\n             # path() URL pattern\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..d0143af 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -14,11 +15,28 @@ from .models import (\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    Congressman, Derived, Item,\n )\n \n \n class ModelInheritanceTest(TestCase):\n-    def test_model_inheritance(self):\n+    def test_create_new_derived_instance_with_pk_none(self):\n+        derived1 = Derived.objects.create(f=True)\n+        derived2 = Item.objects.get(pk=derived1.pk).derived\n+        # Reset primary key to create new instance\n+        derived2.pk = None\n+        derived2.save()\n+        self.assertEqual(Derived.objects.count(), 2)\n+        self.assertTrue(Derived.objects.get(pk=derived1.pk).f)\n+\n+    def test_create_new_item_instance_with_pk_none(self):\n+        item1 = Item.objects.create(f=True)\n+        item2 = Item.objects.get(pk=item1.pk)\n+        # Reset primary key to create new instance\n+        item2.pk = None\n+        item2.save()\n+        self.assertEqual(Item.objects.count(), 2)\n+        self.assertTrue(Item.objects.get(pk=item1.pk).f)\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n         # existent child instance, saving the Parent doesn't duplicate the\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..6aa9389 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -638,6 +638,13 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries are used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n     def test_fast_delete_instance_set_pk_none(self):\n         u = User.objects.create()\n         # User can be fast-deleted.\n@@ -702,4 +709,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..84498d6 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,27 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_to_python_value(self):\n+        f = models.DecimalField(max_digits=4, decimal_places=2)\n+        # The error message template that should be used\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        \n+        # List of invalid types to test\n+        invalid_values = [\n+            (),          # Tuple\n+            [],          # List\n+            {},          # Dictionary\n+            set(),       # Set\n+            object(),    # Object\n+            complex(),   # Complex number\n+            'non-numeric string',  # Non-numeric string\n+            b'non-numeric byte-string'  # Non-numeric byte-string\n+        ]\n+        \n+        for value in invalid_values:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    f.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..5ba7541 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,9 +1,12 @@\n+\n import datetime\n import pickle\n \n import django\n from django.db import models\n from django.test import TestCase\n+from django.db.models import Sum\n+from .models import Toy\n \n from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n \n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..ee6d3b1 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -19,7 +19,16 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertIsNone(field.clean(''))\n         self.assertIsNone(field.clean(None))\n \n-    def test_invalid(self):\n+    def test_unicode_handling(self):\n+        field = JSONField()\n+        # Test Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4e2d\u56fd'}), '{\"a\": \"\u4e2d\u56fd\"}')\n+        # Test emojis\n+        self.assertEqual(field.prepare_value({'emoji': '\ud83d\ude00\ud83d\udc31'}), '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test mixed content\n+        self.assertEqual(field.prepare_value({'mixed': 'Hello \u4f60\u597d \ud83c\udf0d'}), '{\"mixed\": \"Hello \u4f60\u597d \ud83c\udf0d\"}')\n+        # Test preparing list of Unicode strings\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d', '\u4e16\u754c', '\ud83c\udf1f']), '[\"\u4f60\u597d\", \"\u4e16\u754c\", \"\ud83c\udf1f\"]')\n         field = JSONField()\n         with self.assertRaisesMessage(ValidationError, 'Enter a valid JSON.'):\n             field.clean('{some badly formed: json}')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..f5e64de 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,6 +6602,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n+    @override_settings(APPEND_SLASH=True, SCRIPT_NAME='/prefix/')\n+    def test_forced_script_name_applied(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix/')\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=None)\n+    def test_missing_slash_without_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..fff5089 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,36 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_missing_import_in_generated_migration(self):\n+        \"\"\"\n+        Test that a generated migration file includes the necessary import\n+        for 'models' when custom fields and mixins that use 'models' are\n+        present.\n+        \"\"\"\n+        fields = {\n+            'name': 'app.models.MyField(primary_key=True, serialize=False)',\n+        }\n+\n+        options = {\n+            'abstract': False,\n+        }\n+\n+        bases = ('app.models.MyMixin', 'models.Model')\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\"MyModel\", fields=fields.items(), options=options, bases=bases),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Check if import of 'models' is present\n+        self.assertIn(\"from django.db import models\", output)\n+        # Additionally, check for the presence of Migration class in the result\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..c4c3bfe 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,7 +1630,20 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n-    def test_exists_none_with_aggregate(self):\n+    def test_aggregation_default_after_annotation(self):\n+        # Test case based on the issue description\n+        result = Book.objects.annotate(\n+            idx=F('id')\n+        ).aggregate(Sum('id', default=0))\n+        # Ensure the result does not cause an OperationalError\n+        self.assertEqual(result['id__sum'], Book.objects.aggregate(Sum('id'))['id__sum'])\n+\n+    def test_aggregation_default_with_fallback(self):\n+        # Test Coalesce workaround to verify consistency\n+        result = Book.objects.annotate(\n+            idx=F('id')\n+        ).aggregate(x=Coalesce(Sum('id'), 0))\n+        self.assertEqual(result['x'], Book.objects.aggregate(Sum('id'))['id__sum'])\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1655,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..544a026 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2979,6 +2979,26 @@ class OperationTests(OperationTestBase):\n         )\n \n         new_state = project_state.clone()\n+        # Test case for unnamed index\n+        # Setup: create an unnamed index to test the rename operation on.\n+        unnamed_index_state = project_state.clone()\n+        unnamed_operation = RenameIndex(\"Pony\", (\"weight\", \"pink\"), \"temp_pony_idx\")\n+        unnamed_operation.state_forwards(app_label, unnamed_index_state)\n+\n+        # Test renaming an unnamed index.\n+        with connection.schema_editor() as editor:\n+            unnamed_operation.database_forwards(app_label, editor, project_state, unnamed_index_state)\n+        self.assertIndexNameExists(table_name, \"temp_pony_idx\")\n+\n+        # Reverse should restore the unnamed index's autogenerated name.\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            unnamed_operation.database_backwards(app_label, editor, unnamed_index_state, project_state)\n+        self.assertIndexNameExists(table_name, \"Pony_weight_pink_idx\")  # assuming this was the original autogenerated name\n+\n+        # Re-apply renaming to verify idempotency and no crash\n+        with connection.schema_editor() as editor:\n+            unnamed_operation.database_forwards(app_label, editor, project_state, unnamed_index_state)\n+        self.assertIndexNameExists(table_name, \"temp_pony_idx\")\n         operation.state_forwards(app_label, new_state)\n         # Rename index.\n         with connection.schema_editor() as editor:\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..b971585 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -599,8 +599,86 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n     Input value of unique_together must be a set of tuples.\n+\n+    Test cases below demonstrate various scenarios to ensure that unique_together\n+    constraints are added and removed correctly, including edge cases involving\n+    unique constraints and primary keys.\n     \"\"\"\n \n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_add_unique_together_on_field_with_unique_constraint(self):\n+        \"\"\"\n+        Test adding a unique_together constraint on a field that already has a unique constraint.\n+        \"\"\"\n+        app_label = \"test_autofuwc\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Unicorn\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"name\", models.CharField(max_length=30, unique=True)),\n+                    ],\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_unicorn\"\n+        unique_constraint_name = f\"{table_name}_name_key\"\n+        \n+        # Initially, there's only the unique constraint on the 'name' field.\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+\n+        # Add a unique_together constraint on the 'name' field.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Unicorn\", {(\"name\",)})\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Check if both constraints exist.\n+        unique_together_constraint_name = f\"{table_name}_name_uniq\"\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintExists(table_name, unique_together_constraint_name, value=False)\n+\n+        # Cleanup: remove the unique_together constraint.\n+        project_state = new_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Unicorn\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_ensure_no_duplicate_constraints(self):\n+        \"\"\"\n+        Ensure that duplicate constraints are not created.\n+        \"\"\"\n+        app_label = \"test_no_duplicate_constraints\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Dragon\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                    ],\n+                    options={\"unique_together\": {(\"id\",)}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_dragon\"\n+        pk_constraint_name = f\"{table_name}_pkey\"\n+\n+        # Only one unique constraint should exist on the 'id' field which is the primary key.\n+        self.assertConstraintExists(table_name, pk_constraint_name, value=False)\n+        unique_together_constraint_name = f\"{table_name}_id_uniq\"\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n     option_name = \"unique_together\"\n \n     def __init__(self, name, unique_together):\n",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..2dc282c 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,7 +3497,53 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n-class LocalizedModelFormTest(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from django.forms import modelform_factory\n+from django.db import models\n+\n+# Mock model for testing\n+class Person(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+class TestFormfieldCallbackInMeta(TestCase):\n+    def test_formfield_callback_in_meta_applies_in_factory_form(self):\n+        # Define a custom callback that alters the widget\n+        def custom_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        # Define a base form with Meta specifying the callback\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = '__all__'\n+                formfield_callback = custom_callback\n+\n+        # Use modelform_factory with the BaseForm\n+        FactoryForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        # Check that the formfield_callback was applied in the FactoryForm\n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_no_overwriting_of_formfield_callback_with_none(self):\n+        # Define a custom callback\n+        def custom_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        # Define a base ModelForm with Meta specifying the callback\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = '__all__'\n+                formfield_callback = custom_callback\n+\n+        # Create a FactoryForm using modelform_factory without explicitly setting a formfield_callback\n+        FactoryForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        # Ensure the formfield_callback from BaseForm is used\n+        for field_name, field in FactoryForm.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..9ab6c66 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -5,11 +5,42 @@ import re\n \n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+\n+class TestTag(models.Model):\n+    objects = None\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n+\n+class SerializationM2MCustomManagerTestCase(TestCase):\n+\n+    def test_serialization_m2m_custom_manager(self):\n+        # Setup models\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_obj = Test.objects.create(name=\"test\")\n+        test_obj.tags.add(tag)\n+        test_obj.save()\n+\n+        # Serializing the Test object should not raise FieldError\n+        json_data = serializers.serialize(\"json\", [test_obj])\n+        self.assertTrue(json_data)\n+\n from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n from django.utils.translation import gettext_lazy, override\n+from django.core import serializers\n+from django.db import models\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..ee667a1 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -202,6 +202,10 @@ def test_inset_and_secondary():\n     pickle.loads(pickle.dumps(fig))\n \n \n+import matplotlib.pyplot as plt\n+import platform\n+from io import BytesIO\n+\n @pytest.mark.parametrize(\"cmap\", cm._colormaps.values())\n def test_cmap(cmap):\n     pickle.dumps(cmap)\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..639e3ca 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6603,6 +6603,22 @@ def test_integrate(dask):\n     with pytest.raises(ValueError):\n         da.integrate(\"x2d\")\n \n+    # Verify behavior consistency between DataArray and Dataset\n+    # Using coord parameter for both integrate methods\n+\n+    # Test DataArray integration using coord after change.\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"x\")  # Deprecated way, should provide a warning.\n+    \n+    # Test the correct usage with coord\n+    result_da = da.integrate(coord='x')\n+    assert isinstance(result_da, xr.DataArray)\n+\n+    # Test Dataset integration using coord\n+    result_ds = ds.integrate(coord='x')\n+    assert isinstance(result_ds, xr.Dataset)\n+    assert result_ds.equals(result_da.to_dataset(name=\"var\"))\n+\n \n @pytest.mark.parametrize(\"dask\", [True, False])\n @pytest.mark.parametrize(\"which_datetime\", [\"np\", \"cftime\"])\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..2fe0141 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -106,8 +106,39 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"foo{1,3},bar\", [\"foo{1,3}\", \"bar\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_handling(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that comma-separated regex lists are correctly parsed, even with commas in quantifiers.\"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n \n-def test_unknown_py_version(capsys: CaptureFixture) -> None:\n+def test_csv_regex_error_handling(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly error when a regular expression list is invalid, such as unmatched brackets.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run(\n+            [str(EMPTY_MODULE), r\"--bad-names-rgx=(foo{1,}, foo{1,3}})\"],\n+            exit=False,\n+        )\n+    output = capsys.readouterr()\n+    assert (\n+        r\"Error in provided regular expression: (foo{1,} beginning at index 0: missing ), unterminated subpattern\"\n+    ) in output.err\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..eaeb7f9 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,7 +1156,20 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n-def test_importorskip():\n+def test_does_not_collect_random_init_py_files(testdir):\n+    # Create a package directory with an __init__.py file that would fail if collected\n+    pydir = testdir.mkpydir(\"randompkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+\n+    # Create a valid test file that should pass\n+    testdir.makepyfile(test_valid=\"def test_valid(): assert True\")\n+\n+    # Run pytest\n+    result = testdir.runpytest(\"-v\")\n+\n+    # Ensure that pytest does not try to collect random __init__.py and passes the valid test\n+    assert result.ret == pytest.ExitCode.OK\n+    result.stdout.fnmatch_lines([\"*test_valid.py::test_valid PASSED*\"])\n     with pytest.raises(\n         pytest.skip.Exception,\n         match=\"^could not import 'doesnotexist': No module named .*\",\n@@ -1184,4 +1197,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..8a3530d 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,19 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"invalid_ident\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_invalid_idents(invalid_ident: str) -> None:\n+    with pytest.raises(AssertionError):\n+        Expression.compile(invalid_ident)\n+\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..208b3db 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -251,12 +251,90 @@ def test_set_output_mro():\n \n     class A(Base):\n         pass\n+import pandas as pd\n+import pytest\n+from sklearn.pipeline import make_union\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+from numpy.testing import assert_array_equal\n \n+def test_feature_union_with_pandas_output():\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+    set_config(transform_output=\"pandas\")\n+    union = make_union(MyTransformer())\n+    result = union.fit_transform(data)\n+    \n+    # Expected result is a DataFrame with the aggregated 'value' sums for each date\n+    expected = pd.DataFrame([240] * 4, columns=[\"MyTransformer__value\"])\n+    assert_array_equal(result.values, expected.values)\n+    assert_array_equal(result.index, expected.index)\n     class B(Base):\n         def transform(self, X):\n             return \"B\"\n+import pandas as pd\n+import pytest\n+from sklearn.pipeline import make_union\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+from numpy.testing import assert_array_equal\n \n+def test_feature_union_with_pandas_output():\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+    set_config(transform_output=\"pandas\")\n+    union = make_union(MyTransformer())\n+    result = union.fit_transform(data)\n+    \n+    # Expected result is a DataFrame with the aggregated 'value' sums for each date\n+    expected = pd.DataFrame([240] * 4, columns=[\"MyTransformer__value\"])\n+    assert_array_equal(result.values, expected.values)\n+    assert_array_equal(result.index, expected.index)\n     class C(A, B):\n         pass\n+import pandas as pd\n+import pytest\n+from sklearn.pipeline import make_union\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+from numpy.testing import assert_array_equal\n \n-    assert C().transform(None) == \"B\"\n+def test_feature_union_with_pandas_output():\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+    set_config(transform_output=\"pandas\")\n+    union = make_union(MyTransformer())\n+    result = union.fit_transform(data)\n+    \n+    # Expected result is a DataFrame with the aggregated 'value' sums for each date\n+    expected = pd.DataFrame([240] * 4, columns=[\"MyTransformer__value\"])\n+    assert_array_equal(result.values, expected.values)\n+    assert_array_equal(result.index, expected.index)\n+    assert C().transform(None) == \"B\"\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..107a5e0 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -12,8 +12,28 @@ import pytest\n \n from sphinx import addnodes\n \n-\n-@pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util.docutils import new_document\n+from sphinx.util.nodes import inline_all_toctrees\n+from sphinx.ext.autodoc import mock\n+import os\n+import shutil\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_typehints(app: SphinxTestApp) -> None:\n+    app.build()\n+\n+    # Check output for the description mode\n+    content = (app.outdir / \"index.html\").read_text()\n+    assert '<a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.8)\">None</a>' in content\n+\n+    # Change configuration to signature mode\n+    app.config.autodoc_typehints = 'signature'\n+    app.build()\n+    \n+    # Check output for the signature mode\n+    content = (app.outdir / \"index.html\").read_text()\n+    assert '<a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\" title=\"(in Python v3.8)\">None</a>' not in content\n def test_autodoc(app, status, warning):\n     app.builder.build_all()\n \n@@ -30,4 +50,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..328ab6a 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1009,6 +1009,49 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+def test_info_field_list_union_type(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:function:: foo(text)\\n\"\n+            \"\\n\"\n+            \"   :param text: a text\\n\"\n+            \"   :type text: bytes | str\\n\"\n+            \"   :return type: str | None\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"function \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"foo\"])],\n+                                  [desc_content, nodes.field_list, nodes.field, (nodes.field_name,\n+                                                                                 nodes.field_body)])]))\n+\n+    # Check parameter type union\n+    assert_node(doctree[3][1][0][0][1], ([nodes.paragraph, ([addnodes.literal_strong, \"text\"],\n+                                                             \" (\",\n+                                                             [pending_xref, addnodes.literal_emphasis, \"bytes\"],\n+                                                             [addnodes.literal_emphasis, \" | \"],\n+                                                             [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                                             \")\",\n+                                                             \" -- \",\n+                                                             \"a text\")]))\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"bytes\",\n+                **{\"py:module\": \"example\", \"py:function\": \"foo\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:function\": \"foo\"})\n+\n+    # Check return type union\n+    assert_node(doctree[3][1][0][0][1][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:function\": \"foo\"})\n+    assert_node(doctree[3][1][0][0][1][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"None\",\n+                **{\"py:module\": \"example\", \"py:function\": \"foo\"})\n+\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "",
  "sympy__sympy-18698": "",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..fbd1427 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3241,8 +3241,15 @@ def test_keep_coeff():\n     assert _keep_coeff(x, 1/x) == 1\n     assert _keep_coeff(x + 1, S(2)) == u\n \n-\n-def test_poly_matching_consistency():\n+from sympy import I, factor, expand\n+from sympy.abc import x, y\n+\n+def test_factor_with_extension():\n+    z = expand((x - 1)*(y - 1))\n+    factored_expr = factor(z, extension=[I])\n+    # We expect the factorized form to still be (x - 1)*(y - 1)\n+    expected = (x - 1)*(y - 1)\n+    assert factored_expr == expected, f\"Expected: {expected}, got: {factored_expr}\"\n     # Test for this issue:\n     # https://github.com/sympy/sympy/issues/5514\n     assert I * Poly(x, x) == Poly(I*x, x)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..fc0ef7e 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,24 @@\n+\n+from sympy.core.symbol import Symbol\n+from sympy.testing.pytest import raises\n+\n+def test_symbol_dict_attribute():\n+    # Create a Symbol instance\n+    s = Symbol('s')\n+\n+    # Check if __dict__ does not exist, as Symbols use __slots__\n+    assert not hasattr(s, '__dict__'), \"Symbol instance should not have __dict__ due to __slots__\"\n+\n+    # Testing that setting an attribute not in __slots__ raises an AttributeError\n+    with raises(AttributeError):\n+        s.some_attr = 42\n+\n+    # Ensure that __slots__ is used\n+    assert hasattr(s, '__slots__'), \"Symbol instance should have __slots__ defined\"\n+\n+    # Check the content of __slots__\n+    assert s.__slots__ == ('name',), \"Symbol __slots__ should only contain 'name'\"\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..43d04f8 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,6 +369,45 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n+def test_issue_24543():\n+    for p in ('1.5', 1.5, 2):\n+        for q in ('1.5', 1.5, 2):\n+            assert Rational(p, q).as_numer_denom() == Rational('%s/%s' % (p, q)).as_numer_denom()\n+\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+\n+    # Additional test cases\n+    assert Rational('3.0', '6.0') == Rational(1, 2)\n+    assert Rational(3.0, 6) == Rational(1, 2)\n+    assert Rational('0.1', '0.2') == Rational(1, 2)\n+    assert Rational('0.1', 0.2) == Rational(1, 2)\n+    assert Rational(0.1, '0.2') == Rational(1, 2)\n+    assert Rational(0.1, 0.2) == Rational(1, 2)\n+    assert Rational('7/8', '1/2') == Rational(7, 4)\n+    assert Rational('5/3', 2.0) == Rational(5, 6)\n+\n+    # Cases with equivalent numeric values in different forms\n+    assert Rational('2.5') == Rational(5, 2)\n+    assert Rational(2.5) == Rational(5, 2)\n+    assert Rational('5.0/2.0') == Rational(5, 2)\n+\n+    # Edge cases with zero\n+    assert Rational(0, '3/4') == Rational(0)\n+    assert Rational('0', 1) == Rational(0)\n+\n+    # Edge cases with improper strings\n+    try:\n+        Rational('foo', 'bar')\n+        assert False, \"Expected a TypeError\"\n+    except TypeError:\n+        pass\n+\n+    try:\n+        Rational('123/abc')\n+        assert False, \"Expected a TypeError\"\n+    except TypeError:\n+        pass\n+\n \n def test_Number_new():\n     \"\"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..fc14f37 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,48 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_with_checkbox_select_multiple_and_auto_id(self):\n+        \"\"\"\n+        Test that the BoundWidget.id_for_label respects the id set by ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n+\n+    def test_boundwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the custom id provided in attrs.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n+\n+        form = SomeForm()\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id')\n+\n+    def test_boundwidget_id_for_label_with_no_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label behaves correctly when no id is provided.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm()\n+        subwidgets = form['field'].subwidgets\n+        self.assertNotEqual(subwidgets[0].id_for_label, None)\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..d284733 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,8 +301,48 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_no_zero_inclusion(direction):\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 30])\n+    initial_x_bound = ax.get_xbound()\n+    initial_y_bound = ax.get_ybound()\n+\n+    span_selector = widgets.SpanSelector(ax, print, direction, interactive=True)\n+\n+    # Check that the initial axis bounds are not altered\n+    assert ax.get_xbound() == initial_x_bound\n+    assert ax.get_ybound() == initial_y_bound\n+\n+    # Simulate user interactions\n+    press_event = (11, 15)\n+    move_event = (14, 18)\n+    release_event = move_event\n+\n+    if direction == 'horizontal':\n+        do_event(span_selector, 'press', xdata=press_event[0], ydata=0, button=1)\n+        do_event(span_selector, 'onmove', xdata=move_event[0], ydata=0, button=1)\n+        do_event(span_selector, 'release', xdata=release_event[0], ydata=0, button=1)\n+    else:\n+        do_event(span_selector, 'press', xdata=0, ydata=press_event[1], button=1)\n+        do_event(span_selector, 'onmove', xdata=0, ydata=move_event[1], button=1)\n+        do_event(span_selector, 'release', xdata=0, ydata=release_event[1], button=1)\n+\n+    # Ensure that the axis bounds remain unchanged after interaction\n+    assert ax.get_xbound() == initial_x_bound\n+    assert ax.get_ybound() == initial_y_bound\n+\n+    # Verify final selections span\n+    if direction == 'horizontal':\n+        expected_span = press_event[0], release_event[0]\n+    else:\n+        expected_span = press_event[1], release_event[1]\n \n-def check_lasso_selector(**kwargs):\n+    assert span_selector.extents == expected_span\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..53e8d3f 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,7 +51,52 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n-def test_dict_learning_overcomplete():\n+def test_sparse_coder_max_iter_lasso_cd():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                                        n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n     assert dico.components_.shape == (n_components, n_features)\n",
  "scikit-learn__scikit-learn-14629": "",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..da4833e 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -170,7 +170,37 @@ def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n \n \n-def test_stringify():\n+def test_restify_with_mock():\n+    \"\"\"Test restify for a mocked class base.\"\"\"\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+\n+        class MockModule(nn.Module):\n+            pass\n+\n+        assert restify(MockModule) == ':py:class:`torch.nn.Module`'\n+        \n+\n+def test_restify_with_partial_mock():\n+    \"\"\"Test restify for a class with partial mock affecting base.\"\"\"\n+    with mock(['partial.mock']):\n+        import partial.mock as pm\n+\n+        class PartialMockModule(pm.Module):\n+            pass\n+\n+        assert restify(PartialMockModule) == ':py:class:`partial.mock.Module`'\n+\n+\n+def test_stringify_with_mock():\n+    \"\"\"Test stringify for a mocked class base.\"\"\"\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+\n+        class MockModule(nn.Module):\n+            pass\n+\n+        assert stringify(MockModule) == 'torch.nn.Module'\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n     assert stringify(None) == \"None\"\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..922513b 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,20 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+def test_issue_13546():\n+    from sympy import Product, S, Symbol\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    \n+    # Additional test cases to ensure correctness\n+    # Verify for n=3\n+    assert p.subs(n, 3).doit() == S(205)/24\n+    # Verify for n=4\n+    assert p.subs(n, 4).doit() == S(1165)/192\n+    # Verify for n=5\n+    assert p.subs(n, 5).doit() == S(10051)/3072\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +369,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}