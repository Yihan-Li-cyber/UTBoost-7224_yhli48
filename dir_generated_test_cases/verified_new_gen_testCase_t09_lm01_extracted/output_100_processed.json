{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..e2fecd9 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,25 @@ compound_models = {\n             )\n }\n \n+# Additional test fixtures for nested compound models based on the issue\n+@pytest.mark.parametrize('model, expected', [\n+    (m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5), \n+     np.array([[True, True, False, False],\n+               [True, True, False, False],\n+               [False, False, True, False],\n+               [False, False, False, True]])),\n+\n+    # Nested model as per the issue description\n+    (m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Linear1D(5)), \n+     np.array([[True, True, False, False],\n+               [True, True, False, False],\n+               [False, False, True, True],\n+               [False, False, True, True]]))\n+])\n+def test_issue_nested_compound(model, expected):\n+    result = separability_matrix(model)\n+    np.testing.assert_array_equal(result, expected)\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..a0743e0 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,42 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+    def test_various_float_formats_in_card(self):\n+        \"\"\"Test various floating point values to ensure correct formatting\"\"\"\n+\n+        # Regular float that does not need scientific notation\n+        c = fits.Card(\"NORMALFLOAT\", 123.456, \"normal float\")\n+        assert str(c) == _pad(\"NORMALFLOAT =              123.456 / normal float\")\n+\n+        # Very small float to ensure scientific notation is used\n+        c = fits.Card(\"SMALLFLOAT\", 1.23e-10, \"small float\")\n+        assert str(c).startswith(\"SMALLFLOAT =          1.23E-10 / small float\")\n+\n+        # Larger float to ensure scientific notation for large numbers\n+        c = fits.Card(\"LARGEFLOAT\", 1.23e+10, \"large float\")\n+        assert str(c).startswith(\"LARGEFLOAT =          1.23E+10 / large float\")\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..c42e80d 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -418,6 +418,20 @@ class TestDiff(FitsTestCase):\n         assert diff.common_column_names == set(\"abcdefghij\")\n         assert diff.diff_ratio == 0\n         assert diff.diff_total == 0\n+    def test_diff_identical_file_with_vla(self):\n+        \"\"\"\n+        Test that FITSDiff does not report differences when comparing a file to itself,\n+        especially when it includes Variable-Length Arrays.\n+        \"\"\"\n+        # Create a BinTableHDU with a VLA column\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        hdu.writeto('diffbug.fits', overwrite=True)\n+\n+        # Use FITSDiff to compare the file to itself\n+        diff = FITSDiff('diffbug.fits', 'diffbug.fits')\n+\n+        assert diff.identical, \"FITSDiff reported differences in a file compared with itself\"\n \n     def test_diff_empty_tables(self):\n         \"\"\"\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..7be8452 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -74,6 +74,8 @@ def test_JsonCustomEncoder():\n     assert newd == tmpd\n \n \n+import pytest\n+\n def test_inherit_docstrings():\n     class Base(metaclass=misc.InheritDocstrings):\n         def __call__(self, *args):\n@@ -89,7 +91,21 @@ def test_inherit_docstrings():\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n \n-def test_set_locale():\n+def test_inherit_docstrings_property():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def data(self):\n+            \"DATA property\"\n+            return 0\n+\n+    class Subclass(Base):\n+        @property\n+        def data(self):\n+            return 42\n+\n+    # Check inheritance of docstring for property\n+    if Base.data.__doc__ is not None:\n+        assert Subclass.data.__doc__ == \"DATA property\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..45e0983 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -198,6 +198,16 @@ def test_unknown_unit3():\n         unit5 = u.Unit(None)\n \n \n+def test_unrecognized_unit_equality_with_none():\n+    # Test case based on the issue description\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    assert unit != None  # noqa: E711\n+    assert not (unit == None)  # noqa: E711\n+\n+    # Additional test to check unit not in a collection containing None\n+    assert unit not in (None, u.m)\n+\n+\n @raises(TypeError)\n def test_invalid_scale():\n     x = ['a', 'b', 'c'] * u.m\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..97e4047 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -69,7 +69,21 @@ def test_minversion():\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n     bad_versions = ['1', '1.2rc1']\n+\n+    # Test case for the LooseVersion issue\n+    edge_cases = ['1.14', '1.14.3', '1.14dev', '1.15', '1.14.0.dev0']\n+    test_module.__version__ = '1.14.3'\n+\n+    for version in edge_cases:\n+        print(f'Comparing {test_module.__version__} with {version}:', minversion(test_module, version))\n+\n+    assert not minversion(test_module, '1.14dev')  # Expect False, as 1.14.3 is not dev\n+    assert minversion(test_module, '1.14')\n+    assert minversion(test_module, '1.14.0')\n+    assert minversion(test_module, '1.13.9')\n+    assert minversion(test_module, '1.14.3')\n+    assert not minversion(test_module, '1.15')\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..8364932 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -93,7 +93,43 @@ class TestHeaderFunctions(FitsTestCase):\n         c = fits.Card('nullstr', '')\n         assert str(c) == _pad(\"NULLSTR = ''\")\n \n-    def test_boolean_value_card(self):\n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+        \"\"\"\n+        # This assumes there's a method to obtain test data path\n+        # and that `self.data('test0.fits')` method gives the path to a test file\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n+    def test_card_from_string(self):\n+        \"\"\"\n+        Test loading a Card from a string.\n+        \"\"\"\n+        c = fits.Card.fromstring('ABC     = \"abc\"')\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_header_fromstring_string(self):\n+        \"\"\"\n+        Test reading a Header from a plain string.\n+        \"\"\"\n+        header_string = 'NAXIS   =                    0                                                  ' + ' ' * 752  # Dummy header\n+        header_from_string = fits.Header.fromstring(header_string)\n+        assert header_from_string['NAXIS'] == 0\n         \"\"\"Test Card constructor with boolean value\"\"\"\n \n         c = fits.Card(\"abc\", True)\n@@ -2330,6 +2366,10 @@ class TestHeaderFunctions(FitsTestCase):\n                 c.verify('exception')\n \n \n+import pytest\n+from astropy.io import fits\n+from astropy.io.fits.card import Card\n+\n class TestRecordValuedKeywordCards(FitsTestCase):\n     \"\"\"\n     Tests for handling of record-valued keyword cards as used by the\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..f634b82 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -149,8 +149,26 @@ class TestQuantityCreation:\n \n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n-\n-    def test_copy(self):\n+    \n+    def test_float_dtype_preservation(self):\n+        \"\"\"Test that np.float16, np.float32, np.float64, and np.float128\n+           retain their dtype when creating a Quantity.\"\"\"\n+        a16 = np.array([1., 2.], dtype=np.float16)\n+        q16 = u.Quantity(a16, u.yr)\n+        assert q16.dtype == a16.dtype\n+\n+        a32 = np.array([1., 2.], dtype=np.float32)\n+        q32 = u.Quantity(a32, u.yr)\n+        assert q32.dtype == a32.dtype\n+\n+        a64 = np.array([1., 2.], dtype=np.float64)\n+        q64 = u.Quantity(a64, u.yr)\n+        assert q64.dtype == a64.dtype\n+\n+        if hasattr(np, 'float128'):  # not all platforms have float128\n+            a128 = np.array([1., 2.], dtype=np.float128)\n+            q128 = u.Quantity(a128, u.yr)\n+            assert q128.dtype == a128.dtype\n \n         # By default, a new quantity is constructed, but not if copy=False\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..ee2cfb3 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,6 +218,20 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+    \n+    # Test cases for invalid characters in URL userinfo fields\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+\n+    # Test cases for valid URLs that should pass\n+    (URLValidator(), 'http://user:pass@example.com', None),\n+    (URLValidator(), 'http://user%40example.com@host.com', None),\n+    (URLValidator(), 'http://user:pa%2Fs@valid.com', None),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..4341ef6 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -12,6 +13,7 @@ from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n+from django.db.models.expressions import Case, When\n from .models import Author, Book, Publisher, Store\n \n \n@@ -389,7 +391,30 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_expression(self):\n+        # Test with a basic conditional distinct count.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+        # Test with a different field in the condition.\n+        aggs = Book.objects.aggregate(\n+            distinct_titles=Count(Case(When(price__gt=20.0, then='title')), distinct=True),\n+        )\n+        self.assertGreaterEqual(aggs['distinct_titles'], 0)  # Assuming you have books priced over 20 with titles.\n+\n+        # Test with a complex condition involving multiple fields.\n+        aggs = Book.objects.aggregate(\n+            distinct_authors=Count(Case(When(pages__gt=200, price__lt=30.0, then='author_id')), distinct=True),\n+        )\n+        self.assertGreaterEqual(aggs['distinct_authors'], 0)  # Adjust depending on the test data setup.\n+\n+        # Test ensuring that distinct is working correctly when no conditions are met.\n+        aggs = Book.objects.aggregate(\n+            no_match_distinct_authors=Count(Case(When(pages__gt=1000, then='author_id')), distinct=True),\n+        )\n+        self.assertEqual(aggs['no_match_distinct_authors'], 0)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/file_uploads/tests.py b/tests/file_uploads/tests.py\nindex edc5fba..77f388e 100644\n--- a/tests/file_uploads/tests.py\n+++ b/tests/file_uploads/tests.py\n@@ -16,6 +16,7 @@ from django.http.multipartparser import (\n from django.test import SimpleTestCase, TestCase, client, override_settings\n \n from . import uploadhandler\n+import os\n from .models import FileModel\n \n UNICODE_FILENAME = 'test-0123456789_\u4e2d\u6587_Orl\u00e9ans.jpg'\n@@ -44,8 +45,27 @@ class FileUploadTests(TestCase):\n             }\n             response = self.client.post('/upload/', post_data)\n         self.assertEqual(response.status_code, 200)\n+    def test_upload_file_permissions(self):\n+        \"\"\"\n+        Test that the uploaded file has the default permission of 0o644.\n+        \"\"\"\n+        with tempfile.NamedTemporaryFile(suffix=\".test\") as temp_file:\n+            temp_file.write(b'some content')\n+            temp_file.seek(0)\n+\n+            response = self.client.post('/upload/', {'file': temp_file})\n+            self.assertEqual(response.status_code, 200)\n+\n+            # Assuming the uploaded file is saved in MEDIA_ROOT with the same name\n+            uploaded_file_path = os.path.join(MEDIA_ROOT, os.path.basename(temp_file.name))\n \n-    def test_large_upload(self):\n+            # Wait for the file to be saved and check if it exists\n+            if os.path.exists(uploaded_file_path):\n+                file_permissions = os.stat(uploaded_file_path).st_mode & 0o777\n+                expected_permissions = 0o644\n+                self.assertEqual(file_permissions, expected_permissions)\n+            else:\n+                self.fail(f\"Uploaded file does not exist at {uploaded_file_path}.\")\n         file = tempfile.NamedTemporaryFile\n         with file(suffix=\".file1\") as file1, file(suffix=\".file2\") as file2:\n             file1.write(b'a' * (2 ** 21))\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..a2e63e1 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,6 +1,8 @@\n+\n import os\n import signal\n from unittest import mock\n+import subprocess\n \n from django.db.backends.postgresql.client import DatabaseClient\n from django.test import SimpleTestCase\n@@ -8,26 +10,44 @@ from django.test import SimpleTestCase\n \n class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n \n-    def _run_it(self, dbinfo):\n+    def _run_it_with_run(self, dbinfo):\n         \"\"\"\n-        That function invokes the runshell command, while mocking\n-        subprocess.call. It returns a 2-tuple with:\n+        This function invokes the runshell command while mocking\n+        subprocess.run. It returns a 2-tuple with:\n         - The command line list\n-        - The content of the file pointed by environment PGPASSFILE, or None.\n+        - The value of the PGPASSWORD environment variable or None.\n         \"\"\"\n-        def _mock_subprocess_call(*args):\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n             self.subprocess_args = list(*args)\n-            if 'PGPASSFILE' in os.environ:\n-                with open(os.environ['PGPASSFILE']) as f:\n-                    self.pgpass = f.read().strip()  # ignore line endings\n-            else:\n-                self.pgpass = None\n-            return 0\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(self.subprocess_args, 0)\n+\n         self.subprocess_args = None\n-        self.pgpass = None\n-        with mock.patch('subprocess.call', new=_mock_subprocess_call):\n+        self.pgpassword = None\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n             DatabaseClient.runshell_db(dbinfo)\n-        return self.subprocess_args, self.pgpass\n+        return self.subprocess_args, self.pgpassword\n+\n+    def test_pgpassword_set(self):\n+        command, pgpassword = self._run_it_with_run({\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        })\n+        self.assertEqual(command, ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'])\n+        self.assertEqual(pgpassword, 'somepassword')\n+\n+    def test_pgpassword_not_set(self):\n+        command, pgpassword = self._run_it_with_run({\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'host': 'somehost',\n+            'port': '444',\n+        })\n+        self.assertEqual(command, ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'])\n+        self.assertIsNone(pgpassword)\n \n     def test_basic(self):\n         self.assertEqual(\n@@ -113,4 +133,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..9cef967 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n \n \n @override_settings(\n@@ -47,7 +48,17 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_missing_content_type_rename_ignore(self):\n+    # This test checks if the content type renaming uses the correct database.\n+    @override_settings(DATABASE_ROUTERS=[ContentTypeOperationsTests.TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n@@ -63,4 +74,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 62b54f5..4d7ffdf 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -580,7 +580,11 @@ class ModelAdmin(BaseModelAdmin):\n     def __str__(self):\n         return \"%s.%s\" % (self.model._meta.app_label, self.__class__.__name__)\n \n+    def get_inlines(self, request, obj=None):\n+        return self.inlines\n+\n     def get_inline_instances(self, request, obj=None):\n+        inlines = self.get_inlines(request, obj)\n         inline_instances = []\n         for inline_class in self.inlines:\n             inline = inline_class(self.model, self.admin_site)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..3169d76 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\N{LINE FEED}\", \"trailingnewline\\N{CARRIAGE RETURN}\"\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -248,6 +248,18 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n+    def test_ascii_validator(self):\n+        valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n', 'trailingnewline\\r']\n+        v = validators.ASCIIUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n@@ -258,4 +270,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..4893054 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -10,11 +10,28 @@ from .utils import ROOT, TEMPLATE_DIR\n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n \n+import os\n+\n class RenderToStringTest(SimpleTestCase):\n \n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n+    def test_autoescape_on(self):\n+        # Test case for when autoescape is explicitly enabled\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',  # Expecting HTML-escaped output\n+        )\n+\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',  # Expecting raw output without escaping\n+        )\n+\n     def test_basic_context(self):\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..b208e77 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -406,7 +406,9 @@ class HttpResponseTests(unittest.TestCase):\n         r.write('!')\n         self.assertEqual(r.content, b'helloworld!')\n \n-    def test_iterator_isnt_rewound(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview content'))\n+        self.assertEqual(r.content, b'memoryview content')\n         # Regression test for #13222\n         r = HttpResponse('abc')\n         i = iter(r)\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..b4ba7c5 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,6 +501,17 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n     def test_ignore_files(self):\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n@@ -509,6 +520,8 @@ class LoaderTests(TestCase):\n         self.assertEqual(migrations, ['0001_initial'])\n \n \n+from django.test import override_settings\n+\n class PycLoaderTests(MigrationTestBase):\n \n     def test_valid(self):\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..ab0d218 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -664,6 +664,31 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, 'Add another Author-Book Relationship')\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n         self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n+    def test_inline_view_only_perm_no_add_m2m(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # User with only view permission should not see any options to add the m2m inline\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        self.assertContains(response, '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\"', html=True)\n+\n+    def test_inline_view_only_perm_no_change_m2m(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # User with only view permission should not be able to change the m2m inline\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(response, '<p>%s</p>' % self.user.username)\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n+\n+    def test_inline_view_only_perm_redundant_buttons_m2m(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # Ensure that redundant buttons (like delete) are not present\n+        self.assertNotContains(response, 'Delete')\n+        self.assertNotContains(response, '<input type=\"checkbox\" name=\"Author_books-0-DELETE\"', html=True)\n \n     def test_inline_change_m2m_change_perm(self):\n         permission = Permission.objects.get(codename='change_book', content_type=self.book_ct)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..bcf9324 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,26 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_empty_fields_returns_empty_dict(self):\n+        \"\"\"model_to_dict should return an empty dict when fields=[] is passed.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_exclude_empty_fields_returns_all_fields(self):\n+        \"\"\"model_to_dict should return all fields when exclude=[] is passed.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(\n+            sorted(model_to_dict(bw, exclude=[])),\n+            ['id', 'name', 'score', 'writer_ptr']\n+        )\n+\n+    def test_exclude_some_fields(self):\n+        \"\"\"model_to_dict should exclude specified fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(\n+            sorted(model_to_dict(bw, exclude=['id', 'name'])),\n+            ['score', 'writer_ptr']\n+        )\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..a4d2853 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..f65f679 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,10 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('0.{}1234'.format('0' * 199) + '5', 2, '0.00'),  # Just below the threshold, should display as 0.00\n+            ('0.{}1234'.format('0' * 200) + '5', 2, '0.00'),  # Exact threshold, still should display as 0.00\n+            ('0.{}1'.format('0' * 200), 3, '0.000'),  # Small number at threshold with more decimal places\n+            ('0.{}1'.format('0' * 201), 4, '0.0000'), # Just above the threshold, should still display as 0.0000\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..3b1f997 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,5 +1,13 @@\n+\n import uuid\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n from django.contrib.contenttypes.fields import (\n     GenericForeignKey, GenericRelation,\n )\n@@ -7,25 +15,60 @@ from django.contrib.contenttypes.models import ContentType\n from django.db import models\n from django.db.models.query import ModelIterable, QuerySet\n from django.utils.functional import cached_property\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class Author(models.Model):\n     name = models.CharField(max_length=50, unique=True)\n     first_book = models.ForeignKey('Book', models.CASCADE, related_name='first_time_authors')\n     favorite_authors = models.ManyToManyField(\n         'self', through='FavoriteAuthors', symmetrical=False, related_name='favors_me')\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     def __str__(self):\n         return self.name\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class AuthorWithAge(Author):\n     author = models.OneToOneField(Author, models.CASCADE, parent_link=True)\n     age = models.IntegerField()\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class FavoriteAuthors(models.Model):\n     author = models.ForeignKey(Author, models.CASCADE, to_field='name', related_name='i_like')\n@@ -164,13 +207,34 @@ class TaggedItem(models.Model):\n     )\n     favorite_fkey = models.CharField(max_length=64, null=True)\n     favorite = GenericForeignKey('favorite_ct', 'favorite_fkey')\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     def __str__(self):\n         return self.tag\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class Bookmark(models.Model):\n     url = models.URLField()\n@@ -179,31 +243,80 @@ class Bookmark(models.Model):\n                                     content_type_field='favorite_ct',\n                                     object_id_field='favorite_fkey',\n                                     related_query_name='favorite_bookmarks')\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class Comment(models.Model):\n     comment = models.TextField()\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     # Content-object field\n     content_type = models.ForeignKey(ContentType, models.CASCADE)\n     object_pk = models.TextField()\n     content_object = GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_pk\")\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n # Models for lookup ordering tests\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n class House(models.Model):\n     name = models.CharField(max_length=50)\n     address = models.CharField(max_length=255)\n     owner = models.ForeignKey('Person', models.SET_NULL, null=True)\n     main_room = models.OneToOneField('Room', models.SET_NULL, related_name='main_room_of', null=True)\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n \n",
  "django__django-11239": "",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..d0e2583 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -82,6 +82,31 @@ class FilteredRelationTests(TestCase):\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n \n+    def test_with_exclude_no_filter(self):\n+        # This test checks that exclude works without any filtering condition.\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=True),\n+            [self.author1]\n+        )\n+\n+    def test_with_exclude_and_filter(self):\n+        # This test verifies the behavior when exclude is combined with another filter.\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).filter(Q(name__iexact='Author 1')).exclude(book_alice__isnull=True),\n+            [self.author1]\n+        )\n+\n+    def test_exclude_without_annotation(self):\n+        # This tests the exclude behavior when there is no annotation.\n+        self.assertSequenceEqual(\n+            Author.objects.exclude(Q(name__iexact='Author 1')),\n+            [self.author2]\n+        )\n+\n     def test_without_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..0da73db 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,7 +243,31 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n+    def test_skip_checks_without_flag(self):\n+        \"\"\"\n+        Test that system checks are run when --skip-checks is not used.\n+        Ensure the error is captured when there's a check failure.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # Assuming there's an intentional mistake causing staticfiles.E001\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('staticfiles.E001:', err)\n+        self.assertNotIn('Set foo', out)\n+\n+    def test_skip_checks_with_flag(self):\n+        \"\"\"\n+        Test that system checks are skipped when --skip-checks is used.\n+        Ensure the command proceeds without error from the checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # Assuming there's an intentional mistake causing staticfiles.E001\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n         abbreviated forms of the --setting and --pythonpath options.\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..35d6f03 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,8 @@\n+\n from django.test import SimpleTestCase\n from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.test.utils import override_settings\n+from django.urls.resolvers import get_resolver\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +12,28 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_with_specific_and_default_urlconf(self):\n+        # Verify that get_resolver uses the lru_cache effectively to prevent repeated _populate computation\n+        resolver_default = get_resolver()\n+        resolver_specific = get_resolver('urlpatterns.path_urls')\n+        resolver_other = get_resolver('urlpatterns.other_urls')\n+\n+        # Objects for the same URLConf should match\n+        self.assertIs(resolver_default, resolver_specific)\n+        # Objects for different URLConfs should not match\n+        self.assertIsNot(resolver_default, resolver_other)\n+\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..cbfe0f6 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,26 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_union_values_list_change_columns(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        # Test mutating the columns after initial values_list call\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+\n+        reserved_name_only = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name_only, ('a',))\n+\n+    def test_union_values_list_with_different_order(self):\n+        ReservedName.objects.create(name='hello', order=50)\n+        qs1 = ReservedName.objects.all()\n+        # Initially using different column order\n+        reserved_order_name = qs1.union(qs1).values_list('order', 'name').get()\n+        self.assertEqual(reserved_order_name, (50, 'hello'))\n+\n+        reserved_name_order = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name_order, ('hello', 50))\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..fcfeb43 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -8,6 +8,7 @@ import sys\n import tempfile\n import threading\n from email import charset, message_from_binary_file, message_from_bytes\n+from unittest import mock\n from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n@@ -360,6 +361,13 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n \n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--p8s937b>', email.message()['Message-ID'])\n+\n     def test_none_body(self):\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n",
  "django__django-11551": "",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..10fb444 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -461,8 +461,31 @@ class OrderingTests(TestCase):\n             articles, ['Article 1', 'Article 4', 'Article 3', 'Article 2'],\n             attrgetter('headline')\n         )\n+    def test_order_by_expression_with_inheritance(self):\n+        # Set up child articles with various headlines and publication dates\n+        ca1 = ChildArticle.objects.create(\n+            headline='headline1',\n+            pub_date=datetime(2005, 7, 26),\n+            author=self.author_1,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='headline2',\n+            pub_date=datetime(2005, 7, 25),\n+            author=self.author_2,\n+        )\n+\n+        # Test ordering by expression on inherited model\n+        articles = ChildArticle.objects.order_by(F('pub_date').asc(nulls_last=True))\n+        self.assertSequenceEqual(articles, [ca2, ca1])\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_expression_non_crash(self):\n+        # Test that using expressions in order_by doesn't crash\n+        ordered_articles = OrderedByFArticle.objects.all()\n+        try:\n+            articles = ordered_articles.order_by(F('author'))\n+            self.assertTrue(True, \"Ordering by F expressions should not crash.\")\n+        except Exception as e:\n+            self.fail(f\"Ordering by F expressions raised an exception: {e}\")\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..7fab98a 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,7 +391,19 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_distinct_on_aggregate_min_max(self):\n+        \"\"\"\n+        Test DISTINCT on Min and Max aggregates.\n+        Although DISTINCT on Min and Max is not generally useful,\n+        these tests ensure they accept the DISTINCT parameter.\n+        \"\"\"\n+        for aggregate, expected_result in (\n+            (Min, 1.5),\n+            (Max, 5.0),\n+        ):\n+            with self.subTest(aggregate=aggregate.__name__):\n+                books = Book.objects.aggregate(ratings=aggregate('rating', distinct=True))\n+                self.assertEqual(books['ratings'], expected_result)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-11740": "",
  "django__django-11749": "",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..99355db 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,6 +437,20 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n+    def test_username_maxlength_html_attribute(self):\n+        \"\"\"\n+        Test that the AuthenticationForm's username field sets the\n+        'maxlength' HTML attribute correctly.\n+        \"\"\"\n+        # Default User model with a username field of max_length 150\n+        form = AuthenticationForm()\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 150)\n+\n+        # Custom User model with a username field of max_length 255\n+        with override_settings(AUTH_USER_MODEL='auth_tests.CustomEmailField'):\n+            form = AuthenticationForm()\n+            self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n     def test_username_field_label(self):\n \n         class CustomAuthenticationForm(AuthenticationForm):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..9b56111 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -306,7 +306,19 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n \n-    def test_serialize_choices(self):\n+    def test_serialize_enum_using_names(self):\n+        from django.utils.translation import gettext_lazy as _\n+        \n+        class Status(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(default=Status.GOOD, max_length=128)\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(default=migrations.test_writer.Status['GOOD'], max_length=128)\"\n+        )\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n             B = 'B', 'B value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..38a6fde 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -312,7 +313,27 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_fixed_year_logic(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        \n+        # Testing around the boundary using mock for a specific current time.\n+        current_year = datetime.utcnow().year\n+        \n+        # Example for years close to the boundary using current year assumption.\n+        mock_times = [\n+            (datetime(2021, 11, 6, 8, 49, 37), 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (datetime(2021, 11, 6, 8, 49, 37), 'Wednesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (datetime(2070, 11, 6, 8, 49, 37), 'Wednesday, 01-Jan-71 00:00:00 GMT', datetime(1971, 1, 1, 0, 0, 0)),\n+            (datetime(2070, 11, 6, 8, 49, 37), 'Wednesday, 01-Jan-70 00:00:00 GMT', datetime(2070, 1, 1, 0, 0, 0)),\n+        ]\n+        \n+        for mocked_time, rfc850_str, expected in mock_times:\n+            with self.subTest(rfc850_str=rfc850_str):\n+                mocked_datetime.utcnow.return_value = mocked_time\n+                parsed = parse_http_date(rfc850_str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..5d05860 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -205,6 +207,30 @@ class BulkCreateTests(TestCase):\n         NoFields.objects.bulk_create([NoFields() for i in range(2)])\n         self.assertEqual(NoFields.objects.count(), 2)\n \n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country(name=f\"Country {i}\", iso_two_letter=f\"CT{i}\", description=\"A description\") for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_batch_size_none_uses_max_batch_size(self):\n+        objs = [Country(name=f\"Country {i}\", iso_two_letter=f\"CT{i}\", description=\"A description\") for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=None)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_zero_batch_size_defaults_to_max_batch_size(self):\n+        objs = [Country(name=f\"Country {i}\", iso_two_letter=f\"CT{i}\", description=\"A description\") for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=0)\n+\n     @skipUnlessDBFeature('has_bulk_insert')\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..217c9bf 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -39,6 +39,23 @@ class Gender(models.TextChoices):\n \n     __empty__ = '(Undeclared)'\n \n+from django.test import TestCase\n+from .models import MyChoice, MyObject\n+\n+class ModelEnumissueTests(TestCase):\n+    def setUp(self):\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_value(self):\n+        # Test if the value of the newly created object's field is a string\n+        self.assertIsInstance(self.my_object.my_str_value, str)\n+        self.assertEqual(self.my_object.my_str_value, 'first')\n+\n+    def test_retrieved_object_value(self):\n+        # Test if the object's field value retrieved from the database is also a string\n+        my_object = MyObject.objects.get(id=self.my_object.id)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, 'first')\n \n class ChoicesTests(SimpleTestCase):\n     def test_integerchoices(self):\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..9c52d75 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -168,7 +168,16 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsInstance(val, str)\n         self.assertEqual(val, 'translated')\n \n-    def test_iterator_choices(self):\n+class OverrideGetFieldDisplayTest(TestCase):\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         \"\"\"\n         get_choices() works with Iterators.\n         \"\"\"\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..0e2b55a 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db.models import Index\n+from django.db import connection\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db.models import Index\n+from django.db import connection\n \n \n class SchemaIndexesTests(TestCase):\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..dbb8d0e 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,6 +8,8 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n+from django.db.models import JSONField\n+from django.test import TestCase\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..c688de6 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -722,9 +722,25 @@ class WriterTests(SimpleTestCase):\n         output = writer.as_string()\n         self.assertIn(\"from django.db import migrations\\n\", output)\n \n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class InnerCharField(models.CharField):\n+                pass\n+        \n+        class TestModel(models.Model):\n+            inner_field = Outer.InnerCharField(max_length=20)\n+\n+        field = TestModel._meta.get_field('inner_field')\n+        field_string, field_imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            field_string,\n+            \"migrations.test_writer.Outer.InnerCharField(max_length=20)\"\n+        )\n+        self.assertIn('import migrations.test_writer', field_imports)\n+\n     def test_deconstruct_class_arguments(self):\n-        # Yes, it doesn't make sense to use a class as a default for a\n-        # CharField. It does make sense for custom fields though, for example\n+        # It does not make sense to use a class as a default for a\n+        # CharField. It makes sense for custom fields though, for example\n         # an enumfield that takes the enum class as an argument.\n         class DeconstructibleInstances:\n             def deconstruct(self):\n@@ -746,4 +762,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..6c1bba2 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,7 +1103,23 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n-    def test_render(self):\n+    def test_splitarraywidget_booleanfield(self):\n+        widget = SplitArrayWidget(CheckboxInput(), size=5)\n+        context = widget.get_context('checkbox_array', [True, False, True, False, False], {})\n+        subwidgets = context['widget']['subwidgets']\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in subwidgets],\n+            [{'checked': True}, {}, {'checked': True}, {}, {}]\n+        )\n+\n+    def test_splitarraywidget_all_false_booleanfield(self):\n+        widget = SplitArrayWidget(CheckboxInput(), size=5)\n+        context = widget.get_context('checkbox_array', [False, False, False, False, False], {})\n+        subwidgets = context['widget']['subwidgets']\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in subwidgets],\n+            [{}, {}, {}, {}, {}]\n+        )\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n             \"\"\"\n",
  "django__django-12209": "",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..9ec2f04 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,8 +77,30 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+             # Adding new error test cases for multiple keyword arguments\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            # New test cases based on the described issue\n+            # Testing keyword-only arguments with a default value\n+            (\n+                '{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'\n+            ),\n+            # Attempting to pass the same keyword argument twice\n+            (\n+                \"\\'simple_keyword_only_default\\' received multiple values for keyword argument \\'kwarg\\'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'\n+            ),\n         ]\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -101,8 +123,30 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+             # Adding new error test cases for multiple keyword arguments\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            # New test cases based on the described issue\n+            # Testing keyword-only arguments with a default value\n+            (\n+                '{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'\n+            ),\n+            # Attempting to pass the same keyword argument twice\n+            (\n+                \"\\'simple_keyword_only_default\\' received multiple values for keyword argument \\'kwarg\\'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'\n+            ),\n         ]\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -190,12 +234,34 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+             # Adding new error test cases for multiple keyword arguments\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            # New test cases based on the described issue\n+            # Testing keyword-only arguments with a default value\n+            (\n+                '{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'\n+            ),\n+            # Attempting to pass the same keyword argument twice\n+            (\n+                \"\\'simple_keyword_only_default\\' received multiple values for keyword argument \\'kwarg\\'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'\n+            ),\n         ]\n \n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n \n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n     def test_inclusion_tag_errors(self):\n         errors = [\n             (\"'inclusion_one_default' received unexpected keyword argument 'three'\",\n",
  "django__django-12276": "",
  "django__django-12304": "diff --git a/tests/template_tests/test_callables.py b/tests/template_tests/test_callables.py\nindex d71266b..5035346 100644\n--- a/tests/template_tests/test_callables.py\n+++ b/tests/template_tests/test_callables.py\n@@ -1,4 +1,6 @@\n-from unittest import TestCase\n+\n+from django.test import SimpleTestCase\n+from tests.model_enums.tests import Suit\n \n from django.template import Context, Engine\n \n@@ -122,4 +124,4 @@ class CallableVariablesTests(TestCase):\n \n         # Double-check that the object was really never called during the\n         # template rendering.\n-        self.assertEqual(my_doodad.num_calls, 0)\n+        self.assertEqual(my_doodad.num_calls, 0)\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..b64f299 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -175,8 +175,27 @@ class UtilsTests(SimpleTestCase):\n \n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n-\n-    def test_number_formats_display_for_field(self):\n+    \n+    def test_json_display_for_field(self):\n+        \"\"\"\n+        Test JSONField values are displayed as valid JSON when readonly in the admin.\n+        \"\"\"\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            # Despite the invalid JSON, let's see how it's handled\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),\n+            # Add cases with more complexity\n+            ({'foo': [1, 2, 3], 'bar': {'baz': 'qux'}}, '{\"foo\": [1, 2, 3], \"bar\": {\"baz\": \"qux\"}}'),\n+            ({\"number\": 1, \"boolean\": True}, '{\"number\": 1, \"boolean\": true}'),\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    expected_display,\n+                )\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n \n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..df565a3 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1005,8 +1005,25 @@ class OtherModelTests(SimpleTestCase):\n             from_country = models.ForeignKey(Country, models.CASCADE)\n \n         self.assertEqual(ShippingMethod.check(), [])\n+    \n+    def test_onetoone_order_affects_parent_link(self):\n+        from django.core.exceptions import ImproperlyConfigured\n+        # Define models to verify the issue with field ordering\n+        class Document(models.Model):\n+            pass\n+\n+        # Test: Incorrect order without parent_link on secondary field should raise an error\n+        with self.assertRaisesMessage(ImproperlyConfigured, \"Add parent_link=True to invalid_models_tests.Picking.origin.\"):\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # Test: Correct order allows configuration with parent_link set\n+        class PickingCorrectOrder(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n \n-    def test_missing_parent_link(self):\n+        self.assertEqual(PickingCorrectOrder.check(), [])\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Place(models.Model):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..6edd867 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -248,10 +248,19 @@ class SecurityMiddlewareTest(SimpleTestCase):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n     @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        Ensure that the default Referrer-Policy is 'same-origin' when\n+        SECURE_REFERRER_POLICY is not specified.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n+\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n         The middleware will not override a \"Referrer-Policy\" header already\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..83ac286 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -20,6 +20,8 @@ from django.db.models.functions import (\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.contrib.auth.models import User\n+from django.utils.functional import SimpleLazyObject\n from django.test.utils import Approximate, isolate_apps\n \n from .models import (\n",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..ebbb140 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -77,7 +77,26 @@ class MigrationTestBase(TransactionTestCase):\n                 any(c['check'] for n, c in constraints if n == name),\n             )\n \n-    def assertConstraintNotExists(self, table, name):\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_remove_index_together_with_existing_unique_together(self):\n+        app_label = 'test_index_unique_together'\n+        table_name = f'{app_label}_pony'\n+        # Set up initial model state with unique_together and index_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True, index_together=True)\n+        \n+        # Assert initial constraints\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Remove index together and assert unique constraint remains\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n         return self.assertConstraintExists(table, name, False)\n \n     def assertFKExists(self, table, columns, to, value=True, using='default'):\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..58f4efa 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -4,6 +4,36 @@ import re\n from datetime import datetime, timedelta\n from importlib import import_module\n \n+class M2MWidgetOverrideTest(TestCase):\n+    def test_formfield_overrides_m2m_select_multiple_widget(self):\n+        \"\"\"\n+        Test that a SelectMultiple widget can be overridden by specifying a\n+        widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.SelectMultiple(attrs={'class': 'custom-select'})},\n+            }\n+\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.SelectMultiple)\n+        self.assertEqual(field.widget.attrs['class'], 'custom-select')\n+\n+    def test_formfield_for_manytomany_overridden_by_function(self):\n+        \"\"\"\n+        Test widget overrides using formfield_for_manytomany.\n+        \"\"\"\n+        class CustomAdmin(admin.ModelAdmin):\n+            def formfield_for_manytomany(self, db_field, request, **kwargs):\n+                if db_field.name == \"members\":\n+                    kwargs['widget'] = forms.CheckboxSelectMultiple\n+                return super().formfield_for_manytomany(db_field, request, **kwargs)\n+\n+        admin_instance = CustomAdmin(Band, admin.site)\n+        field = admin_instance.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+\n import pytz\n \n from django import forms\n@@ -14,7 +44,8 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n+from django.contrib.admin import widgets\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..3724f05 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,8 +2444,30 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n-\n-    def test_mti_inheritance_model_removal(self):\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n@@ -2453,4 +2475,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/models.py b/tests/lookup/models.py\nindex 28992d4..3389d0b 100644\n--- a/tests/lookup/models.py\n+++ b/tests/lookup/models.py\n@@ -62,6 +62,14 @@ class IsNullWithNoneAsRHS(IsNull):\n     can_use_none_as_rhs = True\n \n \n+class Article(models.Model):\n+    slug = models.CharField(max_length=255)\n+\n+    class Meta:\n+        constraints = [\n+            models.UniqueConstraint(fields=[\"slug\"], name=\"%(app_label)s_%(class)s_slug_unq\")\n+        ]\n+\n class Season(models.Model):\n     year = models.PositiveSmallIntegerField()\n     gt = models.IntegerField(null=True, blank=True)\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..87b4d2b 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -893,7 +893,20 @@ class OtherModelTests(SimpleTestCase):\n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n \n-    def test_ordering_pointing_to_related_model_pk(self):\n+    def test_ordering_with_isnull_lookup(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Parent, models.CASCADE, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..a3b8f4c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1820,11 +1820,34 @@ class CombinableTests(SimpleTestCase):\n     def test_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n-\n-    def test_reversed_and(self):\n+    class ExpressionWrapperTests(SimpleTestCase):\n+\n+        def test_empty_group_by(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+        def test_non_empty_group_by(self):\n+            expr = ExpressionWrapper(functions.Lower(Value('f')), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+        # Additional test to ensure constants not in GROUP BY with annotate\n+        def test_constant_not_in_group_by_with_annotate(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+            query = str(Model.objects.query)  # Get the actual SQL query\n+            # Ensure that the constant 3 is not in the GROUP BY clause\n+            self.assertNotIn('GROUP BY \"model\".\"column_a\", 3', query)\n+           \n+        # Further test with another expression\n+        def test_expression_with_annotate(self):\n+            expr = ExpressionWrapper(functions.Upper('column_c'), output_field=IntegerField())\n+            Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+            query = str(Model.objects.query)  # Get the actual SQL query\n+            # Check that the expression is used correctly\n+            self.assertIn('GROUP BY \"model\".\"column_a\", functions.Upper(\"model\".\"column_c\")', query)\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a43cfb4..7fdeb0d 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -75,6 +75,30 @@ class ExtraInfo(models.Model):\n     def __str__(self):\n         return self.info\n \n+from django.utils.translation import gettext_lazy as _\n+\n+class ProductMetaDataType(models.Model):\n+    label = models.CharField(max_length=255, unique=True, blank=False, null=False)\n+    filterable = models.BooleanField(default=False, verbose_name=_(\"filterable\"))\n+\n+    def __str__(self):\n+        return self.label\n+\n+class ProductMetaData(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    value = models.TextField(null=False, blank=False)\n+    metadata_type = models.ForeignKey(\n+        ProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE\n+    )\n+\n+    class Meta:\n+        app_label = \"adminpricing\"\n+        verbose_name = _(\"product meta data\")\n+        verbose_name_plural = _(\"product meta datas\")\n+\n+    def __str__(self):\n+        return self.value\n+\n \n class Author(models.Model):\n     name = models.CharField(max_length=10)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..23f4384 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,7 +343,29 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n-    def test_order_by_f_expression(self):\n+    def test_self_referencing_foreign_key_ordering(self):\n+        # Assuming that Author model represents a self-referencing foreign key ordering scenario.\n+        # Create authors with potential self-referencing.\n+        author1 = Author.objects.create(name=\"Author 1\")\n+        author2 = Author.objects.create(name=\"Author 2\", editor=author1)\n+        author3 = Author.objects.create(name=\"Author 3\", editor=author2)\n+        \n+        # Creating articles linked to these authors.\n+        article1 = Article.objects.create(author=author1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article2 = Article.objects.create(author=author2, headline=\"Article 2\", pub_date=\"2023-01-02\")\n+        article3 = Article.objects.create(author=author3, headline=\"Article 3\", pub_date=\"2023-01-03\")\n+        \n+        # Test order by author's editor field to trigger self-referencing foreign key ordering.\n+        queryset = Article.objects.order_by('author__editor_id')\n+        \n+        # Check if the order is as expected: by author's editor_id.\n+        self.assertQuerysetEqual(\n+            queryset, ['Article 1', 'Article 2', 'Article 3'], attrgetter(\"headline\"))\n+\n+        # Now test with inverted sorting\n+        queryset_desc = Article.objects.order_by('-author__editor_id')\n+        self.assertQuerysetEqual(\n+            queryset_desc, ['Article 3', 'Article 2', 'Article 1'], attrgetter(\"headline\"))\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..1a2dba9 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -615,6 +615,27 @@ class BaseCacheTests:\n                 count += 1\n         self.assertEqual(count, final_count)\n \n+    def test_cull_handles_empty_result(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+\n+        # Forcefully set _max_entries to mock an empty cache or cull key result\n+        old_max_entries = cull_cache._max_entries\n+        cull_cache._max_entries = -1\n+\n+        # Clear cache to simulate no entries\n+        cull_cache.clear()\n+        \n+        # This ensures no error is raised when fetching cull key returns None\n+        try:\n+            cull_cache._cull('default', connection.cursor(), timezone.now())\n+        except TypeError as e:\n+            self.fail(f\"_cull method failed with TypeError: {e}\")\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n+\n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n \n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..0f5fcbd 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1640,6 +1640,46 @@ class ModelFormBasicTests(TestCase):\n \n         form = AuthorForm({'full_name': 'Bob'})\n         self.assertTrue(form.is_valid())\n+\n+\n+class ForeignKeyValidationTests(TestCase):\n+    def setUp(self):\n+        class ArticleManager(models.Manager):\n+            def get_queryset(self):\n+                qs = super().get_queryset()\n+                return qs.filter(archived=False)\n+\n+        class Article(models.Model):\n+            title = models.CharField(max_length=100)\n+            archived = models.BooleanField(default=False)\n+            objects = ArticleManager()\n+\n+        class FavoriteArticle(models.Model):\n+            article = models.ForeignKey(Article, on_delete=models.CASCADE)\n+\n+        self.Article = Article\n+        self.FavoriteArticle = FavoriteArticle\n+\n+    def test_foreign_key_with_default_manager_fails_on_archived_article(self):\n+        archived_article = self.Article.objects.create(title=\"Archived Article\", archived=True)\n+        favorite = self.FavoriteArticle(article=archived_article)\n+        with self.assertRaises(ValidationError) as cm:\n+            favorite.full_clean()\n+        self.assertIn(\"article\", cm.exception.message_dict)\n+\n+    def test_foreign_key_with_base_manager_allows_archived_article(self):\n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = self.FavoriteArticle\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                self.fields['article'].queryset = self.Article._base_manager.all()\n+\n+        archived_article = self.Article.objects.create(title=\"Archived Article\", archived=True)\n+        form = FavoriteArticleForm({'article': archived_article.pk})\n+        self.assertTrue(form.is_valid())\n         obj = form.save()\n         obj.name = 'Alice'\n         obj.full_clean()\n",
  "django__django-13112": "",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..f98dfd2 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,7 +1627,14 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n-    def test_duration_with_datetime(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_datetime_subtraction_without_expression_wrapper(self):\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..b724d77 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -323,6 +323,14 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_sha1_decode(self):\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'example_key': 'example_value'}\n+            encoded = self.session.encode(data)\n+            decoded_data = self.session.decode(encoded)\n+            self.assertEqual(decoded_data, data)\n+\n     def test_decode_failure_logged_to_security(self):\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..6d3a072 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -6,6 +6,9 @@ from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n )\n from django.test.utils import require_jinja2\n+from django.shortcuts import get_object_or_404\n+from django.http import Http404\n+from .models import Account\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n@@ -590,7 +593,28 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    def test_offer_view_with_simple_lazy_object_context(self):\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        # Create a mock Account for testing\n+        account = Account.objects.create(slug='test-slug')\n+\n+        # Simulate a view request with the SimpleLazyObject issue\n+        request = self.client.get(\"/offers/test-slug/\")\n+        view = OfferView.as_view()\n+        \n+        try:\n+            response = view(request, offer_slug=account.slug)\n+            self.assertEqual(response.context_data['offer'], account)\n+            self.assertEqual(response.context_data['offer_slug'], account.slug)\n+        except Http404:\n+            self.fail(\"OfferView raised Http404 unexpectedly!\")\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..8283362 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -17,6 +17,7 @@ from django.forms.models import (\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n+from django.test.utils import isolate_apps\n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n     Category, Character, Colour, ColourfulItem, CustomErrorMessage, CustomFF,\n@@ -2815,7 +2816,74 @@ class LimitChoicesToTests(TestCase):\n         f = StumpJokeWithCustomFieldForm()\n         self.assertEqual(f.fields['custom'].queryset, 42)\n \n-    def test_fields_for_model_applies_limit_choices_to(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        marley = Character.objects.create(username='Marley', last_action='2023-10-05')\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-05')\n+\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n",
  "django__django-13343": "",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..3fdc664 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,6 +623,19 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n+    def test_key_in(self):\n+        tests = [\n+            ('value__key__in', [0], []),  # As per issue, expected empty\n+            ('value__key', 0, self.objs),  # Full set, assuming prepopulate with key=0\n+            ('value__foo__in', ['bar'], [self.objs[7]]),\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n+\n     def test_key_iexact(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..a49a9ce 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -18,7 +18,9 @@ from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n from django.utils import timezone\n-\n+import pytz\n+from datetime import datetime\n+from django.db.models import Count\n from ..models import Author, DTModel, Fan\n \n \n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..3187d3e 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -102,8 +102,54 @@ class BasicFieldTests(SimpleTestCase):\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class FieldComparisonTests(SimpleTestCase):\n+\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+    def test_field_equality_across_models(self):\n+        \"\"\"Fields with different models compare unequal and their hashes differ.\"\"\"\n+        class BaseModel(models.Model):\n+            field = models.IntegerField()\n+\n+        class AnotherBaseModel(models.Model):\n+            field = models.IntegerField()\n+\n+        base_model_field = BaseModel._meta.get_field('field')\n+        another_base_model_field = AnotherBaseModel._meta.get_field('field')\n \n-class ChoicesTests(SimpleTestCase):\n+        self.assertNotEqual(base_model_field, another_base_model_field)\n+        self.assertNotEqual(hash(base_model_field), hash(another_base_model_field))\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-13410": "",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..f0390ce 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2085,7 +2085,20 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n \n-@skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_annotate_without_ordering(self):\n+        # Ensures qs.ordered is False for annotated querysets without ordering.\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+\n+    def test_group_by_without_order(self):\n+        # Test a queryset with a GROUP BY clause without explicit ORDER BY clause\n+        qs = Annotation.objects.values('name').annotate(count=Count('id'))\n+        self.assertIs(qs.ordered, False)\n+\n+    def test_annotated_ordering_with_explicit_order_by(self):\n+        # Verifying explicit ordering in annotated querysets reflects in ordered property\n+        qs = Annotation.objects.annotate(num_notes=Count('notes')).order_by('name')\n+        self.assertIs(qs.ordered, True)\n class SubqueryTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..83d9e48 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -342,6 +342,26 @@ class CommandTests(SimpleTestCase):\n         self.assertEqual(parser.epilog, epilog)\n \n \n+class FlushManagementCommandTests(TestCase):\n+    def test_management_command_flush_stdout(self):\n+        # Test to ensure flush works on stdout\n+        out = StringIO()\n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            call_command('outputwrapper', stdout=out)\n+            self.assertIn('Working...', out.getvalue())\n+            self.assertIn('OK', out.getvalue())\n+            mocked_flush.assert_called()\n+\n+    def test_management_command_flush_stderr(self):\n+        # Test to ensure flush works on stderr\n+        err = StringIO()\n+        with mock.patch.object(err, 'flush') as mocked_flush:\n+            call_command('outputwrapper', stderr=err)\n+            err_value = err.getvalue()\n+            self.assertIn('Working...', err_value)\n+            self.assertIn('OK', err_value)\n+            mocked_flush.assert_called()\n+\n class CommandRunTests(AdminScriptTestCase):\n     \"\"\"\n     Tests that need to run by simulating the command line, not by call_command.\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..042abd2 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n@@ -16,9 +17,39 @@ class MockedPasswordResetTokenGenerator(PasswordResetTokenGenerator):\n     def _now(self):\n         return self._now_val\n \n+from .with_custom_email_field import CustomEmailField\n+from django.contrib.auth.models import User\n \n class TokenGeneratorTest(TestCase):\n \n+    def test_token_invalidation_on_email_change(self):\n+        \"\"\"Changing a user's email invalidates the existing token.\"\"\"\n+        \n+        # Test with default User model\n+        user = User.objects.create_user('emailchangetestuser', 'initial@example.com', 'testpw')\n+        token_generator = PasswordResetTokenGenerator()\n+        token = token_generator.make_token(user)\n+        self.assertTrue(token_generator.check_token(user, token))\n+        \n+        # Change email\n+        user.email = 'newemail@example.com'\n+        user.save()\n+        \n+        # The token should now be invalid\n+        self.assertFalse(token_generator.check_token(user, token))\n+        \n+        # Test with CustomEmailField model\n+        custom_user = CustomEmailField.objects.create_user('changeemailuser', 'initial@example.com', 'testpw')\n+        custom_token = token_generator.make_token(custom_user)\n+        self.assertTrue(token_generator.check_token(custom_user, custom_token))\n+        \n+        # Change email\n+        custom_user.email_address = 'newcustomemail@example.com'\n+        custom_user.save()\n+        \n+        # The token should now be invalid\n+        self.assertFalse(token_generator.check_token(custom_user, custom_token))\n+\n     def test_make_token(self):\n         user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n         p0 = PasswordResetTokenGenerator()\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..cbd4866 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,6 +1,8 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n+from django.db.models import Q, UniqueConstraint\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n from django.db import models\n@@ -138,7 +140,64 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithUniqueConstraintAndUsernameField')\n+    def test_username_unique_with_total_uniqueconstraint(self):\n+        \"\"\"\n+        Test User model with a total UniqueConstraint on the USERNAME_FIELD.\n+        \"\"\"\n+        class CustomUserWithUniqueConstraintAndUsernameField(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique'),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserPartiallyUniqueCondition')\n+    def test_username_partially_unique_with_condition(self):\n+        \"\"\"\n+        Test User model with a conditional UniqueConstraint on the USERNAME_FIELD.\n+        \"\"\"\n+        class CustomUserPartiallyUniqueCondition(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='partial_username_unique',\n+                        condition=Q(password__isnull=False),\n+                    ),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'CustomUserPartiallyUniqueCondition.username' must be unique because \"\n+                \"it is named as the 'USERNAME_FIELD'.\",\n+                obj=CustomUserPartiallyUniqueCondition,\n+                id='auth.E003',\n+            ),\n+        ])\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [\n+                checks.Warning(\n+                    \"'CustomUserPartiallyUniqueCondition.username' is named as the \"\n+                    \"'USERNAME_FIELD', but it is not unique.\",\n+                    hint=(\n+                        \"Ensure that your authentication backend(s) can \"\n+                        \"handle non-unique usernames.\"\n+                    ),\n+                    obj=CustomUserPartiallyUniqueCondition,\n+                    id='auth.W004',\n+                ),\n+            ])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..69cd433 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,45 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_aggregation_random_ordering(self):\n+        \"\"\"Random() is not included in the GROUP BY when used for ordering.\"\"\"\n+        authors = Author.objects.annotate(contact_count=Count('book')).order_by('?')\n+        self.assertQuerysetEqual(authors, [\n+            ('Adrian Holovaty', 1),\n+            ('Jacob Kaplan-Moss', 1),\n+            ('Brad Dayley', 1),\n+            ('James Bennett', 1),\n+            ('Jeffrey Forcier', 1),\n+            ('Paul Bissex', 1),\n+            ('Wesley J. Chun', 1),\n+            ('Stuart Russell', 1),\n+            ('Peter Norvig', 2),\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n+\n+    def test_order_by_random_without_aggregation(self):\n+        \"\"\"Test order_by('?') without aggregation to check if it queries random order correctly.\"\"\"\n+        authors = Author.objects.order_by('?')\n+        self.assertTrue(authors.exists())\n+\n+    def test_aggregation_order_by_random_with_filter(self):\n+        \"\"\"Test order_by('?') with filter applied and check if GROUP BY is still correct.\"\"\"\n+        authors = Author.objects.filter(name__icontains=\"a\").annotate(contact_count=Count('book')).order_by('?')\n+        expected_authors = [\n+            ('Adrian Holovaty', 1),\n+            ('Jacob Kaplan-Moss', 1),\n+            ('Brad Dayley', 1),\n+            ('James Bennett', 1),\n+            ('Paul Bissex', 1),\n+            ('Stuart Russell', 1),\n+            ('Peter Norvig', 2),\n+        ]\n+        self.assertQuerysetEqual(authors, expected_authors, lambda a: (a.name, a.contact_count), ordered=False)\n+\n+    def test_multiple_aggregations_with_order_by_random(self):\n+        \"\"\"Test multiple aggregations with order_by('?').\"\"\"\n+        authors = Author.objects.annotate(contact_count=Count('book'), publisher_count=Count('publisher')).order_by('?')\n+        for author in authors:\n+            self.assertGreaterEqual(author.contact_count, 1)\n+            self.assertGreaterEqual(author.publisher_count, 0)\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..9ad8958 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -7,6 +8,7 @@ from decimal import Decimal\n from unittest import mock\n \n from django.core.exceptions import FieldError\n+from collections import namedtuple\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n@@ -815,7 +817,34 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_different_name(self):\n+        CustomRange = namedtuple('CustomRange', ['low', 'high'])\n+        qs = Company.objects.filter(\n+            num_employees__range=CustomRange(low=51, high=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_edge_case(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        # Test with exactly the same minimum and maximum\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_with_regular_tuple(self):\n+        # Regular 2-tuple should also work without any issue\n+        qs = Company.objects.filter(\n+            num_employees__range=(51, 100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..09b3da7 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -16,6 +16,7 @@ from unittest import mock\n \n from django import conf, get_version\n from django.conf import settings\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n@@ -32,6 +33,40 @@ from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n \n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_main_py(self):\n+        \"\"\"\n+        Check that `__main__.py` is replaced with 'python -m django' in prog_name\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['__main__.py'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_default_sys_argv(self):\n+        \"\"\"\n+        Default sys.argv is used when `argv` argument isn't provided.\n+        \"\"\"\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['django-admin', 'help', 'shell']):\n+                execute_from_command_line()\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..09d776b 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -116,6 +117,23 @@ class DateFormatTests(SimpleTestCase):\n         the_future = datetime(2100, 10, 25, 0, 00)\n         self.assertEqual(dateformat.format(the_future, r'Y'), '2100')\n \n+    def test_year_before_1000(self):\n+        # Tests for checking years before 1000 with expected two-digit result.\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (123, '23'),\n+            (9, '09'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n+\n     def test_day_of_year_leap(self):\n         self.assertEqual(dateformat.format(datetime(2000, 12, 31), 'z'), '366')\n \n@@ -164,4 +182,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..5e09c3d 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,7 +1020,16 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_field_default_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n+    def test_readonly_field_ignores_user_input(self):\n+        initial_value = 'hashed_initial_value'\n+        user_input = 'tampered_value'\n+        field = ReadOnlyPasswordHashField()\n+        bound_value = field.bound_data(user_input, initial_value)\n+        self.assertEqual(bound_value, initial_value)\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..f22df86 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,25 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    # Test for issue with squashing CreateModel and AlterModelOptions\n+    def test_create_model_and_alter_model_options_issue(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'IssueModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Issue Model', 'permissions': [('can_view', 'Can view')]},\n+                ),\n+                migrations.AlterModelOptions(\n+                    'IssueModel',\n+                    options={},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel('IssueModel', fields=[]),\n+            ],\n+        )\n+    \n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..6aae4a5 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,9 +1,11 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n from ..utils import setup\n+from django.utils.translation import gettext_lazy, lazy\n \n \n class AddTests(SimpleTestCase):\n@@ -36,6 +38,43 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add05', {'l1': [1, 2], 'l2': [3, 4]})\n         self.assertEqual(output, '[1, 2, 3, 4]')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n+    @setup({'add10': '{{ s1|add:integer_lazy_s2 }}'})\n+    def test_add_string_with_lazy_integer(self):\n+        output = self.engine.render_to_string(\n+            'add10',\n+            {'s1': 'string', 'integer_lazy_s2': lazy(lambda: 5, str)},\n+        )\n+        self.assertEqual(output, 'string5')\n+\n+    @setup({'add11': '{{ s1|add:lazy_integer }}'})\n+    def test_add_string_with_lazy_nonstring_type(self):\n+        output = self.engine.render_to_string(\n+            'add11',\n+            {'s1': 'string', 'lazy_integer': lazy(lambda: 5, int)},\n+        )\n+        self.assertRaises(TypeError, output)\n+\n     @setup({'add06': '{{ t1|add:t2 }}'})\n     def test_add06(self):\n         output = self.engine.render_to_string('add06', {'t1': (3, 4), 't2': (1, 2)})\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..f0130c7 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -11,7 +11,14 @@ from django.db import (\n )\n from django.db.backends.base.base import BaseDatabaseWrapper\n from django.db.backends.signals import connection_created\n-from django.db.backends.utils import CursorWrapper\n+from django.db import connection, IntegrityError, transaction\n+from django.test import TestCase, TransactionTestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature\n+from .models import (\n+    Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n+    ReporterProxy, SchoolClass, Square,\n+    VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n+    SQLKeywordsModel,  # Ensure SQLKeywordsModel is imported\n+)\n from django.db.models.sql.constants import CURSOR\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n@@ -24,8 +31,26 @@ from .models import (\n     VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n )\n \n+class ConstraintsTest(TransactionTestCase):\n \n-class DateQuotingTest(TestCase):\n+    available_apps = ['backends']\n+\n+    def test_check_constraints_sql_keywords(self):\n+        with transaction.atomic():\n+            # Creating a Reporter object to satisfy the ForeignKey constraint\n+            reporter = Reporter.objects.create(full_name=\"John Doe\")\n+            # Create an SQLKeywordsModel instance\n+            obj = SQLKeywordsModel.objects.create(reporter=reporter)\n+            obj.refresh_from_db()\n+\n+            # Modify the reporter_id to a value that doesn't exist\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()  # Should save successfully because constraints are disabled\n+                with self.assertRaises(IntegrityError):\n+                    # This should raise an IntegrityError as the foreign key check fails\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n \n     def test_django_date_trunc(self):\n         \"\"\"\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..e50f302 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,11 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import mock\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from io import StringIO\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..3fe6ca9 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -9,7 +10,7 @@ from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n \n-from .test_base import MigrationTestBase\n+from importlib import import_module\n \n \n class RecorderTests(TestCase):\n@@ -512,8 +513,35 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n-\n-class PycLoaderTests(MigrationTestBase):\n+class FrozenEnvironmentTests(TestCase):\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_loading_regular_package_without__file__(self):\n+        \"\"\"\n+        To support frozen environments, MigrationLoader loads migrations from\n+        regular packages with no __file__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n+        loader = MigrationLoader(connection)\n+        # Preserve original state\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        try:\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            # Restore original state\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n \n     def test_valid(self):\n         \"\"\"\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..e0903d7 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -16,6 +16,8 @@ from django.test import (\n )\n from django.test.utils import isolate_apps\n \n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n from ..models import Author, Item, Object, Square\n \n try:\n@@ -36,7 +38,22 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_supported(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n+\n+    def test_check_sqlite_version_supported_higher(self):\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 11, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.11.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..0961cf3 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -298,6 +298,19 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n+        # Additional test for ModelChoiceField with invalid choice value\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n         # ModelMultipleChoiceField\n         e = {\n             'required': 'REQUIRED',\n@@ -307,4 +320,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..fb93284 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -7,6 +8,7 @@ from django.test import TestCase\n from django.utils.translation import gettext_lazy\n \n from .models import (\n+    ParentStringPrimaryKey, ChildStringPrimaryKeyParent,\n     Article, Category, Child, ChildNullableParent, City, Country, District,\n     First, Parent, Record, Relation, Reporter, School, Student, Third,\n     ToFieldChild,\n@@ -549,7 +551,31 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+class NonNumericPrimaryKeyTests(TestCase):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'jeff'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_with_predefined_primary_key(self):\n+        parent = ParentStringPrimaryKey(name='jeff')\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_with_unsaved_parent(self):\n+        parent = ParentStringPrimaryKey(name='jeff')\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        with self.assertRaises(IntegrityError):\n+            child.save()\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..be8a779 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -220,6 +223,22 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that MyAutoField correctly wraps the id in MyWrapper on create.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that MyAutoField correctly wraps the id in MyWrapper on bulk_create.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n     # SQLite lets objects be saved with an empty primary key, even though an\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..8b1d0f4 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,28 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        \"\"\"\n+        Test that no file is yielded more than once during post_process.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(\n+            clear=False,\n+            dry_run=False,\n+            post_process=True,\n+            use_default_ignore_patterns=True,\n+            ignore_patterns=['*.ignoreme'],\n+        )\n+        stats = collectstatic_cmd.collect()\n+\n+        # No file should be yielded twice.\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n+        # Additional checks to ensure no duplicate processing\n+        post_processed_files = stats['post_processed']\n+        for file in post_processed_files:\n+            self.assertEqual(post_processed_files.count(file), 1)\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +236,28 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        \"\"\"\n+        Test that no file is yielded more than once during post_process.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(\n+            clear=False,\n+            dry_run=False,\n+            post_process=True,\n+            use_default_ignore_patterns=True,\n+            ignore_patterns=['*.ignoreme'],\n+        )\n+        stats = collectstatic_cmd.collect()\n+\n+        # No file should be yielded twice.\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n+        # Additional checks to ensure no duplicate processing\n+        post_processed_files = stats['post_processed']\n+        for file in post_processed_files:\n+            self.assertEqual(post_processed_files.count(file), 1)\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..143c355 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -18,7 +19,25 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        import collections.abc\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet())\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_with_duplicates(self):\n+        # Even if duplicates are added, OrderedSet should only keep unique items\n+        s = OrderedSet([1, 2, 2, 3, 3, 3])\n+        reversed_s = reversed(s)\n+        self.assertEqual(list(reversed_s), [3, 2, 1])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..edf83eb 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,8 +1,9 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n from django.db.models import (\n-    CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n+    CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n from django.db.models.functions import Upper\n from django.test import TestCase\n@@ -387,7 +388,17 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n-    def test_order_by_f_expression_duplicates(self):\n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Test that Meta.ordering fields are not included in the GROUP BY clause.\n+        \"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n         \"\"\"\n         A column may only be included once (the first occurrence) so we check\n         to ensure there are no duplicates by inspecting the SQL.\n@@ -483,4 +494,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..9d8121f 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,4 +1,6 @@\n-from django.db.models import F, Q\n+\n+from django.db.models import F, Q, Exists, OuterRef\n+from .models import Tag, Company, Employee\n from django.test import SimpleTestCase\n \n \n@@ -35,7 +37,33 @@ class QTests(SimpleTestCase):\n         with self.assertRaisesMessage(TypeError, str(obj)):\n             q & obj\n \n-    def test_deconstruct(self):\n+    def test_deconstruct_exists(self):\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q = Q(Exists(tagged))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_exists_with_and(self):\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q = Q(Exists(tagged)) & Q(price__gt=F('discounted_price'))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, (\n+            Exists(tagged),\n+            ('price__gt', F('discounted_price')),\n+        ))\n+        self.assertEqual(kwargs, {'_connector': 'AND'})\n+\n+    def test_deconstruct_exists_with_or(self):\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q = Q(Exists(tagged)) | Q(price__gt=F('discounted_price'))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, (\n+            Exists(tagged),\n+            ('price__gt', F('discounted_price')),\n+        ))\n+        self.assertEqual(kwargs, {'_connector': 'OR'})\n         q = Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(path, 'django.db.models.Q')\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..3b7e0e8 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -66,7 +68,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +104,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..f123ab2 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,7 +166,23 @@ class TestIterModulesAndFiles(SimpleTestCase):\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -175,7 +191,23 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -190,7 +222,23 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n@@ -201,7 +249,23 @@ class TestChildArguments(SimpleTestCase):\n                     [exe_path, 'runserver']\n                 )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..b5bd902 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,6 +226,13 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n+    # Newlines, carriage returns, and tabs are not accepted in URLs.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..293000d 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,6 +1526,37 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.db.models import Q, Count\n+from .models import Author, Book, PropertyGroup, ManagementAgent\n+\n+class QObjectOrTests(TestCase):\n+    def setUp(self):\n+        # Setup initial data for testing\n+        self.management_agent = ManagementAgent.objects.create(name=\"Agent 1\")\n+        self.property_group1 = PropertyGroup.objects.create(name=\"Group 1\")\n+        self.property_group2 = PropertyGroup.objects.create(name=\"Group 2\")\n+        self.management_agent.property_groups.add(self.property_group1, self.property_group2)\n+\n+    def test_q_object_or_with_id_in(self):\n+        # This should work without error\n+        property_groups = PropertyGroup.objects.filter(managementagent=self.management_agent)\n+        queryset = ManagementAgent.objects.annotate(Count(\"property_groups\"))\n+        result = queryset.filter(\n+            Q(property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n+            | Q(property_groups__count=0)\n+        ).distinct()\n+        self.assertTrue(result.exists())\n+\n+    def test_q_object_or_with_in(self):\n+        # This should raise an error in the problematic version\n+        property_groups = PropertyGroup.objects.filter(managementagent=self.management_agent)\n+        queryset = ManagementAgent.objects.annotate(Count(\"property_groups\"))\n+        with self.assertRaises(ProgrammingError):\n+            queryset.filter(\n+                Q(property_groups__in=property_groups)\n+                | Q(property_groups__count=0)\n+            ).distinct()\n+\n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..826a428 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -89,7 +89,36 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n-    def test_options_charset(self):\n+    def test_options_non_deprecated_keys_preferred(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n         expected_args = [\n             'mysql',\n             '--user=someuser',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..b634aee 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2198,7 +2198,23 @@ class SchemaTests(TransactionTestCase):\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n-    @skipUnlessDBFeature('supports_expression_indexes')\n+    def test_unique_constraint_with_table_instance(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Simulate passing a Table instance instead of a string\n+        table_instance = Author._meta.db_table\n+        constraint = UniqueConstraint(fields=[table_instance], name='table_instance_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertIs(sql.references_table(table), True)\n+        self.assertIs(sql.references_column(table, table_instance), True)\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..db8c20a 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -453,8 +453,22 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n             2,\n         )\n \n+from django.test import override_settings\n+from django.core.management import call_command\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from io import StringIO\n+\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoPostProcessReplacedPathStorage')\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n \n-@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n+    def test_collectstatic_no_post_process_replaced_paths(self):\n+        stdout = StringIO()\n+        call_command('collectstatic', verbosity=1, interactive=False, stdout=stdout)\n+        self.assertIn('post-processed', stdout.getvalue())\n class TestCollectionNoneHashStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n \n",
  "django__django-14500": "",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..a1866e3 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,6 +115,31 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n+    def test_bulk_update_return_value(self):\n+        # Test with an empty list of objects\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+        # Create 2000 Note objects\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+        notes = list(Note.objects.all())\n+\n+        # Test with a list of 2000 objects\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+        # Test with duplicates in the list\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+        # Test with duplicates in different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n+\n     def test_update_primary_key(self):\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..9ef9af1 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -316,6 +316,28 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(formset.is_valid())\n         self.assertEqual([form.cleaned_data for form in formset.forms], [{'votes': 100, 'choice': 'Calexico'}, {}, {}])\n \n+    def test_formset_non_form_errors_css_class(self):\n+        \"\"\"\n+        Test that non-form errors in a formset have the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '2',\n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '0',\n+            'choices-1-choice': 'One',\n+            'choices-1-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n+\n     def test_formset_validate_max_flag(self):\n         \"\"\"\n         If validate_max is set and max_num is less than TOTAL_FORMS in the\n@@ -338,6 +360,25 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n \n+    def test_formset_non_form_errors_multiple(self):\n+        \"\"\"\n+        Test that multiple non-form errors in a formset are correctly rendered with the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',\n+            'drinks-INITIAL_FORMS': '0',\n+            'drinks-MIN_NUM_FORMS': '0',\n+            'drinks-MAX_NUM_FORMS': '0',\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n+\n     def test_formset_validate_min_flag(self):\n         \"\"\"\n         If validate_min is set and min_num is more than TOTAL_FORMS in the\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..7d2fe96 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,6 +2129,35 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n+    def test_datetime_clean_initial_callable_bound_field(self):\n+        \"\"\"\n+        Test that _clean_fields uses BoundField to access initial values.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned = form.cleaned_data['dt']\n+        bf = form['dt']\n+        self.assertEqual(cleaned, bf.initial)\n+\n+    def test_changed_data_with_bound_field(self):\n+        \"\"\"\n+        Test that changed_data uses BoundField to determine changes.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=False)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:46'})\n+        self.assertEqual(form.changed_data, ['dt'])\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45.123456'})\n+        self.assertEqual(form.changed_data, [])\n+\n     def test_help_text(self):\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..5bd1d16 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,8 +1,66 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n+class TestManyToManyRelHashable(TestCase):\n+    def test_m2m_through_fields_hashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # Check that no TypeError is raised due to unhashable 'list'\n+        try:\n+            Child.check()\n+        except TypeError as e:\n+            self.fail(f\"TypeError raised: {e}\")\n+\n+    def test_field_name_clash_with_m2m_through(self):\n+        class Parent(models.Model):\n+            clash_id = models.IntegerField()\n+\n+        class Child(Parent):\n+            clash = models.ForeignKey('Child', models.CASCADE)\n+\n+        class Model(models.Model):\n+            parents = models.ManyToManyField(\n+                to=Parent,\n+                through='Through',\n+                through_fields=['parent', 'model'],\n+            )\n+\n+        class Through(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE)\n+            model = models.ForeignKey(Model, models.CASCADE)\n+\n+        self.assertEqual(Child.check(), [\n+            Error(\n+                \"The field 'clash' clashes with the field 'clash_id' from \"\n+                \"model 'invalid_models_tests.parent'.\",\n+                obj=Child._meta.get_field('clash'),\n+                id='models.E006',\n+            )\n+        ])\n+\n from django.db import IntegrityError\n from django.test import TestCase\n+from django.db import models\n+from django.core.checks import Error\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..8311642 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,5 +1,8 @@\n+\n import json\n-from contextlib import contextmanager\n+import datetime\n+from django.test import TestCase\n+from .models import Question\n \n from django.contrib import admin\n from django.contrib.admin.tests import AdminSeleniumTestCase\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..fb75da6 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,8 +923,24 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n-\n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_non_set(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_as_set(self):\n+        # This should not raise an error\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_as_none(self):\n+        # This should not raise an error and should default to an empty set\n+        try:\n+            state = ProjectState(real_apps=None)\n+            self.assertEqual(state.real_apps, set())\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..4c8ac45 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,6 +195,15 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_to_child(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -235,6 +244,15 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_to_child(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..8ed7425 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,38 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to test readonly ForeignKey links for a given admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(chapter=chapter, language=language)\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,)))\n+        self.assertEqual(response.status_code, 200)\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links in a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom-admin')\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5a30801..55b3c81 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1171,6 +1171,9 @@ class ModelChoiceIteratorValue:\n             other = other.value\n         return self.value == other\n \n+    def __hash__(self):\n+        return hash(self.value)\n+\n \n class ModelChoiceIterator:\n     def __init__(self, field):\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..4304db7 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,28 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop_foreign_key(self):\n+        app_label = 'test_rmwdbtn_fk'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Horse', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "",
  "django__django-15037": "",
  "django__django-15103": "",
  "django__django-15104": "",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..3b27a57 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -368,6 +369,22 @@ class BaseTests:\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: '',\n+        constants.WARNING: '',\n+        constants.ERROR: 'bad',\n+        12: 'custom',\n+    })\n+    def test_override_settings_level_tags(self):\n+        self.assertEqual(base.LEVEL_TAGS, {\n+            constants.INFO: 'info',\n+            constants.DEBUG: '',\n+            constants.WARNING: '',\n+            constants.ERROR: 'bad',\n+            12: 'custom',\n+        })\n+\n     @override_settings_tags(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n@@ -375,6 +392,29 @@ class BaseTests:\n         constants.ERROR: 'bad',\n         29: 'custom',\n     })\n+\n+    def test_level_tags_revert_after_override(self):\n+        # Check initial LEVEL_TAGS\n+        initial_tags = base.LEVEL_TAGS.copy()\n+\n+        # Override settings\n+        with override_settings_tags(MESSAGE_TAGS={\n+            constants.INFO: 'info',\n+            constants.DEBUG: 'debug',\n+            constants.WARNING: 'warn',\n+            constants.ERROR: 'error',\n+            12: 'custom',\n+        }):\n+            self.assertEqual(base.LEVEL_TAGS, {\n+                constants.INFO: 'info',\n+                constants.DEBUG: 'debug',\n+                constants.WARNING: 'warn',\n+                constants.ERROR: 'error',\n+                12: 'custom',\n+            })\n+\n+        # Check LEVEL_TAGS reverted back to initial\n+        self.assertEqual(base.LEVEL_TAGS, initial_tags)\n     def test_custom_tags(self):\n         storage = self.get_storage()\n         storage.level = 0\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..980ada0 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,10 +30,42 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, BaseUser, Task\n )\n \n \n+class QuerySetAliasConflictTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Set up data for the tests\n+        cls.tag = Tag.objects.create(name='tag')\n+        cls.annotation_1 = Annotation.objects.create(tag=cls.tag)\n+        cls.annotation_2 = Annotation.objects.create(tag=cls.tag)\n+        cls.note = cls.annotation_1.notes.create(tag=cls.tag)\n+        cls.base_user_1 = BaseUser.objects.create(annotation=cls.annotation_1)\n+        cls.base_user_2 = BaseUser.objects.create(annotation=cls.annotation_2)\n+        cls.task = Task.objects.create(\n+            owner=cls.base_user_2, creator=cls.base_user_2, note=cls.note,\n+        )\n+\n+    def test_conflicting_aliases_during_combine(self):\n+        qs1 = self.annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=self.annotation_1.notes.all()) |\n+            Q(creator__note__in=self.annotation_1.notes.all())\n+        )\n+        self.assertSequenceEqual(qs1, [self.base_user_1])\n+        self.assertSequenceEqual(qs2, [self.base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [self.base_user_1, self.base_user_2])\n+\n+    def test_or_operation_with_different_order(self):\n+        # Additional test to ensure commutativity is handled\n+        qs1 = BaseUser.objects.filter(annotation=self.annotation_1)\n+        qs2 = BaseUser.objects.filter(annotation=self.annotation_2)\n+        self.assertCountEqual(qs1 | qs2, qs2 | qs1)\n+        self.assertCountEqual(qs1 | qs2, [self.base_user_1, self.base_user_2])\n+\n class Queries1Tests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..cd5ab9c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1775,7 +1775,33 @@ class ValueTests(TestCase):\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n \n-    def test_repr(self):\n+    def test_deconstruct_F(self):\n+        f_expression = F('field_name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_Value(self):\n+        value_expression = Value('test_value')\n+        path, args, kwargs = value_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Value')\n+        self.assertEqual(args, ('test_value',))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_Func(self):\n+        func_expression = Func('field_name', function='LOWER')\n+        path, args, kwargs = func_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Func')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {'function': 'LOWER'})\n+\n+    def test_deconstruct_Case(self):\n+        case_expression = Case(When(condition=True, then=Value('yes')), default=Value('no'))\n+        path, args, kwargs = case_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Case')\n+        self.assertEqual(args, (When(condition=True, then=Value('yes')),))\n+        self.assertEqual(kwargs, {'default': Value('no')})\n         tests = [\n             (None, 'Value(None)'),\n             ('str', \"Value('str')\"),\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..5cfe3eb 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,28 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_optimize_foo_together_operations(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are optimized into one.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together],\n+            [self.author_empty, self.book_foo_together_optimized]\n+        )\n+        # Right number/type of migrations?\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book',\n+            unique_together={('title', 'author')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book',\n+            index_together={('title', 'author')},\n+        )\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..39301c5 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -638,6 +638,21 @@ class SchemaTests(TransactionTestCase):\n             editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n+\n+    def test_add_nullable_o2o_field_with_default(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField with a default value.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True, default=None)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])  # Check if the field is nullable\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n \n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..8398c33 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -80,7 +80,20 @@ class BasicFieldTests(SimpleTestCase):\n         f = Foo._meta.get_field('a')\n         self.assertEqual(str(f), 'model_fields.Foo.a')\n \n-    def test_field_ordering(self):\n+    def test_hash_immutability_across_models(self):\n+        \"\"\"\n+        Test that the hash of a field remains the same even when used in different models.\n+        \"\"\"\n+        field = models.CharField(max_length=200)\n+        field_hash = hash(field)\n+\n+        class ModelA(models.Model):\n+            title = field\n+\n+        class ModelB(models.Model):\n+            name = field\n+\n+        self.assertEqual(field_hash, hash(field))\n         \"\"\"Fields are ordered based on their creation.\"\"\"\n         f1 = models.Field()\n         f2 = models.Field(auto_created=True)\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..ca9bfff 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,7 +204,30 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+from django.db.models import F\n+from .models import Note, SelfRef\n+\n+class BulkUpdateTests(TestCase):\n+    def test_f_expression(self):\n+        notes = [\n+            Note.objects.create(note='test_note', misc='test_misc')\n+            for _ in range(10)\n+        ]\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n+\n+    def test_f_expression_selfref(self):\n+        # Test case for the SelfRef model as described in the issue\n+        instances = [\n+            SelfRef.objects.create(name='test_name', c8='initial_value')\n+            for _ in range(10)\n+        ]\n+        for instance in instances:\n+            instance.c8 = F('name')\n+        SelfRef.objects.bulk_update(instances, ['c8'])\n+        self.assertCountEqual(SelfRef.objects.filter(c8='test_name'), instances)\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..9de5179 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,7 +1049,26 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n-    def test_rename_model(self):\n+    def test_rename_model_and_field_simultaneously(self):\n+        \"\"\"Test renaming a model and a field in a single step.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n             [self.author_with_book, self.book],\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..5eb8295 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,8 +1906,41 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import Manager\n+\n class FieldTransformTests(TestCase):\n \n+    def test_negated_empty_exists(self):\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_negated_exists_with_non_empty_queryset(self):\n+        manager = Manager.objects.create(name='test')\n+        other_manager = Manager.objects.create(name='other')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.filter(pk=other_manager.pk)) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_exists_with_empty_queryset(self):\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_exists_with_non_empty_queryset(self):\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.filter(pk=manager.pk)) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n     @classmethod\n     def setUpTestData(cls):\n         cls.sday = sday = datetime.date(2010, 6, 25)\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..d78e07f 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -25,6 +25,9 @@ from django.db.models import (\n     UUIDField,\n )\n from django.test import SimpleTestCase, TestCase, override_settings\n+from django.contrib import admin\n+from django.db.models import ForeignKey\n+from .models import Inventory\n from django.urls import reverse\n from django.utils import translation\n \n@@ -141,7 +144,16 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n         self.assertIsNone(ff.empty_label)\n \n-    def test_many_to_many(self):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..34aa357 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,28 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+from django.test import TestCase\n+from django.core import management\n+from .models import Author, Book\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def test_natural_key_dependencies(self):\n+        \"\"\"\n+        Natural keys with foreign keys in dependencies work in a multiple\n+        database setup.\n+        \"\"\"\n+        management.call_command(\n+            \"loaddata\",\n+            \"nk_with_foreign_key.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        obj = Book.objects.using(\"other\").get()\n+        self.assertEqual(obj.title, \"The Ring\")\n+        self.assertEqual(obj.author.name, \"JR Tolkien\")\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..02faa6d 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,6 +3961,53 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n+    def test_alter_field_choices_noop(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_integer_field_choices_noop(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"age\")\n+        new_field = IntegerField(\n+            choices=((1, \"One\"), (2, \"Two\")),\n+        )\n+        new_field.set_attributes_from_name(\"age\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_choices_noop_with_existing_data(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        Author.objects.create(name=\"Jane\")\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+        new_field.set_attributes_from_name(\"author\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, new_field, old_field, strict=True)\n+\n     def test_add_textfield_unhashable_default(self):\n         # Create the table\n         with connection.schema_editor() as editor:\n",
  "django__django-15569": "",
  "django__django-15572": "",
  "django__django-15731": "",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..7a5e4da 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,8 +1,11 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n \n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n@@ -74,6 +77,12 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n+    def test_get_format_lazy_time_format(self):\n+        self.assertEqual(get_format(gettext_lazy(\"TIME_FORMAT\")), \"P\")\n+\n+    def test_get_format_lazy_datetime_format(self):\n+        self.assertEqual(get_format(gettext_lazy(\"DATETIME_FORMAT\")), \"N j, Y, P\")\n+\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..81087f6 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -382,7 +382,29 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-        # Select related + filter on a related proxy of proxy field\n+from django.test import TestCase\n+from .models import CustomModel, ProxyCustomModel, AnotherModel\n+\n+class ProxyModelQuerySetTests(TestCase):\n+    def setUp(self):\n+        self.custom_model = CustomModel.objects.create(name=\"Test Name\")\n+        self.proxy_model = ProxyCustomModel.objects.create(name=\"Proxy Name\")\n+        self.another_model = AnotherModel.objects.create(custom=self.proxy_model)\n+\n+    def test_select_related_only_on_proxy_model(self):\n+        # This test case is designed to reproduce the issue described\n+        try:\n+            objs = list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+            self.assertEqual(len(objs), 1)\n+            self.assertEqual(objs[0].custom.name, \"Proxy Name\")\n+        except ValueError as e:\n+            self.fail(f\"Test failed due to unexpected ValueError: {e}\")\n+\n+    def test_select_related_only_on_concrete_model(self):\n+        # Control test to ensure the behavior works on concrete models\n+        objs = list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\").all())\n+        self.assertEqual(len(objs), 1)\n+        self.assertEqual(objs[0].custom.name, \"Proxy Name\")\n         resp = ProxyImprovement.objects.select_related().get(\n             associated_bug__summary__icontains=\"fix\"\n         )\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..60c9203 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,12 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_with_command(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..7b1bfe6 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,71 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+from django.test import SimpleTestCase\n+from django.utils.translation import override as translation_override\n+\n+class DecimalPrecisionTests(SimpleTestCase):\n+    def test_decimal_high_precision(self):\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+\n+    def test_decimal_no_precision_specified(self):\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\")),\n+            \"42.12345678901234567890\",\n+        )\n+\n+    def test_decimal_with_zero_precision(self):\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 0),\n+            \"42\",\n+        )\n+\n+    def test_decimal_with_negative_precision(self):\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), -2),\n+            \"42.12\",\n+        )\n+\n+    def test_decimal_with_large_negative_precision(self):\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), -20),\n+            \"42.12345678901234567890\",\n+        )\n+\n+    def test_decimal_with_large_positive_precision(self):\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 25),\n+            \"42.1234567890123456789000000\",\n+        )\n+\n+    def test_decimal_with_small_value(self):\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.000000000000000000123456789\"), 25),\n+            \"0.0000000000000000001234568\",\n+        )\n+\n+    def test_decimal_with_large_value(self):\n+        self.assertEqual(\n+            floatformat(Decimal(\"12345678901234567890.12345678901234567890\"), 40),\n+            \"12345678901234567890.1234567890123456789000000000000000000000\",\n+        )\n+\n+    def test_decimal_with_scientific_notation(self):\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.23E+10\"), 2),\n+            \"12300000000.00\",\n+        )\n+\n+    def test_decimal_with_zero(self):\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.0\"), 5),\n+            \"0.00000\",\n+        )\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n",
  "django__django-15930": "",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..5512bcf 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -556,7 +557,19 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_path_instance(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS cannot contain duplicate directories\n+        when using Path instances to avoid repeated fixture loading.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..01de955 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2406,6 +2406,11 @@ class CombinableTests(SimpleTestCase):\n             object() ^ Combinable()\n \n \n+from django.db.models import DecimalField, IntegerField, FloatField, AutoField\n+from django.db.models.expressions import CombinedExpression, Expression\n+from django.db.models.constants import Combinable\n+from django.test import SimpleTestCase\n+\n class CombinedExpressionTests(SimpleTestCase):\n     def test_resolve_output_field_number(self):\n         tests = [\n@@ -2416,7 +2421,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..f9d648c 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError, connection, models\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,6 +403,57 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Create test data\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Test atomicity when a DatabaseError is raised during log_change\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values should be preserved\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        # Test atomicity when a DatabaseError is raised after the first change\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values should be preserved\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n     def test_custom_paginator(self):\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..9335a8e 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,15 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_migrations_created(self):\n+        \"\"\"\n+        makemigrations --check should not create any migration files.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Ensure the migration directory is not created\n+            self.assertFalse(os.path.exists(tmpdir))\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..ff3b8ba 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory\n+import asyncio\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n@@ -106,7 +109,25 @@ class ViewTests(SimpleTestCase):\n             (SyncView, False),\n             (AsyncView, True),\n         ]\n+class HttpMethodNotAllowedTest(SimpleTestCase):\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n         for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n             with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n                 instance = view_cls()\n                 response = instance.options(None)\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..591395f 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,6 +25,7 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n \n from .models.custom_user import (\n@@ -892,7 +894,45 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_password_reset_link_with_different_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # Simulate accessing UserAdmin via a different to_field\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.uuid,),  # Assuming 'uuid' is a valid field\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..9a9f6dc 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,7 +1600,21 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n-    def test_runner_hostname(self):\n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_zero_ip_addr(self, *mocked_objects):\n+        self.output = StringIO()\n+        call_command(\n+            \"runserver\",\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n \n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..1a85b2f 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,6 +508,69 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n+from django.test import TestCase\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from django.utils.decorators import override_settings\n+from django.test import Client\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapTestsBase(TestCase):\n+    client = Client()\n+\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_sitemod_with_items(self):\n+        # Test case where there are items and lastmod is callable\n+        class TestModel:\n+            lastmod = None\n+\n+        class CallableLastmodWithItemsSitemap(Sitemap):\n+            location = \"/location/\"\n+\n+            def items(self):\n+                o1 = TestModel()\n+                o1.lastmod = datetime(2023, 1, 1)\n+                o2 = TestModel()\n+                o2.lastmod = datetime(2023, 2, 1)\n+                return [o1, o2]\n+\n+            def lastmod(self, obj):\n+                return obj.lastmod\n+\n+        sitemap = CallableLastmodWithItemsSitemap()\n+        latest_lastmod = sitemap.get_latest_lastmod()\n+        self.assertEqual(latest_lastmod, datetime(2023, 2, 1))\n+\n+    def test_non_callable_lastmod(self):\n+        # Test case where lastmod is not callable\n+        class NonCallableLastmodSitemap(Sitemap):\n+            location = \"/location/\"\n+            lastmod = datetime(2023, 3, 1)\n+\n+            def items(self):\n+                return [object()]\n+\n+        sitemap = NonCallableLastmodSitemap()\n+        latest_lastmod = sitemap.get_latest_lastmod()\n+        self.assertEqual(latest_lastmod, datetime(2023, 3, 1))\n+\n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..4897ee6 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,10 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class MixedCaseDbColumns(models.Model):\n+    unique_id = models.IntegerField(unique=True, db_column=\"UniqueID\")\n+    description = models.CharField(max_length=100, null=True, db_column=\"Description\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..8934e6a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..bbd3945 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,28 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_aware_datetime(self):\n+        now = timezone.now()\n+        past = now - datetime.timedelta(days=45)\n+        self.assertEqual(timesince(past, now), \"1\\xa0month, 2\\xa0weeks\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_naive_datetime(self):\n+        now = datetime.datetime.now()\n+        past = now - datetime.timedelta(days=45)\n+        with self.assertRaises(TypeError):\n+            timesince(past, now)\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..59cd7a8 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -481,6 +481,36 @@ class UtilsTests(SimpleTestCase):\n         for char in key:\n             self.assertIn(char, \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)\")\n \n+    def test_subparser_missing_argument(self):\n+        \"\"\"\n+        Test that missing a required argument in a subparser results in a\n+        user-friendly error message, not a stack trace.\n+        \"\"\"\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: the following arguments are required: bar\",\n+        )\n+\n+    def test_subparser_invalid_argument_type(self):\n+        \"\"\"\n+        Test that providing an invalid type for a subparser argument results in\n+        a user-friendly error message.\n+        \"\"\"\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"not_an_int\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'not_an_int'\",\n+        )\n+\n     def test_is_ignored_path_true(self):\n         patterns = (\n             [\"foo/bar/baz\"],\n",
  "django__django-16485": "",
  "django__django-16493": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..1b0b967 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n",
  "django__django-16560": "",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..a817e79 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1471,6 +1471,18 @@ class FormsFormsetTestCase(SimpleTestCase):\n             extra=2,\n         )\n         formset = ChoiceFormFormset()\n+\n+    def test_formset_empty_form_no_delete_field(self):\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(initial=None)\n+        self.assertNotIn(\"DELETE\", my_formset.empty_form.fields)\n         self.assertEqual(len(formset), 2)\n         self.assertNotIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..33c5b26 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,20 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_alter_field(self):\n+        # Test that multiple AlterField operations on the same field are reduced to the last one.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ],\n+            [\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ]\n+        )\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..c5343d8 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8456,15 +8456,486 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response, known_url, status_code=301, target_status_code=403\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            \"/prefix\" + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n+    def test_missing_slash_append_slash_true_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/prefix\" + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n-        response = self.client.get(known_url[:-1])\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n         self.assertRedirects(\n-            response, known_url, status_code=301, target_status_code=403\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n         )\n \n     @override_settings(APPEND_SLASH=True)\n-    def test_missing_slash_append_slash_true_script_name(self):\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8473,16 +8944,16 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n-        response = self.client.get(known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n         self.assertRedirects(\n             response,\n-            \"/prefix\" + known_url,\n+            f\"{known_url}?id=1\",\n             status_code=301,\n             fetch_redirect_response=False,\n         )\n \n-    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n-    def test_missing_slash_append_slash_true_force_script_name(self):\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8491,16 +8962,16 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n-        response = self.client.get(known_url[:-1])\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n         self.assertRedirects(\n             response,\n-            \"/prefix\" + known_url,\n+            f\"/prefix{known_url}?id=1\",\n             status_code=301,\n             fetch_redirect_response=False,\n         )\n \n     @override_settings(APPEND_SLASH=True)\n-    def test_missing_slash_append_slash_true_non_staff_user(self):\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n         user = User.objects.create_user(\n             username=\"user\",\n             password=\"secret\",\n@@ -8509,6 +8980,32 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(user)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(\n             response,\n@@ -8622,6 +9119,77 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8629,6 +9197,77 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=False)\n     def test_missing_slash_append_slash_false_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n@@ -8637,6 +9276,77 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..21cf404 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,21 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        \n+    def test_br_and_Z_mime_types(self):\n+        \"\"\"\n+        Test that .br and .Z files are assigned the correct MIME types.\n+        \"\"\"\n+        test_tuples = (\n+            (\".br\", \"application/x-brotli\"),\n+            (\".Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..bc0283e 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,35 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..444c740 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,30 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_ordering(self):\n+        \"\"\"\n+        Test that imports are ordered correctly in migration files.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Check that imports are sorted correctly\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..6bf36e4 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -337,6 +337,35 @@ class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = PersonWithHeight\n \n+    def test_post_init_connected_with_one_dimension(self):\n+        \"\"\"\n+        Test that post_init signal is connected when one dimension field is set.\n+        \"\"\"\n+        person_model_id = id(self.PersonModel)\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+\n+@skipIf(Image is None, \"Pillow is required to test ImageField\")\n+class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n+    \"\"\"\n+    Tests behavior of an ImageField with no dimension fields.\n+    \"\"\"\n+\n+    PersonModel = Person\n+\n+    def test_post_init_not_connected(self):\n+        \"\"\"\n+        Test that post_init signal is not connected when no dimension fields are set.\n+        \"\"\"\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldDimensionsFirstTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..c54cdef 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -798,8 +798,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n-                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n             )\n@@ -814,8 +815,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n-                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n+                \"not a callable, an attribute of 'CityInline', or an attribute of \"\n+                \"'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n             )\n",
  "django__django-16901": "",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..ea522cb 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -456,7 +456,28 @@ class WriterTests(SimpleTestCase):\n             \"default=datetime.date(1969, 11, 19))\",\n         )\n \n-    def test_serialize_nested_class(self):\n+    def test_serialize_nested_class_method_as_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertIn(\n+            \"default=migrations.test_writer.Profile.Capability.default\",\n+            string\n+        )\n         for nested_cls in [self.NestedEnum, self.NestedChoices]:\n             cls_name = nested_cls.__name__\n             with self.subTest(cls_name):\n@@ -1032,4 +1053,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..952683e 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,7 +641,24 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n-    def test_failing_migration(self):\n+    def test_makemigrations_does_not_call_allow_migrate_with_invalid_models(self):\n+        \"\"\"\n+        Test that makemigrations does not call allow_migrate with models\n+        that do not belong to the app being migrated.\n+        \"\"\"\n+        apps.register_model('migrations', UnicodeModel)\n+        apps.register_model('migrations2', UnserializableModel)\n+\n+        with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+            with mock.patch.object(TestRouter, 'allow_migrate', return_value=True) as allow_migrate:\n+                call_command('makemigrations', 'migrations', verbosity=0)\n+                # Check that allow_migrate is not called with models from 'migrations2'\n+                for call in allow_migrate.mock_calls:\n+                    _, call_args, call_kwargs = call\n+                    app_name = call_args[1]\n+                    model_name = call_kwargs['model_name']\n+                    if app_name == 'migrations':\n+                        self.assertNotEqual(model_name, 'UnserializableModel')\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..c415d3e 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,6 +297,27 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_iteration_empty(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_single_page(self):\n+        paginator = Paginator([1], 2)\n+        page_iterator = iter(paginator)\n+        with self.subTest(page=1):\n+            self.assertEqual([1], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n \n class ModelPaginationTests(TestCase):\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..3439114 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,35 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_with_different_range():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0.2, 0.8), density=True)\n+    assert bins[0] == 0.2\n+    assert bins[-1] == 0.8\n+\n+def test_hist_range_and_density_with_no_data():\n+    _, bins, _ = plt.hist([], \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_with_single_value():\n+    _, bins, _ = plt.hist([0.5], \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_with_weights():\n+    data = np.random.rand(10)\n+    weights = np.random.rand(10)\n+    _, bins, _ = plt.hist(data, \"auto\", range=(0, 1), density=True, weights=weights)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6395,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..11ac05d 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,20 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test inverting a log scale axis using its limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1), \"Failed to invert log scale axis using set_ylim\"\n+\n+    # Additional test: plot data and check if inversion is maintained\n+    x = np.linspace(0.1, 10, 100)\n+    y = np.linspace(1, 100, 100)\n+    ax.plot(x, y)\n+    assert ax.get_ylim() == (10, 1), \"Log scale axis inversion not maintained after plotting\"\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +952,20 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test inverting a log scale axis using its limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1), \"Failed to invert log scale axis using set_ylim\"\n+\n+    # Additional test: plot data and check if inversion is maintained\n+    x = np.linspace(0.1, 10, 100)\n+    y = np.linspace(1, 100, 100)\n+    ax.plot(x, y)\n+    assert ax.get_ylim() == (10, 1), \"Log scale axis inversion not maintained after plotting\"\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..b1fc83c 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,8 +6960,33 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_shared_axes_retick():\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without clearing\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure with clearing\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Check that the shared axes have the same limits and ticks\n+    for ax_ref, ax_test in zip(axs_ref.flat, axs_test.flat):\n+        assert ax_ref.get_xlim() == ax_test.get_xlim()\n+        assert ax_ref.get_ylim() == ax_test.get_ylim()\n+        assert ax_ref.get_xticks().tolist() == ax_test.get_xticks().tolist()\n+        assert ax_ref.get_yticks().tolist() == ax_test.get_yticks().tolist()\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..5812d09 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,19 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted. See #22640.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    import warnings\n+\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+        # Check that no warnings of type MatplotlibDeprecationWarning are emitted\n+        assert not any(issubclass(warning.category, MatplotlibDeprecationWarning) for warning in w)\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..186b002 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -919,6 +919,34 @@ def test_proportional_colorbars():\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n+import pytest\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, expected_segments\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, expected_segments):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), expected_segments))\n+\n def test_negative_boundarynorm():\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..264ac94 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -489,8 +489,25 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n     else:\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+import pytest\n \n-def test_keymaps():\n+def test_no_backend_reset_rccontext():\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n+def test_get_backend_does_not_clear_figures():\n+    # Test to ensure that get_backend() does not clear figures created under rc_context\n+    with rc_context():\n+        fig2 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, f'Figures were cleared: \\nBefore: {before}\\nAfter: {after}'\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..39a035d 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,6 +15,17 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n+\n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+    ax_ref.scatter(1, 1, 1)\n+    ax_ref.set_visible(True)\n \n \n mpl3d_image_comparison = functools.partial(\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..c9fae4f 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -156,8 +156,69 @@ def test_negative_rect():\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib.patches import Rectangle, Ellipse\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_draw(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                                                linestyle=(0, [6, 6]))\n+    # fill the line gaps using a linestyle (0, [0, 6, 6, 0]), which is\n+    # equivalent to (6, [6, 6]) but has 0 dash offset\n+    rect_ref2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                                            linestyle=(0, [0, 6, 6, 0]))\n+    assert rect_ref.get_linestyle() == (0, [6, 6])\n+    assert rect_ref2.get_linestyle() == (0, [0, 6, 6, 0])\n+\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Check that the dash offset of the rect is the same if we pass it in the\n+    # init method and if we create two rects with appropriate onoff sequence\n+    # of linestyle.\n+\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                                                    linestyle=(0, [6, 6]))\n+    rect_test2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                                                    linestyle=(6, [6, 6]))\n+    assert rect_test.get_linestyle() == (0, [6, 6])\n+    assert rect_test2.get_linestyle() == (6, [6, 6])\n+\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_ellipse_draw(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n \n-@image_comparison(['clip_to_bbox'])\n+    center = (0.5, 0.5)\n+    width, height = (0.4, 0.2)\n+    ellipse_ref = Ellipse(center, width, height, linewidth=3, edgecolor='b',\n+                                                linestyle=(0, [6, 6]))\n+    ellipse_ref2 = Ellipse(center, width, height, linewidth=3, edgecolor='r',\n+                                            linestyle=(6, [6, 6]))\n+    assert ellipse_ref.get_linestyle() == (0, [6, 6])\n+    assert ellipse_ref2.get_linestyle() == (6, [6, 6])\n+\n+    ax_ref.add_patch(ellipse_ref)\n+    ax_ref.add_patch(ellipse_ref2)\n+\n+    ellipse_test = Ellipse(center, width, height, linewidth=3, edgecolor='b',\n+                                                    linestyle=(0, [6, 6]))\n+    ellipse_test2 = Ellipse(center, width, height, linewidth=3, edgecolor='r',\n+                                                    linestyle=(6, [6, 6]))\n+    assert ellipse_test.get_linestyle() == (0, [6, 6])\n+    assert ellipse_test2.get_linestyle() == (6, [6, 6])\n+\n+    ax_test.add_patch(ellipse_test)\n+    ax_test.add_patch(ellipse_test2)\n def test_clip_to_bbox():\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..e28273e 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,22 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+def test_stackplot_does_not_change_cycler():\n+    fig, ax = plt.subplots()\n+    # Initial color from cycler\n+    initial_color = next(ax._get_lines.prop_cycler)['color']\n+    \n+    # Use stackplot with color aliases\n+    x = np.array([1, 2, 3])\n+    y = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    ax.stackplot(x, y, colors=['C0', 'C1', 'C2'])\n+    \n+    # Check if the cycler color is unchanged\n+    final_color = next(ax._get_lines.prop_cycler)['color']\n+    assert initial_color == final_color, \"Color cycler was changed by stackplot\"\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..04c76a8 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -327,7 +327,26 @@ def test_zorder():\n     assert OffsetBox(zorder=42).zorder == 42\n \n \n-def test_arrowprops_copied():\n+@pytest.mark.parametrize(\"align, expected_y_height\", [\n+    (\"bottom\", 0),\n+    (\"top\", 10),  # Assuming the height difference is 10\n+])\n+def test_hpacker_align_top_bottom(align, expected_y_height):\n+    fig = plt.figure(dpi=72)\n+    x1, y1 = 10, 20\n+    x2, y2 = 10, 30\n+    r1 = DrawingArea(x1, y1)\n+    r2 = DrawingArea(x2, y2)\n+\n+    hpacker = HPacker(children=[r1, r2], pad=0, sep=0, align=align)\n+    renderer = fig.canvas.get_renderer()\n+\n+    # HPacker\n+    *extents, offset_pairs = hpacker.get_extent_offsets(renderer)\n+    # width, height, xdescent, ydescent\n+    assert_allclose((x1 + x2, max(y1, y2), 0, 0), extents)\n+    # internal element placement\n+    assert_allclose([(0, expected_y_height), (x1, 0)], offset_pairs)\n     da = DrawingArea(20, 20, 0, 0, clip=True)\n     arrowprops = {\"arrowstyle\": \"->\", \"relpos\": (.3, .7)}\n     ab = AnnotationBbox(da, [.5, .5], xybox=(-0.2, 0.5), xycoords='data',\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..df8a61f 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,7 +576,40 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n-    plt.rcParams[\"svg.fonttype\"] = \"none\"\n+def test_multiple_annotationbbox_gid():\n+    # Test that multiple AnnotationBbox objects with different gids\n+    # appear correctly in the SVG output.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy1 = (0.3, 0.55)\n+    xy2 = (0.6, 0.75)\n+\n+    imagebox1 = OffsetImage(arr_img, zoom=0.1)\n+    imagebox1.image.axes = ax\n+    ab1 = AnnotationBbox(imagebox1, xy1, xybox=(120., -80.), xycoords='data',\n+                         boxcoords=\"offset points\", pad=0.5,\n+                         arrowprops=dict(arrowstyle=\"->\",\n+                                         connectionstyle=\"angle,angleA=0,angleB=90,rad=3\"))\n+    ab1.set_gid(\"gid_1\")\n+    ax.add_artist(ab1)\n+\n+    imagebox2 = OffsetImage(arr_img, zoom=0.1)\n+    imagebox2.image.axes = ax\n+    ab2 = AnnotationBbox(imagebox2, xy2, xybox=(120., -80.), xycoords='data',\n+                         boxcoords=\"offset points\", pad=0.5,\n+                         arrowprops=dict(arrowstyle=\"->\",\n+                                         connectionstyle=\"angle,angleA=0,angleB=90,rad=3\"))\n+    ab2.set_gid(\"gid_2\")\n+    ax.add_artist(ab2)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected1 = '<g id=\"gid_1\">'\n+    expected2 = '<g id=\"gid_2\">'\n+    assert expected1 in buf\n+    assert expected2 in buf\n \n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..20a796f 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,19 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_deprecation_warnings(dtype):\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        cm(dtype(0))\n+    # Ensure no warnings are raised\n+    assert len(record) == 0\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..f0751b5 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,34 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+import matplotlib as mpl\n+import matplotlib.font_manager as mfont_manager\n+import numpy as np\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..34c02eb 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,29 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 4], label='quadratic')\n+    legend = ax.legend(draggable=True)\n+    \n+    # Pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Ensure 'FigureCanvasAgg' is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Unpickle the figure\n+    loaded_fig = pickle.loads(pkl)\n+    \n+    # Check that the legend is still draggable\n+    loaded_legend = loaded_fig.legends[0]\n+    assert loaded_legend.get_draggable() is True\n+\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..c8f2801 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -35,6 +35,27 @@ def test_simple():\n \n     plt.figure()\n     plt.bar(x=np.arange(10), height=np.arange(10))\n+\n+    # Test pickling a figure with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Align labels before pickling\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n+        print(\"Pickling successful\")\n+    except Exception as e:\n+        print(f\"Pickling failed: {e}\")\n     pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     fig = plt.figure()\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..744ff36 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,6 +991,84 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_zero_with_C_parameter(fig_test, fig_ref):\n+    # Test with mincnt=0 and C parameter\n+    datapoints = [\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=0,\n+    )\n+    ax_ref.set_facecolor(\"green\")\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n \n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..b04f698 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,51 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+from matplotlib import _api\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    # Original test case\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[1, 0], [2, 1]])\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_with_transform(fig_test, fig_ref):\n+    # Test case with a transformation applied\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[1, 0], [2, 1]])\n+    # Apply a simple translation transform\n+    transform = ax_ref.transData + plt.transforms.Affine2D().translate(1, 1)\n+    transformed_paths = [p.transformed(transform) for p in cs_ref.get_paths()]\n+    cs_test.set_paths(transformed_paths)\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_empty(fig_test, fig_ref):\n+    # Test case with empty paths\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[1, 0], [2, 1]])\n+    # Set empty paths\n+    cs_test.set_paths([])\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_different_lengths(fig_test, fig_ref):\n+    # Test case with different lengths of paths\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[1, 0], [2, 1]])\n+    # Set paths with different lengths\n+    paths = cs_ref.get_paths()\n+    cs_test.set_paths(paths[:1])  # Set only the first path\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..3beaab8 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -661,7 +661,54 @@ class TestPlotting:\n         Plot().plot()\n         assert m.n_splits == 0\n \n-    def test_single_split_single_layer(self, long_df):\n+import pytest\n+import matplotlib as mpl\n+from seaborn import Plot\n+from seaborn._core.scales import Nominal\n+\n+class TestNominalScale:\n+\n+    def test_nominal_x_axis_tweaks(self):\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_xlim() == (-.5, 2.5)\n+        assert not any(x.get_visible() for x in ax1.xaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(x=lim).plot()._figure.axes[0]\n+        assert ax2.get_xlim() == lim\n+\n+    def test_nominal_y_axis_tweaks(self):\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_ylim() == (2.5, -.5)\n+        assert not any(y.get_visible() for y in ax1.yaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(y=lim).plot()._figure.axes[0]\n+        assert ax2.get_ylim() == lim\n+\n+    def test_nominal_scale_with_different_data_types(self):\n+        # Test with integers\n+        p = Plot(x=[1, 2, 3], y=[4, 5, 6])\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_xlim() == (-.5, 2.5)\n+\n+        # Test with mixed data types\n+        p = Plot(x=[\"a\", 2, \"c\"], y=[1, \"b\", 3])\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_xlim() == (-.5, 2.5)\n+\n+    def test_nominal_scale_grid_behavior(self):\n+        # Ensure grid is not shown by default\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax = p.plot()._figure.axes[0]\n+        assert not any(x.get_visible() for x in ax.xaxis.get_gridlines())\n+\n+        # Test with grid forced by user\n+        with mpl.rc_context(rc={'axes.grid': True}):\n+            ax = p.plot()._figure.axes[0]\n+            assert not any(x.get_visible() for x in ax.xaxis.get_gridlines())\n \n         m = MockMark()\n         p = Plot(long_df, x=\"f\", y=\"z\").add(m).plot()\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..a0b1551 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,27 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n+\n+def test_valid_name_allowed(app, client):\n+    try:\n+        blueprint = flask.Blueprint(\"valid_name\", __name__)\n+    except ValueError:\n+        pytest.fail(\"Blueprint raised ValueError unexpectedly!\")\n+\n+def test_none_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(None, __name__)\n+\n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..9c13d77 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -12,10 +12,47 @@ This module implements the Requests API.\n \"\"\"\n \n from . import sessions\n+import requests\n+import os\n+import pytest\n \n \n def request(method, url, **kwargs):\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n+    \n+    def test_unicode_method_name(self):\n+        files = {'file': open('test_requests.py', 'rb')}\n+        r = requests.request(method=u'POST', url='http://httpbin.org/post', files=files)\n+        assert r.status_code == 200\n+\n+    def test_string_method_name(self):\n+        files = {'file': open('test_requests.py', 'rb')}\n+        r = requests.request(method='POST', url='http://httpbin.org/post', files=files)\n+        assert r.status_code == 200\n+\n+    def test_unicode_method_name_with_get(self):\n+        r = requests.request(method=u'GET', url='http://httpbin.org/get')\n+        assert r.status_code == 200\n+\n+    def test_string_method_name_with_get(self):\n+        r = requests.request(method='GET', url='http://httpbin.org/get')\n+        assert r.status_code == 200\n+\n+    def test_unicode_method_name_with_put(self):\n+        r = requests.request(method=u'PUT', url='http://httpbin.org/put', data={'key': 'value'})\n+        assert r.status_code == 200\n+\n+    def test_string_method_name_with_put(self):\n+        r = requests.request(method='PUT', url='http://httpbin.org/put', data={'key': 'value'})\n+        assert r.status_code == 200\n+\n+    def test_unicode_method_name_with_delete(self):\n+        r = requests.request(method=u'DELETE', url='http://httpbin.org/delete')\n+        assert r.status_code == 200\n+\n+    def test_string_method_name_with_delete(self):\n+        r = requests.request(method='DELETE', url='http://httpbin.org/delete')\n+        assert r.status_code == 200\n     Returns :class:`Response <Response>` object.\n \n     :param method: method for the new :class:`Request` object.\n",
  "psf__requests-1766": "",
  "psf__requests-1921": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 4ec0f7c..861993e 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -296,6 +296,39 @@ class Session(SessionRedirectMixin):\n         )\n         return p\n \n+    def test_headers_on_session_with_None_are_not_sent(self):\n+        \"\"\"Do not send headers in Session.headers with None values.\"\"\"\n+        ses = requests.Session()\n+        ses.headers['Accept-Encoding'] = None\n+        req = requests.Request('GET', 'http://httpbin.org/get')\n+        prep = ses.prepare_request(req)\n+        assert 'Accept-Encoding' not in prep.headers\n+\n+    def test_headers_on_request_override_session(self):\n+        \"\"\"Ensure request headers override session headers.\"\"\"\n+        ses = requests.Session()\n+        ses.headers['User-Agent'] = 'session-agent'\n+        req = requests.Request('GET', 'http://httpbin.org/get', headers={'User-Agent': 'request-agent'})\n+        prep = ses.prepare_request(req)\n+        assert prep.headers['User-Agent'] == 'request-agent'\n+\n+    def test_session_headers_are_sent(self):\n+        \"\"\"Ensure session headers are sent if not set to None.\"\"\"\n+        ses = requests.Session()\n+        ses.headers['Custom-Header'] = 'custom-value'\n+        req = requests.Request('GET', 'http://httpbin.org/get')\n+        prep = ses.prepare_request(req)\n+        assert prep.headers['Custom-Header'] == 'custom-value'\n+\n+    def test_removing_header_with_del(self):\n+        \"\"\"Ensure headers can be removed using del.\"\"\"\n+        ses = requests.Session()\n+        ses.headers['Accept-Encoding'] = 'gzip'\n+        del ses.headers['Accept-Encoding']\n+        req = requests.Request('GET', 'http://httpbin.org/get')\n+        prep = ses.prepare_request(req)\n+        assert 'Accept-Encoding' not in prep.headers\n+\n     def request(self, method, url,\n         params=None,\n         data=None,\n",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..4481a77 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,13 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://example.com..'),\n+            (InvalidURL, 'http://-example.com'),\n+            (InvalidURL, 'http://example-.com'),\n+            (InvalidURL, 'http://example.com-'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..75facba 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,31 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+import numpy as np\n+import pytest\n+from xarray import Variable\n+\n+def test_setitem_with_object_having_values_property():\n+    # Test case for issue: Variable.__setitem__ coercing types on objects with a values property\n+\n+    class HasValues:\n+        def __init__(self, value):\n+            self.values = value\n+\n+    # Create a Variable with dtype=object\n+    data = Variable(dims=(\"x\",), data=[None], dtype=object)\n+\n+    # Assign an instance of HasValues to the Variable\n+    obj = HasValues(5)\n+    data[0] = obj\n+\n+    # Verify that the object is stored correctly without coercion\n+    assert isinstance(data.values[0], HasValues)\n+    assert data.values[0].values == 5\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    # Also test with a set, which should not be coerced\n+    data[0] = set()\n+    assert isinstance(data.values[0], set)\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..b665720 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2069,7 +2069,15 @@ class TestDataset:\n \n             assert data.attrs['Test'] is not copied.attrs['Test']\n \n-    def test_copy_with_data(self):\n+    def test_copy_unicode_index(self):\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+        ds_copy = ds.copy(deep=True)\n+        assert ds.coords['x'].dtype == ds_copy.coords['x'].dtype\n+        assert ds.coords['y'].dtype == ds_copy.coords['y'].dtype\n+        assert ds.data_vars['z'].dtype == ds_copy.data_vars['z'].dtype\n         orig = create_test_data()\n         new_data = {k: np.random.randn(*v.shape)\n                     for k, v in orig.data_vars.items()}\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..7aa7622 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,7 +611,24 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n-    def test_check_for_impossible_ordering(self):\n+    def test_combine_non_monotonic_identical_coords(self):\n+        # Test that non-monotonic identical coordinates do not raise an error\n+        ycoord = ['a', 'c', 'b']\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data1)),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data2)),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected_data = np.concatenate([data1, data2], axis=0)\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], expected_data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n         with raises_regex(ValueError, \"does not have monotonic global indexes\"\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..97a716d 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,6 +2310,31 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+        from collections import OrderedDict\n+\n+        # Test case for a single quantile\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        out = da.quantile(0.9, dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}\n+\n+        # Test case for multiple quantiles\n+        da = xr.DataArray([0, 0, 1, 1], dims=\"x\", attrs={'description': 'test data'})\n+        out = da.quantile([0.25, 0.75], dim='x', keep_attrs=True)\n+        assert out.attrs == {'description': 'test data'}\n+\n+        # Test case with no attributes\n+        da = xr.DataArray([0, 0, 1, 1], dims=\"x\")\n+        out = da.quantile(0.5, dim='x', keep_attrs=True)\n+        assert out.attrs == {}\n+\n+        # Test case with keep_attrs=False\n+        da = xr.DataArray([0, 0, 1, 1], dims=\"x\", attrs={'units': 'K'})\n+        out = da.quantile(0.5, dim='x', keep_attrs=False)\n+        assert out.attrs == {}\n+\n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..345cbc9 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -5,7 +6,7 @@ import xarray as xr\n from xarray.core import dtypes, merge\n \n from . import raises_regex\n-from .test_dataset import create_test_data\n+from xarray.testing import assert_identical\n \n \n class TestMergeInternals:\n@@ -159,6 +160,29 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Basic test case\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n+        # Test with different data types\n+        da_float = xr.DataArray(data=1.0, name=\"c\")\n+        expected = xr.Dataset({\"a\": 0, \"b\": 1, \"c\": 1.0})\n+        assert_identical(ds.merge([da, da_float]), expected)\n+\n+        # Test with different dimensions\n+        da_2d = xr.DataArray(data=[[1, 2], [3, 4]], dims=(\"x\", \"y\"), name=\"d\")\n+        expected = xr.Dataset({\"a\": 0, \"b\": 1, \"d\": ((\"x\", \"y\"), [[1, 2], [3, 4]])})\n+        assert_identical(ds.merge([da, da_2d]), expected)\n+\n+        # Test with attributes\n+        da_with_attrs = xr.DataArray(data=1, name=\"e\", attrs={\"units\": \"meters\"})\n+        expected = xr.Dataset({\"a\": 0, \"b\": 1, \"e\": 1})\n+        expected[\"e\"].attrs[\"units\"] = \"meters\"\n+        assert_identical(ds.merge([da, da_with_attrs]), expected)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..6b18514 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,30 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_independence(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"b\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"c\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"a\"] = \"d\"\n+        assert ds1.attrs[\"a\"] == \"b\"\n+        assert ds2.attrs[\"a\"] == \"c\"\n+        assert ds3.attrs[\"a\"] == \"d\"\n+\n+    def test_merge_attrs_override_multiple(self):\n+        ds1 = xr.Dataset(attrs={\"key1\": \"value1\", \"key2\": \"value2\"})\n+        ds2 = xr.Dataset(attrs={\"key1\": \"value3\", \"key3\": \"value4\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"key1\"] = \"new_value\"\n+        assert ds1.attrs[\"key1\"] == \"value1\"\n+        assert ds3.attrs[\"key1\"] == \"new_value\"\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..8e4005c 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1916,6 +1916,28 @@ def test_dot_align_coords(use_dask) -> None:\n \n \n def test_where() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test with scalar values and attributes\n+    cond_scalar = xr.DataArray(True, attrs={\"attr\": \"cond_scalar\"})\n+    x_scalar = xr.DataArray(1, attrs={\"attr\": \"x_scalar\"})\n+    y_scalar = xr.DataArray(0, attrs={\"attr\": \"y_scalar\"})\n+    actual_scalar = xr.where(cond_scalar, x_scalar, y_scalar, keep_attrs=True)\n+    expected_scalar = xr.DataArray(1, attrs={\"attr\": \"x_scalar\"})\n+    assert_identical(expected_scalar, actual_scalar)\n+\n+    # Test with mixed types and attributes\n+    cond_mixed = xr.DataArray([True, False, True], dims=\"z\", attrs={\"attr\": \"cond_mixed\"})\n+    x_mixed = xr.DataArray([1.0, 2.0, 3.0], dims=\"z\", attrs={\"attr\": \"x_mixed\"})\n+    y_mixed = xr.DataArray([0.0, 0.0, 0.0], dims=\"z\", attrs={\"attr\": \"y_mixed\"})\n+    actual_mixed = xr.where(cond_mixed, x_mixed, y_mixed, keep_attrs=True)\n+    expected_mixed = xr.DataArray([1.0, 0.0, 3.0], dims=\"z\", attrs={\"attr\": \"x_mixed\"})\n+    assert_identical(expected_mixed, actual_mixed)\n     cond = xr.DataArray([True, False], dims=\"x\")\n     actual = xr.where(cond, 1, 0)\n     expected = xr.DataArray([1, 0], dims=\"x\")\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..7d0827c 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,8 +13,20 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+import numpy as np\n \n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"engine\", [\"netcdf4\", \"pydap\"])\n+def test_unsigned_attribute_handling(engine):\n+    url = \"https://observations.ipsl.fr/thredds/dodsC/EUREC4A/PRODUCTS/testdata/netcdf_testfiles/test_NC_BYTE_neg.nc\"\n+    ds = xr.open_dataset(url, engine=engine)\n+    test_var = ds['test']\n+    \n+    if engine == \"netcdf4\":\n+        expected_values = np.array([-128.0, -1.0, 0.0, 1.0, 2.0, np.nan, 127.0], dtype=np.float32)\n+    else:  # engine == \"pydap\"\n+        expected_values = np.array([128.0, 255.0, 0.0, 1.0, 2.0, np.nan, 127.0], dtype=np.float32)\n+    \n+    assert np.allclose(test_var.values, expected_values, equal_nan=True)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..ee6103a 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1919,6 +1919,23 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+    # Test case for issue: xr.where with scalar as second argument fails with keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    # Additional test case: using a scalar with keep_attrs=False\n+    actual = xr.where(cond, 1, 0, keep_attrs=False)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # Test case with scalar and non-empty attrs in condition\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n \n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n@@ -1928,6 +1945,23 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+    # Test case for issue: xr.where with scalar as second argument fails with keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    # Additional test case: using a scalar with keep_attrs=False\n+    actual = xr.where(cond, 1, 0, keep_attrs=False)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # Test case with scalar and non-empty attrs in condition\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..7310119 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,42 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([0, 10, 20, 30, 40, 50], dtype=\"timedelta64[s]\"), dims=\"x\"\n+            ),\n+            xr.DataArray(\n+                [\n+                    [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+                    [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+                    [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+                    [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+                    [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+                ],\n+                dims=(\"degree\", \"axis\"),\n+                coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+            ),\n+            xr.DataArray(\n+                [\n+                    [4447392.16, 1450539.74, 5299608.57],\n+                    [4505537.25588366, 1448882.82238152, 5250846.359196],\n+                    [4563174.92026797, 1446979.12250014, 5201491.44401733],\n+                    [4620298.31815291, 1444829.59596699, 5151549.377964],\n+                    [4676900.67053846, 1442435.23739315, 5101025.78153601],\n+                    [4732975.25442459, 1439797.08038974, 5049926.34223336],\n+                ],\n+                dims=(\"x\", \"axis\"),\n+            ),\n+            id=\"timedelta-complex\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..cba39e1 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,7 +221,18 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n-    def test_repr(self) -> None:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # regression test for issue with accessing chunks loading data\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = xr.open_dataset(url, engine='zarr')\n+        with pytest.raises(UnexpectedDataAccess):\n+            ds.load()  # Ensure data is not loaded\n+        with pytest.raises(UnexpectedDataAccess):\n+            ds['var1'].values  # Accessing values should not be possible without loading\n+        # Accessing chunks should not trigger data loading\n+        chunks = ds.chunks\n+        assert isinstance(chunks, dict)\n+        assert all(isinstance(v, tuple) for v in chunks.values())\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..27da6b4 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -49,7 +49,40 @@ class TestDataArrayRolling:\n                     expected.values[expected.values.nonzero()],\n                 )\n \n-    @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n+    @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    def test_rolling_iter_center(self, da, center, size) -> None:\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        assert len(rolling_obj.window_labels) == len(da[\"time\"])\n+        assert_identical(rolling_obj.window_labels, da[\"time\"])\n+\n+        for i, (label, window_da) in enumerate(rolling_obj):\n+            assert label == da[\"time\"].isel(time=i)\n+\n+            actual = rolling_obj_mean.isel(time=i)\n+            expected = window_da.mean(\"time\")\n+\n+            # Check if the center parameter is respected\n+            if center:\n+                # When centered, the window should be centered around the label\n+                expected_start = max(0, i - (size // 2))\n+                expected_stop = min(len(da[\"time\"]), i + (size // 2) + 1)\n+            else:\n+                # When not centered, the window should start at the label\n+                expected_start = max(0, i - size + 1)\n+                expected_stop = i + 1\n+\n+            expected_window = da.isel(time=slice(expected_start, expected_stop)).mean(\"time\")\n+\n+            assert_array_equal(actual.isnull(), expected_window.isnull())\n+            if (~actual.isnull()).sum() > 0:\n+                np.testing.assert_allclose(\n+                    actual.values[actual.values.nonzero()],\n+                    expected_window.values[expected_window.values.nonzero()],\n+                )\n     def test_rolling_repr(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..96d49e6 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,32 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import xarray as xr\n+import numpy as np\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"int64\", \"float64\", \"bool\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_stack_preserves_dtype_with_single_element():\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+    stacked = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked['a'].values.dtype\n+\n+def test_stack_preserves_dtype_with_multiple_elements():\n+    ds = xr.Dataset(coords={'a': np.array([0, 1, 2], dtype='i4')})\n+    stacked = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked['a'].values.dtype\n+\n+def test_stack_preserves_dtype_with_negative_values():\n+    ds = xr.Dataset(coords={'a': np.array([-1, 0, 1], dtype='i4')})\n+    stacked = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked['a'].values.dtype\n+\n+def test_stack_preserves_dtype_with_large_values():\n+    ds = xr.Dataset(coords={'a': np.array([0, 2147483647], dtype='i4')})\n+    stacked = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked['a'].values.dtype\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..211ffbb 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,30 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint import Run\n+import pytest\n+from _pytest.capture import CaptureFixture\n+from pathlib import Path\n+\n+EMPTY_MODULE = Path(__file__).parent / \"empty_module.py\"\n+\n+def test_short_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the -v flag does not expect an argument and behaves like --verbose.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+    assert \"No config file found, using default configuration\" in output.err\n+\n+def test_long_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the --verbose flag does not expect an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+    assert \"No config file found, using default configuration\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..c1a32db 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,39 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    def test_recursive_ignore(self):\n+        \"\"\"Test that files and directories are ignored in recursive mode.\"\"\"\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore=ignored_subdirectory\"],\n+            code=0,\n+        )\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore=failing.py\"],\n+            code=0,\n+        )\n+\n+    def test_recursive_ignore_patterns(self):\n+        \"\"\"Test that patterns are ignored in recursive mode.\"\"\"\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore-patterns=ignored_.*\"],\n+            code=0,\n+        )\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore-patterns=failing.*\"],\n+            code=0,\n+        )\n+\n+    def test_recursive_ignore_paths(self):\n+        \"\"\"Test that paths are ignored in recursive mode.\"\"\"\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore-paths=.*ignored.*\"],\n+            code=0,\n+        )\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore-paths=.*failing.*\"],\n+            code=0,\n+        )\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..f8da265 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,25 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self) -> None:\n+        \"\"\"Test that ignore-paths is respected when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..684a2ac 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -767,6 +767,28 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n \n             paths = [cwd, \"/custom_pythonpath\", *default_paths]\n             sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths\n+\n+            # New test cases to verify the fix\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove empty string from sys.path\"\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed to remove '.' from sys.path\"\n+\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths, \"Incorrectly removed non-cwd path from sys.path\"\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..44f2a56 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,7 +160,21 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n-def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n+def test_caplog_get_records_after_clear(caplog):\n+    \"\"\"Test that caplog.get_records() returns an empty list after caplog.clear() and captures new logs.\"\"\"\n+    logger = logging.getLogger()\n+\n+    # Log a message and verify it's captured\n+    logger.info(\"initial_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"initial_log\"]\n+\n+    # Clear the logs and verify get_records returns an empty list\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+\n+    # Log another message and verify it's captured after clearing\n+    logger.info(\"log_after_clear\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"log_after_clear\"]\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n     logger.info(\"a_call_log\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..9d4628d 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1273,6 +1273,36 @@ def test_pdb_teardown_skipped(\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+def test_pdb_teardown_skipped_for_unittest_skip_class(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"\n+    With --pdb, setUp and tearDown should not be called for tests skipped\n+    via a unittest.skip decorator on the class.\n+    \"\"\"\n+    tracked: List[str] = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skip(\"skipped for reasons\")\n+        class MyTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_1(self):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n \n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..4eeec87 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,9 +1051,11 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n-\n-@contextlib.contextmanager\n-def saved_fd(fd):\n+def test_capfd_sys_stdout_mode_no_binary(capfd):\n+    import sys\n+    # Capture the output\n+    with capfd.disabled():\n+        assert \"b\" not in sys.stdout.mode, \"sys.stdout.mode should not include 'b' when using capfd\"\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..204bf92 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,6 +178,30 @@ class TestMockDecoration:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n+    def test_mock_patch_with_numpy_array(self, testdir):\n+        pytest.importorskip(\"numpy\")\n+        testdir.makepyfile(\n+            \"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+\n+            class TestNumpyPatch:\n+                @patch('dummy.FOO', new=np.array([-5.5, 3.0]))\n+                def test_patch_numpy_array(self):\n+                    import dummy\n+                    assert (dummy.FOO == np.array([-5.5, 3.0])).all()\n+            \"\"\"\n+        )\n+        testdir.makepyfile(\n+            dummy=\"\"\"\n+            class Dummy:\n+                pass\n+            FOO = Dummy()\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n+\n     def test_mock(self, testdir):\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n",
  "pytest-dev__pytest-5809": "",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..6b045ff 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,21 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+\n+    def test_parametrized_name_with_dot_bracket(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def test_special_case(arg0):\n+                pass\n+            \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 1\n+        assert items[0].name == \"test_special_case[.[]\"\n+        assert items[0].getmodpath() == \"test_special_case[.[]\"\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..aac7037 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,22 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    import sys\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..3ff76b9 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,6 +1,8 @@\n+\n import sys\n \n import pytest\n+from _pytest.pytester import Testdir\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..b500a84 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -512,6 +512,12 @@ class TestCaptureFixture:\n                 capfd.close()\n             \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec.assertoutcome(passed=1)\n \n     def test_capfdbinary(self, testdir):\n@@ -526,6 +532,12 @@ class TestCaptureFixture:\n                 assert err == b''\n             \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec.assertoutcome(passed=1)\n \n     def test_capsysbinary(self, testdir):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..74055ac 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,6 +51,29 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n+def test_change_level_undos_handler_level(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..f381e79 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,4 +1,22 @@\n+\n import os\n+def test_collect_nested_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A nested symlinked directory is collected.\"\"\"\n+    # Create a directory with a test file\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    \n+    # Create a subdirectory with another test file\n+    subdir = dir.mkdir(\"subdir\")\n+    subdir.joinpath(\"test_sub.py\").write_text(\"def test_sub(): pass\", \"utf-8\")\n+    \n+    # Create a symlink to the subdirectory\n+    pytester.path.joinpath(\"symlink_subdir\").symlink_to(subdir)\n+    \n+    # Run pytest and check that all tests are collected\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n import pprint\n import sys\n import textwrap\n@@ -9,7 +27,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..8827911 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,33 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_setUpClass_fixture_visibility(pytester: Pytester) -> None:\n+    testpath = pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            def test_func1(self):\n+                pass\n+\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+        \"\"\"\n+    )\n+    # Run pytest with --fixtures and check that the fixture is not listed\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n+\n+    # Run pytest with --fixtures -v and check that the fixture is listed\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_MyTestCase*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..06fa22b 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,32 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n \n-def test_ridgecv_sample_weight():\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # with len(y.shape) == 2\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..52bb64c 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,15 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_fowlkes_mallows_score_large_values():\n+    # Test for overflow in fowlkes_mallows_score with large values\n+    labels_true = np.array([0] * 100000 + [1] * 100000)\n+    labels_pred = np.array([0] * 50000 + [1] * 50000 + [0] * 50000 + [1] * 50000)\n+    \n+    # This should not raise a RuntimeWarning and should return a valid score\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n+    assert 0 <= score <= 1\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..172a669 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,29 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_with_custom_vocabulary():\n+    # Custom vocabulary provided\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocab)\n \n-def test_vectorizer_max_features():\n+    # Ensure get_feature_names does not raise NotFittedError\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+\n+    # Transform a corpus and check the result\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = cv.transform(corpus)\n+    assert_equal(X.shape, (4, 9))\n+    assert_true(hasattr(cv, \"vocabulary_\"))\n+\n+    # Check that the vocabulary_ attribute is set correctly\n+    for idx, name in enumerate(feature_names):\n+        assert_equal(idx, cv.vocabulary_.get(name))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..72d7d62 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,7 +21,7 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n-\n+from sklearn.metrics.scorer import get_scorer\n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..56c4356 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,7 +167,22 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n-def test_repr():\n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    class MyEstimator:\n+        def __init__(self, empty=None):\n+            self.empty = empty\n+\n+        def get_params(self, deep=False):\n+            return {'empty': self.empty}\n+\n+    clf = MyEstimator(empty=StandardScaler)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n     repr(my_estimator)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..ebe2993 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,6 +5,26 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+@pytest.mark.parametrize('init_copy_X, fit_copy_X, expected', [\n+    (True, None, True),\n+    (False, None, False),\n+    (True, True, True),\n+    (False, False, False),\n+    (True, False, False),\n+    (False, True, True)\n+])\n+def test_lasso_lars_fit_copyX_none_behavior(init_copy_X, fit_copy_X, expected):\n+    \"\"\"\n+    Test that when copy_X is None in fit, it respects the initialization value.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+    assert expected == np.array_equal(X, X_copy)\n+\n import pytest\n \n from sklearn.model_selection import train_test_split\n@@ -18,7 +38,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..ae3e6f1 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -494,7 +494,25 @@ def test_shuffle_stratifiedkfold():\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+def test_stratifiedkfold_shuffle_behavior():\n+    # Test to ensure that shuffling within each class is working correctly\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    # Create StratifiedKFold instances with shuffle=True and different random states\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=43)\n+\n+    # Collect test indices for each fold\n+    test_indices_kf1 = [test_idx for _, test_idx in kf1.split(X, y)]\n+    test_indices_kf2 = [test_idx for _, test_idx in kf2.split(X, y)]\n+\n+    # Ensure that the test indices are different for different random states\n+    assert test_indices_kf1 != test_indices_kf2, \"Shuffling did not produce different test indices for different random states\"\n+\n+    # Check that each fold has a balanced representation of classes\n+    for test_idx in test_indices_kf1 + test_indices_kf2:\n+        assert len(set(y[test_idx])) == 2, \"Each fold should contain both classes\"\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..9a81aa6 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,15 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..a691c03 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..488c13b 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -504,6 +504,36 @@ def test_transform():\n     assert_array_almost_equal(eclf1.transform(X),\n                               eclf2.transform(X))\n     assert_array_almost_equal(\n-            eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n-            eclf2.transform(X)\n-    )\n+        eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n+        eclf2.transform(X)\n+    )\n+\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [\n+        (load_iris(return_X_y=True), VotingClassifier(\n+            estimators=[('lr', LogisticRegression()), ('rf', RandomForestClassifier(n_estimators=5))]\n+        )),\n+        (make_regression(n_samples=100, n_features=4, noise=0.1), VotingRegressor(\n+            estimators=[('lr', LinearRegression()), ('rf', RandomForestRegressor(n_estimators=5))]\n+        ))\n+    ]\n+)\n+def test_none_estimator_with_weights(X_y, voter):\n+    X, y = X_y\n+    # Check that an estimator can be set to None and passing some weight\n+    # Regression test for the issue\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+\n+def test_all_none_estimators():\n+    X, y = load_iris(return_X_y=True)\n+    voter = VotingClassifier(\n+        estimators=[('lr', None), ('rf', None)]\n+    )\n+    with pytest.raises(ValueError, match=\"All estimators are None. At least one is required!\"):\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..9fde198 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,31 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+def test_single_feature_export_text():\n+    # Test export_text with a single feature\n+    X_single = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single = [-1, -1, -1, 1, 1, 1]\n+    clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf.fit(X_single, y_single)\n+\n+    expected_report = dedent(\"\"\"\n+    |--- feature_0 <= 0.00\n+    |   |--- class: -1\n+    |--- feature_0 >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf) == expected_report\n+\n+    # Test with feature names\n+    expected_report_with_names = dedent(\"\"\"\n+    |--- single_feature <= 0.00\n+    |   |--- class: -1\n+    |--- single_feature >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n \n-def test_plot_tree_entropy(pyplot):\n+    assert export_text(clf, feature_names=['single_feature']) == expected_report_with_names\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..2b9b37a 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1553,8 +1553,31 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.l1_ratio_.shape == (n_classes,)\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_additional(penalty, multi_class):\n+    # Additional test for LogisticRegressionCV with refit=False to ensure no IndexError\n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+    n_classes = 3\n+    n_features = 20\n+    X, y = make_classification(n_samples=200, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=0)\n+\n+    Cs = np.logspace(-4, 4, 3)\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n+                                l1_ratios=l1_ratios, random_state=0,\n+                                multi_class=multi_class, refit=False)\n+    lrcv.fit(X, y)\n+    assert lrcv.C_.shape == (n_classes,)\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..0ce291c 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -30,4 +30,5 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n+    assert 'joblib' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..34b1c4e 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -78,7 +78,43 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n     assert_array_equal(labels, expected)\n \n \n-def test_extract_xi():\n+from sklearn.cluster import OPTICS\n+import numpy as np\n+from sklearn.utils import shuffle\n+from numpy.testing import assert_array_equal\n+\n+def test_optics_float_min_samples():\n+    # Test case for float min_samples\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 10\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    C4 = [-2, 3] + .3 * rng.randn(n_points_per_cluster, 2)\n+    C5 = [3, -2] + .6 * rng.randn(n_points_per_cluster, 2)\n+    C6 = [5, 6] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]]), C6))\n+    expected_labels = np.r_[[2] * 10, [0] * 10, [1] * 10, [3] * 10, [1] * 10,\n+                            -1, [4] * 10]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+    # Test with a different dataset and parameters\n+    X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]] * 2), C6))\n+    expected_labels = np.r_[[1] * 10, [3] * 10, [2] * 10, [0] * 10, [2] * 10,\n+                            -1, -1, [4] * 10]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    clust = OPTICS(min_samples=0.15, min_cluster_size=0.1,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.3).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..0c737f3 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,22 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the issue where sparse fit with empty support_vectors_\n+    # would cause a ZeroDivisionError\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..6f391f4 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,26 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n \n-def test_to_ascii():\n+    # Test case for the issue: NFKD form strings\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..3015a17 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,29 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n-\n-def test_get_support():\n+def test_preserve_dtypes_in_transformer():\n+    \"\"\"Test that transformers preserve dtypes when set_output is 'pandas'.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    from sklearn.feature_selection import SelectKBest, chi2\n+\n+    # Create a DataFrame with various dtypes\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"sepal length (cm)\": np.float32,\n+            \"sepal width (cm)\": np.float64,\n+        }\n+    )\n+    X[\"species\"] = y.astype(\"category\")\n+\n+    # Use a transformer that selects features without modifying them\n+    selector = SelectKBest(chi2, k=2).set_output(transform=\"pandas\")\n+    X_out = selector.fit_transform(X, y)\n+\n+    # Check that the dtypes are preserved\n+    for name, dtype in X_out.dtypes.items():\n+        assert dtype == X.dtypes[name], f\"Expected dtype {X.dtypes[name]} for column {name}, but got {dtype}\"\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..992849a 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -331,6 +331,33 @@ def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n     model = IsolationForest()\n+\n+def test_iforest_preserve_feature_names_varied_contamination():\n+    \"\"\"Check that feature names are preserved for various contamination values.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(42)\n+\n+    # Test with different contamination values\n+    for contamination in [0.1, 0.2, 0.3]:\n+        X = pd.DataFrame(data=rng.randn(10, 2), columns=[\"feature1\", \"feature2\"])\n+        model = IsolationForest(random_state=0, contamination=contamination)\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", UserWarning)\n+            model.fit(X)\n+\n+def test_iforest_preserve_feature_names_different_shapes():\n+    \"\"\"Check that feature names are preserved for different DataFrame shapes.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(24)\n+\n+    # Test with different DataFrame shapes\n+    for n_samples, n_features in [(5, 1), (10, 3), (20, 5)]:\n+        X = pd.DataFrame(data=rng.randn(n_samples, n_features), \n+                         columns=[f\"feature{i}\" for i in range(n_features)])\n+        model = IsolationForest(random_state=0, contamination=0.1)\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", UserWarning)\n+            model.fit(X)\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +365,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..fb5911f 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,26 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    assert new_score < initial_score\n+\n+def test_sequential_feature_selector_with_custom_cv():\n+    \"\"\"Test SequentialFeatureSelector with a custom CV generator.\"\"\"\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+    from sklearn.neighbors import KNeighborsClassifier\n+    from sklearn.model_selection import LeaveOneGroupOut\n+    import numpy as np\n+\n+    X, y = make_classification(random_state=0)\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2:] = 1\n+\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    knc = KNeighborsClassifier(n_neighbors=5)\n+    sfs = SequentialFeatureSelector(knc, n_features_to_select=5, cv=splits)\n+    sfs.fit(X, y)\n+\n+    # Check that the number of features selected is as expected\n+    assert sfs.get_support().sum() == 5\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..c874184 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -13,6 +13,49 @@ from sklearn.utils._testing import assert_array_equal\n from sklearn.utils._testing import assert_allclose_dense_sparse\n from sklearn.utils._testing import assert_almost_equal\n \n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for #26306.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+def test_remainder_set_output_with_different_transformers():\n+    \"\"\"Check that the output is set correctly when using different transformers\n+    for the remainder and specific columns.\"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        (VarianceThreshold(), make_column_selector(dtype_exclude=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.compose import (\n     ColumnTransformer,\n@@ -22,6 +65,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n+import pandas as pd\n+import pytest\n+import numpy as np\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..b6fcb89 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,6 +251,22 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_dedent_and_prepend_with_indentation(literal_inc_path):\n+    # Test case for issue with prepend and indentation\n+    options = {\n+        'lines': '9-11',\n+        'dedent': 2,\n+        'prepend': '    <plugin>',\n+        'append': '</plugin>'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"    <plugin>\\n\"\n+                       \"  def baz():\\n\"\n+                       \"      pass\\n\"\n+                       \"\\n\"\n+                       \"</plugin>\\n\")\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..09130d2 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +10,34 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n+\n+def test_Catalog_unique_locations():\n+    catalog = Catalog()\n+    # Add messages with duplicate locations\n+    catalog.add('duplicate', MsgOrigin('/path/to/duplicate', 1))\n+    catalog.add('duplicate', MsgOrigin('/path/to/duplicate', 1))\n+    catalog.add('duplicate', MsgOrigin('/path/to/duplicate', 2))\n+    catalog.add('duplicate', MsgOrigin('/path/to/duplicate', 2))\n+    catalog.add('duplicate', MsgOrigin('/path/to/duplicate', 3))\n+    catalog.add('duplicate', MsgOrigin('/path/to/duplicate', 3))\n+\n+    # Add a message with unique locations\n+    catalog.add('unique', MsgOrigin('/path/to/unique', 1))\n+    catalog.add('unique', MsgOrigin('/path/to/unique', 2))\n+\n+    # Verify the number of messages\n+    assert len(list(catalog)) == 2\n+\n+    # Verify the locations are unique\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'duplicate'\n+    assert sorted(msg1.locations) == sorted([('/path/to/duplicate', 1),\n+                                             ('/path/to/duplicate', 2),\n+                                             ('/path/to/duplicate', 3)])\n+    assert msg2.text == 'unique'\n+    assert sorted(msg2.locations) == sorted([('/path/to/unique', 1),\n+                                             ('/path/to/unique', 2)])\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..7296b4f 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -140,6 +140,34 @@ def test_glossary(app):\n     assert_node(doctree[0][0][2][1],\n                 [nodes.definition, nodes.paragraph, \"description\"])\n \n+    # Test for duplicate terms with different cases\n+    text_case_sensitive = (\".. glossary::\\n\"\n+                           \"\\n\"\n+                           \"   MySQL\\n\"\n+                           \"       A popular open-source database management system.\\n\"\n+                           \"\\n\"\n+                           \"   mysql\\n\"\n+                           \"       A command-line client for MySQL.\\n\")\n+\n+    # doctree\n+    doctree_case_sensitive = restructuredtext.parse(app, text_case_sensitive)\n+    assert_node(doctree_case_sensitive, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree_case_sensitive[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][0][1],\n+                [definition, nodes.paragraph, \"A popular open-source database management system.\"])\n+    assert_node(doctree_case_sensitive[0][0][1][1],\n+                [definition, nodes.paragraph, \"A command-line client for MySQL.\"])\n+\n     # index\n     objects = list(app.env.get_domain(\"std\").get_objects())\n     assert (\"term1\", \"term1\", \"term\", \"index\", \"term-term1\", -1) in objects\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..73a96b4 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -345,8 +345,18 @@ def test_signature_from_str_invalid():\n     with pytest.raises(SyntaxError):\n         inspect.signature_from_str('')\n \n+import pytest\n+from sphinx.util import inspect\n+from inspect import Parameter\n \n-def test_safe_getattr_with_default():\n+def test_signature_from_str_positional_only_with_defaults():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n     class Foo:\n         def __getattr__(self, item):\n             raise Exception\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..8a1a85b 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from importlib import import_module\n import pytest\n \n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n+from typing import TypeVar\n \n \n def test_MockModule():\n@@ -24,6 +26,16 @@ def test_MockModule():\n     assert isinstance(mock.attr1.attr2, _MockObject)\n     assert isinstance(mock.attr1.attr2.meth(), _MockObject)\n \n+    # Test for generically-typed classes\n+    T = TypeVar('T')\n+\n+    class SubClass2(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClass\"\"\"\n+\n+    obj2 = SubClass2()\n+    assert SubClass2.__doc__ == \"docstring of SubClass\"\n+    assert isinstance(obj2, SubClass2)\n+\n     assert repr(mock.some_attr) == 'mocked_module.some_attr'\n     assert repr(mock.some_method) == 'mocked_module.some_method'\n     assert repr(mock.attr1.attr2) == 'mocked_module.attr1.attr2'\n@@ -39,6 +51,16 @@ def test_MockObject():\n     assert isinstance(mock.attr1.attr2, _MockObject)\n     assert isinstance(mock.attr1.attr2.meth(), _MockObject)\n \n+    # Test for generically-typed classes\n+    T = TypeVar('T')\n+\n+    class SubClass2(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClass\"\"\"\n+\n+    obj2 = SubClass2()\n+    assert SubClass2.__doc__ == \"docstring of SubClass\"\n+    assert isinstance(obj2, SubClass2)\n+\n     class SubClass(mock.SomeClass):\n         \"\"\"docstring of SubClass\"\"\"\n \n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..15315b0 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -165,11 +166,33 @@ class SkipMemberTest(TestCase):\n                         SampleClass.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_doc(self):\n+        class SampleClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"SampleClass.__init__.DOCSTRING\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleClass.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_class_special_undoc(self):\n         self.assertSkip('class', '__special_undoc__',\n                         SampleClass.__special_undoc__, True,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_doc(self):\n+        class SampleClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"SampleClass.__init__.DOCSTRING\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleClass.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_private_doc(self):\n         self.assertSkip('exception', '_private_doc',\n                         SampleError._private_doc, False,\n@@ -185,6 +208,17 @@ class SkipMemberTest(TestCase):\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_doc(self):\n+        class SampleClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"SampleClass.__init__.DOCSTRING\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleClass.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_special_undoc(self):\n         self.assertSkip('exception', '__special_undoc__',\n                         SampleError.__special_undoc__, True,\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..b37bd9b 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,19 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    # Check for local links\n+    assert \"local-link\" in content\n+    assert \"doesntexist\" in content\n+    assert \"[broken] doesntexist\" in content\n+    assert len(content.splitlines()) >= 1  # Ensure at least one line for the local link check\n+\n import json\n import re\n from unittest import mock\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..91d9685 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -13,6 +14,33 @@ import pytest\n from test_ext_autodoc import do_autodoc\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_private_function,_another_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+        '.. py:function:: _another_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   _another_private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n",
  "sphinx-doc__sphinx-8120": "",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..ea7b68d 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,55 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_with_type_aliases(app: SphinxTestApp):\n+    (app.srcdir / 'types.py').write_text('''\n+from typing import Any, Dict\n+\n+JSONObject = Dict[str, Any]\n+\n+def sphinx_doc(data: JSONObject) -> JSONObject:\n+    \"\"\"Does it work.\n+\n+    Args:\n+        data: Does it args.\n+\n+    Returns:\n+        Does it work in return.\n+    \"\"\"\n+    return {}\n+''')\n+    (app.srcdir / 'conf.py').write_text('''\n+autodoc_typehints = 'description'\n+autodoc_type_aliases = {\n+    'JSONObject': 'types.JSONObject',\n+}\n+''')\n+    (app.srcdir / 'index.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('types.sphinx_doc(data)\\n'\n+            '\\n'\n+            '   Does it work.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      * **data** (*types.JSONObject*) --\\n'\n+            '         Does it args.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      Does it work in return.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      types.JSONObject\\n' in context)\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..f132e54 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,18 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum_in_signature():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    def func_with_enum_default(e: MyEnum = MyEnum.ValueA):\n+        pass\n+\n+    # We expect the object description to be \"MyEnum.ValueA\" without the value\n+    assert inspect.object_description(func_with_enum_default.__defaults__[0]) == \"MyEnum.ValueA\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..7cb5892 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -10,6 +10,8 @@\n \n import time\n from io import StringIO\n+import sys\n+from os import path\n \n import pytest\n \n@@ -241,7 +243,18 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n-def test_extensions(tempdir):\n+def test_exits_when_existing_confpy_in_source(monkeypatch):\n+    # Mock path.isfile to simulate conf.py existing in a subdirectory\n+    def mock_isfile(p):\n+        return p.endswith('source/conf.py')\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    qs.term_input = mock_input({\n+        'Please enter a new root path (or just Enter to exit)': ''\n+    })\n+    d = {}\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..6542379 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,25 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_property_type_annotation_cross_reference(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Check that the type annotation for the property 'end' is cross-referenced\n+    assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, (\": \", \n+                                                                        [pending_xref, \"Point\"])])],\n+                                   [desc_content, ()]))\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..ac27f3a 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,34 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_2d_to_2d():\n+    p1 = Point2D(1, 1)\n+    p2 = Point2D(4, 5)\n+    assert p1.distance(p2) == 5\n+\n+def test_distance_3d_to_3d():\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 6, 8)\n+    assert p1.distance(p2) == sqrt(50)\n+\n+def test_distance_2d_to_3d_with_zero():\n+    p1 = Point2D(1, 1)\n+    p2 = Point3D(4, 5, 0)\n+    assert p1.distance(p2) == 5\n+\n+def test_distance_3d_to_2d_with_zero():\n+    p1 = Point3D(1, 1, 0)\n+    p2 = Point2D(4, 5)\n+    assert p1.distance(p2) == 5\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..aad2793 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,34 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    assert f(f(2)).evalf() == Float(16)\n+\n+def test_evalf_recursive():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    h = implemented_function('h', lambda x: x + 1)\n+\n+    # Test nested function calls\n+    assert f(g(2)).evalf() == Float(16)  # f(2*2) = f(4) = 16\n+    assert g(f(2)).evalf() == Float(8)   # g(2^2) = g(4) = 8\n+\n+    # Test composition of multiple functions\n+    assert f(g(h(2))).evalf() == Float(36)  # f(g(2+1)) = f(g(3)) = f(6) = 36\n+    assert h(f(g(2))).evalf() == Float(17)  # h(f(4)) = h(16) = 17\n+\n+    # Test with zero and negative numbers\n+    assert f(g(0)).evalf() == Float(0)  # f(g(0)) = f(0) = 0\n+    assert f(g(-2)).evalf() == Float(16)  # f(g(-2)) = f(-4) = 16\n+\n+    # Test with floating point numbers\n+    assert f(g(2.5)).evalf() == Float(25)  # f(g(2.5)) = f(5) = 25\n+    assert g(f(1.5)).evalf() == Float(4.5)  # g(f(1.5)) = g(2.25) = 4.5\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..1ececec 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -72,7 +72,19 @@ def test_ZeroMatrix_doit():\n     assert isinstance(Znn.doit().rows, Mul)\n \n \n+from sympy import Symbol, MatrixSymbol, Identity, Sum, symbols\n+\n def test_Identity():\n+    # Test the sum of elements of an identity matrix\n+    n = Symbol('n', integer=True, positive=True)\n+    In = Identity(n)\n+    i, j = symbols('i j', integer=True)\n+\n+    # The sum of the diagonal elements should be n\n+    assert Sum(In[i, i], (i, 0, n-1)).doit() == n\n+\n+    # The total sum of all elements should also be n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     A = MatrixSymbol('A', n, m)\n     In = Identity(n)\n     Im = Identity(m)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..ecc3d08 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -335,6 +335,12 @@ def test_args():\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n         Permutation(((0, ), [1]))\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n+    # Test non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])  # Non-disjoint cycles\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1, 2], [2, 0]]) == Permutation([2, 0, 1])  # Overlapping cycles\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([1, 2, 0])  # Full cycle\n     assert Permutation([[1], [4, 2]]) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation([[1], [4, 2]], size=1) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation(\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex fa86bc3..693052a 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -1273,8 +1273,34 @@ def test_zeros_ones_fill():\n     assert zeros(2, 3) == Matrix(2, 3, [0]*6)\n     assert ones(2, 3) == Matrix(2, 3, [1]*6)\n \n-\n-def test_empty_zeros():\n+def test_matrix_hstack_vstack():\n+    # Test hstack with 0 x n matrices\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1)\n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    # Test hstack with 1 x n matrices\n+    M1 = Matrix.zeros(1, 0)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(1, 2)\n+    M4 = Matrix.zeros(1, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+    # Test vstack with n x 0 matrices\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(1, 0)\n+    M3 = Matrix.zeros(2, 0)\n+    M4 = Matrix.zeros(3, 0)\n+    assert Matrix.vstack(M1, M2, M3, M4).shape == (6, 0)\n+\n+    # Test vstack with n x 1 matrices\n+    M1 = Matrix.zeros(0, 1)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(2, 1)\n+    M4 = Matrix.zeros(3, 1)\n+    assert Matrix.vstack(M1, M2, M3, M4).shape == (6, 1)\n     a = zeros(0)\n     assert a == Matrix()\n     a = zeros(0, 2)\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..a55df6d 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -228,6 +228,18 @@ def test_evalf_bugs():\n     assert ((oo+oo*I).n() == S.Infinity + S.Infinity*I)\n \n     #issue 11518\n+\n+    # issue 13076\n+    from sympy import Mul, Max, NS, symbols\n+    x, y = symbols('x y')\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(Max(0, y), 2, evaluate=False).evalf()) == '2*Max(0, y)'\n+    assert NS(Mul(2, Max(0, y), evaluate=False).evalf()) == '2*Max(0, y)'\n+    assert NS(Mul(Max(0, y), 2.5, evaluate=False).evalf()) == '2.5*Max(0, y)'\n+    assert NS(Mul(2.5, Max(0, y), evaluate=False).evalf()) == '2.5*Max(0, y)'\n+    assert NS(Mul(Max(0, y), 0, evaluate=False).evalf()) == '0'\n+    assert NS(Mul(0, Max(0, y), evaluate=False).evalf()) == '0'\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n \n \n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..112c8a6 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,28 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+def test_coth_subs_issue():\n+    from sympy import coth, log, tan, Symbol, I, pi, sqrt\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    \n+    # Test the specific values mentioned in the issue\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n+\n+    # Additional test cases to ensure the fix does not break other functionality\n+    assert coth(log(tan(1))) == coth(log(tan(1)))\n+    assert coth(log(tan(pi/4))) == coth(log(tan(pi/4)))\n+    assert coth(log(tan(pi/2))) == coth(log(tan(pi/2)))\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..c35c2f4 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -167,6 +167,19 @@ def test_difference():\n \n def test_Complement():\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n+    \n+    # Test case for issue 12712\n+    from sympy import FiniteSet, Interval, Symbol\n+\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+        Complement(FiniteSet(x, y), Interval(-10, 10))\n+    \n+    # Additional test cases\n+    assert Complement(FiniteSet(x, 1, 2), Interval(0, 3)) == FiniteSet(x)\n+    assert Complement(FiniteSet(1, 2, 3), Interval(1, 2)) == FiniteSet(3)\n+    assert Complement(FiniteSet(x, y, 2, 3), Interval(2, 3)) == FiniteSet(x, y)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n                             FiniteSet(2, 3, 4)), Interval(1, 3)) == \\\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..c012ddf 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,29 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+\n+    # Create a 6x6 identity matrix\n+    M = eye(6)\n+\n+    # Create a 6x2 matrix filled with 2s\n+    V = 2 * ones(6, 2)\n+\n+    # Insert V into M at column index 3\n+    result = M.col_insert(3, V)\n+\n+    # Expected result after insertion\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..334b470 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -666,7 +666,12 @@ def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n \n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+def test_issue_13079():\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n@@ -678,6 +683,10 @@ def test_Poly_mul():\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n+from sympy import Poly, S, symbols\n+\n+x = symbols('x')\n+\n def test_Poly_sqr():\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..be4f8c5 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,22 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    # Test with a custom multiplication symbol\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+    \n+    # Test with other custom symbols\n+    assert latex(3*x**2*y, mul_symbol='*') == r\"3*x^{2}*y\"\n+    assert latex(3*x**2*y, mul_symbol='\\\\times') == r\"3\\times x^{2}\\times y\"\n+    \n+    # Test with no symbol (default behavior)\n+    assert latex(3*x**2*y) == \"3 x^{2} y\"\n+    \n+    # Test with one of the predefined symbols\n+    assert latex(3*x**2*y, mul_symbol='dot') == r\"3 \\cdot x^{2} \\cdot y\"\n+    assert latex(3*x**2*y, mul_symbol='times') == r\"3 \\times x^{2} \\times y\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..fdbfa81 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,20 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+def test_issue_13835():\n+    from sympy import symbols, Matrix\n+\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    \n+    # Test cases based on the issue description\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    assert M(3).det() == 0  # Simplified expected result\n+    assert M(4).det() == 0\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..985f5a7 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,8 +708,23 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n+from sympy import S, Piecewise, exp, sqrt, pi, asin, gamma, lowergamma, uppergamma, hyper, Rational\n+from sympy.stats import Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum, cdf, density\n \n def test_precomputed_cdf():\n+    # Test cases for precomputed CDFs\n+    assert cdf(Arcsin(\"x\", 0, 3))(1) == 2*asin(sqrt(1/3))/pi\n+    assert cdf(Dagum(\"x\", S(1)/3, S(1)/5, 2))(3) == Piecewise(((1 + (3/2)**(-S(1)/3))**(-S(1)/5), 3 >= 0), (0, True))\n+    assert cdf(Erlang(\"x\", 1, 1))(1) == lowergamma(1, 1)/gamma(1)\n+    assert cdf(Frechet(\"x\", S(4)/3, 1, 2))(3) == exp(-((-2 + 3)/1)**(-S(4)/3))\n+    assert cdf(Gamma(\"x\", 0.1, 2))(3) == lowergamma(0.1, 3/2)/gamma(0.1)\n+    assert cdf(GammaInverse(\"x\", S(5)/7, 2))(3) == uppergamma(S(5)/7, 2/3)/gamma(S(5)/7)\n+    assert cdf(Kumaraswamy(\"x\", S(1)/123, 5))(S(1)/3) == Piecewise((0, S(1)/3 < 0), (-(-S(1)/3**(S(1)/123) + 1)**5 + 1, S(1)/3 <= 1), (1, True))\n+    assert cdf(Laplace(\"x\", 2, 3))(5) == Piecewise((exp((-2 + 5)/3)/2, 2 > 5), (-exp((2 - 5)/3)/2 + 1, True))\n+    assert cdf(Logistic(\"x\", 1, 0.1))(2) == 1/(exp((1 - 2)/0.1) + 1)\n+    assert cdf(Nakagami(\"x\", S(7)/3, 1))(2) == lowergamma(S(7)/3, S(7)/3*2**2)/gamma(S(7)/3)\n+    assert cdf(StudentT(\"x\", 10))(2) == 1/2 + 2*gamma(10/2 + 1/2)*hyper((1/2, 10/2 + 1/2), (3/2,), -2**2/10)/(sqrt(pi)*sqrt(10)*gamma(10/2))\n+    assert cdf(UniformSum(\"x\", 5))(2) == Piecewise((0, 2 < 0), (Sum(binomial(5, k)*(-1)**k*(2 - k)**5, (k, 0, floor(2)))/120, 2 <= 5), (1, True))\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..2dff70a 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,9 +45,32 @@ def test_tensor_product_commutator():\n         TP(A, B)*TP(B, C) - TP(B, C)*TP(A, B)\n \n \n+from sympy import symbols\n+from sympy.physics.quantum import TensorProduct as TP, tensor_product_simp\n+from sympy.physics.paulialgebra import Pauli\n+\n+A, B, C, D = symbols('A,B,C,D', commutative=False)\n+\n def test_tensor_product_simp():\n+    # Original test case\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n+    # Test cases for powers of TensorProduct\n+    x = symbols('x')\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+    assert tensor_product_simp(x*(TP(A, B)**2)*TP(C, D)) == x*TP(A**2*C, B**2*D)\n+    assert tensor_product_simp(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n+\n+    # Additional test cases based on the issue description\n+    t1 = TP(1, 1) * TP(1, 1)\n+    assert tensor_product_simp(t1) == TP(1, 1)\n+    assert t1.expand(tensorproduct=True) == TP(1, 1)\n+\n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tensor_product_simp(t2) == TP(1, 1)\n+    assert t2.expand(tensorproduct=True) == TP(1, 1)\n+\n \n def test_issue_5923():\n     # most of the issue regarding sympification of args has been handled\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..f89c252 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -80,6 +80,8 @@ def test_python_keyword_function_name_escaping():\n \n \n def test_python_relational():\n+    # Test for correct code generation for Eq objects\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..da1b9f7 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -3,6 +3,7 @@ from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n+from sympy.physics.vector import ReferenceFrame, Vector\n \n Vector.simp = True\n A = ReferenceFrame('A')\n@@ -10,6 +11,11 @@ A = ReferenceFrame('A')\n \n def test_Vector():\n     assert A.x != A.y\n+    assert A.x + 0 == A.x  # Original test case\n+    assert A.x + (0 * A.x) == A.x  # New test case for issue\n+    assert A.x + (0 * A.y) == A.x  # New test case with different direction\n+    assert A.x + (0 * A.z) == A.x  # New test case with another direction\n+    assert sum([A.x, (0 * A.x)]) == A.x  # New test case using sum\n     assert A.y != A.z\n     assert A.z != A.x\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..1fe9ae0 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -40,6 +41,7 @@ def test_PythonCodePrinter():\n def test_MpmathPrinter():\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n+    assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n \n \n def test_NumPyPrinter():\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..4f0de4c 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -72,6 +73,21 @@ def test_ndim_array_initiation():\n     raises(ValueError, lambda: vector_with_long_shape[long(5)])\n \n     from sympy.abc import x\n+    # Test for rank-0 array (scalar)\n+    scalar_array = ImmutableDenseNDimArray(42)\n+    assert len(scalar_array) == 1  # Expecting length to be 1 for rank-0 array\n+    assert scalar_array.shape == ()\n+    assert scalar_array.rank() == 0\n+    assert scalar_array[()] == 42\n+    raises(ValueError, lambda: scalar_array[0])\n+\n+    # Test for rank-0 array with a symbolic element\n+    symbolic_scalar_array = ImmutableDenseNDimArray(Symbol('y'))\n+    assert len(symbolic_scalar_array) == 1  # Expecting length to be 1 for rank-0 array\n+    assert symbolic_scalar_array.shape == ()\n+    assert symbolic_scalar_array.rank() == 0\n+    assert symbolic_scalar_array[()] == Symbol('y')\n+    raises(ValueError, lambda: symbolic_scalar_array[0])\n     rank_zero_array = ImmutableDenseNDimArray(x)\n     assert len(rank_zero_array) == 0\n     assert rank_zero_array.shape == ()\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..bf50d39 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -23,6 +24,15 @@ def test_Rational():\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n+def test_Max_Min():\n+    # Test case for the specific issue with Max\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    # Additional test cases for Max and Min\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    assert mcode(Min(x, y, z)) == \"Min[x, y, z]\"\n+    assert mcode(Max(x, 2) * Min(y, 3)) == \"Max[x, 2]*Min[y, 3]\"\n+\n \n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..3797cd9 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,41 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix():\n+    \"\"\"Test the Quaternion.to_rotation_matrix() method for various cases.\"\"\"\n+    from sympy import symbols, cos, sin, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    x = symbols('x')\n+\n+    # Test case from the issue\n+    q1 = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    assert trigsimp(q1.to_rotation_matrix()) == Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]])\n+\n+    # Additional test case: 90-degree rotation around the z-axis\n+    q2 = Quaternion(cos(x/2), 0, 0, sin(x/2))\n+    assert trigsimp(q2.to_rotation_matrix()) == Matrix([\n+        [cos(x), -sin(x), 0],\n+        [sin(x),  cos(x), 0],\n+        [     0,       0, 1]])\n+\n+    # Additional test case: 180-degree rotation around the y-axis\n+    q3 = Quaternion(0, 0, sin(x/2), cos(x/2))\n+    assert trigsimp(q3.to_rotation_matrix()) == Matrix([\n+        [cos(x), 0, sin(x)],\n+        [     0, 1,      0],\n+        [-sin(x), 0, cos(x)]])\n+\n+    # Additional test case: 90-degree rotation around the x-axis\n+    q4 = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    assert trigsimp(q4.to_rotation_matrix()) == Matrix([\n+        [1,      0,       0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]])\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +154,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..d4db2d0 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,18 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional test cases for issue 15493\n+    assert Mod(6*i, 2) == 0  # 6*i is always even, so Mod(6*i, 2) should be 0\n+    assert Mod(9*i, 3) == 0  # 9*i is always divisible by 3, so Mod(9*i, 3) should be 0\n+    assert Mod(5*i, 5) == 0  # 5*i is always divisible by 5, so Mod(5*i, 5) should be 0\n+    assert Mod(7*i, 2) == Mod(i, 2)  # Similar simplification as the original issue\n+    assert Mod(3*i + 1, 2) == Mod(i + 1, 2)  # Check with an additional constant term\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..2010133 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -75,6 +75,18 @@ def test_Min():\n     assert Min(nn, oo) == nn\n     assert Min(oo, nn) == nn\n     assert Min(p, p) == p\n+    from sympy import Min, Max, S, Symbol, oo\n+\n+    # Test cases for zero-argument Min() and Max()\n+    assert Min() == S.Infinity\n+    assert Max() == S.NegativeInfinity\n+\n+    # Test cases for single-argument Min() and Max()\n+    x = Symbol('x')\n+    assert Min(x) == x\n+    assert Max(x) == x\n+\n+    # Existing test cases\n     assert Min(p, oo) == p\n     assert Min(oo, p) == p\n     assert Min(oo, oo) == oo\n@@ -152,6 +164,7 @@ def test_Max():\n     np_ = Symbol('np_', nonpositive=True)\n     r = Symbol('r', real=True)\n \n+    # Existing test cases\n     assert Max(5, 4) == 5\n \n     # lists\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..1af97c7 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,33 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n-\n-def test_issue_14392():\n+from sympy import I, simplify, symbols\n+\n+def test_issue_15873():\n+    # Original test case\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True\n+\n+    # Additional test cases\n+    e2 = (1 + I)**2 - 2*I\n+    assert e2.is_zero is None\n+    assert simplify(e2).is_zero is True\n+\n+    e3 = (1 + I)*(1 - I)\n+    assert e3.is_zero is False\n+    assert simplify(e3).is_zero is False\n+\n+    e4 = (1 + I)*(1 + I.conjugate())\n+    assert e4.is_zero is False\n+    assert simplify(e4).is_zero is False\n+\n+    e5 = (1 + I)*(1 - I) - 2\n+    assert e5.is_zero is None\n+    assert simplify(e5).is_zero is True\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..034005e 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,8 +477,39 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n-\n-def test_issue_5950():\n+from sympy import Symbol, posify, symbols\n+\n+def test_issue_16438():\n+    # Original test patch for issue 16438\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True, 'zero': False, 'imaginary': False,\n+        'nonpositive': False, 'commutative': True, 'hermitian': True,\n+        'real': True, 'nonzero': True, 'nonnegative': True,\n+        'negative': False, 'complex': True, 'finite': True, 'infinite': False\n+    }\n+\n+    # Additional test cases for other assumptions\n+    m = Symbol('m', integer=True)\n+    eq, rep = posify(m)\n+    assert eq.is_integer is True\n+\n+    n = Symbol('n', rational=True)\n+    eq, rep = posify(n)\n+    assert eq.is_rational is True\n+\n+    p = Symbol('p', prime=True)\n+    eq, rep = posify(p)\n+    assert eq.is_prime is True\n+\n+    e = Symbol('e', even=True)\n+    eq, rep = posify(e)\n+    assert eq.is_even is True\n+\n+    o = Symbol('o', odd=True)\n+    eq, rep = posify(o)\n+    assert eq.is_odd is True\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n     assert logcombine(log(x) - log(y)) == log(x/y)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..e7a04c2 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +37,12 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test for Indexed support in PythonCodePrinter\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..0de1d8c 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -48,6 +48,18 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n+def test_autowrap_cython_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n+\n def test_cython_wrapper_outarg():\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..9efec26 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,8 +248,23 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n+def test_encode_morse_numbers():\n+    # Test encoding of numbers to Morse code\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('0') == '-----'\n+    assert encode_morse('10') == '.----|-----'\n+    assert encode_morse('01') == '-----|.----'\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n \n def test_decode_morse():\n+    # Test decoding of Morse code to numbers\n+    assert decode_morse('.----') == '1'\n+    assert decode_morse('-----') == '0'\n+    assert decode_morse('.----|-----') == '10'\n+    assert decode_morse('-----|.----') == '01'\n+    assert decode_morse('.----|..---|...--|....-|.....') == '12345'\n+    assert decode_morse('-....|--...|---..|----.|-----') == '67890'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..97b3c04 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -176,7 +179,25 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n-def test_issue_5653():\n+def test_issue_12420():\n+    # Test case from the issue description\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr\n+\n+    # Additional test cases to ensure the function returns unchanged expressions\n+    expr2 = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(expr2) == expr2\n+\n+    # Test _sqrt_match function\n+    assert _sqrt_match(4 + I) == []\n+\n+    # Test with a simple expression that should remain unchanged\n+    expr3 = sqrt(2) + sqrt(3)\n+    assert sqrtdenest(expr3) == expr3\n+\n+    # Test with a more complex expression\n+    expr4 = sqrt(5 + sqrt(6 + sqrt(7)))\n+    assert sqrtdenest(expr4) == expr4\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..01866ee 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -91,6 +92,9 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    assert 5 * p4 == Point(5, 5)  # Test scalar multiplication with scalar on the left\n+    assert sympy.sympify(2.0) * p4 == Point(2.0, 2.0)  # Test with sympified scalar on the left\n+    assert p4 * sympy.sympify(2.0) == Point(2.0, 2.0)  # Test with sympified scalar on the right\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18189": "",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..9317fc1 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -675,6 +675,11 @@ def test_latex_derivatives():\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(Subs(x + y, (x,), (1,))) == r'\\left. \\left(x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(Subs(x - y, (x,), (1,))) == r'\\left. \\left(x - y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(Subs(x*y + z, (x, y), (1, 2))) == r'\\left. \\left(x y + z\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(Subs(x**2 + y**2, (x, y), (1, 2))) == r'\\left. \\left(x^{2} + y^{2}\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n def test_latex_integrals():\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..a9cc326 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -129,6 +130,24 @@ def test_subs_CondSet():\n     assert ConditionSet(f(x), f(x) < 1, {w, z}\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n+    # Additional test cases for issue with ConditionSet and ImageSet\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+    \n+    # Test substitution in ConditionSet with ImageSet\n+    assert cond_set.subs(y, S.One/3).dummy_eq(img2)\n+\n+    # Test substitution with simultaneous=True\n+    assert cond_set.subs({y: S.One/3}, simultaneous=True) == img2\n+\n+    # Test xreplace as an alternative to subs\n+    assert cond_set.xreplace({y: S.One/3}) == img2\n+\n+    # Test substitution in ImageSet directly\n+    assert img1.subs(y, S.One/3) == img2\n+\n \n def test_subs_CondSet_tebr():\n     with warns_deprecated_sympy():\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..9ff9b4a 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -473,7 +473,8 @@ def test_issue_4988_builtins():\n     assert exp1 == C  # Make sure it did not get mixed up with sympy.C\n \n     exp2 = sympify('C', vars)\n-    assert exp2 == C  # Make sure it did not get mixed up with sympy.C\n+from sympy import Symbol, Interval, Add, Mul, exp, sin, cos, Rational, S, Matrix\n+from sympy.abc import x, y\n \n \n def test_geometry():\n@@ -496,7 +497,23 @@ def test_kernS():\n         'x', '_kern')\n     ss = kernS(s)\n     assert ss != -1 and ss.simplify() == -1\n-    # issue 6687\n+    # Test for issue: 'kern' referenced before assignment\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+    \n+    # Additional test cases\n+    assert kernS(\"2*(x + y)\") == 2*(x + y)\n+    assert kernS(\"-(x + 1)\") == -(x + 1)\n+    assert kernS(\"x - (x - 1)\") != 1\n+    assert kernS(\"x - (x - 1)\").expand() == 1\n+    assert kernS(\"Interval(-1, -2 - 4*(-3))\") == Interval(-1, Add(-2, Mul(12, 1, evaluate=False), evaluate=False))\n+    assert kernS(\"E**-(x)\") == exp(-x)\n+    assert kernS(\"2*sin(x)**2 + 2*sin(x)*cos(x)\") == 2*sin(x)**2 + 2*sin(x)*cos(x)\n+    assert kernS(\"-(2*sin(x)**2 + 2*sin(x)*cos(x))*y/2\") == -y*(2*sin(x)**2 + 2*sin(x)*cos(x))/2\n+    assert kernS(\"(1 - x)/(1 - x*(1-y))\") == kernS(\"(1-x)/(1-(1-y)*x)\")\n+    assert kernS(\"(1-2**-(4+1)*(1-y)*x)\") == (1 - x*(1 - y)/32)\n+    assert kernS(\"(1-2**(4+1)*(1-y)*x)\") == (1 - 32*x*(1 - y))\n+    assert kernS(\"(1-2.*(1-y)*x)\") == 1 - 2.*x*(1 - y)\n+    assert kernS(['2*(x + y)*y', ('2*(x + y)*y',)]) == [2*(x + y)*y, (2*(x + y)*y,)]\n     assert (kernS('Interval(-1,-2 - 4*(-3))')\n         == Interval(-1, Add(-2, Mul(12, 1, evaluate=False), evaluate=False)))\n     assert kernS('_kern') == Symbol('_kern')\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..2087533 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -93,6 +94,8 @@ def test_identity():\n     assert isinstance(I, Operator)\n \n     assert I * O == O\n+    # Test case for the issue: Dagger(O) * IdentityOperator should simplify to Dagger(O)\n+    assert Dagger(O) * I == Dagger(O)\n     assert O * I == O\n     assert isinstance(I * I, IdentityOperator)\n     assert isinstance(3 * I, Mul)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..2f01986 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -900,6 +900,18 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 3 > 0\n \n+    # Test cases for the reported issue with DihedralGroup\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+    S = G.sylow_subgroup(3)\n+    assert G.order() % S.order() == 0\n+    assert G.order()/S.order() % 3 > 0\n+\n     G = AlternatingGroup(100)\n     S = G.sylow_subgroup(2)\n     assert G.order() % S.order() == 0\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..32c3a7d 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,8 +513,27 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n+def test_partitions_reuse():\n+    # Test that partitions do not reuse the same dictionary object\n+    partitions_list = list(partitions(6, k=2))\n+    for i in range(len(partitions_list) - 1):\n+        assert partitions_list[i] is not partitions_list[i + 1], \"Dictionaries should not be reused\"\n+\n+    # Test that partitions are correct after ensuring no reuse\n+    expected_partitions = [\n+        {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}\n+    ]\n+    assert [p.copy() for p in partitions(6, k=2)] == expected_partitions\n+\n+    # Test with size=True to ensure tuples are not reused\n+    partitions_with_size = list(partitions(6, k=2, size=True))\n+    for i in range(len(partitions_with_size) - 1):\n+        assert partitions_with_size[i][1] is not partitions_with_size[i + 1][1], \"Dictionaries should not be reused\"\n \n-def test_binary_partitions():\n+    expected_partitions_with_size = [\n+        (3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})\n+    ]\n+    assert [(M, p.copy()) for M, p in partitions(6, k=2, size=True)] == expected_partitions_with_size\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..1106dd4 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,37 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+def test_zero_comparisons():\n+    # Additional tests for zero comparisons\n+    assert (S(0.0) != S.false) is True\n+    assert (S.false != S(0.0)) is True\n+    assert (S(0) != S.false) is True\n+    assert (S.false != S(0)) is True\n+\n+    # Test with negative zero\n+    assert (S(-0.0) == S.false) is False\n+    assert (S.false == S(-0.0)) is False\n+    assert (S(-0.0) != S.false) is True\n+    assert (S.false != S(-0.0)) is True\n+\n+    # Test with other boolean values\n+    assert (S(0.0) == S.true) is False\n+    assert (S.true == S(0.0)) is False\n+    assert (S(0) == S.true) is False\n+    assert (S.true == S(0)) is False\n+\n+    # Test with non-zero float\n+    assert (S(1.0) == S.false) is False\n+    assert (S.false == S(1.0)) is False\n+    assert (S(1.0) != S.false) is True\n+    assert (S.false != S(1.0)) is True\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..557472e 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,6 +20,32 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # Test for issue with PolynomialError in subs with sinh and Piecewise\n+    from sympy.functions.elementary.hyperbolic import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    # Recreate the conditions of the issue\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    \n+    # This should not raise PolynomialError\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n+\n+    # Additional checks for similar expressions\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_cosh.subs({1: 1.0}) == expr_cosh.subs({1: 1.0})\n+\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_tanh.subs({1: 1.0}) == expr_tanh.subs({1: 1.0})\n+\n+    # Check without division by z\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_div.subs({1: 1.0}) == expr_no_div.subs({1: 1.0})\n+\n+    # Check without exp\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    assert expr_no_exp.subs({1: 1.0}) == expr_no_exp.subs({1: 1.0})\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..64eda15 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -162,7 +162,30 @@ def test_monomials():\n                     x*j**2, x*k**2, x*j*k, x**2*j**2*k**2, x*j*k**2, x**2, x**2*j*k**2\n             }\n \n-def test_monomial_count():\n+def test_itermonomials_with_min_degrees():\n+    from sympy import symbols\n+    from sympy.polys.monomials import itermonomials\n+\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+    expected_monomials = {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x1*x3**2, x1**2*x3, x2*x3**2, x2**2*x3, x1*x2*x3}\n+    assert set(itermonomials(states, max_degrees, min_degrees=min_degrees)) == expected_monomials\n+\n+    # Additional test cases\n+    x, y = symbols('x y')\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+\n+    i, j, k = symbols('i j k', commutative=False)\n+    assert set(itermonomials([i, j, k], 2, 2)) == {k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k}\n+    assert set(itermonomials([i, j, k], 3, 2)) == \\\n+        {j*k**2, i*k**2, k*i*j, k*i**2, k**2, j*k*j, k*j**2, i*k*i, i*j,\n+         j**2*k, i**2*j, j*i*k, j**3, i**3, k*j*i, j*k*i, j*i,\n+         k**2*j, j*i**2, k*j, k*j*k, i*j*i, j*i*j, i*j**2, j**2,\n+         k*i*k, i**2, j*k, i*k, i*k*j, k**3, i**2*k, j**2*i, k**2*i,\n+         i*j*k, k*i}\n     assert monomial_count(2, 2) == 6\n     assert monomial_count(2, 3) == 10\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..b73b1a1 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Test for argument invariance\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..4824ec4 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,5 @@\n+\n+from sympy.core.parameters import evaluate\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -440,7 +442,23 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Test to ensure Point2D does not raise an error with evaluate(False)\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+        assert p == Point2D(1, 2)\n+\n+    # Test to ensure Point2D works without evaluate(False)\n+    p = Point2D(1, 2)\n+    assert p == Point2D(1, 2)\n+\n+    # Test to ensure Point2D works with evaluate=False\n+    p = Point2D(1, 2, evaluate=False)\n+    assert p == Point2D(1, 2)\n+\n+    # Test to ensure Point2D raises an error with imaginary coordinates\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        Point2D(1, 2*I)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..cb30b61 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -56,6 +57,16 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n+    \n+    # Test cases for Min and Max\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    assert prntr.doprint(Min(3, 5)) == \"min(3, 5)\"\n+    assert prntr.doprint(Max(3, 5)) == \"max(3, 5)\"\n+    assert prntr.doprint(Min(x, 2)) == \"min(x, 2)\"\n+    assert prntr.doprint(Max(x, 2)) == \"max(x, 2)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..5e86443 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,7 +1175,21 @@ def test_scipy_polys():\n \n \n \n-def test_lambdify_inspect():\n+def test_lambdify_single_element_tuple():\n+    # Test that lambdify correctly handles a tuple with a single element\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+    # Verify the source code to ensure the tuple is correctly represented\n+    source_code = inspect.getsource(f_single)\n+    assert 'return (1,)' in source_code\n+\n+def test_lambdify_two_element_tuple():\n+    # Test that lambdify correctly handles a tuple with two elements\n+    f_double = lambdify([], (1, 2))\n+    assert f_double() == (1, 2)\n+    # Verify the source code to ensure the tuple is correctly represented\n+    source_code = inspect.getsource(f_double)\n+    assert 'return (1, 2)' in source_code\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..356a07d 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,15 @@\n+\n+def test_symbols_with_extra_parentheses():\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(u[1]) == UndefinedFunction\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n-from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.symbol import uniquely_named_symbol, _symbol, Str, symbols\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..401f404 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -261,8 +261,33 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Test case 1: Contracted gamma matrices in the middle\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Expected 4*G(rho)*G(sigma), got {r}\"\n+    \n+    # Test case 2: Contracted gamma matrices at the end\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Expected 4*G(rho)*G(sigma), got {r}\"\n+\n+    # Additional test case: No contracted gamma matrices\n+    t = G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(rho)*G(sigma)), f\"Expected G(rho)*G(sigma), got {r}\"\n+\n+    # Additional test case: Multiple contracted pairs\n+    t = G(mu)*G(-mu)*G(nu)*G(-nu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*G(rho)*G(sigma)), f\"Expected 16*G(rho)*G(sigma), got {r}\"\n \n-def test_gamma_matrix_class():\n+    # Additional test case: Mixed order\n+    t = G(rho)*G(mu)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Expected 4*G(rho)*G(sigma), got {r}\"\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..2749e6a 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,38 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Symbol, S, FiniteSet, Contains, Reals, Integers, Piecewise, Eq\n+from sympy.testing.pytest import raises\n+\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # Test cases based on the original test patch\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n+\n+    # Additional test cases to ensure robustness\n+    # Test with a more complex set\n+    assert Contains(x, FiniteSet(y, 1, 2, 3)).as_set() == FiniteSet(y, 1, 2, 3)\n+    \n+    # Test with an empty set\n+    assert Contains(x, FiniteSet()).as_set() == FiniteSet()\n+\n+    # Test with a universal set\n+    assert Contains(x, S.UniversalSet).as_set() == S.UniversalSet\n+\n+    # Test with a Piecewise function to ensure no AttributeError\n+    pw = Piecewise((6, Contains(x, Reals)), (7, True))\n+    assert pw.subs(x, 0) == 6\n+    assert pw.subs(x, S.Infinity) == 7\n+\n+    # Ensure NotImplementedError is raised for current implementation\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -48,4 +80,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..2e12553 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..7308663 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -561,6 +561,26 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr1)\n+\n \n def test_prefixed_property():\n     assert not meter.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..5338946 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -43,6 +44,27 @@ def test_homomorphism():\n     assert T.invert(a**-1*b**-1*a**2) == a*b**-1\n \n     # PermutationGroup -> PermutationGroup\n+\n+    # Test case for the issue with _check_homomorphism\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Additional test cases for PermutationGroup homomorphisms\n+    # Test identity homomorphism\n+    identity_hom = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert identity_hom.is_isomorphism()\n+\n+    # Test homomorphism with a different set of images\n+    a, b = D3.generators\n+    images = [a**-1, b**-1]\n+    T2 = homomorphism(D3, D3, D3.generators, images)\n+    assert not T2.is_isomorphism()\n+\n+    # Test homomorphism with a trivial group\n+    trivial_group = PermutationGroup([Permutation()])\n+    T3 = homomorphism(D3, trivial_group, D3.generators, [trivial_group.identity] * len(D3.generators))\n+    assert T3.is_trivial()\n     D = DihedralGroup(8)\n     p = Permutation(0, 1, 2, 3, 4, 5, 6, 7)\n     P = PermutationGroup(p)\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..ac92ea6 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -267,6 +267,21 @@ def test_PolyElement_as_expr():\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n+    # Additional test cases\n+    # Test with different symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test with fewer symbols than generators\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with more symbols than generators\n+    raises(ValueError, lambda: f.as_expr(U, V, W, X))\n+\n+    # Test with no symbols provided, should use default ring symbols\n+    assert f.as_expr() == g.subs({U: X, V: Y, W: Z})\n+\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n",
  "sympy__sympy-24661": "",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..51f2527 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -65,6 +65,8 @@ def test_unit_grammar_fail(string):\n         ([\"1.5\u00d710+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"m2\"], u.m**2),\n         ([\"10+21m\"], u.Unit(u.m * 1e21)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n         ([\"2.54cm\"], u.Unit(u.cm * 2.54)),\n         ([\"20%\"], 0.20 * u.dimensionless_unscaled),\n         ([\"10+9\"], 1.0e9 * u.dimensionless_unscaled),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..7583796 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1898,6 +1898,24 @@ class OperationTests(OperationTestBase):\n         author = Author.objects.create(name='Albert', rebate='10%')\n         self.assertEqual(Author.objects.get(), author)\n \n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_or_and(self):\n+        app_label = 'test_checkconstraint_or_and'\n+        constraint_name = 'check_constraint_or_and'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        TestConstraint.objects.create(field_1=1, flag=True)\n+        TestConstraint.objects.create(field_1=None, flag=False)\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..4be7064 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,6 +163,26 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n+    def test_translate_url_with_optional_parameters(self):\n+        # Test URL translation with optional parameters\n+        with translation.override('en'):\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/'\n+            )\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html'\n+            )\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/2/', 'nl'),\n+                '/nl/regex_optional/1/2/'\n+            )\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/', 'nl'),\n+                '/nl/regex_optional/1/'\n+            )\n+\n \n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..285fa1b 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -14,11 +15,40 @@ from .models import (\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    Item, Derived\n )\n \n \n class ModelInheritanceTest(TestCase):\n-    def test_model_inheritance(self):\n+    def test_reset_primary_key_creates_new_instance(self):\n+        # Create an instance of Derived\n+        derived_instance = Derived.objects.create(f=True)\n+        original_pk = derived_instance.pk\n+\n+        # Reset the primary key and save\n+        derived_instance.reset()\n+        derived_instance.save()\n+\n+        # Check that a new instance is created\n+        self.assertNotEqual(derived_instance.pk, original_pk)\n+        self.assertEqual(Derived.objects.count(), 2)\n+\n+    def test_reset_primary_key_does_not_overwrite(self):\n+        # Create an instance of Derived\n+        derived_instance = Derived.objects.create(f=True)\n+        original_pk = derived_instance.pk\n+\n+        # Reset the primary key and save\n+        derived_instance.reset()\n+        derived_instance.save()\n+\n+        # Fetch the original instance and check its fields\n+        original_instance = Derived.objects.get(pk=original_pk)\n+        self.assertTrue(original_instance.f)\n+\n+        # Check that the new instance has the reset values\n+        new_instance = Derived.objects.exclude(pk=original_pk).get()\n+        self.assertFalse(new_instance.f)\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n         # existent child instance, saving the Parent doesn't duplicate the\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..0e7b50a 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -606,6 +606,13 @@ class DeletionTests(TestCase):\n \n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries should be used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +709,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..cf584ea 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,23 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..6b29a7e 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,10 +6,42 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n \n \n class PickleabilityTestCase(TestCase):\n+    def test_pickle_values_annotate(self):\n+        # Create test data\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+        # Create a queryset with values and annotate\n+        qs = Toy.objects.values('material').annotate(total_price=models.Sum('price'))\n+        self.assertEqual(list(qs), [{'material': 'wood', 'total_price': 110}, {'material': 'plastic', 'total_price': 20}])\n+\n+        # Pickle and unpickle the queryset\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+\n+        # Verify the unpickled queryset returns the correct data\n+        self.assertEqual(list(reloaded), [{'material': 'wood', 'total_price': 110}, {'material': 'plastic', 'total_price': 20}])\n+\n+    def test_pickle_values_list(self):\n+        # Create test data\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+\n+        # Create a queryset with values_list\n+        qs = Toy.objects.values_list('name', flat=True)\n+        self.assertEqual(list(qs), ['foo', 'bar'])\n+\n+        # Pickle and unpickle the queryset\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+\n+        # Verify the unpickled queryset returns the correct data\n+        self.assertEqual(list(reloaded), ['foo', 'bar'])\n     @classmethod\n     def setUpTestData(cls):\n         Happening.objects.create()  # make sure the defaults are working (#20158)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..74b5567 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,7 +30,16 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n-    def test_widget(self):\n+    def test_unicode_prepare_value(self):\n+        field = JSONField()\n+        # Test with Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4e2d\u56fd'}), '{\"a\": \"\u4e2d\u56fd\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        # Test with emojis\n+        self.assertEqual(field.prepare_value({'emoji': '\ud83d\ude00\ud83d\udc31'}), '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(field.prepare_value(['\ud83d\ude00', '\ud83d\udc31']), '[\"\ud83d\ude00\", \"\ud83d\udc31\"]')\n+        # Test with mixed Unicode characters\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d', '\ud83d\ude00']), '[\"\u4f60\u597d\", \"\ud83d\ude00\"]')\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n \n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..77cdb3b 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6603,6 +6603,40 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_with_different_prefix(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/different_prefix/')\n+        self.assertRedirects(\n+            response,\n+            '/different_prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/another_prefix/')\n+    def test_missing_slash_append_slash_true_force_script_name_with_another_prefix(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/another_prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6629,6 +6663,40 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_with_different_prefix(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/different_prefix/')\n+        self.assertRedirects(\n+            response,\n+            '/different_prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/another_prefix/')\n+    def test_missing_slash_append_slash_true_force_script_name_with_another_prefix(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/another_prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..e9c91d0 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,39 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Test that the migration writer includes necessary imports for custom fields and mixins.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, models.Model):\n+            name = MyField(primary_key=True)\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=[\n+                        ('name', MyField(primary_key=True, serialize=False)),\n+                    ],\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Execute the generated migration code to ensure it is valid\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n+        # Check that the necessary imports are present\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"import app.models\", output)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..d17ab45 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,7 +1630,12 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n-    def test_exists_none_with_aggregate(self):\n+    def test_aggregation_default_after_annotation_with_sum(self):\n+        # This test case is designed to reproduce the issue described.\n+        result = Book.objects.annotate(\n+            idx=F('id')\n+        ).aggregate(Sum('id', default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1647,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..5d68273 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,7 +2988,16 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Deconstruction.\n+        # Test renaming and restoring unnamed index for unique_together.\n+        with connection.schema_editor() as editor:\n+            # Simulate moving backward by restoring the old auto-generated name.\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"old_pony_test_idx\")\n+        \n+        # Re-apply renaming to ensure it doesn't crash.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n         self.assertEqual(definition[1], [])\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..4129c16 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -595,6 +595,50 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         )\n \n \n+from django.db import connection, models\n+from django.db.migrations.state import ProjectState\n+from django.test import TestCase\n+from django.test.utils import skipUnlessDBFeature\n+from django.db import migrations\n+\n+class TestUniqueTogetherConstraints(TestCase):\n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_remove_unique_together_on_non_pk_field_with_multiple_constraints(self):\n+        app_label = \"test_rutnonpkf\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"name\", models.CharField(max_length=30)),\n+                    ],\n+                    options={\"unique_together\": {(\"name\",)}},\n+                ),\n+                migrations.AddConstraint(\n+                    model_name=\"Pony\",\n+                    constraint=models.UniqueConstraint(fields=[\"name\"], name=\"unique_name_constraint\"),\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        unique_constraint_name = \"unique_name_constraint\"\n+        unique_together_constraint_name = f\"{table_name}_name_694f3b9f_uniq\"\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintExists(\n+            table_name, unique_together_constraint_name, value=False\n+        )\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..b737c81 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3490,6 +3490,40 @@ class FormFieldCallbackTests(SimpleTestCase):\n         class InheritedForm(NewForm):\n             pass\n \n+        for name, field in NewForm.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+            self.assertEqual(\n+                type(field.widget),\n+                type(InheritedForm.base_fields[name].widget),\n+            )\n+\n+    def test_modelform_factory_respects_meta_formfield_callback(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"id\", \"name\"]\n+                formfield_callback = callback\n+\n+        FactoryForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_modelform_factory_with_no_callback_uses_default(self):\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"id\", \"name\"]\n+\n+        FactoryForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertNotEqual(type(field.widget), forms.Textarea)\n+            pass\n+\n         for name in NewForm.base_fields:\n             self.assertEqual(\n                 type(InheritedForm.base_fields[name].widget),\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..6db8c1a 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -5,7 +5,9 @@ import re\n \n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n-from django.core.serializers.json import DjangoJSONEncoder\n+from django.core import serializers\n+from django.db import models\n+from django.core.exceptions import FieldError\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n@@ -15,7 +17,33 @@ from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n \n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().select_related(\"master\")\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n class JsonSerializerTestCase(SerializersTestBase, TestCase):\n+    def test_m2m_serialization_with_custom_manager(self):\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+        try:\n+            serializers.serialize(\"json\", [test])\n+        except FieldError as e:\n+            self.fail(f\"Serialization failed with FieldError: {e}\")\n     serializer_name = \"json\"\n     pkless_str = \"\"\"[\n     {\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..5b4ebed 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -217,7 +217,17 @@ def test_unpickle_canvas():\n     assert fig2.canvas is not None\n \n \n-def test_mpl_toolkits():\n+def test_dpi_after_unpickle():\n+    import matplotlib.pyplot as plt\n+    import platform\n+\n+    if platform.system() == 'Darwin' and platform.machine() == 'arm64':\n+        fig = plt.figure(dpi=200)\n+        out = BytesIO()\n+        pickle.dump(fig, out)\n+        out.seek(0)\n+        fig2 = pickle.load(out)\n+        assert fig2.dpi == 200, f\"Expected DPI to be 200, but got {fig2.dpi}\"\n     ax = parasite_axes.host_axes([0, 0, 1, 1])\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..0d3011c 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,7 +6586,7 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n-    actual = da.integrate(\"y\")\n+    actual = da.integrate(coord=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n@@ -6601,7 +6601,11 @@ def test_integrate(dask):\n     assert actual.ndim == 0\n \n     with pytest.raises(ValueError):\n-        da.integrate(\"x2d\")\n+        da.integrate(coord=\"x2d\")\n+\n+    # Test for deprecation warning when using 'dim' instead of 'coord'\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"x\")\n \n \n @pytest.mark.parametrize(\"dask\", [True, False])\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..33c1900 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -131,6 +131,37 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     assert assertString in output.err\n \n \n+from typing import Any\n+import re\n+import pytest\n+from pylint.lint import Run\n+from pylint.testutils import EMPTY_MODULE\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+    (\"foo{1,3}, bar{2,4}\", [\"foo{1,3}\", \"bar{2,4}\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..d33560d 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,31 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with a custom transformer and pandas output.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion, make_union\n+    from sklearn import set_config\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Set pandas output\n+    set_config(transform_output=\"pandas\")\n+    union = make_union(MyTransformer())\n+    result = union.fit_transform(data)\n+\n+    # Check if the result is a DataFrame and has the expected shape\n+    assert isinstance(result, pd.DataFrame)\n+    assert result.shape == (4, 1)  # 4 days, 1 aggregated value per day\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..e13bc7b 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -11,6 +11,10 @@\n import pytest\n \n from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx.ext.autodoc import mock\n+from sphinx.ext.autodoc.typehints import merge_typehints\n+from docutils import nodes\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n@@ -30,4 +34,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..00fb5ee 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,6 +1317,32 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..abd902d 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,9 +773,62 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n-\n @pytest.mark.sphinx(freshenv=True)\n-def test_module_index(app):\n+def test_type_and_rtype_resolution(app):\n+    text = \"\"\"\n+    .. py:class:: mod.A\n+    .. py:class:: mod.submod.A\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param mod.A a:\n+        :param mod.submod.A b:\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`A`\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod.submod\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`A`\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \"\"\"\n+    # Parse the text and check for warnings\n+    with pytest.warns(None) as record:\n+        doctree = restructuredtext.parse(app, text)\n+    \n+    # Ensure no warnings were raised\n+    assert len(record) == 0, \"Warnings were raised during parsing\"\n+\n+    # Check that the unqualified 'A' resolves correctly in the current module context\n+    # This is a simplified check; in a real test, you would verify the actual nodes\n+    assert_node(doctree, nodes.document)\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n             \".. py:module:: sphinx.config\\n\"\n",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..7335334 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,8 +1008,42 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_info_field_list_piped_return_type(app):\n+    text = (\".. py:function:: func() -> int | str\\n\"\n+            \"   :return: blah blah\\n\"\n+            \"   :rtype: int | str\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[1][1][0][0], ([nodes.field_name, \"Returns\"],\n+                                      [nodes.field_body, nodes.paragraph]))\n+    assert_node(doctree[1][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:function\": \"func\"})\n+    assert_node(doctree[1][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:function\": \"func\"})\n \n-def test_info_field_list_var(app):\n+def test_info_field_list_var_piped_type(app):\n+    text = (\".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :var attr: blah blah\\n\"\n+            \"   :vartype attr: int | str\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[1][1][0][0], ([nodes.field_name, \"Variables\"],\n+                                      [nodes.field_body, nodes.paragraph]))\n+    assert_node(doctree[1][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[1][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..b6ebf62 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1052,6 +1052,13 @@ def test_conditionset():\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n+    # Test case for issue where solveset should return ConditionSet\n+    result1 = Eq(x*cos(x) - 3*sin(x), 0)\n+    assert solveset(result1, x, domain=S.Reals) == ConditionSet(x, Eq(x*cos(x) - 3*sin(x), 0), S.Reals)\n+\n+    result2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert solveset(result2, x, domain=S.Reals) == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), S.Reals)\n+\n     assert solveset(Eq(x**2 + x*sin(x), 1), x, domain=S.Reals\n         ) == ConditionSet(x, Eq(x**2 + x*sin(x) - 1, 0), S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..459eaee 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,6 +3265,10 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n+from sympy import symbols, sqf_list\n+\n+x, y = symbols('x y')\n+\n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n@@ -3330,6 +3334,30 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+def test_issue_8695():\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n+\n+def test_sqf_list_additional_cases():\n+    # Test case for a polynomial with distinct factors\n+    p1 = (x - 1) * (x - 2) * (x - 3)\n+    result1 = (1, [(x - 1, 1), (x - 2, 1), (x - 3, 1)])\n+    assert sqf_list(p1) == result1\n+\n+    # Test case for a polynomial with a repeated factor\n+    p2 = (x - 1)**2 * (x - 2)\n+    result2 = (1, [(x - 1, 2), (x - 2, 1)])\n+    assert sqf_list(p2) == result2\n+\n+    # Test case for a polynomial with multiple repeated factors\n+    p3 = (x - 1)**3 * (x - 2)**2\n+    result3 = (1, [(x - 1, 3), (x - 2, 2)])\n+    assert sqf_list(p3) == result3\n+\n+    # Test case for a polynomial with no real roots\n+    p4 = x**2 + 1\n+    result4 = (1, [(x**2 + 1, 1)])\n+    assert sqf_list(p4) == result4\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..9d22ff4 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3255,7 +3255,11 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+def test_issue_18895_factor_with_extension():\n+    # Test for issue #18895\n+    z = expand((x - 1)*(y - 1))\n+    assert factor(z) == (x - 1)*(y - 1)\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..829987c 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -11,7 +12,7 @@ from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n-from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n+from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum, Symbol\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n from sympy.core import I, pi\n",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..4ccb56f 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the custom ID set in widget attrs\n+        for CheckboxSelectMultiple subwidgets.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id_%s'}),\n+            )\n+\n+        form = SomeForm()\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..5fc56f4 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..d5b793f 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,36 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from numpy.testing import assert_array_equal\n+\n+def test_cross_val_predict_with_multioutputclassifier_predict_proba():\n+    # Generate a multilabel classification dataset\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=42)\n+\n+    # Initialize a MultiOutputClassifier with a base estimator that supports predict_proba\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # Perform cross-validation prediction with method='predict_proba'\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+\n+    # Check that the output is a list with the same length as the number of outputs\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]\n+\n+    # Check that each element in the list is an array with the correct shape\n+    for i in range(Y.shape[1]):\n+        assert pred_proba[i].shape == (X.shape[0], len(np.unique(Y[:, i])))\n+\n+    # Check that the probabilities sum to 1 for each sample and each output\n+    for proba in pred_proba:\n+        assert_array_equal(np.round(proba.sum(axis=1), decimals=5), np.ones(proba.shape[0]))\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..4b9926f 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,18 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    from sympy import Product, Symbol, S\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    # Additional test cases\n+    assert p.subs(n, 1).doit() == S(3)\n+    assert p.subs(n, 3).doit() == S(315)/8\n+    assert p.subs(n, 4).doit() == S(9765)/64\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +369,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}