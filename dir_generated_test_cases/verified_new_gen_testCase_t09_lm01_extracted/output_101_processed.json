{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..2e93e7b 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,6 +601,23 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n+    def test_fitsdiff_with_vla_identical_file(self):\n+        \"\"\"\n+        Test that FITSDiff recognizes identical files even with VLAs (Variable-Length Arrays).\n+        \"\"\"\n+\n+        # Create a VLA column\n+        col = Column('a', format='QD', array=[[0], [0, 0]])\n+        ta = BinTableHDU.from_columns([col])\n+        ta.writeto('diffbug_vla.fits', overwrite=True)\n+\n+        # Compare the file to itself\n+        diff = FITSDiff('diffbug_vla.fits', 'diffbug_vla.fits')\n+        assert diff.identical, \"The file should be reported as identical to itself.\"\n+\n+        # Clean up\n+        os.remove('diffbug_vla.fits')\n+\n     def test_identical_files_basic(self):\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..5c16a6e 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,6 +88,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+    class BaseWithProperties(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            pass\n+\n+    class SubclassWithProperties(BaseWithProperties):\n+        @property\n+        def bar(self):\n+            return 42\n+\n+    if BaseWithProperties.bar.__doc__ is not None:\n+        assert SubclassWithProperties.bar.__doc__ == \"BAR\"\n+\n \n def test_set_locale():\n     # First, test if the required locales are available\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..d6d1d95 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -69,7 +69,15 @@ def test_minversion():\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n     bad_versions = ['1', '1.2rc1']\n+    # Adding test for the specific versions mentioned in the issue\n+    test_module.__version__ = '1.14.3'\n+    edge_case_versions = ['1.14dev', '1.14']\n+    for version in edge_case_versions:\n+        assert minversion(test_module, version) == True\n+\n+    test_module.__version__ = '1.14dev'\n+    assert minversion(test_module, '1.14.3') == False\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..b1520f2 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -150,6 +150,17 @@ class TestQuantityCreation:\n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n \n+    def test_float16_preservation(self):\n+        \"\"\"Test that np.float16 values retain their dtype when creating a Quantity\"\"\"\n+        a_float16 = np.float16(1.0)\n+        q_float16 = u.Quantity(a_float16, u.km)\n+        assert q_float16.dtype == np.float16, f\"Expected dtype float16 but got {q_float16.dtype}\"\n+\n+        # Additional test similar to the original patch for arrays\n+        a_array_float16 = np.array([1.0, 2.0], dtype=np.float16)\n+        q_array_float16 = u.Quantity(a_array_float16, u.yr)\n+        assert q_array_float16.dtype == a_array_float16.dtype, \"Array of float16 dtype not preserved.\"\n+\n     def test_copy(self):\n \n         # By default, a new quantity is constructed, but not if copy=False\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..6292024 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -230,6 +230,31 @@ TEST_DATA = [\n \n     (RegexValidator(), '', None),\n     (RegexValidator(), 'x1x2', None),\n+\n+    # Test cases for URLValidator to reject invalid characters in username and password fields\n+    # Invalid URLs due to unencoded characters in username/password section\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+\n+    # Test valid encoding scenarios\n+    (URLValidator(), 'http://foo%3Abar@example.com', None),\n+    (URLValidator(), 'http://foo%40example.com@bar.com', None),\n+\n+    # Test that it rejects invalid but seemingly valid URLs due to trailing spaces or newlines\n+    (URLValidator(), 'http://valid.com/\\n', ValidationError),\n+    (URLValidator(), 'http://valid.com/ ', ValidationError),\n+\n+    # Test that some valid secure URLs are still accepted\n+    (URLValidator(), 'https://user:password@secure.site.com', None),\n+    (URLValidator(), 'https://secure.site.com/path?query#frag', None),\n+\n+    # Testing edge cases: known invalid constructed URLs\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n     (RegexValidator('[0-9]+'), 'xxxxxx', ValidationError),\n     (RegexValidator('[0-9]+'), '1234', None),\n     (RegexValidator(re.compile('[0-9]+')), '1234', None),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..a24c5c8 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -389,6 +390,21 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_count_distinct_expression_with_different_conditions(self):\n+        # Testing with a different condition - where no books have more than 500 pages\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=500, then='rating')), distinct=True),\n+        )\n+        # Assuming no book has more than 500 pages, the count should be 0\n+        self.assertEqual(aggs['distinct_ratings'], 0)\n+\n+        # Testing with condition that matches all books\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=0, then='rating')), distinct=True),\n+        )\n+        # Assuming each book has a rating, and ratings have some uniqueness\n+        self.assertLessEqual(aggs['distinct_ratings'], 6)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..87c0f29 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1103,7 +1103,12 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n-    def test_override_file_upload_directory_permissions(self):\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default FILE_UPLOAD_PERMISSIONS setting should be 0o644.\n+        \"\"\"\n+        with self.settings():\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         \"\"\"\n         Overriding the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting should be\n         reflected in the directory_permissions_mode attribute of\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..85dbeae 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -113,4 +115,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..5c8fc5b 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -2,6 +2,7 @@ from django.apps.registry import apps\n from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n+from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n@@ -55,7 +56,32 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_content_type_rename_conflict(self):\n+    class TestRouter:\n+        def db_for_write(self, model, **hints):\n+            return 'default'\n+\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Setup the initial content type in the 'other' database.\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        \n+        # Ensure the content type exists in the 'other' database pre-migration.\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        \n+        # Run migration which should rename the model in the 'other' database.\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        \n+        # Verify that the old name no longer exists and the new name does.\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        \n+        # Rollback migration and verify names revert to original.\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        \n+        # Verify that the old name exists again and the new name does not.\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         ContentType.objects.create(app_label='contenttypes_tests', model='renamedfoo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0)\n@@ -63,4 +89,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..84df1d2 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -425,7 +425,27 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n             inlines = [\n                 AlternateInline, MediaInline\n             ]\n+        class CustomRequest:\n+            # Simulating a request object with a name attribute\n+            def __init__(self, name=None):\n+                self.name = name\n+\n         ma = EpisodeAdmin(Episode, self.site)\n+        request = CustomRequest()\n+\n+        # Test default behavior of get_inlines (no name attribute)\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        # Test 'alternate' option\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, None), (AlternateInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), AlternateInline)\n+\n+        # Test 'media' option\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, None), (MediaInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), MediaInline)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..457a387 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,8 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"trailingnewline\\n\"\n+            \"en\\u2013dash\", \"trailingnewline\\n\",\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -247,8 +248,16 @@ class UsernameValidatorsTests(SimpleTestCase):\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n-\n-    def test_ascii_validator(self):\n+    \n+    def test_unicode_validator_trailing_newline(self):\n+        invalid_usernames = [\n+            \"validusername\\n\", \"invalid\\nusername\", \"trailingnewline\\n\",\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +267,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..f46f963 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -1,6 +1,7 @@\n import os\n \n from django.core.exceptions import ImproperlyConfigured\n+from django.template import TemplateDoesNotExist\n from django.template import Context\n from django.template.engine import Engine\n from django.test import SimpleTestCase, override_settings\n@@ -22,6 +23,34 @@ class RenderToStringTest(SimpleTestCase):\n         )\n \n \n+class RenderToStringTest(SimpleTestCase):\n+\n+    def setUp(self):\n+        self.engine = Engine(dirs=[TEMPLATE_DIR])\n+\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_off_context_instance(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        context = Context({'obj': '<div>'})\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', context),\n+            'obj:<div>\\n',\n+        )\n+\n+\n class GetDefaultTests(SimpleTestCase):\n \n     @override_settings(TEMPLATES=[])\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..da3b8ec 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,10 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'my content'))\n+        self.assertEqual(r.content, b'my content')\n+\n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..9b2dca6 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -509,6 +509,10 @@ class LoaderTests(TestCase):\n         self.assertEqual(migrations, ['0001_initial'])\n \n \n+from django.test import override_settings\n+from django.db.migrations.loader import MigrationLoader\n+from django.db.backends.base.base import BaseDatabaseWrapper\n+\n class PycLoaderTests(MigrationTestBase):\n \n     def test_valid(self):\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..5ba0eca 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -804,9 +804,53 @@ class TestInlinePermissions(TestCase):\n             html=True,\n         )\n \n+    def test_inline_view_m2m_permission_only(self):\n+        \"\"\"Test M2M inlines with view-only permissions.\"\"\"\n+        # Add view permission only for books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        \n+        response = self.client.get(self.author_change_url)\n+        \n+        # Expect that M2M inlines are read-only with view permission\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        \n+        # Check that no add permission fields are available\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        \n+        # Check that existing M2M entries are displayed as read-only\n+        self.assertContains(response, '<input type=\"hidden\" id=\"id_Author_books-TOTAL_FORMS\" value=\"1\"', html=True)\n+        self.assertContains(response, '<p>%s</p>' % \"The inline Book\")\n+        \n+        # Confirm delete option is not present\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n-@override_settings(ROOT_URLCONF='admin_inlines.urls')\n-class SeleniumTests(AdminSeleniumTestCase):\n+    def test_inline_view_only_pk(self):\n+        \"\"\"Test if inline PKs are displayed and read-only with view permission.\"\"\"\n+        permission = Permission.objects.get(codename='view_inner2', content_type=self.inner_ct)\n+        self.user.user_permissions.add(permission)\n+\n+        response = self.client.get(self.holder_change_url)\n+\n+        # Inline should be present due to view permission, but not editable.\n+        self.assertContains(response, '<h2>Inner2s</h2>')\n+        self.assertNotContains(response, 'Add another Inner2')\n+\n+        # Existing form for an instance, read-only\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" id=\"id_inner2_set-TOTAL_FORMS\" value=\"1\" name=\"inner2_set-TOTAL_FORMS\">',\n+            html=True\n+        )\n+        self.assertNotContains(response, 'id=\"id_inner2_set-0-DELETE\"')\n+\n+        # Confirm display of readonly field values\n+        self.assertContains(\n+            response,\n+            '<input type=\"number\" name=\"inner2_set-2-0-dummy\" value=\"%s\" '\n+            'class=\"vIntegerField\" id=\"id_inner2_set-2-0-dummy\" disabled>' % self.inner2.dummy,\n+            html=True,\n+        )\n \n     available_apps = ['admin_inlines'] + AdminSeleniumTestCase.available_apps\n \n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..4dbe348 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,16 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_model_to_dict_with_empty_fields(self):\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        # Test with fields as an empty list.\n+        self.assertEqual(model_to_dict(bw, fields={}), {})\n+        # Test when no fields are specified; expect all fields in the dict.\n+        self.assertEqual(sorted(model_to_dict(bw)), ['id', 'name', 'score', 'writer_ptr'])\n+        # Test some specific fields\n+        self.assertEqual(model_to_dict(bw, fields=['id', 'name']), {'id': bw.id, 'name': 'Joe Better'})\n+        # Test with no fields specified, and using exclude to exclude fields.\n+        self.assertEqual(model_to_dict(bw, exclude=['id', 'name']), {'score': 10, 'writer_ptr': bw.writer_ptr_id})\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..a4d2853 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..763c1cc 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,13 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),  # New test case to verify correct behavior for 1e-199\n+            ('1e-200', 2, '0.00'),  # New test case to verify issue reproduction for 1e-200\n+            ('1e-199', 3, '0.000'), # New test case with more decimal places\n+            ('1e-200', 3, '0.000'), # New test case with more decimal places\n+            # Additional edge cases\n+            ('1e-250', 5, '0.00000'), # Even smaller value should also format to zero\n+            ('1.23e-250', 5, '0.00000'), # A small non-zero with enough decimals to be zero\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..e63f188 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -196,7 +197,16 @@ class Comment(models.Model):\n         ordering = ['id']\n \n \n-# Models for lookup ordering tests\n+# Models for GFK UUID field tests\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, related_name='actor', on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class House(models.Model):\n     name = models.CharField(max_length=50)\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..1c73b9d 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..5a91b5d 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -90,6 +90,14 @@ class FilteredRelationTests(TestCase):\n             [self.author1, self.author2]\n         )\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n     def test_with_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..9cf5bd7 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -22,12 +22,13 @@ class TestUtilsHtml(SimpleTestCase):\n         self.assertEqual(function(value), output)\n \n     def test_escape(self):\n+        from django.utils.html import escape  # Ensure escape function is imported if not\n         items = (\n             ('&', '&amp;'),\n             ('<', '&lt;'),\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n-            (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),  # Updated expectation to match html.escape() which outputs &#x27;\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..f2dbb4c 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,7 +243,41 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n+    def test_skip_checks(self):\n+        \"\"\"\n+        Test that the --skip-checks option skips system checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or\n+            # list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_checks_run_without_skip_option(self):\n+        \"\"\"\n+        Test that system checks run when --skip-checks is not used.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or\n+            # list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('System check identified some issues', err)\n+\n+    def test_skip_checks_with_other_options(self):\n+        \"\"\"\n+        Test that the --skip-checks option can be used with other options without conflict.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--verbose', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertIn('Set foo', out)\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n         abbreviated forms of the --setting and --pythonpath options.\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..1f2afc1 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,9 +1,38 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n-class RegexPatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # Resolve for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    def test_resolver_cache_on_same_urlconf(self):\n+        # Test that using the same URL configuration yields the same cached instance.\n+        resolver1 = get_resolver('urlpatterns.path_urls')\n+        resolver2 = get_resolver('urlpatterns.path_urls')\n+        self.assertIs(resolver1, resolver2)\n+\n+    def test_resolver_cache_on_different_urlconf(self):\n+        # Ensure different URL configurations result in different resolvers.\n+        resolver1 = get_resolver('urlpatterns.path_urls')\n+        resolver2 = get_resolver('urlpatterns.path_dynamic_urls')\n+        self.assertIsNot(resolver1, resolver2)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_pre_and_post_request(self):\n+        # Simulate a call pre-request handling and post-request to verify caching.\n+        pre_request_resolver = get_resolver(None)  # Should use settings.ROOT_URLCONF\n+        # Simulate a set_urlconf call as if a request was handled\n+        post_request_resolver = get_resolver('urlpatterns.path_urls')\n+        self.assertIs(pre_request_resolver, post_request_resolver)\n \n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n@@ -12,4 +41,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..029af7e 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,8 +226,39 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.test import TestCase, override_settings\n+from django.contrib.auth import get_user_model, authenticate\n+from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n+    UserModel = get_user_model()\n+\n+    def test_no_queries_when_username_and_password_none(self):\n+        \"\"\"\n+        Test that no queries are made when both username and password are None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            authenticate(None, None)\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    def test_no_queries_when_only_username_none(self):\n+        \"\"\"\n+        Test that no queries are made when username is None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            authenticate(None, 'some_password')\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    def test_no_queries_when_only_password_none(self):\n+        \"\"\"\n+        Test that no queries are made when password is None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            authenticate('some_username', None)\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n     \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..002f59f 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,19 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_union_with_dynamic_values_list(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # Verify that we can dynamically change the columns in values_list\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+        \n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+        \n+        reserved_name_only = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name_only, ('a',))\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..d33fe92 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -11,6 +11,7 @@ from email import charset, message_from_binary_file, message_from_bytes\n from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n+from unittest import mock\n from io import StringIO\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n@@ -360,6 +361,29 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n \n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test non-ASCII DNS with a non-unicode email encoding.\n+        \"\"\"\n+        from django.core.mail.message import DNS_NAME\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--p8s937b', email.message()['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6d4b\u8bd5')\n+    def test_unicode_hostname_to_message_id(self, mocked_getfqdn):\n+        \"\"\"\n+        Ensure that non-ASCII hostnames are properly converted to punycode in the Message-ID.\n+        \"\"\"\n+        from django.core.mail.message import DNS_NAME\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--0zwm56d>', message['Message-ID'])\n+\n     def test_none_body(self):\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..806ed36 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n@@ -12,8 +13,37 @@ from .models import (\n     Band, Song, User, ValidationTestInlineModel, ValidationTestModel,\n )\n \n+class PositionField(Field):\n+    \"\"\"Custom field accessible only via instance.\"\"\"\n+    def contribute_to_class(self, cls, name):\n+        super().contribute_to_class(cls, name)\n+        setattr(cls, self.name, self)\n+\n+    def __get__(self, instance, owner):\n+        if instance is None:\n+            raise AttributeError()\n+\n+class Thing(Model):\n+    number = Field(default=0)\n+    order = PositionField()\n+\n+class PositionFieldAccessibilityCheck(CheckTestCase):\n+    \n+    def test_valid_field_accessible_via_instance(self):\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('order',)\n+\n+        self.assertIsValid(TestModelAdmin, Thing)\n \n-class CheckTestCase(SimpleTestCase):\n+    def test_invalid_field_accessible_via_class(self):\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('made_up_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, Thing, \n+            \"The value of 'list_display[0]' refers to 'made_up_field', which is not a callable, an attribute of 'TestModelAdmin', or an attribute or method on 'app_label.Thing'.\",\n+            'admin.E108'\n+        )\n \n     def assertIsInvalid(self, model_admin, model, msg, id=None, hint=None, invalid_obj=None, admin_site=None):\n         if admin_site is None:\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..716f967 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -8,8 +8,9 @@ from django.db.models import (\n from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n+from datetime import datetime\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n \n class OrderingTests(TestCase):\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..a1d2b11 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,6 +391,16 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_distinct_on_sum_and_avg_aggregates(self):\n+        test_data = [\n+            (Avg, 'Avg', 4.125),\n+            (Sum, 'Sum', 16.5),\n+        ]\n+        for aggregate, name, expected_result in test_data:\n+            with self.subTest(aggregate=name):\n+                result = Book.objects.aggregate(ratings=aggregate('rating', distinct=True))\n+                self.assertEqual(result['ratings'], expected_result)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-11740": "",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..04111f0 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -209,6 +209,25 @@ class CommandTests(SimpleTestCase):\n         self.assertIn('need_me', out.getvalue())\n         self.assertIn('needme2', out.getvalue())\n \n+    from io import StringIO\n+    from django.core import management\n+    from django.core.management.base import CommandError\n+\n+    def test_mutually_exclusive_group_required_options(self):\n+        # Test the case when using kwargs for mutually exclusive arguments\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        \n+        # Test the error when none of the mutually exclusive arguments are provided\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_command_add_arguments_after_common_arguments(self):\n         out = StringIO()\n         management.call_command('common_args', stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..53fbc73 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,6 +437,32 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n+    def test_username_field_max_length_attribute_matches_user_model(self):\n+        self.assertEqual(CustomEmailField._meta.get_field('username').max_length, 255)\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+            'email': 'test@example.com',\n+        }\n+        CustomEmailField.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].max_length, 255)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), '255')\n+        self.assertEqual(form.errors, {})\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_max_length_attribute_defaults_to_254(self):\n+        self.assertIsNone(IntegerUsernameUser._meta.get_field('username').max_length)\n+        data = {\n+            'username': '0123456',\n+            'password': 'password',\n+        }\n+        IntegerUsernameUser.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].max_length, 254)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), '254')\n+        self.assertEqual(form.errors, {})\n+\n     def test_username_field_label(self):\n \n         class CustomAuthenticationForm(AuthenticationForm):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..8e745cd 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -296,7 +296,25 @@ class WriterTests(SimpleTestCase):\n             \"(b'value-b', migrations.test_writer.BinaryEnum(b'value-b'))], \"\n             \"default=migrations.test_writer.BinaryEnum(b'value-b'))\"\n         )\n-        field = models.IntegerField(default=IntEnum.A, choices=[(m.value, m) for m in IntEnum])\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+        \n+        # Verify that the EnumSerializer uses the Enum name instead of the translated value.\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.B, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['B'])\"\n+        )\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..68d6d9e 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -320,7 +321,29 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_asctime(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_year_boundary(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        # Set up current year for testing boundary cases\n+        current_year = 2023\n+        mocked_datetime.utcnow = mock.Mock(return_value=datetime(current_year, 1, 1))\n+        \n+        # Test cases for boundary of 50-year rule of RFC 7231\n+        tests = [\n+            # Test for year 69 (69 + 2000 = 2069) - should go to past\n+            ('Tuesday, 31-Dec-69 23:59:59 GMT', datetime(2069, 12, 31, 23, 59, 59)),\n+            # Test just before the boundary year 70 becomes 1970\n+            ('Wednesday, 01-Jan-70 00:00:00 GMT', datetime(1970, 1, 1, 0, 0, 0)),\n+            # Edge case where it's same year as current year + 49, should still be future\n+            (f'Tuesday, 31-Dec-{(current_year + 49) % 100:02} 23:59:59 GMT', datetime(current_year + 49, 12, 31, 23, 59, 59)),\n+            # Edge case where it's current year + 50, should be considered past\n+            (f'Wednesday, 01-Jan-{(current_year + 50) % 100:02} 00:00:00 GMT', datetime(current_year - 50, 1, 1, 0, 0, 0)),\n+        ]\n+        \n+        for date_str, expected_date in tests:\n+            with self.subTest(date_str=date_str):\n+                parsed = parse_http_date(date_str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..eac979c 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,6 +3672,39 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n+    def test_field_deep_copy_error_messages(self):\n+        import copy\n+        from django.forms import CharField\n+\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+        # Ensure that deepcopy has actually copied the messages\n+        self.assertEqual(field_copy.error_messages, {'invalid': 'Form custom error message.'})\n+        self.assertEqual(field.error_messages, {'invalid': 'Form custom error message.'})\n+\n+    def test_field_deep_copy_error_messages_modify_copy(self):\n+        import copy\n+        from django.forms import CharField\n+\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        # Modify the error_messages of the copy and check if the original is unchanged\n+        field_copy.error_messages['invalid'] = 'Modified error message.'\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Modified error message.')\n+        self.assertEqual(field.error_messages['invalid'], 'Form custom error message.')\n+\n     def test_field_named_data(self):\n         class DataForm(Form):\n             data = CharField(max_length=10)\n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..81c92c4 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,5 +1,7 @@\n+\n from operator import attrgetter\n \n+from math import ceil\n from django.db import IntegrityError, NotSupportedError, connection\n from django.db.models import FileField, Value\n from django.db.models.functions import Lower\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..51a8159 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,47 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.utils.translation import gettext_lazy as _\n+\n+class TestIssueEnumConsistency(SimpleTestCase):\n+    class MyChoice(models.TextChoices):\n+        FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+        SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+    def setUp(self):\n+        class MyObject(models.Model):\n+            my_str_value = models.CharField(max_length=10, choices=self.MyChoice.choices)\n+        self.MyObject = MyObject\n+\n+    def test_created_object_value(self):\n+        \"\"\"\n+        Ensure that the stored value is the enum's value, not the enum member.\n+        \"\"\"\n+        my_object = self.MyObject(my_str_value=self.MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n+    def test_retrieved_object_value(self):\n+        \"\"\"\n+        Test that retrieving the object returns the correct string value.\n+        \"\"\"\n+        my_object_instance = self.MyObject.objects.create(my_str_value=self.MyChoice.FIRST_CHOICE)\n+        my_object_instance.save()\n+        my_retrieved_object = self.MyObject.objects.get(id=my_object_instance.id)\n+        self.assertIsInstance(my_retrieved_object.my_str_value, str)\n+        self.assertEqual(my_retrieved_object.my_str_value, \"first\")\n+\n+\n+class EnumStringRepresentationTests(SimpleTestCase):\n+    def test_str_methods_return_correct_value(self):\n+        \"\"\"\n+        Ensure that str() for enum members returns the actual stored value.\n+        \"\"\"\n+        for enum_class in [Gender, Suit, YearInSchool, Vehicle]:\n+            for member in enum_class:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(enum_class[member.name]), str(member.value))\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..0d6acf6 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db.models import Index\n+from django.db import connection\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db.models import Index\n+from django.db import connection\n \n \n class SchemaIndexesTests(TestCase):\n@@ -22,6 +26,46 @@ class SchemaIndexesTests(TestCase):\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n \n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n     def test_index_name_hash(self):\n         \"\"\"\n         Index names should be deterministic.\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..3777ab6 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -107,7 +108,26 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_iterable_lookup_value_with_list(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b', 'c']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b', 'c'])\n+\n+    def test_iterable_lookup_value_with_tuple(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b', 'c')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b', 'c'))\n+\n+    def test_iterable_lookup_value_with_set(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name={'a', 'b', 'c'}))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, {'a', 'b', 'c'})\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..d0219a0 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -843,8 +843,26 @@ class ChangeListTests(TestCase):\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n-\n-    def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n+    def test_get_list_editable_queryset_with_other_regex_chars_in_prefix(self):\n+        \"\"\"Test list_editable_queryset with other regex special characters in the prefix.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow X', load=5, speed=3)\n+        Swallow.objects.create(origin='Swallow Y', load=3, speed=4)\n+        data = {\n+            'form.*-TOTAL_FORMS': '2',\n+            'form.*-INITIAL_FORMS': '2',\n+            'form.*-MIN_NUM_FORMS': '0',\n+            'form.*-MAX_NUM_FORMS': '1000',\n+            'form.*-0-uuid': str(a.pk),\n+            'form.*-0-speed': '5',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form.*')\n+        self.assertEqual(queryset.count(), 1)\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n         Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..851b7e2 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,6 @@\n+\n+import re\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..7361719 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1102,6 +1102,15 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n                 }\n             }\n         )\n+    def test_splitarrayfield_booleanfield(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, True, False])\n+\n+        # Check that each subwidget has the correct 'checked' attribute\n+        subwidgets = context['widget']['subwidgets']\n+        self.assertEqual(subwidgets[0]['attrs'], {})\n+        self.assertEqual(subwidgets[1]['attrs'], {'checked': True})\n+        self.assertEqual(subwidgets[2]['attrs'], {})\n \n     def test_render(self):\n         self.check_html(\n",
  "django__django-12209": "",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..92f191e 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,8 +77,25 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            # Test cases related to the specific issue described\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world - Expected result: hi'),\n+            ('{% load custom %}{% hi greeting=\"hello\" %}', 'hi world - Expected result: hello'),\n+            # Ensure multiple keyword arguments scenario for 'simple_keyword_only_default'\n+            (\n+                \"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}',\n+            ),\n+            # Ensure multiple keyword arguments scenario for 'hi'\n+            (\n+                \"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hello\" greeting=\"hi\" %}',\n+            ),\n         ]\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -101,8 +118,25 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            # Test cases related to the specific issue described\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world - Expected result: hi'),\n+            ('{% load custom %}{% hi greeting=\"hello\" %}', 'hi world - Expected result: hello'),\n+            # Ensure multiple keyword arguments scenario for 'simple_keyword_only_default'\n+            (\n+                \"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}',\n+            ),\n+            # Ensure multiple keyword arguments scenario for 'hi'\n+            (\n+                \"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hello\" greeting=\"hi\" %}',\n+            ),\n         ]\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -190,12 +224,29 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            # Test cases related to the specific issue described\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world - Expected result: hi'),\n+            ('{% load custom %}{% hi greeting=\"hello\" %}', 'hi world - Expected result: hello'),\n+            # Ensure multiple keyword arguments scenario for 'simple_keyword_only_default'\n+            (\n+                \"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}',\n+            ),\n+            # Ensure multiple keyword arguments scenario for 'hi'\n+            (\n+                \"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hello\" greeting=\"hi\" %}',\n+            ),\n         ]\n \n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n     def test_inclusion_tag_errors(self):\n         errors = [\n             (\"'inclusion_one_default' received unexpected keyword argument 'three'\",\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..1933580 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2477,6 +2478,27 @@ Password: <input type=\"password\" name=\"password\" required>\n             f.as_table(),\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n+  \n+    def test_filefield_with_initial_data(self):\n+        # A file input with initial data should not include the 'required' attribute.\n+        class FileFormInitial(Form):\n+            file1 = FileField()\n+\n+        form_with_initial = FileFormInitial(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            form_with_initial.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_fileinput_no_initial_data(self):\n+        class FileFormNoInitial(Form):\n+            file1 = FileField()\n+\n+        form_without_initial = FileFormNoInitial(auto_id=False)\n+        self.assertHTMLEqual(\n+            form_without_initial.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n \n     def test_filefield_initial_callable(self):\n         class FileForm(forms.Form):\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..312a023 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -6,6 +7,7 @@ import uuid\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -137,7 +139,18 @@ class ChoicesTests(SimpleTestCase):\n                 # A string is not permitted as the second argument to int().\n                 ONE = 1, 'X', 'Invalid'\n \n-        msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n+    def test_year_in_school_enum_in_template(self):\n+        \"\"\"Test if YearInSchool enumeration can be used in a template.\"\"\"\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', _('Freshman')\n+            SOPHOMORE = 'SO', _('Sophomore')\n+            JUNIOR = 'JR', _('Junior')\n+            SENIOR = 'SR', _('Senior')\n+\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Yes{% endif %}')\n+        context = Context({'student': {'year_in_school': YearInSchool.FRESHMAN}, 'YearInSchool': YearInSchool})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Yes')\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..108cdd2 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,8 +1015,31 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n-    def test_m2m_table_name_clash(self):\n-        class Foo(models.Model):\n+    def test_onetoone_with_mti_ordering_confusion(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class PickingCase1(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+        \n+        self.assertEqual(PickingCase1.check(), [])\n+\n+        class PickingCase2(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+        \n+        self.assertEqual(PickingCase2.check(), [])\n+\n+    def test_onetoone_improperly_configured_due_to_order(self):\n+        msg = 'Add parent_link=True to invalid_models_tests.Document.origin.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class Document(models.Model):\n+                pass\n+\n+            class Picking(Document):\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, related_name='+')\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n             class Meta:\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..9bc48dd 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -247,6 +247,14 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        Without setting SECURE_REFERRER_POLICY, it defaults to 'same-origin'.\n+        \"\"\"\n+        with self.settings(SECURE_REFERRER_POLICY=None):\n+            response = self.process_response()\n+            self.assertEqual(response['Referrer-Policy'], 'same-origin')\n+\n     @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n@@ -254,4 +262,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..3fc57f3 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -20,6 +20,10 @@ from django.db.models.functions import (\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.contrib.auth.models import User\n+from django.utils.functional import SimpleLazyObject\n+from .models import Manager, Company, Employee\n+from django.db.models import OuterRef, Subquery\n from django.test.utils import Approximate, isolate_apps\n \n from .models import (\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..bc72d34 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,9 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n+from django.contrib import admin\n+from django import forms\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/models.py b/tests/lookup/models.py\nindex 28992d4..89748ea 100644\n--- a/tests/lookup/models.py\n+++ b/tests/lookup/models.py\n@@ -70,6 +70,24 @@ class Season(models.Model):\n     def __str__(self):\n         return str(self.year)\n \n+class Model(models.Model):\n+    ean = models.CharField(max_length=100)\n+    brand = models.CharField(max_length=100)\n+    name = models.CharField(max_length=80)\n+    is_active = models.BooleanField(default=True)\n+\n+    class Meta:\n+        constraints = [\n+            models.UniqueConstraint(\n+                fields=['ean'],\n+                name='partial_ean_unique',\n+                condition=models.Q(is_active=True)\n+            ),\n+            models.UniqueConstraint(\n+                fields=['brand', 'name'],\n+                name='together_brand_name_unique',\n+            ),\n+        ]\n \n class Game(models.Model):\n     season = models.ForeignKey(Season, models.CASCADE, related_name='games')\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..fe276a8 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -905,6 +905,22 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(Child.check(), [])\n \n+    def test_ordering_across_nullable_fk_with_lookup(self):\n+        class Supply(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n+\n     def test_ordering_pointing_to_foreignkey_field(self):\n         class Parent(models.Model):\n             pass\n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..efc6156 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,29 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_not_in_group_by(self):\n+        # This test checks that a constant wrapped in ExpressionWrapper should not appear in GROUP BY.\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        sql = expr.get_group_by_cols(alias=None)\n+        self.assertNotIn(3, sql)\n+\n+    def test_non_constant_expression_in_group_by(self):\n+        # This test checks that non-constant expressions are handled correctly.\n+        expr = ExpressionWrapper(Lower(Value('field_value')), output_field=IntegerField())\n+        sql = expr.get_group_by_cols(alias=None)\n+        self.assertIn(expr.expression, sql)\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..56a74d0 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,39 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk(self):\n+        # Create authors with self-referential foreign keys\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2', editor=author_1)\n+        \n+        # Create articles associated with the authors\n+        a1 = Article.objects.create(author=author_2, headline='Article 1', pub_date='2023-01-01')\n+        a2 = Article.objects.create(author=author_1, headline='Article 2', pub_date='2023-01-02')\n+\n+        # Test order by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+    def test_order_by_complex_fk(self):\n+        # Test ordering with complex foreign key relationships\n+        author_3 = Author.objects.create(name='Author 3', editor=author_2)\n+        a3 = Article.objects.create(author=author_3, headline='Article 3', pub_date='2023-01-03')\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id', 'author__name'),\n+            ['Article 1', 'Article 3', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +386,39 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_order_by_self_referential_fk(self):\n+        # Create authors with self-referential foreign keys\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2', editor=author_1)\n+        \n+        # Create articles associated with the authors\n+        a1 = Article.objects.create(author=author_2, headline='Article 1', pub_date='2023-01-01')\n+        a2 = Article.objects.create(author=author_1, headline='Article 2', pub_date='2023-01-02')\n+\n+        # Test order by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+    def test_order_by_complex_fk(self):\n+        # Test ordering with complex foreign key relationships\n+        author_3 = Author.objects.create(name='Author 3', editor=author_2)\n+        a3 = Article.objects.create(author=author_3, headline='Article 3', pub_date='2023-01-03')\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id', 'author__name'),\n+            ['Article 1', 'Article 3', 'Article 2'],\n+            attrgetter('headline')\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..2289862 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -617,6 +617,33 @@ class BaseCacheTests:\n \n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n+    \n+    def test_cull_no_data(self):\n+        \"\"\"\n+        Test the _cull method when the database query returns no data.\n+        We're specifically testing the condition that led to the original issue\n+        to ensure it is properly handled.\n+        \"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+\n+        # Temporarily set the maximum entries to a low number to trigger culling.\n+        old_max_entries = cull_cache._max_entries\n+        cull_cache._max_entries = 1\n+        try:\n+            # Add a single item to the cache to hit the _cull sequence.\n+            cull_cache.set('test_no_data', 'value', 1000)\n+            # Forcefully invoke _cull via the cache's set mechanism.\n+            # This should not raise an error even if the cull operation\n+            # returns no data for the subsequent deletion query.\n+            cull_cache._get('test_no_data')  # Access it to invoke any response handling.\n+            \n+            # Ensure the item is still in the cache\n+            self.assertIs(cull_cache.has_key('test_no_data'), True)\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n \n     def test_zero_cull(self):\n         self._perform_cull_test('zero_cull', 50, 19)\n",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..b4a93b0 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -29,6 +29,13 @@ class Category(models.Model):\n \n \n class Writer(models.Model):\n+    archived = models.BooleanField(default=False, editable=False)\n+    objects = WriterManager()\n+\n+class WriterManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        return qs.filter(archived=False)\n     name = models.CharField(max_length=50, help_text='Use both first and last names.')\n \n     class Meta:\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..678a1be 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,20 +867,62 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_reference_mixed_case_app_label(self):\n         \"\"\"\n-        Including real apps can resolve dangling FK errors.\n-        This test relies on the fact that contenttypes is always loaded.\n+        Test using a ForeignKey with an app name that has mixed casing.\n         \"\"\"\n         new_apps = Apps()\n \n-        class TestModel(models.Model):\n-            ct = models.ForeignKey(\"contenttypes.ContentType\", models.CASCADE)\n+        class Author(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, models.CASCADE)\n \n             class Meta:\n-                app_label = \"migrations\"\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Magazine(models.Model):\n+            authors = models.ManyToManyField(Author)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n                 apps = new_apps\n \n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Author))\n+        project_state.add_model(ModelState.from_model(Book))\n+        project_state.add_model(ModelState.from_model(Magazine))\n+\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n+\n+    def test_mixed_case_app_label_in_installed_apps(self):\n+        \"\"\"\n+        Test to ensure no errors occur when the app label in INSTALLED_APPS has mixed correspondence.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'MiXeDcAsE_app'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, on_delete=models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXeDcAsE_app'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n+\n         # If we just stick it into an empty state it should fail\n         project_state = ProjectState()\n         project_state.add_model(ModelState.from_model(TestModel))\n",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..8ea1abb 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1209,14 +1209,56 @@ class ExpressionOperatorTests(TestCase):\n         Number.objects.filter(pk=self.n.pk).update(integer=F('integer') ** 2, float=F('float') ** 1.5)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n+    def test_duration_expressions_with_different_deltas(self):\n+        \"\"\"\n+        Additional test to ensure that various timedelta values can be correctly\n+        added to DurationField across all supported databases.\n+        \"\"\"\n+        from datetime import timedelta\n+        test_deltas = [\n+            timedelta(days=1),\n+            timedelta(weeks=2),\n+            timedelta(hours=3, minutes=45),\n+            timedelta(seconds=60),\n+            timedelta(milliseconds=1234),\n+            timedelta(microseconds=567890),\n+        ]\n+\n+        # Creating an initial experiment object\n+        initial_experiment = Experiment.objects.create(estimated_time=timedelta(days=1))\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+        for delta in test_deltas:\n+            with self.subTest(delta=delta):\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                result = qs.get(pk=initial_experiment.pk)\n+                self.assertEqual(result.duration, initial_experiment.estimated_time + delta)\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n+    def test_duration_expressions_with_different_deltas(self):\n+        \"\"\"\n+        Additional test to ensure that various timedelta values can be correctly\n+        added to DurationField across all supported databases.\n+        \"\"\"\n+        from datetime import timedelta\n+        test_deltas = [\n+            timedelta(days=1),\n+            timedelta(weeks=2),\n+            timedelta(hours=3, minutes=45),\n+            timedelta(seconds=60),\n+            timedelta(milliseconds=1234),\n+            timedelta(microseconds=567890),\n+        ]\n+\n+        # Creating an initial experiment object\n+        initial_experiment = Experiment.objects.create(estimated_time=timedelta(days=1))\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+        for delta in test_deltas:\n+            with self.subTest(delta=delta):\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                result = qs.get(pk=initial_experiment.pk)\n+                self.assertEqual(result.duration, initial_experiment.estimated_time + delta)\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n         Employee.objects.update(salary=F('salary').bitxor(48))\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..475d3ce 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1626,8 +1626,17 @@ class FTimeDeltaTests(TestCase):\n         )\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n-\n-    def test_duration_with_datetime(self):\n+    \n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Test for datetime subtraction without explicit ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        # Check that the subtraction results in correct timedelta (assume test data exists)\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..1d9a2ba 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,19 @@\n import operator\n \n+class ModelChoiceFieldUnionNoneTest(ModelForm):\n+    class Meta:\n+        model = Number\n+        fields = []\n+\n+    def test_union_none_with_model_choice_field(self):\n+        # Set up the model choice field using a union of querysets\n+        qs1 = Number.objects.filter(num__lt=2)\n+        qs2 = Number.objects.filter(num__gt=5)\n+        choice_field = forms.ModelMultipleChoiceField(qs1.union(qs2), required=False)\n+        self.assertEqual(list(choice_field.queryset.none()), [])\n+\n+from django.forms import ModelForm\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..f55533b 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -37,6 +37,8 @@ from django.utils import timezone\n \n from .models import SessionStore as CustomDatabaseSession\n \n+from django.utils.deprecation import RemovedInDjango40Warning\n+\n \n class SessionTestsMixin:\n     # This does not inherit from TestCase to avoid any tests being run with this\n@@ -312,6 +314,14 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        # Test that legacy data can be decoded correctly when DEFAULT_HASHING_ALGORITHM is 'sha1'\n+        data = {'a test key': 'a test value'}\n+        encoded_data = self.session.encode(data)\n+        self.assertEqual(self.session._legacy_decode(encoded_data), data)\n+\n     def test_decode_legacy(self):\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..985414a 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -590,7 +590,43 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                # Directly using offer_slug should raise an error if it is a SimpleLazyObject\n+                with self.assertRaises(TypeError):\n+                    get_object_or_404(Artist, slug=offer_slug)\n+\n+                # Converting to str should work\n+                offer_slug_str = str(offer_slug)\n+                artist = Artist.objects.get(name=offer_slug_str)\n+                return {\"artist\": artist, \"offer_slug\": offer_slug_str}\n+\n+        artist = Artist.objects.create(name='Rene Magritte')\n+        OfferView.as_view()(self.rf.get('/', slug=artist.name))\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_handling_simplelazyobject(self):\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                # Resolve SimpleLazyObject correctly\n+                if hasattr(offer_slug, '_wrapped'):\n+                    offer_slug = str(offer_slug)\n+                artist = Artist.objects.get(name=offer_slug)\n+                return {**context, 'artist': artist}\n+\n+        artist = Artist.objects.create(name='Salvador Dali')\n+        response = OfferView.as_view()(self.rf.get('/', offer_slug=artist.name))\n+        self.assertEqual(response.context_data['artist'], artist)\n+        self.assertEqual(response.context_data['artist'].name, 'Salvador Dali')\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..3505025 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -4,6 +4,8 @@ from decimal import Decimal\n from unittest import mock, skipUnless\n \n from django import forms\n+from django.db import models\n+from django.test.utils import isolate_apps\n from django.core.exceptions import (\n     NON_FIELD_ERRORS, FieldError, ImproperlyConfigured, ValidationError,\n )\n@@ -2829,6 +2831,67 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+class ForeignKeyChoicesTests(TestCase):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        threepwood = Character.objects.create(username='Threepwood')\n+        marley = Character.objects.create(username='Marley')\n+        \n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+        \n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+        \n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood]\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood]\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood]\n+        )\n \n class FormFieldCallbackTests(SimpleTestCase):\n \n",
  "django__django-13343": "",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..0bccd3f 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,6 +632,19 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n+    def test_key_in_lookup(self):\n+        tests = [\n+            ('value__key__in', [0], self.objs[0:2]),  # Assuming these objs have the key matching the filter\n+            ('value__key__in', [0, 1], self.objs[0:3]),  # Assuming these objs have the key matches 0 or 1\n+            ('value__key__in', [2], []),  # Assuming no objs match the key 2\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n+\n     def test_key_icontains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..45429d6 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -14,6 +14,8 @@ from django.db.models.functions import (\n     TruncMinute, TruncMonth, TruncQuarter, TruncSecond, TruncTime, TruncWeek,\n     TruncYear,\n )\n+import pytz\n+from datetime import datetime\n from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n@@ -1133,7 +1135,28 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_trunctime_with_tzinfo(self):\n+        # Creating a test case for TruncDate and TruncTime with tzinfo parameter.\n+        start_datetime = datetime(2023, 10, 20, 15, 30, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.UTC)\n+\n+        melb = pytz.timezone('Australia/Melbourne')\n+        sydney = pytz.timezone('Australia/Sydney')\n+\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            sydney_date=TruncDate('start_datetime', tzinfo=sydney),\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            sydney_time=TruncTime('start_datetime', tzinfo=sydney),\n+        ).order_by('start_datetime').get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        sydney_start_datetime = start_datetime.astimezone(sydney)\n+\n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.sydney_date, sydney_start_datetime.date())\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.sydney_time, sydney_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..5c838c0 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -93,9 +93,55 @@ class BasicFieldTests(SimpleTestCase):\n     def test_field_instance_is_picklable(self):\n         \"\"\"Field instances can be pickled.\"\"\"\n         field = models.Field(max_length=100, default='a string')\n-        # Must be picklable with this cached property populated (#28188).\n-        field._get_default\n-        pickle.dumps(field)\n+class AbstractModelFieldTests(SimpleTestCase):\n+\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+    def test_abstract_field_ordering(self):\n+        \"\"\"Test less-than ordering maintains expected behavior.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertLess(abstract_model_field.creation_counter, inherit1_model_field.creation_counter)\n+        self.assertLess(abstract_model_field.creation_counter, inherit2_model_field.creation_counter)\n+        self.assertLess(inherit1_model_field.creation_counter, inherit2_model_field.creation_counter)\n \n     def test_deconstruct_nested_field(self):\n         \"\"\"deconstruct() uses __qualname__ for nested class support.\"\"\"\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..cbdb619 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,42 @@\n+\n+class FileLockTestCase(unittest.TestCase):\n+    def test_exclusive_lock(self):\n+        # Create a temporary file for testing\n+        with tempfile.NamedTemporaryFile() as temp_file:\n+            with open(temp_file.name, 'r+b') as f1, open(temp_file.name, 'r+b') as f2:\n+                # Acquire an exclusive lock on f1\n+                self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+                # Try to acquire an exclusive non-blocking lock on f2 (should return False)\n+                self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+                # Try to acquire a shared non-blocking lock on f2 (should return False)\n+                self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+                # Unlock f1\n+                self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        # Create a temporary file for testing\n+        with tempfile.NamedTemporaryFile() as temp_file:\n+            with open(temp_file.name, 'r+b') as f1, open(temp_file.name, 'r+b') as f2:\n+                # Acquire a shared lock on f1\n+                self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+                # Try to acquire a shared non-blocking lock on f2 (should succeed since f1 is also shared)\n+                self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+                # Unlock f1 and f2\n+                self.assertIs(locks.unlock(f1), True)\n+                self.assertIs(locks.unlock(f2), True)\n+\n+    def test_re_locking(self):\n+        # Create a temporary file for testing\n+        with tempfile.NamedTemporaryFile() as temp_file:\n+            with open(temp_file.name, 'r+b') as f:\n+                # Re-acquire lock without releasing it and ensure it fails\n+                self.assertIs(locks.lock(f, locks.LOCK_EX), True)\n+                self.assertIs(locks.lock(f, locks.LOCK_EX | locks.LOCK_NB), False)\n+                # Unlock and try again to ensure locking works\n+                self.assertIs(locks.unlock(f), True)\n+                self.assertIs(locks.lock(f, locks.LOCK_EX), True)\n+                self.assertIs(locks.unlock(f), True)\n+\n import errno\n import gzip\n import os\n@@ -8,7 +47,8 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n+from pathlib import Path\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n",
  "django__django-13417": "",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..08704ee 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -335,6 +335,33 @@ class CommandTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 management.call_command('subparser_dest', subcommand='foo', bar=12)\n \n+    def test_command_output_flush(self):\n+        \"\"\"Test that output is flushed immediately.\"\"\"\n+        out = StringIO()\n+        err = StringIO()\n+        command = BaseCommand(stdout=out, stderr=err)\n+        \n+        command.stdout.write(\"Starting...\\n\")\n+        command.stdout.flush()\n+        command.stdout.write(\"Continuing...\\n\")\n+        out.seek(0)\n+        self.assertEqual(out.read(), \"Starting...\\nContinuing...\\n\")\n+\n+    def test_migration_command_flush_behavior(self):\n+        \"\"\"Integration test to ensure that migration progress output is flushed correctly.\"\"\"\n+        out = StringIO()\n+        management.call_command('migrate', stdout=out)\n+        out.seek(0)\n+        # Check that the output at least begins with the migration progress, assuming\n+        # there's a migration named `myapp.0002_auto_20200817_1030` in the test environment.\n+        expected_start = (\n+            \"Operations to perform:\\n\"\n+            \"  Apply all migrations: myapp\\n\"\n+            \"Running migrations:\\n\"\n+            \"  Applying myapp.0002_auto_20200817_1030...\"\n+        )\n+        self.assertIn(expected_start, out.getvalue())\n+\n     def test_create_parser_kwargs(self):\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\n         epilog = 'some epilog text'\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..b4e9622 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +39,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..e73cce2 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,9 +1,11 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n from django.db import models\n+from django.db.models import Q, UniqueConstraint\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n@@ -137,8 +139,60 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n                 id='auth.E005',\n             ),\n         ])\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserPartiallyUnique')\n+    def test_username_partially_unique(self):\n+        class CustomUserPartiallyUnique(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='partial_username_unique',\n+                        condition=Q(password__isnull=False),\n+                    ),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'CustomUserPartiallyUnique.username' must be unique because \"\n+                \"it is named as the 'USERNAME_FIELD'.\",\n+                obj=CustomUserPartiallyUnique,\n+                id='auth.E003',\n+            ),\n+        ])\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [\n+                checks.Warning(\n+                    \"'CustomUserPartiallyUnique.username' is named as the \"\n+                    \"'USERNAME_FIELD', but it is not unique.\",\n+                    hint=(\n+                        'Ensure that your authentication backend(s) can '\n+                        'handle non-unique usernames.'\n+                    ),\n+                    obj=CustomUserPartiallyUnique,\n+                    id='auth.W004',\n+                ),\n+            ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraint')\n+    def test_username_unique_with_model_constraint(self):\n+        class CustomUserUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique'),\n+                ]\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..934445d 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n@@ -813,7 +815,30 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5040 Ltd', num_employees=50, num_chairs=40, ceo=ceo)\n         Company.objects.create(name='5050 Ltd', num_employees=50, num_chairs=50, ceo=ceo)\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n-        Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n+        cls.c5 = Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n+        \n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_with_mismatched_namedtuple(self):\n+        # This test checks if mismatched namedtuple arguments (too few attributes) raise an appropriate error\n+        IncompleteEmployeeRange = namedtuple('IncompleteEmployeeRange', ['minimum'])\n+        with self.assertRaises(TypeError):\n+            Company.objects.filter(\n+                num_employees__range=IncompleteEmployeeRange(minimum=51),\n+            )\n+\n+    def test_range_lookup_with_sufficient_namedtuple(self):\n+        # This test ensures more general namedtuples that have extra fields (but are appropriately matched) don't break.\n+        GeneralRange = namedtuple('EmployeeRange', ['minimum', 'maximum', 'extra'])\n+        qs = Company.objects.filter(\n+            num_employees__range=GeneralRange(minimum=51, maximum=100, extra='extra_field'),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n \n     def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n         # __in lookups can use F() expressions for integers.\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..41dc2e3 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -13,6 +13,7 @@ import tempfile\n import unittest\n from io import StringIO\n from unittest import mock\n+from django.test.utils import captured_stderr, captured_stdout\n \n from django import conf, get_version\n from django.conf import settings\n@@ -32,6 +33,41 @@ from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n \n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_main(self):\n+        \"\"\"\n+        Program name `__main__.py` should be converted to 'python -m django'.\n+        \"\"\"\n+        args = ['help', 'check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['__main__.py'] + args)\n+        self.assertIn('usage: python -m django check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_custom_prog(self):\n+        \"\"\"\n+        Test custom program name set via `argv` directly affects the output.\n+        \"\"\"\n+        args = ['my-custom-admin', 'help', 'migrate']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args[1:]):\n+                execute_from_command_line(args)\n+        self.assertIn('usage: my-custom-admin migrate', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..b9f4e09 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,6 +1,9 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n+from datetime import datetime\n+from django.utils import dateformat\n from django.test.utils import TZ_SUPPORT, requires_tz_support\n from django.utils import dateformat, translation\n from django.utils.dateformat import format\n@@ -157,6 +160,21 @@ class DateFormatTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 dateformat.format(my_birthday, specifier)\n \n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (1000, '00'),  # Additional test for boundary condition\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n+\n     def test_r_format_with_non_en_locale(self):\n         # Changing the locale doesn't change the \"r\" format.\n         dt = datetime(1979, 7, 8, 22, 00)\n@@ -164,4 +182,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..786d63c 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,10 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_password_hash_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertTrue(field.disabled, \"The ReadOnlyPasswordHashField should have the 'disabled' property set to True by default.\")\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..0b517b4 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -118,8 +118,48 @@ class OptimizerTests(SimpleTestCase):\n                 migrations.CreateModel('Foo', fields=[], options={'verbose_name_plural': 'Foozes'}),\n             ]\n         )\n+    def test_create_model_with_emptying_options(self):\n+        \"\"\"\n+        Test that CreateModel removes options when squashing with an empty AlterModelOptions.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'proxy': True},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [migrations.CreateModel('MyModel', fields=[])],\n+        )\n \n-    def _test_create_alter_foo_delete_model(self, alter_foo):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'Initial Name',\n+                        'proxy': True,\n+                        'permissions': [('can_view', 'Can View')]\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={\n+                        'verbose_name': 'Updated Name'\n+                    },\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Updated Name'},\n+                ),\n+            ],\n+        )\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n         AlterOrderWithRespectTo, and DeleteModel should collapse into nothing.\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..dd8c3ab 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,8 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n-\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n from ..utils import setup\n \n \n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..4919e0a 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -17,12 +17,16 @@ from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n     skipUnlessDBFeature,\n )\n+from django.db import connection, IntegrityError, transaction\n+from .models import SQLKeywordsModel\n \n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n     VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n )\n+from django.db import connection, IntegrityError, transaction\n+from .models import SQLKeywordsModel\n \n \n class DateQuotingTest(TestCase):\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..3613ceb 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,12 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import unittest\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from unittest import mock\n+from io import StringIO\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n@@ -1342,6 +1348,38 @@ class ManageRunserverMigrationWarning(TestCase):\n             'app_waiting_migration.', output\n         )\n \n+class ManageRunserverSkipChecksTests(TestCase):\n+\n+    def setUp(self):\n+        self.output = StringIO()\n+\n+    @mock.patch('django.core.management.commands.runserver.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_system_checks(self, mocked_check, *mocked_objects):\n+        # Test with skip_checks=True\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+        self.output.truncate(0)\n+        self.output.seek(0)\n+\n+        # Test with skip_checks=False\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.output,\n+        )\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n+\n+...\n \n class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n     def setUp(self):\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..3b6ada4 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -171,6 +172,26 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n             cm.records[0].getMessage(),\n             \"MiddlewareNotUsed('middleware_exceptions.tests.MyMiddlewareWithExceptionMessage'): spam eggs\"\n         )\n+    \n+    @override_settings(\n+        ROOT_URLCONF='middleware_exceptions.urls',\n+        MIDDLEWARE=[\n+            'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware',\n+            'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        ],\n+    )\n+    async def test_middleware_not_used_poisoning(self):\n+        \"\"\"\n+        Test the scenario where a MiddlewareNotUsed exception causes \n+        side-effects passed down the middleware chain leading to improper handling.\n+        \"\"\"\n+        with self.assertRaisesMessage(RuntimeError, \n+            'Middleware middleware_exceptions.middleware.NotSyncOrAsyncMiddleware must '\n+            'have at least one of sync_capable/async_capable set to True.'\n+        ):\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+            self.assertEqual(response.content, b'')\n+            self.assertNotEqual(response.status_code, 200)\n \n     @override_settings(\n         DEBUG=False,\n@@ -251,6 +272,26 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             cm.records[0].getMessage(),\n             'Payment Required: /middleware_exceptions/view/',\n         )\n+    \n+    @override_settings(\n+        ROOT_URLCONF='middleware_exceptions.urls',\n+        MIDDLEWARE=[\n+            'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware',\n+            'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        ],\n+    )\n+    async def test_middleware_not_used_poisoning(self):\n+        \"\"\"\n+        Test the scenario where a MiddlewareNotUsed exception causes \n+        side-effects passed down the middleware chain leading to improper handling.\n+        \"\"\"\n+        with self.assertRaisesMessage(RuntimeError, \n+            'Middleware middleware_exceptions.middleware.NotSyncOrAsyncMiddleware must '\n+            'have at least one of sync_capable/async_capable set to True.'\n+        ):\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+            self.assertEqual(response.content, b'')\n+            self.assertNotEqual(response.status_code, 200)\n \n     @override_settings(\n         DEBUG=False,\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..bedbe10 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,6 +1,7 @@\n+\n import compileall\n import os\n-\n+from importlib import import_module\n from django.db import connection, connections\n from django.db.migrations.exceptions import (\n     AmbiguityError, InconsistentMigrationHistory, NodeNotFoundError,\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..0352652 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -9,6 +9,8 @@ from unittest import mock\n \n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n+import mock\n+from django.core.exceptions import ImproperlyConfigured\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n from django.db.utils import ConnectionHandler\n from django.test import (\n@@ -36,7 +38,12 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_older_than_3_9_0(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..6ae92db 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -158,7 +158,23 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_main_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+            )\n+\n+    @mock.patch('sys.argv', ['-m', 'non_existent_pkg.runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_with_non_existent_package(self):\n+        with self.assertRaises(RuntimeError) as cm:\n+            autoreload.get_child_arguments()\n+        self.assertIn('Script -m does not exist.', str(cm.exception))\n+\n+    @mock.patch('sys.argv', [test_main.__file__, 'some_other_command'])\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,7 +189,23 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_main_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+            )\n+\n+    @mock.patch('sys.argv', ['-m', 'non_existent_pkg.runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_with_non_existent_package(self):\n+        with self.assertRaises(RuntimeError) as cm:\n+            autoreload.get_child_arguments()\n+        self.assertIn('Script -m does not exist.', str(cm.exception))\n+\n+    @mock.patch('sys.argv', [test_main.__file__, 'some_other_command'])\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "",
  "django__django-13933": "",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..f91f1f6 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -61,16 +61,11 @@ class Second(models.Model):\n class Third(models.Model):\n     name = models.CharField(max_length=20)\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n \n-\n-class Parent(models.Model):\n-    name = models.CharField(max_length=20, unique=True)\n-    bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n-\n-\n-class Child(models.Model):\n-    name = models.CharField(max_length=20)\n-    parent = models.ForeignKey(Parent, models.CASCADE)\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n \n \n class ChildNullableParent(models.Model):\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..bff9500 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..0e65cce 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,29 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        # No file should be yielded twice during post-processing.\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+        \n+        post_processed_files = stats['post_processed']\n+        \n+        # Convert list to set, a set does not allow duplicates\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n+    def test_correct_number_of_processed_files_reported(self):\n+        # Validate that the number of yielded files corresponds to the actual files processed\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Total files processed should equal reported processed + unmodified\n+        total_yielded = len(stats['post_processed']) + len(stats['unmodified'])\n+        total_files = len(stats['found'])\n+        \n+        self.assertEqual(total_yielded, total_files)\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +237,29 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        # No file should be yielded twice during post-processing.\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+        \n+        post_processed_files = stats['post_processed']\n+        \n+        # Convert list to set, a set does not allow duplicates\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n+    def test_correct_number_of_processed_files_reported(self):\n+        # Validate that the number of yielded files corresponds to the actual files processed\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Total files processed should equal reported processed + unmodified\n+        total_yielded = len(stats['post_processed']) + len(stats['unmodified'])\n+        total_files = len(stats['found'])\n+        \n+        self.assertEqual(total_yielded, total_files)\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..e8edd4e 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,7 +1,9 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n \n+import collections.abc\n import copy\n import pickle\n \n@@ -17,8 +19,29 @@ class OrderedSetTests(SimpleTestCase):\n     def test_init_with_iterable(self):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n-\n-    def test_remove(self):\n+    \n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_multiple_types(self):\n+        s = reversed(OrderedSet([1, \"a\", (2, 3), 4.0]))\n+        self.assertEqual(list(s), [4.0, (2, 3), \"a\", 1])\n+\n+    def test_reversed_duplicates(self):\n+        s = OrderedSet([1, 1, 2, 3, 3])\n+        reversed_s = reversed(s)\n+        self.assertEqual(list(reversed_s), [3, 2, 1])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..3700c52 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -834,11 +834,22 @@ class BasicExpressionsTests(TestCase):\n             Exists(is_poc) | Q(),\n             Q() | Exists(is_poc),\n         ]\n+\n+    def test_single_child_q_deconstruction(self):\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q = Q(Exists(tagged))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n         for conditions in tests:\n             with self.subTest(conditions):\n                 self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n \n \n+from django.db.models import Exists, F, OuterRef, Q\n+from .models import Employee, Company\n+\n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..13d65b9 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import override_settings\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -6,7 +8,25 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_options')\n class TestDefaultPK(SimpleTestCase):\n-    @override_settings(DEFAULT_AUTO_FIELD='django.db.models.NonexistentAutoField')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.tests.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.tests.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     def test_default_auto_field_setting_nonexistent(self):\n         msg = (\n             \"DEFAULT_AUTO_FIELD refers to the module \"\n",
  "django__django-14311": "",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..a00d2e0 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -229,6 +229,14 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    # Test for newlines, carriage returns, and tabs within URLs\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n+\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..52bab45 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,6 +1526,39 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.test import TestCase\n+from django.db.models import Q, Count\n+from myapp.models import Agent, PropertyGroup  # Import models relevant to the test context\n+\n+class QObjectOrTestCase(TestCase):\n+    def setUp(self):\n+        # Setup initial data needed for the tests here\n+        self.agent1 = Agent.objects.create(name=\"Agent 1\")\n+        self.group1 = PropertyGroup.objects.create(name=\"Group 1\")\n+        self.agent1.property_groups.add(self.group1)\n+\n+    def test_q_object_with_in_clause(self):\n+        # Test case for the non-working Q object pattern mentioned in the issue\n+        property_groups = PropertyGroup.objects.filter(id__in=[self.group1.id])\n+        queryset = Agent.objects.annotate(Count(\"property_groups\"))\n+        # This is the problematic query pattern\n+        qs = queryset.filter(\n+            Q(property_groups__in=property_groups) | Q(property_groups__count=0)\n+        ).distinct()\n+        # Assert that queryset does not raise a ProgrammingError and returns expected results\n+        self.assertQuerysetEqual(qs, [self.agent1], transform=lambda x: x)\n+\n+    def test_q_object_with_id_in_clause(self):\n+        # Test case for the working Q object pattern\n+        property_group_ids = PropertyGroup.objects.values_list('id', flat=True)\n+        queryset = Agent.objects.annotate(Count(\"property_groups\"))\n+        # This is the working query pattern\n+        qs = queryset.filter(\n+            Q(property_groups__id__in=property_group_ids) | Q(property_groups__count=0)\n+        ).distinct()\n+        # Assert that queryset returns expected results without errors\n+        self.assertQuerysetEqual(qs, [self.agent1], transform=lambda x: x)\n+\n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..8a0d6b9 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -157,6 +157,11 @@ class DateFormatTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 dateformat.format(my_birthday, specifier)\n \n+import unittest\n+from datetime import datetime\n+from django.utils import dateformat\n+\n+class TestDateFormat(unittest.TestCase):\n     def test_r_format_with_non_en_locale(self):\n         # Changing the locale doesn't change the \"r\" format.\n         dt = datetime(1979, 7, 8, 22, 00)\n@@ -179,6 +184,13 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n+    def test_y_format_year_before_1000(self):\n+        # Verifying that 'Y' formats years below 1000 correctly with zero-padding.\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+        self.assertEqual(dateformat.format(datetime(1000, 1, 1), 'Y'), '1000')\n+        self.assertEqual(dateformat.format(datetime(2023, 1, 1), 'Y'), '2023')\n+\n     def test_twelve_hour_format(self):\n         tests = [\n             (0, '12'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..4000584 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -67,8 +67,56 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             }),\n             (expected_args, expected_env),\n         )\n+    def test_deprecated_kwargs(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        \n+        # Testing deprecated 'db' and 'passwd'\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n \n-    def test_options_password(self):\n+        # Testing non-deprecated 'database' and 'password'\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n         expected_args = [\n             'mysql',\n             '--user=someuser',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..6d354e2 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2197,8 +2197,32 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n+    \n+    def test_unique_constraint_with_table_instance(self):\n+        # Test to ensure using the correct argument type for create_sql\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='test_name_uq')\n+        \n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        \n+        table = Author._meta.db_table\n+        self.assertIs(sql.references_table(table), True)\n+        self.assertIs(sql.references_column(table, 'name'), True)\n+        \n+        # Edge Case: Ensure that passing a Table instance doesn\u2019t occur unintentionally\n+        with self.assertRaises(TypeError):\n+            constraint = UniqueConstraint(fields=[Author], name='invalid_type_uq')\n+            with connection.schema_editor() as editor:\n+                editor.add_constraint(Author, constraint)\n \n-    @skipUnlessDBFeature('supports_expression_indexes')\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-14493": "",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..f112491 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -641,6 +641,8 @@ class ExecutorTests(MigrationTestBase):\n         recorder = MigrationRecorder(connection)\n         # Record all replaced migrations as applied\n         recorder.record_applied(\"migrations\", \"0001_initial\")\n+        self.test_unapply_squashed_migration()\n+        self.test_squashed_migration_unapplied_if_replaced_migrations_exist()\n         recorder.record_applied(\"migrations\", \"0002_second\")\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n@@ -653,7 +655,56 @@ class ExecutorTests(MigrationTestBase):\n             recorder.applied_migrations(),\n         )\n \n-    # When the feature is False, the operation and the record won't be\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_unapply_squashed_migration(self):\n+        \"\"\"Test that unapplied squashed migrations are correctly marked.\"\"\"\n+\n+        # Set up the executor and apply the squashed migration\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+\n+        try:\n+            # Assert that the squashed migration is recorded as applied\n+            self.assertIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+        finally:\n+            # Unapply the squashed migration\n+            executor.loader.build_graph()\n+            executor.migrate([('migrations', None)])\n+            # Ensure the squashed migration is marked as unapplied\n+            self.assertNotIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+\n+    def test_squashed_migration_unapplied_if_replaced_migrations_exist(self):\n+        \"\"\"Ensure squashed migration is unapplied alongside replaced ones.\"\"\"\n+        # Apply the replaced migrations explicitly\n+        recorder = MigrationRecorder(connection)\n+        recorder.record_applied(\"migrations\", \"0001_initial\")\n+        self.test_unapply_squashed_migration()\n+        self.test_squashed_migration_unapplied_if_replaced_migrations_exist()\n+        recorder.record_applied(\"migrations\", \"0002_second\")\n+\n+        # Ensure the squashed migration is treated as applied\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n+        self.assertIn(\n+            (\"migrations\", \"0001_squashed_0002\"),\n+            recorder.applied_migrations()\n+        )\n+\n+        # Unapply the replaced migrations\n+        executor.migrate([(\"migrations\", \"0001_initial\")])\n+        executor.migrate([(\"migrations\", None)])\n+\n+        # Confirm that the squashed migration is also unapplied\n+        self.assertNotIn(\n+            (\"migrations\", \"0001_squashed_0002\"),\n+            recorder.applied_migrations()\n+        )\n     # performed in a transaction and the test will systematically pass.\n     @skipUnlessDBFeature('can_rollback_ddl')\n     def test_migrations_applied_and_recorded_atomically(self):\n",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..a95e9bb 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,47 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+from django.test import TestCase\n+from myapp.models import Note, CustomPk, Valid, Detail, Paragraph, Member  # Import models used in testing\n+\n+class BulkUpdateTests(TestCase):\n+    def setUp(self):\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+\n+    def test_bulk_update_returns_correct_count(self):\n+        # Test bulk_update returns 0 when there are no objects to update\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+        # Test bulk_update returns the correct count of updated rows\n+        notes = list(Note.objects.all())\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_with_duplicates(self):\n+        # Setup single note\n+        note = Note.objects.create(note='test-note', misc='test')\n+\n+        # Test with duplicate notes\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+        # Test duplicates in different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n+\n+    def test_bulk_update_with_no_changes(self):\n+        # Test when no actual changes are made\n+        notes = list(Note.objects.all())\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+        # Update again with no changes\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..dfd7932 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,7 +984,69 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n-    def test_formset_iteration(self):\n+    def test_formset_nonform_css_class(self):\n+        \"\"\"\n+        Test that the nonform CSS class is added to non-form errors in formsets.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',\n+            'drinks-INITIAL_FORMS': '0',\n+            'drinks-MIN_NUM_FORMS': '0',\n+            'drinks-MAX_NUM_FORMS': '0',\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(\n+            str(non_form_errors),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n+\n+    def test_formset_max_num_error_has_nonform_class(self):\n+        \"\"\"\n+        Verify max_num validation errors have the nonform CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '2',\n+            'choices-0-choice': 'Drink A',\n+            'choices-0-votes': '10',\n+            'choices-1-choice': 'Drink B',\n+            'choices-1-votes': '5',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(\n+            str(non_form_errors),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n+\n+    def test_formset_min_num_error_has_nonform_class(self):\n+        \"\"\"\n+        Verify min_num validation errors have the nonform CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '1',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '3',\n+            'choices-MAX_NUM_FORMS': '0',\n+            'choices-0-choice': 'Drink C',\n+            'choices-0-votes': '20',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(\n+            str(non_form_errors),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n         formset = ChoiceFormset()\n",
  "django__django-14631": "",
  "django__django-14672": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 6fb82ec..4cb603d 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -821,6 +821,31 @@ class ShadowingFieldsTests(SimpleTestCase):\n             )\n         ])\n \n+    def test_proxy_model_through_fields_unhashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # Expect no errors now if issue is fixed\n+        self.assertEqual(Child.check(), [])\n+\n     def test_multiinheritance_clash(self):\n         class Mother(models.Model):\n             clash = models.IntegerField()\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..32aef1e 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -8,7 +9,8 @@ from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n-from django.test import RequestFactory, override_settings\n+from django.test import RequestFactory, override_settings, TestCase\n+import datetime\n from django.urls import reverse, reverse_lazy\n \n from .admin import AnswerAdmin, QuestionAdmin\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..1e554a4 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,8 +923,36 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n-\n-    def test_ignore_order_wrt(self):\n+    \n+    def test_real_apps_non_set(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_as_set(self):\n+        # This should not raise any assertion as real_apps is a set\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_as_none(self):\n+        # This should not raise any assertion as real_apps is None\n+        try:\n+            ProjectState(real_apps=None)\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_as_empty_set(self):\n+        # This should not raise any assertion as real_apps is an empty set\n+        try:\n+            ProjectState(real_apps=set())\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_as_empty_list(self):\n+        # This should raise an assertion error because real_apps is a list, not a set\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=[])\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..5200c65 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -237,6 +237,12 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    def test_xoptions_passed(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n         del module.__spec__\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..278c1c7 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -199,7 +199,51 @@ class MethodDecoratorTests(SimpleTestCase):\n     \"\"\"\n     Tests for method_decorator\n     \"\"\"\n-    def test_preserve_signature(self):\n+    from django.utils.decorators import method_decorator\n+    from functools import wraps, partial\n+    import unittest\n+    \n+    class TestMethodDecoratorPreservesWrapperAssignments(unittest.TestCase):\n+        def test_wrapper_assignments_with_partial(self):\n+            \"\"\"@method_decorator correctly wraps partial objects and maintains attributes.\"\"\"\n+            def test_decorator(func):\n+                @wraps(func)\n+                def inner(*args, **kwargs):\n+                    return func(*args, **kwargs)\n+                return inner\n+        \n+            class Test:\n+                @method_decorator(test_decorator)\n+                def method(self):\n+                    \"\"\"Method documentation\"\"\"\n+                    return 'hello world'\n+        \n+            instance = Test()\n+            result = instance.method()\n+            self.assertEqual(result, 'hello world')\n+            self.assertEqual(Test.method.__name__, 'method')\n+            self.assertEqual(Test.method.__doc__, 'Method documentation')\n+            self.assertEqual(instance.method.__name__, 'method')\n+            self.assertEqual(instance.method.__doc__, 'Method documentation')\n+\n+        def test_docstring_and_name(self):\n+            \"\"\"Ensure docstring and name are preserved.\"\"\"\n+            def simple_decorator(f):\n+                @wraps(f)\n+                def wrapper(*args, **kwargs):\n+                    return f(*args, **kwargs)\n+                return wrapper\n+\n+            class Test:\n+                @method_decorator(simple_decorator)\n+                def decorated_method(self):\n+                    \"\"\"Original docstring\"\"\"\n+                    return \"decorated\"\n+\n+            method = Test().decorated_method\n+            self.assertEqual(method(), \"decorated\")\n+            self.assertEqual(method.__name__, \"decorated_method\")\n+            self.assertEqual(method.__doc__, \"Original docstring\")\n         class Test:\n             @simple_dec_m\n             def say(self, arg):\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..ec510df 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5131,8 +5131,49 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         )\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test that readonly ForeignKey fields render correctly with default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test that readonly ForeignKey fields render with correct namespace for custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom-admin')\n+\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper method to test readonly ForeignKey links.\n+        \"\"\"\n+        from django.urls import reverse\n+        from .models import ReadOnlyRelatedField, Language\n+        from django.contrib.auth.models import User\n+        from django.contrib.admin.sites import site2\n \n-    def test_readonly_manytomany_backwards_ref(self):\n+        # Create objects for testing\n+        obj = ReadOnlyRelatedField.objects.create()\n+        language = Language.objects.create(iso='en', name='English')\n+        self.superuser = User.objects.create_superuser('admin', 'admin@test.com', 'password')\n+\n+        # Register models with the custom admin site if needed\n+        if admin_site == 'custom-admin':\n+            site2.register(ReadOnlyRelatedField, ReadOnlyRelatedFieldAdmin)\n+            site2.register(Language)\n+\n+        # Test URL generation for the ForeignKey readonly field\n+        obj_url = reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(language.pk,))\n+\n+        self.client.login(username=self.superuser.username, password='password')\n+        response = self.client.get(obj_url)\n+        self.assertEqual(response.status_code, 200)\n+        self.assertContains(\n+            response,\n+            f'<div class=\"readonly\"><a href=\"{language_url}\">en</a></div>',\n+            html=True,\n+        )\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n         broke if the related field is read-only due to the help_text attribute\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8bb77cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..6997940 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -153,6 +153,42 @@ class ChangeListTests(TestCase):\n         cl = ia.get_changelist_instance(request)\n         self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n \n+    def test_many_search_terms(self):\n+        parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=parent, name='Danielle')\n+        Child.objects.create(parent=parent, name='Daniel')\n+\n+        m = ParentAdmin(Parent, custom_site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel ' * 80})\n+        request.user = self.superuser\n+\n+        cl = m.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            object_count = cl.queryset.count()\n+        self.assertEqual(object_count, 1)\n+        self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 1)\n+\n+    def test_related_field_multiple_search_terms(self):\n+        \"\"\"\n+        Searches over multi-valued relationships return rows from related\n+        models only when all searched fields match that row.\n+        \"\"\"\n+        parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=parent, name='Danielle', age=18)\n+        Child.objects.create(parent=parent, name='Daniel', age=19)\n+\n+        m = ParentAdminTwoSearchFields(Parent, custom_site)\n+\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'danielle 19'})\n+        request.user = self.superuser\n+        cl = m.get_changelist_instance(request)\n+        self.assertEqual(cl.queryset.count(), 0)\n+\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel 19'})\n+        request.user = self.superuser\n+        cl = m.get_changelist_instance(request)\n+        self.assertEqual(cl.queryset.count(), 1)\n+\n     def test_result_list_empty_changelist_value(self):\n         \"\"\"\n         Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored\n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..42e4010 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,9 +1,20 @@\n+\n from django.test import SimpleTestCase\n \n from ..utils import setup\n \n \n class JsonScriptTests(SimpleTestCase):\n+    @setup({'json-tag02': '{{ value|json_script }}'})\n+    def test_without_id(self):\n+        output = self.engine.render_to_string('json-tag02', {'value': {}})\n+        self.assertEqual(output, '<script type=\"application/json\">{}</script>')\n+\n+    def test_json_script_without_id(self):\n+        self.assertHTMLEqual(\n+            json_script({'key': 'value'}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n \n     @setup({'json-tag01': '{{ value|json_script:\"test_id\" }}'})\n     def test_basic(self):\n@@ -16,4 +27,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..a76ee9c 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2835,6 +2835,71 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n+class MigrationAutodetectorCustomFKTests(SimpleTestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_custom_fk_without_removing_to(self):\n+        class SimpleForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Publisher'\n+                super().__init__(*args, **kwargs)\n+\n+        publisher_fk = ModelState('testapp', 'Library', [\n+            ('publisher', SimpleForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [],\n+            [publisher_fk],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Library')\n+    \n+    def get_changes(self, before, after):\n+        autodetector = MigrationAutodetector(before, after)\n+        changes = autodetector._detect_changes()\n+        return changes\n+\n+    # Mock methods to simulate the original test environment. These methods\n+    # would be part of the test suite framework.\n+    def assertNumberMigrations(self, changes, app_label, number):\n+        self.assertEqual(len(changes.get(app_label, [])), number)\n+\n+    def assertOperationTypes(self, changes, app_label, migration_index, types):\n+        operations = changes[app_label][migration_index].operations\n+        self.assertEqual([type(op).__name__ for op in operations], types)\n+\n+    def assertOperationAttributes(self, changes, app_label, migration_index, op_index, **attrs):\n+        operation = changes[app_label][migration_index].operations[op_index]\n+        for attr_name, expected_value in attrs.items():\n+            self.assertEqual(getattr(operation, attr_name), expected_value)\n+\n+\n+from django.db import models\n+from django.db.migrations.state import ModelState\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.test import SimpleTestCase\n+\n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n",
  "django__django-15127": "",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..5f8e7db 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -613,7 +613,7 @@ class OrderItem(models.Model):\n \n \n class BaseUser(models.Model):\n-    pass\n+    annotation = models.ForeignKey(Annotation, models.CASCADE, null=True, blank=True)\n \n \n class Task(models.Model):\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..4bb90b6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1764,6 +1764,27 @@ class ValueTests(TestCase):\n         value = Value('name')\n         path, args, kwargs = value.deconstruct()\n         self.assertEqual(path, 'django.db.models.expressions.Value')\n+\n+    def test_deconstruct_F(self):\n+        f_expression = F('field_name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_ExpressionWrapper(self):\n+        wrapper = models.ExpressionWrapper(F('pages'), output_field=models.IntegerField())\n+        path, args, kwargs = wrapper.deconstruct()\n+        self.assertEqual(path, 'django.db.models.ExpressionWrapper')\n+        self.assertEqual(args, (F('pages'),))\n+        self.assertEqual(kwargs, {'output_field': models.IntegerField()})\n+\n+    def test_deconstruct_OrderBy(self):\n+        order_by = models.OrderBy(F('name').desc())\n+        path, args, kwargs = order_by.deconstruct()\n+        self.assertEqual(path, 'django.db.models.OrderBy')\n+        self.assertEqual(args, (F('name').desc(),))\n+        self.assertEqual(kwargs, {})\n         self.assertEqual(args, (value.value,))\n         self.assertEqual(kwargs, {})\n \n@@ -1771,6 +1792,27 @@ class ValueTests(TestCase):\n         value = Value('name', output_field=CharField())\n         path, args, kwargs = value.deconstruct()\n         self.assertEqual(path, 'django.db.models.expressions.Value')\n+\n+    def test_deconstruct_F(self):\n+        f_expression = F('field_name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_ExpressionWrapper(self):\n+        wrapper = models.ExpressionWrapper(F('pages'), output_field=models.IntegerField())\n+        path, args, kwargs = wrapper.deconstruct()\n+        self.assertEqual(path, 'django.db.models.ExpressionWrapper')\n+        self.assertEqual(args, (F('pages'),))\n+        self.assertEqual(kwargs, {'output_field': models.IntegerField()})\n+\n+    def test_deconstruct_OrderBy(self):\n+        order_by = models.OrderBy(F('name').desc())\n+        path, args, kwargs = order_by.deconstruct()\n+        self.assertEqual(path, 'django.db.models.OrderBy')\n+        self.assertEqual(args, (F('name').desc(),))\n+        self.assertEqual(kwargs, {})\n         self.assertEqual(args, (value.value,))\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..148497e 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1731,7 +1731,43 @@ class AutodetectorTests(TestCase):\n             index_together={('name',), ('age',)},\n         )\n \n-    def test_rename_field_and_foo_together(self):\n+    def test_optimize_alter_foo_together(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are optimized into a single operation.\n+        \"\"\"\n+        # Initial state: constraints are removed\n+        initial_state = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+        ]\n+\n+        # Target state: constraints are added\n+        target_state = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+\n+        # Check that optimization reduces to a single operation for each constraint type\n+        changes = self.get_changes(initial_state, target_state)\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(changes, 'otherapp', 0, 0, name='mymodel', unique_together={(\"col\",)})\n+        self.assertOperationAttributes(changes, 'otherapp', 0, 1, name='mymodel', index_together={(\"col\",)})\n         \"\"\"Fields are renamed before updating index/unique_together.\"\"\"\n         changes = self.get_changes(\n             [self.author_empty, self.book_foo_together_3],\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..47ce123 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1853,7 +1853,44 @@ class ValueTests(TestCase):\n             Value(object()).output_field\n \n \n-class ExistsTests(TestCase):\n+from datetime import datetime, date, time, timedelta\n+from decimal import Decimal\n+import uuid\n+from django.db.models import Value\n+from django.core.exceptions import FieldError\n+from django.test import TestCase\n+\n+class CharFieldTests(TestCase):\n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            date(2019, 5, 15),\n+            datetime(2019, 5, 15),\n+            time(3, 16),\n+            timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                field.clean(value, model_instance=None)\n+\n+    def test_charfield_init_without_max_length(self):\n+        \"\"\"\n+        CharField should not create a MaxLengthValidator if max_length is None.\n+        \"\"\"\n+        char_field = Value('test')._resolve_output_field()\n+        self.assertNotIn(validators.MaxLengthValidator, [type(v) for v in char_field.validators])\n     def test_optimizations(self):\n         with CaptureQueriesContext(connection) as context:\n             list(Experiment.objects.values(exists=Exists(\n",
  "django__django-15278": "",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..753053c 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -102,7 +102,54 @@ class BasicFieldTests(SimpleTestCase):\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n-    def test_abstract_inherited_fields(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class TestModel(models.Model):\n+            attribute = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_field_as_dict_key_before_and_after_assignment(self):\n+        \"\"\"\n+        Test using a field as a dictionary key before and after assigning\n+        it to a model to ensure its hash remains unchanged.\n+        \"\"\"\n+        field = models.CharField(max_length=255)\n+        field_hash = hash(field)\n+\n+        dictionary = {field: 'value'}\n+\n+        class AnotherModel(models.Model):\n+            name = field\n+\n+        # The field should still exist as a key in the dictionary\n+        self.assertIn(field, dictionary)\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_multiple_fields_in_dict(self):\n+        \"\"\"\n+        Test dictionary containing multiple fields to ensure each retains its\n+        hash after being assigned to models.\n+        \"\"\"\n+        field1 = models.CharField(max_length=255)\n+        field2 = models.IntegerField()\n+        dict_before = {field1: 'value1', field2: 'value2'}\n+\n+        class FirstModel(models.Model):\n+            attribute1 = field1\n+\n+        class SecondModel(models.Model):\n+            attribute2 = field2\n+\n+        # Check that both fields are still valid keys in the dictionary\n+        self.assertIn(field1, dict_before)\n+        self.assertIn(field2, dict_before)\n+\n+        # Verify their hashes remain unchanged\n+        self.assertEqual(hash(field1), hash(field1))\n+        self.assertEqual(hash(field2), hash(field2))\n         \"\"\"Field instances from abstract models are not equal.\"\"\"\n         class AbstractModel(models.Model):\n             field = models.IntegerField()\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..a08546a 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,6 +204,16 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n+    def test_f_expression(self):\n+        notes = [\n+            Note.objects.create(note='test_note', misc='test_misc')\n+            for _ in range(10)\n+        ]\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n+\n     def test_field_references(self):\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..5861c4d 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,7 +1049,76 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n-    def test_rename_model(self):\n+    def test_rename_field_with_model(self):\n+        \"\"\"Tests renaming a model and a field in a single operation.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        # Check the number of migrations\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        # Verify the operations in the migration\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        # Check attributes of the rename model operation\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        # Check attributes of the rename field operation\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+\n+    def test_rename_model_and_field_separately(self):\n+        \"\"\"Ensure correct operation when renaming a model and field separately.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'Author', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename': True}),\n+        )\n+        # Check the number of migrations\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        # Verify the operations in the migration\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameField'])\n+        # Check attributes of the rename field operation\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='name', new_name='renamed_name',\n+        )\n+\n+        # Now test the model renaming\n+        changes = self.get_changes(\n+            [\n+                ModelState('testapp', 'Author', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True}),\n+        )\n+        # Check the number of migrations\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        # Verify the operations in the migration\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel'])\n+        # Check attributes of the rename model operation\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n             [self.author_with_book, self.book],\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..4b709e7 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1904,9 +1904,41 @@ class ExistsTests(TestCase):\n             captured_sql,\n         )\n         self.assertNotIn('ORDER BY', captured_sql)\n+from django.db.models import Exists, Q\n+from django.test import TestCase\n+from .models import Manager\n \n+class ExistsExpressionTests(TestCase):\n \n-class FieldTransformTests(TestCase):\n+    def test_negated_empty_exists(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_negated_nonempty_exists(self):\n+        manager = Manager.objects.create()\n+        other_manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.filter(pk=other_manager.pk)) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_non_negated_empty_exists(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_non_negated_nonempty_exists(self):\n+        manager = Manager.objects.create()\n+        other_manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.filter(pk=other_manager.pk)) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..ed5279c 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -27,7 +27,8 @@ from django.db.models import (\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n-\n+from django.db.models import ForeignKey\n+from django.contrib import admin\n from .models import (\n     Advisor,\n     Album,\n@@ -132,7 +133,18 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             raw_id_fields=[\"main_band\"],\n         )\n \n-    def test_radio_fields_ForeignKey(self):\n+    def test_radio_fields_foreignkey_custom_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"main_band\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == \"main_band\":\n+                    kwargs[\"empty_label\"] = \"I WANT TO SET MY OWN EMPTY LABEL\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Event, admin.site)\n+        ff = ma.formfield_for_dbfield(Event._meta.get_field(\"main_band\"), request=None)\n+        self.assertEqual(ff.empty_label, \"I WANT TO SET MY OWN EMPTY LABEL\")\n         ff = self.assertFormfield(\n             Event,\n             \"main_band\",\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..2c631a3 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,54 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_alter_model_managers_with_empty_managers(self):\n+        # Test with an AlterModelManagers operation that has no managers specified.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_with_existing_managers(self):\n+        # Test CreateModel with existing managers and a subsequent AlterModelManagers operation.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[(\"default_manager\", models.Manager())],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n@@ -141,6 +189,54 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.CreateModel(\"MyModel\", fields=[])],\n         )\n+\n+    def test_create_alter_model_managers_with_empty_managers(self):\n+        # Test with an AlterModelManagers operation that has no managers specified.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_with_existing_managers(self):\n+        # Test CreateModel with existing managers and a subsequent AlterModelManagers operation.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[(\"default_manager\", models.Manager())],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel(\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..2a9c6b6 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,53 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+import os\n+from django.core import management\n+from django.test import TestCase\n+from django.db import connection\n+from fixtures_regress.models import Author, Book\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def test_natural_key_with_foreign_key_on_other_db(self):\n+        \"\"\"\n+        Test that loaddata with natural keys involving foreign keys works on a non-default database.\n+        \"\"\"\n+        # Setup data for non-default database\n+        author_data = Author.objects.using(\"other\").create(name=\"J.R.R. Tolkien\")\n+        Book.objects.using(\"other\").create(title=\"The Hobbit\", author=author_data)\n+\n+        # Dump test data to JSON fixture style\n+        fixture_path = os.path.join(os.path.dirname(__file__), \"test_author_book.json\")\n+        with open(fixture_path, \"w\") as fixture_file:\n+            management.call_command(\n+                \"dumpdata\",\n+                \"fixtures_regress.Author\",\n+                \"fixtures_regress.Book\",\n+                use_natural_primary_keys=True,\n+                use_natural_foreign_keys=True,\n+                format=\"json\",\n+                indent=2,\n+                stdout=fixture_file\n+            )\n+\n+        # Clear the database to ensure data will be loaded from scratch\n+        Author.objects.using(\"other\").all().delete()\n+        Book.objects.using(\"other\").all().delete()\n+\n+        # Load data from fixture\n+        management.call_command(\"loaddata\", fixture_path, database=\"other\")\n+\n+        # Assertions to check correct loading\n+        self.assertEqual(Author.objects.using(\"other\").count(), 1)\n+        self.assertEqual(Book.objects.using(\"other\").count(), 1)\n+\n+        author = Author.objects.using(\"other\").get(name=\"J.R.R. Tolkien\")\n+        book = Book.objects.using(\"other\").get(title=\"The Hobbit\")\n+\n+        self.assertEqual(book.author, author)\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..9021670 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,7 +3961,29 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n-    def test_add_textfield_unhashable_default(self):\n+    def test_alter_field_choices_noop(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        # Case 1: Adding choices\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        # Case 2: Changing choices\n+        another_new_field = CharField(\n+            choices=((\"Jack\", \"Jack\"), (\"Jill\", \"Jill\")),\n+            max_length=255,\n+        )\n+        another_new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, another_new_field, strict=True)\n+        # Revert back to original state\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, another_new_field, old_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..071ee0f 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -5,6 +6,7 @@ from unittest import mock\n from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n+import inspect\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n from django.test import (\n     SimpleTestCase,\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..124dcbe 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,8 +1,11 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n \n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n@@ -74,7 +77,13 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy_format(self):\n+        self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..be9dd1f 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -390,7 +390,30 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-    def test_proxy_load_from_fixture(self):\n+    def test_select_related_only_on_proxy_model(self):\n+        # Create the models needed for the test.\n+        custom = CustomModel.objects.create(name=\"Custom Name\")\n+        proxy_custom = ProxyCustomModel.objects.create(name=\"Proxy Custom Name\")\n+        another_model = AnotherModel.objects.create(custom=proxy_custom)\n+\n+        # Attempt to use select_related and only on a proxy model to ensure no crash.\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        \n+        # Fetch the result and validate it doesn't crash and returns the expected result.\n+        result = qs.get()\n+        self.assertEqual(result.custom.name, \"Proxy Custom Name\")\n+\n+    def test_select_related_only_on_base_model(self):\n+        # Create models using the base model instead of the proxy \n+        custom = CustomModel.objects.create(name=\"Custom Base Name\")\n+        another_model = AnotherModel.objects.create(custom=custom)\n+\n+        # Use select_related and only with base model to ensure correct behavior.\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+\n+        # Check that the correct name is returned.\n+        result = qs.get()\n+        self.assertEqual(result.custom.name, \"Custom Base Name\")\n         management.call_command(\"loaddata\", \"mypeople.json\", verbosity=0)\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..332de69 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_before_dbname(self):\n+        # Test that additional parameters are passed before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_before_dbname(self):\n+        # Test that additional parameters are passed before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..35b3b3c 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -73,8 +73,25 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, 20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n-\n-    def test_force_grouping(self):\n+    \n+    def test_decimal_precision(self):\n+        # Test for maintaining precision with Decimals in floatformat\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 21),\n+            \"42.123456789012345678900\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.0000000000000000000001\"), 25),\n+            \"0.0000000000000000000001000\"\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..76af996 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -556,7 +557,26 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_default_fixture_path_as_pathlib(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS cannot contain a default fixtures directory\n+        for application (app/fixtures) in order to avoid repeated fixture loading.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures_1\", Path(_cur_dir) / \"fixtures_2\"])\n+    def test_loaddata_with_valid_pathlib_fixture_dirs(self):\n+        \"\"\"\n+        Test loading data when FIXTURE_DIRS is a list of Path instances.\n+        \"\"\"\n+        management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..f8c25de 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,39 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"},\n+            ]\n+        )\n+\n+    def test_annotation_and_alias_filter_related_in_subquery(self):\n+        awarded_publishers_qs = (\n+            Publisher.objects.filter(num_awards__gt=4)\n+            .annotate(publisher_annotate=Value(1))\n+            .alias(publisher_alias=Value(1))\n+        )\n+        qs = Publisher.objects.filter(pk__in=awarded_publishers_qs)\n+        self.assertCountEqual(qs, [self.p3, self.p4])\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..8b217a6 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -22,7 +23,11 @@ from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n from django.test import TestCase, override_settings\n-from django.test.client import RequestFactory\n+from unittest import mock\n+from django.db import DatabaseError, connection\n+from django.test.client import RequestFactory, TestCase\n+from django.test import override_settings, skipUnlessDBFeature\n+from django.urls import reverse\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n from django.utils import formats\n@@ -400,6 +405,59 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Create instances for testing\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Test atomicity by mocking a database error\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+\n+        # Check that original values are preserved\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        # Test atomicity with error occurring after a partial success\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+\n+        # Ensure values are still preserved in case of partial failure\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n     def test_custom_paginator(self):\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..025faf2 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,6 +2400,28 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with zero status when\n+        there are no changes to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ) as tmpdir:\n+            self.assertFalse(os.path.exists(tmpdir))\n+            call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+\n+    def test_makemigrations_check_with_dry_run(self):\n+        \"\"\"\n+        makemigrations --check combined with --dry-run should not create\n+        migration files and should exit with non-zero status if changes are detected.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            self.assertFalse(os.path.exists(tmpdir))\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\", verbosity=0)\n+            self.assertFalse(os.path.exists(tmpdir))\n+\n     def test_makemigrations_migration_path_output(self):\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..292bd9c 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,35 @@\n+\n+class MethodNotAllowedTest(SimpleTestCase):\n+    def test_http_method_not_allowed_async_and_sync(self):\n+        request_factory = RequestFactory()\n+\n+        class SyncView(View):\n+            def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        class AsyncView(View):\n+            async def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                view_instance = view_cls()\n+                response = view_instance.http_method_not_allowed(request_factory.get(\"/\"))\n+\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,8 +38,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import SimpleTestCase, RequestFactory\n+import asyncio\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..72492b7 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,9 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -881,7 +884,32 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         form = UserChangeForm(instance=user, data=post_data)\n \n         self.assertTrue(form.is_valid())\n-        # original hashed password contains $\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    def test_user_change_form_password_help_text(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        expected_url = f\"../../{user.pk}/password/\"\n+        self.assertIn(expected_url, password_help_text)\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n     def test_bug_19349_bound_password_field(self):\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..69ac7fc 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -505,6 +505,18 @@ class HTTPSitemapTests(SitemapTestsBase):\n             \"</urlset>\"\n         )\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_lastmod_no_items_returns_none(self):\n+        # This test verifies that a sitemap with no items and a callable lastmod does not raise ValueError\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content_index = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '<sitemap><loc>http://example.com/callable-lastmod-no-items/sitemap.xml</loc></sitemap>\\n'\n+            '</sitemapindex>\\n'\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..fbff43b 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -58,6 +58,10 @@ class Restaurant(Place):\n class Pizzeria(Restaurant):\n     pass\n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n \n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n@@ -78,6 +82,10 @@ class UpsertConflict(models.Model):\n class NoFields(models.Model):\n     pass\n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n \n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..d56201e 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,7 +254,61 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_with_multiple_organizations(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization1, organization2])\n+\n+    def test_custom_form_no_organizations(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertFalse(user.orgs.exists())\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..df267cc 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -236,7 +237,28 @@ class TimesinceTests(TestCase):\n             with self.subTest():\n                 self.assertEqual(timesince(t, value), expected)\n \n-    def test_depth_invalid(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        # Test with exactly one month difference\n+        one_month_ago = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(one_month_ago), \"1\\xa0month\")\n+        \n+        # Test with more than one month difference\n+        more_than_one_month_ago = now - datetime.timedelta(days=45)\n+        self.assertEqual(timesince(more_than_one_month_ago), \"1\\xa0month, 2\\xa0weeks\")\n+        \n+        # Test with exactly two months difference\n+        two_months_ago = now - datetime.timedelta(days=62)\n+        self.assertEqual(timesince(two_months_ago), \"2\\xa0months\")\n+\n+        # Test with exactly one year difference\n+        one_year_ago = now - datetime.timedelta(days=365)\n+        self.assertEqual(timesince(one_year_ago), \"1\\xa0year\")\n+\n+        # Test with tz-aware datetime and zero interval\n+        self.assertEqual(timesince(now, now), \"0\\xa0minutes\")\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             timesince(self.t, self.t, depth=0)\n",
  "django__django-16454": "",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..925587e 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -112,7 +112,15 @@ class FunctionTests(SimpleTestCase):\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n \n-    def test_negative_zero_values(self):\n+    from decimal import Decimal\n+    from django.template.defaultfilters import floatformat\n+\n+    def test_floatformat_issues(self):\n+        # Values causing issues as described in the issue report.\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+        self.assertEqual(floatformat(\"0.00\", 1), \"0.0\")  # Additional case\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 2), \"0.00\")  # Additional case\n         tests = [\n             (-0.01, -1, \"0.0\"),\n             (-0.001, 2, \"0.00\"),\n",
  "django__django-16493": "",
  "django__django-16527": "diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py\nindex 4d29402..1814767 100644\n--- a/django/contrib/admin/templatetags/admin_modify.py\n+++ b/django/contrib/admin/templatetags/admin_modify.py\n@@ -100,6 +100,7 @@ def submit_row(context):\n                 and context.get(\"show_delete\", True)\n             ),\n             \"show_save_as_new\": not is_popup\n+            and has_add_permission\n             and has_change_permission\n             and change\n             and save_as,\n",
  "django__django-16560": "",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..90422ad 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1471,6 +1471,21 @@ class FormsFormsetTestCase(SimpleTestCase):\n             extra=2,\n         )\n         formset = ChoiceFormFormset()\n+\n+    def test_formset_with_can_delete_and_can_delete_extra(self):\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+\n+        my_formset = MyFormSet(initial=None)\n+        empty_form = my_formset.empty_form\n+        # Expecting not to have DELETE field in empty_form due to can_delete_extra=False\n+        self.assertNotIn(\"DELETE\", empty_form.fields)\n         self.assertEqual(len(formset), 2)\n         self.assertNotIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..57f88d4 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8456,15 +8456,492 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response, known_url, status_code=301, target_status_code=403\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            \"/prefix\" + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n+    def test_missing_slash_append_slash_true_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/prefix\" + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n-        response = self.client.get(known_url[:-1])\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n         self.assertRedirects(\n-            response, known_url, status_code=301, target_status_code=403\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n         )\n \n     @override_settings(APPEND_SLASH=True)\n-    def test_missing_slash_append_slash_true_script_name(self):\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8473,16 +8950,16 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n-        response = self.client.get(known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n         self.assertRedirects(\n             response,\n-            \"/prefix\" + known_url,\n+            f\"{known_url}?id=1\",\n             status_code=301,\n             fetch_redirect_response=False,\n         )\n \n     @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n-    def test_missing_slash_append_slash_true_force_script_name(self):\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8491,16 +8968,16 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n-        response = self.client.get(known_url[:-1])\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n         self.assertRedirects(\n             response,\n-            \"/prefix\" + known_url,\n+            f\"/prefix{known_url}?id=1\",\n             status_code=301,\n             fetch_redirect_response=False,\n         )\n \n     @override_settings(APPEND_SLASH=True)\n-    def test_missing_slash_append_slash_true_non_staff_user(self):\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n         user = User.objects.create_user(\n             username=\"user\",\n             password=\"secret\",\n@@ -8509,6 +8986,33 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(user)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(\n             response,\n@@ -8622,6 +9126,78 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8629,6 +9205,78 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=False)\n     def test_missing_slash_append_slash_false_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n@@ -8637,6 +9285,78 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..407d831 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,16 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_tuples_issue_fix = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples_issue_fix:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..57c39fe 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,31 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_correct_import_ordering(self):\n+        \"\"\"\n+        Validate that the imports are properly ordered according to Django's coding style and isort defaults.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        expected_import_order = (\n+            \"import datetime\\n\"\n+            \"import time\\n\"\n+            \"from django.db import migrations, models\\n\"\n+        )\n+        self.assertIn(expected_import_order, output)\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..686746a 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -319,6 +319,30 @@ class ImageFieldTwoDimensionsTests(ImageFieldTestMixin, TestCase):\n         # Dimensions were recalculated, and hence file should have opened.\n         self.assertIs(p.mugshot.was_opened, True)\n \n+    def test_post_init_connected_with_dimensions(self):\n+        \"\"\"\n+        Test that post_init signal is connected when width_field and/or\n+        height_field are used.\n+        \"\"\"\n+        from django.db.models.signals import post_init\n+        person_with_dimensions_id = id(self.PersonWithDimensions)\n+        self.assertIn(\n+            person_with_dimensions_id,\n+            [sender_id for (_, sender_id), *_ in post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_one_dimension(self):\n+        \"\"\"\n+        Test that post_init signal is connected when either width_field\n+        or height_field is used.\n+        \"\"\"\n+        from django.db.models.signals import post_init\n+        person_with_one_dimension_id = id(self.PersonWithHeight)\n+        self.assertIn(\n+            person_with_one_dimension_id,\n+            [sender_id for (_, sender_id), *_ in post_init.receivers],\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..937fd68 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -805,8 +805,31 @@ class SystemChecksTestCase(SimpleTestCase):\n             )\n         ]\n         self.assertEqual(errors, expected)\n+    \n+    def test_readonly_fields_with_field_name(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = [\"nonexistent\"]\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+        \n+    def test_readonly_fields_with_callable(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            def readonly_callable(self, obj):\n+                return obj.title\n \n-    def test_nonexistent_field_on_inline(self):\n+            readonly_fields = [readonly_callable]\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        self.assertEqual(errors, [])\n         class CityInline(admin.TabularInline):\n             model = City\n             readonly_fields = [\"i_dont_exist\"]  # Missing attribute\n",
  "django__django-16901": "",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..2c7ee48 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -638,7 +638,18 @@ class MakeMigrationsTests(MigrationTestBase):\n                 with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n                     with mock.patch.object(TestRouter, 'allow_migrate', return_value=False) as allow_migrate:\n                         call_command('makemigrations', 'migrations', verbosity=0)\n-                allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n+                # Ensure allow_migrate is called with app-specific models\n+                unicode_model_call = mock.call('other', 'migrations', model_name='UnicodeModel')\n+                self.assertIn(unicode_model_call, allow_migrate.mock_calls)\n+\n+                # Additional check: ensure allow_migrate is not called with invalid (app_label, model)\n+                with mock.patch.object(TestRouter, 'allow_migrate', return_value=False) as allow_migrate_invalid:\n+                    call_command('makemigrations', verbosity=0)\n+                for call in allow_migrate_invalid.mock_calls:\n+                    _, args, kwargs = call\n+                    app_label, model_name = args[1], kwargs['model_name']\n+                    if app_label == 'migrations':\n+                        self.assertIn(model_name, [model.__name__ for model in apps.get_app_config(app_label).get_models()])\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n     def test_failing_migration(self):\n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..e6d3cb5 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -298,6 +298,9 @@ class PaginationTests(SimpleTestCase):\n             paginator.get_page(1)\n \n \n+from django.core.paginator import Paginator, EmptyPage\n+from django.test import TestCase\n+\n class ModelPaginationTests(TestCase):\n     \"\"\"\n     Test pagination with Django model instances\n@@ -309,7 +312,26 @@ class ModelPaginationTests(TestCase):\n             a = Article(headline='Article %s' % x, pub_date=datetime(2005, 7, 29))\n             a.save()\n \n-    def test_first_page(self):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator_iteration(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_single_page_paginator_iteration(self):\n+        paginator = Paginator([1], 10)\n+        page_iterator = iter(paginator)\n+        page = next(page_iterator)\n+        self.assertEqual([1], list(page))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n         paginator = Paginator(Article.objects.order_by('id'), 5)\n         p = paginator.page(1)\n         self.assertEqual(\"<Page 1 of 2>\", str(p))\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..63d672a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,33 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_explicit():\n+    # Test with explicit bins to see they are adjusted to the range\n+    _, bins, _ = plt.hist(np.random.rand(1000), bins=5, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+    assert len(bins) == 6  # Because of 5 intervals, there should be 6 edges\n+    \n+def test_hist_density_without_range():\n+    # Test the behavior without explicitly setting a range\n+    data = np.linspace(0, 1, 1000)\n+    _, bins, _ = plt.hist(data, bins=10, density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_no_density_with_range():\n+    # Test the behavior when density=False and range is specified\n+    _, bins, _ = plt.hist(np.random.rand(100), bins=5, range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6393,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..d478e37 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -939,6 +939,15 @@ def test_inverted_limits():\n     plt.close()\n \n \n+def test_invert_log_yscale():\n+    # Test for inverting a logarithmic y-axis by setting its limits.\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(1000, 1)\n+    assert ax.get_ylim() == (1000, 1)\n+    plt.close()\n+\n+\n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n     x = np.arange(0., np.e, 0.01)\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..3ccd7da 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,7 +6961,25 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n-def test_shared_axes_retick():\n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure: without clearing\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure: clearing before plotting should result in same output as reference\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..1bd77ce 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -307,8 +307,33 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert y_units is ax.yaxis.units\n \n \n-def test_hist():\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Test to ensure no deprecation warning is emitted when plotting empty data\n+    on an axis with category units.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with pytest.warns(None) as record:\n+        ax.plot([], [])\n+    assert not record, \"Warning emitted when plotting with empty data.\"\n+\n+@check_figures_equal(extensions=['png'])\n+def test_deprecation_warning_on_nonempty_data(fig_test, fig_ref):\n+    \"\"\"\n+    Test to ensure that valid data does not emit a deprecation warning when \n+    passed to an axis with category units.\n+    \"\"\"\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    ax_test.xaxis.update_units([\"a\", \"b\"])\n+    ax_ref.xaxis.update_units([\"a\", \"b\"])\n+\n+    with pytest.warns(None) as record:\n+        ax_test.plot([\"a\"], [1])\n+    assert not record, \"Warning emitted when plotting with non-empty data.\"\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..487b987 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -918,8 +918,31 @@ def test_proportional_colorbars():\n                                      extend=extends[i])\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import ColorbarBase\n \n-def test_negative_boundarynorm():\n+def test_colorbar_with_drawedges_and_extend_both():\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + 1  # Extend both will add two extra colors\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend='both')\n+    \n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = ColorbarBase(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+    \n+    expected_segments = [\n+        np.array([[0., 0.], [0., 1.]]),\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]]),\n+        np.array([[3., 0.], [3., 1.]])\n+    ]\n+    \n+    # Ensure that the segments contain the edges at the extremities\n+    np.testing.assert_allclose(cbar.dividers.get_segments(), expected_segments)\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n \n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..1e99c38 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,37 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+from matplotlib.testing.decorators import cleanup\n+\n+def test_no_backend_reset_rccontext():\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n+@cleanup\n+def test_get_backend_clears_figs_with_rc_context():\n+    # Check that figures created within rc_context are not cleared\n+    with mpl.rc_context():\n+        fig = plt.figure()\n+        before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+        plt.get_backend()\n+        after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    assert before == after, '\\n' + before + '\\n' + after\n+\n+@cleanup\n+def test_get_backend_without_rc_context():\n+    # To verify the fix with a figure created outside of rc_context, which should not be affected\n+    fig = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    plt.get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    assert before == after, '\\n' + before + '\\n' + after\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..dc174a0 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,6 +15,7 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n mpl3d_image_comparison = functools.partial(\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..7bc7ca4 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -139,6 +139,37 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_ref = Rectangle(loc, width, height, angle=angle)\n     ax_ref.add_patch(rect_ref)\n     assert rect_ref.get_angle() == angle\n+from matplotlib.patches import Rectangle\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+\n+    # Reference rectangle: dash pattern with no offset\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [6, 6]))\n+    # Reference rectangle: dash pattern equivalent but with zero dash offset\n+    rect_ref2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(0, [0, 6, 6, 0]))\n+    assert rect_ref.get_linestyle() == (0, [6, 6])\n+    assert rect_ref2.get_linestyle() == (0, [0, 6, 6, 0])\n+\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Test rectangle: dash pattern with no offset\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [6, 6]))\n+    # Test rectangle: dash pattern with offset\n+    rect_test2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(6, [6, 6]))\n+    assert rect_test.get_linestyle() == (0, [6, 6])\n+    assert rect_test2.get_linestyle() == (6, [6, 6])\n+\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n+\n \n     # Check that when the angle is updated after adding to an Axes, that the\n     # patch is marked stale and redrawn in the correct location\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..14ea53a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,9 +2866,29 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-\n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n-def test_stackplot_baseline():\n+def test_stackplot_color_cycle():\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n+    import numpy as np\n+    \n+    fig, ax = plt.subplots()\n+    x = np.array([1, 2, 3])\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    \n+    # Plot using color 'C0' from the color cycle\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    \n+    # Add a rectangle patch using color 'C1'\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    \n+    # Use stackplot with CN colors, which should not throw an error and should not affect the cycle\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+    \n+    # Plot again to check the next color in the cycle after stackplot\n+    line, = ax.plot([1, 3], [1, 2])\n+    \n+    # Assert that the next color in the cycle for plot is 'C2'\n+    assert line.get_color() == 'C0', f\"Expected color 'C2', but got {line.get_color()}\"\n     np.random.seed(0)\n \n     def layers(n, m):\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..c43782e 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,18 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_warnings(dtype):\n+    # We use subtraction in the indexing, so need to verify that uint8 works\n+    cm = mpl.colormaps[\"viridis\"]\n+    with pytest.deprecated_call():\n+        assert_array_equal(cm(dtype(0)), cm(0))\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..25ecf35 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -578,6 +578,27 @@ class TestSpectral:\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n         # these should not be almost equal\n+\n+    def test_psd_window_flattop(self):\n+        # Use a flattop window to verify correct behavior\n+        ydata = np.arange(self.NFFT_density)\n+        windowVals = signal.windows.flattop(self.NFFT_density)\n+        spec, fsp = mlab.psd(x=ydata,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=windowVals,\n+                             scale_by_freq=False)\n+        spec_a, fsp_a = mlab.psd(x=ydata,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=windowVals)\n+        assert_allclose(spec * windowVals.sum()**2,\n+                        spec_a * self.Fs * (windowVals**2).sum(),\n+                        rtol=1e-7)\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n@@ -620,6 +641,27 @@ class TestSpectral:\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n         # these should not be almost equal\n+\n+    def test_psd_window_flattop(self):\n+        # Use a flattop window to verify correct behavior\n+        ydata = np.arange(self.NFFT_density)\n+        windowVals = signal.windows.flattop(self.NFFT_density)\n+        spec, fsp = mlab.psd(x=ydata,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=windowVals,\n+                             scale_by_freq=False)\n+        spec_a, fsp_a = mlab.psd(x=ydata,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=windowVals)\n+        assert_allclose(spec * windowVals.sum()**2,\n+                        spec_a * self.Fs * (windowVals**2).sum(),\n+                        rtol=1e-7)\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n@@ -667,6 +709,27 @@ class TestSpectral:\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n         # these should not be almost equal\n+\n+    def test_psd_window_flattop(self):\n+        # Use a flattop window to verify correct behavior\n+        ydata = np.arange(self.NFFT_density)\n+        windowVals = signal.windows.flattop(self.NFFT_density)\n+        spec, fsp = mlab.psd(x=ydata,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=windowVals,\n+                             scale_by_freq=False)\n+        spec_a, fsp_a = mlab.psd(x=ydata,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=windowVals)\n+        assert_allclose(spec * windowVals.sum()**2,\n+                        spec_a * self.Fs * (windowVals**2).sum(),\n+                        rtol=1e-7)\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..d0311a8 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,7 +7801,30 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n-def test_ytickcolor_is_not_yticklabelcolor():\n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+    \n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+    \n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n     ax = plt.axes()\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..ab85f15 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,28 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n-\n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    \n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure FigureCanvasAgg string is not in the pickle\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    loaded_fig = pickle.loads(pkl)\n+    # Ensure the loaded figure is a valid figure instance\n+    assert isinstance(loaded_fig, plt.Figure)\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..19a1a89 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -105,8 +105,33 @@ def test_complete(fig_test, fig_ref):\n \n     plt.close(loaded)\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pickle\n+from io import BytesIO\n \n-def _pickle_load_subprocess():\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    try:\n+        pkl = BytesIO()\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+        loaded = pickle.loads(pkl.getvalue())\n+        assert loaded is not None  # Ensure the figure is loaded successfully\n+        loaded.canvas.draw()  # Try to render to verify everything works after loading\n+    except Exception as e:\n+        assert False, f\"Pickling failed with error: {e}\"\n     import os\n     import pickle\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..2f4fe13 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -992,6 +992,10 @@ def test_hexbin_linear():\n               reduce_C_function=np.sum)\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..4cd9b9d 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,9 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib import pyplot as plt, path as mpath\n+import numpy as np\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..459736d 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,9 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..90516eb 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -14,6 +14,9 @@ This module implements the Requests API.\n from . import sessions\n \n \n+import requests\n+import unittest\n+\n def request(method, url, **kwargs):\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n     Returns :class:`Response <Response>` object.\n@@ -43,6 +46,49 @@ def request(method, url, **kwargs):\n     session = sessions.Session()\n     return session.request(method=method, url=url, **kwargs)\n \n+class TestUnicodeMethodName(unittest.TestCase):\n+    def test_unicode_method_name(self):\n+        # Original Test Case\n+        files = {'file': open('test_requests.py', 'rb')}\n+        r = requests.request(method=u'POST', url='http://httpbin.org/post', files=files)\n+        assert r.status_code == 200\n+\n+    def test_string_method_name(self):\n+        # Test case using regular string method name to verify the absence of UnicodeDecodeError\n+        files = {'file': open('test_requests.py', 'rb')}\n+        r = requests.request(method='POST', url='http://httpbin.org/post', files=files)\n+        assert r.status_code == 200\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n+    \"\"\"Constructs and sends a :class:`Request <Request>`.\n+    Returns :class:`Response <Response>` object.\n+\n+    :param method: method for the new :class:`Request` object.\n+    :param url: URL for the new :class:`Request` object.\n+    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n+    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n+    :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n+    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n+    :param files: (optional) Dictionary of 'name': file-like-objects (or {'name': ('filename', fileobj)}) for multipart encoding upload.\n+    :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n+    :param timeout: (optional) Float describing the timeout of the request.\n+    :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n+    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n+    :param verify: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n+    :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n+    :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n+\n+    Usage::\n+\n+      >>> import requests\n+      >>> req = requests.request('GET', 'http://httpbin.org/get')\n+      <Response [200]>\n+    \"\"\"\n+\n+    session = sessions.Session()\n+    return session.request(method=method, url=url, **kwargs)\n+\n \n def get(url, **kwargs):\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n",
  "psf__requests-1766": "diff --git a/requests/auth.py b/requests/auth.py\nindex ff8249e..caa8d5a 100644\n--- a/requests/auth.py\n+++ b/requests/auth.py\n@@ -126,7 +126,7 @@ class HTTPDigestAuth(AuthBase):\n \n         if qop is None:\n             respdig = KD(HA1, \"%s:%s\" % (nonce, HA2))\n-        elif qop == 'auth' or 'auth' in qop.split(','):\n+        elif qop and ('auth' in qop.split(',')):\n             respdig = KD(HA1, noncebit)\n         else:\n             # XXX handle auth-int.\n",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..56c6e1f 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,12 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            # Test case for the specific issue where UnicodeError should be handled\n+            (InvalidURL, 'http://.example.com'),\n+            # Additional related test cases\n+            (InvalidURL, 'http://..'),\n+            (InvalidURL, 'http://....'),\n+            (InvalidURL, 'http://example..com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..a6e0dbe 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,25 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+import numpy as np\n+import pytest\n+from xarray import DataArray, Variable\n+\n+def test_variable_setitem_no_type_coercion():\n+    class HasValues:\n+        values = 5\n+\n+    # Create DataArray objects with dtype=object\n+    good_indexed = DataArray([None], dims=['dim_0'])\n+    bad_indexed = DataArray([None], dims=['dim_0'])\n+\n+    # Assign a set object\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    assert isinstance(good_indexed.values[0], set), \"good_indexed should store a set\"\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    # Assign an instance of HasValues\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+    assert isinstance(bad_indexed.values[0], HasValues), \"bad_indexed should store a HasValues instance\"\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 274cb25..a4f284e 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -3480,7 +3480,18 @@ class TestDataArray:\n \n         assert_identical(da['a'], expected_orig)\n \n-    def test_real_and_imag(self):\n+    def test_copy_unicode_index(self):\n+        # Test that unicode indexes remain unicode after deep copy\n+        da = xr.DataArray(\n+            np.array(['baz'], dtype='<U3'),\n+            coords={'x': xr.IndexVariable('x', np.array(['foo'], dtype='<U3')),\n+                    'y': xr.IndexVariable('y', np.array(['bar'], dtype='<U3'))},\n+            dims=['x']\n+        )\n+        da_copy = da.copy(deep=True)\n+        assert da_copy.indexes['x'].dtype == '<U3'\n+        assert da_copy.indexes['y'].dtype == '<U3'\n+        assert da_copy.dtype == '<U3'\n         array = DataArray(1 + 2j)\n         assert_identical(array.real, DataArray(1))\n         assert_identical(array.imag, DataArray(2))\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..0017ce7 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,7 +611,43 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n-    def test_check_for_impossible_ordering(self):\n+    def test_check_for_nonmonotonic_identical_coords(self):\n+        # Check that non-monotonic identical coordinate dimensions do not raise\n+        # ValueError when combining datasets.\n+        yCoord = ['a', 'c', 'b']\n+\n+        ds1 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(3, 3))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3],\n+                y=yCoord\n+            )\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.random.rand(4, 3))\n+            ),\n+            coords=dict(\n+                x=[4, 5, 6, 7],\n+                y=yCoord\n+            )\n+        )\n+\n+        expected = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.concatenate([ds1['data'].values, ds2['data'].values], axis=0))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3, 4, 5, 6, 7],\n+                y=yCoord\n+            )\n+        )\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n         with raises_regex(ValueError, \"does not have monotonic global indexes\"\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..d87657c 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,6 +2310,24 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n+    def test_quantile_keep_attrs(self):\n+        # Test to ensure attributes are kept when keep_attrs=True\n+        da = DataArray([0, 0], dims=\"x\", attrs={'units':'K'})\n+        quantile_output = da.quantile(.9, dim='x', keep_attrs=True)\n+        assert quantile_output.attrs == {'units': 'K'}\n+\n+        # Test to ensure attributes are not kept when keep_attrs=False\n+        quantile_output_no_attrs = da.quantile(.9, dim='x', keep_attrs=False)\n+        assert quantile_output_no_attrs.attrs == {}\n+\n+        # Test with multiple quantiles\n+        quantile_output_multiple = da.quantile([0.1, 0.9], dim='x', keep_attrs=True)\n+        assert quantile_output_multiple.attrs == {'units': 'K'}\n+\n+        # Test with no dimension specified, i.e., default behavior should not throw error\n+        quantile_output_no_dim = da.quantile(.9, keep_attrs=True)\n+        assert quantile_output_no_dim.attrs == {'units': 'K'}\n+\n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..63c00ba 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -158,6 +159,28 @@ class TestMergeMethod:\n             data.reset_coords().merge(data)\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Verify that merging a DataArray into a Dataset works as expected\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(expected, actual)\n+\n+        # Test with more complex structures\n+        ds2 = xr.Dataset({\"c\": (\"x\", [1, 2, 3])})\n+        da2 = xr.DataArray([4, 5, 6], dims=\"x\", name=\"d\")\n+        expected2 = xr.merge([ds2, da2])\n+        actual2 = ds2.merge(da2)\n+        assert_identical(expected2, actual2)\n+\n+        # Test with coordinate variables\n+        ds3 = xr.Dataset({\"e\": (\"y\", [7, 8, 9]), \"y\": [1, 2, 3]})\n+        da3 = xr.DataArray([10, 11], dims=\"y\", name=\"f\", coords={\"y\": [2, 3]})\n+        expected3 = xr.merge([ds3, da3])\n+        actual3 = ds3.merge(da3)\n+        assert_identical(expected3, actual3)\n \n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..132c7fb 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -616,6 +616,24 @@ def test_multiple_dims(dtype, dask, func):\n     expected = getattr(getattr(da, func)(\"x\"), func)(\"y\")\n     assert_allclose(actual, expected)\n \n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n+@pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_multiple_dims(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    min_count = 3\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+    \n+    # Test reduction over multiple dimensions with min_count\n+    actual = getattr(da, func)(dim=[\"x\", \"y\", \"z\"], skipna=True, min_count=min_count)\n+    expected = getattr(getattr(da, func)(dim=\"x\", skipna=True, min_count=min_count), func)(dim=\"y\", skipna=True, min_count=min_count)\n+    expected = getattr(expected, func)(dim=\"z\", skipna=True, min_count=min_count)\n+\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n+\n \n def test_docs():\n     # with min_count\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..5fe5cd8 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,32 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy_multiple(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0, \"y\": \"a\"})\n+        ds2 = xr.Dataset(attrs={\"x\": 1, \"y\": \"b\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        # Modify the merged dataset's attributes\n+        ds3.attrs[\"x\"] = 2\n+        ds3.attrs[\"y\"] = \"c\"\n+        # Ensure original datasets remain unchanged\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds1.attrs[\"y\"] == \"a\"\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds2.attrs[\"y\"] == \"b\"\n+        # Ensure the merged dataset reflects the changes correctly\n+        assert ds3.attrs[\"x\"] == 2\n+        assert ds3.attrs[\"y\"] == \"c\"\n+\n+    def test_merge_attrs_override_no_attrs(self):\n+        ds1 = xr.Dataset()\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        # Ensure merged dataset only has attributes from the first with attrs\n+        assert \"x\" in ds3.attrs\n+        ds3.attrs[\"x\"] = 2\n+        # Original datasets should not be affected\n+        assert \"x\" not in ds1.attrs\n+        assert ds2.attrs[\"x\"] == 1\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..f22139e 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,21 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+\n+    # Test with keeping attributes\n+    actual_keep = xr.where(cond, x, y, keep_attrs=True)\n+    expected_keep = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected_keep, actual_keep)\n+\n+    # Test without keeping attributes\n+    actual_no_keep = xr.where(cond, x, y)\n+    expected_no_keep = xr.DataArray([1, 0], dims=\"x\", attrs={})\n+    assert_identical(expected_no_keep, actual_no_keep)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..bfe951e 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1929,6 +1929,13 @@ def test_where_attrs() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_scalar_with_keep_attrs() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    # Test where the second argument is a scalar and keep_attrs=True\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..3f277e4 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2000,6 +2000,43 @@ def test_where_attrs() -> None:\n             xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"b\": (\"y\", [3, 4, 5])}),\n             id=\"dataset-dataset\",\n         ),\n+        pytest.param(\n+            xr.DataArray(np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array(\n+                    [\"2021-04-01T05:25:19.000000000\", \n+                     \"2021-04-01T05:25:29.000000000\", \n+                     \"2021-04-01T05:25:39.000000000\"],\n+                    dtype=\"datetime64[ns]\"\n+                ), \n+                dims=\"x\"\n+            ),\n+            xr.DataArray(\n+                np.array(\n+                    [[2.33333335e-43, 1.62499999e-43], \n+                     [-1.15316667e-30, 1.49518518e-31], \n+                     [-2.50272583e-18, -1.23851062e-18], \n+                     [5.83965193e-06, -1.53321770e-07], \n+                     [4.44739216e06, 1.45053974e06]],\n+                ),\n+                dims=(\"degree\", \"axis\"), \n+                coords={\"axis\": [0, 1], \"degree\": [4, 3, 2, 1, 0]}\n+            ),\n+            xr.DataArray(\n+                np.array(\n+                    [[4447392.16, 1450539.74], \n+                     [4505537.25588366, 1448882.82238152], \n+                     [4563174.92026797, 1446979.12250014]],\n+                ),\n+                dims=(\"x\", \"axis\")\n+            ),\n+            id=\"datetime-extended\",\n+        ),\n         pytest.param(\n             xr.DataArray(pd.date_range(\"1970-01-01\", freq=\"s\", periods=3), dims=\"x\"),\n             xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..41dfe44 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,6 +221,28 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n+    # Test to ensure accessing chunks does not load data into memory for a zarr-backed dataset\n+    def test_chunks_does_not_load_zarr_data(self) -> None:\n+        import fsspec\n+        import xarray as xr\n+\n+        # URL to a zarr dataset\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        \n+        # Open the dataset without loading data into memory\n+        ds = xr.open_dataset(url, engine='zarr', chunks={})\n+        \n+        # Accessing chunks should not trigger data load\n+        assert ds.chunks is not None  # Ensure chunks info is retrieved\n+        with pytest.raises(UnexpectedDataAccess):\n+            ds.load()  # This would load data into memory\n+\n+        # Accessing chunks of a specific variable\n+        var = next(iter(ds.data_vars))  # Get any variable\n+        assert ds[var].chunks is not None\n+        with pytest.raises(UnexpectedDataAccess):\n+            ds[var].load()\n+\n     def test_repr(self) -> None:\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..66e6564 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,6 +688,10 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n # Test that datetime.datetime objects are never used in a CFTimeIndex\n @requires_cftime\n def test_safe_cast_to_index_datetime_datetime():\n@@ -696,4 +700,18 @@ def test_safe_cast_to_index_datetime_datetime():\n     expected = pd.Index(dates)\n     actual = safe_cast_to_index(np.array(dates))\n     assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+    assert isinstance(actual, pd.Index)\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_stack_preserves_dtype():\n+    # Initial dataset with int32 dtype\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='int32')})\n+    # Stacking the dataset\n+    stacked_ds = ds.stack(b=('a',))\n+    # Verify that dtype is preserved as int32\n+    assert ds['a'].values.dtype == stacked_ds['a'].values.dtype\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..233fd9c 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -93,10 +93,21 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n+def test_short_verbose_with_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure that the -v option works like --verbose and does not require an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+    assert \"No config file found, using default configuration\" in output.err\n+\n+import pytest\n+from _pytest.capture import CaptureFixture\n+from pylint.lint import Run\n+EMPTY_MODULE = 'empty_module.py'\n \n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..724f088 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,26 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_flag(self):\n+        \"\"\"Ensure ignore-paths is respected when --recursive=y is used.\"\"\"\n+        with _test_sys_path():\n+            # Setting sys.path appropriately\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^gen/.*$\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..ace438c 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -159,8 +159,25 @@ def logging_during_setup_and_teardown(caplog):\n     logger.info(\"a_teardown_log\")\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n+def test_clear_resolves_get_records_issue(caplog):\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Initial consistency check\n+    verify_consistency()\n+\n+    # Log a message and check consistency\n+    logging.warning(\"test\")\n+    verify_consistency()\n+    \n+    # Clear the log and check consistency\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+    assert caplog.records == []\n \n-def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n+    # Log another message and check consistency\n+    logging.info(\"another test\")\n+    verify_consistency()\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n     logger.info(\"a_call_log\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..052648b 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -184,6 +184,15 @@ class TestPDB:\n             class MyTestCase(unittest.TestCase):\n                 def test_one(self):\n                     assert 0\n+\n+        class TestCaseWithSkippedSetup(unittest.TestCase):\n+            @classmethod\n+            @unittest.skip(\"skip setup\")\n+            def setUpClass(cls):\n+                raise Exception(\"This should not run\")\n+\n+            def test_method(self):\n+                pass\n         \"\"\"\n         )\n         child = pytester.spawn_pytest(f\"-rs --pdb {p1}\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..0b23960 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,6 +1051,24 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+    def test_encoded_file_no_binary_mode(self):\n+        import io\n+        from _pytest.capture import EncodedFile\n+\n+        buffer = io.StringIO()\n+        encoded_file = EncodedFile(buffer, encoding='utf-8')\n+        \n+        # EncodedFile should not advertise binary modes\n+        assert 'b' not in encoded_file.buffer.mode\n+        \n+        # Test writing a string\n+        encoded_file.write(\"test string\")\n+        assert buffer.getvalue() == \"test string\"\n+\n+        # Test that writing bytes raises TypeError\n+        with pytest.raises(TypeError):\n+            encoded_file.write(b'test bytes')\n+\n \n @contextlib.contextmanager\n def saved_fd(fd):\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..699d5e4 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -10,8 +10,26 @@ from _pytest.main import _in_venv\n from _pytest.main import ExitCode\n from _pytest.main import Session\n \n+import pytest\n+import numpy as np\n+from unittest.mock import patch\n \n class TestCollector:\n+    def test_mock_patch_with_numpy_array(self, testdir):\n+        # This test case is to check if patching with a numpy array works without errors\n+        testdir.makepyfile(\n+            \"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+\n+            class TestClass:\n+                @patch('builtins.print', new=np.array([-5.5, 3.0]))\n+                def test_with_numpy_patch(self):\n+                    assert True\n+            \"\"\"\n+        )\n+        result = testdir.runpytest()\n+        result.assert_outcomes(passed=1)\n     def test_collect_versus_item(self):\n         from pytest import Collector, Item\n \n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..d797e14 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -119,8 +119,16 @@ class TestPaste(object):\n \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n-\n-    def test_create_new_paste(self, pastebin, mocked_urlopen):\n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=full-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n@@ -130,4 +138,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..7abb361 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -688,12 +688,24 @@ class Test_genitems:\n             def testone():\n                 pass\n \n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(self, arg0):\n+                pass\n+\n             class TestX(object):\n                 def testmethod_one(self):\n                     pass\n \n             class TestY(TestX):\n                 pass\n+\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(self, arg0):\n+                pass\n         \"\"\"\n         )\n         items, reprec = testdir.inline_genitems(p)\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..0440150 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -141,6 +142,24 @@ def test_show_fixtures_with_parameters(testdir, mode):\n     '''\n     )\n \n+\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    import sys\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n     result = testdir.runpytest(mode, p)\n     assert result.ret == 0\n \n@@ -154,6 +173,24 @@ def test_show_fixtures_with_parameters(testdir, mode):\n     )\n \n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    import sys\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n+\n def test_show_fixtures_with_parameter_ids(testdir, mode):\n     testdir.makeconftest(\n         '''\n@@ -175,6 +212,24 @@ def test_show_fixtures_with_parameter_ids(testdir, mode):\n     '''\n     )\n \n+\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    import sys\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n     result = testdir.runpytest(mode, p)\n     assert result.ret == 0\n \n@@ -183,6 +238,24 @@ def test_show_fixtures_with_parameter_ids(testdir, mode):\n     )\n \n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    import sys\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n+\n def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n     p = testdir.makepyfile(\n         \"\"\"\n@@ -195,6 +268,24 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n     \"\"\"\n     )\n \n+\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    import sys\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n     result = testdir.runpytest(mode, p)\n     assert result.ret == 0\n \n@@ -291,4 +382,22 @@ def test_setup_show_with_KeyboardInterrupt_in_test(testdir):\n             \"*= no tests ran in *\",\n         ]\n     )\n+\n+\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    import sys\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     assert result.ret == ExitCode.INTERRUPTED\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..96c6390 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,7 +607,29 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n-    def test_skip_with_reason(self, testdir):\n+    def test_skip_with_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_func():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"*test_func*\", \"*unconditional skip*\", \"*1 skipped*\"])\n+\n+    def test_skipif_with_condition_and_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skipif(True, reason=\"condition met\")\n+            def test_func():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"*test_func*\", \"*condition met*\", \"*1 skipped*\"])\n         testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..4ba8aff 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n@@ -155,7 +157,31 @@ class TestEvaluation:\n \n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n-    def test_xfail_simple(self, testdir, strict):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486 - This test ensures that dynamically adding xfail in pytest 6.x behavior works correctly.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Ensure that if strict=True, the test actually fails if it passes.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                assert 1\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         item = testdir.getitem(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..52410fe 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -512,6 +512,22 @@ class TestCaptureFixture:\n                 capfd.close()\n             \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n+\n+    def test_cafd_preserves_carriage_return_only(self, capfd):\n+        print(\"Carriage Return Only\", end=\"\\r\")\n+        out, err = capfd.readouterr()\n+        assert out == \"Carriage Return Only\\r\"\n+\n+    def test_cafd_new_line_without_r(self, capfd):\n+        print(\"Line without carriage return\", end=\"\\n\")\n+        out, err = capfd.readouterr()\n+        assert out == \"Line without carriage return\\n\"\n         reprec.assertoutcome(passed=1)\n \n     def test_capfdbinary(self, testdir):\n@@ -526,6 +542,22 @@ class TestCaptureFixture:\n                 assert err == b''\n             \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n+\n+    def test_cafd_preserves_carriage_return_only(self, capfd):\n+        print(\"Carriage Return Only\", end=\"\\r\")\n+        out, err = capfd.readouterr()\n+        assert out == \"Carriage Return Only\\r\"\n+\n+    def test_cafd_new_line_without_r(self, capfd):\n+        print(\"Line without carriage return\", end=\"\\n\")\n+        out, err = capfd.readouterr()\n+        assert out == \"Line without carriage return\\n\"\n         reprec.assertoutcome(passed=1)\n \n     def test_capsysbinary(self, testdir):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..3372249 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,7 +51,20 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n-def test_with_statement(caplog):\n+def test_bar_level_restoration(testdir):\n+    \"\"\"Test that 'caplog' restores the handler level after the test\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        def test_foo(caplog):\n+            caplog.set_level(42)\n+\n+        def test_bar(caplog):\n+            assert caplog.handler.level == 0\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..c3740a8 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..e972bc8 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,29 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_fixtures_unittest_setUpClass_private(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class TestClass(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            def test_example(self):\n+                pass\n+        \"\"\"\n+    )\n+    # Run without -v, expecting no output related to the unittest's setUpClass fixture\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_TestClass*\")\n+\n+    # Run with -v, expecting the output related to the unittest's setUpClass fixture\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_TestClass*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..92c2997 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,6 +597,31 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n \n def test_ridgecv_sample_weight():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..b86fda6 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,17 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_fowlkes_mallows_score_overflow():\n+    # Test overflow in fowlkes_mallows_score when pk and qk are large\n+    # Create large clustering arrays that would cause overflow without proper handling\n+    n_large = 2**16\n+    labels_true = np.array([0] * n_large + [1] * n_large)\n+    labels_pred = np.array([0] * (n_large // 2) + [1] * (n_large // 2) +\n+                           [0] * (n_large // 2) + [1] * (n_large // 2))\n+\n+    # The score should not be NaN or infinity despite the large numbers\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert np.isfinite(score), \"Fowlkes-Mallows score should be finite for large inputs\"\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..af8ad6f 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,25 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_custom_vocabulary_feature_names():\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer = CountVectorizer(vocabulary=vocab)\n+\n+    # Test that get_feature_names() does not raise NotFittedError if vocabulary is provided\n+    feature_names = vectorizer.get_feature_names()\n+    assert_array_equal(feature_names, vocab)\n+\n+    # Ensure transform works without fitting\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n \n-def test_vectorizer_max_features():\n+    X = vectorizer.transform(corpus)\n+    assert_equal(X.shape, (4, 9))\n+    assert_true((X.toarray() >= 0).all())\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..4c9c2bb 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1173,7 +1173,37 @@ def test_search_cv_timing():\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n \n-def test_grid_search_correct_score_results():\n+def test_search_cv_refit_time():\n+    # Load dataset\n+    X, y = load_iris(return_X_y=True)\n+    \n+    # Instantiate the estimator and GridSearchCV\n+    estimator = RandomForestClassifier()\n+    param_grid = {'n_estimators': [2, 3, 4]}\n+    \n+    # Create GridSearchCV with refit=True\n+    gs = GridSearchCV(estimator, param_grid, cv=3, refit=True)\n+    \n+    # Fit the GridSearchCV\n+    gs.fit(X, y)\n+    \n+    # Check if the refit_time_ attribute exists\n+    assert_true(hasattr(gs, \"refit_time_\"), \"GridSearchCV object should have refit_time_ attribute.\")\n+    \n+    # Check if refit_time_ is a float and non-negative\n+    assert_true(isinstance(gs.refit_time_, float), \"refit_time_ should be a float.\")\n+    assert_greater_equal(gs.refit_time_, 0, \"refit_time_ should be non-negative.\")\n+    \n+    # Validate the timing by timing the refit process separately\n+    best_params = gs.best_params_\n+    best_estimator = RandomForestClassifier(**best_params)\n+    \n+    start_time = time.time()\n+    best_estimator.fit(X, y)\n+    expected_refit_time = time.time() - start_time\n+    \n+    # Allow a small discrepancy between measured and recorded time\n+    assert_almost_equal(gs.refit_time_, expected_refit_time, decimal=1, err_msg=\"The recorded refit_time_ does not match the actual refit time.\")\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..13e26c9 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,8 +21,7 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n-\n-from sklearn.exceptions import ConvergenceWarning\n+from sklearn.metrics.scorer import get_scorer\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n     LogisticRegression,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..c79ba84 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,6 +154,9 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n+from sklearn.base import BaseEstimator, clone\n+\n+...\n def test_clone_sparse_matrices():\n     sparse_matrix_classes = [\n         getattr(sp, name)\n@@ -167,7 +170,21 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n-def test_repr():\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than\n+    # instances\n+    from sklearn.base import BaseEstimator\n+    from sklearn.base import clone\n+\n+    class MyEstimator(BaseEstimator):\n+        def __init__(self, empty=None):\n+            self.empty = empty\n+\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n     repr(my_estimator)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..a5f1dae 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,6 +5,29 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+@pytest.mark.parametrize('copy_X_init, copy_X_fit', [(True, None), (False, None), (True, True), (False, False), (True, False), (False, True)])\n+def test_lasso_larsic_copyX_interaction(copy_X_init, copy_X_fit):\n+    \"\"\"\n+    Test the interaction between initialization and fit parameters of copy_X in LassoLarsIC.\n+    \n+    copy_X_init: Parameter at initialization\n+    copy_X_fit: Parameter at fit call\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=copy_X_init, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+\n+    if copy_X_fit is None:\n+        lasso_lars.fit(X, y)\n+        expected_copy = copy_X_init\n+    else:\n+        lasso_lars.fit(X, y, copy_X=copy_X_fit)\n+        expected_copy = copy_X_fit\n+\n+    assert expected_copy == np.array_equal(X, X_copy)\n+\n import pytest\n \n from sklearn.model_selection import train_test_split\n@@ -18,7 +41,9 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n+import pytest\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..5bf6c45 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,6 +493,27 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+    # Additional test to ensure different random states produce different splits\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+    \n+    skf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    skf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=24)\n+    \n+    test_sets1 = [sorted(test_idx) for _, test_idx in skf1.split(X, y)]\n+    test_sets2 = [sorted(test_idx) for _, test_idx in skf2.split(X, y)]\n+    \n+    assert test_sets1 != test_sets2, \"Different random states should produce different test sets\"\n+\n+    # Edge case: Ensure no shuffle, and random states do not affect the result\n+    skf_no_shuffle = StratifiedKFold(n_splits=5, shuffle=False)\n+    default_splits = [sorted(test_idx) for _, test_idx in skf_no_shuffle.split(X, y)]\n+\n+    for i in range(10):\n+        skf_no_shuffle_random = StratifiedKFold(n_splits=5, shuffle=False, random_state=i)\n+        splits_with_random = [sorted(test_idx) for _, test_idx in skf_no_shuffle_random.split(X, y)]\n+        assert default_splits == splits_with_random, \"Random state should not affect non-shuffled StratifiedKFold\"\n+\n \n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..47527c7 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n@@ -201,6 +201,14 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     est = KBinsDiscretizer(n_bins=3, strategy=strategy, encode='ordinal')\n     Xt = est.fit_transform(X)\n     assert_array_equal(expected_3bins, Xt.ravel())\n+    \n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+    est = KBinsDiscretizer(n_bins=3, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_3bins, Xt.ravel())\n \n \n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..3f3a0c6 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,6 +597,14 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n \n def test_gaussian_mixture_fit():\n     # recover the ground truth\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..f16086f 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1056,9 +1056,24 @@ def test_pipeline_memory():\n         assert_equal(ts, cached_pipe_2.named_steps['transf_2'].timestamp_)\n     finally:\n         shutil.rmtree(cachedir)\n-\n-\n-def test_make_pipeline_memory():\n+def test_pipeline_length():\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import f_regression\n+    from sklearn.svm import SVC\n+    from sklearn.pipeline import Pipeline\n+\n+    # Create a mock pipeline\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipeline = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    \n+    # Check the length of the pipeline\n+    assert len(pipeline) == 2\n+\n+    # Add another step and check length again\n+    pipeline.steps.append(('svc2', clf))\n+    assert len(pipeline) == 3\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1085,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..1b283b8 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -498,6 +498,39 @@ def test_transform():\n         voting='soft',\n         flatten_transform=False).fit(X, y)\n \n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n+import numpy as np\n+from sklearn.datasets import load_iris\n+import pytest\n+\n+@pytest.mark.filterwarnings('ignore: Default solver will be changed')  # Suppress warnings for future behavior\n+@pytest.mark.filterwarnings('ignore: Default multi_class will')  # Suppress warnings for future behavior\n+def test_none_estimator_with_weights():\n+    # Load the iris dataset\n+    X, y = load_iris(return_X_y=True)\n+    \n+    # Create a VotingClassifier with two estimators\n+    voter = VotingClassifier(\n+        estimators=[('lr', LogisticRegression()),\n+                    ('rf', RandomForestClassifier(n_estimators=5))]\n+    )\n+    \n+    # Fit the classifier with sample weights\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    \n+    # Set one estimator to None\n+    voter.set_params(lr=None)\n+    \n+    # Attempt to fit the classifier again with sample weights\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    \n+    # Make predictions to ensure no errors occur\n+    y_pred = voter.predict(X)\n+    \n+    # Assert the prediction shape matches the expected output shape\n+    assert y_pred.shape == y.shape\n+\n     assert_array_equal(eclf1.transform(X).shape, (4, 6))\n     assert_array_equal(eclf2.transform(X).shape, (4, 6))\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n@@ -506,4 +539,4 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..3e90a6e 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -327,8 +327,28 @@ def test_export_text_errors():\n                          \"spacing must be > 0, given 0\",\n                          export_text, clf, spacing=0)\n \n+from sklearn.tree import DecisionTreeRegressor\n \n-def test_export_text():\n+def test_export_text_when_single_feature():\n+    # Test when the tree has only one feature\n+    X_single = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_mo = [[-1, -1], [-1, -1], [-1, -1], [1, 1], [1, 1], [1, 1]]\n+\n+    # Initialize and fit DecisionTreeRegressor\n+    reg = DecisionTreeRegressor(max_depth=2, random_state=0)\n+    reg.fit(X_single, y_mo)\n+\n+    # Expected report for a single feature\n+    expected_report = dedent(\"\"\"\n+    |--- first <= 0.0\n+    |   |--- value: [-1.0, -1.0]\n+    |--- first >  0.0\n+    |   |--- value: [1.0, 1.0]\n+    \"\"\").lstrip()\n+\n+    # Assertions to ensure export_text doesn't raise errors for single feature trees\n+    assert export_text(reg, decimals=1, feature_names=['first']) == expected_report\n+    assert export_text(reg, decimals=1, show_weights=True, feature_names=['first']) == expected_report\n     clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n     clf.fit(X, y)\n \n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..c9b0f31 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,26 +1532,36 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n-def test_LogisticRegressionCV_no_refit(multi_class):\n-    # Test LogisticRegressionCV attribute shapes when refit is False\n-\n-    n_classes = 3\n-    n_features = 20\n-    X, y = make_classification(n_samples=200, n_classes=n_classes,\n-                               n_informative=n_classes, n_features=n_features,\n-                               random_state=0)\n+@pytest.mark.parametrize('penalty', ['l2', 'elasticnet'])\n+@pytest.mark.parametrize('multi_class', ['ovr', 'multinomial'])\n+def test_LogisticRegressionCV_no_refit_no_index_error(penalty, multi_class):\n+    # Ensure no IndexError when refit is False\n+    n_samples = 1000\n+    n_features = 3\n+    n_informative = 3\n+    \n+    X, y = make_classification(n_samples=n_samples, n_features=n_features,\n+                               n_informative=n_informative, n_classes=2, random_state=29)\n \n     Cs = np.logspace(-4, 4, 3)\n-    l1_ratios = np.linspace(0, 1, 2)\n \n-    lrcv = LogisticRegressionCV(penalty='elasticnet', Cs=Cs, solver='saga',\n-                                l1_ratios=l1_ratios, random_state=0,\n-                                multi_class=multi_class, refit=False)\n-    lrcv.fit(X, y)\n-    assert lrcv.C_.shape == (n_classes,)\n-    assert lrcv.l1_ratio_.shape == (n_classes,)\n-    assert lrcv.coef_.shape == (n_classes, n_features)\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    model = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga', \n+                                 l1_ratios=l1_ratios, random_state=0, refit=False,\n+                                 multi_class=multi_class)\n+    \n+    model.fit(X, y)\n+    assert model.C_.shape == (1,) if multi_class == 'ovr' else (y.max() + 1,)\n+    if penalty == 'elasticnet':\n+        assert model.l1_ratio_.shape == (1,) if multi_class == 'ovr' else (y.max() + 1,)\n+\n+    # Additional assertions to ensure the shapes of the attributes\n+    expected_coef_shape = (1, n_features) if multi_class == 'ovr' else (y.max() + 1, n_features)\n+    assert model.coef_.shape == expected_coef_shape\n \n \n def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..d298efa 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -30,4 +30,14 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n+\n+def test_show_versions_includes_joblib(capsys):\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'joblib' in out\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'python' in out\n+    assert 'numpy' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..0f811b4 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,26 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+from sklearn.cluster import OPTICS\n+from sklearn.utils._testing import assert_array_equal\n+import numpy as np\n+from sklearn.utils import shuffle\n+\n+def test_optics_float_min_samples():\n+    # Test with float min_samples to ensure it is converted to an integer\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(100, 2)  # Create random data\n+\n+    # Use a small sample size for easy verification\n+    min_samples_float = 0.1\n+    n_samples = X.shape[0]\n+\n+    clust = OPTICS(min_samples=min_samples_float)\n+    clust.fit(X)\n \n-def test_extract_xi():\n+    # Verify that min_samples is converted to an integer\n+    assert clust.min_samples == int(round(max(2, min_samples_float * n_samples))), (\n+        f\"min_samples was not converted to integer correctly, got {clust.min_samples}\")\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..1f4e936 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,22 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..663df84 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,28 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaeresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test original case from issue with NFKD form\n+    s1 = chr(241)  # \u00f1 as a single code point\n+    s2 = chr(110) + chr(771)  # n + combining tilde, NFKD form\n+    expected = 'n'\n \n-def test_to_ascii():\n+    assert strip_accents_unicode(s1) == expected\n+    assert strip_accents_unicode(s2) == expected\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..d5010c9 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -109,8 +109,40 @@ def test_inverse_transform_sparse():\n         sel.inverse_transform(np.array([[1], [2]]))\n \n \n+from sklearn.utils._testing import assert_frame_equal\n+\n+def test_dtype_preservation_in_transformer():\n+    \"\"\"Check that transformers preserve dtypes of DataFrame inputs.\"\"\"\n+    # Import pandas and numpy\n+    import pandas as pd\n+    import numpy as np\n+    from sklearn.feature_selection import SelectKBest, chi2\n+    from sklearn.utils._testing import assert_array_equal\n+\n+    # Create a DataFrame with various dtypes\n+    X = pd.DataFrame(\n+        {\n+            \"int_column\": pd.Series([1, 2, 3], dtype=np.int32),\n+            \"float_column\": pd.Series([1.1, 2.2, 3.3], dtype=np.float32),\n+            \"category_column\": pd.Series([\"a\", \"b\", \"c\"], dtype=\"category\"),\n+        }\n+    )\n+    y = pd.Series([0, 1, 0], dtype=np.int32)\n+\n+    # Apply SelectKBest with chi2\n+    selector = SelectKBest(chi2, k=2).set_output(transform=\"pandas\")\n+    X_transformed = selector.fit_transform(X, y)\n+\n+    # Check that the dtypes are preserved\n+    expected_dtypes = X.dtypes[selector.get_support()]\n+    for col in X_transformed.columns:\n+        assert X_transformed[col].dtype == expected_dtypes[col]\n+    \n+    # Check that the index is preserved\n+    assert_array_equal(X_transformed.index, X.index)\n+\n def test_get_support():\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..7e7a9e1 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1520,9 +1520,91 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     )\n     X_imputed = imputer.fit_transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n+\n+def test_iterative_imputer_constant_fill_value_integer():\n+    \"\"\"Test IterativeImputer with constant fill_value for integer values.\"\"\"\n+    X = np.array([[-1, 2, 3], [4, -1, 6], [7, 8, -1]])\n+    fill_value = 999\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(X_imputed, np.array([[999, 2, 3], [4, 999, 6], [7, 8, 999]]))\n+\n+\n+def test_iterative_imputer_constant_fill_value_float():\n+    \"\"\"Test IterativeImputer with constant fill_value for floating values.\"\"\"\n+    X = np.array([[-1.0, 2.5, 3.5], [4.5, -1.0, 6.5], [7.5, 8.5, -1.0]])\n+    fill_value = 123.456\n+    imputer = IterativeImputer(\n+        missing_values=-1.0,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(X_imputed, np.array([[123.456, 2.5, 3.5], [4.5, 123.456, 6.5], [7.5, 8.5, 123.456]]))\n+\n+\n+def test_iterative_imputer_constant_fill_value_string():\n+    \"\"\"Test IterativeImputer with constant fill_value for string values.\"\"\"\n+    X = np.array([[\"missing\", \"a\"], [\"b\", \"missing\"], [\"c\", \"d\"]], dtype=object)\n+    fill_value = \"filled\"\n+    imputer = IterativeImputer(\n+        missing_values=\"missing\",\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(X_imputed, np.array([[\"filled\", \"a\"], [\"b\", \"filled\"], [\"c\", \"d\"]], dtype=object))\n     X_imputed = imputer.transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n \n+def test_iterative_imputer_constant_fill_value_integer():\n+    \"\"\"Test IterativeImputer with constant fill_value for integer values.\"\"\"\n+    X = np.array([[-1, 2, 3], [4, -1, 6], [7, 8, -1]])\n+    fill_value = 999\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(X_imputed, np.array([[999, 2, 3], [4, 999, 6], [7, 8, 999]]))\n+\n+\n+def test_iterative_imputer_constant_fill_value_float():\n+    \"\"\"Test IterativeImputer with constant fill_value for floating values.\"\"\"\n+    X = np.array([[-1.0, 2.5, 3.5], [4.5, -1.0, 6.5], [7.5, 8.5, -1.0]])\n+    fill_value = 123.456\n+    imputer = IterativeImputer(\n+        missing_values=-1.0,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(X_imputed, np.array([[123.456, 2.5, 3.5], [4.5, 123.456, 6.5], [7.5, 8.5, 123.456]]))\n+\n+\n+def test_iterative_imputer_constant_fill_value_string():\n+    \"\"\"Test IterativeImputer with constant fill_value for string values.\"\"\"\n+    X = np.array([[\"missing\", \"a\"], [\"b\", \"missing\"], [\"c\", \"d\"]], dtype=object)\n+    fill_value = \"filled\"\n+    imputer = IterativeImputer(\n+        missing_values=\"missing\",\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(X_imputed, np.array([[\"filled\", \"a\"], [\"b\", \"filled\"], [\"c\", \"d\"]], dtype=object))\n+\n \n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..d296505 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -332,10 +332,61 @@ def test_base_estimator_property_deprecated():\n     y = np.array([1, 0])\n     model = IsolationForest()\n     model.fit(X, y)\n+import warnings\n+import numpy as np\n+import pytest\n+from sklearn.ensemble import IsolationForest\n+import pandas as pd\n+\n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+\n+    Feature names are required for consistency checks during scoring.\n+\n+    Non-regression test for Issue #25844.\n+    \"\"\"\n+    rng = np.random.RandomState(0)\n+    X = pd.DataFrame(data=rng.randn(4), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n \n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+def test_iforest_multiple_features():\n+    \"\"\"Test IsolationForest with multiple features and contamination != 'auto'.\"\"\"\n+    X = pd.DataFrame({\"a\": [-1.1, 0.3, 0.5, 100], \"b\": [1.0, 2.0, 3.0, 4.0]})\n+    model = IsolationForest(random_state=0, contamination=0.1)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+def test_iforest_various_contamination_levels():\n+    \"\"\"Test IsolationForest with various contamination levels and ensure no warnings.\"\"\"\n+    contamination_levels = [0.05, 0.1, 0.2, 0.3]\n+    X = pd.DataFrame({\"a\": [-1.1, 0.3, 0.5, 100]})\n+    for contamination in contamination_levels:\n+        model = IsolationForest(random_state=0, contamination=contamination)\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", UserWarning)\n+            model.fit(X)\n+\n+def test_iforest_predict_no_warning():\n+    \"\"\"Ensure no warnings during predict call with DataFrame after fitting.\"\"\"\n+    X_train = pd.DataFrame({\"a\": [-1.1, 0.3, 0.5, 100]})\n+    X_test = pd.DataFrame({\"a\": [0.1, 0.2, 0.3, 0.4]})\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+    model.fit(X_train)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        predictions = model.predict(X_test)\n+    \n+    assert len(predictions) == len(X_test)\n     warn_msg = (\n         \"Attribute `base_estimator_` was deprecated in version 1.2 and \"\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..94a49b9 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,28 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    assert new_score < initial_score\n+\n+def test_sequential_feature_selector_with_custom_splits():\n+    \"\"\"Test SequentialFeatureSelector with a custom generator of splits.\"\"\"\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+    from sklearn.datasets import make_classification\n+    from sklearn.model_selection import LeaveOneGroupOut\n+    import numpy as np\n+\n+    X, y = make_classification(n_samples=100, n_features=20, random_state=42)\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2:] = 1\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    knc = KNeighborsClassifier(n_neighbors=5)\n+    sfs = SequentialFeatureSelector(knc, n_features_to_select=5, cv=splits)\n+    sfs.fit(X, y)\n+\n+    # Check that the number of features selected is correct\n+    assert sfs.get_support().sum() == 5\n+\n+    # Validate the transform method\n+    X_selected = sfs.transform(X)\n+    assert X_selected.shape[1] == 5\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..58bb577 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.feature_selection import VarianceThreshold\n \n \n class Trans(TransformerMixin, BaseEstimator):\n@@ -2178,6 +2182,27 @@ def test_raise_error_if_index_not_aligned():\n         ],\n     )\n     ct.set_output(transform=\"pandas\")\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+    Non-regression test for #26306.\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n     msg = (\n         \"Concatenating DataFrames from the transformer's output lead to\"\n         \" an inconsistent number of samples. The output may have Pandas\"\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..819e2ae 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,10 +1,12 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n import numpy as np\n from scipy import sparse as sp\n-\n import pytest\n+from sklearn.cluster import KMeans\n+from sklearn.datasets import make_blobs\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n@@ -945,7 +947,28 @@ def test_k_means_empty_cluster_relocated():\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n \n-def test_minibatch_kmeans_partial_fit_int_data():\n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+def test_kmeans_inertia_consistency_with_n_jobs():\n+    # Test to check consistency of KMeans inertia with different n_jobs\n+    X, y = make_blobs(n_samples=1000, centers=10, n_features=2, random_state=2)\n+\n+    inertia_values = []\n+    for n_jobs in range(1, 5):\n+        kmeans = KMeans(n_clusters=10, random_state=2, n_jobs=n_jobs)\n+        kmeans.fit(X)\n+        inertia_values.append(kmeans.inertia_)\n+\n+    assert np.allclose(inertia_values, inertia_values[0], rtol=1e-6), (\n+        \"Inertia values differ for different n_jobs settings\"\n+    )\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..da79f90 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,6 +251,27 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_dedent_and_prepend_with_correct_indentation(literal_inc_path):\n+    # Test prepend with dedent to ensure correct indentation\n+    options = {\n+        'lines': '12-17',  # lines corresponding to <groupId> to </plugin>\n+        'dedent': 6,\n+        'prepend': '      <plugin>'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\n+        \"      <plugin>\\n\"\n+        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+        \"        <version>2.15.0</version>\\n\"\n+        \"        <configuration>\\n\"\n+        \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+        \"        </configuration>\\n\"\n+        \"      </plugin>\\n\"\n+    )\n+\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..4680f05 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,22 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_no_return_type_for_classes(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._ClassWithoutDocumentedInit\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert 'Return type:' not in context\n+    assert 'class target.typehints._ClassWithoutDocumentedInit' in context\n+    assert 'ClassWithoutDocumentedInit docstring.' in context\n+    assert '__init__(x)' in context\n+    assert '**x** (*int*) --' not in context\n+    assert '**x** (*int*)' in context\n+\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..01a4d7c 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,41 @@\n+\n+def test_Catalog_no_duplicates():\n+    catalog = Catalog()\n+    # Adding the same message with the same location multiple times\n+    catalog.add('duplicate', MsgOrigin('/path/to/repeated', 1))\n+    catalog.add('duplicate', MsgOrigin('/path/to/repeated', 1))\n+    catalog.add('duplicate', MsgOrigin('/path/to/repeated', 1))\n+    \n+    # Adding the same message with different locations\n+    catalog.add('duplicate', MsgOrigin('/path/another/location', 2))\n+    \n+    # Adding another message to ensure the catalog manages multiple entries\n+    catalog.add('unique', MsgOrigin('/path/to/unique', 3))\n+\n+    # Check that locations for 'duplicate' message are not duplicated\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'duplicate'\n+    assert sorted(msg1.locations) == sorted([('/path/to/repeated', 1), ('/path/another/location', 2)])\n+    \n+    assert msg2.text == 'unique'\n+    assert msg2.locations == [('/path/to/unique', 3)]\n+\n+def test_Catalog_mixed_duplicates():\n+    catalog = Catalog()\n+    catalog.add('mix', MsgOrigin('/path/to/mix', 1))\n+    catalog.add('mix', MsgOrigin('/path/to/mix', 1))\n+    catalog.add('mix', MsgOrigin('/path/to/mix', 2))\n+    catalog.add('mix', MsgOrigin('/path/to/another_mix_location', 2))\n+\n+    # Check if mixed duplicated and unique location are handled\n+    assert len(list(catalog)) == 1\n+\n+    msg1 = list(catalog)[0]\n+    assert msg1.text == 'mix'\n+    assert sorted(msg1.locations) == sorted([('/path/to/mix', 1), ('/path/to/mix', 2), ('/path/to/another_mix_location', 2)])\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +47,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..83cbf8f 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -336,8 +336,21 @@ def test_get_toctree_for_includehidden(app):\n                 ([list_item, compact_paragraph, reference, \"quux\"],\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n+    \n+@pytest.mark.sphinx('dummy', testroot='basic')\n+def test_toctree_with_indices(app: SphinxTestApp):\n+    app.build()\n+    env = app.env\n+    toctree = env.tocs['index']\n \n-    assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n+    # Check for the presence of genindex, modindex, and search nodes\n+    assert any(entry[1] == \"genindex\" for entry in toctree.traverse(addnodes.toctree))\n+    assert any(entry[1] == \"modindex\" for entry in toctree.traverse(addnodes.toctree))\n+    assert any(entry[1] == \"search\" for entry in toctree.traverse(addnodes.toctree))\n+\n+    # Ensure no warnings related to toctree reference\n+    assert not any(message.startswith('toctree contains reference to nonexisting document')\n+                   for message in app._warning.getvalue().splitlines())\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n     assert_node(toctree[1][0][1][2][0][0], reference, refuri=\"foo#foo-2\", secnumber=[1, 3])\n@@ -345,4 +358,4 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n \n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..9336164 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -341,7 +341,19 @@ def test_signature_from_str_positionaly_only_args():\n     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n \n \n-def test_signature_from_str_invalid():\n+import ast\n+from sphinx.util.inspect import signature_from_str\n+from inspect import Parameter\n+\n+def test_signature_from_str_with_defaults():\n+    # Test that positional only argument 'b' has the default value of '0'\n+    sig = signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'  # Ensure default value is correctly set\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'  # Ensure correct default for keyword argument\n     with pytest.raises(SyntaxError):\n         inspect.signature_from_str('')\n \n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..28ac8f7 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from importlib import import_module\n import pytest\n \n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n+from typing import TypeVar, Generic\n \n \n def test_MockModule():\n@@ -52,7 +54,23 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+def test_generic_mock():\n+    T = TypeVar('T')\n+\n+    class GenericClass(Generic[T]):\n+        def method(self):\n+            return \"method in GenericClass\"\n+\n+    class SubClass2(mock.SomeClass[GenericClass[T]]):\n+        \"\"\"docstring of SubClass2\"\"\"\n+\n+    obj2 = SubClass2()\n+    assert SubClass2.__doc__ == \"docstring of SubClass2\"\n+    assert isinstance(obj2, SubClass2)\n+\n+    # Simulate calling a method on the parameterized generic class\n+    instance = GenericClass[int]()\n+    assert instance.method() == \"method in GenericClass\"\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..9605ce5 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -165,11 +166,35 @@ class SkipMemberTest(TestCase):\n                         SampleClass.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_method(self):\n+        class SampleClassWithDecoratedInit:\n+            @simple_decorator\n+            def __init__(self, value):\n+                \"\"\"Initialize with a value.\"\"\"\n+                self.value = value\n+                \n+        # This test ensures that the decorated __init__ method is not skipped\n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_class_special_undoc(self):\n         self.assertSkip('class', '__special_undoc__',\n                         SampleClass.__special_undoc__, True,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_method(self):\n+        class SampleClassWithDecoratedInit:\n+            @simple_decorator\n+            def __init__(self, value):\n+                \"\"\"Initialize with a value.\"\"\"\n+                self.value = value\n+                \n+        # This test ensures that the decorated __init__ method is not skipped\n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_private_doc(self):\n         self.assertSkip('exception', '_private_doc',\n                         SampleError._private_doc, False,\n@@ -185,6 +210,18 @@ class SkipMemberTest(TestCase):\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_method(self):\n+        class SampleClassWithDecoratedInit:\n+            @simple_decorator\n+            def __init__(self, value):\n+                \"\"\"Initialize with a value.\"\"\"\n+                self.value = value\n+                \n+        # This test ensures that the decorated __init__ method is not skipped\n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_special_undoc(self):\n         self.assertSkip('exception', '__special_undoc__',\n                         SampleError.__special_undoc__, True,\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..67a74d4 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -13,9 +13,23 @@ import re\n from unittest import mock\n import pytest\n \n-\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n-def test_defaults(app, status, warning):\n+def test_local_links(app, status, warning):\n+    \"\"\"Test to ensure local links are checked.\"\"\"\n+\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    # Ensure local link check results are included\n+    print(content)\n+    # Expect to find a broken local link reported\n+    assert \"doesntexist\" in content\n+    assert \"[broken] doesntexist\" in content\n+\n+    # No additional lines should be present, ensuring correct line count\n+    assert len(content.splitlines()) == 1  # Only one broken local link\n     app.builder.build_all()\n \n     assert (app.outdir / 'output.txt').exists()\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..2832569 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -13,8 +14,44 @@ import pytest\n from test_ext_autodoc import do_autodoc\n \n \n+from sphinx.testing.fixtures import app  # noqa: F401; pylint: disable=unused-import\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_private_field(app):\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_private_function,_another_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_function(arg1)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_function docstring.',\n+        '',\n+        '.. py:function:: _another_private_function(arg2)',\n+        '   :module: target.private',\n+        '',\n+        '   _another_private_function docstring.',\n+        '',\n+    ]\n+\n+def test_non_existent_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_non_existent_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+    ]\n+\n+def test_private_field(app):  # Existing test case; keep it unchanged\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..f8a98dc 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,37 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+from babel.messages import pofile\n+from sphinx import locale\n+import pytest\n+\n+def test_custom_translation_override(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # Clearing translators cache\n+        locale.translators.clear()\n+\n+        # Prepare message catalog (.po) \n+        locale_dir = sphinx_test_tempdir / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Initialize Sphinx app and build\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') % '1' == 'Foobar 1'\n+        assert app.translator.gettext('Listing %s') % '1' == 'Whatever 1'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n \n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..4f0328d 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,6 +372,77 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import json\n+import http.server\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util import requests\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app: SphinxTestApp):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+    assert content == {\n+        \"code\": 0,\n+        \"status\": \"working\",\n+        \"filename\": \"index.rst\",\n+        \"lineno\": 1,\n+        \"uri\": \"http://localhost:7777/\",\n+        \"info\": \"\",\n+    }\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD_with_anchor(app: SphinxTestApp):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/#anchor\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+    assert content == {\n+        \"code\": 0,\n+        \"status\": \"working\",\n+        \"filename\": \"index.rst\",\n+        \"lineno\": 1,\n+        \"uri\": \"http://localhost:7777/#anchor\",\n+        \"info\": \"\",\n+    }\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_GET(app: SphinxTestApp):\n+    class InfiniteRedirectOnGetHandler(http.server.BaseHTTPRequestHandler):\n+        def do_GET(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+    with http_server(InfiniteRedirectOnGetHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n@@ -379,6 +450,6 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"status\": \"broken\",\n         \"filename\": \"index.rst\",\n         \"lineno\": 1,\n-        \"uri\": \"https://localhost:7777/\",\n-        \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+        \"uri\": \"http://localhost:7777/\",\n+        \"info\": \"Too many redirects\",\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..d97d319 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,9 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+from pathlib import Path\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..35e83f8 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,22 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum_default_value():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        FOO = 1\n+        BAR = 2\n+\n+    def func_with_enum_default(e: MyEnum = MyEnum.FOO):\n+        pass\n+\n+    signature = inspect.signature(func_with_enum_default)\n+    default_value = signature.parameters['e'].default\n+\n+    # Verify that the description of the default value is formatted nicely\n+    description = inspect.object_description(default_value)\n+    assert description == \"MyEnum.FOO\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..1d4fae9 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -10,6 +10,8 @@\n \n import time\n from io import StringIO\n+from os import path\n+import pytest\n \n import pytest\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..6ffcf3b 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,8 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n+    (\"(1, 2,)\", \"(1, 2,)\"),                       # Tuple (multiple elements with trailing comma)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..78eb99a 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,37 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_pyproperty_cross_reference(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: y\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: width\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: height\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    # Check that the 'Point' type in the 'end' property is correctly cross-referenced\n+    assert_node(doctree[1][1][7][3], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                        [desc_name, \"end\"],\n+                                                        [desc_annotation, \": \"],\n+                                                        [pending_xref, \"Point\"])]))\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..a18c553 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,9 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point2D, Point3D\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n@@ -244,7 +247,30 @@ def test_issue_9214():\n     assert Point3D.are_collinear(p1, p2, p3) is False\n \n \n-def test_transform():\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+\n+    # The issue's test: verify the distance respects all dimensions\n+    assert p1.distance(p2) == sqrt(5)\n+\n+    # Additional tests to ensure thorough coverage\n+    # Testing with negative coordinates\n+    p3 = Point3D(-1, 0, -2)\n+    p4 = Point2D(-2, 0)\n+    assert p3.distance(p4) == sqrt(5)\n+\n+    # Testing where one point is at the origin\n+    p5 = Point3D(0, 0, 0)\n+    assert p5.distance(p2) == sqrt(4)\n+\n+    # Testing where both points are in the same plane (ignore z-axis of one point)\n+    p6 = Point3D(3, 3, 0)\n+    p7 = Point2D(3, 3)\n+    assert p6.distance(p7) == 0\n+\n+    # Testing identical points in 3D and 2D perspective\n+    assert p3.distance(Point2D(-1, 0)) == 2\n     p = Point(1, 1)\n     assert p.transform(rotate(pi/2)) == Point(-1, 1)\n     assert p.transform(scale(3, 2)) == Point(3, 2)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..4f53f07 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,29 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    # Test the initial example from the issue\n+    assert f(f(2)).evalf() == Float(16)\n+    assert g(g(2)).evalf() == Float(8)\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+\n+    # Additional test case: More complex composition\n+    h = implemented_function('h', lambda x: x + 1)\n+    assert h(f(g(2))).evalf() == Float(17)\n+    \n+    # Test with nesting\n+    assert f(h(g(2))).evalf() == Float(25)\n+\n+    # Test with multiple layers of nesting and ensure each call evaluates\n+    assert f(h(f(g(2)))).evalf() == Float(81)\n+\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..e4cbb31 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -72,7 +72,13 @@ def test_ZeroMatrix_doit():\n     assert isinstance(Znn.doit().rows, Mul)\n \n \n+from sympy import Identity, symbols, Sum\n+\n def test_Identity():\n+    i, j = symbols('i j', integer=True)\n+    # Test for the sum of all elements in Identity matrix\n+    In = Identity(n)\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     A = MatrixSymbol('A', n, m)\n     In = Identity(n)\n     Im = Identity(m)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..654f9ba 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -335,6 +335,21 @@ def test_args():\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n         Permutation(((0, ), [1]))\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n+    \n+    # Test for non-disjoint cycles - should handle left-to-right order\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])  # Resulting permutation is (0 1 2)\n+    assert Permutation([[1, 2], [1, 2]]) == Permutation([0, 2, 1])  # Applying the cycles does nothing net\n+\n+    # Overlapping cycles - ensure correct left-to-right application\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([2, 0, 1])  # Result is (0 1 2)\n+\n+    # Larger numbers\n+    assert Permutation([[3, 2, 1], [2, 1]]) == Permutation([0, 3, 1, 2])  # Two overlapping cycles\n+\n+    # Test with more repetitions\n+    assert Permutation([[0, 1], [1, 0], [0, 1]]) == Permutation([0, 1])  # Cycles cancel out\n+    assert Permutation([[0, 1], [0, 1], [0, 1]]) == Permutation([1, 0])  # Applying thrice is (01)\n     assert Permutation([[1], [4, 2]]) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation([[1], [4, 2]], size=1) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation(\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex fa86bc3..104e5a4 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -1284,8 +1284,35 @@ def test_empty_zeros():\n     assert a.rows == 2\n     assert a.cols == 0\n \n-\n-def test_issue_3749():\n+def test_hstack_vstack_zero_dimensions():\n+    import sympy as sy\n+    # Test for hstack with zero rows\n+    M1 = sy.Matrix.zeros(0, 0)\n+    M2 = sy.Matrix.zeros(0, 1)\n+    M3 = sy.Matrix.zeros(0, 2)\n+    M4 = sy.Matrix.zeros(0, 3)\n+    result_hstack = sy.Matrix.hstack(M1, M2, M3, M4)\n+    assert result_hstack.shape == (0, 6), f\"Expected (0, 6), got {result_hstack.shape}\"\n+\n+    # Test for hstack with zero columns\n+    M1 = sy.Matrix.zeros(1, 0)\n+    M2 = sy.Matrix.zeros(1, 1)\n+    M3 = sy.Matrix.zeros(1, 2)\n+    M4 = sy.Matrix.zeros(1, 3)\n+    result_hstack = sy.Matrix.hstack(M1, M2, M3, M4)\n+    assert result_hstack.shape == (1, 6), f\"Expected (1, 6), got {result_hstack.shape}\"\n+\n+    # Test for vstack with zero columns\n+    V1 = sy.Matrix.zeros(0, 1)\n+    V2 = sy.Matrix.zeros(0, 1)\n+    result_vstack = sy.Matrix.vstack(V1, V2)\n+    assert result_vstack.shape == (0, 1), f\"Expected (0, 1), got {result_vstack.shape}\"\n+\n+    # Test for vstack with zero rows\n+    V1 = sy.Matrix.zeros(1, 0)\n+    V2 = sy.Matrix.zeros(1, 0)\n+    result_vstack = sy.Matrix.vstack(V1, V2)\n+    assert result_vstack.shape == (2, 0), f\"Expected (2, 0), got {result_vstack.shape}\"\n     a = Matrix([[x**2, x*y], [x*sin(y), x*cos(y)]])\n     assert a.diff(x) == Matrix([[2*x, y], [sin(y), cos(y)]])\n     assert Matrix([\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..8a146f8 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -161,6 +161,9 @@ def test_evalf_near_integers():\n \n \n def test_evalf_ramanujan():\n+    from sympy import Mul, Max, NS\n+    from sympy.abc import x, y\n+\n     assert NS(exp(pi*sqrt(163)) - 640320**3 - 744, 10) == '-7.499274028e-13'\n     # A related identity\n     A = 262537412640768744*exp(-pi*sqrt(163))\n@@ -230,8 +233,23 @@ def test_evalf_bugs():\n     #issue 11518\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n \n+def test_issue_13076():\n+    # Verify original test patch\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Additional test cases\n+    # Evaluate with numeric values\n+    assert NS(Mul(x, Max(0, 3), evaluate=False).evalf(subs={x: 2})) == '6.00000000000000'\n+    assert NS(Mul(Max(0, 3), x, evaluate=False).evalf(subs={x: 2})) == '6.00000000000000'\n+\n+    # Evaluating with zero\n+    assert NS(Mul(x, Max(0, 0), evaluate=False).evalf(subs={x: 5})) == '0'\n+    assert NS(Mul(Max(0, 0), x, evaluate=False).evalf(subs={x: 5})) == '0'\n \n-def test_evalf_integer_parts():\n+    # Evaluating with negative number for Max\n+    assert NS(Mul(x, Max(0, -2), evaluate=False).evalf(subs={x: 7})) == '0'\n+    assert NS(Mul(Max(0, -2), x, evaluate=False).evalf(subs={x: 7})) == '0'\n     a = floor(log(8)/log(2) - exp(-1000), evaluate=False)\n     b = floor(log(8)/log(2), evaluate=False)\n     assert a.evalf() == 3\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..911f356 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,21 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n+def test_coth_issue():\n+    from sympy import coth, log, tan, Symbol, I\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Test for specific integral values that previously caused an error\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+\n+    for value in test_values:\n+        result = e.subs(x, value)\n+        assert result is not None  # Ensure no error is thrown and value is computed\n \n-def test_coth_series():\n+    # Original test case for reference\n+    assert coth(log(tan(2))) == coth(log(-tan(2)))\n+    assert coth(1 + I*pi/2) == tanh(1)\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..9259df2 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -183,6 +183,17 @@ def test_Complement():\n \n     assert S.EmptySet - S.Integers == S.EmptySet\n \n+    # Additional test cases based on issue 12712\n+    # Test with different numerical values and symbolic combinations\n+    assert Complement(FiniteSet(x, y, 2, 3), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, y, -5), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, y, 5), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, y, 0), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+    # Test with symbolic values only\n+    assert Complement(FiniteSet(x, y), Interval(-10, 10)) == FiniteSet(x, y)\n+    # Test with numerical values only\n+    assert Complement(FiniteSet(2, 3, 15), Interval(-10, 10)) == FiniteSet(15)\n+\n     assert (S.Integers - FiniteSet(0)) - FiniteSet(1) == S.Integers - FiniteSet(0, 1)\n \n     assert S.Reals - Union(S.Naturals, FiniteSet(pi)) == \\\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..303cca2 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -187,6 +187,9 @@ def test_col_join():\n                    [0, 0, 1],\n                    [7, 7, 7]])\n \n+import sympy as sm\n+from sympy import Matrix, eye\n+\n def test_row_insert():\n     r4 = Matrix([[4, 4, 4]])\n     for i in range(-4, 5):\n@@ -201,7 +204,50 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    # Test for issue 13643\n+    M = eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Add more tests to cover edge cases\n+    # Test inserting at the beginning\n+    M = eye(3)\n+    V = Matrix([[1, 1], [1, 1], [1, 1]])\n+    result = M.col_insert(0, V)\n+    expected = Matrix([\n+        [1, 1, 1, 0, 0],\n+        [1, 1, 0, 1, 0],\n+        [1, 1, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Test inserting at the end\n+    M = eye(3)\n+    V = Matrix([[1, 1], [1, 1], [1, 1]])\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 1, 1],\n+        [0, 1, 0, 1, 1],\n+        [0, 0, 1, 1, 1]\n+    ])\n+    assert result == expected\n+\n+    # Test inserting into an empty matrix\n+    M = Matrix.zeros(0, 0)\n+    V = Matrix.zeros(0, 3)\n+    result = M.col_insert(0, V)\n+    expected = Matrix.zeros(0, 3)\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..deda726 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -665,8 +665,15 @@ def test_Poly_sub():\n def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n-\n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+from sympy import Symbol, Poly, S\n+x = Symbol('x')\n+\n+def test_issue_13079():\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..42af28d 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,19 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_custom_mul_symbol():\n+    # Test custom multiplication symbol\n+    from sympy.abc import x, y\n+    from sympy import latex\n+\n+    assert latex(3*x**2*y, mul_symbol='\\\\\\\\,') == r\"3\\\\,x^{2}\\\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\\\\\,') == r\"1.5\\\\,3^{x}\"\n+    assert latex(3*x**2*y, mul_symbol='*') == r\"3*x^{2}*y\"\n+    assert latex(2*x**2*y, mul_symbol='times') == r\"2 \\times x^{2} \\times y\"\n+    assert latex(2*x**2*y, mul_symbol='dot') == r\"2 \\cdot x^{2} \\cdot y\"\n+    assert latex(2*x**2*y) == r\"2 x^{2} y\"  # Default behavior\n+    assert latex(Integral(2*x**2*y, x), mul_symbol='\\,') == r\"\\int 2 x^{2} y\\, dx\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..e4334f5 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,27 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+def test_issue_13835():\n+    from sympy import Matrix, symbols\n+\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    \n+    # Test determinant for matrices of size 5, 6, and 7\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n+\n+    # Verify larger matrices correctly resolve to a symbolic expression\n+    assert M(8).det() == 0  # Example of expecting zero for larger sizes\n+    assert M(3).det() == 2*a*(a + 2) + 2*a*(2*a + 1) - 3*a*(2*a + 2)  # From the issue statement\n+\n+    # Ensure no exception is raised, even if result isn't a clean number (symbolic check)\n+    try:\n+        M(9).det()\n+        M(10).det()\n+    except Exception as e:\n+        assert False, f\"No exception should be raised, but got: {e}\"\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..2335f90 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -259,13 +259,89 @@ def test_dagum():\n \n     X = Dagum('x', p, a, b)\n     assert density(X)(x) == a*p*(x/b)**(a*p)*((x/b)**a + 1)**(-p - 1)/x\n+def test_cdf_issues():\n+    from sympy import Rational, oo, gamma, lowergamma, uppergamma, hyper, pi, asin, sqrt, exp, S\n+    from sympy.stats import Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum\n+    from sympy.stats import cdf, density\n \n-def test_erlang():\n-    k = Symbol(\"k\", integer=True, positive=True)\n-    l = Symbol(\"l\", positive=True)\n+    a, b = symbols('a b', finite=True, real=True)\n+    x = symbols('x', real=True, finite=True)\n \n-    X = Erlang(\"x\", k, l)\n-    assert density(X)(x) == x**(k - 1)*l**k*exp(-x*l)/gamma(k)\n+    # Arcsin Distribution\n+    X = Arcsin('x', 0, 3)\n+    assert cdf(X)(1) == 2*asin(sqrt((1)/(3)))/pi\n+\n+    # Dagum Distribution\n+    X = Dagum(\"x\", S(1)/3, S(1)/5, 2)\n+    assert cdf(X)(3) == (1 + (3/2)**(-S(1)/3))**(-S(1)/5)\n+\n+    # Erlang Distribution\n+    X = Erlang(\"x\", 1, 1)\n+    assert cdf(X)(1) == lowergamma(1, 1)/gamma(1)\n+\n+    # Frechet Distribution\n+    X = Frechet(\"x\", S(4)/3, 1, 2)\n+    assert cdf(X)(3) == exp(-1)\n+\n+    # Gamma Distribution\n+    X = Gamma(\"x\", 0.1, 2)\n+    assert cdf(X)(3) == lowergamma(0.1, 3/2)/gamma(0.1)\n+\n+    # Gamma Inverse Distribution\n+    X = GammaInverse(\"x\", S(5)/7, 2)\n+    assert cdf(X)(3) == uppergamma(S(5)/7, 2/3)/gamma(S(5)/7)\n+\n+    # Kumaraswamy Distribution\n+    X = Kumaraswamy(\"x\", S(1)/123, 5)\n+    assert cdf(X)(S(1)/3) == 1 - (1 - (S(1)/3)**(S(1)/123))**5\n+\n+    # Laplace Distribution\n+    X = Laplace(\"x\", 2, 3)\n+    assert cdf(X)(5) == S(1)/2 + S(1)/2*(1 - exp(-1))\n+\n+    # Logistic Distribution\n+    X = Logistic(\"x\", 1, 0.1)\n+    assert cdf(X)(2) == 1/(1 + exp(-10)) \n+\n+    # Nakagami Distribution\n+    X = Nakagami(\"x\", S(7)/3, 1)\n+    assert cdf(X)(2) == lowergamma(S(7)/3, S(14)/3)/gamma(S(7)/3)\n+\n+    # StudentT Distribution\n+    X = StudentT(\"x\", 10)\n+    assert cdf(X)(2) == S(1)/2 + 2*gamma(11/2)*hyper((1/2, 11/2), (3/2,), Rational(-1, 5))/(sqrt(pi)*5**(S(1)/2)*gamma(10/2))\n+\n+    # UniformSum Distribution\n+    X = UniformSum('x', 5)\n+    assert cdf(X)(2).simplify() == Rational(1, 5)\n+\n+    # Numeric Tests\n+    distribs = [\n+        Arcsin(\"A\", -5, 9),\n+        Dagum(\"D\", 4, 10, 3),\n+        Erlang(\"E\", 14, 5),\n+        Frechet(\"F\", 2, 6, -3),\n+        Gamma(\"G\", 2, 7),\n+        GammaInverse(\"GI\", 3, 5),\n+        Kumaraswamy(\"K\", 6, 8),\n+        Laplace(\"LA\", -5, 4),\n+        Logistic(\"L\", -6, 7),\n+        Nakagami(\"N\", 2, 7),\n+        StudentT(\"S\", 4)\n+    ]\n+    for distr in distribs:\n+        for _ in range(5):\n+            assert tn(diff(cdf(distr)(x), x), density(distr)(x), x, a=0, b=0, c=1, d=0)\n+\n+    US = UniformSum(\"US\", 5)\n+    pdf01 = density(US)(x).subs(floor(x), 0).doit()   # pdf on (0, 1)\n+    cdf01 = cdf(US, evaluate=False)(x).subs(floor(x), 0).doit()   # cdf on (0, 1)\n+    assert tn(diff(cdf01, x), pdf01, x, a=0, b=0, c=1, d=0)\n+\n+    # Ensure correspondence between CDF and expected value\n+    X = Uniform('X', 0, 1)\n+    assert E(X, X > Rational(1, 2)) == Rational(3, 4)\n+    assert E(X, X > 0) == Rational(1, 2)\n \n def test_exponential():\n     rate = Symbol('lambda', positive=True, real=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..d9279ba 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -46,6 +46,23 @@ def test_tensor_product_commutator():\n \n \n def test_tensor_product_simp():\n+    # Test powers of TensorProduct with scalar components\n+    t1 = TP(1, 1)**2\n+    assert tensor_product_simp(t1) == TP(1, 1)\n+\n+    # Test powers of TensorProduct with non-scalar components (Pauli matrix)\n+    t2 = TP(1, Pauli(3))**2\n+    assert tensor_product_simp(t2).doit() == TP(1, 1)\n+\n+    # Test tensor products with symbols\n+    a = Symbol('a', commutative=False)\n+    t3 = TP(1, a)**2\n+    assert tensor_product_simp(t3).subs(a, 1) == TP(1, 1)\n+\n+    # Test combination of tensor products and powers\n+    A, B, C, D = symbols('A B C D', commutative=False)\n+    assert tensor_product_simp(TP(A, B)**2) == TP(A**2, B**2)\n+    assert tensor_product_simp(TP(A, B)**2 * TP(C, D)) == TP(A**2*C, B**2*D)\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n \n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..e533525 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,8 +79,13 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n+from sympy import Symbol\n+from sympy.printing.sstr import sstr\n+from sympy import Rational, Eq, Ne, Limit\n+\n def test_python_relational():\n-    assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n+    # Updated expected output as per the fix requirement\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n     assert python(Gt(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x > y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..709cdd8 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,15 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+def test_issue_vector_add_0_error():\n+    N = ReferenceFrame('N')\n+    # Test that adding a zero-multiplied vector works without error\n+    result = sum([N.x, 0 * N.x])\n+    assert isinstance(result, Vector)\n+    assert result == N.x\n+from sympy.physics.vector import ReferenceFrame, Vector\n+from sympy.vector.vector import outer\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..7a72a1d 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -134,6 +135,17 @@ def test_math_lambda():\n \n \n @conserve_mpmath_dps\n+def test_lambdify_issue_with_rationals_mpmath():\n+    from sympy import RisingFactorial\n+    x = symbols('x')\n+    eqn = Eq(RisingFactorial(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source = inspect.getsource(f)\n+    assert \"mpmath.mpf(232)/mpmath.mpf(3)\" in source\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = RisingFactorial(18, x0).evalf(64)\n+    expected = mpmath.mpf('77.33333333333333333333333333333333333333333333333333333333333333')\n+    assert abs(result - expected) < 1e-50\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -145,6 +157,17 @@ def test_mpmath_lambda():\n \n \n @conserve_mpmath_dps\n+def test_lambdify_issue_with_rationals_mpmath():\n+    from sympy import RisingFactorial\n+    x = symbols('x')\n+    eqn = Eq(RisingFactorial(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source = inspect.getsource(f)\n+    assert \"mpmath.mpf(232)/mpmath.mpf(3)\" in source\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = RisingFactorial(18, x0).evalf(64)\n+    expected = mpmath.mpf('77.33333333333333333333333333333333333333333333333333333333333333')\n+    assert abs(result - expected) < 1e-50\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..89c3e5a 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,6 +74,13 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n+    # Test case to verify rank-0 array length\n+    scalar_array = ImmutableDenseNDimArray(x, shape=())\n+    assert len(scalar_array) == 1  # Expect 1 since it's a scalar\n+    assert scalar_array.rank() == 0\n+    assert scalar_array.shape == ()\n+    assert scalar_array[()] == x\n+    raises(ValueError, lambda: scalar_array[0])\n     assert len(rank_zero_array) == 0\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..3595aee 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n@@ -5,6 +6,7 @@ from sympy.concrete import Sum\n from sympy.functions import exp, sin, cos, conjugate\n \n from sympy import mathematica_code as mcode\n+from sympy.functions import Max, Min\n \n x, y, z = symbols('x,y,z')\n f = Function('f')\n",
  "sympy__sympy-15349": "",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..fcbd888 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1508,6 +1508,33 @@ def test_issue_5919():\n     assert (x/(y*(1 + y))).expand() == x/(y**2 + y)\n \n \n+def test_issue_15493():\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional test cases for thoroughness\n+    k = Symbol('k', integer=True)\n+    assert Mod(6*k, 3) == 0  # 6*k % 3 should be 0\n+    assert Mod(10*k, 5) == 0  # 10*k % 5 should be 0\n+    assert Mod(9*k, 6) == 3*Mod(k, 2)  # 9*k % 6 should simplify correctly\n+    assert Mod(15*k, 5) == 0  # Test with multiple of the modulus\n+\n+    # Test with negative coefficients\n+    assert Mod(-3*i, 2) == -Mod(i, 2)\n+    assert Mod(3*-i, 2) == -Mod(i, 2)\n+\n+    # Test with different symbols\n+    m = Symbol('m', integer=True)\n+    assert Mod(3*m, 2) == Mod(m, 2)\n+    assert Mod(5*m, 4) == Mod(m, 4)\n+\n+    # Ensure that if modulus is a polynomial, behavior is consistent\n+    x, y = symbols('x y', integer=True)\n+    assert Mod(3*x + y, x) == Mod(x + y, x)\n+\n+\n def test_Mod():\n     assert Mod(x, 1).func is Mod\n     assert pi % pi == S.Zero\n",
  "sympy__sympy-15809": "",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..f630a96 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,31 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n-def test_issue_14392():\n+def test_complex_is_zero():\n+    # Issue 15873\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+\n+    # Additional test cases to verify the fix\n+    # Expression that simplifies to zero\n+    e1 = (1 + I)**2 + (-2*I - 2)\n+    assert e1.is_zero is None\n+    assert simplify(e1).is_zero\n+\n+    # Expression with real and imaginary parts cancelling out\n+    e2 = I*x - I*x\n+    assert e2.is_zero\n+\n+    # Expression with undecidable zero status\n+    e3 = I*x + I*y - I*(x + y)\n+    assert e3.is_zero is None\n+\n+    # Expression that contains non-zero complex term and zero term\n+    e4 = I*2 + x - I*2\n+    assert e4.is_zero is None\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..a66e2d8 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -476,7 +476,44 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i, force=True) == i\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n-\n+from sympy import Symbol, posify\n+\n+def test_posify_finite_assumption():\n+    # issue 16438: posify should preserve the finiteness assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True,\n+        'zero': False,\n+        'imaginary': False,\n+        'nonpositive': False,\n+        'commutative': True,\n+        'hermitian': True,\n+        'real': True,\n+        'nonzero': True,\n+        'nonnegative': True,\n+        'negative': False,\n+        'complex': True,\n+        'finite': True,\n+        'infinite': False\n+    }\n+\n+    # Additional tests for other assumptions\n+    m = Symbol('m', integer=True)\n+    eq_m, rep_m = posify(m)\n+    assert eq_m.is_integer == True\n+    \n+    n = Symbol('n', rational=True)\n+    eq_n, rep_n = posify(n)\n+    assert eq_n.is_rational == True\n+\n+    o = Symbol('o', even=True)\n+    eq_o, rep_o = posify(o)\n+    assert eq_o.is_even == True\n+\n+    p = Symbol('p', odd=True)\n+    eq_p, rep_p = posify(p)\n+    assert eq_p.is_odd == True\n \n def test_issue_5950():\n     x, y = symbols(\"x,y\", positive=True)\n@@ -484,20 +521,168 @@ def test_issue_5950():\n     assert logcombine(log(x) - log(y)) == log(x/y)\n     assert logcombine(log(Rational(3,2), evaluate=False) - log(2)) == \\\n         log(Rational(3,4), evaluate=False)\n-\n+from sympy import Symbol, posify\n+\n+def test_posify_finite_assumption():\n+    # issue 16438: posify should preserve the finiteness assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True,\n+        'zero': False,\n+        'imaginary': False,\n+        'nonpositive': False,\n+        'commutative': True,\n+        'hermitian': True,\n+        'real': True,\n+        'nonzero': True,\n+        'nonnegative': True,\n+        'negative': False,\n+        'complex': True,\n+        'finite': True,\n+        'infinite': False\n+    }\n+\n+    # Additional tests for other assumptions\n+    m = Symbol('m', integer=True)\n+    eq_m, rep_m = posify(m)\n+    assert eq_m.is_integer == True\n+    \n+    n = Symbol('n', rational=True)\n+    eq_n, rep_n = posify(n)\n+    assert eq_n.is_rational == True\n+\n+    o = Symbol('o', even=True)\n+    eq_o, rep_o = posify(o)\n+    assert eq_o.is_even == True\n+\n+    p = Symbol('p', odd=True)\n+    eq_p, rep_p = posify(p)\n+    assert eq_p.is_odd == True\n \n def test_posify():\n     from sympy.abc import x\n-\n+from sympy import Symbol, posify\n+\n+def test_posify_finite_assumption():\n+    # issue 16438: posify should preserve the finiteness assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True,\n+        'zero': False,\n+        'imaginary': False,\n+        'nonpositive': False,\n+        'commutative': True,\n+        'hermitian': True,\n+        'real': True,\n+        'nonzero': True,\n+        'nonnegative': True,\n+        'negative': False,\n+        'complex': True,\n+        'finite': True,\n+        'infinite': False\n+    }\n+\n+    # Additional tests for other assumptions\n+    m = Symbol('m', integer=True)\n+    eq_m, rep_m = posify(m)\n+    assert eq_m.is_integer == True\n+    \n+    n = Symbol('n', rational=True)\n+    eq_n, rep_n = posify(n)\n+    assert eq_n.is_rational == True\n+\n+    o = Symbol('o', even=True)\n+    eq_o, rep_o = posify(o)\n+    assert eq_o.is_even == True\n+\n+    p = Symbol('p', odd=True)\n+    eq_p, rep_p = posify(p)\n+    assert eq_p.is_odd == True\n     assert str(posify(\n         x +\n         Symbol('p', positive=True) +\n         Symbol('n', negative=True))) == '(_x + n + p, {_x: x})'\n-\n+from sympy import Symbol, posify\n+\n+def test_posify_finite_assumption():\n+    # issue 16438: posify should preserve the finiteness assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True,\n+        'zero': False,\n+        'imaginary': False,\n+        'nonpositive': False,\n+        'commutative': True,\n+        'hermitian': True,\n+        'real': True,\n+        'nonzero': True,\n+        'nonnegative': True,\n+        'negative': False,\n+        'complex': True,\n+        'finite': True,\n+        'infinite': False\n+    }\n+\n+    # Additional tests for other assumptions\n+    m = Symbol('m', integer=True)\n+    eq_m, rep_m = posify(m)\n+    assert eq_m.is_integer == True\n+    \n+    n = Symbol('n', rational=True)\n+    eq_n, rep_n = posify(n)\n+    assert eq_n.is_rational == True\n+\n+    o = Symbol('o', even=True)\n+    eq_o, rep_o = posify(o)\n+    assert eq_o.is_even == True\n+\n+    p = Symbol('p', odd=True)\n+    eq_p, rep_p = posify(p)\n+    assert eq_p.is_odd == True\n     eq, rep = posify(1/x)\n     assert log(eq).expand().subs(rep) == -log(x)\n     assert str(posify([x, 1 + x])) == '([_x, _x + 1], {_x: x})'\n-\n+from sympy import Symbol, posify\n+\n+def test_posify_finite_assumption():\n+    # issue 16438: posify should preserve the finiteness assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True,\n+        'zero': False,\n+        'imaginary': False,\n+        'nonpositive': False,\n+        'commutative': True,\n+        'hermitian': True,\n+        'real': True,\n+        'nonzero': True,\n+        'nonnegative': True,\n+        'negative': False,\n+        'complex': True,\n+        'finite': True,\n+        'infinite': False\n+    }\n+\n+    # Additional tests for other assumptions\n+    m = Symbol('m', integer=True)\n+    eq_m, rep_m = posify(m)\n+    assert eq_m.is_integer == True\n+    \n+    n = Symbol('n', rational=True)\n+    eq_n, rep_n = posify(n)\n+    assert eq_n.is_rational == True\n+\n+    o = Symbol('o', even=True)\n+    eq_o, rep_o = posify(o)\n+    assert eq_o.is_even == True\n+\n+    p = Symbol('p', odd=True)\n+    eq_p, rep_p = posify(p)\n+    assert eq_p.is_odd == True\n     x = symbols('x')\n     p = symbols('p', positive=True)\n     n = symbols('n', negative=True)\n@@ -505,19 +690,130 @@ def test_posify():\n     modified, reps = posify(orig)\n     assert str(modified) == '[_x, n, p]'\n     assert [w.subs(reps) for w in modified] == orig\n-\n+from sympy import Symbol, posify\n+\n+def test_posify_finite_assumption():\n+    # issue 16438: posify should preserve the finiteness assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True,\n+        'zero': False,\n+        'imaginary': False,\n+        'nonpositive': False,\n+        'commutative': True,\n+        'hermitian': True,\n+        'real': True,\n+        'nonzero': True,\n+        'nonnegative': True,\n+        'negative': False,\n+        'complex': True,\n+        'finite': True,\n+        'infinite': False\n+    }\n+\n+    # Additional tests for other assumptions\n+    m = Symbol('m', integer=True)\n+    eq_m, rep_m = posify(m)\n+    assert eq_m.is_integer == True\n+    \n+    n = Symbol('n', rational=True)\n+    eq_n, rep_n = posify(n)\n+    assert eq_n.is_rational == True\n+\n+    o = Symbol('o', even=True)\n+    eq_o, rep_o = posify(o)\n+    assert eq_o.is_even == True\n+\n+    p = Symbol('p', odd=True)\n+    eq_p, rep_p = posify(p)\n+    assert eq_p.is_odd == True\n     assert str(Integral(posify(1/x + y)[0], (y, 1, 3)).expand()) == \\\n         'Integral(1/_x, (y, 1, 3)) + Integral(_y, (y, 1, 3))'\n     assert str(Sum(posify(1/x**n)[0], (n,1,3)).expand()) == \\\n         'Sum(_x**(-n), (n, 1, 3))'\n-\n+from sympy import Symbol, posify\n+\n+def test_posify_finite_assumption():\n+    # issue 16438: posify should preserve the finiteness assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True,\n+        'zero': False,\n+        'imaginary': False,\n+        'nonpositive': False,\n+        'commutative': True,\n+        'hermitian': True,\n+        'real': True,\n+        'nonzero': True,\n+        'nonnegative': True,\n+        'negative': False,\n+        'complex': True,\n+        'finite': True,\n+        'infinite': False\n+    }\n+\n+    # Additional tests for other assumptions\n+    m = Symbol('m', integer=True)\n+    eq_m, rep_m = posify(m)\n+    assert eq_m.is_integer == True\n+    \n+    n = Symbol('n', rational=True)\n+    eq_n, rep_n = posify(n)\n+    assert eq_n.is_rational == True\n+\n+    o = Symbol('o', even=True)\n+    eq_o, rep_o = posify(o)\n+    assert eq_o.is_even == True\n+\n+    p = Symbol('p', odd=True)\n+    eq_p, rep_p = posify(p)\n+    assert eq_p.is_odd == True\n \n def test_issue_4194():\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n     assert simplify((4*x + 6*f(y))/(2*x + 3*f(y))) == 2\n-\n+from sympy import Symbol, posify\n+\n+def test_posify_finite_assumption():\n+    # issue 16438: posify should preserve the finiteness assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True,\n+        'zero': False,\n+        'imaginary': False,\n+        'nonpositive': False,\n+        'commutative': True,\n+        'hermitian': True,\n+        'real': True,\n+        'nonzero': True,\n+        'nonnegative': True,\n+        'negative': False,\n+        'complex': True,\n+        'finite': True,\n+        'infinite': False\n+    }\n+\n+    # Additional tests for other assumptions\n+    m = Symbol('m', integer=True)\n+    eq_m, rep_m = posify(m)\n+    assert eq_m.is_integer == True\n+    \n+    n = Symbol('n', rational=True)\n+    eq_n, rep_n = posify(n)\n+    assert eq_n.is_rational == True\n+\n+    o = Symbol('o', even=True)\n+    eq_o, rep_o = posify(o)\n+    assert eq_o.is_even == True\n+\n+    p = Symbol('p', odd=True)\n+    eq_p, rep_p = posify(p)\n+    assert eq_p.is_odd == True\n \n @XFAIL\n def test_simplify_float_vs_integer():\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..c95d512 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -36,7 +38,14 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n \n-def test_MpmathPrinter():\n+def test_indexed_printing():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y]) == 'p[x, y]'\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[x]) == 'p[x]'\n+    assert prntr.doprint(p[x + 1, y - 1]) == 'p[x + 1, y - 1]'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..b0c989b 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -31,7 +31,23 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     return source\n \n \n-def test_cython_wrapper_scalar_function():\n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol, symbols\n+import numpy as np\n+\n+def test_cython_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in the output expression\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0, f\"Expected 1.0 but got {result}\"\n+\n+def test_cython_used_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = x[0, 0]  # x appears in the output expression\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0, f\"Expected 1.0 but got {result}\"\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..bc53115 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,6 +248,18 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n+def test_morse_encoding_of_numbers():\n+    # Specific test for encoding and decoding the digit \"1\"\n+    assert encode_morse('1') == '.----'\n+    assert decode_morse('.----') == '1'\n+\n+    # Original test case for a sequence including \"1\"\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n+\n+    # Ensure that other numbers are not affected\n+    assert decode_morse('..---|...--|....-|.....') == '2345'\n+    assert decode_morse('-....|--...|---..|----.|-----') == '67890'\n \n def test_decode_morse():\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_fu.py b/sympy/simplify/tests/test_fu.py\nindex 135b4cd..0fad2e6 100644\n--- a/sympy/simplify/tests/test_fu.py\n+++ b/sympy/simplify/tests/test_fu.py\n@@ -59,6 +59,18 @@ def test_TR2i():\n \n def test_TR3():\n     assert TR3(cos(y - x*(y - x))) == cos(x*(x - y) + y)\n+\n+def test_issue_17137_fu():\n+    h = lambda x: 1 - x\n+    # Existing tests from the original test patch\n+    assert T(sin(x)**I, sin, cos, h, 4, True) == sin(x)**I\n+    assert T(sin(x)**(2*I + 1), sin, cos, h, 4, True) == sin(x)**(2*I + 1)\n+    \n+    # New test cases to check additional complex exponent expressions\n+    assert T(cos(x)**I, sin, cos, h, 4, True) == cos(x)**I\n+    assert T(cos(x)**(2 + 3*I), sin, cos, h, 4, True) == cos(x)**(2 + 3*I)\n+    assert T(sin(x + y)**I, sin, cos, h, 4, True) == sin(x + y)**I\n+    assert T(cos(y)**(I - 1), sin, cos, h, 4, True) == cos(y)**(I - 1)\n     assert cos(pi/2 + x) == -sin(x)\n     assert cos(30*pi/2 + x) == -cos(x)\n \n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..74c6c98 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -175,8 +178,25 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n+def test_issue_12420():\n+    # Test cases directly from the issue\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr\n+\n+    # Additional test cases to ensure robustness\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n+\n+    # Testing _sqrt_match to ensure it doesn't trigger IndexError internally\n+    assert _sqrt_match(4 + I) == []\n+\n+    # Testing with a real expression that should be unchanged\n+    real_expr = (5 + sqrt(3) + 2*I) / (1 + I)\n+    assert sqrtdenest(real_expr) == real_expr\n \n-def test_issue_5653():\n+    # More complex expression which should not be denested\n+    complex_expr = (5 - sqrt(2)*sqrt(1 + 2*I) + sqrt(I)) / (2 - I)\n+    assert sqrtdenest(complex_expr) == complex_expr\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..75c1711 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -91,6 +92,12 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    assert 5 * p4 == Point(5, 5)\n+    # Test for commutativity in multiplication with sympified numbers\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    assert (point1 + point2 * sympy.sympify(2.0)) == Point(2, 2)\n+    assert (point1 + sympy.sympify(2.0) * point2) == Point(2, 2)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..7475697 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,6 +553,21 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+def test_issue_18186():\n+    from sympy import diophantine\n+    from sympy.abc import m, n\n+    \n+    # Test the specific issue where the order of symbols affects the result\n+    eq = n**4 + m**4 - 2**4 - 3**4\n+    expected_solution = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    \n+    result_mn = diophantine(eq, syms=(m, n), permute=True)\n+    result_nm = diophantine(eq, syms=(n, m), permute=True)\n+    \n+    assert result_mn == expected_solution\n+    assert result_nm == expected_solution\n+    assert result_mn == result_nm\n+\n \n def test_general_pythagorean():\n     from sympy.abc import a, b, c, d, e\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..44ecb4b 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -671,6 +671,16 @@ def test_latex_derivatives():\n     assert latex(diff(f(x), (x, Max(n1, n2)))) == \\\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n+def test_issue_incorrect_parenthesizing_of_subs():\n+    from sympy import Subs, symbols, latex\n+    x, y = symbols('x y')\n+    # Original test case\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    # Additional test cases to verify further\n+    z = symbols('z')\n+    assert latex(Subs(x + y*z, (x,), (1,))) == r'\\left. \\left(x + y z\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(2*Subs(-x**2 + y*x, (x, y), (1, 2))) == r'2 \\left. \\left(- x^{2} + x y\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+\n \n def test_latex_subs():\n     assert latex(Subs(x*y, (\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..2c3cae6 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -473,7 +473,10 @@ def test_issue_4988_builtins():\n     assert exp1 == C  # Make sure it did not get mixed up with sympy.C\n \n     exp2 = sympify('C', vars)\n-    assert exp2 == C  # Make sure it did not get mixed up with sympy.C\n+from sympy.core.sympify import kernS\n+from sympy.abc import x, y\n+from sympy import Symbol, Add, Mul, Interval, sin, cos, exp, Rational, S, Matrix\n+from sympy.core.sympify import SympifyError\n \n \n def test_geometry():\n@@ -513,8 +516,46 @@ def test_kernS():\n     one = kernS('x - (x - 1)')\n     assert one != 1 and one.expand() == 1\n \n+def test_kernS_issue_resolution():\n+    # Test case based on the issue description to ensure the fix\n+    text = \"(2*x)/(x-1)\"\n+    expr = kernS(text)\n+    assert expr == 2*x/(x-1)\n+\n+    # Additional test cases for checking UnboundLocalError\n+    # Simple expression\n+    assert kernS(\"x + 2\") == x + 2\n+\n+    # Complex nested expression\n+    assert kernS(\"2*(x + (y - x))\") == 2*(x + (y - x))\n+\n+    # Expression with powers\n+    assert kernS(\"x**2 + y*x + y**2\") == x**2 + y*x + y**2\n \n-def test_issue_6540_6552():\n+    # Negative sign distribution\n+    expr_neg = kernS(\"-(x + y)\")\n+    assert expr_neg == -(x + y)\n+\n+    # Expression with intervals\n+    assert kernS('Interval(0, x)') == Interval(0, x)\n+\n+    # Expressions which might result in a SympifyError\n+    try:\n+        kernS(\"x + (\")\n+        assert False, \"SympifyError not raised for unmatched parenthesis\"\n+    except SympifyError:\n+        pass\n+\n+    try:\n+        kernS(\"unmatched ( parenthesis\")\n+        assert False, \"SympifyError not raised for unmatched parenthesis\"\n+    except SympifyError:\n+        pass\n+\n+    # Kerns in different contexts\n+    assert kernS('Interval(-1,-2 - 4*(-3))') == Interval(-1, Add(-2, Mul(12, 1, evaluate=False), evaluate=False))\n+    assert kernS('E**-(x)') == exp(-x)\n+    assert kernS('x - (x - 1)') != 1\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_dagger.py b/sympy/physics/quantum/tests/test_dagger.py\nindex ad97a01..51a331f 100644\n--- a/sympy/physics/quantum/tests/test_dagger.py\n+++ b/sympy/physics/quantum/tests/test_dagger.py\n@@ -1,11 +1,16 @@\n+\n from sympy import I, Matrix, symbols, conjugate, Expr, Integer\n \n from sympy.physics.quantum.dagger import adjoint, Dagger\n-from sympy.external import import_module\n+from sympy.physics.quantum.operator import Operator, IdentityOperator\n from sympy.testing.pytest import skip\n-\n-\n-def test_scalars():\n+def test_dagger_identity():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    \n+    # Test Dagger with IdentityOperator\n+    assert Dagger(O) * I == Dagger(O)\n+    assert I * Dagger(O) == Dagger(O)\n     x = symbols('x', complex=True)\n     assert Dagger(x) == conjugate(x)\n     assert Dagger(I*x) == -I*conjugate(x)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..734f553 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,8 +905,18 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n+    # Test cases specifically added to check for the resolved IndexError in sylow_subgroup\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(2)\n+    assert S.order() == 4\n \n-@slow\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(2*25)\n+    S = G.sylow_subgroup(2)\n+    assert S.order() == 4\n def test_presentation():\n     def _test(P):\n         G = P.presentation()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..e1ee806 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -462,6 +462,33 @@ def test_multiset_permutations():\n         [0, 0, 1, 0, 1]\n         [0, 0, 1, 1, 0]\n         [0, 1, 0, 0, 1]\n+\n+\n+def test_partitions_copy():\n+    # Ensure the partitions returned are distinct objects\n+    results = list(partitions(4, k=2))\n+    \n+    # Check that modifying one result does not affect others\n+    for i, p in enumerate(results):\n+        p_copy = p.copy()\n+        p_copy.clear()\n+        \n+        # All original results should remain unchanged\n+        for j, original_p in enumerate(results):\n+            if i != j:\n+                assert original_p, f\"Partition {j} was unexpectedly modified\"\n+\n+    # Ensure list(partitions()) regenerates expected unique dictionaries\n+    expected_results = [{2: 2}, {1: 2, 2: 1}, {1: 4}]\n+    assert [p.copy() for p in partitions(4, k=2)] == expected_results\n+\n+    # Test with size=True\n+    expected_size_results = [\n+        (2, {2: 2}),\n+        (3, {1: 2, 2: 1}),\n+        (4, {1: 4})\n+    ]\n+    assert [(size, p.copy()) for size, p in partitions(4, k=2, size=True)] == expected_size_results\n         [0, 1, 0, 1, 0]\n         [0, 1, 1, 0, 0]\n         [1, 0, 0, 0, 1]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..4a36bef 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -571,25 +571,145 @@ def test_Float():\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=10))\n     raises(ValueError, lambda: Float(\"1.23\", dps=3, precision=\"\"))\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=\"\"))\n-\n+def test_zero_float_not_false():\n+    # Verify that S(0.0) does not equal S.false\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    # Ensure consistency with integer zero\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+from sympy import S\n+def test_comparison_with_other_numbers():\n+    # Additional tests to ensure other numbers comparison with S.false\n+    assert (S(1.0) == S.false) is False\n+    assert (S.false == S(1.0)) is False\n+    assert (S(-1.0) == S.false) is False\n+    assert (S.false == S(-1.0)) is False\n+    assert (S(0.5) == S.false) is False\n+    assert (S.false == S(0.5)) is False\n+from sympy import S\n+def test_boolean_false():\n+    # Comparison with Python False\n+    assert (S(0.0) == False) is True\n+    assert (False == S(0.0)) is True\n+    assert (S(0) == False) is True\n+    assert (False == S(0)) is True\n+    assert (S.false == False) is True\n+    assert (False == S.false) is True\n     # from NumberSymbol\n     assert same_and_same_prec(Float(pi, 32), pi.evalf(32))\n     assert same_and_same_prec(Float(Catalan), Catalan.evalf())\n-\n+def test_zero_float_not_false():\n+    # Verify that S(0.0) does not equal S.false\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    # Ensure consistency with integer zero\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+from sympy import S\n+def test_comparison_with_other_numbers():\n+    # Additional tests to ensure other numbers comparison with S.false\n+    assert (S(1.0) == S.false) is False\n+    assert (S.false == S(1.0)) is False\n+    assert (S(-1.0) == S.false) is False\n+    assert (S.false == S(-1.0)) is False\n+    assert (S(0.5) == S.false) is False\n+    assert (S.false == S(0.5)) is False\n+from sympy import S\n+def test_boolean_false():\n+    # Comparison with Python False\n+    assert (S(0.0) == False) is True\n+    assert (False == S(0.0)) is True\n+    assert (S(0) == False) is True\n+    assert (False == S(0)) is True\n+    assert (S.false == False) is True\n+    assert (False == S.false) is True\n     # oo and nan\n     u = ['inf', '-inf', 'nan', 'iNF', '+inf']\n     v = [oo, -oo, nan, oo, oo]\n     for i, a in zip(u, v):\n         assert Float(i) is a\n-\n-\n-\n+def test_zero_float_not_false():\n+    # Verify that S(0.0) does not equal S.false\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    # Ensure consistency with integer zero\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+from sympy import S\n+def test_comparison_with_other_numbers():\n+    # Additional tests to ensure other numbers comparison with S.false\n+    assert (S(1.0) == S.false) is False\n+    assert (S.false == S(1.0)) is False\n+    assert (S(-1.0) == S.false) is False\n+    assert (S.false == S(-1.0)) is False\n+    assert (S(0.5) == S.false) is False\n+    assert (S.false == S(0.5)) is False\n+from sympy import S\n+def test_boolean_false():\n+    # Comparison with Python False\n+    assert (S(0.0) == False) is True\n+    assert (False == S(0.0)) is True\n+    assert (S(0) == False) is True\n+    assert (False == S(0)) is True\n+    assert (S.false == False) is True\n+    assert (False == S.false) is True\n+from sympy import S\n+def test_zero_float_not_false():\n+    # Verify that S(0.0) does not equal S.false\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    # Ensure consistency with integer zero\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+from sympy import S\n+def test_comparison_with_other_numbers():\n+    # Additional tests to ensure other numbers comparison with S.false\n+    assert (S(1.0) == S.false) is False\n+    assert (S.false == S(1.0)) is False\n+    assert (S(-1.0) == S.false) is False\n+    assert (S.false == S(-1.0)) is False\n+    assert (S(0.5) == S.false) is False\n+    assert (S.false == S(0.5)) is False\n+from sympy import S\n+def test_boolean_false():\n+    # Comparison with Python False\n+    assert (S(0.0) == False) is True\n+    assert (False == S(0.0)) is True\n+    assert (S(0) == False) is True\n+    assert (False == S(0)) is True\n+    assert (S.false == False) is True\n+    assert (False == S.false) is True\n @conserve_mpmath_dps\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n     mp_pi = mpmath.pi()\n-\n+def test_zero_float_not_false():\n+    # Verify that S(0.0) does not equal S.false\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    # Ensure consistency with integer zero\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+from sympy import S\n+def test_comparison_with_other_numbers():\n+    # Additional tests to ensure other numbers comparison with S.false\n+    assert (S(1.0) == S.false) is False\n+    assert (S.false == S(1.0)) is False\n+    assert (S(-1.0) == S.false) is False\n+    assert (S.false == S(-1.0)) is False\n+    assert (S(0.5) == S.false) is False\n+    assert (S.false == S(0.5)) is False\n+from sympy import S\n+def test_boolean_false():\n+    # Comparison with Python False\n+    assert (S(0.0) == False) is True\n+    assert (False == S(0.0)) is True\n+    assert (S(0) == False) is True\n+    assert (False == S(0)) is True\n+    assert (S.false == False) is True\n+    assert (False == S.false) is True\n     assert Float(mp_pi, 100) == Float(mp_pi._mpf_, 100) == pi.evalf(100)\n \n     mpmath.mp.dps = 15\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..149f1f2 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,6 +20,33 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # Test for issue with unexpected PolynomialError using subs()\n+    from sympy.functions.elementary.hyperbolic import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+    \n+    # Test case mimicking the original issue description\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})  # Should not raise PolynomialError\n+    \n+    # Additional edge cases related to the issue\n+    # Using cosh instead of sinh\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_cosh.subs({1: 1.0}) == expr_cosh.subs({1: 1.0})\n+    \n+    # Removing division by z_r\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_div.subs({1: 1.0}) == expr_no_div.subs({1: 1.0})\n+    \n+    # Removing exp\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    assert expr_no_exp.subs({1: 1.0}) == expr_no_exp.subs({1: 1.0})\n+    \n+    # Non-real symbols for x and y\n+    x_nr, y_nr = symbols('x_nr y_nr')  # No real=True assumption\n+    expr_non_real = exp(sinh(Piecewise((x_nr, y_nr > x_nr), (y_nr, True)) / z_r))\n+    assert expr_non_real.subs({1: 1.0}) == expr_non_real.subs({1: 1.0})\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..a3bd6d7 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -15,8 +15,22 @@ from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n \n def test_monomials():\n+    # Testing issue where itermonomials returns incorrect monomials given min_degrees\n+    x1, x2, x3 = symbols('x1, x2, x3')\n+    monomials = sorted(itermonomials([x1, x2, x3], 3, min_degrees=3), key=monomial_key('grlex', [x1, x2, x3]))\n+    expected_monomials = {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x2*x3**2, x2**2*x3, x1*x3**2, x1**2*x3, x1*x2*x3}\n+    assert set(monomials) == expected_monomials\n+\n+    monomials = sorted(itermonomials([x1, x2, x3], 4, min_degrees=3), key=monomial_key('grlex', [x1, x2, x3]))\n+    expected_monomials = {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x2*x3**2, x2**2*x3, x1*x3**2, x1**2*x3, x1*x2*x3,\n+                          x1**4, x2**4, x3**4, x1**3*x2, x1**3*x3, x2**3*x1, x2**3*x3, x3**3*x1, x3**3*x2,\n+                          x1**2*x2**2, x1**2*x3**2, x2**2*x3**2, x1*x2**3, x1*x3**3, x2*x1**2*x3, x3*x1**2*x2,\n+                          x1*x2*x3**2, x1**2*x2*x3, x2*x3*x1**2}\n+    assert set(monomials) == expected_monomials\n \n     # total_degree tests\n     assert set(itermonomials([], 0)) == {S.One}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..094b7db 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -264,6 +264,13 @@ def test_none():\n def test_String():\n     st = String('foobar')\n     assert st.is_Atom\n+    assert st.func(*st.args) == st  # Ensures argument invariance\n+\n+    # Additional test cases to verify invariant behavior for derived classes\n+    qt = QuotedString('foobar')\n+    assert qt.func(*qt.args) == qt\n+    cm = Comment('foobar')\n+    assert cm.func(*cm.args) == cm\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..1d214a6 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,6 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -12,6 +14,21 @@ from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n \n \n+def test_issue_22684():\n+    # Test case for the issue where Point2D with evaluate(False) was giving an unexpected error\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+        assert p == Point2D(1, 2)\n+\n+    no_error = False\n+    try:\n+        with evaluate(False):\n+            sp.S('Point2D(Integer(1), Integer(2))')\n+        no_error = True\n+    except ValueError as e:\n+        no_error = 'Imaginary coordinates are not permitted' not in str(e)\n+    assert no_error\n+\n def test_point():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..55f59e7 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -27,7 +28,8 @@ p = IndexedBase(\"p\")\n def test_PythonCodePrinter():\n     prntr = PythonCodePrinter()\n \n-    assert not prntr.module_imports\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n \n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n@@ -35,7 +37,8 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n-    assert not prntr.module_imports\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n \n     assert prntr.doprint(pi) == 'math.pi'\n     assert prntr.module_imports == {'math': {'pi'}}\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..0446401 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,18 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n+def test_lambdify_single_element_tuple():\n+    # Test for a single-element tuple\n+    f = lambdify([], (1,))\n+    assert f() == (1,), \"Single-element tuple did not return correctly.\"\n+\n+    # Verify that the Python code printer respects the tuple commas\n+    source_code = inspect.getsource(f)\n+    assert 'return (1,)' in source_code, \"Source code did not respect single-element tuple.\"\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..2a47339 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,9 +1,11 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n+from sympy.core.function import Function, UndefinedFunction\n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n \n@@ -295,7 +297,11 @@ def test_symbols():\n     assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n \n \n-    # issue 6675\n+def test_symbols_with_extra_parentheses():\n+    from sympy.core.symbol import symbols\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert isinstance(q[0], UndefinedFunction), \"q[0] should be an instance of UndefinedFunction\"\n+    assert isinstance(u[0], UndefinedFunction), \"u[0] should be an instance of UndefinedFunction\"\n     def sym(s):\n         return str(symbols(s))\n     assert sym('a0:4') == '(a0, a1, a2, a3)'\n",
  "sympy__sympy-23824": "",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..225f665 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -45,7 +45,29 @@ def test_as_set():\n     # containment in a Set -- rewriting as a Set is not yet implemented\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n+from sympy import Symbol, Contains, FiniteSet, Reals, Integers, S, Piecewise, Eq\n+from sympy.testing.pytest import raises\n \n-def test_type_error():\n+def test_as_set_patch():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # Test cases based on the original test patch\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n+    \n+    # Additional test cases\n+    z = Symbol('z')\n+    assert Contains(x, FiniteSet(1, 2, 3)).as_set() == FiniteSet(1, 2, 3)\n+    assert Contains(x, Integers).as_set() == Integers\n+    assert Contains(x, Reals).as_set() == Reals\n+    \n+    # Checking integration with Piecewise\n+    pw = Piecewise((6, Contains(x, Reals).as_set()), (7, True))\n+    assert pw.evalf(subs={x: 2.5}) == 6\n+    assert pw.evalf(subs={x: -1}) == 6\n+    assert pw.evalf(subs={x: 100}) == 6\n+    assert pw.evalf(subs={x: S.ImaginaryUnit}) == 7\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..00d1e43 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,10 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+from sympy.core.numbers import E\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+from sympy import exp\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n@@ -541,7 +545,22 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24213": "",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..12a8817 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -5,6 +6,7 @@ from sympy.combinatorics.free_groups import free_group\n from sympy.combinatorics.fp_groups import FpGroup\n from sympy.combinatorics.named_groups import AlternatingGroup, DihedralGroup, CyclicGroup\n from sympy.testing.pytest import raises\n+from sympy.combinatorics.named_groups import SymmetricGroup\n \n def test_homomorphism():\n     # FpGroup -> PermutationGroup\n@@ -57,7 +59,15 @@ def test_homomorphism():\n     assert T.codomain == D\n     assert T(a*b) == p\n \n-def test_isomorphisms():\n+    # Additional test for the original issue with PermutationGroup\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Another test for inverted generators\n+    S3 = SymmetricGroup(3)\n+    T2 = homomorphism(S3, S3, S3.generators, S3.generators)\n+    assert T2.is_isomorphism()\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..b908043 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -267,6 +267,20 @@ def test_PolyElement_as_expr():\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n+    # New test: Use different symbols that are of different length\n+    U, V = symbols(\"u,v\")\n+    raises(ValueError, lambda: f.as_expr(U, V))  # not enough symbols\n+\n+    # Use three different symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g_uv = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g_uv\n+\n+    # Another set of different symbols\n+    A, B, C = symbols(\"a,b,c\")\n+    g_ab = 3*A**2*B - A*B*C + 7*C**3 + 1\n+    assert f.as_expr(A, B, C) == g_ab\n+\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..6163917 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -269,6 +269,38 @@ def test_convert_equals_signs():\n     x = Symbol('x')\n     y = Symbol('y')\n     assert parse_expr(\"1*2=x\", transformations=transformations) == Eq(2, x)\n+\n+\n+def test_issue_24288():\n+    from sympy.parsing.sympy_parser import parse_expr\n+    from sympy.core import Eq, Lt, Le, Gt, Ge, Ne\n+\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+\n+def test_complex_relationals():\n+    from sympy.parsing.sympy_parser import parse_expr\n+    from sympy.core import Symbol, Eq, Lt\n+\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    inputs = {\n+        \"2*x < 3*y\": Lt(2*x, 3*y, evaluate=False),\n+        \"x + 1 < y - 1\": Lt(x + 1, y - 1, evaluate=False),\n+        \"(x + y) > (x - y)\": Gt(x + y, x - y, evaluate=False),\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n     assert parse_expr(\"y = x\", transformations=transformations) == Eq(y, x)\n     assert parse_expr(\"(2*y = x) = False\",\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..635ffba 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -61,6 +61,9 @@ def test_unit_grammar_fail(string):\n         ([\"mW/(m2)\"], u.Unit(u.erg / u.cm**2 / u.s)),\n         ([\"km/s\", \"km.s-1\"], u.km / u.s),\n         ([\"10pix/nm\"], u.Unit(10 * u.pix / u.nm)),\n+        # New test cases for composite units as per CDS standard\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n         ([\"1.5x10+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"1.5\u00d710+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"m2\"], u.m**2),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..9f22e28 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1910,6 +1910,27 @@ class OperationTests(OperationTestBase):\n         )\n         # Test state alteration\n         new_state = project_state.clone()\n+\n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_complex_check_constraint(self):\n+        app_label = 'test_complex_check_constraint'\n+        constraint_name = 'complex_constraint'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+\n+        # Testing the schema migration without an error\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(flag=True, field_1=None)\n+        TestConstraint.objects.create(flag=False, field_1=None)  # Should not raise\n+        TestConstraint.objects.create(flag=True, field_1=1)  # Should not raise\n         gt_operation.state_forwards(\"test_removeconstraint\", new_state)\n         self.assertEqual(len(new_state.models[\"test_removeconstraint\", \"pony\"].options['constraints']), 1)\n         Pony = new_state.apps.get_model(\"test_removeconstraint\", \"Pony\")\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..613e929 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,8 +163,29 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n-\n-class URLNamespaceTests(URLTestCaseBase):\n+    def test_translate_url_with_optional_named_groups(self):\n+        with translation.override('en'):\n+            # Test URL with an optional part missing\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/required/', 'nl'),\n+                '/nl/with-arguments/required/'\n+            )\n+            # Test URL with optional part present\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/required/optional.html', 'nl'),\n+                '/nl/with-arguments/required/optional.html'\n+            )\n+\n+            # Testing a pattern where an optional numeric group is missing\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/', 'nl'),\n+                '/nl/regex_optional/1/'\n+            )\n+            # Testing a pattern where an optional numeric group is present\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/2/', 'nl'),\n+                '/nl/regex_optional/1/2/'\n+            )\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n     \"\"\"\n",
  "django__django-12273": "",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..12e253f 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -604,8 +604,17 @@ class DeletionTests(TestCase):\n                 signal.disconnect(receiver, sender=Referrer)\n \n \n+from django.db import connection\n+\n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries are used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +711,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..cbad5e9 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,26 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_to_python_type_error_on_dict(self):\n+        f = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        with self.assertRaisesMessage(ValidationError, msg % '{}'):\n+            f.to_python({})\n+        \n+    def test_to_python_type_error_on_non_decimal(self):\n+        f = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        test_values = [\n+            {},  # Dictionary\n+            [],  # List\n+            set(),  # Set\n+            (),  # Tuple\n+            object(),  # Custom object\n+        ]\n+        for value in test_values:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % str(value)):\n+                    f.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..bf7d240 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -219,7 +220,34 @@ class PickleabilityTestCase(TestCase):\n         with self.assertNumQueries(0):\n             self.assert_pickles(groups)\n \n-    def test_annotation_with_callable_default(self):\n+    def test_pickle_values_and_annotate(self):\n+        # Set up data\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+        # Create a queryset using values and annotate\n+        qs = Toy.objects.values('material').annotate(total_price=models.Sum('price'))\n+        # Pickle and unpickle the queryset\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+        # Verify the results\n+        expected_result = list(qs)\n+        self.assertSequenceEqual(list(reloaded), expected_result)\n+\n+    def test_pickle_values_list(self):\n+        # Set up data\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+\n+        # Create a queryset using values_list\n+        qs = Toy.objects.values_list('name', flat=True)\n+        # Pickle and unpickle the queryset\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+        # Verify the results\n+        expected_result = list(qs)\n+        self.assertSequenceEqual(list(reloaded), expected_result)\n         # Happening.when has a callable default of datetime.datetime.now.\n         qs = Happening.objects.annotate(latest_time=models.Max('when'))\n         self.assert_pickles(qs)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..5d79006 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -24,6 +24,20 @@ class JSONFieldTest(SimpleTestCase):\n         with self.assertRaisesMessage(ValidationError, 'Enter a valid JSON.'):\n             field.clean('{some badly formed: json}')\n \n+    def test_unicode_characters(self):\n+        field = JSONField()\n+        # Test with Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4e2d\u56fd'}), '{\"a\": \"\u4e2d\u56fd\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+\n+        # Test with emojis\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(field.prepare_value('\ud83d\ude00\ud83d\udc31'), '\"\ud83d\ude00\ud83d\udc31\"')\n+\n+        # Test mixed content\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d\uff0c\u4e16\u754c', '\ud83d\ude00\ud83d\udc31', {'nested': '\u4e2d\u56fd'}]),\n+                         '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"\ud83d\ude00\ud83d\udc31\", {\"nested\": \"\u4e2d\u56fd\"}]')\n+\n     def test_prepare_value(self):\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n",
  "django__django-14404": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..92d16d3 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,7 +655,40 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n-    def test_serialize_type_none(self):\n+    def test_serialize_models_import(self):\n+        \"\"\"\n+        Test that generated migration includes 'models' import \n+        when custom fields and mixins are used.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, models.Model):\n+            name = MyField(primary_key=True)\n+\n+        fields = {'name': MyField(primary_key=True)}\n+        \n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name='MyModel',\n+                    fields=tuple(fields.items()),\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        \n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        # Ensure 'models' is imported in the output string\n+        self.assertIn(\"from django.db import models\", output)\n+        # Check that models.Model is properly used\n+        self.assertIn(\"bases=(MyMixin, models.Model)\", output)\n         self.assertSerializedEqual(type(None))\n \n     def test_simple_migration(self):\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..1bac2e6 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,7 +1630,21 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n-    def test_exists_none_with_aggregate(self):\n+    def test_aggregation_default_after_annotation(self):\n+        # Test aggregation with a default value after annotate\n+        result = Book.objects.annotate(\n+            idx=F('id')\n+        ).aggregate(id_sum=Sum('id', default=0))\n+        # Check that the aggregate correctly sums the IDs\n+        self.assertEqual(result['id_sum'], 4560)\n+\n+    def test_aggregation_coalesce_as_workaround(self):\n+        # Test using Coalesce as a workaround for aggregate with defaults\n+        result = Book.objects.annotate(\n+            idx=F('id')\n+        ).aggregate(id_sum=Coalesce(Sum('id'), 0))\n+        # Check that the aggregate correctly sums the IDs\n+        self.assertEqual(result['id_sum'], 4560)\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1656,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..3fed920 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,7 +3497,63 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n-class LocalizedModelFormTest(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from django.forms import modelform_factory\n+from django.db import models\n+\n+class Person(models.Model):\n+    id = models.AutoField(primary_key=True)\n+    name = models.CharField(max_length=100)\n+\n+class CustomCallbackModelFormTest(TestCase):\n+    def test_modelform_factory_uses_meta_formfield_callback(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class MyModelForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = callback\n+\n+        FactoryForm = modelform_factory(Person, form=MyModelForm)\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertIsInstance(field.widget, forms.Textarea)\n+\n+    def test_modelform_factory_without_formfield_callback_uses_base(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = callback\n+\n+        FactoryForm = modelform_factory(Person, form=BaseForm)\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertIsInstance(field.widget, forms.Textarea)\n+\n+    def test_modelform_factory_with_explicit_callback_overrides_meta(self):\n+        def base_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        def explicit_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.PasswordInput)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = base_callback\n+\n+        FactoryForm = modelform_factory(Person, form=BaseForm, formfield_callback=explicit_callback)\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertIsInstance(field.widget, forms.PasswordInput)\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..4782987 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -13,7 +13,26 @@ from django.utils.translation import gettext_lazy, override\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n+from django.core.exceptions import FieldError\n+from django.db import models\n+from django.core import serializers\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        return qs.select_related(\"master\")\n+\n+class TestTag(models.Model):\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+    objects = TestTagManager()\n \n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n \n class JsonSerializerTestCase(SerializersTestBase, TestCase):\n     serializer_name = \"json\"\n@@ -154,7 +173,25 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n         with self.assertRaisesMessage(DeserializationError, expected):\n             list(serializers.deserialize(\"json\", test_string))\n \n-    def test_helpful_error_message_for_many2many_non_natural(self):\n+    def test_serialization_m2m_with_custom_manager(self):\n+        \"\"\"\n+        Test serialization of a model with a many-to-many field where the related model\n+        uses a custom manager that applies select_related.\n+        This should not raise FieldError after the fix.\n+        \"\"\"\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+\n+        # Attempt to serialize the Test instance\n+        try:\n+            serialized_data = serializers.serialize(\"json\", [test])\n+            # If no exception is raised, print the serialized data (not necessary in real tests)\n+            print(serialized_data)\n+        except FieldError as e:\n+            self.fail(f\"FieldError raised during serialization: {e}\")\n         \"\"\"\n         Invalid many-to-many keys should throw a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..400ab71 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -206,8 +206,26 @@ def test_inset_and_secondary():\n def test_cmap(cmap):\n     pickle.dumps(cmap)\n \n-\n-def test_unpickle_canvas():\n+@pytest.mark.skipif(platform.system() != 'Darwin', reason=\"Test only runs on macOS\")\n+def test_figure_dpi_after_unpickle():\n+    from matplotlib.figure import Figure\n+    import pickle\n+    \n+    fig = Figure(dpi=200)\n+    out = BytesIO()\n+    pickle.dump(fig, out)\n+    out.seek(0)\n+    fig2 = pickle.load(out)\n+    \n+    assert fig2.dpi == 200, \"DPI should remain unchanged after unpickling\"\n+    \n+    # Run this in a loop similar to the issue description\n+    for i in range(20):\n+        out.seek(0)  # reset BytesIO object\n+        pickle.dump(fig2, out)\n+        out.seek(0)\n+        fig2 = pickle.load(out)\n+        assert fig2.dpi == 200, f\"DPI should remain 200 after {i+1} unpicklings, but got {fig2.dpi}\"\n     fig = mfigure.Figure()\n     assert fig.canvas is not None\n     out = BytesIO()\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..86e85ac 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,7 +6586,9 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n-    actual = da.integrate(\"y\")\n+    with pytest.warns(FutureWarning):\n+        actual = da.integrate(dim=\"y\")\n+    actual_coord = da.integrate(coord=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n@@ -6594,7 +6596,8 @@ def test_integrate(dask):\n     )\n     assert_allclose(expected_y, actual.compute())\n     assert_equal(actual, ds.integrate(\"y\")[\"var\"])\n-    assert_equal(ds[\"var\"].integrate(\"y\"), ds.integrate(\"y\")[\"var\"])\n+    assert_equal(ds[\"var\"].integrate(coord=\"y\"), ds.integrate(coord=\"y\")[\"var\"])\n+    assert_equal(actual_coord, ds.integrate(coord=\"y\")[\"var\"])\n \n     # along x and y\n     actual = da.integrate((\"y\", \"x\"))\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..10e90ec 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_unstacked_dataset_single_dim(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..b7be00e 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -114,21 +114,43 @@ def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"the-newest has an invalid format, should be a version string.\" in output.err\n \n+import re\n+from typing import Any\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\"\"\"\n+    \n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n \n-def test_regex_error(capsys: CaptureFixture) -> None:\n-    \"\"\"Check that we correctly error when an an option is passed whose value is an invalid regular expression.\"\"\"\n+def test_csv_regex_error(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly error on invalid regular expressions in the bad-names-rgx option.\"\"\"\n     with pytest.raises(SystemExit):\n         Run(\n-            [str(EMPTY_MODULE), r\"--function-rgx=[\\p{Han}a-z_][\\p{Han}a-z0-9_]{2,30}$\"],\n+            [str(EMPTY_MODULE), r\"--bad-names-rgx=(foo{1,}, foo{1,3}})\"],\n             exit=False,\n         )\n     output = capsys.readouterr()\n-\n-    assertString = (\n-        r\"Error in provided regular expression: [\\p{Han}a-z_][\\p{Han}a-z0-9_]{2,30}$ \"\n-        r\"beginning at index 1: bad escape \\p\"\n+    expected_error = (\n+        r\"Error in provided regular expression: (foo{1,} beginning at index 0: missing ), unterminated subpattern\"\n     )\n-    assert assertString in output.err\n+    assert expected_error in output.err\n \n \n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..4bd3d26 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1154,9 +1154,25 @@ def test_summary_list_after_errors(testdir):\n             \"FAILED test_summary_list_after_errors.py::test_fail - assert 0\",\n         ]\n     )\n+def test_does_not_eagerly_collect_packages(testdir):\n+    testdir.makepyfile(\"def test(): pass\")\n+    pydir = testdir.mkpydir(\"foopkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n \n \n-def test_importorskip():\n+def test_does_not_put_src_on_path(testdir):\n+    # `src` is not on sys.path so it should not be importable\n+    testdir.tmpdir.join(\"src/nope/__init__.py\").ensure()\n+    testdir.makepyfile(\n+        \"import pytest\\\\n\"\n+        \"def test():\\\\n\"\n+        \"    with pytest.raises(ImportError):\\\\n\"\n+        \"        import nope\\\\n\"\n+    )\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n     with pytest.raises(\n         pytest.skip.Exception,\n         match=\"^could not import 'doesnotexist': No module named .*\",\n@@ -1184,4 +1200,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..4315d24 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,18 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"ident\",\n+    (\n+        \"None\",  # Test case for reserved literal \"None\"\n+        \"True\",  # Test case for reserved literal \"True\"\n+        \"False\",  # Test case for reserved literal \"False\"\n+    ),\n+)\n+def test_reserved_literals(ident: str) -> None:\n+    with pytest.raises(AssertionError):  # Expecting AssertionError due to assertion in compile step\n+        Expression.compile(ident)\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..d3db1e0 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,30 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with a transformer and pandas output.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Test with pandas output\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    union.set_output(transform=\"pandas\")\n+    result = union.fit_transform(data)\n+\n+    # Since we are summing up values per date, we expect 4 entries (one per day)\n+    expected_result = pd.DataFrame({\"my_transformer__value\": [240] * 4})\n+    pd.testing.assert_frame_equal(result, expected_result)\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..d1bd99f 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -12,8 +12,32 @@ import pytest\n \n from sphinx import addnodes\n \n+import sphinx\n+from sphinx.ext.intersphinx import InventoryAdapter\n \n-@pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_typehints_none(app, status, warning):\n+    # Setup test app environment, build with 'description' mode\n+    app.config.autodoc_typehints = 'description'\n+    app.builder.build_all()\n+\n+    # Read the generated doctree\n+    content_description = app.env.get_doctree('index')\n+\n+    # Check if None is linked properly in 'description' mode\n+    none_links = [node for node in content_description if isinstance(node, addnodes.pending_xref) and node['reftarget'] == \"None\"]\n+    assert len(none_links) > 0, \"None should be linked in 'description' mode.\"\n+\n+    # Setup test app environment, build with 'signature' mode\n+    app.config.autodoc_typehints = 'signature'\n+    app.builder.build_all()\n+\n+    # Read the generated doctree\n+    content_signature = app.env.get_doctree('index')\n+\n+    # Check if None is not linked in 'signature' mode\n+    none_links = [node for node in content_signature if isinstance(node, addnodes.pending_xref) and node['reftarget'] == \"None\"]\n+    assert len(none_links) == 0, \"None should not be linked in 'signature' mode.\"\n def test_autodoc(app, status, warning):\n     app.builder.build_all()\n \n@@ -30,4 +54,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..19f593d 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,6 +1317,57 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters(self):\n+        # Test with parameters x1, x2 on a single line without \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with parameters x1, x2 as optional\n+        docstring_optional = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        \n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring_optional, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring_optional), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..b13db0c 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -775,6 +775,62 @@ def test_pydecoratormethod_signature(app):\n \n \n @pytest.mark.sphinx(freshenv=True)\n+@pytest.mark.sphinx('html', freshenv=True)\n+def test_type_rtype_ambiguity(app):\n+    text = \"\"\"\n+    .. py:class:: mod.A\n+    .. py:class:: mod.submod.A\n+\n+    .. py:function:: f()\n+    \n+        :param mod.A a:\n+        :param mod.submod.A b:\n+        :rtype: mod.A\n+\n+    .. py:currentmodule:: mod\n+\n+    .. py:function:: f()\n+    \n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+\n+    .. py:currentmodule:: mod.submod\n+\n+    .. py:function:: f()\n+    \n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+    \"\"\"\n+    # Parse the reStructuredText provided above\n+    doctree = parse(app, text)\n+\n+    # Ensure that the parameters and return types resolve correctly\n+    param_node_a = doctree[1][0][0][1][0][0]\n+    param_node_b = doctree[1][0][0][1][1][0]\n+    param_node_c = doctree[1][0][0][1][2][0]\n+    \n+    assert_node(param_node_a, pending_xref, reftarget='mod.submod.A')\n+    assert_node(param_node_b, pending_xref, reftarget='mod.A')\n+    assert_node(param_node_c, pending_xref, reftarget='mod.submod.A')\n+\n+    rtype_node_a = doctree[1][0][0][2][0]\n+    rtype_node_b = doctree[2][0][0][2][0]\n+    rtype_node_c = doctree[3][0][0][2][0]\n+    \n+    assert_node(rtype_node_a, pending_xref, reftarget='mod.submod.A')\n+    assert_node(rtype_node_b, pending_xref, reftarget='mod.A')\n+    assert_node(rtype_node_c, pending_xref, reftarget='mod.submod.A')\n+\n+import pytest\n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+from sphinx.testing.restructuredtext import parse\n+from docutils import nodes\n+\n def test_module_index(app):\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..ed5ac97 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,3 +1,4 @@\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n@@ -8,4 +9,7 @@ def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n+\n+# Adding _foo as a variable to test :meta public: for variables\n+_foo = None  #: :meta public:\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..1895133 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -915,6 +915,98 @@ def test_canonical_duplicated(app, warning):\n \n \n def test_info_field_list(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param str name: blah blah\\n\"\n+            \"   :param age: blah blah\\n\"\n+            \"   :type age: int\\n\"\n+            \"   :param items: blah blah\\n\"\n+            \"   :type items: Tuple[str, ...]\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+    print(doctree)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, ([nodes.list_item, nodes.paragraph],\n+                                                        [nodes.list_item, nodes.paragraph],\n+                                                        [nodes.list_item, nodes.paragraph],\n+                                                        [nodes.list_item, nodes.paragraph])]))\n+\n+    # :param str name:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"name\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+    # :param age: + :type age:\n+    assert_node(doctree[3][1][0][0][1][0][1][0],\n+                ([addnodes.literal_strong, \"age\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+    # :param items: + :type items:\n+    assert_node(doctree[3][1][0][0][1][0][2][0],\n+                ([addnodes.literal_strong, \"items\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"Tuple\"],\n+                 [addnodes.literal_emphasis, \"[\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [addnodes.literal_emphasis, \"...\"],\n+                 [addnodes.literal_emphasis, \"]\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][2][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"Tuple\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][2][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+    # :param dict(str, str) opc_meta: (Optional)\n+    assert_node(doctree[3][1][0][0][1][0][3][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][3][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:module:: example\\n\"\n             \".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..a42e582 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1009,6 +1009,10 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+from docutils import nodes\n+from sphinx import addnodes\n+from sphinx.testing.restructuredtext import parse\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..c4f7c9d 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1038,6 +1038,9 @@ def test__solveset_multi():\n             ImageSet(Lambda(((y,),), (Abs(y), y)), ProductSet(Reals)))\n     assert _solveset_multi([r*cos(theta)-1, r*sin(theta)], [theta, r],\n             [Interval(0, pi), Interval(-1, 1)]) == FiniteSet((0, 1), (pi, -1))\n+    from sympy import Eq, cos, sin, ConditionSet, Reals, S\n+    from sympy.abc import n\n+\n     assert _solveset_multi([r*cos(theta)-1, r*sin(theta)], [r, theta],\n             [Interval(0, 1), Interval(0, pi)]) == FiniteSet((1, 0))\n     #assert _solveset_multi([r*cos(theta)-r, r*sin(theta)], [r, theta],\n@@ -1067,8 +1070,14 @@ def test_conditionset():\n     assert solveset(y**x-z, x, S.Reals) == \\\n         ConditionSet(x, Eq(y**x - z, 0), S.Reals)\n \n+def test_issue_18188():\n+    # Checks if solveset returns a ConditionSet for the given equation\n+    result = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert result.as_set() == ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)\n \n-@XFAIL\n+    # Additional test case: another non-trivial equation\n+    result2 = Eq(n**2 + sqrt(n*2) + sin(n), 0)\n+    assert result2.as_set() == ConditionSet(n, Eq(sqrt(2)*sqrt(n) + n**2 + sin(n), 0), Reals)\n def test_conditionset_equality():\n     ''' Checking equality of different representations of ConditionSet'''\n     assert solveset(Eq(tan(x), y), x) == ConditionSet(x, Eq(tan(x), y), S.Complexes)\n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..8a22e4b 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3330,6 +3330,28 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n+from sympy import Symbol, sqf_list\n+\n+x = Symbol('x')\n+\n+def test_issue_8695():\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n+\n+def test_issue_8695_additional():\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3 * (x + 4)\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3), (x + 4, 1)])\n+    assert sqf_list(p) == result\n+\n+    p = (x - 1)**5 * (x + 1)**5\n+    result = (1, [(x - 1, 5), (x + 1, 5)])\n+    assert sqf_list(p) == result\n+\n+    p = (x - 1)**5 * (x**2 + 1)**2\n+    result = (1, [(x - 1, 5), (x**2 + 1, 2)])\n+    assert sqf_list(p) == result\n+\n def test_issue_18205():\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..0d3f8d4 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3248,8 +3248,14 @@ def test_poly_matching_consistency():\n     assert I * Poly(x, x) == Poly(I*x, x)\n     assert Poly(x, x) * I == Poly(I*x, x)\n \n+from sympy import expand, factor, symbols, I\n+\n+def test_issue_18895():\n+    x, y = symbols('x y')\n+    z = expand((x-1)*(y-1))\n+    factored = factor(z, extension=[I])\n+    assert factored == (x - 1)*(y - 1), f\"Expected (x - 1)*(y - 1), but got {factored}\"\n \n-@XFAIL\n def test_issue_5786():\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..6409b17 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -27,6 +28,18 @@ def test__aresame():\n     assert not _aresame(Basic([]), Basic(()))\n     assert not _aresame(Basic(2), Basic(2.))\n \n+def test_symbol_no_dict():\n+    from sympy.core.symbol import Symbol\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol should not have __dict__ attribute\"\n+    with raises(AttributeError):\n+        s.__dict__\n+\n+def test_symbol_slots():\n+    from sympy.core.symbol import Symbol\n+    s = Symbol('s')\n+    assert s.__slots__ == ('name',), \"Symbol should have slots ('name',)\"\n+\n \n def test_structure():\n     assert b21.args == (b2, b1)\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..a00d85f 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,6 +369,22 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n+def test_issue_rational_string_inputs():\n+    # Test the specific case mentioned in the issue\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+\n+    # Additional cases to ensure other string constructions work as expected\n+    assert Rational('1', '2') == Rational(1, 2)\n+    assert Rational('3', '4') == Rational(3, 4)\n+    assert Rational('1.5', '3.0') == Rational(1, 2)\n+    assert Rational('0.75', '1.5') == Rational(1, 2)\n+\n+    # Testing mixed inputs\n+    assert Rational('0.5', 2) == Rational(1, 4)\n+    assert Rational(0.5, '2') == Rational(1, 4)\n+    \n+    # Test with a problematic case format using sympy 1.8 convention\n+    assert Rational('1e-2', '3.2') == Rational(1, 320)\n \n def test_Number_new():\n     \"\"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..2410ae7 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundfield_subwidget_id_for_label_with_checkboxselectmultiple(self):\n+        \"\"\"\n+        Ensure that the id_for_label of CheckboxSelectMultiple subwidgets\n+        respects the id set via auto_id.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..a32d665 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,11 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..5e2bbc3 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -137,8 +137,24 @@ def test_multi_target_sample_weights():\n     w = [2., 1.]\n     rgr_w = MultiOutputRegressor(GradientBoostingRegressor(random_state=0))\n     rgr_w.fit(Xw, yw, w)\n-\n-    # unweighted, but with repeated samples\n+import pytest\n+import numpy as np\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+\n+def test_cross_val_predict_multioutput_classifier_predict_proba():\n+    # Test to verify that cross_val_predict with method='predict_proba'\n+    # works without raising an AttributeError for MultiOutputClassifier.\n+\n+    X, Y = make_multilabel_classification()\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    # Ensuring predict_proba does not raise an error and returns an array\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+    assert isinstance(pred_proba, list)\n+    for proba in pred_proba:\n+        assert proba.shape == (X.shape[0], 2)  # For two classes per output\n     X = [[1, 2, 3], [1, 2, 3], [4, 5, 6]]\n     y = [[3.141, 2.718], [3.141, 2.718], [2.718, 3.141]]\n     rgr = MultiOutputRegressor(GradientBoostingRegressor(random_state=0))\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..fe079d6 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -158,6 +158,21 @@ def test_restify_pep_585():\n                                                    \"[:py:class:`int`, ...]]\")\n \n \n+from sphinx.ext.autodoc import mock\n+\n+def test_restify_base_class_in_mocked_module():\n+    with mock(['mocked_module']):\n+        import mocked_module\n+        # Simulate a class definition inside the mocked module\n+        mocked_module.BaseClass = type('BaseClass', (object,), {})\n+        \n+        # Define an inheriting class for testing purposes\n+        class InheritingClass(mocked_module.BaseClass):\n+            pass\n+        \n+        # Check that restify correctly identifies the base class\n+        assert restify(InheritingClass) == ':py:class:`mocked_module.BaseClass`'\n+        \n @pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n def test_restify_type_union_operator():\n     assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..9ed6285 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,30 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+def test_issue_13546():\n+    from sympy import Symbol, Product, S\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+def test_issue_13546_additional_cases():\n+    from sympy import Symbol, Product, S, simplify\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    \n+    # Test for n = 3\n+    p3 = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert simplify(p3.subs(n, 3)).doit() == S(63)/8\n+\n+    # Test for n = 4\n+    p4 = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert simplify(p4.subs(n, 4)).doit() == S(255)/16\n+\n+    # Test for symbolic n\n+    pn = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    # Here we should have a general expression check or leave if more complex\n+    # assert a simplified expression or behavior for some symbolic checks if possible..\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +379,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}