{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..1c91e21 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,9 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..c0be2c6 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -127,6 +127,32 @@ class TestHeaderFunctions(FitsTestCase):\n         c = fits.Card(\"long_int\", -467374636747637647347374734737437)\n         assert str(c) == _pad(\"LONG_INT= -467374636747637647347374734737437\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        \n+        # Test case for the precise float that was previously expanded unnecessarily\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional test cases for different float values\n+        for value, expected_value_str in [\n+            (8.95, \"8.95\"),\n+            (-99.9, \"-99.9\"),\n+            (123456789.123456789, \"1.23456789E+08\"),\n+            (0.000000123456789, \"1.23456789E-07\")\n+        ]:\n+            c = fits.Card(k, value, com)\n+            expected_str = f\"{k} = {expected_value_str} / {com}\"\n+            assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_floating_point_value_card(self):\n         \"\"\"Test Card constructor with floating point value\"\"\"\n \n",
  "astropy__astropy-14539": "",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..f080e9a 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -87,9 +87,34 @@ def test_inherit_docstrings():\n     if Base.__call__.__doc__ is not None:\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n+def test_inherit_docstrings():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        def __call__(self, *args):\n+            \"FOO\"\n+            pass\n+\n+    class Subclass(Base):\n+        def __call__(self, *args):\n+            pass\n+\n+    if Base.__call__.__doc__ is not None:\n+        # TODO: Maybe if __doc__ is None this test should be skipped instead?\n+        assert Subclass.__call__.__doc__ == \"FOO\"\n+\n+    # Test for properties\n+    class BaseWithProperty(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 0\n \n+    class SubclassWithProperty(BaseWithProperty):\n+        @property\n+        def bar(self):\n+            return 42\n \n-def test_set_locale():\n+    if BaseWithProperty.bar.__doc__ is not None:\n+        assert SubclassWithProperty.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..fad9bee 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -171,8 +171,21 @@ def test_multiple_solidus():\n     with pytest.raises(ValueError):\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n-\n-def test_unknown_unit3():\n+import pytest\n+import astropy.units as u\n+\n+def test_compare_unrecognized_unit_with_none():\n+    # Create an unrecognized unit with parse_strict='silent'\n+    unit = u.Unit(\"ASDF\", parse_strict='silent')\n+    \n+    # Test that comparison with None returns False, not TypeError\n+    assert not unit == None\n+    assert unit != None\n+\n+    # Test with other None-related scenarios\n+    assert None != unit\n+    assert unit not in (None, u.m)\n+    assert None not in (unit, u.m)\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n     assert isinstance(unit, u.UnrecognizedUnit)\n     assert unit.name == \"FOO\"\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..342e63e 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -62,8 +62,29 @@ def test_find_mod_objs():\n     assert 'collections.namedtuple' not in fqns\n     assert namedtuple not in objs\n \n+from distutils.version import LooseVersion\n \n-def test_minversion():\n+def test_looseversion_issue():\n+    assert not LooseVersion('1.14') >= LooseVersion('1.14dev')\n+    try:\n+        LooseVersion('1.14.3') >= LooseVersion('1.14dev')\n+        assert False, \"Expected TypeError not raised.\"\n+    except TypeError:\n+        pass\n+\n+def test_minversion_edge_cases():\n+    from types import ModuleType\n+    test_module = ModuleType(str(\"test_module\"))\n+    good_versions = ['0.12dev', '1.14dev']\n+    module_versions = ['0.12.2', '1.14.3']\n+    \n+    for version in good_versions:\n+        for module_version in module_versions:\n+            test_module.__version__ = module_version\n+            try:\n+                minversion(test_module, version)\n+            except TypeError:\n+                pass  # Expected in current implementation with LooseVersion deficits\n     from types import ModuleType\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n@@ -72,4 +93,4 @@ def test_minversion():\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..3b046f1 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -2329,8 +2329,57 @@ class TestHeaderFunctions(FitsTestCase):\n             else:\n                 c.verify('exception')\n \n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n+    def test_header_fromstring_unicode(self):\n+        \"\"\"\n+        Test reading a Header from a `unicode` string.\n+        \"\"\"\n+\n+        header_str = \"SIMPLE  =                    T / file does conform to FITS standard\"\n+        pri_hdr_from_unicode = fits.Header.fromstring(header_str)\n+\n+        assert pri_hdr_from_unicode['SIMPLE'] == True\n+\n+    def test_card_from_unicode(self):\n+        \"\"\"\n+        Test loading a Card from a unicode string.\n+        \"\"\"\n+\n+        c = fits.Card.fromstring(\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_card_from_bytes_non_ascii(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object with non-ASCII characters.\n+        \"\"\"\n \n-class TestRecordValuedKeywordCards(FitsTestCase):\n+        c = fits.Card.fromstring(b\"ABC     = '\\xe9'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == '\\xe9'.decode('latin-1')\n     \"\"\"\n     Tests for handling of record-valued keyword cards as used by the\n     `FITS WCS distortion paper\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..0a0a7ea 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -138,10 +138,21 @@ class TestQuantityCreation:\n         assert q2.value == float(q1.value)\n         assert q2.unit == q1.unit\n \n-        # but we should preserve float32\n-        a3 = np.array([1., 2.], dtype=np.float32)\n-        q3 = u.Quantity(a3, u.yr)\n-        assert q3.dtype == a3.dtype\n+        # but we should preserve float32 and float16\n+        a3_32 = np.array([1., 2.], dtype=np.float32)\n+        q3_32 = u.Quantity(a3_32, u.yr)\n+        assert q3_32.dtype == a3_32.dtype\n+\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+\n+        # Add more tests for scalar float16\n+        q_scalar_16 = u.Quantity(np.float16(1.0), u.km)\n+        assert q_scalar_16.dtype == np.float16\n+\n+        q_scalar_16_mult = np.float16(1.0) * u.km\n+        assert q_scalar_16_mult.dtype == np.float16\n         # items stored as objects by numpy should be converted to float\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..f1922b6 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -225,11 +225,17 @@ TEST_DATA = [\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n-    (BaseValidator(True), True, None),\n-    (BaseValidator(True), False, ValidationError),\n-\n-    (RegexValidator(), '', None),\n-    (RegexValidator(), 'x1x2', None),\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+    # Valid test cases for comparison\n+    (URLValidator(), 'http://user:pass@example.com', None),  # Valid as characters are correctly encoded\n+    (URLValidator(), 'http://user%3Apass@example.com', None),  # Encoded colon\n+    (URLValidator(), 'http://user%40example.com@example.com', None),  # Encoded at sign\n     (RegexValidator('[0-9]+'), 'xxxxxx', ValidationError),\n     (RegexValidator('[0-9]+'), '1234', None),\n     (RegexValidator(re.compile('[0-9]+')), '1234', None),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..3b990d5 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -389,7 +391,17 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_with_case(self):\n+        \"\"\"\n+        Tests Count with distinct=True and Case condition to verify if the query\n+        error involving syntax is resolved.\n+        \"\"\"\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        # This assumes there are 4 distinct ratings for books with more than 300 pages.\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..da02658 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,9 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+        self.assertIsNone(default_storage.file_permissions_mode)\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o644):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..b1659df 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -15,17 +17,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         - The command line list\n         - The content of the file pointed by environment PGPASSFILE, or None.\n         \"\"\"\n-        def _mock_subprocess_call(*args):\n-            self.subprocess_args = list(*args)\n-            if 'PGPASSFILE' in os.environ:\n-                with open(os.environ['PGPASSFILE']) as f:\n-                    self.pgpass = f.read().strip()  # ignore line endings\n-            else:\n-                self.pgpass = None\n+        def _mock_subprocess_run(args, env=None, **kwargs):\n+            self.subprocess_args = args\n+            self.pgpassword = env.get('PGPASSWORD', None)\n             return 0\n         self.subprocess_args = None\n-        self.pgpass = None\n-        with mock.patch('subprocess.call', new=_mock_subprocess_call):\n+        self.pgpassword = None\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n@@ -56,7 +54,21 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_column(self):\n+    def test_pgpassword_environment_variable(self):\n+        # Helper function to mock subprocess.run and check for PGPASSWORD\n+        def _mock_subprocess_run(args, env=None, **kwargs):\n+            self.assertIn('PGPASSWORD', env)\n+            self.assertEqual(env['PGPASSWORD'], 'somepassword')\n+            return subprocess.CompletedProcess(args, 0)\n+        \n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +125,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..42b9121 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -2,6 +2,8 @@ from django.apps.registry import apps\n from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n+from django.apps import apps\n+from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n@@ -47,7 +49,20 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_missing_content_type_rename_ignore(self):\n+    def test_existing_content_type_rename_other_database(self):\n+        class TestRouter:\n+            def db_for_write(self, model, **hints):\n+                return 'default'\n+\n+        with override_settings(DATABASE_ROUTERS=[TestRouter()]):\n+            ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+            other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+            call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+            self.assertFalse(other_content_types.filter(model='foo').exists())\n+            self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+            call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+            self.assertTrue(other_content_types.filter(model='foo').exists())\n+            self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n@@ -63,4 +78,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..0811ef9 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -247,8 +247,21 @@ class UsernameValidatorsTests(SimpleTestCase):\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n+    def test_unicode_validator_trailing_newline(self):\n+        invalid_usernames = ['username\\n', 'name\\r\\n']\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_ascii_validator_trailing_newline(self):\n+        invalid_usernames = ['username\\n', 'name\\r\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +271,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..7d0e5bb 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -10,7 +10,33 @@ from .utils import ROOT, TEMPLATE_DIR\n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n \n+from django.utils.safestring import mark_safe\n+\n class RenderToStringTest(SimpleTestCase):\n+    \n+    def test_autoescape_off(self):\n+        # Test when autoescape is False\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+    \n+    def test_autoescape_on(self):\n+        # Test when autoescape is True\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_on_with_safe_string(self):\n+        # Test when autoescape is True but with a safe string\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': mark_safe('<script>')}),\n+            'obj:<script>\\n',\n+        )\n \n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..014d3f1 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -278,6 +278,31 @@ class QueryDictTests(SimpleTestCase):\n         expected['\u028e\u01dd\u029e'] = '\u01ddnl\u0250\u028c'\n         self.assertEqual(q, expected)\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_large_content(self):\n+        content = b'a' * (10**6)  # 1 MB of 'a'\n+        r = HttpResponse(memoryview(content))\n+        self.assertEqual(r.content, content)\n+\n+    def test_memoryview_empty_content(self):\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_mixed_content(self):\n+        content = b'12345' + bytes(range(0, 256))  # Mixed content with range of bytes\n+        r = HttpResponse(memoryview(content))\n+        self.assertEqual(r.content, content)\n+\n+    def test_memoryview_unicode_content(self):\n+        # This will not raise error at this stage, but ensure storage works when\n+        # interpreted as bytes\n+        content = '\u0432\u0435\u0434\u044c\u043c\u0430\u043a'.encode('utf-8')\n+        r = HttpResponse(memoryview(content))\n+        self.assertEqual(r.content, content)\n+\n     def test_fromkeys_empty_iterable(self):\n         self.assertEqual(QueryDict.fromkeys([]), QueryDict(''))\n \n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..85f7900 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -664,23 +664,46 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, 'Add another Author-Book Relationship')\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n         self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n+    def test_inline_add_m2m_view_only_perm(self):\n+        # Assign only view permission to user for books.\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # Verify view-only permissions on inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n \n-    def test_inline_change_m2m_change_perm(self):\n-        permission = Permission.objects.get(codename='change_book', content_type=self.book_ct)\n+    def test_inline_change_m2m_view_only_perm(self):\n+        # Assign only view permission to user for books.\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.author_change_url)\n-        # We have change perm on books, so we can add/change/delete inlines\n+        # Verify view-only permissions on inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n         self.assertContains(response, '<h2>Author-book relationships</h2>')\n-        self.assertContains(response, 'Add another Author-book relationship')\n-        self.assertContains(response, '<input type=\"hidden\" id=\"id_Author_books-TOTAL_FORMS\" '\n-                            'value=\"4\" name=\"Author_books-TOTAL_FORMS\">', html=True)\n         self.assertContains(\n+            response, \n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # Ensure fields are read-only.\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(\n             response,\n-            '<input type=\"hidden\" id=\"id_Author_books-0-id\" value=\"%i\" '\n-            'name=\"Author_books-0-id\">' % self.author_book_auto_m2m_intermediate_id,\n-            html=True\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n         )\n-        self.assertContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n     def test_inline_change_fk_add_perm(self):\n         permission = Permission.objects.get(codename='add_inner2', content_type=self.inner_ct)\n",
  "django__django-11163": "",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..4cfc01d 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,7 +1,9 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n+from django.db.models.deletion import Collector\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n from .models import (\n@@ -464,6 +466,18 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        \"\"\"\n+        Test that after calling delete() on a model with no dependencies,\n+        the primary key is set to None.\n+        \"\"\"\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_qs(self):\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..7abf71d 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,12 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-300', 5, '0.00000'),\n+            ('5e-250', 4, '0.0000'),\n+            ('3.2e-150', 3, '0.000'),\n+            ('7e-100', None, '0')\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..ca5c995 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -8,6 +9,17 @@ from django.db import models\n from django.db.models.query import ModelIterable, QuerySet\n from django.utils.functional import cached_property\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n \n class Author(models.Model):\n     name = models.CharField(max_length=50, unique=True)\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..3f835e2 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,6 +81,33 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None\n+            )\n+        )\n+        # Check environment variables for SSL certificates\n+        self.assertDictEqual(\n+            {k: v for k, v in os.environ.items() if k.startswith('PGSSL')},\n+            {\n+                'PGSSLMODE': 'verify-ca',\n+                'PGSSLROOTCERT': 'root.crt',\n+                'PGSSLCERT': 'client.crt',\n+                'PGSSLKEY': 'client.key',\n+            }\n+        )\n+\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..d01b6f5 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -81,6 +81,35 @@ class FilteredRelationTests(TestCase):\n                     (self.book3, self.author2),\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n+    \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+        \n+    def test_exclude_nonexistent_filtered_relation(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_nonexistent=FilteredRelation('book', condition=Q(book__title__iexact='nonexistent')),\n+            ).exclude(book_nonexistent__isnull=False),\n+            [self.author1, self.author2],\n+        )\n+        \n+    def test_with_exclude_and_complex_condition(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_filtered=FilteredRelation(\n+                    'book', condition=Q(\n+                        Q(book__title__iexact='poem by alice') |\n+                        Q(book__state=Book.RESERVED)\n+                    ),\n+                ),\n+            ).exclude(book_filtered__isnull=False),\n+            [self.author2],\n+        )\n \n     def test_without_join(self):\n         self.assertSequenceEqual(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..e6413ac 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -29,6 +29,15 @@ class TestUtilsHtml(SimpleTestCase):\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n         )\n+\n+    def test_escape_single_quote_compatibility(self):\n+        \"\"\"Test that single quotes are escaped as expected by new implementation.\"\"\"\n+        self.check_output(escape, \"'\", '&#x27;')\n+        # Test with other patterns\n+        for pattern in (\"%s\", \"a%sb\", \"x%sy\", \"%s1\", \"1%sb\"):\n+            with self.subTest(pattern=pattern):\n+                self.check_output(escape, pattern % \"'\", pattern % '&#x27;')\n+                self.check_output(escape, lazystr(pattern % \"'\"), pattern % '&#x27;')\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n         for value, output in items:\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..b3a008d 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,7 +243,29 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n+    def test_skip_checks(self):\n+        \"\"\"\n+        Verify that the --skip-checks option skips system checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_run_checks(self):\n+        \"\"\"\n+        Verify that the checks are executed when --skip-checks is not used.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn(\"SystemCheckError\", err.decode())\n+        self.assertNotEqual(out.strip(), 'Set foo')\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n         abbreviated forms of the --setting and --pythonpath options.\n",
  "django__django-11333": "",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..606b071 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -241,8 +241,25 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             email='test2@example.com',\n             password='test',\n         )\n-\n-    def test_authenticate_inactive(self):\n+    \n+    def test_no_db_query_when_username_or_password_is_none(self):\n+        \"\"\"\n+        ModelBackend.authenticate() should not make a database query \n+        when username or password is None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        \n+        test_cases = [\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ]\n+\n+        for credentials in test_cases:\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):  # Ensure no database queries\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)  # Ensure hasher isn't called\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..4c83321 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,34 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_union_with_changing_values_list(self):\n+        # Setup initial data\n+        ReservedName.objects.create(name='a', order=2)\n+        ReservedName.objects.create(name='b', order=3)\n+\n+        qs1 = ReservedName.objects.all()\n+\n+        # Check union with different values_list columns\n+        reserved_name1 = qs1.union(qs1).values_list('name', 'order').get(name='a')\n+        self.assertEqual(reserved_name1, ('a', 2))\n+        \n+        reserved_name2 = qs1.union(qs1).values_list('order', flat=True).get(name='b')\n+        self.assertEqual(reserved_name2, 3)\n+\n+    def test_union_with_changing_values(self):\n+        # Another test with values() for changing columns\n+        ReservedName.objects.create(name='x', order=10)\n+        ReservedName.objects.create(name='y', order=15)\n+\n+        qs1 = ReservedName.objects.filter(name='x')\n+        qs2 = ReservedName.objects.filter(name='y')\n+\n+        # Test union with changing values projections\n+        result1 = qs1.union(qs2).values('name', 'order')\n+        self.assertCountEqual(result1, [{'name': 'x', 'order': 10}, {'name': 'y', 'order': 15}])\n+\n+        result2 = qs1.union(qs2).values('order')\n+        self.assertCountEqual(result2, [{'order': 10}, {'order': 15}])\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..0d71916 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -11,6 +11,7 @@ from email import charset, message_from_binary_file, message_from_bytes\n from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n+from unittest import mock\n from io import StringIO\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..c3931ee 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n@@ -7,6 +8,7 @@ from django.db.models import F\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n+from django.db.models import Field, Model\n \n from .models import (\n     Band, Song, User, ValidationTestInlineModel, ValidationTestModel,\n@@ -510,7 +512,67 @@ class ListDisplayTests(CheckTestCase):\n         self.assertIsValid(TestModelAdmin, ValidationTestModel)\n \n \n-class ListDisplayLinksCheckTests(CheckTestCase):\n+    def test_accessible_only_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_non_callable_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance, simulating an error.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is not None:\n+                    return \"display_value\"\n+                raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_missing_attribute_error(self):\n+        class PositionField(Field):\n+            \"\"\"Simulate field that raises an AttributeError with missing attributes.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'field', which is not a callable, \"\n+            \"an attribute of 'TestModelAdmin', or an attribute or method on 'app_label.TestModel'.\",\n+            'admin.E108'\n+        )\n \n     def test_not_iterable(self):\n         class TestModelAdmin(ModelAdmin):\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..3cf10bf 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,8 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n+from datetime import datetime\n \n \n class OrderingTests(TestCase):\n@@ -462,7 +463,39 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(\n+            headline='h1',\n+            pub_date=datetime(2005, 7, 28)\n+        )\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(list(articles), [ca4, ca2, ca1, ca3])\n+\n+    def test_order_by_expression_in_meta_ordering(self):\n+        # Testing ordering based on an F expression in Meta ordering\n+        articles = OrderedByFArticle.objects.all()\n+        expected_order = sorted(articles, key=lambda article: (article.author_id, article.id))\n+        self.assertSequenceEqual(list(articles), expected_order)\n+\n+    def test_order_by_with_invalid_field_expression(self):\n+        # Testing invalid field order by expression\n+        with self.assertRaises(FieldError):\n+            ChildArticle.objects.order_by(F('non_existent_field'))\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..a0cd07d 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -390,8 +390,28 @@ class AggregateTestCase(TestCase):\n \n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n-\n-    def test_count_star(self):\n+    def test_distinct_on_aggregates(self):\n+        # Test DISTINCT with Avg and Sum, as well as the already supported Count.\n+        aggregates = [\n+            (Avg, 'rating', 4.125),  # Assumes distinct ratings averaging to 4.125\n+            (Sum, 'rating', 16.5),   # Assumes distinct ratings summing to 16.5\n+            (Count, 'rating', 4),    # Assumes 4 distinct ratings\n+        ]\n+        for aggregate_func, field, expected in aggregates:\n+            with self.subTest(aggregate=aggregate_func.__name__):\n+                result = Book.objects.aggregate(result=aggregate_func(field, distinct=True))\n+                self.assertEqual(result['result'], expected)\n+        \n+        # Add more detailed cases for edge cases like empty querysets\n+        Book.objects.all().delete()  # Ensure queryset is empty\n+        result = Book.objects.aggregate(avg_empty=Avg('rating', distinct=True))\n+        self.assertIsNone(result['avg_empty'], \"Avg of an empty queryset should be None\")\n+        \n+        result = Book.objects.aggregate(sum_empty=Sum('rating', distinct=True))\n+        self.assertEqual(result['sum_empty'], 0, \"Sum of an empty queryset should be 0\")\n+\n+        # Restore books for other tests\n+        self._populate()  # Assuming there's a method or some way to repopulate or reset the test data\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..f2bde37 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -584,8 +584,32 @@ class AutodetectorTests(TestCase):\n             self.make_project_state(after_states),\n             questioner,\n         )._detect_changes()\n+    def test_convert_uuid_to_fk_dependency(self):\n+        \"\"\"\n+        Test conversion of a UUIDField to a ForeignKey and ensure\n+        that it correctly creates a dependency on the target model.\n+        \"\"\"\n+        app1_initial = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        \n+        app2_initial = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+\n+        app1_changed = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n \n-    def test_arrange_for_graph(self):\n+        changes = self.get_changes([app1_initial, app2_initial], [app1_changed, app2_initial])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         \"\"\"Tests auto-naming of migrations for graph matching.\"\"\"\n         # Make a fake graph\n         graph = MigrationGraph()\n@@ -2399,4 +2423,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..80c7897 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -413,6 +413,10 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.non_field_errors(), [])\n \n     @override_settings(AUTH_USER_MODEL='auth_tests.CustomEmailField')\n+    def test_username_field_widget_maxlength_matches_user_model(self):\n+        # Check if the widget's maxlength attribute is set to the correct value from the user model\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n     def test_username_field_max_length_matches_user_model(self):\n         self.assertEqual(CustomEmailField._meta.get_field('username').max_length, 255)\n         data = {\n@@ -426,6 +430,10 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.errors, {})\n \n     @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_widget_maxlength_defaults_to_254(self):\n+        # Verify the default maxlength for a username field without an explicit max_length is 254\n+        form = AuthenticationForm()\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n     def test_username_field_max_length_defaults_to_254(self):\n         self.assertIsNone(IntegerUsernameUser._meta.get_field('username').max_length)\n         data = {\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..aad3188 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -287,6 +287,20 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextEnum('value-b'))], \"\n             \"default=migrations.test_writer.TextEnum('value-b'))\"\n         )\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.name, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('BAD', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n+\n         field = models.CharField(default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..0ec288f 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,7 +317,35 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_future_year(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        \n+        # Let's use a fixed current date to simulate the environment.\n+        fixed_current_date = datetime(2023, 11, 6, 8, 49, 37)\n+        mocked_datetime.utcnow.return_value = fixed_current_date\n+        \n+        # Timestamps that appear to be more than 50 years in the future\n+        test_cases = [\n+            ('Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            ('Monday, 31-Dec-68 08:49:37 GMT', datetime(2068, 12, 31, 8, 49, 37)),\n+            ('Sunday, 31-Dec-50 08:49:37 GMT', datetime(2050, 12, 31, 8, 49, 37)),\n+            ('Saturday, 01-Jan-49 00:00:00 GMT', datetime(2049, 1, 1, 0, 0, 0)),\n+        ]\n+        \n+        for rfc850str, expected_date in test_cases:\n+            with self.subTest(rfc850str=rfc850str):\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n+\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Ensure test cases for existing functionality also work\n+        mocked_datetime.utcnow.return_value = datetime(1994, 11, 6, 8, 49, 37)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..2f9ace7 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,35 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.forms import CharField, Form\n+from django.test import SimpleTestCase\n+\n+class FieldDeepCopyTests(SimpleTestCase):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_deepcopy_preserves_error_messages(self):\n+        field = CharField(error_messages={'required': 'Custom required message.', 'invalid': 'Custom invalid.'})\n+        field_copy = copy.deepcopy(field)\n+        self.assertEqual(field_copy.error_messages['required'], 'Custom required message.')\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Custom invalid.')\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_deepcopy_does_not_modify_original(self):\n+        field = CharField(error_messages={'required': 'Original message.'})\n+        field_copy = copy.deepcopy(field)\n+        field_copy.error_messages['required'] = 'Modified message.'\n+        self.assertEqual(field.error_messages['required'], 'Original message.')\n+        self.assertEqual(field_copy.error_messages['required'], 'Modified message.')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..2e32010 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,6 +1,8 @@\n+\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n+from math import ceil\n from django.db.models import FileField, Value\n from django.db.models.functions import Lower\n from django.test import (\n@@ -206,6 +208,12 @@ class BulkCreateTests(TestCase):\n         self.assertEqual(NoFields.objects.count(), 2)\n \n     @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n         with self.assertNumQueries(2):\n@@ -215,6 +223,12 @@ class BulkCreateTests(TestCase):\n             TwoFields.objects.bulk_create(objs, len(objs))\n \n     @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n     def test_bulk_insert_expressions(self):\n         Restaurant.objects.bulk_create([\n             Restaurant(name=\"Sam's Shake Shack\"),\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..9601586 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,8 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.test import SimpleTestCase\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..c343b8f 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -162,6 +162,16 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(Whiz(c='').get_c_display(), '')        # Empty value\n         self.assertEqual(WhizDelayed(c=0).get_c_display(), 'Other')  # Delayed choices\n \n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_get_FIELD_display_translated(self):\n         \"\"\"A translated display value is coerced to str.\"\"\"\n         val = Whiz(c=5).get_c_display()\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..b0e4cc2 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db import connection\n+from django.db.models import Index\n \n \n class SchemaIndexesTests(TestCase):\n@@ -70,7 +74,45 @@ class SchemaIndexesTests(TestCase):\n             index_sql[0]\n         )\n \n-    def test_index_together_single_list(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         # Test for using index_together with a single list (#22172)\n         index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList)\n         self.assertEqual(len(index_sql), 1)\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..e962107 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -5,7 +6,7 @@ from django.db.models import CharField, F, Q\n from django.db.models.expressions import SimpleCol\n from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n-from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n+from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan, In\n from django.db.models.sql.query import Query\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n@@ -15,7 +16,29 @@ from .models import Author, Item, ObjectC, Ranking\n \n \n class TestQuery(SimpleTestCase):\n-    def test_simple_query(self):\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # It should not coerce lists to tuples; hence the RHS should remain a list\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_tuple_lookup_value(self):\n+        # This is an additional test to verify that tuples are handled correctly\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n+\n+    def test_set_lookup_value(self):\n+        # This is an additional test to verify that sets are also handled correctly\n+        query = Query(Item)\n+        where = query.build_where(Q(name={'a', 'b'}))\n+        name_in = where.children[0]\n+        self.assertIsInstance(name_in, In)\n+        self.assertEqual(name_in.rhs, {'a', 'b'})\n         query = Query(Author)\n         where = query.build_where(Q(num__gt=2))\n         lookup = where.children[0]\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..cac58d2 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -179,6 +179,9 @@ class OperationWriterTests(SimpleTestCase):\n             '),'\n         )\n \n+import enum\n+from django.db import models\n+from enumfields import Enum, EnumField\n \n class WriterTests(SimpleTestCase):\n     \"\"\"\n@@ -216,7 +219,32 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(value.null, new_value.null)\n         self.assertEqual(value.unique, new_value.unique)\n \n-    def test_serialize_numbers(self):\n+    def test_serialize_inner_class_field(self):\n+        class Outer(object):\n+            class Inner(models.CharField):\n+                pass\n+\n+        field = Outer.Inner(max_length=20)\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"test_writer.Outer.Inner(max_length=20)\"\n+        )\n+\n+    def test_serialize_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        string, imports = MigrationWriter.serialize(Thing.state)\n+        self.assertEqual(\n+            string,\n+            \"enumfields.fields.EnumField(enum=test_writer.Thing.State)\"\n+        )\n         self.assertSerializedEqual(1)\n         self.assertSerializedEqual(1.2)\n         self.assertTrue(math.isinf(self.serialize_round_trip(float(\"inf\"))))\n@@ -746,4 +774,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..49a555f 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -832,6 +832,48 @@ class ChangeListTests(TestCase):\n             '_save': 'Save',\n         }\n         superuser = self._create_superuser('superuser')\n+\n+    def test_get_list_editable_queryset_with_regex_chars_in_prefix(self):\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form$-TOTAL_FORMS': '2',\n+            'form$-INITIAL_FORMS': '2',\n+            'form$-MIN_NUM_FORMS': '0',\n+            'form$-MAX_NUM_FORMS': '1000',\n+            'form$-0-uuid': str(a.pk),\n+            'form$-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$')\n+        self.assertEqual(queryset.count(), 1)\n+\n+    def test_get_list_editable_queryset_with_various_special_chars_in_prefix(self):\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        special_prefixes = ['form*', 'form+', 'form?', '^form', '$form', 'form[abc]']\n+        for prefix in special_prefixes:\n+            data = {\n+                f'{prefix}-TOTAL_FORMS': '2',\n+                f'{prefix}-INITIAL_FORMS': '2',\n+                f'{prefix}-MIN_NUM_FORMS': '0',\n+                f'{prefix}-MAX_NUM_FORMS': '1000',\n+                f'{prefix}-0-uuid': str(a.pk),\n+                f'{prefix}-0-load': '10',\n+                '_save': 'Save',\n+            }\n+            superuser = self._create_superuser('superuser')\n+            self.client.force_login(superuser)\n+            changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+            m = SwallowAdmin(Swallow, custom_site)\n+            request = self.factory.post(changelist_url, data=data)\n+            queryset = m._get_list_editable_queryset(request, prefix=prefix)\n+            self.assertEqual(queryset.count(), 1)\n         self.client.force_login(superuser)\n         changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n         m = SwallowAdmin(Swallow, custom_site)\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..29d3f80 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,23 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_booleanfield_splitarrayfield_initial_data(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, False, True])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}, {'checked': True}]\n+        )\n+    \n+    def test_booleanfield_splitarrayfield_no_data(self):\n+        # Check if the widget displays correctly with no initial data\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, False, False])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}]\n+        )\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "",
  "django__django-12262": "",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..5bee456 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2430,6 +2431,28 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n         )\n \n+    def test_filefield_with_initial_data(self):\n+        class FileForm(forms.Form):\n+            file1 = forms.FileField(widget=forms.FileInput)\n+\n+        # Test when no initial data is provided (required attribute should be present)\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # Test when initial data is provided (required attribute should be absent)\n+        f = FileForm(initial={'file1': 'resume.doc'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_filefield_initial_callable(self):\n+        class FileForm(forms.Form):\n+            file1 = forms.FileField(initial=lambda: 'resume.txt')\n+\n         f = FileForm(data={}, files={}, auto_id=False)\n         self.assertHTMLEqual(\n             f.as_table(),\n@@ -2478,6 +2501,28 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n \n+    def test_filefield_with_initial_data(self):\n+        class FileForm(forms.Form):\n+            file1 = forms.FileField(widget=forms.FileInput)\n+\n+        # Test when no initial data is provided (required attribute should be present)\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # Test when initial data is provided (required attribute should be absent)\n+        f = FileForm(initial={'file1': 'resume.doc'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_filefield_initial_callable(self):\n+        class FileForm(forms.Form):\n+            file1 = forms.FileField(initial=lambda: 'resume.txt')\n+\n     def test_filefield_initial_callable(self):\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..6eb7c39 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -6,6 +7,7 @@ import uuid\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -143,6 +145,23 @@ class ChoicesTests(SimpleTestCase):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n+    def test_templates(self):\n+        # Test that template rendering works with enum types without calling them.\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        output = template.render(Context({'Suit': Suit}))\n+        self.assertEqual(output, 'Diamond|1')\n+\n+        # Test that comparing against an enum member works in a template.\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}True{% else %}False{% endif %}')\n+        context = Context({'YearInSchool': YearInSchool, 'student': {'year_in_school': YearInSchool.FRESHMAN}})\n+        output = template.render(context)\n+        self.assertEqual(output, 'True')\n+\n+        # Test that accessing an enum member directly works in a template.\n+        template = Template('{{ YearInSchool.FRESHMAN.label }}')\n+        output = template.render(Context({'YearInSchool': YearInSchool}))\n+        self.assertEqual(output, 'Freshman')\n+\n     def test_str(self):\n         for test in [Gender, Suit, YearInSchool, Vehicle]:\n             for member in test:\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..9a236ae 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1006,7 +1006,22 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(ShippingMethod.check(), [])\n \n-    def test_missing_parent_link(self):\n+    def test_mti_with_multiple_onetoone(self):\n+        class Document(models.Model):\n+            pass\n+\n+        # Case where parent_link is incorrectly ordered\n+        with self.assertRaisesMessage(ImproperlyConfigured, \"Add parent_link=True to invalid_models_tests.Picking.origin.\"):\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # Correctly ordered with explicit parent_link\n+        class PickingCorrect(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        self.assertEqual(PickingCorrect.check(), [])\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Place(models.Model):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..de8c9d0 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -247,11 +247,28 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n-    @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n+    @override_settings()\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        If no SECURE_REFERRER_POLICY is set, the default should be \"same-origin\".\n+        \"\"\"\n+        with self.settings(SECURE_REFERRER_POLICY=None):\n+            response = self.process_response()\n+            self.assertEqual(response['Referrer-Policy'], 'same-origin')\n+\n+    @override_settings() \n+    def test_referrer_policy_same_origin(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY specifically set to \"same-origin\", the \n+        middleware should add a \"Referrer-Policy: same-origin\" header to the response.\n+        \"\"\"\n+        with self.settings(SECURE_REFERRER_POLICY='same-origin'):\n+            response = self.process_response()\n+            self.assertEqual(response['Referrer-Policy'], 'same-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n         The middleware will not override a \"Referrer-Policy\" header already\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..e51c6f1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -19,12 +19,15 @@ from django.db.models.functions import (\n )\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n+from django.utils.functional import SimpleLazyObject\n+from django.contrib.auth.models import User\n+from django.db.models import OuterRef, Subquery\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n-    Result, SimulationRun, Time,\n+    Result, SimulationRun, Time, Manager\n )\n \n \n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..49075ba 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -138,6 +138,51 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         self.assertEqual(f2.widget.attrs['maxlength'], '20')\n         self.assertEqual(f2.widget.attrs['size'], '10')\n \n+    def test_formfield_overrides_m2m_filter_widget(self):\n+        \"\"\"\n+        The autocomplete_fields, raw_id_fields, filter_vertical, and\n+        filter_horizontal widgets for ManyToManyFields may be overridden by\n+        specifying a widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_formfield_m2m_default_widget(self):\n+        \"\"\"\n+        Test that the default widget is used if no override is specified.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            pass\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.SelectMultiple)\n+\n+    def test_formfield_m2m_raw_id_widget(self):\n+        \"\"\"\n+        Test that selecting raw_id_fields overrides the default widget.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            raw_id_fields = ['members']\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, widgets.ManyToManyRawIdWidget)\n+\n+    def test_formfield_m2m_filter_horizontal_widget(self):\n+        \"\"\"\n+        Test that filter_horizontal applies the correct widget.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_horizontal = ['members']\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, widgets.FilteredSelectMultiple)\n+\n     def test_formfield_overrides_for_datetime_field(self):\n         \"\"\"\n         Overriding the widget for DateTimeField doesn't overrides the default\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..a1f9af2 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,27 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n+\n+        # New Test Case: Verify execute_sql_flush without passing 'using'\n+        def test_execute_sql_flush_without_alias(self):\n+            # Create test data\n+            Author.objects.create(name='Test Author')\n+            Book.objects.create(author=author)\n+            self.assertTrue(Author.objects.exists())\n+            self.assertTrue(Book.objects.exists())\n+\n+            # Flush the database\n+            sql_list = connection.ops.sql_flush(\n+                no_style(),\n+                [Author._meta.db_table, Book._meta.db_table],\n+                reset_sequences=True,\n+                allow_cascade=True,\n+            )\n+            connection.ops.execute_sql_flush(sql_list)\n+            with transaction.atomic():\n+                self.assertIs(Author.objects.exists(), False)\n+                self.assertIs(Book.objects.exists(), False)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +201,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..66b2d11 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,6 +2444,30 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n \n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n@@ -2453,4 +2477,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..3349e92 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -10,6 +10,8 @@ from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n \n+from django.db import models, connection\n+from django.test.utils import isolate_apps\n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n )\n@@ -194,7 +196,44 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    def test_in_bulk_unique_constraint(self):\n+        # Setup test with unique constraint on the year field.\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class TestModel(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    TestModel.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..b0253d8 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -892,8 +892,22 @@ class OtherModelTests(SimpleTestCase):\n \n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n+    \n+    def test_ordering_across_nullable_foreign_keys_with_isnull(self):\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+        \n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+        \n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n \n-    def test_ordering_pointing_to_related_model_pk(self):\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+        \n+        # 'supply__product__parent__isnull' is a valid lookup ordering\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..395f6f9 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,31 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+from django.test import SimpleTestCase\n+from django.db.models import ExpressionWrapper, Value, IntegerField, Sum, Lower\n+\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_not_in_group_by(self):\n+        # Simulating a model query without a real database - just checking SQL construction\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b')).query\n+        self.assertNotIn(\"GROUP BY \\\"model\\\".\\\"column_a\\\", 3\", str(query))  # Constant should not be in GROUP BY\n+\n+    def test_expression_in_group_by_when_needed(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b')).query\n+        self.assertIn(str(expr.expression), str(query.get_group_by()))  # Complex expression should be in GROUP BY\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a43cfb4..5f77a59 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -67,6 +67,7 @@ class ExtraInfo(models.Model):\n     info = models.CharField(max_length=100)\n     note = models.ForeignKey(Note, models.CASCADE, null=True)\n     value = models.IntegerField(null=True)\n+    filterable = models.BooleanField(default=True)\n     date = models.ForeignKey(DateTimePK, models.SET_NULL, null=True)\n \n     class Meta:\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..75c8b82 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,32 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk(self):\n+        author_1 = Author.objects.create()\n+        author_2 = Author.objects.create()\n+        article_1 = Article.objects.create(author=author_1, headline='Article A', pub_date='2023-01-01')\n+        article_2 = Article.objects.create(author=author_2, headline='Article B', pub_date='2023-01-02')\n+\n+        # Create a self-referential fk cycle with different editor assignments\n+        author_1.editor = author_2\n+        author_1.save()\n+        author_2.editor = author_1\n+        author_2.save()\n+\n+        # Test ordering by self-referential FK (editor) ID\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article B', 'Article A'],\n+            attrgetter('headline'),\n+        )\n+\n+        # Test ordering by self-referential FK (editor) descending ID\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article A', 'Article B'],\n+            attrgetter('headline'),\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +379,32 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_order_by_self_referential_fk(self):\n+        author_1 = Author.objects.create()\n+        author_2 = Author.objects.create()\n+        article_1 = Article.objects.create(author=author_1, headline='Article A', pub_date='2023-01-01')\n+        article_2 = Article.objects.create(author=author_2, headline='Article B', pub_date='2023-01-02')\n+\n+        # Create a self-referential fk cycle with different editor assignments\n+        author_1.editor = author_2\n+        author_1.save()\n+        author_2.editor = author_1\n+        author_2.save()\n+\n+        # Test ordering by self-referential FK (editor) ID\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article B', 'Article A'],\n+            attrgetter('headline'),\n+        )\n+\n+        # Test ordering by self-referential FK (editor) descending ID\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article A', 'Article B'],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..c0fc4ec 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -615,6 +615,34 @@ class BaseCacheTests:\n                 count += 1\n         self.assertEqual(count, final_count)\n \n+    def test_cull_when_cursor_fetchone_none(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        \n+        # Mocking the cursor to simulate returning None\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"DELETE FROM %s\" % cull_cache._table)\n+            cursor.execute(\"INSERT INTO %s (cache_key, value, expires) VALUES (%%s, %%s, %%s)\" % cull_cache._table,\n+                           ['dummy_key', 'dummy_value', '9999'])\n+            \n+            # Simulating fetchone returning None\n+            original_execute = cursor.execute\n+            cursor.fetchall = lambda: []\n+\n+            # Override the execute method to simulate condition\n+            def mock_execute(*args, **kwargs):\n+                if \"SELECT \" in args[0]:\n+                    # Simulate no results returned\n+                    return []\n+                return original_execute(*args, **kwargs)\n+\n+            cursor.execute = mock_execute\n+\n+            # Run cull to test if it handles the None case\n+            cull_cache._cull(connection.alias, cursor, 'expires')\n+\n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n \n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..7e5d9d8 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,6 +1645,27 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n+class ForeignKeyValidationTests(TestCase):\n+    def setUp(self):\n+        self.archived_article = Article.objects.create(title='Archived Article', archived=True)\n+        self.active_article = Article.objects.create(title='Active Article', archived=False)\n+\n+    def test_foreign_key_with_default_manager(self):\n+        # This should fail because the default manager filters out archived articles.\n+        form = FavoriteArticlesForm({'article': self.archived_article.pk})\n+        self.assertFalse(form.is_valid())\n+        self.assertEqual(\n+            form.errors,\n+            {'article': ['Select a valid choice. That choice is not one of the available choices.']},\n+        )\n+\n+    def test_foreign_key_with_base_manager(self):\n+        # Using the base manager, the form should validate when selecting archived articles.\n+        form = FavoriteArticlesForm({'article': self.archived_article.pk})\n+        form.fields['article'].queryset = Article._base_manager.all()\n+        self.assertTrue(form.is_valid())\n+\n+\n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..ce99fa4 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -864,6 +864,30 @@ class StateTests(SimpleTestCase):\n             \"The field migrations.Magazine_authors.author was declared with a lazy reference \"\n             \"to 'migrations.author', but app 'migrations' doesn't provide model 'author'.\"\n         )\n+\n+    def test_mixed_case_app_name_migration(self):\n+        \"\"\"\n+        Test creating a ForeignKey relation with a mixed-case app name.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            title = models.CharField(max_length=100)\n+            class Meta:\n+                app_label = 'MiXeD_ApP'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, on_delete=models.CASCADE)\n+            class Meta:\n+                app_label = 'MiXeD_ApP'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+        # Ensure that models are correctly recognized\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..d36672a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1584,7 +1584,30 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n-    def test_datetime_subtraction(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_no_expression_wrapper(self):\n+        # Create test objects\n+        Experiment.objects.create(\n+            name=\"temp1\",\n+            start=datetime.datetime(2023, 1, 1, 12, 0),\n+            end=datetime.datetime(2023, 1, 1, 15, 0)\n+        )\n+        \n+        Experiment.objects.create(\n+            name=\"temp2\",\n+            start=datetime.datetime(2023, 1, 1, 12, 0),\n+            end=datetime.datetime(2023, 1, 3, 12, 0)\n+        )\n+\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        ).values('name', 'delta')\n+\n+        # Verifying results\n+        results = {obj['name']: obj['delta'] for obj in queryset}\n+\n+        self.assertEqual(results['temp1'], datetime.timedelta(hours=3))\n+        self.assertEqual(results['temp2'], datetime.timedelta(days=2))\n         under_estimate = [\n             e.name for e in Experiment.objects.filter(estimated_time__gt=F('end') - F('start'))\n         ]\n",
  "django__django-13158": "",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..d295c1f 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,7 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..5eb29b7 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -8,7 +8,9 @@ from django.test import (\n from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.http import Http404\n from django.views.generic import RedirectView, TemplateView, View\n+from .models import Artist\n \n from . import views\n \n@@ -580,6 +582,32 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['foo'], 'bar')\n         self.assertIsInstance(response.context['view'], View)\n \n+    def test_templateview_context_data_with_simplelazyobject(self):\n+        \"\"\"\n+        Test that kwargs passed into get_context_data() are properly resolved\n+        to their actual value and not as SimpleLazyObject.\n+        \"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                # Expecting offer_slug to be resolved to its actual string value.\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                try:\n+                    offer = Artist.objects.get(name=offer_slug)\n+                except Artist.DoesNotExist:\n+                    raise Http404('Artist does not exist')\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        artist = Artist.objects.create(name='Test Artist')\n+        response = OfferView.as_view()(self.rf.get('/'), offer_slug=artist.name)\n+        self.assertEqual(response.context_data['offer'], artist)\n+        self.assertEqual(response.context_data['offer_slug'], artist.name)\n+\n+        # Test nonexistent slug\n+        with self.assertRaises(Http404):\n+            OfferView.as_view()(self.rf.get('/'), offer_slug='nonexistent-artist')\n+\n     @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_extra_template_params(self):\n         \"\"\"A template view can be customized to return extra context.\"\"\"\n@@ -590,6 +618,32 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n+    def test_templateview_context_data_with_simplelazyobject(self):\n+        \"\"\"\n+        Test that kwargs passed into get_context_data() are properly resolved\n+        to their actual value and not as SimpleLazyObject.\n+        \"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                # Expecting offer_slug to be resolved to its actual string value.\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                try:\n+                    offer = Artist.objects.get(name=offer_slug)\n+                except Artist.DoesNotExist:\n+                    raise Http404('Artist does not exist')\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        artist = Artist.objects.create(name='Test Artist')\n+        response = OfferView.as_view()(self.rf.get('/'), offer_slug=artist.name)\n+        self.assertEqual(response.context_data['offer'], artist)\n+        self.assertEqual(response.context_data['offer_slug'], artist.name)\n+\n+        # Test nonexistent slug\n+        with self.assertRaises(Http404):\n+            OfferView.as_view()(self.rf.get('/'), offer_slug='nonexistent-artist')\n+\n     def test_template_params_warning(self):\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n@@ -602,4 +656,30 @@ class DeprecationTests(SimpleTestCase):\n         with self.assertRaisesMessage(RemovedInDjango40Warning, msg % 'foo2'):\n             str(response.context['foo2'])\n         self.assertEqual(response.context['key'], 'value')\n-        self.assertIsInstance(response.context['view'], View)\n+        self.assertIsInstance(response.context['view'], View)\n+\n+    def test_templateview_context_data_with_simplelazyobject(self):\n+        \"\"\"\n+        Test that kwargs passed into get_context_data() are properly resolved\n+        to their actual value and not as SimpleLazyObject.\n+        \"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                # Expecting offer_slug to be resolved to its actual string value.\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                try:\n+                    offer = Artist.objects.get(name=offer_slug)\n+                except Artist.DoesNotExist:\n+                    raise Http404('Artist does not exist')\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        artist = Artist.objects.create(name='Test Artist')\n+        response = OfferView.as_view()(self.rf.get('/'), offer_slug=artist.name)\n+        self.assertEqual(response.context_data['offer'], artist)\n+        self.assertEqual(response.context_data['offer_slug'], artist.name)\n+\n+        # Test nonexistent slug\n+        with self.assertRaises(Http404):\n+            OfferView.as_view()(self.rf.get('/'), offer_slug='nonexistent-artist')\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..1151249 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -17,6 +17,7 @@ from django.forms.models import (\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n+from django.test.utils import isolate_apps\n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n     Category, Character, Colour, ColourfulItem, CustomErrorMessage, CustomFF,\n@@ -2819,15 +2820,35 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n-        field = StumpJokeForm.base_fields['most_recently_fooled']\n-        with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n-            StumpJokeForm()\n-            self.assertEqual(today_callable_dict.call_count, 1)\n-            StumpJokeForm()\n-            self.assertEqual(today_callable_dict.call_count, 2)\n-            StumpJokeForm()\n-            self.assertEqual(today_callable_dict.call_count, 3)\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        self._create_initial_data()\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(form.fields['character1'].queryset, [self.marley, self.threepwood])\n+        self.assertCountEqual(form.fields['character2'].queryset, [self.marley, self.threepwood])\n+        self.assertCountEqual(form.fields['character3'].queryset, [self.marley, self.threepwood])\n+\n+    def _create_initial_data(self):\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action=timezone.now())\n+        self.marley = Character.objects.create(username='Marley', last_action=timezone.now())\n+\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n \n \n class FormFieldCallbackTests(SimpleTestCase):\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..8a446eb 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -26,6 +26,7 @@ from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n from django.test.utils import requires_tz_support\n+from .models import callable_storage, Storage\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n@@ -906,6 +907,18 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         obj = FileField(storage=GetStorage)\n         self.assertIsInstance(obj.storage, BaseStorage)\n \n+class StorageDeconstructionTests(TestCase):\n+\n+    def test_deconstruct_returns_callable(self):\n+        \"\"\"\n+        Test that the deconstruction of a FileField with callable storage\n+        returns the callable.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n     def test_callable_storage_file_field_in_model(self):\n         obj = Storage()\n         self.assertEqual(obj.storage_callable.storage, temp_storage)\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..1e6d066 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -635,6 +635,20 @@ class TestQuerying(TestCase):\n     def test_key_icontains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n+    def test_key_in_lookup(self):\n+        # test case to check __key__in against the issue described\n+        problematic_tests = [\n+            ('value__key__in', [0], []),  # Should return an empty list if __in fails\n+            ('value__key', 0, 312),       # Should return 312 objects\n+        ]\n+\n+        for lookup, value, expected_len in problematic_tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                queryset = OurModel.objects.filter(**{lookup: value})\n+                self.assertEqual(len(queryset), expected_len)\n+\n+    @skipUnlessDBFeature('supports_json_field_contains')\n+\n     def test_key_startswith(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__startswith='b').exists(), True)\n \n",
  "django__django-13363": "",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..d1623b1 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -93,7 +93,40 @@ class BasicFieldTests(SimpleTestCase):\n     def test_field_instance_is_picklable(self):\n         \"\"\"Field instances can be pickled.\"\"\"\n         field = models.Field(max_length=100, default='a string')\n-        # Must be picklable with this cached property populated (#28188).\n+class AbstractInheritedFieldTests(TestCase):\n+\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models should not be equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Ensure fields are not considered equal\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Ensure fields are ordered correctly (now they should also differ in this aspect)\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        # Ensure fields have different hashes\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n         field._get_default\n         pickle.dumps(field)\n \n@@ -103,6 +136,12 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n+from django.db import models\n+from django.test import SimpleTestCase\n+from unittest import TestCase\n+from pickle import dumps\n+from copy import deepcopy\n+\n class ChoicesTests(SimpleTestCase):\n \n     @classmethod\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..c3006b1 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -6,7 +7,8 @@ import tempfile\n import unittest\n from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n-from unittest import mock\n+from pathlib import Path\n+from django.core.files import locks\n \n from django.core.files import File\n from django.core.files.base import ContentFile\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..4aa35c0 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,16 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Annotation.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..86bfa30 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -332,6 +332,33 @@ class CommandTests(SimpleTestCase):\n                 'pythonpath, settings, skip_checks, stderr, stdout, '\n                 'traceback, verbosity, version.'\n             )\n+            \n+    def test_stdout_flush_behavior(self):\n+        \"\"\"\n+        Test if stdout.flush() works correctly in a management command.\n+        \"\"\"\n+        out = StringIO()\n+        command_code = [\n+            'from django.core.management.base import BaseCommand',\n+            '',\n+            'class Command(BaseCommand):',\n+            '    def handle(self, **options):',\n+            \"        self.stdout.write('Starting migration...')\",\n+            '        self.stdout.flush()',\n+            \"        self.stdout.write('Migration in progress...')\",\n+            '        self.stdout.flush()',\n+            \"        self.stdout.write('Migration done.')\",\n+        ]\n+        command_module = '\\n'.join(command_code)\n+        exec(command_module, globals())\n+        \n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            management.call_command('my_migration_command', stdout=out)\n+            self.assertIn('Starting migration...', out.getvalue())\n+            self.assertIn('Migration in progress...', out.getvalue())\n+            self.assertIn('Migration done.', out.getvalue())\n+            # Ensure that flush was called multiple times\n+            self.assertGreaterEqual(mocked_flush.call_count, 2)\n             with self.assertRaisesMessage(TypeError, msg):\n                 management.call_command('subparser_dest', subcommand='foo', bar=12)\n \n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..8c625e6 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,8 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from .with_custom_email_field import CustomEmailField\n+from .models import IntegerUsernameUser\n from django.test import TestCase\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -19,7 +22,26 @@ class MockedPasswordResetTokenGenerator(PasswordResetTokenGenerator):\n \n class TokenGeneratorTest(TestCase):\n \n-    def test_make_token(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Ensure updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n         p0 = PasswordResetTokenGenerator()\n         tk1 = p0.make_token(user)\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..b56909f 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -137,8 +138,26 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n                 id='auth.E005',\n             ),\n         ])\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraintViaConstraints')\n+    def test_username_unique_with_total_unique_constraint(self):\n+        \"\"\"\n+        Ensure no auth.E003 error is raised when USERNAME_FIELD is covered\n+        by a UniqueConstraint in model's Meta.constraints.\n+        \"\"\"\n+        class CustomUserUniqueConstraintViaConstraints(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n \n-    def test_non_clashing_custom_permissions(self):\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique_constraint'),\n+                ]\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..181dd29 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1310,8 +1310,26 @@ class AggregateTestCase(TestCase):\n             contact_publisher__isnull=False,\n         ).annotate(count=Count('authors'))\n         self.assertSequenceEqual(books_qs, [book])\n-        # FIXME: GROUP BY doesn't need to include a subquery with\n-        # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n-        # with self.assertNumQueries(1) as ctx:\n-        #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_aggregation_random_ordering(self):\n+        \"\"\"Random() is not included in the GROUP BY when used for ordering.\"\"\"\n+        authors = Author.objects.annotate(contact_count=Count('book')).order_by('?')\n+        self.assertQuerysetEqual(authors, [\n+            ('Adrian Holovaty', 1),\n+            ('Jacob Kaplan-Moss', 1),\n+            ('Brad Dayley', 1),\n+            ('James Bennett', 1),\n+            ('Jeffrey Forcier', 1),\n+            ('Paul Bissex', 1),\n+            ('Wesley J. Chun', 1),\n+            ('Stuart Russell', 1),\n+            ('Peter Norvig', 2),\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n+\n+    def test_no_group_by_breakage_with_random_order(self):\n+        \"\"\"Ensure that Random() in the ORDER BY clause does not alter the GROUP BY clause.\"\"\"\n+        things = Thing.objects.annotate(related_count=Count('related')).order_by('?').values('id', 'related_count')\n+        # Each Thing should appear once with the correct count of related objects\n+        for thing in Thing.objects.all():\n+            count = Related.objects.filter(thing=thing).count()\n+            self.assertIn({'id': thing.id, 'related_count': count}, things)\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..38a73b1 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -15,6 +15,8 @@ from io import StringIO\n from unittest import mock\n \n from django import conf, get_version\n+from django.test.utils import captured_stderr, captured_stdout\n+from django.core.management import execute_from_command_line\n from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n@@ -1867,6 +1869,29 @@ class ArgumentOrder(AdminScriptTestCase):\n         )\n \n \n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_none_argv(self):\n+        \"\"\"\n+        Program name should be set correctly even if sys.argv[0] is None.\n+        \"\"\"\n+        args = ['check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['my-custom-django-admin'] + args)\n+        self.assertIn('usage: my-custom-django-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_different_sys_argv(self):\n+        \"\"\"\n+        Program name should be set correctly with different sys.argv.\n+        \"\"\"\n+        args = ['migrate']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['fake-script.py'] + args):\n+                execute_from_command_line(['different-admin'] + args)\n+        self.assertIn('usage: different-admin migrate', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n @override_settings(ROOT_URLCONF='admin_scripts.urls')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..4a06b64 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -61,7 +62,23 @@ class DateFormatTests(SimpleTestCase):\n         udt = datetime(1970, 1, 1, tzinfo=utc)\n         self.assertEqual(format(udt, 'U'), '0')\n \n-    def test_empty_format(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (123, '23'),\n+            (198, '98'),\n+            (87, '87'),\n+            (7, '07'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = datetime(1979, 7, 8, 22, 00)\n \n         self.assertEqual(dateformat.format(my_birthday, ''), '')\n@@ -164,4 +181,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..1fce4a1 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,6 +1,9 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n from django.test import SimpleTestCase\n \n from ..utils import setup\n@@ -46,6 +49,40 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add10': '{{ s1|add:s2 }}'})\n+    def test_add_with_string(self):\n+        output = self.engine.render_to_string('add10', {'s1': 'hello', 's2': 'world'})\n+        self.assertEqual(output, 'helloworld')\n+\n+    @setup({'add11': '{{ lazy_s1|add:s2 }}'})\n+    def test_lazy_add_to_string(self):\n+        output = self.engine.render_to_string(\n+            'add11',\n+            {'lazy_s1': gettext_lazy('Hello'), 's2': ' world'},\n+        )\n+        self.assertEqual(output, 'Hello world')\n+\n+    def test_lazy_numbers_addition(self):\n+        lazy_4 = lazy(lambda: 4, int)()\n+        lazy_5 = lazy(lambda: 5, int)()\n+        self.assertEqual(lazy_4 + lazy_5, 9)\n+\n \n class FunctionTests(SimpleTestCase):\n \n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..59dea55 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -11,7 +11,10 @@ from django.db import (\n )\n from django.db.backends.base.base import BaseDatabaseWrapper\n from django.db.backends.signals import connection_created\n+import django.db\n from django.db.backends.utils import CursorWrapper\n+from django.db.utils import IntegrityError\n+from django.db import transaction, connection\n from django.db.models.sql.constants import CURSOR\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n@@ -625,8 +628,36 @@ class FkConstraintsTests(TransactionTestCase):\n                     connection.check_constraints()\n             transaction.set_rollback(True)\n \n+class SQLKeywordsModelTests(TransactionTestCase):\n+    available_apps = ['backends']\n+    \n+    def test_loaddata_with_sql_keyword_table_name(self):\n+        \"\"\"\n+        Test that loaddata does not fail when a model's table name is an SQL keyword.\n+        This specifically checks if table names such as 'order' are properly quoted.\n+        \"\"\"\n+        class SQLKeywordsModel(models.Model):\n+            id = models.AutoField(primary_key=True, db_column='select')\n+            reporter = models.ForeignKey(Reporter, models.CASCADE, db_column='where')\n+            \n+            class Meta:\n+                db_table = 'order'\n+                \n+        with transaction.atomic():\n+            # Create an instance using the model with Reporter reference.\n+            obj = SQLKeywordsModel.objects.create(reporter=Reporter.objects.create(first_name=\"John\", last_name=\"Doe\"))\n+            obj.refresh_from_db()\n+\n+            # Modify the object to ensure constraints are enforced.\n+            obj.reporter_id = 999  # This FK should not exist.\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n \n-class ThreadTests(TransactionTestCase):\n+                # Check constraints should raise IntegrityError due to a broken constraint.\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+\n+            transaction.set_rollback(True)\n \n     available_apps = ['backends']\n \n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..fa3ba26 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,11 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import mock\n+from io import StringIO\n+from django.core.management import call_command\n+from django.test import TestCase\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..96fee20 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -181,12 +182,35 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n             with self.assertLogs('django.request', 'DEBUG'):\n                 self.client.get('/middleware_exceptions/view/')\n \n-\n @override_settings(\n     DEBUG=True,\n     ROOT_URLCONF='middleware_exceptions.urls',\n )\n-class MiddlewareSyncAsyncTests(SimpleTestCase):\n+class MiddlewareASGIContextTests(SimpleTestCase):\n+    \"\"\"\n+    Test middleware handling in an ASGI context where MiddlewareNotUsed \n+    can leave undesired side effects.\n+    \"\"\"\n+    \n+    @override_settings(\n+        MIDDLEWARE=[\n+            'middleware_exceptions.middleware.FaultySyncMiddleware',\n+            'middleware_exceptions.middleware.AsyncReportingMiddleware',\n+        ]\n+    )\n+    async def test_middleware_not_used_in_asgi_context(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 200)  # Assuming success or appropriate status\n+        self.assertEqual(response.content, b'OK')  # Assuming the middleware allows normal processing\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.FaultySyncMiddleware'\",\n+            [record.getMessage() for record in cm.records]\n+        )\n+        self.assertIn(\n+            \"Asynchronous middleware middleware_exceptions.middleware.AsyncReportingMiddleware adapted.\",\n+            [record.getMessage() for record in cm.records]\n+        )\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..5a1e0ed 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,7 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..6c84ad7 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -16,7 +16,9 @@ from django.test import (\n )\n from django.test.utils import isolate_apps\n \n-from ..models import Author, Item, Object, Square\n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db.backends.sqlite3.base import dbapi2\n \n try:\n     from django.db.backends.sqlite3.base import check_sqlite_version\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..880e748 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -158,7 +158,16 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        with mock.patch('django.__main__.__spec__', None):\n+            with mock.patch('utils_tests.test_module.__spec__') as mock_spec:\n+                mock_spec.parent = 'utils_tests.test_module'\n+                self.assertEqual(\n+                    autoreload.get_child_arguments(),\n+                    [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+                )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,8 +182,27 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n-    def test_exe_fallback(self):\n+    def test_run_as_non_django_module(self):\n+        with mock.patch('django.__main__.__spec__', None):\n+            with mock.patch('utils_tests.test_module.__spec__') as mock_spec:\n+                mock_spec.parent = 'utils_tests.test_module'\n+                self.assertEqual(\n+                    autoreload.get_child_arguments(),\n+                    [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+                )\n+    def test_non_django_m_package(self):\n+        \"\"\"Test when running with -m a non-Django package\"\"\"\n+        with mock.patch('django.__main__.__spec__', None):\n+            with mock.patch('__main__.__spec__') as mock_spec:\n+                mock_spec.parent = 'some_other_pkg'\n+                test_argv = ['some_other_pkg', 'runserver']\n+                with mock.patch('sys.argv', test_argv):\n+                    self.assertEqual(\n+                        autoreload.get_child_arguments(),\n+                        [sys.executable, '-m', 'some_other_pkg', 'runserver']\n+                    )\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n             exe_path.touch()\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..5aeacdd 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -402,6 +402,37 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n \n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n+    def test_inherited_manually_specified_pk(self):\n+        class BaseModel(models.Model):\n+            id = models.IntegerField(primary_key=True)\n+\n+        class InheritedModel(BaseModel):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_inherited_no_explicit_pk(self):\n+        class BaseModel(models.Model):\n+            pass\n+\n+        class InheritedModel(BaseModel):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=BaseModel,\n+                id='models.W042',\n+            ),\n+        ])\n+\n     def test_explicit_pk(self):\n         class Model(models.Model):\n             id = models.BigAutoField(primary_key=True)\n@@ -414,4 +445,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..069c843 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -298,7 +298,18 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n-        # ModelMultipleChoiceField\n+        # Test to ensure ModelChoiceField includes invalid choice value in error message\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': '%(value)s IS INVALID CHOICE',\n@@ -307,4 +318,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..a48396c 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyAutoField, MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -176,7 +179,22 @@ class BasicCustomPKTests(TestCase):\n         )\n \n \n-class CustomPKTests(TestCase):\n+class CustomAutoFieldTests(TestCase):\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that creating an instance uses the from_db_value wrapper for the ID.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that bulk_create uses the from_db_value wrapper for the ID.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n     def test_custom_pk_create(self):\n         \"\"\"\n         New objects can be created both with pk and the custom name\n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..d1067b0 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,18 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        \"\"\"\n+        Ensure that no file is yielded more than once in post_process.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**self.get_default_command_options())\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Check that no file in 'post_processed' is yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +226,18 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        \"\"\"\n+        Ensure that no file is yielded more than once in post_process.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**self.get_default_command_options())\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Check that no file in 'post_processed' is yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..8d291df 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -10,6 +11,7 @@ from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n     MultiValueDictKeyError, OrderedSet,\n )\n+import collections.abc\n \n \n class OrderedSetTests(SimpleTestCase):\n@@ -18,7 +20,26 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet())\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_one_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_duplicates(self):\n+        # Ensure duplicates in the initial list do not appear in OrderedSet\n+        s = reversed(OrderedSet([1, 2, 2, 3, 3, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..2aa551d 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,10 +1,12 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n from django.db.models import (\n     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n-from django.db.models.functions import Upper\n+from django.db.models.functions import Upper, Random\n+from django.db.models import Count\n from django.test import TestCase\n \n from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n@@ -41,7 +43,39 @@ class OrderingTests(TestCase):\n         # Getting a single item should work too:\n         self.assertEqual(Article.objects.all()[0], self.a4)\n \n-    def test_default_ordering_override(self):\n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Fields specified in Meta.ordering should not be included in the GROUP BY clause.\n+        \"\"\"\n+        # Setup: Assign articles to authors to prepare for aggregation test.\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+\n+        # Perform aggregation and check the GROUP BY result.\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        \n+        # The expected counts should not be affected by Meta.ordering.\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n+\n+    # Additional test case to verify Meta.ordering does not affect GROUP BY clause.\n+    def test_ordering_with_aggregation(self):\n+        \"\"\"\n+        Ensure that ordering does not inappropriately add fields to the GROUP BY clause\n+        during aggregation.\n+        \"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+\n+        # Check that GROUP BY works correctly without ordering affecting it\n+        articles = Article.objects.values('author').annotate(total=Count('id')).order_by(Random())\n+        self.assertEqual(len(articles), 2)\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'total': 3},\n+            {'author': self.author_2.pk, 'total': 1},\n+        ])\n         \"\"\"\n         Override ordering with order_by, which is in the same format as the\n         ordering attribute in models.\n@@ -483,4 +517,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..d788d56 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -824,6 +824,14 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+    def test_deconstruct_exists_expression(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n+        \n     def test_boolean_expression_combined_with_empty_Q(self):\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n@@ -839,6 +847,9 @@ class BasicExpressionsTests(TestCase):\n                 self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n \n \n+from django.db.models import Exists, OuterRef, Q\n+from .models import Company, Employee\n+\n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..d219875 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -74,7 +75,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n         class Model(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..a1490ae 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,7 +166,23 @@ class TestIterModulesAndFiles(SimpleTestCase):\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_with_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': None})\n+    @mock.patch('sys.argv', ['-m', 'utils_tests.test_module.main_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_dotted_path(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -175,7 +191,23 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_with_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': None})\n+    @mock.patch('sys.argv', ['-m', 'utils_tests.test_module.main_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_dotted_path(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -190,7 +222,23 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_with_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': None})\n+    @mock.patch('sys.argv', ['-m', 'utils_tests.test_module.main_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_dotted_path(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n@@ -201,7 +249,23 @@ class TestChildArguments(SimpleTestCase):\n                     [exe_path, 'runserver']\n                 )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_with_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': None})\n+    @mock.patch('sys.argv', ['-m', 'utils_tests.test_module.main_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_dotted_path(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..b53a85c 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,6 +226,14 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n+    # Include URLs with newline, carriage return, and tab characters\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n+\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n@@ -329,7 +337,22 @@ class TestValidators(SimpleTestCase):\n                 else:\n                     self.assertEqual(expected, validator(value))\n \n-    def test_single_message(self):\n+    def test_validators_with_whitespace(self):\n+        test_values = [\n+            'http://www.djangoproject.com/\\n',\n+            'http://www.djangoproject.com/\\r',\n+            'http://[::ffff:192.9.5.5]\\n',\n+            'http://[::ffff:192.9.5.5]\\r',\n+            'http://www.django\\rproject.com/',\n+            'http://[::\\rffff:192.9.5.5]',\n+            'http://\\twww.djangoproject.com/',\n+            'http://\\t[::ffff:192.9.5.5]',\n+        ]\n+        validator = URLValidator()\n+        for value in test_values:\n+            with self.subTest(value=value):\n+                with self.assertRaises(ValidationError):\n+                    validator(value)\n         v = ValidationError('Not Valid')\n         self.assertEqual(str(v), \"['Not Valid']\")\n         self.assertEqual(repr(v), \"ValidationError(['Not Valid'])\")\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..42f9d32 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1527,7 +1527,32 @@ class AggregationTests(TestCase):\n \n \n class JoinPromotionTests(TestCase):\n-    def test_ticket_21150(self):\n+    def test_having_subquery_select(self):\n+        # Test case from the original patch\n+        authors = Author.objects.filter(pk=self.a1.pk)\n+        books = Book.objects.annotate(Count('authors')).filter(\n+            Q(authors__in=authors) | Q(authors__count__gt=2)\n+        )\n+        self.assertEqual(set(books), {self.b1, self.b4})\n+\n+        # Additional test cases to cover the issue\n+        property_groups = PropertyGroup.objects.agent_groups(management_agent)\n+        queryset = MyModel.objects.annotate(Count(\"agent__property_groups\"))\n+\n+        # Test that uses '__id__in' which should work without error\n+        qs_working = queryset.filter(\n+            Q(agent__property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n+            | Q(agent__property_groups__count=0)\n+        ).distinct()\n+        self.assertIsNotNone(qs_working.exists())\n+\n+        # Test that uses '__in' which previously caused the error\n+        with self.assertRaises(ProgrammingError):\n+            qs_broken = queryset.filter(\n+                Q(agent__property_groups__in=property_groups)\n+                | Q(agent__property_groups__count=0)\n+            ).distinct()\n+            qs_broken.exists()\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n         qs = Charlie.objects.select_related('alfa').annotate(Count('bravo__charlie'))\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..9c28f5e 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,6 +38,65 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_new_and_deprecated_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                expected_args = [\n+                    'mysql',\n+                    '--user=optionuser',\n+                    '--host=optionhost',\n+                    '--port=%s' % options_port,\n+                    'optiondbname',\n+                ]\n+                expected_env = {'MYSQL_PWD': 'optionpassword'}\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n+    def test_options_non_deprecated_keys_preferred(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=settinguser',\n+            '--host=settinghost',\n+            '--port=444',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n         options_port = 555\n@@ -68,6 +127,65 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_new_and_deprecated_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                expected_args = [\n+                    'mysql',\n+                    '--user=optionuser',\n+                    '--host=optionhost',\n+                    '--port=%s' % options_port,\n+                    'optiondbname',\n+                ]\n+                expected_env = {'MYSQL_PWD': 'optionpassword'}\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n+    def test_options_non_deprecated_keys_preferred(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=settinguser',\n+            '--host=settinghost',\n+            '--port=444',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n@@ -89,6 +207,65 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_new_and_deprecated_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                expected_args = [\n+                    'mysql',\n+                    '--user=optionuser',\n+                    '--host=optionhost',\n+                    '--port=%s' % options_port,\n+                    'optiondbname',\n+                ]\n+                expected_env = {'MYSQL_PWD': 'optionpassword'}\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n+    def test_options_non_deprecated_keys_preferred(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=settinguser',\n+            '--host=settinghost',\n+            '--port=444',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..78f347d 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2194,6 +2194,27 @@ class SchemaTests(TransactionTestCase):\n         ]\n         self.assertEqual(len(other_constraints), 1)\n         # Drop the unique constraint\n+\n+    def test_unique_constraint_with_table(self):\n+        # This test checks if passing a table object to the constraint\n+        # doesn't cause issues with referencing columns.\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='unique_name_constraint')\n+        # Add constraint with editor\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+\n+        table = Author._meta.db_table\n+        # Test if references_column works with the table passed as expected.\n+        self.assertIs(sql.references_table(table), True)\n+        self.assertIs(sql.references_column(table, 'name'), True)\n+        \n+        # Remove constraint to ensure cleanup\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n         with connection.schema_editor() as editor:\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..f983ef1 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -94,6 +94,10 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n     )\n \n \n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+\n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..d2ec744 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -653,7 +653,50 @@ class ExecutorTests(MigrationTestBase):\n             recorder.applied_migrations(),\n         )\n \n-    # When the feature is False, the operation and the record won't be\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_squashed_migration_applied_status(self):\n+        \"\"\"Test to ensure squashed migrations are correctly marked applied/unapplied.\"\"\"\n+        executor = MigrationExecutor(connection)\n+\n+        # Apply the squashed migration\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        self.assertIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n+        # Unapply the squashed migration\n+        executor.migrate([('migrations', None)])\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n+    def test_unapply_squashed_keeps_replacements_applied(self):\n+        \"\"\"Test that unapplied squashed migration doesn't unapply replacements if still present.\"\"\"\n+        executor = MigrationExecutor(connection)\n+\n+        # Apply the squashed migration and verify\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        self.assertIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n+        # Simulate the squashed migration file being unapplied \n+        executor.recorder.record_unapplied('migrations', '0001_squashed_0002')\n+\n+        # Check if the replacements are still marked as applied\n+        self.assertIn(\n+            ('migrations', '0001_initial'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        self.assertIn(\n+            ('migrations', '0002_second'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n+    # When the feature is False, the operation and the record won't\n     # performed in a transaction and the test will systematically pass.\n     @skipUnlessDBFeature('can_rollback_ddl')\n     def test_migrations_applied_and_recorded_atomically(self):\n",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..9044d28 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,34 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+    def test_bulk_update_return_value(self):\n+        # Create test data\n+        Note.objects.bulk_create([\n+            Note(note='initial_note', misc=str(i))\n+            for i in range(10)\n+        ])\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = 'updated_note'\n+        \n+        # Test bulk_update return value\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 10)\n+\n+        # Test empty bulk_update\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+        # Test with batch_size\n+        rows_updated = Note.objects.bulk_update(notes, ['note'], batch_size=5)\n+        self.assertEqual(rows_updated, 10)\n+\n+        # Test with duplicates in the list\n+        note = Note.objects.create(note='unique_note', misc='unique_misc')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..4e15c31 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,6 +984,25 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n+    def test_non_form_errors_class(self):\n+        \"\"\"\n+        Test that the 'nonform' CSS class is applied to non-form errors in FormSets.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',\n+            'drinks-INITIAL_FORMS': '0',\n+            'drinks-MIN_NUM_FORMS': '0',\n+            'drinks-MAX_NUM_FORMS': '0',\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n+\n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..443b884 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,27 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_datetime_clean_initial_via_bound_field(self):\n+        \"\"\"Test if cleaned data matches the initial value from the BoundField.\"\"\"\n+        now = datetime.datetime(2023, 5, 5, 12, 0, 0)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+        \n+        form = DateTimeForm({})\n+        self.assertEqual(form['dt'].initial, form.cleaned_data['dt'])\n+        self.assertEqual(form.errors, {})\n+\n+    def test_changed_data_using_bound_field(self):\n+        \"\"\"Test that changed_data is accurate with initial values from BoundField.\"\"\"\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: datetime.datetime(2023, 5, 5, 12, 0, 0), disabled=True)\n+\n+        form = DateTimeForm({'dt': '2023-05-05 12:00:00'})\n+        self.assertEqual(form.changed_data, [])\n+\n+        form = DateTimeForm({'dt': '2023-05-06 12:00:00'})\n+        self.assertEqual(form.changed_data, ['dt'])\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..1e5b02b 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -3,6 +3,8 @@ from operator import attrgetter\n \n from django.db import IntegrityError\n from django.test import TestCase\n+from django.db import models\n+from django.core.checks import Error\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..48876a7 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,5 +1,41 @@\n+\n+class AutocompleteJsonViewTests(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser(\n+            username='super', email='super@example.com', password='secret'\n+        )\n+        self.url = reverse('admin:app_list', args=('app_label',))\n+        self.opts = {'app_label': 'admin_views', 'model_name': 'question', 'field_name': 'question'}\n+\n+    def test_serialize_result_with_extra_field(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return super().serialize_result(obj, to_field_name) | {'posted': str(obj.posted)}\n+\n+        # Create some sample data\n+        Question.objects.create(question='Question 1', posted=date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=date(2021, 8, 7))\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = CustomAutocompleteJsonView.as_view()(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        data = json.loads(response.content.decode('utf-8'))\n+        expected_results = [\n+            {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+            for q in Question.objects.order_by('-posted')\n+        ]\n+        self.assertEqual(data, {\n+            'results': expected_results,\n+            'pagination': {'more': False}\n+        })\n+\n import json\n-from contextlib import contextmanager\n+from datetime import date\n+from django.test import TestCase\n+from .models import Question\n \n from django.contrib import admin\n from django.contrib.admin.tests import AdminSeleniumTestCase\n",
  "django__django-14765": "",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..2afbfa3 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -167,6 +167,15 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n \n class TestChildArguments(SimpleTestCase):\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_to_child_process(self):\n+        # Test if -X options are passed correctly to the child process\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..374d02a 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,40 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper method to test whether ForeignKey readonly fields\n+        render as links with the correct admin site prefix.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        # Retrieve the change form for the Chapter instance\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_chapter_change', args=(chapter.pk,)))\n+        self.assertEqual(response.status_code, 200)\n+        # Check for the proper URL prefix in the readonly ForeignKey field link\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        ForeignKey readonly fields should have correct links in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        ForeignKey readonly fields should have correct links in a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom_admin')\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..6ff2d05 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -279,7 +281,27 @@ class ModelChoiceFieldTests(TestCase):\n         field = CustomModelChoiceField(Category.objects.all())\n         self.assertIsInstance(field.choices, CustomModelChoiceIterator)\n \n-    def test_choice_iterator_passes_model_to_widget(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_model_choice_iterator_value_in_dict(self):\n+        # Preparing test data\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        \n+        # Using ModelChoiceIteratorValue as dictionary keys\n+        my_dict = {value_1: ['first_name', 'last_name']}\n+        \n+        # Check if value is correctly found in the dictionary\n+        self.assertIn(value_1, my_dict)\n+        self.assertNotIn(value_2, my_dict)\n+\n+        # Test if we can retrieve data using the object with same pk but different instance\n+        test_value = ModelChoiceIteratorValue(self.c1.pk, None)\n+        self.assertEqual(my_dict[test_value], ['first_name', 'last_name'])\n         class CustomCheckboxSelectMultiple(CheckboxSelectMultiple):\n             def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n                 option = super().create_option(name, value, label, selected, index, subindex, attrs)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..633ba60 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,46 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop_fk_check(self):\n+        app_label = 'test_rmwdbtn_fk_check'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+\n+        Pony = project_state.apps.get_model(app_label, \"Pony\")\n+        Rider = project_state.apps.get_model(app_label, \"Rider\")\n+        pony = Pony.objects.create(rider=Rider.objects.create())\n+        \n+        # Verify initial counts\n+        self.assertEqual(Pony.objects.count(), 1)\n+        self.assertEqual(Rider.objects.count(), 1)\n+\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Check after the operation\n+        self.assertEqual(Pony.objects.count(), 1)\n+        self.assertEqual(Rider.objects.count(), 1)\n+        \n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+        # Verify counts remain the same after backwards\n+        self.assertEqual(Pony.objects.count(), 1)\n+        self.assertEqual(Rider.objects.count(), 1)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..e437154 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -203,8 +203,16 @@ class InspectDBTestCase(TestCase):\n             'people_unique = models.OneToOneField(InspectdbPeople, models.DO_NOTHING)',\n             output,\n         )\n-\n-    def test_digits_column_name_introspection(self):\n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_foreign_key_to_non_primary_field(self):\n+        \"\"\"Test if the inspectdb handles foreign keys to non-primary key fields correctly.\"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_bartable', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"other_id = models.ForeignKey('InspectdbFoo', models.DO_NOTHING, to_field='other_id')\",\n+            output,\n+        )\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..c886087 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2827,6 +2827,50 @@ class AutodetectorTests(TestCase):\n             ('0002_custom_name_20380101_1112_squashed_0003_model', 3),\n             ('2_squashed_4', 4),\n         ]\n+\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_custom_fk_without_deleting_to(self):\n+        class NoDeleteToForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                # Deconstruct without deleting 'to'\n+                name, path, args, kwargs = super().deconstruct()\n+                return name, path, args, kwargs\n+\n+        book_with_nodelete_to = ModelState('testapp', 'Book', [\n+            ('author', NoDeleteToForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_with_nodelete_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n         for migration_name, expected_number in tests:\n             with self.subTest(migration_name=migration_name):\n                 self.assertEqual(\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..b7f5154 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -368,6 +369,22 @@ class BaseTests:\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'overridden_info',\n+        constants.DEBUG: 'overridden_debug',\n+        constants.WARNING: 'overridden_warning',\n+        constants.ERROR: 'overridden_error',\n+        constants.SUCCESS: 'overridden_success',\n+    })\n+    def test_override_level_tags_with_custom_tags(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        expected_tags = ['overridden_info', 'overridden_debug', 'overridden_debug', \n+                         'overridden_warning', 'overridden_error', 'overridden_success']\n+        self.assertEqual(tags, expected_tags)\n+\n     @override_settings_tags(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..fe4ad39 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2095,13 +2095,69 @@ class QuerySetBitwiseOperationTests(TestCase):\n         cls.room_3 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 3')\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    from django.db.models import Q\n+    \n+    class CombinesWithAliasesTests(TestCase):\n+        \n+        @classmethod\n+        def setUpTestData(cls):\n+            # Set up data for testing alias conflict in queryset combination\n+            cls.tag = Tag.objects.create(name='Test Tag')\n+            cls.annotation_1 = Annotation.objects.create(tag=cls.tag)\n+            cls.annotation_2 = Annotation.objects.create(tag=cls.tag)\n+            cls.note = cls.annotation_1.notes.create(tag=cls.tag)\n+            cls.base_user_1 = BaseUser.objects.create(annotation=cls.annotation_1)\n+            cls.base_user_2 = BaseUser.objects.create(annotation=cls.annotation_2)\n+            cls.task = Task.objects.create(\n+                owner=cls.base_user_2, creator=cls.base_user_2, note=cls.note,\n+            )\n+        \n+        def test_conflicting_aliases_during_combine(self):\n+            qs1 = self.annotation_1.baseuser_set.all()\n+            qs2 = BaseUser.objects.filter(\n+                Q(owner__note__in=self.annotation_1.notes.all()) |\n+                Q(creator__note__in=self.annotation_1.notes.all())\n+            )\n+            # Verify initial conditions\n+            self.assertSequenceEqual(qs1, [self.base_user_1])\n+            self.assertSequenceEqual(qs2, [self.base_user_2])\n+            # Test combination order ensuring no AssertionError occurs\n+            self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+            self.assertCountEqual(qs2 | qs1, [self.base_user_1, self.base_user_2])\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    from django.db.models import Q\n+    \n+    class CombinesWithAliasesTests(TestCase):\n+        \n+        @classmethod\n+        def setUpTestData(cls):\n+            # Set up data for testing alias conflict in queryset combination\n+            cls.tag = Tag.objects.create(name='Test Tag')\n+            cls.annotation_1 = Annotation.objects.create(tag=cls.tag)\n+            cls.annotation_2 = Annotation.objects.create(tag=cls.tag)\n+            cls.note = cls.annotation_1.notes.create(tag=cls.tag)\n+            cls.base_user_1 = BaseUser.objects.create(annotation=cls.annotation_1)\n+            cls.base_user_2 = BaseUser.objects.create(annotation=cls.annotation_2)\n+            cls.task = Task.objects.create(\n+                owner=cls.base_user_2, creator=cls.base_user_2, note=cls.note,\n+            )\n+        \n+        def test_conflicting_aliases_during_combine(self):\n+            qs1 = self.annotation_1.baseuser_set.all()\n+            qs2 = BaseUser.objects.filter(\n+                Q(owner__note__in=self.annotation_1.notes.all()) |\n+                Q(creator__note__in=self.annotation_1.notes.all())\n+            )\n+            # Verify initial conditions\n+            self.assertSequenceEqual(qs1, [self.base_user_1])\n+            self.assertSequenceEqual(qs2, [self.base_user_2])\n+            # Test combination order ensuring no AssertionError occurs\n+            self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+            self.assertCountEqual(qs2 | qs1, [self.base_user_1, self.base_user_2])\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=False)\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..96b6ad6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1755,6 +1755,13 @@ class ValueTests(TestCase):\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n \n+    def test_deconstruct_F_expression(self):\n+        expr = F('field_name')\n+        path, args, kwargs = expr.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..c3e9d6a 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,27 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_optimize_foo_together_operations(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are optimized into one.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together],\n+            [self.author_empty, self.book_foo_together_optimized]\n+        )\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, \"otherapp\", 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book',\n+            unique_together={('title', 'author')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book',\n+            index_together={('title', 'author')},\n+        )\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..6cadefe 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -637,8 +637,25 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n-        # MySQL annoyingly uses the same backend, so it'll come back as one of\n-        # these two types.\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField to a model on SQLite.\n+        \"\"\"\n+        # Create the tables for Author and Note models\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        # Define a new nullable OneToOneField\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        # Add the new field to the Author model\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        # Check that the note_id column is created and is nullable\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # The sixth element in field_info corresponds to the nullable property\n+        self.assertTrue(columns['note_id'][1][6])\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n \n     def test_add_field_durationfield_with_default(self):\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..9f2fe7b 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -102,7 +102,30 @@ class BasicFieldTests(SimpleTestCase):\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n-    def test_abstract_inherited_fields(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_dict_key_usage(self):\n+        \"\"\"\n+        Test that a field can be used as a key in a dictionary and remains\n+        there after being assigned to a model class.\n+        \"\"\"\n+        field = models.CharField(max_length=200)\n+        field_dict = {field: \"test value\"}\n+        self.assertIn(field, field_dict)\n+\n+        class Book(models.Model):\n+            title = field\n+\n+        # The field should still be present in the dictionary\n+        self.assertIn(field, field_dict)\n+        self.assertEqual(field_dict[field], \"test value\")\n         \"\"\"Field instances from abstract models are not equal.\"\"\"\n         class AbstractModel(models.Model):\n             field = models.IntegerField()\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..d565c02 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,14 +204,34 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+    def test_f_expression(self):\n+        notes = [\n+            Note.objects.create(note='test_note', misc='initial_misc')\n+            for _ in range(10)\n+        ]\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n         Number.objects.bulk_update(numbers, ['num'])\n         self.assertCountEqual(Number.objects.filter(num=1), numbers)\n \n-    def test_booleanfield(self):\n+    def test_f_expression_with_different_field_types(self):\n+        # Test F expression with different field types\n+        records = [SelfRef.objects.create(c8='initial', name='test_name') for _ in range(5)]\n+        for record in records:\n+            record.c8 = F('name')\n+        SelfRef.objects.bulk_update(records, ['c8'])\n+        self.assertCountEqual(SelfRef.objects.filter(c8='test_name'), records)\n+        \n+        model_instances = [Number.objects.create(num=1) for _ in range(5)]\n+        for model_instance in model_instances:\n+            model_instance.num = F('num') + 1\n+        Number.objects.bulk_update(model_instances, ['num'])\n+        self.assertCountEqual(Number.objects.filter(num=2), model_instances)\n         individuals = [Individual.objects.create(alive=False) for _ in range(10)]\n         for individual in individuals:\n             individual.alive = True\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..7fb8317 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1048,6 +1048,23 @@ class AutodetectorTests(TestCase):\n             changes, 'app', 0, 1, model_name='bar', old_name='foo',\n             new_name='renamed_foo',\n         )\n+    def test_rename_model_and_field_simultaneously(self):\n+        \"\"\"Tests autodetection of renaming a model and a field in one step.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        # Check that both RenameModel and RenameField were detected\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name')\n \n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..dd2d9d2 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,38 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+class ExistsSubqueryTests(TestCase):\n+    def test_negated_empty_exists_subquery(self):\n+        # Creating a test model instance\n+        manager = Manager.objects.create(name='test')\n+        \n+        # A negated Exists with an empty queryset should not lead to an\n+        # EmptyResultSet by removing the WHERE block.\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()), name='test'\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_non_negated_empty_exists_subquery(self):\n+        manager = Manager.objects.create(name='example')\n+        \n+        # A non-negated Exists with an empty queryset should yield no results\n+        # because the exists condition is not met.\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.none()), name='example'\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_exists_with_non_empty_queryset(self):\n+        # Create two Manager instances\n+        manager1 = Manager.objects.create(name='manager1')\n+        Manager.objects.create(name='manager2')\n+        \n+        # A Exists with a non-empty queryset should return manager1\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.filter(name='manager1'))\n+        )\n+        self.assertIn(manager1, qs)\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..16263ff 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -26,7 +26,10 @@ from django.db.models import (\n )\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n-from django.utils import translation\n+from django.utils.translation import gettext as _\n+from django.contrib.admin import ModelAdmin\n+from django.db.models import ForeignKey\n+from .models import Inventory\n \n from .models import (\n     Advisor,\n@@ -141,7 +144,31 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n         self.assertIsNone(ff.empty_label)\n \n-    def test_many_to_many(self):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_foreignkey_respects_blank(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == \"parent\":\n+                    kwargs[\"empty_label\"] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        \n+        # Assuming 'parent' field is blankable, it should still use the custom label, testing the fix.\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..52cd2cb 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -790,8 +790,31 @@ class NaturalKeyFixtureTests(TestCase):\n             transform=repr,\n         )\n \n+from django.test import TestCase\n+from django.core import management\n+from fixtures_regress.models import NaturalKeyWithFKDependency, Person\n \n-class M2MNaturalKeyFixtureTests(TestCase):\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        # Create Author in default database\n+        Person.objects.create(name='J.R.R. Tolkien')\n+\n+    def test_natural_key_dependencies_in_other_db(self):\n+        \"\"\"\n+        Test that loaddata works on a non-default database\n+        with natural keys that have foreign key dependencies.\n+        \"\"\"\n+        management.call_command(\n+            \"loaddata\",\n+            \"nk_with_foreign_key.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        obj = NaturalKeyWithFKDependency.objects.using(\"other\").get()\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n     def test_dependency_sorting_m2m_simple(self):\n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..e1873b1 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3956,6 +3956,58 @@ class SchemaTests(TransactionTestCase):\n             verbose_name=\"verbose name\",\n         )\n         new_field.set_attributes_from_name(\"author\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, new_field, old_field, strict=True)\n+\n+    def test_alter_field_choices_noop_textfield(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = TextField(\n+            choices=((\"Memoir\", \"Memoir\"), (\"Novel\", \"Novel\")),\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_choices_noop_integerfield(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Book)\n+        old_field = Book._meta.get_field(\"pages\")\n+        new_field = IntegerField(\n+            choices=((100, \"Short\"), (300, \"Long\")),\n+        )\n+        new_field.set_attributes_from_name(\"pages\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, new_field, old_field, strict=True)\n+\n+    def test_alter_field_choices_noop_textfield(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = TextField(\n+            choices=((\"Memoir\", \"Memoir\"), (\"Novel\", \"Novel\")),\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_choices_noop_integerfield(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Book)\n+        old_field = Book._meta.get_field(\"pages\")\n+        new_field = IntegerField(\n+            choices=((100, \"Short\"), (300, \"Long\")),\n+        )\n+        new_field.set_attributes_from_name(\"pages\")\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, old_field, new_field, strict=True)\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..ade3be9 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -320,6 +320,32 @@ class LookupTests(TestCase):\n         self.assertNotIn(\"exactly\", field.get_lookups())\n \n         # registration should bust the cache\n+\n+    def test_unregistration_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register a lookup to ensure it's cached\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister the lookup and assert cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+\n+    def test_unregistration_and_reregistration(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register and cache a lookup\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister lookup and ensure cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+\n+        # Re-register the lookup to ensure it caches again\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n         with register_lookup(models.ForeignObject, Exactly):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..5a9c952 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -76,7 +76,42 @@ class TemplateReloadTests(SimpleTestCase):\n             },\n         )\n \n-    @mock.patch(\"django.template.loaders.base.Loader.reset\")\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_path(self):\n+        # Ensure that an empty string in DIRS is ignored and does not cause problems\n+        self.assertEqual(autoreload.get_template_directories(), set())\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", \"/invalid/path\", \"another/invalid/path\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_invalid_paths(self):\n+        # Test with multiple invalid paths including empty strings\n+        self.assertEqual(autoreload.get_template_directories(), set())\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"valid/path\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_valid_and_empty_paths(self):\n+        # Test with mix of valid path and an empty string\n+        expected_dirs = {Path.cwd() / \"valid/path\"}\n+        self.assertEqual(autoreload.get_template_directories(), expected_dirs)\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..3ba7783 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,4 +1,6 @@\n+\n import threading\n+import inspect\n from datetime import datetime, timedelta\n from unittest import mock\n \n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..d60d569 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,4 +1,8 @@\n+\n from datetime import datetime, time\n+import gettext\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n@@ -61,7 +65,12 @@ class DateTests(TimezoneTestCase):\n         output = self.engine.render_to_string(\"date07\", {\"d\": datetime(2009, 3, 12)})\n         self.assertEqual(output, \"\")\n \n-    # #19370: Make sure |date doesn't blow up on a midnight time object\n+    def test_get_format_lazy_string(self):\n+        # Verifies that get_format can handle lazy strings.\n+        lazy_string = gettext_lazy(\"DATE_FORMAT\")\n+        expected_format = get_format(str(lazy_string))\n+        result = get_format(lazy_string)\n+        self.assertEqual(result, expected_format or \"N j, Y\")\n     @setup({\"date08\": '{{ t|date:\"H:i\" }}'})\n     def test_date08(self):\n         output = self.engine.render_to_string(\"date08\", {\"t\": time(0, 1)})\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..05ab07f 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,7 +399,22 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n+from django.db import models\n+from django.test import TestCase\n+from django.core.management import call_command\n+from .models import ProxyCustomModel, AnotherModel\n+\n+class ProxyModelQuerySetTests(TestCase):\n+    def setUp(self):\n+        self.user = ProxyCustomModel.objects.create(name=\"John Doe\")\n+        self.model_instance = AnotherModel.objects.create(custom=self.user)\n+    \n+    def test_select_related_only_proxy(self):\n+        objs = AnotherModel.objects.select_related('custom').only('custom__name')\n+        # Fetch the first object to trigger the query execution\n+        first_obj = objs.first()\n+        self.assertIsNotNone(first_obj)\n+        self.assertEqual(first_obj.custom.name, \"John Doe\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..4d34305 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,6 +151,20 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_dbshell_parameters_order(self):\n+        # Test case to ensure parameters are before dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n+    def test_dbshell_without_parameters(self):\n+        # Test case to ensure behavior without additional parameters\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..6d92793 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -74,6 +74,25 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n+    def test_decimal_precision(self):\n+        # Test for precision preservation with Decimals.\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.00000000000000000000123\"), 24),\n+            \"0.000000000000000000001230\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"-12345678901234567890.12345\"), 5),\n+            \"-12345678901234567890.12345\"\n+        )\n+\n     def test_force_grouping(self):\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..86d849a 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -415,6 +415,17 @@ class CaseExpressionTests(TestCase):\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n+    def test_annotate_with_negated_empty_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        # We expect all objects to be annotated as \"selected\" because ~Q(pk__in=[]) should match all records\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_combined_expression(self):\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n",
  "django__django-15987": "",
  "django__django-16032": "",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..42ef479 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2406,6 +2406,28 @@ class CombinableTests(SimpleTestCase):\n             object() ^ Combinable()\n \n \n+from django.db.models import IntegerField, DecimalField, FloatField, Expression, F\n+from django.db.models.expressions import CombinedExpression\n+from django.test import SimpleTestCase\n+\n+class CombinedExpressionTests(SimpleTestCase):\n+    def test_resolve_output_field_with_mod(self):\n+        # Test cases for the MOD operator\n+        tests = [\n+            (IntegerField, DecimalField, DecimalField),\n+            (DecimalField, IntegerField, DecimalField),\n+            (DecimalField, DecimalField, DecimalField),\n+            (IntegerField, IntegerField, IntegerField),\n+        ]\n+        for lhs, rhs, combined in tests:\n+            with self.subTest(lhs=lhs, rhs=rhs, combined=combined):\n+                expr = CombinedExpression(\n+                    Expression(lhs()),\n+                    Combinable.MOD,\n+                    Expression(rhs()),\n+                )\n+                self.assertIsInstance(expr.output_field, combined)\n+\n class CombinedExpressionTests(SimpleTestCase):\n     def test_resolve_output_field_number(self):\n         tests = [\n@@ -2416,7 +2438,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..2ffb58b 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +404,54 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity_additional_cases(self):\n+        # Additional test cases to check if transactions are handled correctly\n+        # when multiple different types of errors occur.\n+        a = Swallow.objects.create(origin=\"Swallow C\", load=6, speed=3)\n+        b = Swallow.objects.create(origin=\"Swallow D\", load=3, speed=4)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"10.0\",\n+            \"form-0-speed\": \"2.0\",\n+            \"form-1-load\": \"4.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Simulate an IntegrityError during transaction\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 6)\n+        self.assertEqual(a.speed, 3)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 3)\n+        self.assertEqual(b.speed, 4)\n+\n+        # Simulate a generic exception occurring\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=Exception\n+        ):\n+            with self.assertRaises(Exception):\n+                self.client.post(changelist_url, data)\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 6)\n+        self.assertEqual(a.speed, 3)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 3)\n+        self.assertEqual(b.speed, 4)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "",
  "django__django-16136": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..5d9f46e 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,8 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+from django.urls import reverse\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -892,7 +894,25 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..b6bce61 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,6 +1600,22 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_zero_ip_addr(self, *mocked_objects):\n+        output = unittest.mock.Mock()\n+        call_command(\n+            \"runserver\",\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            output.getvalue(),\n+        )\n+\n     def test_runner_hostname(self):\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n",
  "django__django-16255": "",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..c33147f 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -79,6 +79,10 @@ class NoFields(models.Model):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..8934e6a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..d5e1366 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -8,6 +9,29 @@ from django.utils.translation import npgettext_lazy\n \n \n class TimesinceTests(TestCase):\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_tz_aware_datetime(self):\n+        now = timezone.now()\n+        past = now - datetime.timedelta(days=45)  # More than one month\n+        past = timezone.make_aware(past, timezone.get_default_timezone())\n+        self.assertEqual(timesince(past, now), \"1\\xa0month, 2\\xa0weeks\")\n+        \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_naive_and_aware(self):\n+        now = timezone.now()\n+        past_naive = datetime.datetime.now() - datetime.timedelta(days=45)\n+        past_aware = timezone.make_aware(past_naive, timezone.get_default_timezone())\n+        \n+        with self.assertRaises(TypeError):\n+            timesince(past_naive, now)\n+        \n+        try:\n+            timesince(past_aware, now)\n+        except TypeError:\n+            self.fail(\"timesince() raised TypeError unexpectedly!\")\n     def setUp(self):\n         self.t = datetime.datetime(2007, 8, 14, 13, 46, 0)\n         self.onemicrosecond = datetime.timedelta(microseconds=1)\n",
  "django__django-16454": "",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..94985b7 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,16 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_callable_default_storage(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..1db80e0 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,6 +1,9 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n@@ -33,7 +36,41 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test to ensure 'show_save_as_new' only appears when the user\n+        has both 'add' and 'change' permissions.\n+        \"\"\"\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16560": "",
  "django__django-16569": "",
  "django__django-16595": "",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..3ec604a 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8450,6 +8450,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n \n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"/admin/login/?next={known_url[:-1]}%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8462,9 +8516,117 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertRedirects(\n             response, known_url, status_code=301, target_status_code=403\n         )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"/admin/login/?next={known_url[:-1]}%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n \n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"/admin/login/?next={known_url[:-1]}%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8480,9 +8642,117 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             status_code=301,\n             fetch_redirect_response=False,\n         )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"/admin/login/?next={known_url[:-1]}%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n \n     @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n     def test_missing_slash_append_slash_true_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"/admin/login/?next={known_url[:-1]}%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8498,9 +8768,99 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             status_code=301,\n             fetch_redirect_response=False,\n         )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"/admin/login/?next={known_url[:-1]}%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n \n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n         user = User.objects.create_user(\n             username=\"user\",\n             password=\"secret\",\n@@ -8509,6 +8869,24 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(user)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"/admin/login/?next={known_url[:-1]}%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(\n             response,\n@@ -8616,6 +8994,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n \n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"/admin/login/?next={known_url[:-1]}%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8628,9 +9060,117 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertRedirects(\n             response, known_url, status_code=301, target_status_code=403\n         )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"/admin/login/?next={known_url[:-1]}%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n \n     @override_settings(APPEND_SLASH=False)\n     def test_missing_slash_append_slash_false_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"/admin/login/?next={known_url[:-1]}%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..5a3220c 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -255,6 +255,8 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
  "django__django-16661": "",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..dc8adeb 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,31 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_sorted_imports_with_multiple_imports(self):\n+        \"\"\"\n+        Test that imports are sorted correctly when there are multiple imports\n+        from different modules.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\", \"myfield\", models.FloatField(default=time.time)\n+                    ),\n+                    migrations.AddField(\n+                        \"mymodel\", \"myfield2\", models.DateTimeField(default=datetime.datetime.now)\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..ea950a9 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -790,8 +790,22 @@ class SystemChecksTestCase(SimpleTestCase):\n \n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n+    \n+    def test_readonly_field_name_in_error_message(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"nonexistent_field\",)\n \n-    def test_nonexistent_field(self):\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent_field', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an \"\n+                \"attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"title\", \"nonexistent\")\n \n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..b236e83 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -60,8 +61,35 @@ class XorLookupsTests(TestCase):\n             self.numbers[:2],\n         )\n \n+    def test_multiple_xor_conditions(self):\n+        # Tests the parity behavior of XOR with multiple Q objects.\n+        self.assertCountEqual(\n+            Number.objects.filter(\n+                Q(num=1) ^ Q(num=2) ^ Q(num=3)  # 1 and 3 are true, so result is true.\n+            ),\n+            [self.numbers[1], self.numbers[3]],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(\n+                Q(num=1) ^ Q(num=2) ^ Q(num=3) ^ Q(num=4)  # 1 and 3, 4 are true, so result is false.\n+            ),\n+            [],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(\n+                Q(num=1) ^ Q(num=1) ^ Q(num=3) ^ Q(num=4)  # 3 and 4 are true, so result is true.\n+            ),\n+            [self.numbers[3], self.numbers[4]],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(\n+                Q(num=0) ^ Q(num=1) ^ Q(num=2) ^ Q(num=3) ^ Q(num=4)  # 1, 3, and 4 are true, so result is true.\n+            ),\n+            [self.numbers[1], self.numbers[3], self.numbers[4]],\n+        )\n+\n     def test_empty_in(self):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..1b0716f 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -290,15 +290,32 @@ class PaginationTests(SimpleTestCase):\n \n     def test_get_page_empty_object_list_and_allow_empty_first_page_false(self):\n         \"\"\"\n-        Paginator.get_page() raises EmptyPage if allow_empty_first_page=False\n+from django.test import TestCase\n+from django.core.paginator import Paginator, EmptyPage\n+from .models import Article\n+from datetime import datetime\n         and object_list is empty.\n         \"\"\"\n         paginator = Paginator([], 2, allow_empty_first_page=False)\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n-\n-class ModelPaginationTests(TestCase):\n+    def test_paginator_iteration_empty(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_with_varied_page_sizes(self):\n+        items = list(range(1, 10))  # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n+        paginator = Paginator(items, 3)\n+        expected_pages = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n+        page_iterator = iter(paginator)\n+        \n+        for expected in expected_pages:\n+            with self.subTest(expected=expected):\n+                page = next(page_iterator)\n+                self.assertEqual(list(page), expected)\n     \"\"\"\n     Test pagination with Django model instances\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..ae4692a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6362,10 +6362,33 @@ def test_hist_nan_data():\n \n     data = [1, 2, 3]\n     nan_data = data + [np.nan]\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    def test_hist_range_and_density():\n+        # Test the specific bug where hist() does not respect range when density=True.\n+        _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+        assert bins[0] == 0, \"The first bin edge should be 0 when range=(0, 1) and density=True.\"\n+        assert bins[-1] == 1, \"The last bin edge should be 1 when range=(0, 1) and density=True.\"\n+\n+        # Test with a different range\n+        _, bins, _ = plt.hist(np.random.rand(100), bins=10, range=(2, 5), density=True)\n+        assert bins[0] == 2, \"The first bin edge should be 2 when range=(2, 5) and density=True.\"\n+        assert bins[-1] == 5, \"The last bin edge should be 5 when range=(2, 5) and density=True.\"\n+\n+        # Test that density=False still respects the range\n+        _, bins, _ = plt.hist(np.random.rand(100), bins=10, range=(0, 1), density=False)\n+        assert bins[0] == 0, \"The first bin edge should be 0 when range=(0, 1) and density=False.\"\n+        assert bins[-1] == 1, \"The last bin edge should be 1 when range=(0, 1) and density=False.\"\n+\n+        # Test with density=True and a sequence of bins\n+        custom_bins = np.linspace(0, 1, 11)\n+        _, bins, _ = plt.hist(np.random.rand(100), bins=custom_bins, density=True)\n+        np.testing.assert_array_equal(bins, custom_bins, \"Bins should not change when a sequence is used with density=True.\")\n \n     bins, edges, _ = ax1.hist(data)\n     with np.errstate(invalid='ignore'):\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..02629f0 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,22 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_invert_axis_log_scale():\n+    # Test inverting a log scale axis using set_ylim\n+    fig, ax = plt.subplots()\n+    ax.set_yscale('log')\n+    ax.set_ylim(10, 1)  # Try to invert the y-axis for log scale\n+    inverted_limits = ax.get_ylim()\n+    assert inverted_limits == (10, 1), f\"Expected limits (10, 1), but got {inverted_limits}\"\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    ax.set_xscale('log')\n+    ax.set_xlim(100, 1)  # Try to invert the x-axis for log scale\n+    inverted_limits = ax.get_xlim()\n+    assert inverted_limits == (100, 1), f\"Expected limits (100, 1), but got {inverted_limits}\"\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +954,22 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_axis_log_scale():\n+    # Test inverting a log scale axis using set_ylim\n+    fig, ax = plt.subplots()\n+    ax.set_yscale('log')\n+    ax.set_ylim(10, 1)  # Try to invert the y-axis for log scale\n+    inverted_limits = ax.get_ylim()\n+    assert inverted_limits == (10, 1), f\"Expected limits (10, 1), but got {inverted_limits}\"\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    ax.set_xscale('log')\n+    ax.set_xlim(100, 1)  # Try to invert the x-axis for log scale\n+    inverted_limits = ax.get_xlim()\n+    assert inverted_limits == (100, 1), f\"Expected limits (100, 1), but got {inverted_limits}\"\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..f541a58 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,6 +6961,26 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without using ax.clear()\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure using ax.clear()\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..91ab6f0 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -306,9 +306,20 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert x_units is ax.xaxis.units\n         assert y_units is ax.yaxis.units\n \n+import pytest\n+import matplotlib.pyplot as plt\n \n-def test_hist():\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Ensure no deprecation warning is emitted with empty data and category units.\n+    \"\"\"\n+    with pytest.warns(None) as record:\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+    # Verify that no warnings of any type were raised\n+    assert len(record) == 0\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..9c77bd6 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -495,8 +495,35 @@ def test_keymaps():\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+import pytest\n \n-def test_rcparams_reset_after_fail():\n+def test_no_backend_reset_rccontext():\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n+def test_get_backend_with_rc_context():\n+    # The issue occurs when a figure is created within rc_context and then\n+    # get_backend() is called, which results in figures being cleared from Gcf.\n+    # We reproduce that scenario and check that the figure remains in Gcf.figs.\n+\n+    # Create a figure within rc_context\n+    with rc_context():\n+        fig2 = plt.figure()\n+    before_backend_call = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    # Call get_backend and check that it does not clear Gcf.figs\n+    get_backend()\n+    after_backend_call = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before_backend_call == after_backend_call, (\n+        f'Figures were cleared from Gcf:\\n'\n+        f'Before get_backend(): {before_backend_call}\\n'\n+        f'After get_backend(): {after_backend_call}'\n+    )\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..89a30e0 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -11,7 +11,7 @@ from matplotlib import colors as mcolors\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n-from matplotlib.patches import Circle\n+from matplotlib.testing.decorators import check_figures_equal\n \n import matplotlib.pyplot as plt\n import numpy as np\n@@ -21,7 +21,18 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible_false(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(1, 2, 1, projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n+    \n+    ax_ref = fig_ref.add_subplot(1, 2, 1, projection='3d')\n+    ax_ref.scatter(1, 1, 1, c='r')\n+    ax_ref.set_visible(True)\n+    \n+    fig_test.add_subplot(1, 2, 2, projection='3d')\n+    fig_ref.add_subplot(1, 2, 2, projection='3d')\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..de264ba 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -157,7 +157,34 @@ def test_negative_rect():\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n \n-@image_comparison(['clip_to_bbox'])\n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib.patches import Rectangle\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_issue(fig_test, fig_ref):\n+    # Reproduce the issue described\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    # Expected outcome: the blue rectangle should start with space, red with a dash\n+    rect_ref1 = Rectangle((0.5, 0.5), 1, 1, alpha=0.5, edgecolor='b', linewidth=4, ls=(0, (10, 10)))\n+    rect_ref2 = Rectangle((0.5, 0.5), 1, 1, alpha=0.5, edgecolor='r', linewidth=4, ls=(10, (10, 10)))\n+\n+    ax_ref.add_patch(rect_ref1)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Similar test setup for the test figure\n+    rect_test1 = Rectangle((0.5, 0.5), 1, 1, alpha=0.5, edgecolor='b', linewidth=4, ls=(0, (10, 10)))\n+    rect_test2 = Rectangle((0.5, 0.5), 1, 1, alpha=0.5, edgecolor='r', linewidth=4, ls=(10, (10, 10)))\n+\n+    ax_test.add_patch(rect_test1)\n+    ax_test.add_patch(rect_test2)\n+    ax_test.set_xlim(0, 2)\n+    ax_test.set_ylim(0, 2)\n+    ax_ref.set_xlim(0, 2)\n+    ax_ref.set_ylim(0, 2)\n def test_clip_to_bbox():\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..50989d5 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,9 +2866,26 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-\n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n-def test_stackplot_baseline():\n+def test_stackplot_color_cycler():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n+    \n+    # Check colors synchronization across different plot types\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    \n+    fig, ax = plt.subplots()\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    \n+    # stackplot using color cycler references\n+    ax.stackplot([1, 2, 3], my_data.T, colors=['C2', 'C3', 'C4'])\n+    \n+    # Verify that no ValueError is thrown and colors are used correctly.\n+    lines = ax.get_lines()\n+    assert lines[0].get_color() == 'C0'\n+    patches = ax.patches\n+    assert patches[0].get_facecolor()[:3] == plt.get_cmap('tab10')(1)[:3]  # 'C1' mapped color\n     np.random.seed(0)\n \n     def layers(n, m):\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..7190419 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -11,6 +11,7 @@ import matplotlib.patches as mpatches\n import matplotlib.lines as mlines\n from matplotlib.backend_bases import MouseButton, MouseEvent\n \n+from matplotlib.patches import Rectangle\n from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n     OffsetImage, TextArea, _get_packed_offsets)\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..b750087 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,6 +576,40 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from io import BytesIO\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox in output svg.\n+    fig = plt.figure()\n+    ax = fig.add_subplot()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n+\n     plt.rcParams[\"svg.fonttype\"] = \"none\"\n \n     fig, ax = plt.subplots()\n",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..be0e943 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,34 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+    \n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+    \n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..d61371b 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,29 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_pickle_draggable_legend():\n+    # Create a simple plot with draggable legend\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2, 3], [10, 20, 25, 30], label='test line')\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Ensure that FigureCanvasAgg is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Load the figure back from pickle\n+    loaded_fig = pickle.loads(pkl)\n+\n+    # Draw the loaded figure to ensure it can render\n+    loaded_fig.canvas.draw()\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..979a3c1 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -35,6 +35,32 @@ def test_simple():\n \n     plt.figure()\n     plt.bar(x=np.arange(10), height=np.arange(10))\n+\n+    # New test for pickling a figure with aligned labels\n+    def test_pickle_aligned_labels():\n+        import matplotlib.pyplot as plt\n+        import pickle\n+        from io import BytesIO\n+\n+        fig = plt.figure()\n+        ax1 = fig.add_subplot(211)\n+        ax2 = fig.add_subplot(212)\n+        time = [0, 1, 2, 3, 4]\n+        speed = [40000, 4300, 4500, 4700, 4800]\n+        acc = [10, 11, 12, 13, 14]\n+        ax1.plot(time, speed)\n+        ax1.set_ylabel('speed')\n+        ax2.plot(time, acc)\n+        ax2.set_ylabel('acc')\n+\n+        fig.align_labels()  # this was causing the pickling issue before\n+\n+        # Attempt to pickle the figure\n+        try:\n+            pickle_data = pickle.dumps(fig)\n+            assert isinstance(pickle_data, bytes)  # Ensure pickling is successful\n+        except Exception as e:\n+            assert False, f\"Pickling failed with exception: {e}\"\n     pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     fig = plt.figure()\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..115e6a6 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,73 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+def test_hexbin_mincnt_zero_with_C():\n+    fig, ax = plt.subplots()\n+    X = np.array([1, 2, 3])\n+    Y = np.array([1, 2, 3])\n+    C = np.array([1, 2, 3])\n+\n+    # Test with mincnt=0 and C provided\n+    hb = ax.hexbin(X, Y, C=C, mincnt=0)\n+    # Expect all hexagons with data to be plotted\n+    assert np.all(np.isfinite(hb.get_array()))\n+\n+    plt.close(fig)\n+\n+def test_hexbin_mincnt_with_C():\n+    fig, ax = plt.subplots()\n+    X = np.array([1, 2, 3, 4])\n+    Y = np.array([1, 2, 3, 4])\n+    C = np.array([1, 2, 1, 1])\n \n-def test_hexbin_log_clim():\n+    # Test with mincnt=1 and C provided\n+    hb = ax.hexbin(X, Y, C=C, reduce_C_function=np.sum, mincnt=1)\n+    # Expect all hexagons with at least one datum to be plotted\n+    assert len(hb.get_array()) == len(X)  # should reduce correctly with mincnt\n+\n+    plt.close(fig)\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..5c4c266 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,22 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_identity(fig_test, fig_ref):\n+    ax = fig_test.subplots()\n+\n+    # Creating contours for testing identity through set_paths\n+    cs = ax.contour([[0, 1], [1, 2]])\n+    paths = cs.get_paths()\n+\n+    # Set the same paths back and ensure they're unchanged\n+    cs.set_paths(paths)\n+    assert cs.get_paths() == paths\n+\n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib.figure import Figure\n+import numpy as np\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..bd605f9 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -661,7 +661,45 @@ class TestPlotting:\n         Plot().plot()\n         assert m.n_splits == 0\n \n-    def test_single_split_single_layer(self, long_df):\n+import pytest\n+import matplotlib as mpl\n+from seaborn import Plot\n+\n+class TestNominalScale:\n+\n+    def test_nominal_x_axis_tweaks(self):\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_xlim() == (-.5, 2.5)\n+        assert not any(x.get_visible() for x in ax1.xaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(x=lim).plot()._figure.axes[0]\n+        assert ax2.get_xlim() == lim\n+\n+    def test_nominal_y_axis_tweaks(self):\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_ylim() == (2.5, -.5)\n+        assert not any(y.get_visible() for y in ax1.yaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(y=lim).plot()._figure.axes[0]\n+        assert ax2.get_ylim() == lim\n+\n+    def test_nominal_gridlines_respected_with_theme(self):\n+        # Test with an explicit grid style to ensure gridlines can be shown\n+        with mpl.style.context({'axes.grid': True}):\n+            p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+            ax = p.plot()._figure.axes[0]\n+            # Check that gridlines are now visible\n+            assert any(x.get_visible() for x in ax.xaxis.get_gridlines())\n+\n+    def test_nominal_inversion_and_limits_override(self):\n+        # Explicit limits should override the default behavior\n+        p = Plot(x=[1, 2, 3], y=[\"c\", \"b\", \"a\"])\n+        ax = p.limit(y=(-2, 1)).plot()._figure.axes[0]\n+        assert ax.get_ylim() == (-2, 1)\n \n         m = MockMark()\n         p = Plot(long_df, x=\"f\", y=\"z\").add(m).plot()\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..a615208 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,21 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_none_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(None, __name__)\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n+\n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..dfd7ef4 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,26 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+import numpy as np\n+import pytest\n+from xarray import DataArray, Variable\n+\n+def test_setitem_does_not_coerce_values():\n+    # Test for the issue described: ensure objects with a `values` attribute are not coerced\n+    good_indexed, bad_indexed = DataArray([None], dims=\"dim_0\"), DataArray([None], dims=\"dim_0\")\n+\n+    class HasValues:\n+        values = 5\n+    \n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Check that the object itself is stored\n+    assert isinstance(good_indexed.values[0], set)  # should store set()\n+    assert isinstance(bad_indexed.values[0], HasValues)  # should store HasValues instance\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    # Ensure we can still retrieve the correct type\n+    assert not hasattr(bad_indexed.values[0], 'values') or bad_indexed.values[0].values == 5\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..ac6451d 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2107,7 +2107,17 @@ class TestDataset:\n \n         assert_identical(ds.coords['a'], expected_orig)\n \n-    def test_copy_with_data_errors(self):\n+    def test_copy_unicodes(self):\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+        ds_copy = ds.copy(deep=True)\n+\n+        # Assert that the original and copied dataset dtypes are the same\n+        assert ds.x.dtype == ds_copy.x.dtype\n+        assert ds.y.dtype == ds_copy.y.dtype\n+        assert ds.z.dtype == ds_copy.z.dtype\n         orig = create_test_data()\n         new_var1 = np.arange(orig['var1'].size).reshape(orig['var1'].shape)\n         with raises_regex(ValueError, 'Data must be dict-like'):\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..f871d02 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -600,6 +600,25 @@ class TestCombineAuto:\n         with pytest.raises(ValueError):\n             combine_by_coords(datasets, 'y')\n \n+    def test_combine_leaving_bystander_dimensions(self):\n+        # Check non-monotonic bystander dimension coord doesn't raise\n+        # ValueError on combine (https://github.com/pydata/xarray/issues/3150)\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+        \n     def test_combine_by_coords_no_concat(self):\n         objs = [Dataset({'x': 0}), Dataset({'y': 1})]\n         actual = combine_by_coords(objs)\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..16e38bb 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,6 +2309,21 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n+    def test_quantile_keep_attrs(self):\n+        # Test with keep_attrs=True should retain attributes\n+        da = DataArray([0, 1, 2, 3], dims=\"x\", attrs={'units':'K'})\n+        quantiles = da.quantile([0.25, 0.5, 0.75], dim=\"x\", keep_attrs=True)\n+        assert quantiles.attrs == da.attrs\n+\n+        single_quantile = da.quantile(0.5, dim=\"x\", keep_attrs=True)\n+        assert single_quantile.attrs == da.attrs\n+\n+        # Test with keep_attrs=False should not retain attributes\n+        quantiles_no_attrs = da.quantile([0.25, 0.5, 0.75], dim=\"x\", keep_attrs=False)\n+        assert quantiles_no_attrs.attrs == {}\n+\n+        single_quantile_no_attrs = da.quantile(0.5, dim=\"x\", keep_attrs=False)\n+        assert single_quantile_no_attrs.attrs == {}\n \n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..e716f8f 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,12 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        expected = xr.merge([ds, da])\n+        assert_identical(ds.merge(da), expected)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..65c5766 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,25 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_no_side_effect(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"value1\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"value2\"})\n+        merged_ds = xr.merge([ds1, ds2], combine_attrs='override')\n+        merged_ds.attrs[\"a\"] = \"new_value\"\n+        \n+        # Verify no side effects on original datasets\n+        assert ds1.attrs[\"a\"] == \"value1\"\n+        assert ds2.attrs[\"a\"] == \"value2\"\n+        assert merged_ds.attrs[\"a\"] == \"new_value\"\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..d4deba5 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1922,7 +1922,34 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+def test_where_attrs_preserved() -> None:\n+    # Initial DataArray with attributes\n+    data = xr.DataArray([1, 2, 3], dims=\"x\", attrs={\"attr1\": \"value1\", \"attr2\": \"value2\"})\n+    # Condition DataArray\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    \n+    # Resulting DataArray using xr.where\n+    result = xr.where(cond, data, 0, keep_attrs=True)\n+    \n+    # Expect the attributes to be preserved in the resulting DataArray\n+    expected = xr.DataArray([1, 0, 3], dims=\"x\", attrs={\"attr1\": \"value1\", \"attr2\": \"value2\"})\n+    \n+    # Assert that the result matches the expected DataArray\n+    assert_identical(expected, result)\n+\n+def test_where_dtype_preserved() -> None:\n+    # Initial DataArray with dtype int8\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+    data.attrs[\"attr_1\"] = \"test1\"\n+    data.attrs[\"attr_2\"] = \"test2\"\n+    \n+    # Resulting DataArray using xr.where\n+    result = xr.where(data == 1, 5, 0, keep_attrs=True)\n+    \n+    # Assert that dtype is preserved as int8\n+    assert result.dtype == np.int8\n+    # Assert that attributes are preserved\n+    assert result.attrs == data.attrs\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..13d8e0e 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,8 +13,30 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+import numpy as np\n \n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"dtype, unsigned_attr, expected_dtype\", [\n+    (np.dtype(\"i1\"), \"true\", np.dtype(\"u1\")),\n+    (np.dtype(\"i2\"), \"true\", np.dtype(\"u2\")),\n+    (np.dtype(\"i4\"), \"true\", np.dtype(\"u4\")),\n+    (np.dtype(\"i1\"), \"false\", np.dtype(\"i1\")),\n+    (np.dtype(\"u1\"), \"false\", np.dtype(\"i1\")),\n+    (np.dtype(\"u1\"), \"true\", np.dtype(\"u1\")),\n+])\n+def test_unsigned_signed_attribute_handling(dtype, unsigned_attr, expected_dtype):\n+    original_values = np.array([-1, 0, 1], dtype=dtype)\n+    encoded = xr.Variable((\"x\",), original_values, attrs={\"_Unsigned\": unsigned_attr})\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+\n+    assert decoded.dtype == expected_dtype\n+    if unsigned_attr == \"true\" and dtype.kind == \"i\":\n+        # When converting signed to unsigned, wrap negative values using dtype limits\n+        wrapped_values = original_values.astype(expected_dtype)\n+        assert np.array_equal(decoded.values, wrapped_values)\n+    else:\n+        # Normal values should remain unchanged\n+        assert np.array_equal(decoded.values, original_values)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..d6681fd 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1928,6 +1928,18 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+def test_where_with_scalar_and_keep_attrs() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # Test with scalar replacement and a DataArray condition\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..381ab8f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,14 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..e662578 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,6 +221,17 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        store = InaccessibleVariableDataStore()\n+        create_test_data().dump_to_store(store)\n+        ds = open_dataset(store)\n+        \n+        # Test that accessing .chunks doesn't load data\n+        with pytest.raises(UnexpectedDataAccess):\n+            ds.chunks\n+        with pytest.raises(UnexpectedDataAccess):\n+            ds['var1'].chunks\n+\n     def test_repr(self) -> None:\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..bbfebb6 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -27,6 +27,29 @@ pytestmark = [\n \n class TestDataArrayRolling:\n     @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    def test_rolling_iter_with_center(self, da, center, size) -> None:\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        assert len(rolling_obj.window_labels) == len(da[\"time\"])\n+        assert_identical(rolling_obj.window_labels, da[\"time\"])\n+\n+        for i, (label, window_da) in enumerate(rolling_obj):\n+            assert label == da[\"time\"].isel(time=i)\n+\n+            actual = rolling_obj_mean.isel(time=i)\n+            expected = window_da.mean(\"time\")\n+\n+            # Assert the nan positions and values\n+            assert_array_equal(actual.isnull(), expected.isnull())\n+            np.testing.assert_allclose(\n+                actual.values[np.logical_not(actual.isnull())],\n+                expected.values[np.logical_not(expected.isnull())],\n+                rtol=1e-6,\n+                atol=1e-6\n+            )\n     def test_rolling_iter(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         rolling_obj_mean = rolling_obj.mean()\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..df58865 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,36 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"int64\", \"float64\", \"bool\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_stack_int64_not_casted_to_int32():\n+    foo = xr.Dataset(coords={\"a\": np.array([0, 1, 2], dtype=\"int64\")})\n+    stacked = foo.stack(index=(\"a\",))\n+    assert stacked[\"a\"].values.dtype == np.int64\n+\n+def test_stack_dtype_preservation():\n+    foo = xr.Dataset(coords={\"a\": np.array([1, 2, 3], dtype=\"float64\")})\n+    stacked = foo.stack(index=(\"a\",))\n+    assert stacked[\"a\"].values.dtype == np.float64\n+\n+def test_stack_with_multiple_coords():\n+    foo = xr.Dataset(coords={\n+        \"x\": np.array([1, 2, 3], dtype=\"int32\"),\n+        \"y\": np.array([4.0, 5.0, 6.0], dtype=\"float32\")\n+    })\n+    stacked = foo.stack(index=(\"x\", \"y\"))\n+    assert stacked[\"x\"].values.dtype == np.int32\n+    assert stacked[\"y\"].values.dtype == np.float32\n \n     expected = pd.Index(dates)\n     actual = safe_cast_to_index(np.array(dates))\n     assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+    assert isinstance(actual, pd.Index)\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..887e896 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -494,6 +494,21 @@ def test_get_map_data() -> None:\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n \n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers.similar import Run\n+\n+def test_set_duplicate_lines_to_zero_with_no_issues() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        # Assuming SIMILAR3 and SIMILAR4 are files with duplicate code\n+        similar.Run([\"--duplicates=0\", \"SIMILAR3.py\", \"SIMILAR4.py\"])\n+    # Assert that the exit code indicates successful execution\n+    assert ex.value.code == 0\n+    # Assert that no output is generated, meaning no duplicates are found\n+    assert output.getvalue() == \"\"\n+\n     assert len(expected_linelists) == len(data)\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n@@ -501,4 +516,4 @@ def test_get_map_data() -> None:\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..8b59cc5 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,30 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint import Run\n+from pytest import CaptureFixture\n+from pylint.testutils import EMPTY_MODULE\n+import pytest\n+import sys\n+import os\n+\n+def test_short_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Test that '-v' does not require any argument and behaves like '--verbose'.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    # Expecting verbose output (should include configuration file being used)\n+    assert \"Using config file\" in output.err\n+    assert \"usage: pylint [options]\" not in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Test that '--verbose' lists verbose output information.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..be5b580 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,46 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_path_recursive_with_pyproject_toml(self) -> None:\n+        \"\"\"Tests that `--recursive=y` respects `ignore-paths` specified in pyproject.toml.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Simulate a pyproject.toml ignore-paths effect\n+                ignore_paths = [\"^ignored_subdirectory/.*\"]\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        f\"--ignore-paths={ignore_paths[0]}\",\n+                    ],\n+                    code=0,\n+                )\n+\n+    def test_ignore_path_recursive_explicit_path(self) -> None:\n+        \"\"\"Tests that `--recursive=y` respects explicit ignore-paths from command line.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..0dc0c0d 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,9 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+from _pytest.logging import caplog_records_key\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -171,8 +174,35 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     # This reaches into private API, don't use this type of thing in real tests!\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n+def test_caplog_clear_consistency(caplog) -> None:\n+    \"\"\"\n+    Test to verify that caplog.get_records() remains in sync with caplog.records\n+    after a caplog.clear() call.\n+    \"\"\"\n+    def verify_consistency() -> None:\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    verify_consistency()\n+    logging.warning(\"test\")\n+    verify_consistency()\n+    caplog.clear()\n+    verify_consistency()  # Should not fail after the issue is fixed\n+\n+def test_caplog_get_records_after_multiple_clear(caplog) -> None:\n+    \"\"\"\n+    Test to verify that calling caplog.clear() multiple times does not affect the\n+    functionality of caplog.get_records().\n+    \"\"\"\n+    logging.info(\"log entry 1\")\n+    assert len(caplog.get_records(\"call\")) == 1\n+    caplog.clear()\n+    assert len(caplog.get_records(\"call\")) == 0\n \n-def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n+    logging.info(\"log entry 2\")\n+    assert len(caplog.get_records(\"call\")) == 1\n+    caplog.clear()\n+    caplog.clear()  # Clearing multiple times should still maintain sync\n+    assert len(caplog.get_records(\"call\")) == 0\n     pytester.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..f1c64c5 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1273,8 +1273,31 @@ def test_pdb_teardown_skipped(\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+def test_pdb_teardown_skipped_for_class_level_skip_with_unittest(pytester: Pytester) -> None:\n+    \"\"\"Test for ensuring tearDown is skipped with class-level unittest.skip and --pdb.\"\"\"\n+    tracked = []\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n \n-def test_async_support(pytester: Pytester) -> None:\n+        @unittest.skip(\"skipped for reasons\")\n+        class MyTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_1(self):\n+                pass\n+        \"\"\"\n+    )\n+    pytester.monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n     pytest.importorskip(\"unittest.async_case\")\n \n     pytester.copy_example(\"unittest/test_unittest_asyncio.py\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..4860ead 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,8 +1051,23 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+import pytest\n+import sys\n+import os\n \n-@contextlib.contextmanager\n+def test_capfd_sys_stdout_mode(capfd):\n+    with capfd.disabled():\n+        assert \"b\" not in sys.stdout.mode\n+\n+def test_encodedfile_write_bytes():\n+    from _pytest.capture import EncodedFile\n+    import io\n+    buffer = io.StringIO()\n+    encoded_file = EncodedFile(buffer, 'utf-8')\n+    try:\n+        encoded_file.write(b\"test\")  # This should raise a TypeError\n+    except TypeError as e:\n+        assert str(e) == \"write() argument must be str, not bytes\"\n def saved_fd(fd):\n     new_fd = os.dup(fd)\n     try:\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..b7f9516 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,6 +178,25 @@ class TestMockDecoration:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n+    def test_patch_numpy_array(self, testdir):\n+        pytest.importorskip(\"numpy\")\n+        testdir.makepyfile(\n+            \"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+            import pytest\n+\n+            @patch('os.path.abspath', new=np.array([-5.5, 3.0]))\n+            def test_foo():\n+                assert True\n+\n+            def test_non_patch():\n+                assert True\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=2)\n+\n     def test_mock(self, testdir):\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..9ef3038 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -119,15 +119,24 @@ class TestPaste(object):\n \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n-\n-    def test_create_new_paste(self, pastebin, mocked_urlopen):\n+    def test_create_new_paste_with_correct_lexer(self, pastebin, mocked_urlopen):\n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        # Verify lexer is set to 'text'\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=full-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n+        lexer = \"text\"\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..16a27e9 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,23 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+        import pytest\n+\n+        @pytest.mark.parametrize(\"arg0\", [\".[\", \"..[\", \"...[\"])\n+        def testmethod_special_chars(self, arg0):\n+            pass\n+        \n+        assert items[2].getmodpath() == \"TestY.testmethod_one\"\n+        items_special, reprec_special = testdir.inline_genitems(p.dirpath())\n+        \n+        # Verify that the `.[]` patterns are preserved in the test names and module paths\n+        assert len(items_special) == 6  # Total items should include the new parametrize cases\n+        assert items_special[3].name == \"testmethod_special_chars[.[\"\n+        assert items_special[3].getmodpath() == \"TestY.testmethod_special_chars[.[\"\n+        assert items_special[4].name == \"testmethod_special_chars[..[\"\n+        assert items_special[4].getmodpath() == \"TestY.testmethod_special_chars[..[\"\n+        assert items_special[5].name == \"testmethod_special_chars[...[\"\n+        assert items_special[5].getmodpath() == \"TestY.testmethod_special_chars[...[\"\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..e646c5a 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,6 +607,31 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_xfail_run_with_skip_mark(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n     def test_skip_with_reason(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..cf179fa 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -5,6 +6,7 @@ from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n+from _pytest.pytester import Testdir\n \n \n class TestEvaluation:\n@@ -219,6 +221,31 @@ class TestXFail:\n         assert str(callreport.longrepr) == \"[XPASS(strict)] nope\"\n         assert not hasattr(callreport, \"wasxfail\")\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_xfail_run_anyway(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..4a79363 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,8 +513,27 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n-\n-    def test_capfdbinary(self, testdir):\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n+\n+    # Additional test case to cover both stdout and stderr\n+    def test_cafd_preserves_newlines_stdout_stderr(self, capfd):\n+        print(\"stdout\", end=\"\\r\")\n+        print(\"stderr\", end=\"\\r\", file=sys.stderr)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(\"\\r\")\n+        assert err.endswith(\"\\r\")\n+\n+    # Additional test case with mixed newline characters\n+    def test_cafd_mixed_newlines(self, capfd):\n+        print(\"line1\", end=\"\\r\\n\")\n+        print(\"line2\", end=\"\\n\")\n+        out, err = capfd.readouterr()\n+        assert out == \"line1\\r\\nline2\\n\"\n+        assert err == \"\"\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n             def test_hello(capfdbinary):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..172b672 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -49,8 +50,23 @@ def test_change_level_undo(testdir):\n     result.stdout.fnmatch_lines([\"*log from test1*\", \"*2 failed in *\"])\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n+def test_log_level_reset_after_test(testdir):\n+    \"\"\"Ensure that the log level set in one test does not persist to another test\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test_log_level_set(caplog):\n+            caplog.set_level(logging.ERROR)\n+            assert caplog.handler.level == logging.ERROR\n \n-def test_with_statement(caplog):\n+        def test_log_level_default(caplog):\n+            # Ensure the log level is reset to the default (NOTSET is 0)\n+            assert caplog.handler.level == 0\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..d1b9990 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1178,6 +1179,32 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"Ensure symlinked directories are properly collected.\"\"\"\n+    dir = pytester.mkdir(\"real_dir\")\n+    dir.joinpath(\"test_real.py\").write_text(\"def test_real(): pass\", \"utf-8\")\n+    \n+    # Creating a symlink to the directory\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    \n+    result = pytester.runpytest()\n+    # Expect 2 tests to pass: one from the real directory and one from the symlink\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_symlink_file(pytester: Pytester) -> None:\n+    \"\"\"Ensure symlinked test files are properly collected.\"\"\"\n+    dir = pytester.mkdir(\"real_file_dir\")\n+    test_file = dir.joinpath(\"test_file.py\")\n+    test_file.write_text(\"def test_file(): pass\", \"utf-8\")\n+    \n+    symlink_file = pytester.path.joinpath(\"symlink_test_file.py\")\n+    symlink_file.symlink_to(test_file)\n+    \n+    result = pytester.runpytest()\n+    # Expect 2 tests to pass: one each from the real file and the symlink\n+    result.assert_outcomes(passed=2)\n+\n+\n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..34a77d5 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -302,7 +302,32 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec.assertoutcome(passed=3)\n \n \n-def test_setup_class(pytester: Pytester) -> None:\n+def test_fixtures_unittest_setUpClass_issue_resolution(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+            def test_func1(self):\n+                pass\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+        \"\"\"\n+    )\n+    # Running without '-v', the fixture should not be displayed.\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n+    \n+    # Running with '-v', the fixture should be displayed.\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\n+        \"*unittest_setUpClass_fixture_MyTestCase [class scope]*\"\n+    ])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..7fe375a 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,32 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    from sklearn.linear_model import RidgeClassifierCV\n+    from sklearn.utils.testing import assert_equal\n+    import numpy as np\n \n-def test_ridgecv_sample_weight():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True, cv=None)\n+\n+    # with len(y.shape) == 1\n+    y = rng.randint(0, 2, n_samples) * 2 - 1  # create labels -1 and 1\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_alphas))\n+\n+    # with len(y.shape) == 2\n+    n_responses = 3\n+    y_multi = rng.randint(0, 2, (n_samples, n_responses)) * 2 - 1\n+    r.fit(x, y_multi)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..82fe97b 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,20 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+from sklearn.metrics import fowlkes_mallows_score\n+from numpy.testing import assert_all_finite\n+import numpy as np\n+\n+def test_int_overflow_fowlkes_mallows_score():\n+    # This tests the overflow scenario in fowlkes_mallows_score\n+    x = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 +\n+                 204) + [4] * (814 + 39) + [5] * (316 + 20))\n+    y = np.array([0] * 52632 + [1] * 2529 + [0] * 14660 + [1] * 793 +\n+                 [0] * 3271 + [1] * 204 + [0] * 814 + [1] * 39 + [0] * 316 +\n+                 [1] * 20)\n+\n+    # Ensure no overflow warning occurs and result is finite\n+    assert_all_finite(fowlkes_mallows_score(x, y))\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..2abe362 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -559,7 +559,24 @@ def test_feature_names():\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n \n-def test_vectorizer_max_features():\n+def test_countvectorizer_with_custom_vocabulary_get_feature_names():\n+    # Vocabulary provided upfront\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocabulary)\n+\n+    # Should not raise NotFittedError\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(feature_names, vocabulary)\n+\n+    # Make sure transform does not raise an error\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = cv.transform(corpus)\n+    assert_equal(X.shape, (4, 9))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..f86713e 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,8 +21,10 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n-\n from sklearn.exceptions import ConvergenceWarning\n+from sklearn.metrics import make_scorer, log_loss\n+from sklearn.utils.extmath import softmax\n+from sklearn.linear_model import _logistic\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n     LogisticRegression,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..40be730 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -158,14 +158,36 @@ def test_clone_sparse_matrices():\n     sparse_matrix_classes = [\n         getattr(sp, name)\n         for name in dir(sp) if name.endswith('_matrix')]\n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+from pytest import raises\n \n+def test_clone_with_estimator_type_as_parameter():\n+    # Attempting to clone an estimator where a parameter is an estimator class\n+    try:\n+        cloned_object = clone(StandardScaler(with_mean=StandardScaler))\n+        assert cloned_object.with_mean is StandardScaler\n+    except TypeError as e:\n+        # The expected behavior before the fix would be a TypeError\n+        assert \"it does not seem to be a scikit-learn estimator\" in str(e), \"Unexpected exception message\"\n     for cls in sparse_matrix_classes:\n         sparse_matrix = cls(np.eye(5))\n         clf = MyEstimator(empty=sparse_matrix)\n         clf_cloned = clone(clf)\n         assert clf.empty.__class__ is clf_cloned.empty.__class__\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+from pytest import raises\n \n+def test_clone_with_estimator_type_as_parameter():\n+    # Attempting to clone an estimator where a parameter is an estimator class\n+    try:\n+        cloned_object = clone(StandardScaler(with_mean=StandardScaler))\n+        assert cloned_object.with_mean is StandardScaler\n+    except TypeError as e:\n+        # The expected behavior before the fix would be a TypeError\n+        assert \"it does not seem to be a scikit-learn estimator\" in str(e), \"Unexpected exception message\"\n \n def test_repr():\n     # Smoke test the repr of the base estimator.\n@@ -176,7 +198,18 @@ def test_repr():\n         repr(test),\n         \"T(a=K(c=None, d=None), b=K(c=None, d=None))\"\n     )\n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+from pytest import raises\n \n+def test_clone_with_estimator_type_as_parameter():\n+    # Attempting to clone an estimator where a parameter is an estimator class\n+    try:\n+        cloned_object = clone(StandardScaler(with_mean=StandardScaler))\n+        assert cloned_object.with_mean is StandardScaler\n+    except TypeError as e:\n+        # The expected behavior before the fix would be a TypeError\n+        assert \"it does not seem to be a scikit-learn estimator\" in str(e), \"Unexpected exception message\"\n     some_est = T(a=[\"long_params\"] * 1000)\n     assert_equal(len(repr(some_est)), 415)\n \n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..157a7d4 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,6 +5,28 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+@pytest.mark.parametrize('init_copy_X, fit_copy_X', [(True, None), (False, None), (True, True), (False, False), (True, False), (False, True)])\n+def test_lasso_larsic_combined_copyX_behavior(init_copy_X, fit_copy_X):\n+    \"\"\"\n+    Test that the fit method respects the copy_X parameter provided during\n+    initialization unless an explicit value is passed to fit.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    \n+    # Call fit with potentially overriding copy_X\n+    if fit_copy_X is not None:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+        expected_behavior = fit_copy_X\n+    else:\n+        lasso_lars.fit(X, y)\n+        expected_behavior = init_copy_X\n+    \n+    assert expected_behavior == np.array_equal(X, X_copy)\n+\n import pytest\n \n from sklearn.model_selection import train_test_split\n@@ -19,8 +41,8 @@ from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n from sklearn.linear_model.least_angle import _lars_path_residues\n-\n-diabetes = datasets.load_diabetes()\n+from sklearn.linear_model import LassoLarsIC\n+import numpy as np\n X, y = diabetes.data, diabetes.target\n \n # TODO: use another dataset that has multiple drops\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..ef3d416 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,8 +493,23 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n-\n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+def test_stratified_kfold_shuffle_behavior():\n+    # Ensure that shuffling within classes works differently with different random states\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n+    test_sets_1 = [test for _, test in kf1.split(X, y)]\n+    test_sets_2 = [test for _, test in kf2.split(X, y)]\n+    \n+    # Check that the order of splits is different for different random states\n+    assert test_sets_1 != test_sets_2, \"Shuffled splits should differ for different random states\"\n+\n+    # Ensure that enable shuffle changes the indices for the same random state\n+    kf_no_shuffle = StratifiedKFold(n_splits=5, shuffle=False, random_state=0)\n+    test_sets_no_shuffle = [test for _, test in kf_no_shuffle.split(X, y)]\n+\n+    assert test_sets_1 != test_sets_no_shuffle, \"Shuffled and non-shuffled splits should differ\"\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..d460ff6 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n@@ -202,6 +202,11 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     Xt = est.fit_transform(X)\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n \n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..8edbcb5 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,10 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+import numpy as np\n+from sklearn.mixture import GaussianMixture\n+from numpy.testing import assert_array_equal\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..b0e6aaf 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,8 +1057,36 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n-\n-def test_make_pipeline_memory():\n+def test_pipeline_len():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_regression\n+    from sklearn.svm import SVC\n+    \n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+    assert len(pipe) == 2, \"The pipeline length should be 2.\"\n+\n+def test_pipeline_index_and_slice():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_regression\n+    from sklearn.svm import SVC\n+\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+    # Test indexing\n+    assert isinstance(pipe[0], SelectKBest), \"The first element should be SelectKBest.\"\n+    assert isinstance(pipe[1], SVC), \"The second element should be SVC.\"\n+\n+    # Test slicing\n+    sub_pipe = pipe[:1]\n+    assert len(sub_pipe) == 1, \"The sub-pipeline length should be 1.\"\n+    assert isinstance(sub_pipe[0], SelectKBest), \"The only element in the sub-pipeline should be SelectKBest.\"\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1098,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..6dcb42a 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,6 +396,22 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+    # Test case for a tree with only one feature\n+    X_single_feature = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single_feature = [-1, -1, -1, 1, 1, 1]\n+    clf_single = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single.fit(X_single_feature, y_single_feature)\n+\n+    expected_single_feature_report = dedent(\"\"\"\n+    |--- feature_0 <= 0.00\n+    |   |--- class: -1\n+    |--- feature_0 >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf_single) == expected_single_feature_report\n+    assert export_text(clf_single, feature_names=['single_feature']) == expected_single_feature_report\n+\n \n def test_plot_tree_entropy(pyplot):\n     # mostly smoke tests\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..2efb6db 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1553,8 +1553,39 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.l1_ratio_.shape == (n_classes,)\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_index_error(penalty, multi_class):\n+    # Test to ensure no IndexError is thrown when refit=False\n+\n+    n_samples, n_features = 1000, 3\n+    X = np.random.normal(size=(n_samples, n_features))\n+    beta = np.random.normal(size=n_features)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+    lrcv = LogisticRegressionCV(\n+        penalty=penalty,\n+        solver='saga',\n+        tol=1e-2,\n+        refit=False,\n+        l1_ratios=l1_ratios,\n+        multi_class=multi_class,\n+        random_state=29\n+    )\n+    \n+    try:\n+        lrcv.fit(X, y)\n+        error_thrown = False\n+    except IndexError:  # Catch the specific error the issue is about\n+        error_thrown = True\n+\n+    assert not error_thrown, \"IndexError was thrown when it should not have been.\"\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..90cada3 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -24,10 +24,20 @@ def test_get_deps_info():\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n \n+def test_get_deps_info_with_joblib():\n+    deps_info = _get_deps_info()\n+    \n+    assert 'joblib' in deps_info, \"joblib should be listed in the dependencies info\"\n+\n+def test_show_versions_includes_joblib(capsys):\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'joblib' in out, \"joblib should be mentioned in the show_versions output when sklearn version > 0.20\"\n+\n \n def test_show_versions_with_blas(capsys):\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..632a6c9 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,33 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+from sklearn.datasets import make_blobs\n+from sklearn.cluster import OPTICS\n \n-def test_extract_xi():\n+def test_optics_float_min_samples():\n+    # Test for the fix of handling min_samples as a float\n+    X, _ = make_blobs(n_samples=100, centers=3, random_state=42)\n+\n+    # Test with min_samples as a float\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.1).fit(X)\n+    assert clust is not None  # Check that the object is created successfully\n+\n+    # Test with min_samples as exactly 1.0\n+    clust = OPTICS(min_samples=1.0, min_cluster_size=1.0).fit(X)\n+    assert clust is not None  # Check that the object is created successfully\n+\n+    # Edge case where min_samples would round to exactly 2\n+    clust = OPTICS(min_samples=2.0/100, min_cluster_size=2.0/100).fit(X)\n+    assert clust is not None  # Check that the object is created successfully\n+\n+    # Further edge case, check when min_samples is very small\n+    clust = OPTICS(min_samples=0.05, min_cluster_size=0.05).fit(X)\n+    assert clust is not None  # Check that the object is created successfully\n+\n+    # Check consistency of labels by fixing random states\n+    clust1 = OPTICS(min_samples=0.1, min_cluster_size=0.1).fit(X)\n+    clust2 = OPTICS(min_samples=0.1, min_cluster_size=0.1).fit(X)\n+    assert_array_equal(clust1.labels_, clust2.labels_)\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..2b13f42 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,23 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+from scipy import sparse\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the issue with empty support_vectors_ (issue #14893)\n+    X_train = sparse.csr_matrix([\n+        [0, 1, 0, 0],\n+        [0, 0, 0, 1],\n+        [0, 0, 1, 0],\n+        [0, 0, 0, 1]\n+    ])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size, \"Support vectors should be empty\"\n+    assert not model.dual_coef_.data.size, \"Dual coefficients should be empty\"\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..f582683 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -87,6 +87,21 @@ def test_strip_accents():\n     expected = 'iiiinooooouuuuy'\n     assert strip_accents_unicode(a) == expected\n \n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaeresis as separate combining character\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # various combining marks\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaeresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n     # check some arabic\n     a = '\\u0625'  # alef with a hamza below: \u0625\n     expected = '\\u0627'  # simple alef: \u0627\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_feature_select.py b/sklearn/feature_selection/tests/test_feature_select.py\nindex 1bc044a..4f1a90c 100644\n--- a/sklearn/feature_selection/tests/test_feature_select.py\n+++ b/sklearn/feature_selection/tests/test_feature_select.py\n@@ -943,4 +943,32 @@ def test_mutual_info_regression():\n     support = univariate_filter.get_support()\n     gtruth = np.zeros(10)\n     gtruth[:2] = 1\n-    assert_array_equal(support, gtruth)\n+\n+def test_dataframe_output_preserve_dtype():\n+    \"\"\"Test that the dtypes of the input DataFrame columns are preserved in the output.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    from sklearn.feature_selection import SelectKBest, chi2\n+    from sklearn.datasets import load_iris\n+    import numpy as np\n+\n+    # Load iris dataset\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    \n+    # Convert the datatypes\n+    X = X.astype({\n+        \"sepal length (cm)\": np.float32,\n+        \"sepal width (cm)\": np.float64,\n+        \"petal length (cm)\": np.float16,\n+    })\n+\n+    # Add a categorical column\n+    X[\"species\"] = y.astype(\"category\")\n+\n+    # Use SelectKBest, with the set_output option to pandas\n+    selector = SelectKBest(chi2, k=2).set_output(transform=\"pandas\")\n+    X_out = selector.fit_transform(X, y)\n+\n+    # Ensure that the resulting DataFrame has the same dtype for each column as input\n+    for column_name, output_dtype in X_out.dtypes.items():\n+        assert output_dtype == X.dtypes[column_name]\n+    assert_array_equal(support, gtruth)\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..72e63f2 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1511,7 +1511,10 @@ def test_most_frequent(expected, array, dtype, extra_value, n_repeat):\n )\n def test_iterative_imputer_keep_empty_features(initial_strategy):\n     \"\"\"Check the behaviour of the iterative imputer with different initial strategy\n-    and keeping empty features (i.e. features containing only missing values).\n+import pytest\n+import numpy as np\n+from sklearn.impute import IterativeImputer\n+from numpy.testing import assert_array_equal, assert_allclose\n     \"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n \n",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..e89bcda 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,28 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    assert new_score < initial_score\n+\n+def test_sequential_feature_selector_with_iterable_splits():\n+    \"\"\"Check that no exception is raised when SequentialFeatureSelector \n+    is provided with an iterable of splits.\n+    \n+    This is a non-regression test for the issue reported with passing\n+    splits as cv parameter.\n+    \"\"\"\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+    from sklearn.neighbors import KNeighborsClassifier\n+    from sklearn.model_selection import LeaveOneGroupOut\n+    import numpy as np\n+\n+    X, y = make_classification(random_state=0)\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2 :] = 1\n+\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    knc = KNeighborsClassifier(n_neighbors=5)\n+    sfs = SequentialFeatureSelector(knc, n_features_to_select=5, cv=splits)\n+    sfs.fit(X, y)\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..b0afc86 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -20,7 +20,10 @@ from sklearn.compose import (\n     make_column_selector,\n )\n from sklearn.exceptions import NotFittedError\n-from sklearn.preprocessing import FunctionTransformer\n+from sklearn.feature_selection import VarianceThreshold\n+import pytest\n+import pandas as pd\n+import numpy as np\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n \n \n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..49d0716 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,26 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # Testing that KMeans results are consistent across different n_jobs settings\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(1000, 10))\n+\n+    # Test with n_jobs=1\n+    result_1 = KMeans(n_clusters=5, random_state=0, n_jobs=1).fit(X).labels_\n+\n+    # Test with n_jobs=2\n+    result_2 = KMeans(n_clusters=5, random_state=0, n_jobs=2).fit(X).labels_\n+\n+    # Test with n_jobs=3\n+    result_3 = KMeans(n_clusters=5, random_state=0, n_jobs=3).fit(X).labels_\n+\n+    # Test with n_jobs=4\n+    result_4 = KMeans(n_clusters=5, random_state=0, n_jobs=4).fit(X).labels_\n+\n+    assert_array_equal(result_1, result_2)\n+    assert_array_equal(result_1, result_3)\n+    assert_array_equal(result_1, result_4)\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..9582582 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,8 +251,39 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n-\n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_with_indent(literal_inc_path):\n+    # Using prepend to add an indented line\n+    prepend_line = '      <plugin>'\n+    options = {\n+        'lines': '18-24',\n+        'prepend': prepend_line\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"      <plugin>\\n\"\n+                       \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                       \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                       \"        <version>2.15.0</version>\\n\"\n+                       \"        <configuration>\\n\"\n+                       \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+                       \"        </configuration>\\n\")\n+\n+def test_LiteralIncludeReader_prepend_and_dedent(literal_inc_path):\n+    # Testing prepend and dedent together to see if it affects indentation\n+    prepend_line = '      </plugin>'\n+    options = {\n+        'lines': '18-23',\n+        'prepend': prepend_line,\n+        'dedent': 2\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"  </plugin>\\n\"\n+                       \"  <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                       \"  <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                       \"  <version>2.15.0</version>\\n\"\n+                       \"  <configuration>\\n\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n     # tab-width: 4\n     options = {'tab-width': 4, 'pyobject': 'Qux'}\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..8c1cb65 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,18 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_no_return_type_for_class_with_autodoc_typehints_description(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: sample_package.Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert 'class sample_package.Square' in context\n+    assert 'Return type:' not in context\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..d754f25 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -8,6 +9,7 @@ from subprocess import PIPE, CalledProcessError\n \n import pytest\n \n+from sphinx.builders.gettext import Catalog, MsgOrigin\n from sphinx.util.osutil import cd\n \n \n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..f20456d 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -335,9 +335,13 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][0][1],\n                 ([list_item, compact_paragraph, reference, \"quux\"],\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n+                 [list_item, compact_paragraph, reference, \"Indices\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n \n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n+    assert_node(toctree[1][0][0][1][0][0], reference, refuri=\"genindex\")\n+    assert_node(toctree[1][0][0][1][1][0], reference, refuri=\"modindex\")\n+    assert_node(toctree[1][0][0][1][2][0], reference, refuri=\"search\")\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n     assert_node(toctree[1][0][1][2][0][0], reference, refuri=\"foo#foo-2\", secnumber=[1, 3])\n@@ -345,4 +349,4 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n \n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..bbfce64 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -147,6 +147,33 @@ def test_glossary(app):\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n+    # Additional test for case sensitivity\n+    text_case = (\".. glossary::\\n\"\n+                 \"\\n\"\n+                 \"   MySQL\\n\"\n+                 \"       Description for MySQL\\n\"\n+                 \"\\n\"\n+                 \"   mysql\\n\"\n+                 \"       Description for mysql\\n\")\n+\n+    doctree_case = restructuredtext.parse(app, text_case)\n+    assert_node(doctree_case, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree_case[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree_case[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+\n+    objects_case = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects_case\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects_case\n+\n \n def test_glossary_warning(app, status, warning):\n     # empty line between terms\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..494912b 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,16 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+def test_signature_from_str_positional_only_with_defaults():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..d702264 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -10,6 +11,7 @@\n \n import abc\n import sys\n+from typing import TypeVar, Generic\n from importlib import import_module\n \n import pytest\n@@ -49,6 +51,16 @@ def test_MockObject():\n     assert SubClass.__doc__ == \"docstring of SubClass\"\n     assert isinstance(obj, SubClass)\n     assert obj.method() == \"string\"\n+\n+    # New test case for generic-typed class\n+    T = TypeVar('T')\n+\n+    class GenericSubClass(Generic[T], mock.SomeClass):\n+        \"\"\"docstring of GenericSubClass\"\"\"\n+\n+    generic_obj = GenericSubClass()\n+    assert GenericSubClass.__doc__ == \"docstring of GenericSubClass\"\n+    assert isinstance(generic_obj, GenericSubClass)\n     assert isinstance(obj.other_method(), SubClass)\n \n \n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..3f5ac82 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -12,7 +13,7 @@\n import sys\n from collections import namedtuple\n from unittest import TestCase, mock\n-\n+from sphinx.testing.util import simple_decorator\n from sphinx.application import Sphinx\n from sphinx.ext.napoleon import _process_docstring, _skip_member, Config, setup\n \n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..e992e6e 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -13,9 +13,20 @@ import re\n from unittest import mock\n import pytest\n \n-\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n-def test_defaults(app, status, warning):\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # Check for valid local file\n+    assert \"conf.py\" in content\n+    assert \"local\" in content.splitlines()[0]\n+    # looking for invalid local file should fail\n+    assert \"[broken] path/to/notfound\" in content\n+    assert len(content.splitlines()) >= 1\n     app.builder.build_all()\n \n     assert (app.outdir / 'output.txt').exists()\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..86d024c 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -59,4 +60,36 @@ def test_private_field_and_private_members(app):\n         '',\n         '   :meta private:',\n         '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_specific_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _specific_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   This is a specific private function docstring.',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_no_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n     ]\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..cd9ed87 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1285,7 +1285,40 @@ def test_image_glob_intl_using_figure_language_filename(app):\n     assert_node(doctree[0][3][0], nodes.image, uri='subdir/svgimg.*',\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n-\n+from babel.messages.catalog import Catalog\n+import pytest\n+import os\n+from sphinx import locale\n+from sphinx.util import i18n\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_translation_da(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # Clear translators cache\n+        locale.translators.clear()\n+\n+        # Prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n \n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..bc7f915 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,34 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import sys\n+import pytest\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases_extended',\n+                    confoverrides={\n+                        'autodoc_typehints': 'description',\n+                        'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}\n+                    })\n+def test_autodoc_typehints_description_and_type_aliases_extended(app):\n+    (app.srcdir / 'types.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    context = (app.outdir / 'types.txt').read_text()\n+    assert ('types.sphinx_doc(data)\\\\n'\n+            '\\\\n'\n+            '   Does it work.\\\\n'\n+            '\\\\n'\n+            '   Parameters:\\\\n'\n+            '      * **data** (*types.JSONObject*) --\\\\n'\n+            '         Does it args.\\\\n'\n+            '\\\\n'\n+            '   Returns\\\\n'\n+            '      Does it work in return.\\\\n'\n+            '\\\\n'\n+            '   Return type\\\\n'\n+            '      types.JSONObject\\\\n' in context)\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..d44e9ad 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,22 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n-\n-def test_getslots():\n+def test_object_description_enum_function_signature():\n+    # Define a simple Enum\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+    \n+    # A function using the Enum as a default value\n+    def func(e: MyEnum = MyEnum.ValueA):\n+        pass\n+    \n+    # Use inspect or related functionality to extract signature\n+    signature = inspect.signature(func)\n+    # Convert the signature to a string\n+    signature_str = str(signature)\n+    # Check if the signature string is rendered correctly\n+    assert signature_str == \"(e: MyEnum = MyEnum.ValueA)\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..c6132fe 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -17,7 +17,7 @@ from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n \n-warnfile = StringIO()\n+from os import path\n \n \n def setup_module():\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..778edbe 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -809,6 +809,38 @@ def test_pyattribute(app):\n     assert 'Class.attr' in domain.objects\n     assert domain.objects['Class.attr'] == ('index', 'Class.attr', 'attribute', False)\n \n+def test_pyproperty_type_annotation_crossref(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:class:: Rectangle\\n\"\n+            \"\\n\"\n+            \"      .. py:attribute:: start\\n\"\n+            \"         :type: Point\\n\"\n+            \"\\n\"\n+            \"      .. py:property:: end\\n\"\n+            \"         :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree[1][1][1][0][1][1], pending_xref, **{\"py:class\": \"Point\"})\n+    assert_node(doctree[1][1][3][1][1], pending_xref, **{\"py:class\": \"Point\"})\n+    assert_node(doctree[2][1][1][0][1][1], pending_xref, **{\"py:class\": \"Point\"})\n+    assert_node(doctree[2][1][3][1][1], pending_xref, **{\"py:class\": \"Point\"})\n+\n+    assert 'Square.start' in domain.objects\n+    assert domain.objects['Square.start'] == ('index', 'Square.start', 'attribute', False)\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n+    assert 'Rectangle.start' in domain.objects\n+    assert domain.objects['Rectangle.start'] == ('index', 'Rectangle.start', 'attribute', False)\n+    assert 'Rectangle.end' in domain.objects\n+    assert domain.objects['Rectangle.end'] == ('index', 'Rectangle.end', 'property', False)\n \n def test_pyproperty(app):\n     text = (\".. py:class:: Class\\n\"\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..9b04959 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -754,9 +754,9 @@ def test_pymethod_options(app):\n     assert 'Class.meth4' in domain.objects\n     assert domain.objects['Class.meth4'] == ('index', 'Class.meth4', 'method', False)\n \n-    # :property:\n+    # :property: - updated test case\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..07eed6c 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,38 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_issue_point_distance_variants():\n+    # Both points in 3D\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point3D(4, 6, 3)\n+    assert p1.distance(p2) == sqrt((1-4)**2 + (0-6)**2 + (2-3)**2)\n+\n+    # Mixed dimensions\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(1, 0)\n+    assert p1.distance(p2) == sqrt(4)\n+\n+    # Negative coordinates\n+    p1 = Point3D(-1, -2, -3)\n+    p2 = Point3D(-4, -5, -6)\n+    assert p1.distance(p2) == sqrt(27)\n+\n+    # Edge case: Points in different dimensions should raise an exception or handle as per the implementation\n+    try:\n+        p1 = Point3D(1, 0, 2)\n+        p2 = Point(1, 0, 3, 4)  # 4D point\n+        distance = p1.distance(p2)  # This may raise an error.\n+    except Exception as e:\n+        assert isinstance(e, ValueError)\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..a2f51f1 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,22 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    assert f(f(2)).evalf() == Float(16)\n+\n+def test_composed_functions_evalf():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    # Test composition of two functions\n+    assert f(g(2)).evalf() == Float(16)\n+    # Test deeper nesting\n+    assert f(f(g(2))).evalf() == Float(256)\n+    # Test composition in reverse order\n+    assert g(f(2)).evalf() == Float(8)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..b45f7dc 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -85,6 +85,20 @@ def test_Identity():\n     assert In.conjugate() == In\n \n def test_Identity_doit():\n+    # Test the total sum of elements of Identity Matrix should be 'n'.\n+    from sympy import MatrixSymbol, Identity, Sum, symbols\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+    \n+    # This computes the sum of all elements in the Identity matrix\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n, f\"Expected sum {n}, got {total_sum}\"\n+\n+    # The test provided checks that with n = 3, the sum should be 3.\n+    n_val = 3\n+    In_fixed = Identity(n_val)\n+    total_sum_fixed = Sum(Sum(In_fixed[i, j], (i, 0, n_val-1)), (j, 0, n_val-1)).doit()\n+    assert total_sum_fixed == n_val, f\"Expected sum {n_val}, got {total_sum_fixed}\"\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..1059e16 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -335,6 +335,21 @@ def test_args():\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n         Permutation(((0, ), [1]))\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n+    \n+    # Test for non-disjoint cycles example from the issue\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [0, 2]]) == Permutation((0, 1, 2))\n+    assert Permutation([[0, 1, 2], [2, 0]]) == Permutation([2, 1, 0])\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([1, 2, 0])\n+\n+    # Additional edge case with single element permutations\n+    assert Permutation([[0], [0]]) == Permutation([0])\n+    assert Permutation([[1], [1]]) == Permutation([0, 1])\n+    \n+    # Test combinations of overlapping and non-overlapping cycles\n+    assert Permutation([[0, 1], [2, 3]]) == Permutation([1, 0, 3, 2])\n+    assert Permutation([[0, 1], [1, 3], [3, 2]]) == Permutation([1, 3, 0, 2])\n     assert Permutation([[1], [4, 2]]) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation([[1], [4, 2]], size=1) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation(\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex fa86bc3..22e7d7c 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -1285,6 +1285,27 @@ def test_empty_zeros():\n     assert a.cols == 0\n \n \n+def test_matrix_hstack_zero_row():\n+    # Test horizontal stacking with zero-row matrices\n+    from sympy import Matrix\n+\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1)\n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+\n+    result = Matrix.hstack(M1, M2, M3, M4)\n+    assert result.shape == (0, 6), \"Expected shape (0, 6), got {}\".format(result.shape)\n+\n+    # Test with non-zero row matrices to ensure behavior is consistent\n+    M1 = Matrix.zeros(1, 0)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(1, 2)\n+    M4 = Matrix.zeros(1, 3)\n+\n+    result = Matrix.hstack(M1, M2, M3, M4)\n+    assert result.shape == (1, 6), \"Expected shape (1, 6), got {}\".format(result.shape)\n+\n def test_issue_3749():\n     a = Matrix([[x**2, x*y], [x*sin(y), x*cos(y)]])\n     assert a.diff(x) == Matrix([[2*x, y], [sin(y), cos(y)]])\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..49d20e3 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -224,6 +224,15 @@ def test_evalf_bugs():\n     assert as_mpmath(0.0, 10, {'chop': True}) == 0\n \n     #issue 5412\n+    # issue 13076\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Additional test cases to further ensure the issue is resolved\n+    assert NS(Mul(S.Zero, Max(0, y), evaluate=False).evalf()) == '0'\n+    assert NS(Mul(Max(2, y), x, evaluate=False).evalf()) == 'x*Max(2, y)'\n+    assert NS(Mul(x, Min(0, y), evaluate=False).evalf()) == 'x*Min(0, y)'\n+    assert NS(Mul(Min(0, y), x, evaluate=False).evalf()) == 'x*Min(0, y)'\n     assert ((oo*I).n() == S.Infinity*I)\n     assert ((oo+oo*I).n() == S.Infinity + S.Infinity*I)\n \n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..c48614a 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -203,6 +203,19 @@ def test_tanh():\n \n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n+from sympy import Symbol, coth, log, tan, I, pi\n+\n+def test_coth_log_tan_issue():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # Test the specific integral values mentioned in the issue\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for val in test_values:\n+        try:\n+            e.subs(x, val)\n+            print(f\"No error for x = {val}\")\n+        except NameError as ne:\n+            print(f\"NameError for x = {val}: {ne}\")\n \n def test_tanh_series():\n     x = Symbol('x')\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..925e3ab 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -179,6 +179,15 @@ def test_Complement():\n     assert Complement(S.Integers, S.UniversalSet) == EmptySet()\n     assert S.UniversalSet.complement(S.Integers) == EmptySet()\n \n+    # Test for issue 12712: Complement doesn't work when input is a mixture of Symbols and numbers\n+    from sympy import Symbol\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, 2, 3), Interval(1, 5)) == Complement(FiniteSet(x), Interval(1, 5))\n+    assert Complement(FiniteSet(1, x, 3), Interval(0, 2)) == FiniteSet(x, 3)\n+    assert Complement(FiniteSet(2, y, 5), FiniteSet(2, 3, 4)) == FiniteSet(y, 5)\n+\n     assert (not 0 in S.Reals.intersect(S.Integers - FiniteSet(0)))\n \n     assert S.EmptySet - S.Integers == S.EmptySet\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..09bd92e 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,44 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_issue_13643_col_insert():\n+    from sympy import eye, Matrix, ones\n+    \n+    # Original problem statement scenario\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected_result = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]])\n+    assert result == expected_result\n+\n+    # Test with inserting at the start\n+    result_start = M.col_insert(0, V)\n+    expected_start = Matrix([\n+        [2, 2, 1, 0, 0, 0, 0, 0],\n+        [2, 2, 0, 1, 0, 0, 0, 0],\n+        [2, 2, 0, 0, 1, 0, 0, 0],\n+        [2, 2, 0, 0, 0, 1, 0, 0],\n+        [2, 2, 0, 0, 0, 0, 1, 0],\n+        [2, 2, 0, 0, 0, 0, 0, 1]])\n+    assert result_start == expected_start\n+\n+    # Test with inserting at the end\n+    result_end = M.col_insert(6, V)\n+    expected_end = Matrix([\n+        [1, 0, 0, 0, 0, 0, 2, 2],\n+        [0, 1, 0, 0, 0, 0, 2, 2],\n+        [0, 0, 1, 0, 0, 0, 2, 2],\n+        [0, 0, 0, 1, 0, 0, 2, 2],\n+        [0, 0, 0, 0, 1, 0, 2, 2],\n+        [0, 0, 0, 0, 0, 1, 2, 2]])\n+    assert result_end == expected_end\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..df21ff8 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -677,8 +677,15 @@ def test_Poly_mul():\n     assert Poly(x, x) * 2 == Poly(2*x, x)\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n-\n-def test_Poly_sqr():\n+def test_issue_13079():\n+    # Test original issue with multiplication and Poly\n+    from sympy import Poly, Symbol, S\n+    x = Symbol('x')\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..af97f3b 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,27 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_custom_mul_symbol():\n+    from sympy import symbols, latex\n+    x, y = symbols('x y')\n+\n+    # Valid custom mul_symbol with a thin space\n+    assert latex(3*x**2*y, mul_symbol='\\\\\\\\,') == r\"3\\\\,x^{2}\\\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\\\\\,') == r\"1.5\\\\,3^{x}\"\n+\n+    # Test to ensure that other valid symbols are not affected\n+    assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n+    assert latex(2*x*y, mul_symbol='times') == r\"2 \\times x \\times y\"\n+    assert latex(2*x*y) == \"2 x y\"  # Default symbol\n+\n+    # Invalid mul_symbol case - should raise an error if unsupported\n+    try:\n+        latex(2*x*y, mul_symbol='invalid_symbol')\n+    except KeyError:\n+        assert True  # Expected to raise an exception\n+    else:\n+        assert False  # Should not happen\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..0f9509e 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -400,6 +400,18 @@ def test_determinant():\n                  (y, z, x) ))\n \n     assert M.det(method=\"bareiss\") == z**2 - x*y\n+\n+    # Additional test cases for issue 13835\n+    a = symbols('a')\n+    for n in range(1, 8):\n+        M = Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+        if n in [1, 4, 5, 6, 7]:\n+            assert M.det() == 0, f\"Failed for n = {n}, det != 0\"\n+        elif n == 2:\n+            assert M.det() == -a, f\"Failed for n = {n}, det != -a\"\n+        elif n == 3:\n+            expected_det = (2*a*(a + 2)) + (2*a*(2*a + 1)) - (3*a*(2*a + 2))\n+            assert M.det() == expected_det, f\"Failed for n = {n}, det != expected_det\"\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n \n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..b175e2c 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -156,8 +156,62 @@ def test_characteristic_function():\n     assert cf(0) == 1\n     assert simplify(cf(1)) == S(25)/26 + 5*I/26\n \n+from sympy import S, cdf, diff, simplify, Rational\n+from sympy.stats import (Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse,\n+                         Kumaraswamy, Laplace, Logistic, Nakagami, StudentT,\n+                         UniformSum, density)\n+from sympy.utilities.randtest import verify_numerically as tn\n \n-def test_sample():\n+def test_precomputed_cdf_issue_resolution():\n+    x = symbols(\"x\", real=True, finite=True)\n+\n+    # Test for Arcsin distribution\n+    X = Arcsin(\"x\", 0, 3)\n+    assert simplify(cdf(X)(1).evalf()) == simplify(2 * asin(sqrt((1 - 0) / (3 - 0))) / pi)\n+\n+    # Test for Dagum distribution\n+    X = Dagum(\"x\", S(1)/3, S(1)/5, 2)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test for Erlang distribution\n+    X = Erlang(\"x\", 1, 1)\n+    assert simplify(cdf(X)(1)) == simplify(lowergamma(1, 1) / gamma(1))\n+\n+    # Test for Frechet distribution\n+    X = Frechet(\"x\", S(4)/3, 1, 2)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test for Gamma distribution\n+    X = Gamma(\"x\", 0.1, 2)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test for GammaInverse distribution\n+    X = GammaInverse(\"x\", S(5)/7, 2)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test for Kumaraswamy distribution\n+    X = Kumaraswamy(\"x\", S(1)/123, 5)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test for Laplace distribution\n+    X = Laplace(\"x\", 2, 3)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test for Logistic distribution\n+    X = Logistic(\"x\", 1, 0.1)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test for Nakagami distribution\n+    X = Nakagami(\"x\", S(7)/3, 1)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test for StudentT distribution\n+    X = StudentT(\"x\", 10)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n+\n+    # Test for UniformSum distribution\n+    X = UniformSum(\"x\", 5)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x)\n     z = Symbol('z')\n     Z = ContinuousRV(z, exp(-z), set=Interval(0, oo))\n     assert sample(Z) in Z.pspace.domain.set\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..a19dd87 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -48,8 +48,27 @@ def test_tensor_product_commutator():\n def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n-\n-def test_issue_5923():\n+from sympy import Symbol\n+from sympy.physics.quantum import TensorProduct as TP\n+from sympy.physics.quantum import tensor_product_simp as tps\n+from sympy.physics.paulialgebra import Pauli\n+\n+def test_tensor_product_powers():\n+    A = Symbol('A', commutative=False)\n+    B = Symbol('B', commutative=False)\n+    C = Symbol('C', commutative=False)\n+    D = Symbol('D', commutative=False)\n+    x = Symbol('x')\n+\n+    # Original cases from the issue description\n+    assert tps(TP(1, 1)*TP(1, 1)) == TP(1, 1)\n+    assert tps(TP(1, Pauli(3))*TP(1, Pauli(3))) == TP(1, 1)\n+\n+    # Additional tests from the original test patch\n+    assert tps(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tps(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+    assert tps(x*(TP(A, B)**2)*TP(C, D)) == x*TP(A**2*C, B**2*D)\n+    assert tps(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n     # most of the issue regarding sympification of args has been handled\n     # and is tested internally by the use of args_cnc through the quantum\n     # module, but the following is a test from the issue that used to raise.\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..4f38e72 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -70,6 +70,15 @@ def test_python_keyword_symbol_name_escaping():\n         5*Symbol(\"lambda\")) == \"lambda_ = Symbol('lambda')\\ne = 5*lambda_\"\n     assert (python(5*Symbol(\"lambda\") + 7*Symbol(\"lambda_\")) ==\n             \"lambda__ = Symbol('lambda')\\nlambda_ = Symbol('lambda_')\\ne = 7*lambda_ + 5*lambda__\")\n+\n+def test_python_issue_case():\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    assert python(Ne(x/(y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"]\n+\n+    # Include any necessary imports at the top of the file if not already present\n+    # from sympy import Eq, Ne, Symbol\n     assert (python(5*Symbol(\"for\") + Function(\"for_\")(8)) ==\n             \"for__ = Symbol('for')\\nfor_ = Function('for_')\\ne = 5*for__ + for_(8)\")\n \n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..c258e66 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,15 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n+def test_vector_add_zero():\n+    # Ensure adding zero times a vector does not raise TypeError\n+    N = ReferenceFrame('N')\n+    zero_vector = 0 * N.x\n+    result = sum([N.x, zero_vector])\n+    assert result == N.x, f\"Expected N.x, got {result}\"\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..8e007e9 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -130,6 +131,25 @@ def test_math_lambda():\n     prec = 1e-15\n     assert -prec < f(0.2) - sin02 < prec\n     raises(TypeError, lambda: f(x))\n+\n+\n+@conserve_mpmath_dps\n+def test_lambdify_mpmath_rational():\n+    from sympy.core import Eq, Rational\n+    from sympy.functions import rf\n+    from sympy.solvers import nsolve\n+\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+\n+    # Check that the lambdified function uses mpmath correctly\n+    src = inspect.getsource(f)\n+    assert 'mpmath.mpf' in src, \"Rational numbers should be converted to mpmath.mpf\"\n+\n+    # Attempting to solve using nsolve at high precision\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    assert abs(rf(18, x0).evalf(64) - (77 + Rational(1, 3)).evalf(64)) < 1e-12\n            # if this succeeds, it can't be a python math function\n \n \n@@ -141,6 +161,25 @@ def test_mpmath_lambda():\n     prec = 1e-49  # mpmath precision is around 50 decimal places\n     assert -prec < f(mpmath.mpf(\"0.2\")) - sin02 < prec\n     raises(TypeError, lambda: f(x))\n+\n+\n+@conserve_mpmath_dps\n+def test_lambdify_mpmath_rational():\n+    from sympy.core import Eq, Rational\n+    from sympy.functions import rf\n+    from sympy.solvers import nsolve\n+\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+\n+    # Check that the lambdified function uses mpmath correctly\n+    src = inspect.getsource(f)\n+    assert 'mpmath.mpf' in src, \"Rational numbers should be converted to mpmath.mpf\"\n+\n+    # Attempting to solve using nsolve at high precision\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    assert abs(rf(18, x0).evalf(64) - (77 + Rational(1, 3)).evalf(64)) < 1e-12\n            # if this succeeds, it can't be a mpmath function\n \n \n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..3db87da 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,11 +74,13 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n-    raises(ValueError, lambda: rank_zero_array[0])\n+    assert rank_zero_array[()] == x  # Ensure we can access the scalar\n+    assert list(rank_zero_array) == [x]  # Ensure iteration over the array gives one element\n+    raises(IndexError, lambda: rank_zero_array[0])  # Indexing with 0 should raise error\n \n \n def test_reshape():\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..9a8f1e7 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,43 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_iss1593():\n+    \"\"\"\n+    There was a sign mistake in the definition of the rotation matrix.\n+    This tests that particular sign mistake.\n+    See issue 1593 for reference.\n+    See Wikipedia\n+    https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\n+    for the correct definition.\n+    \"\"\"\n+    from sympy.algebras.quaternion import Quaternion\n+    from sympy import symbols, cos, sin, trigsimp\n+\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_rotation_matrix = Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_rotation_matrix\n+\n+def test_additional_quaternion_rotation():\n+    \"\"\"\n+    Additional test case to verify correct behavior of Quaternion.to_rotation_matrix()\n+    with a different quaternion representation.\n+    \"\"\"\n+    from sympy.algebras.quaternion import Quaternion\n+    from sympy import sqrt, Rational, trigsimp\n+\n+    q = Quaternion(Rational(1, 2), Rational(1, 2), Rational(1, 2), Rational(1, 2))\n+    expected_rotation_matrix = Matrix([\n+        [0, 0, 1],\n+        [1, 0, 0],\n+        [0, 1, 0]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_rotation_matrix\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +156,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..ac56539 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,15 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(6*i, 2) == Mod(0, 2)\n+    assert Mod(3*i, 4) == Mod(3*i, 4)  # Should not simplify further\n+    assert Mod(3*i, 6) == Mod(i, 2)    # Simplification should occur similar to 3*i % 6 -> i % 2\n+    assert Mod(3*i + 2, 2) == Mod(i, 2)  # Testing with additional constant\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..2be796f 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -75,7 +75,11 @@ def test_Min():\n     assert Min(nn, oo) == nn\n     assert Min(oo, nn) == nn\n     assert Min(p, p) == p\n+    from sympy import Min, Max, S, Symbol, oo, raises\n+\n+    assert Min() == S.Infinity\n     assert Min(p, oo) == p\n+    assert Min(x) == x\n     assert Min(oo, p) == p\n     assert Min(oo, oo) == oo\n \n@@ -152,7 +156,9 @@ def test_Max():\n     np_ = Symbol('np_', nonpositive=True)\n     r = Symbol('r', real=True)\n \n+    assert Max() == S.NegativeInfinity\n     assert Max(5, 4) == 5\n+    assert Max(x) == x\n \n     # lists\n \n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..1495f59 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1982,7 +1982,31 @@ def test_issue_8247_8354():\n     assert z.is_positive is False  # it's 0 (and a single _mexpand isn't enough)\n \n \n+from sympy import I, simplify, sin, zoo, nan, symbols\n+\n def test_Add_is_zero():\n+    # Additional tests for complex expressions regarding is_zero\n+\n+    # Original test patch from the issue\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None, \"Test for issue 15873: Expected is_zero to be None before simplification\"\n+\n+    # Assert that after simplification it determines zero-ness correctly\n+    assert simplify(e).is_zero is True, \"Test for issue 15873: Expected is_zero to be True after simplification\"\n+\n+    # Additional cases\n+    # Case 1: Simple zeros\n+    e1 = (1 + I) - (1 + I)\n+    assert e1.is_zero is True, \"Expected is_zero to be True because the expression simplifies to zero\"\n+\n+    # Case 2: Complex expression that is non-zero\n+    e2 = (1 + I) * (1 - I)\n+    assert e2.is_zero is False, \"Expected is_zero to be False because the expression simplifies to 2\"\n+\n+    # Case 3: Expression involving symbolic variables\n+    x, y = symbols('x y', zero=True)\n+    e3 = x + 2*y\n+    assert e3.is_zero, \"Expected is_zero to be True because x and y are zero\"\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n@@ -1993,4 +2017,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..eda7d5f 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -511,8 +511,39 @@ def test_posify():\n     assert str(Sum(posify(1/x**n)[0], (n,1,3)).expand()) == \\\n         'Sum(_x**(-n), (n, 1, 3))'\n \n-\n-def test_issue_4194():\n+def test_issue_16438():\n+    from sympy import Symbol, posify\n+\n+    # Test that the finite assumption is preserved\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    expected_assumptions = {\n+        'positive': True,\n+        'zero': False,\n+        'imaginary': False,\n+        'nonpositive': False,\n+        'commutative': True,\n+        'hermitian': True,\n+        'real': True,\n+        'nonzero': True,\n+        'nonnegative': True,\n+        'negative': False,\n+        'complex': True,\n+        'finite': True,\n+        'infinite': False\n+    }\n+    assert eq.assumptions0 == expected_assumptions\n+    \n+    # Additional test for other assumptions\n+    a = Symbol('a', integer=True, rational=True, prime=True)\n+    eq, rep = posify(a)\n+    expected_assumptions.update({'integer': True, 'rational': True, 'prime': True})\n+    assert eq.assumptions0 == expected_assumptions\n+\n+    b = Symbol('b', even=True, odd=False)\n+    eq, rep = posify(b)\n+    assert 'even' in eq.assumptions0 and eq.assumptions0['even'] is True\n+    assert 'odd' in eq.assumptions0 and eq.assumptions0['odd'] is False\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..14a5711 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +37,14 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Additional test cases for Indexed printing\n+    p = IndexedBase(\"p\")\n+    q = IndexedBase(\"q\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+    assert prntr.doprint(q[x**2, y + 1]) == 'q[x**2, y + 1]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..df048db 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -48,6 +48,18 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n+def test_autowrap_cython_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    # f is the function generated by autowrap using the 'cython' backend\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    # Should return 1.0 without raising TypeError\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n+\n def test_cython_wrapper_outarg():\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..36cf424 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,8 +248,8 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n-\n-def test_decode_morse():\n+    # Verify the encoded Morse mapping for digits, especially \"1\".\n+    assert encode_morse('1') == '.----'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..46a7ddd 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -103,7 +104,14 @@ def test_point():\n         Point(a.n(2), b.n(2), evaluate=False)\n     raises(ValueError, lambda: Point(1, 2) + 1)\n \n-    # test transformations\n+    # Test for multiplying Point and Point2D with number\n+    assert p4 * 2 == Point(2, 2)\n+    assert 2 * p4 == Point(2, 2)\n+    \n+    # Verify operation with sympify and multiply\n+    from sympy import sympify\n+    assert p3 + p4 * sympify(2.0) == Point(2, 2)\n+    assert p3 + sympify(2.0) * p4 == Point(2, 2)\n     p = Point(1, 0)\n     assert p.rotate(pi/2) == Point(0, 1)\n     assert p.rotate(pi/2, p) == p\n@@ -181,7 +189,14 @@ def test_point3D():\n         Point(a.n(2), b.n(2), c.n(2), evaluate=False)\n     raises(ValueError, lambda: Point3D(1, 2, 3) + 1)\n \n-    # test transformations\n+    # Test for multiplying Point and Point2D with number\n+    assert p4 * 2 == Point(2, 2)\n+    assert 2 * p4 == Point(2, 2)\n+    \n+    # Verify operation with sympify and multiply\n+    from sympy import sympify\n+    assert p3 + p4 * sympify(2.0) == Point(2, 2)\n+    assert p3 + sympify(2.0) * p4 == Point(2, 2)\n     p = Point3D(1, 1, 1)\n     assert p.scale(2, 3) == Point3D(2, 3, 1)\n     assert p.translate(1, 2) == Point3D(2, 3, 1)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..f49894d 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -543,6 +543,17 @@ def test_diophantine():\n     # rational expressions\n     assert diophantine(1/x) == set()\n     assert diophantine(1/x + 1/y - S.Half)\n+\n+    # Test issue 18186: diophantine function should return consistent results \n+    # regardless of the order of symbols when permute=True.\n+    expr = y**4 + x**4 - 2**4 - 3**4\n+    expected_solutions = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+\n+    # Testing with order (x, y)\n+    assert diophantine(expr, syms=(x, y), permute=True) == expected_solutions\n+\n+    # Testing with order (y, x)\n+    assert diophantine(expr, syms=(y, x), permute=True) == expected_solutions\n     set([(6, 3), (-2, 1), (4, 4), (1, -2), (3, 6)])\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..18258a0 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -672,12 +672,16 @@ def test_latex_derivatives():\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n \n+from sympy import Subs, latex\n+from sympy.abc import x, y\n+\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+def test_latex_subs_issue():\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..43c8d9f 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,5 +1,6 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n-    EmptySet, Union, Contains)\n+    EmptySet, Union, Contains, imageset)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n     And, Mod, oo, Function)\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..81604a7 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -513,8 +513,44 @@ def test_kernS():\n     one = kernS('x - (x - 1)')\n     assert one != 1 and one.expand() == 1\n \n+def test_issue_kernS_reference_before_assignment():\n+    # Test for simple expressions\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+    assert kernS(\"2*(x + y)\") == 2*(x + y)\n+    assert kernS(\"-(x + 1)\") == -(x + 1)\n \n-def test_issue_6540_6552():\n+    # Test for expressions without parentheses\n+    assert kernS(\"2*x + y\") == 2*x + y\n+\n+    # Test for empty input (edge case)\n+    try:\n+        kernS(\"\")  # Empty input should raise an error\n+    except SympifyError:\n+        assert True\n+    else:\n+        assert False\n+    \n+    # Test for missing parentheses (edge case)\n+    try:\n+        kernS(\"2*(x + y\")  # Unmatched parentheses should raise an error\n+    except SympifyError:\n+        assert True\n+    else:\n+        assert False\n+\n+    # Test with special characters in expressions\n+    assert kernS('x**2 + sin(pi/2)') == x**2 + sin(pi/2)\n+\n+    # Test for robustness with random strings\n+    try:\n+        kernS('non_expression_string')\n+    except SympifyError:\n+        assert True\n+    else:\n+        assert False\n+\n+    # Test kernS with nested expressions that match the kern pattern but aren't Muls\n+    assert kernS('-x - (1/(x + y))') == -x - 1/(x + y)\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_dagger.py b/sympy/physics/quantum/tests/test_dagger.py\nindex ad97a01..5159028 100644\n--- a/sympy/physics/quantum/tests/test_dagger.py\n+++ b/sympy/physics/quantum/tests/test_dagger.py\n@@ -1,11 +1,27 @@\n+\n from sympy import I, Matrix, symbols, conjugate, Expr, Integer\n \n from sympy.physics.quantum.dagger import adjoint, Dagger\n-from sympy.external import import_module\n+from sympy.physics.quantum.operator import IdentityOperator, Operator\n from sympy.testing.pytest import skip\n \n+def test_issue_dagger_identity():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+\n+    # Test multiplication of an operator by the identity\n+    assert O * I == O\n+    assert I * O == O\n+\n+    # Test multiplication of dagger of operator by the identity\n+    assert Dagger(O) * I == Dagger(O)\n+    assert I * Dagger(O) == Dagger(O)\n \n-def test_scalars():\n+    # More detailed test for specific scenario described in the issue\n+    A = Operator('A')\n+    B = Dagger(A)\n+    Identity = IdentityOperator()\n+    assert B * Identity == B\n     x = symbols('x', complex=True)\n     assert Dagger(x) == conjugate(x)\n     assert Dagger(I*x) == -I*conjugate(x)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..3e35092 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -854,12 +854,25 @@ def test_generator_product():\n     assert w == p\n \n \n+from sympy.combinatorics import DihedralGroup\n+\n def test_sylow_subgroup():\n     P = PermutationGroup(Permutation(1, 5)(2, 4), Permutation(0, 1, 2, 3, 4, 5))\n     S = P.sylow_subgroup(2)\n     assert S.order() == 4\n \n-    P = DihedralGroup(12)\n+    # Tests based on the reported issue with DihedralGroup\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4, \"Failed for DihedralGroup(18) with p=2\"\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4, \"Failed for DihedralGroup(50) with p=2\"\n+    \n+    G = DihedralGroup(2*25)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4, \"Failed for DihedralGroup(2*25) with p=2\"\n     S = P.sylow_subgroup(3)\n     assert S.order() == 3\n \n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..fd5fcb3 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,7 +471,18 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions\n+\n def test_partitions():\n+    # Test that partitions do not reuse dictionary instances\n+    a, b, c, d = [p.copy() for p in partitions(6, k=2)]\n+    a[2] = 0\n+    assert b[2] == 3  # Ensure modifying 'a' does not affect 'b'\n+\n+    # Create a list and verify that each partition is a unique dictionary instance\n+    partition_list = [p.copy() for p in partitions(6, k=2)]\n+    partition_list[0][2] = 0\n+    assert partition_list[1][2] == 3  # Verify that modifying one does not change others\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..44e599f 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,13 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # Testing for issue: S(0.0) == S.false should be False\n+    from sympy import S\n+    assert (S(0.0) == S.false) is False, \"Failed: S(0.0) == S.false should be False\"\n+    assert (S.false == S(0.0)) is False, \"Failed: S.false == S(0.0) should be False\"\n+    assert (S(0) == S.false) is False, \"Failed: S(0) == S.false should be False\"\n+    assert (S.false == S(0)) is False, \"Failed: S.false == S(0) should be False\"\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..bf31a0b 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -20,7 +21,52 @@ def test_subs():\n     assert e == Rational(6)\n \n \n-def test_subs_Matrix():\n+def test_issue_21373_subs_Piecewise_with_hyperbolic_and_exp():\n+    from sympy import sinh, Piecewise\n+\n+    # Test case based on the issue description\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        expr.subs({1: 1.0})\n+        # If no error is raised, the test passes for this case\n+        pass\n+    except PolynomialError:\n+        raise AssertionError(\"PolynomialError was raised unexpectedly\")\n+\n+    # Additional variations based on the conditions described in the issue\n+\n+    # Use cosh instead of sinh\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        expr_cosh.subs({1: 1.0})\n+        pass\n+    except PolynomialError:\n+        raise AssertionError(\"PolynomialError was raised with cosh unexpectedly\")\n+\n+    # Use tanh instead of sinh\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        expr_tanh.subs({1: 1.0})\n+        pass\n+    except PolynomialError:\n+        raise AssertionError(\"PolynomialError was raised with tanh unexpectedly\")\n+\n+    # Remove the division by z\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    try:\n+        expr_no_div.subs({1: 1.0})\n+        pass\n+    except PolynomialError:\n+        raise AssertionError(\"PolynomialError was raised without division unexpectedly\")\n+\n+    # Remove exp\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    try:\n+        expr_no_exp.subs({1: 1.0})\n+        pass\n+    except PolynomialError:\n+        raise AssertionError(\"PolynomialError was raised without exp unexpectedly\")\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n     assert (x*y).subs({x:z, y:0}) in [z, z1]\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..6ab45ad 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -162,7 +162,30 @@ def test_monomials():\n                     x*j**2, x*k**2, x*j*k, x**2*j**2*k**2, x*j*k**2, x**2, x**2*j*k**2\n             }\n \n-def test_monomial_count():\n+def test_itermonomials_min_degrees():\n+    from sympy import symbols\n+    from sympy.polys.monomials import itermonomials\n+    from sympy.polys.orderings import monomial_key\n+\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == \\\n+           {x1**3, x2**3, x3**3, x1**2*x2, x1*x2**2, x1**2*x3, x1*x3**2, x2**2*x3, x2*x3**2, x1*x2*x3}\n+    \n+    assert set(itermonomials([x1, x2], 4, 3)) == \\\n+           {x1**3, x1**4, x2**3, x2**4, x1**2*x2, x1*x2**2, x1**3*x2, x1*x2**3, x1**2*x2**2}\n+\n+    assert set(itermonomials([x1, x2], 3, 2)) == \\\n+           {x1**2, x1**3, x2**2, x2**3, x1*x2, x1**2*x2, x1*x2**2}\n+\n+    assert set(itermonomials([x1, x2], [2, 3], [1, 2])) == \\\n+           {x1*x2**2, x1**2*x2**2, x2**3, x1*x2**3, x1**2*x2**3}\n+    \n+    # Testing with commutative non-symbol variables\n+    a, b = symbols('a b', commutative=False)\n+    assert set(itermonomials([a, b], 3, 3)) == {a**3, b**3, a**2*b, a*b**2, a*b*a, b*a*b}\n+    \n+    # Testing degenerate case where min_degrees is greater than max_degrees\n+    assert set(itermonomials([x1, x2], 2, 3)) == set()\n     assert monomial_count(2, 2) == 6\n     assert monomial_count(2, 3) == 10\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..135497a 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,14 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Added test case to verify argument invariance\n+\n+    # Further testing for subclasses of String\n+    quoted_st = QuotedString('quoted')\n+    assert quoted_st.func(*quoted_st.args) == quoted_st\n+\n+    comment_st = Comment('comment')\n+    assert comment_st.func(*comment_st.args) == comment_st\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..4e61718 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -52,6 +53,19 @@ def test_PythonCodePrinter():\n                         (3, Gt(x, 0)), evaluate=False)) == '((2) if (x <= 0) else'\\\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n+\n+    # Test cases for Min and Max to verify the fix.\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    # Test with more than two arguments\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    # Test with nested Min and Max\n+    assert prntr.doprint(Min(Max(x, y), z)) == \"min(max(x, y), z)\"\n+    assert prntr.doprint(Max(Min(x, y), z)) == \"max(min(x, y), z)\"\n+    # Test with symbolic expressions\n+    assert prntr.doprint(Min(x + 1, y * 2)) == \"min(x + 1, y*2)\"\n+    assert prntr.doprint(Max(x - 1, y / 2)) == \"max(x - 1, y/2)\"\n     assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..13ef7c4 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,35 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+from sympy.abc import x, y\n+\n+def test_python_code_printer_single_element_tuple():\n+    # Test for the issue with the Python code printer not respecting tuple with one element\n+    f_single = lambdify([], tuple([1]))\n+    assert f_single() == (1,), \"Lambdify should return a single element tuple\"\n+\n+    # Ensuring the source code is correctly formatted\n+    source = inspect.getsource(f_single)\n+    assert 'return (1,)' in source, \"Generated source code should return a single element tuple\"\n+\n+    # Test with a tuple of two elements to ensure it is formatted correctly\n+    f_double = lambdify([], tuple([1, 2]))\n+    assert f_double() == (1, 2), \"Lambdify should return a two-element tuple\"\n+\n+    # Check the source code for the two-element tuple\n+    source_double = inspect.getsource(f_double)\n+    assert 'return (1, 2)' in source_double, \"Generated source code should return two elements tuple\"\n+\n+    # Additional test for expressions that could confuse the printer\n+    f_expr = lambdify([], (x + 1,))\n+    assert f_expr() == (1,), \"Lambdify should return a single element tuple with expression\"\n+\n+    # Check the source for the expression-based tuple\n+    source_expr = inspect.getsource(f_expr)\n+    assert 'return (x + 1,)' in source_expr, \"Generated source code must handle single element tuple with expressions\"\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..92430d3 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..aaa0dc7 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -262,6 +262,43 @@ def test_kahane_simplify1():\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n+def test_kahane_simplify_leading_gammas():\n+    mu, nu, rho, sigma, alpha, beta = tensor_indices(\"mu, nu, rho, sigma, alpha, beta\", LorentzIndex)\n+\n+    # Test with two contracted and two uncontracted matrices\n+    t1 = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r1 = kahane_simplify(t1)\n+    assert r1.equals(4*G(rho)*G(sigma))\n+    \n+    t2 = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r2 = kahane_simplify(t2)\n+    assert r2.equals(4*G(rho)*G(sigma))\n+\n+    # Test with contracted matrices in the middle\n+    t3 = G(alpha) * G(mu) * G(-mu) * G(beta)\n+    r3 = kahane_simplify(t3)\n+    assert r3.equals(4*G(alpha)*G(beta))\n+\n+    # Test with no contracted matrices\n+    t4 = G(alpha) * G(beta) * G(rho)\n+    r4 = kahane_simplify(t4)\n+    assert r4.equals(t4)\n+    \n+    # Test contracted matrices at both ends\n+    t5 = G(mu)*G(-mu)*G(rho)*G(sigma)*G(nu)*G(-nu)\n+    r5 = kahane_simplify(t5)\n+    assert r5.equals(16*G(rho)*G(sigma))\n+\n+    # Test with single gamma\n+    t6 = G(mu)\n+    r6 = kahane_simplify(t6)\n+    assert r6.equals(t6)\n+\n+    # More complex case\n+    t7 = G(mu)*G(alpha)*G(-mu)*G(beta)*G(sigma)*G(nu)*G(-nu)\n+    r7 = kahane_simplify(t7)\n+    assert r7.equals(8*G(alpha)*G(beta)*G(sigma))\n+    \n def test_gamma_matrix_class():\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..e2c31f4 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -29,8 +29,17 @@ def test_issue_10326():\n     assert Contains(oo, Interval(-oo, oo)) == False\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n+from sympy import S, Symbol, Contains, FiniteSet, Integers, Reals, Eq\n+from sympy.core.relational import Ne\n+from sympy.testing.pytest import raises\n \n-def test_binary_symbols():\n+def test_as_set_not_implemented():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Testing that NotImplementedError is raised as expected\n+    raises(NotImplementedError, lambda: Contains(x, Reals).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n     x = Symbol('x')\n     y = Symbol('y')\n     z = Symbol('z')\n@@ -48,4 +57,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..1d16854 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,29 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second, Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..348e812 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -561,6 +561,35 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+    \n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr1)\n+\n+    # Additional test with zero scale factor for coverage\n+    zero_v = Quantity('zero_v')\n+    SI.set_quantity_dimension(zero_v, velocity)\n+    SI.set_quantity_scale_factor(zero_v, 0 * meter / second)\n+    \n+    expr2 = a1 * t1 + zero_v\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr2)\n+\n \n def test_prefixed_property():\n     assert not meter.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..ef30bcc 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -56,8 +57,24 @@ def test_homomorphism():\n     assert T.domain == F\n     assert T.codomain == D\n     assert T(a*b) == p\n+def test_issue_perm_group_homomorphism():\n+    # Test case for the issue where _check_homomorphism is broken on PermutationGroups\n+    from sympy.combinatorics.named_groups import DihedralGroup\n+    from sympy.combinatorics.homomorphisms import homomorphism\n+\n+    D3 = DihedralGroup(3)\n+    # Test homomorphism with the same generating set\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Additional test case: identity homomorphism on a CyclicGroup\n+    C5 = CyclicGroup(5)\n+    T2 = homomorphism(C5, C5, C5.generators, C5.generators)\n+    assert T2.is_isomorphism()\n \n-def test_isomorphisms():\n+    # Additional test case: trivially mapped homomorphism should fail\n+    from sympy.combinatorics import Permutation\n+    raises(ValueError, lambda: homomorphism(D3, D3, D3.generators, [Permutation(0)] * len(D3.generators)))\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..4723d62 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -270,6 +270,33 @@ def test_PolyElement_as_expr():\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n+def test_PolyElement_as_expr_with_symbols():\n+    from sympy import symbols\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    # Original test case, adapted here\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Testing with a different number of symbols (too few)\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Testing with a different number of symbols (too many)\n+    raises(ValueError, lambda: f.as_expr(U, V, W, symbols('extra')))\n+\n+    # Testing a polynomial with a single variable\n+    R_single, x = ring(\"x\", ZZ)\n+    f_single = 3*x**2 + 2\n+    U = symbols(\"u\")\n+    g_single = 3*U**2 + 2\n+    assert f_single.as_expr(U) == g_single\n+\n+    # Testing with symbols same as original symbols\n+    U2, V2, W2 = symbols(\"x,y,z\")\n+    assert f.as_expr(U2, V2, W2) == f.as_expr()\n+\n def test_PolyElement_from_expr():\n     x, y, z = symbols(\"x,y,z\")\n     R, X, Y, Z = ring((x, y, z), ZZ)\n",
  "sympy__sympy-24661": "",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..1c93b77 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -57,6 +57,8 @@ def test_unit_grammar_fail(string):\n     \"strings, unit\",\n     [\n         ([\"0.1nm\"], u.AA),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n         ([\"mW/m2\"], u.Unit(u.erg / u.cm**2 / u.s)),\n         ([\"mW/(m2)\"], u.Unit(u.erg / u.cm**2 / u.s)),\n         ([\"km/s\", \"km.s-1\"], u.km / u.s),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..b23a7ea 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,6 +163,18 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n+    def test_translate_url_with_optional_parameters(self):\n+        # Case where the optional parameter is present\n+        self.assertEqual(translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'), '/nl/with-arguments/regular-argument/optional.html')\n+        \n+        # Case where the optional parameter is missing\n+        self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'), '/nl/with-arguments/regular-argument/')\n+        \n+        # Case where the URL path has optional numeric arguments\n+        self.assertEqual(translate_url('/en/regex_optional/1/2/', 'nl'), '/nl/regex_optional/1/2/')\n+        \n+        # Case where one of the numeric optional arguments is missing\n+        self.assertEqual(translate_url('/en/regex_optional/1/', 'nl'), '/nl/regex_optional/1/')\n \n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..5692ecb 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -10,14 +11,31 @@ from django.test import TestCase\n \n from .models import (\n     ArticleWithAuthor, BachelorParty, BirthdayParty, BusStation, Child,\n-    DerivedM, InternalCertificationAudit, ItalianRestaurant, M2MChild,\n+    Derived, Item, DerivedM, InternalCertificationAudit, ItalianRestaurant, M2MChild,\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n )\n \n-\n-class ModelInheritanceTest(TestCase):\n+class SaveTestCase(TestCase):\n+    def setUp(self):\n+        self.derived = Derived.objects.create(f=True) # create the first object\n+        \n+    def test_reset_primary_key_and_create_new_instance(self):\n+        initial_count = Derived.objects.count()\n+        \n+        # Reset the instance to simulate the bug situation\n+        obj = Derived.objects.get(pk=self.derived.pk)\n+        obj.reset()\n+        obj.save()\n+        \n+        # Ensure a new object is created instead of overwriting the existing one\n+        new_count = Derived.objects.count()\n+        self.assertEqual(new_count, initial_count + 1)\n+        \n+        # Ensure the old object remains unchanged\n+        original_obj = Derived.objects.get(pk=self.derived.pk)\n+        self.assertTrue(original_obj.f)\n     def test_model_inheritance(self):\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..d568161 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -603,10 +603,22 @@ class DeletionTests(TestCase):\n                 )\n                 signal.disconnect(receiver, sender=Referrer)\n \n+from django.test import TestCase\n+from .models import User, Avatar\n \n class FastDeleteTests(TestCase):\n \n-    def test_fast_delete_fk(self):\n+    def test_fast_delete_all_subquery(self):\n+        \"\"\"\n+        Test to ensure Model.objects.all().delete() doesn't use a subquery\n+        in the SQL generated by Django 3.1 which causes performance regression\n+        and issues with LOCK TABLES.\n+        \"\"\"\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure no subquery is present in the SQL\n+        self.assertNotIn('SELECT', sql)\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n         )\n@@ -702,4 +714,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..cf584ea 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,23 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..0913c7a 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,9 +1,12 @@\n+\n import datetime\n import pickle\n \n import django\n from django.db import models\n from django.test import TestCase\n+from django.db.models import Sum\n+from .models import Toy\n \n from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n \n@@ -219,6 +222,16 @@ class PickleabilityTestCase(TestCase):\n         with self.assertNumQueries(0):\n             self.assert_pickles(groups)\n \n+    def test_pickle_values_annotate_queryset(self):\n+        # Test to ensure that a queryset using values() and annotate() can be correctly pickled and unpickled.\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+        prices = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        reloaded_prices = Toy.objects.all()\n+        reloaded_prices.query = pickle.loads(pickle.dumps(prices.query))\n+        self.assertEqual(list(prices), list(reloaded_prices))\n+\n     def test_annotation_with_callable_default(self):\n         # Happening.when has a callable default of datetime.datetime.now.\n         qs = Happening.objects.annotate(latest_time=models.Max('when'))\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..ccd7bda 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -5,10 +5,13 @@ class Classification(models.Model):\n     code = models.CharField(max_length=10)\n \n \n+from decimal import Decimal\n+\n class Employee(models.Model):\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n     name = models.CharField(max_length=40, blank=False, null=False)\n     salary = models.PositiveIntegerField()\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..b25b57b 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,6 +30,19 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n+    def test_unicode_preparation(self):\n+        field = JSONField()\n+        # Test Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4e2d\u56fd'}), '{\"a\": \"\u4e2d\u56fd\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        # Test emojis\n+        self.assertEqual(field.prepare_value({'emoji': '\ud83d\ude00\ud83d\udc31'}), '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test mixed content\n+        self.assertEqual(\n+            field.prepare_value(['\u4f60\u597d\uff0c\u4e16\u754c', 'ja\u017a\u0144', '\ud83d\ude00']),\n+            '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\", \"\ud83d\ude00\"]'\n+        )\n+\n     def test_widget(self):\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n",
  "django__django-14404": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..5f5ff74 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,6 +655,29 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_import_models_in_migration(self):\n+        \"\"\"\n+        Tests that the migration file correctly includes an import\n+        for `models` when it is used in `bases`.\n+        \"\"\"\n+        fields = {\n+            'name': models.TextField(primary_key=True),\n+        }\n+        options = {}\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name='MyModel', fields=tuple(fields.items()), options=options, bases=(models.Model,)\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        result = self.safe_exec(output)\n+        self.assertIn('from django.db import models', output)\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..59ff3f8 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1637,9 +1637,17 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n-    def test_exists_extra_where_with_aggregate(self):\n+    def test_aggregation_default_with_annotation(self):\n+        # This test case is created based on the reported issue that\n+        # aggregate() with 'default' after annotate() crashes.\n+        result = Book.objects.annotate(\n+            idx=F('id')\n+        ).aggregate(\n+            total=Sum('id', default=0)\n+        )\n+        self.assertEqual(result['total'], 4560)\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..5cace49 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2984,10 +2984,23 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Reverse is a no-op.\n-        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+        \n+        # Reverse the operation, ensuring that the old auto-generated name is restored.\n+        with connection.schema_editor() as editor:\n             operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameNotExists(table_name, \"new_pony_test_idx\")\n+        self.assertIndexNameExists(table_name, \"pony_weight_pink\")\n+\n+        # Re-apply the renaming to ensure idempotence.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # Check that no exception occurs when re-applying the rename operation.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n@@ -3000,7 +3013,6 @@ class OperationTests(OperationTestBase):\n                 \"old_fields\": (\"weight\", \"pink\"),\n             },\n         )\n-\n     def test_rename_index_unknown_unnamed_index(self):\n         app_label = \"test_rninuui\"\n         project_state = self.set_up_test_model(app_label)\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..a488213 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,7 +3497,57 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n-class LocalizedModelFormTest(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from django.db import models\n+from django.forms.models import modelform_factory\n+\n+class Person(models.Model):\n+    id = models.AutoField(primary_key=True)\n+    name = models.CharField(max_length=255)\n+\n+class TestModelFormWithCallback(TestCase):\n+    def test_modelform_factory_respects_metaclass_callback(self):\n+        def custom_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.TextInput(attrs={'class': 'custom'}))\n+\n+        class MyModel(forms.Model):\n+            field1 = models.CharField(max_length=100)\n+            field2 = models.BooleanField()\n+\n+        class MyForm(forms.ModelForm):\n+            class Meta:\n+                model = MyModel\n+                fields = ['field1', 'field2']\n+                formfield_callback = custom_callback\n+\n+        FactoryForm = modelform_factory(MyModel, form=MyForm)\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.TextInput)\n+            self.assertEqual(field.widget.attrs.get('class'), 'custom')\n+    \n+    def test_inherited_modelform_respects_metaclass_callback(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        NewForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        class InheritedForm(NewForm):\n+            pass\n+\n+        for name, field in InheritedForm.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+            self.assertEqual(\n+                type(field.widget),\n+                type(NewForm.base_fields[name].widget),\n+            )\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..ac96e7d 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,13 +9,43 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.core import serializers\n+from django.db import models\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n \n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        qs = qs.select_related(\"master\")\n+        return qs\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n class JsonSerializerTestCase(SerializersTestBase, TestCase):\n+    def test_m2m_custom_manager_with_select_related(self):\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+        try:\n+            data = serializers.serialize(\"json\", [test])\n+            self.assertIn('\"tags\": [', data)\n+        except Exception as e:\n+            self.fail(f\"Serialization failed with exception: {e}\")\n     serializer_name = \"json\"\n     pkless_str = \"\"\"[\n     {\n",
  "matplotlib__matplotlib-23476": "",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..7398c4f 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,7 +6586,11 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n-    actual = da.integrate(\"y\")\n+    # Test for consistency in parameter naming for integrate method\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"x\")\n+\n+    actual = da.integrate(coord=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..f1b19bf 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_stacked_array_unstack_single_dim_variables(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..e6cc844 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -132,6 +132,42 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n \n \n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly error when a CSV regex value contains invalid regular expressions.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run(\n+            [str(EMPTY_MODULE), r\"--bad-names-rgxs=(foo{1,}, foo{1,3}})\"],\n+            exit=False,\n+        )\n+    output = capsys.readouterr()\n+    assert (\n+        r\"Error in provided regular expression: (foo{1,} beginning at index 0: missing ), unterminated subpattern\"\n+        in output.err\n+    )\n+\n+\n+@pytest.mark.parametrize(\n+    \"in_string,expected\",\n+    [\n+        (\"foo\", [\"foo\"]),\n+        (\"foo,bar\", [\"foo\", \"bar\"]),\n+        (\"foo, bar\", [\"foo\", \"bar\"]),\n+        (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+        (\"foo{2}, bar{1,3}\", [\"foo{2}\", \"bar{1,3}\"]),\n+        (\"foo{1,10}, bar, baz{3,}\", [\"foo{1,10}\", \"bar\", \"baz{3,}\"]),\n+    ],\n+)\n+def test_csv_regex_parsing(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse valid comma-separated regex expressions.\"\"\"\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgxs={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    compiled_patterns = [re.compile(regex) for regex in expected]\n+    assert _template_run(in_string) == compiled_patterns\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n     \"\"\"\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..9c40593 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1155,8 +1155,24 @@ def test_summary_list_after_errors(testdir):\n         ]\n     )\n \n+def test_does_not_eagerly_collect_packages(testdir):\n+    testdir.makepyfile(\"def test(): pass\")\n+    pydir = testdir.mkpydir(\"foopkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n \n-def test_importorskip():\n+def test_does_not_put_src_on_path(testdir):\n+    # `src` is not on sys.path so it should not be importable\n+    testdir.tmpdir.join(\"src/nope/__init__.py\").ensure()\n+    testdir.makepyfile(\n+        \"import pytest\\n\",\n+        \"def test():\\n\",\n+        \"    with pytest.raises(ImportError):\\n\",\n+        \"        import nope\\n\",\n+    )\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n     with pytest.raises(\n         pytest.skip.Exception,\n         match=\"^could not import 'doesnotexist': No module named .*\",\n@@ -1184,4 +1200,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..e38947c 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -11,6 +11,20 @@\n import pytest\n \n from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx.ext.autodoc.typehints import _parse_annotation\n+\n+def test_autodoc_typehints_none_handling(app):\n+    # Test with autodoc_typehints='description'\n+    app.config.autodoc_typehints = 'description'\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n+    # Test with autodoc_typehints='signature'\n+    app.config.autodoc_typehints = 'signature'\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([nodes.Text, \"None\"],))\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n@@ -30,4 +44,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..d990d07 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,6 +1317,38 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        x3, x4 : array_like, optional\n+            Optional input arrays, description of `x3`, `x4`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: * **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+                     * **x3, x4** (:class:`array_like`, *optional*) -- Optional input arrays, description of ``x3``, ``x4``.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`\n+        :param x3: Optional input arrays, description of ``x3``, ``x4``.\n+        :type x3: :class:`array_like`, *optional*\n+        :param x4: Optional input arrays, description of ``x3``, ``x4``.\n+        :type x4: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..270aadc 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,7 +984,48 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n-def test_info_field_list_var(app):\n+def test_param_dict_str_str(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\"\n+            \"   :return: None\\n\"\n+            \"   :rtype: None\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, ([nodes.list_item, nodes.paragraph])]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..aa2574a 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -834,6 +834,30 @@ def test_autodoc_typehints_description(app):\n             in context)\n \n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_typehints_description_target': 'documented'})\n+def test_autodoc_typehints_description_with_documented_return(app):\n+    # This test case verifies that when a return type is documented in the\n+    # docstring, the type hint should be included in the generated documentation.\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.decr\\n'\n+        '\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    \n+    # Check if the result contains the documented return type\n+    assert ('target.typehints.decr(a, b=1)\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n+            in context)\n+\n+\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n                                    'autodoc_typehints_description_target': 'documented'})\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..cfb7980 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1067,6 +1067,16 @@ def test_conditionset():\n     assert solveset(y**x-z, x, S.Reals) == \\\n         ConditionSet(x, Eq(y**x - z, 0), S.Reals)\n \n+    # Issue test: solveset should return ConditionSet instead of NotImplementedError\n+    result = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert solveset(result, n, domain=S.Reals) == \\\n+        ConditionSet(n, result, S.Reals)\n+\n+    # Additional test case for a similar non-trivial equation\n+    complex_result = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert solveset(complex_result, x, domain=S.Reals) == \\\n+        ConditionSet(x, complex_result, S.Reals)\n+\n \n @XFAIL\n def test_conditionset_equality():\n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..562a195 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3275,8 +3275,21 @@ def test_factor_terms():\n     assert factor_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n     assert sqf_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n \n+from sympy import Symbol, sqf_list\n \n-def test_as_list():\n+def test_issue_8695():\n+    x = Symbol('x')\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n+\n+def test_related_case_1():\n+    x = Symbol('x')\n+    assert sqf_list(x*(x + 1)) == (1, [(x, 1), (x + 1, 1)])\n+\n+def test_related_case_2():\n+    x = Symbol('x')\n+    assert sqf_list(x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2) == (1, [(x - 2, 1), (x**2 - 1, 2)])\n     # issue 14496\n     assert Poly(x**3 + 2, x, domain='ZZ').as_list() == [1, 0, 0, 2]\n     assert Poly(x**2 + y + 1, x, y, domain='ZZ').as_list() == [[1], [], [1, 1]]\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..0759848 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3255,7 +3255,18 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+from sympy import symbols, expand, I\n+from sympy.polys.polytools import factor\n+\n+def test_factor_with_extension():\n+    x, y = symbols('x y')\n+    z = expand((x - 1) * (y - 1))\n+\n+    # Verify standard factorization works as expected\n+    assert factor(z) == (x - 1) * (y - 1)\n+    \n+    # Verify the issue: factor with an extension drops a factor\n+    assert factor(z, extension=[I]) == (x - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..3021acc 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,6 +369,28 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n+def test_rational_calc_value_error():\n+    # Test cases to confirm the correct behavior of Rational\n+    from sympy import Rational\n+\n+    # Original error case\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+\n+    # Additional test cases for verification\n+    assert Rational('1.0', '2') == Rational(1, 2)\n+    assert Rational('0.1', '10') == Rational(1, 100)\n+    assert Rational('0.5/100') == Rational(1, 200)\n+    assert Rational(0.5, 100) == Rational(1, 200)\n+\n+    # Verify the behavior with decimal strings and mixed types\n+    assert Rational('2.5', '5') == Rational(1, 2)\n+    assert Rational('0.25', 2) == Rational(1, 8)\n+    assert Rational(2, '2.5') == Rational(4, 5)\n+\n+    # Confirm the correct behavior as strings with fractions\n+    assert Rational('1/10') == Rational(1, 10)\n+    assert Rational('1.5/3.0') == Rational(1, 2)\n+\n \n def test_Number_new():\n     \"\"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..51e8807 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,23 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundfield_subwidget_id_uses_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the id set by ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Choice A'), ('b', 'Choice B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        # Test with auto_id to check BoundWidget uses the correct custom ID.\n+        form = SomeForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+\n+        # Ensure that the id_for_label reflects the custom IDs as per auto_id format\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..e8b2427 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -302,6 +302,39 @@ def test_tool_line_handle():\n     assert tool_line_handle.positions == positions\n \n \n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n+from matplotlib.testing.widgets import do_event\n+\n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n \n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..bf9d38b 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -50,8 +50,53 @@ def test_dict_learning_shapes():\n     assert_equal(dico.components_.shape, (n_components, n_features))\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n-\n-def test_dict_learning_overcomplete():\n+def test_sparse_coder_max_iter():\n+    \"\"\"Test max_iter parameter for SparseCoder using lasso_cd.\"\"\"\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge with low max_iter\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges without warnings for sufficient max_iter\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n     assert dico.components_.shape == (n_components, n_features)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..10ee9bf 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,6 +147,29 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n+# Additional imports for testing\n+import pytest\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.ensemble import RandomForestClassifier\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.utils._testing import assert_array_equal\n+\n+# Test case for verifying the issue with cross_val_predict(method='predict_proba')\n+@pytest.mark.parametrize('estimator', [\n+    MultiOutputClassifier(LinearDiscriminantAnalysis()),\n+    MultiOutputClassifier(RandomForestClassifier(n_estimators=2))\n+])\n+def test_cross_val_predict_with_predict_proba(estimator):\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=1)\n+    # Test predict_proba does not raise errors\n+    pred_proba = cross_val_predict(estimator, X, Y, cv=3, method='predict_proba')\n+    # Ensure the result is a list of arrays (one array per label)\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]  # Number of outputs\n+    for preds in pred_proba:\n+        assert preds.shape == (X.shape[0], 2)  # Each output should have probabilities for 2 classes\n \n # Import the data\n iris = datasets.load_iris()\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..761d63c 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -169,8 +169,17 @@ def test_restify_type_union_operator():\n def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n \n-\n-def test_stringify():\n+def test_restify_mock_bases():\n+    \"\"\"Test the restify function with a mocked inherited class to ensure 'Bases' is correct.\"\"\"\n+    with mock(['torch.nn']):\n+        import torch.nn as nn  # Mocked module and class\n+        assert restify(nn.Module) == \":py:class:`torch.nn.Module`\"\n+\n+def test_stringify_mock_bases():\n+    \"\"\"Test the stringify function with the mocked inherited class to ensure 'Bases' is correct.\"\"\"\n+    with mock(['torch.nn']):\n+        import torch.nn as nn  # Mocked module and class\n+        assert stringify(nn.Module) == \"torch.nn.Module\"\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n     assert stringify(None) == \"None\"\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..b29ef0e 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,17 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    from sympy import Product, Symbol, S\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    # Test cases to check the fix for specific values of n\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    assert p.subs(n, 3).doit() == S(455)/48\n+    assert p.subs(n, 4).doit() == S(53775)/1024\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +368,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}