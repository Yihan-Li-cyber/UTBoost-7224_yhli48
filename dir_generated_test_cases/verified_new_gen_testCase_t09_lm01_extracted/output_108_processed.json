{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..ee5543d 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,31 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        unnecessary comment truncation.\n+\n+        Regression test for the issue regarding float string representation\n+        in `io.fits.Card`.\n+        \"\"\"\n+        from astropy.io import fits\n+\n+        k = \"HIERARCH ESO IFM CL RADIUS\"\n+        original_comment = \"[m] radius arround actuator to avoid\"\n+        c = fits.Card(k, 0.009125, original_comment)\n+\n+        expected_str = f\"{k} = 0.009125 / {original_comment}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional test cases to evaluate different float values\n+        float_values = [0.00089321, 6.0213e-5, 12.0, -47.935, 123456.789]\n+        for val in float_values:\n+            c = fits.Card(k, val, original_comment)\n+            expected_value_str = f\"{k} = {val:.16G} /\"\n+            expected_str = f\"{expected_value_str} {original_comment}\"\n+            assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..6ec8d76 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,6 +601,23 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n+    def test_fitsdiff_identical_vla_files(self):\n+        \"\"\"Test that FITSDiff reports no differences for files with VLAs compared to themselves.\"\"\"\n+\n+        import pytest\n+        from astropy.io import fits\n+\n+        # Creating a file with a VLA column\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        hdu.writeto('diffbug.fits', overwrite=True)\n+\n+        # Use FITSDiff to compare the same file with itself\n+        diff = fits.FITSDiff('diffbug.fits', 'diffbug.fits')\n+        \n+        # The files should be identical\n+        assert diff.identical, \"FITSDiff should report the files as identical.\"\n+\n     def test_identical_files_basic(self):\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..f69aa32 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def foo(self):\n+            \"Documentation for foo property.\"\n+            return \"foo\"\n+\n+    class Subclass(Base):\n+        @property\n+        def foo(self):\n+            return \"overridden foo\"\n \n-def test_set_locale():\n+    if Base.foo.__doc__ is not None:\n+        assert Subclass.foo.__doc__ == \"Documentation for foo property.\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..c7b3f5f 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -177,6 +177,10 @@ def test_unknown_unit3():\n     assert isinstance(unit, u.UnrecognizedUnit)\n     assert unit.name == \"FOO\"\n \n+    # Test equality and inequality with None\n+    assert unit != None  # noqa\n+    assert not (unit == None)  # noqa\n+\n     unit2 = u.Unit(\"FOO\", parse_strict='silent')\n     assert unit == unit2\n     assert unit.is_equivalent(unit2)\n@@ -203,7 +207,14 @@ def test_invalid_scale():\n     x = ['a', 'b', 'c'] * u.m\n \n \n-def test_cds_power():\n+def test_unrecognized_unit_none_comparison():\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    # Ensure that comparing with None returns False and does not raise a TypeError\n+    assert (unit == None) == False  # noqa\n+    assert (unit != None) == True  # noqa\n+\n+    # Also test this for being part of a collection\n+    assert unit not in (None, u.m)\n     unit = u.Unit(\"10+22/cm2\", format=\"cds\", parse_strict='silent')\n     assert unit.scale == 1e22\n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..ce19784 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,19 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    bad_versions = ['1', '1.2rc1', '1.14dev']\n+\n+    # Additional cases related to the described issue\n+    test_module.__version__ = '1.14.3'\n+    problem_versions = ['1.14', '1.14.3', '1.14dev']\n+    non_problem_versions = ['1.13', '1.14.2']\n+\n+    # Test for the specific issue with LooseVersion where int and str mix\n+    for version in problem_versions:\n+        assert not minversion(test_module, version), f\"Expected minversion to be False for {version}\"\n+    for version in non_problem_versions:\n+        assert minversion(test_module, version), f\"Expected minversion to be True for {version}\"\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..f82839e 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -142,7 +142,9 @@ class TestQuantityCreation:\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n-        # items stored as objects by numpy should be converted to float\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..d3329e3 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,7 +218,15 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n-    # Trailing newlines not accepted\n+    # Test URLs with invalid characters in username:password part\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    # Test URL with invalid character \"@\" in the query string which should not affect URL validity\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', None),\n+    # Test mix of valid percent encoding in userinfo\n+    (URLValidator(), \"http://user%3Aname:pass%2Fword%40example.com\", None),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..685aa5b 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -395,7 +397,28 @@ class AggregateTestCase(TestCase):\n         sql = ctx.captured_queries[0]['sql']\n         self.assertIn('SELECT COUNT(*) ', sql)\n \n-    def test_non_grouped_annotation_not_in_group_by(self):\n+    def test_count_distinct_expression(self):\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_multiple_conditions(self):\n+        aggs = Book.objects.aggregate(\n+            distinct_high_ratings=Count(Case(\n+                When(pages__gt=300, rating__gt=4, then='rating'),\n+                When(pages__lt=100, rating__gt=2, then='rating')\n+            ), distinct=True),\n+        )\n+        # Assuming the dataset matches specific conditions that result in 3 distinct ratings\n+        self.assertEqual(aggs['distinct_high_ratings'], 3)\n+\n+    def test_count_without_distinct(self):\n+        aggs = Book.objects.aggregate(\n+            ratings_with_condition=Count(Case(When(pages__gt=300, then='rating'))),\n+        )\n+        # Assuming the dataset results in 5 ratings matching the condition\n+        self.assertEqual(aggs['ratings_with_condition'], 5)\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..f98ee8b 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1100,7 +1100,9 @@ class OverrideSettingsTests(SimpleTestCase):\n         django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertIsNone(default_storage.file_permissions_mode)\n-        with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):  # Ensure no explicit permissions are set.\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):  # Set custom permissions.\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n     def test_override_file_upload_directory_permissions(self):\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..9b1eab5 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -29,7 +30,38 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_pgpassword_set(self):\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return mock.Mock(returncode=0)\n+\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+            \n+        self.assertEqual(self.pgpassword, 'somepassword')\n+\n+    def test_pgpassword_no_pass(self):\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return mock.Mock(returncode=0)\n+\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+            \n+        self.assertIsNone(self.pgpassword)\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +145,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..8c3d45a 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -2,6 +2,7 @@ from django.apps.registry import apps\n from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n+from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n@@ -47,7 +48,23 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_missing_content_type_rename_ignore(self):\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Create content type in 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+\n+        # Check that content type is in 'other'\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+\n+        # Run migration which should rename the content type in 'other'\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+\n+        # Rollback migration in 'other'\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n@@ -63,4 +80,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..22da833 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,60 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+        # Additional test cases for ModelAdmin.get_inlines method\n+        def test_get_inlines_with_request_name(self):\n+            class MediaInline(GenericTabularInline):\n+                model = Media\n+\n+            class AlternateInline(GenericTabularInline):\n+                model = Media\n+\n+            class EpisodeAdmin(admin.ModelAdmin):\n+                inlines = (AlternateInline, MediaInline)\n+\n+                def get_inlines(self, request, obj):\n+                    if hasattr(request, 'name'):\n+                        if request.name == 'alternate':\n+                            return self.inlines[:1]\n+                        elif request.name == 'media':\n+                            return self.inlines[1:2]\n+                    return []\n+\n+            ma = EpisodeAdmin(Episode, self.site)\n+\n+            # Test with different request names\n+            request = Mock()\n+            self.assertEqual(ma.get_inlines(request, None), [])\n+            self.assertEqual(ma.get_inline_instances(request), [])\n+            \n+            for name, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+                request.name = name\n+                self.assertEqual(ma.get_inlines(request, None), (inline_class,))\n+                self.assertEqual(type(ma.get_inline_instances(request)[0]), inline_class)\n+\n+        def test_get_inlines_without_name_attribute(self):\n+            class MediaInline(GenericTabularInline):\n+                model = Media\n+\n+            class AlternateInline(GenericTabularInline):\n+                model = Media\n+            \n+            class EpisodeAdmin(admin.ModelAdmin):\n+                inlines = (AlternateInline, MediaInline)\n+\n+                def get_inlines(self, request, obj):\n+                    if hasattr(request, 'name'):\n+                        if request.name == 'alternate':\n+                            return self.inlines[:1]\n+                        elif request.name == 'media':\n+                            return self.inlines[1:2]\n+                    return []\n+                    \n+            ma = EpisodeAdmin(Episode, self.site)\n+\n+            # Test without request name attribute\n+            request = Mock() # A mock request with no name attribute\n+            inlines = ma.get_inlines(request, None)\n+            self.assertEqual(inlines, [])\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..5fdc700 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,9 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n',\n+            'trailingnewline\\r',\n+            'trailingnewline\\r\\n',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +261,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..2bbdbad 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,28 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        # Test memoryview content handling in HttpResponse.\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_with_unicode_content(self):\n+        # Test memoryview containing unicode characters.\n+        content = 'caf\u00e9'.encode('utf-8')\n+        r = HttpResponse(memoryview(content))\n+        self.assertEqual(r.content, content)\n+\n+    def test_large_memoryview_content(self):\n+        # Test with a large memoryview to check for any performance issues.\n+        content = b'a' * 10**6  # 1 MB of data\n+        r = HttpResponse(memoryview(content))\n+        self.assertEqual(r.content, content)\n+\n+    def test_empty_memoryview_content(self):\n+        # Test with an empty memoryview.\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "",
  "django__django-11149": "",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..621e3b8 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,10 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_empty_fields_list(self):\n+        \"\"\"model_to_dict should return an empty dict when fields=[]\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..eb710a0 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n@@ -464,7 +466,26 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # Ensure User instance can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        # Check if the primary key is set to None after deletion.\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_with_saved_pk(self):\n+        u = User.objects.create()\n+        saved_pk = u.pk\n+        collector = Collector(using='default')\n+        # Ensure the User instance can be fast-deleted.\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        # Explicitly check the primary key is None after deletion.\n+        self.assertIsNone(u.pk)\n+        # Try to query using the saved primary key.\n+        self.assertFalse(User.objects.filter(pk=saved_pk).exists())\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..b865b2e 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -93,6 +93,10 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-9', 8, '0.00000000'),\n             ('1e-10', 8, '0.00000000'),\n             ('1e-11', 8, '0.00000000'),\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-300', 5, '0.00000'),\n+            ('1e-400', 0, '0'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n         ]\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..292d252 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,16 @@\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='bar_set',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..a3ee38c 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -81,7 +83,32 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                'somepassword',\n+            )\n+        )\n+        self.assertDictContainsSubset(\n+            {\n+                'PGSSLCERT': 'client.crt',\n+                'PGSSLKEY': 'client.key',\n+                'PGSSLMODE': 'verify-ca',\n+                'PGSSLROOTCERT': 'root.crt',\n+            },\n+            self.pg_env\n+        )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..db59674 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -82,6 +82,30 @@ class FilteredRelationTests(TestCase):\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_exclude_with_no_matches(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='nonexistent title')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author1, self.author2],\n+        )\n+\n+    def test_exclude_multiple_conditions(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_rented=FilteredRelation('book', condition=Q(book__state=Book.RENTED)),\n+            ).exclude(book_rented__isnull=False),\n+            [self.author1, self.author2],\n+        )\n+\n     def test_without_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..4aabc6e 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -21,7 +21,20 @@ class TestUtilsHtml(SimpleTestCase):\n             output = value\n         self.assertEqual(function(value), output)\n \n-    def test_escape(self):\n+    def test_python_stdlib_escape_behavior(self):\n+        # Adding test cases specifically to verify the behavior of stdlib html.escape\n+        items = (\n+            (\"'\", \"&#x27;\"),  # Original expected behavior in Django\n+            (\"'\", \"&#39;\"),  # New expected behavior with Python's html.escape\n+        )\n+        patterns = (\"%s\", \"asdf%sfdsa\")\n+\n+        for original, new_escape in items:\n+            with self.subTest(original=original, new_escape=new_escape):\n+                for pattern in patterns:\n+                    value = pattern % original\n+                    expected_output = pattern % new_escape\n+                    self.assertEqual(html.escape(value), expected_output)\n         items = (\n             ('&', '&amp;'),\n             ('<', '&lt;'),\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..88962e8 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,6 +243,29 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n+    def test_skip_checks(self):\n+        \"\"\"\n+        Test the --skip-checks option to verify it skips system checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # normally produces a check warning\n+        })\n+        # Run the command with --skip-checks; no error is expected.\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_checks_not_skipped(self):\n+        \"\"\"\n+        Test the command normally (without --skip-checks) to see that checks are performed.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # normally produces a check warning\n+        })\n+        # Run the command without --skip-checks; check warnings/errors expected.\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('staticfiles.E001', err)\n+\n     def test_disallowed_abbreviated_options(self):\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..5bf4965 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +11,30 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default__root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_different_instances(self):\n+        # Verify that calling get_resolver with the same urlconf returns the same instance.\n+        first_resolver = get_resolver('urlpatterns.path_urls')\n+        second_resolver = get_resolver('urlpatterns.path_urls')\n+        self.assertIs(first_resolver, second_resolver)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_none_and_set(self):\n+        # Test that get_resolver(None) uses the ROOT_URLCONF setting.\n+        none_resolver = get_resolver(None)\n+        root_resolver = get_resolver('urlpatterns.path_urls')\n+        self.assertIs(none_resolver, root_resolver)\n+\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..ef4476d 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,22 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_union_with_changing_columns(self):\n+        # This test verifies that the composed query can change the list of columns\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+\n+        # Union and fetching specific columns\n+        reserved_name_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name_order, (2,))\n+\n+        # Union and fetching a different set of columns\n+        reserved_name = qs1.union(qs1).values('name').get()\n+        self.assertEqual(reserved_name['name'], 'a')\n+\n+        # More complex case: different combinations across multiple unions\n+        reserved_details = qs1.union(qs1).values('name', 'order').get()\n+        self.assertEqual((reserved_details['name'], reserved_details['order']), ('a', 2))\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..cf19b91 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -13,6 +13,7 @@ from email.mime.text import MIMEText\n from email.utils import parseaddr\n from io import StringIO\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n+from unittest import mock\n from ssl import SSLError\n \n from django.core import mail\n@@ -360,6 +361,39 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n \n+    @mock.patch('django.core.mail.utils.DNS_NAME.get_fqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test that non-ASCII domain in Message-ID is encoded to punycode\n+        when email encoding is non-unicode.\n+        \"\"\"\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--p8s937b>', message['Message-ID'])\n+\n+    @mock.patch('django.core.mail.utils.DNS_NAME.get_fqdn', return_value='example.com')\n+    def test_ascii_dns_with_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test that ASCII domain in Message-ID works as expected when email\n+        encoding is unicode.\n+        \"\"\"\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'utf-8'\n+        message = email.message()\n+        self.assertIn('@example.com>', message['Message-ID'])\n+\n+    @mock.patch('django.core.mail.utils.DNS_NAME.get_fqdn', return_value='\u6b63\u5b97')\n+    def test_non_ascii_dns_with_iso_encoding(self, mocked_getfqdn):\n+        \"\"\"\n+        Test that non-ASCII domain in Message-ID is encoded properly\n+        when email encoding is iso-8859-1.\n+        \"\"\"\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--fsq>', message['Message-ID'])\n+\n     def test_none_body(self):\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..1985d41 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,75 @@\n+\n+class ListDisplayCheckTests(CheckTestCase):\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+        \n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+    \n+    def test_field_with_invalid_value(self):\n+        class PositionField(Field):\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    return None\n+                \n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel, (\n+                \"The value of 'list_display[0]' refers to 'non_existent_field', \"\n+                \"which is not a callable, an attribute of 'TestModelAdmin', or \"\n+                \"an attribute or method on 'app_label.TestModel'.\"\n+            ), 'admin.E108'\n+        )\n+\n+    def test_field_is_m2m(self):\n+        class M2MPositionField(Field):\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+        class TestModel(Model):\n+            field = M2MPositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        # Simulate ManyToManyField scenario\n+        admin.E109 = 'admin.E109'\n+        \n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel, (\n+                \"The value of 'list_display[0]' must not be a ManyToManyField.\"\n+            ), 'admin.E109'\n+        )\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..013474b 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -11,9 +11,48 @@ from django.utils.deprecation import RemovedInDjango31Warning\n \n from .models import Article, Author, OrderedByFArticle, Reference\n \n+from datetime import datetime\n+from .models import ChildArticle\n \n class OrderingTests(TestCase):\n \n+    def test_order_by_parent_model_ordering_expressions(self):\n+        # Test ordering via F expressions in Meta.ordering\n+        ca1 = ChildArticle.objects.create(\n+            headline='h5',\n+            pub_date=datetime(2005, 7, 29),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h4',\n+            pub_date=datetime(2005, 7, 30),\n+            author=self.author_1,\n+        )\n+\n+        # Apply ordering by parent model's ordering\n+        articles = ChildArticle.objects.order_by()\n+\n+        # Ensure no crash occurs and verify the order is as expected if using the parent's default ordering\n+        self.assertSequenceEqual(articles, [ca2, ca1])\n+\n+    def test_order_by_expression_with_default_ordering_defined_in_meta(self):\n+        ca1 = OrderedByFArticle.objects.create(\n+            headline='h6',\n+            pub_date=datetime(2005, 7, 25),\n+            author=self.author_1,\n+        )\n+        ca2 = OrderedByFArticle.objects.create(\n+            headline='h7',\n+            pub_date=datetime(2005, 7, 24),\n+            author=self.author_2,\n+        )\n+\n+        # Attempt to order by the default ordering defined in Meta\n+        articles = OrderedByFArticle.objects.all()\n+\n+        # Check that articles are ordered according to the expression without errors\n+        self.assertSequenceEqual(articles, [ca2, ca1])\n+\n     @classmethod\n     def setUpTestData(cls):\n         cls.a1 = Article.objects.create(headline=\"Article 1\", pub_date=datetime(2005, 7, 26))\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..572bcea 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -403,6 +403,14 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(aggs['distinct_ratings'], 4)\n \n+    def test_avg_distinct_aggregate(self):\n+        books = Book.objects.aggregate(distinct_avg_rating=Avg('rating', distinct=True))\n+        self.assertEqual(books['distinct_avg_rating'], 4.125)\n+\n+    def test_sum_distinct_aggregate(self):\n+        books = Book.objects.aggregate(distinct_sum_rating=Sum('rating', distinct=True))\n+        self.assertEqual(books['distinct_sum_rating'], 16.5)\n+\n     def test_non_grouped_annotation_not_in_group_by(self):\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..0c4ffb1 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -45,22 +45,107 @@ class AutodetectorTests(TestCase):\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_null = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, null=True)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_longer = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=400)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_renamed = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"names\", models.CharField(max_length=200)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_default = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default='Ada Lovelace')),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_check_constraint = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n@@ -73,70 +158,325 @@ class AutodetectorTests(TestCase):\n         (\"date_time_of_birth\", models.DateTimeField(auto_now=True)),\n         (\"time_of_birth\", models.TimeField(auto_now=True)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_dates_of_birth_auto_now_add = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"date_of_birth\", models.DateField(auto_now_add=True)),\n         (\"date_time_of_birth\", models.DateTimeField(auto_now_add=True)),\n         (\"time_of_birth\", models.TimeField(auto_now_add=True)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_deconstructible_1 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject())),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_deconstructible_2 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject())),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_deconstructible_3 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=models.IntegerField())),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_deconstructible_4 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=models.IntegerField())),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_deconstructible_list_1 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=[DeconstructibleObject(), 123])),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_deconstructible_list_2 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=[DeconstructibleObject(), 123])),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_deconstructible_list_3 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=[DeconstructibleObject(), 999])),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_deconstructible_tuple_1 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=(DeconstructibleObject(), 123))),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_deconstructible_tuple_2 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=(DeconstructibleObject(), 123))),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_deconstructible_tuple_3 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=(DeconstructibleObject(), 999))),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_deconstructible_dict_1 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default={\n             'item': DeconstructibleObject(), 'otheritem': 123\n         })),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_deconstructible_dict_2 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default={\n             'item': DeconstructibleObject(), 'otheritem': 123\n         })),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_deconstructible_dict_3 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default={\n             'item': DeconstructibleObject(), 'otheritem': 999\n         })),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_nested_deconstructible_1 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject(\n@@ -146,6 +486,23 @@ class AutodetectorTests(TestCase):\n             b=DeconstructibleObject(B=DeconstructibleObject('c')),\n         ))),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_nested_deconstructible_2 = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject(\n@@ -155,6 +512,23 @@ class AutodetectorTests(TestCase):\n             b=DeconstructibleObject(B=DeconstructibleObject('c')),\n         ))),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_nested_deconstructible_changed_arg = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject(\n@@ -164,6 +538,23 @@ class AutodetectorTests(TestCase):\n             b=DeconstructibleObject(B=DeconstructibleObject('c')),\n         ))),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_nested_deconstructible_extra_arg = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject(\n@@ -174,6 +565,23 @@ class AutodetectorTests(TestCase):\n             b=DeconstructibleObject(B=DeconstructibleObject('c')),\n         ))),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_nested_deconstructible_changed_kwarg = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject(\n@@ -183,6 +591,23 @@ class AutodetectorTests(TestCase):\n             b=DeconstructibleObject(B=DeconstructibleObject('c-changed')),\n         ))),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_name_nested_deconstructible_extra_kwarg = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200, default=DeconstructibleObject(\n@@ -193,22 +618,90 @@ class AutodetectorTests(TestCase):\n             c=None,\n         ))),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_custom_pk = ModelState(\"testapp\", \"Author\", [(\"pk_field\", models.IntegerField(primary_key=True))])\n     author_with_biography_non_blank = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField()),\n         (\"biography\", models.TextField()),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_with_biography_blank = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(blank=True)),\n         (\"biography\", models.TextField(blank=True)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_with_book = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n         (\"book\", models.ForeignKey(\"otherapp.Book\", models.CASCADE)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_with_book_order_wrt = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n@@ -219,26 +712,111 @@ class AutodetectorTests(TestCase):\n         (\"name\", models.CharField(max_length=200)),\n         (\"book\", models.ForeignKey(\"otherapp.Book\", models.CASCADE)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_with_publisher_string = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n         (\"publisher_name\", models.CharField(max_length=200)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_with_publisher = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n         (\"publisher\", models.ForeignKey(\"testapp.Publisher\", models.CASCADE)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_with_user = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n         (\"user\", models.ForeignKey(\"auth.User\", models.CASCADE)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_with_custom_user = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=200)),\n         (\"user\", models.ForeignKey(\"thirdapp.CustomUser\", models.CASCADE)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_proxy = ModelState(\"testapp\", \"AuthorProxy\", [], {\"proxy\": True}, (\"testapp.author\",))\n     author_proxy_options = ModelState(\"testapp\", \"AuthorProxy\", [], {\n         \"proxy\": True,\n@@ -254,26 +832,128 @@ class AutodetectorTests(TestCase):\n     author_unmanaged_custom_pk = ModelState(\"testapp\", \"Author\", [\n         (\"pk_field\", models.IntegerField(primary_key=True)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_with_m2m = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"publishers\", models.ManyToManyField(\"testapp.Publisher\")),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_with_m2m_blank = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"publishers\", models.ManyToManyField(\"testapp.Publisher\", blank=True)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_with_m2m_through = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"publishers\", models.ManyToManyField(\"testapp.Publisher\", through=\"testapp.Contract\")),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_with_renamed_m2m_through = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"publishers\", models.ManyToManyField(\"testapp.Publisher\", through=\"testapp.Deal\")),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_with_former_m2m = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"publishers\", models.CharField(max_length=100)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     author_with_options = ModelState(\"testapp\", \"Author\", [\n         (\"id\", models.AutoField(primary_key=True)),\n     ], {\n@@ -297,33 +977,152 @@ class AutodetectorTests(TestCase):\n         (\"author\", models.ForeignKey(\"testapp.Author\", models.CASCADE)),\n         (\"publisher\", models.ForeignKey(\"testapp.Publisher\", models.CASCADE)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     contract_renamed = ModelState(\"testapp\", \"Deal\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"testapp.Author\", models.CASCADE)),\n         (\"publisher\", models.ForeignKey(\"testapp.Publisher\", models.CASCADE)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     publisher = ModelState(\"testapp\", \"Publisher\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"name\", models.CharField(max_length=100)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     publisher_with_author = ModelState(\"testapp\", \"Publisher\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"testapp.Author\", models.CASCADE)),\n         (\"name\", models.CharField(max_length=100)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     publisher_with_aardvark_author = ModelState(\"testapp\", \"Publisher\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"testapp.Aardvark\", models.CASCADE)),\n         (\"name\", models.CharField(max_length=100)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     publisher_with_book = ModelState(\"testapp\", \"Publisher\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"otherapp.Book\", models.CASCADE)),\n         (\"name\", models.CharField(max_length=100)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     other_pony = ModelState(\"otherapp\", \"Pony\", [\n         (\"id\", models.AutoField(primary_key=True)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     other_pony_food = ModelState(\"otherapp\", \"Pony\", [\n         (\"id\", models.AutoField(primary_key=True)),\n     ], managers=[\n@@ -331,6 +1130,23 @@ class AutodetectorTests(TestCase):\n         ('food_mgr', FoodManager('a', 'b')),\n         ('food_mgr_kwargs', FoodManager('x', 'y', 3, 4)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     other_stable = ModelState(\"otherapp\", \"Stable\", [(\"id\", models.AutoField(primary_key=True))])\n     third_thing = ModelState(\"thirdapp\", \"Thing\", [(\"id\", models.AutoField(primary_key=True))])\n     book = ModelState(\"otherapp\", \"Book\", [\n@@ -338,44 +1154,197 @@ class AutodetectorTests(TestCase):\n         (\"author\", models.ForeignKey(\"testapp.Author\", models.CASCADE)),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     book_proxy_fk = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"thirdapp.AuthorProxy\", models.CASCADE)),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     book_proxy_proxy_fk = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"testapp.AAuthorProxyProxy\", models.CASCADE)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     book_migrations_fk = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"migrations.UnmigratedModel\", models.CASCADE)),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     book_with_no_author = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     book_with_author_renamed = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"testapp.Writer\", models.CASCADE)),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     book_with_field_and_author_renamed = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"writer\", models.ForeignKey(\"testapp.Writer\", models.CASCADE)),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     book_with_multiple_authors = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"authors\", models.ManyToManyField(\"testapp.Author\")),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     book_with_multiple_authors_through_attribution = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"authors\", models.ManyToManyField(\"testapp.Author\", through=\"otherapp.Attribution\")),\n         (\"title\", models.CharField(max_length=200)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     book_indexes = ModelState(\"otherapp\", \"Book\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"author\", models.ForeignKey(\"testapp.Author\", models.CASCADE)),\n@@ -429,10 +1398,44 @@ class AutodetectorTests(TestCase):\n         (\"author\", models.ForeignKey(\"testapp.Author\", models.CASCADE)),\n         (\"book\", models.ForeignKey(\"otherapp.Book\", models.CASCADE)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     edition = ModelState(\"thirdapp\", \"Edition\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"book\", models.ForeignKey(\"otherapp.Book\", models.CASCADE)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     custom_user = ModelState(\"thirdapp\", \"CustomUser\", [\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"username\", models.CharField(max_length=255)),\n@@ -441,12 +1444,46 @@ class AutodetectorTests(TestCase):\n         (\"id\", models.AutoField(primary_key=True)),\n         (\"username\", models.CharField(max_length=255)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     aardvark = ModelState(\"thirdapp\", \"Aardvark\", [(\"id\", models.AutoField(primary_key=True))])\n     aardvark_testapp = ModelState(\"testapp\", \"Aardvark\", [(\"id\", models.AutoField(primary_key=True))])\n     aardvark_based_on_author = ModelState(\"testapp\", \"Aardvark\", [], bases=(\"testapp.Author\",))\n     aardvark_pk_fk_author = ModelState(\"testapp\", \"Aardvark\", [\n         (\"id\", models.OneToOneField(\"testapp.Author\", models.CASCADE, primary_key=True)),\n     ])\n+    \n+    app1 = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app'))\n+    ])\n+    \n+    app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+    ])\n+    \n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False, verbose_name='identifier')),\n+        (\"text\", models.CharField(max_length=100, verbose_name='text')),\n+    ])\n     knight = ModelState(\"eggs\", \"Knight\", [(\"id\", models.AutoField(primary_key=True))])\n     rabbit = ModelState(\"eggs\", \"Rabbit\", [\n         (\"id\", models.AutoField(primary_key=True)),\n@@ -661,7 +1698,15 @@ class AutodetectorTests(TestCase):\n         self.assertEqual([name for name, mgr in changes['otherapp'][0].operations[0].managers],\n                          ['food_qs', 'food_mgr', 'food_mgr_kwargs'])\n \n-    def test_old_model(self):\n+    def test_alter_uuid_to_fk_dependency(self):\n+        \"\"\"Test conversion of a UUIDField to a ForeignKey creates dependencies.\"\"\"\n+        changes = self.get_changes(\n+            [self.app1, self.app2],\n+            [self.app1_with_fk, self.app2],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, [\"AlterField\"])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [(\"testapp2\", \"__first__\")])\n         \"\"\"Tests deletion of old models.\"\"\"\n         changes = self.get_changes([self.author_empty], [])\n         # Right number/type of migrations?\n@@ -2399,4 +3444,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..8bc9e22 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -218,8 +218,26 @@ class CommandTests(SimpleTestCase):\n         out = StringIO()\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n+    from django.core.management import call_command\n+    from django.core.management.base import CommandError\n+    from io import StringIO\n \n-    def test_subparser_dest_args(self):\n+    def test_mutually_exclusive_group_by_kwargs(self):\n+        \"\"\"Test mutually exclusive group arguments by passing kwargs directly.\"\"\"\n+        out = StringIO()\n+        # Call with foo_id using kwargs.\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Call with foo_name using kwargs.\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Attempt to call without mutually exclusive group argument should raise CommandError\n+        with self.assertRaises(CommandError) as cm:\n+            call_command('mutually_exclusive_required', stdout=StringIO())\n+        self.assertIn('Error: one of the arguments --foo-id --foo-name is required', str(cm.exception))\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..13fa5fc 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,6 +437,15 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n+    def test_username_widget_max_length(self):\n+        form = AuthenticationForm()\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_widget_max_length_defaults_to_254(self):\n+        form = AuthenticationForm()\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n+\n     def test_username_field_label(self):\n \n         class CustomAuthenticationForm(AuthenticationForm):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..3ae63e1 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -251,8 +251,24 @@ class WriterTests(SimpleTestCase):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n+    def test_serialize_enum_name_in_migration(self):\n+        # Test case specifically designed to reproduce and test the solution for the reported issue\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('translated-value-a')\n+            B = _('translated-value-b')\n+\n+        # Simulate how the model's CharField will be defined\n+        field = models.CharField(default=TextTranslatedEnum.A, choices=[(m.value, m.name) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n \n-    def test_serialize_enums(self):\n+        # Ensure that the enum name is used in migrations, not the potentially translated value\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('translated-value-a', 'A'), \"\n+            \"('translated-value-b', 'B')], \"\n+            \"default='A')\"\n+        )\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..ac9cf78 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +317,36 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_two_digit_year_handling(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Define a series of mock current dates to test handling based on current year\n+        current_dates = [\n+            datetime(2019, 11, 6, 8, 49, 37),\n+            datetime(2020, 11, 6, 8, 49, 37),\n+            datetime(2048, 11, 6, 8, 49, 37),\n+            datetime(2070, 11, 6, 8, 49, 37),\n+        ]\n+\n+        test_cases = [\n+            ('31-Dec-69', 2069),\n+            ('10-Nov-70', 1970),\n+            ('06-Nov-94', 1994),\n+            ('31-Dec-68', 2068),  # New case to test year rolling to past\n+            ('31-Dec-50', 2050),  # New case to test year rolling to past\n+            ('31-Dec-99', 1999),  # Testing end of 20th century\n+        ]\n+\n+        for current_date in current_dates:\n+            for rfc850str, expected_year in test_cases:\n+                rfc850_date_str = f\"Monday, {rfc850str} 08:49:37 GMT\"\n+                expected_date = datetime(expected_year, int(rfc850str.split('-')[1]), int(rfc850str.split('-')[0]), 8, 49, 37)\n+                with self.subTest(rfc850str=rfc850_date_str, current_date=current_date):\n+                    mocked_datetime.utcnow.return_value = current_date\n+                    parsed = parse_http_date(rfc850_date_str)\n+                    self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11880": "",
  "django__django-11951": "",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..c511359 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,26 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from .models import (\n+    MyObject, MyChoice\n+)\n+\n+class EnumTypeTests(TestCase):\n+\n+    def setUp(self):\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_value_type_after_creation(self):\n+        # Test type directly after creation\n+        self.assertIsInstance(self.my_object.my_str_value, str)\n+        self.assertEqual(self.my_object.my_str_value, \"first\")\n+\n+    def test_value_type_after_retrieval(self):\n+        # Test type and value after retrieval from the database\n+        my_object_retrieved = MyObject.objects.get(pk=self.my_object.pk)\n+        self.assertIsInstance(my_object_retrieved.my_str_value, str)\n+        self.assertEqual(my_object_retrieved.my_str_value, \"first\")\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..d967437 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db import connection\n+from django.db.models import Index\n \n \n class SchemaIndexesTests(TestCase):\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..53153e4 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -10,6 +11,7 @@ from django.db.models.sql.query import Query\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n+from django.db.models import QuerySet\n \n from .models import Author, Item, ObjectC, Ranking\n \n@@ -107,7 +109,30 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_preserve_input_list_type_in_lookup_value(self):\n+        # Test to ensure list input is preserved as list in lookup rhs.\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b', 'c']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b', 'c'])\n+    \n+    def test_input_tuple_type_in_lookup_value(self):\n+        # Test to ensure tuple input is preserved as tuple in lookup rhs.\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('x', 'y', 'z')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('x', 'y', 'z'))\n+\n+    def test_support_other_iterables(self):\n+        # Test to ensure other iterables such as sets are not changed in type.\n+        query = Query(Item)\n+        input_set = {'alpha', 'beta'}\n+        where = query.build_where(Q(name=input_set))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, input_set)\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..ed4562e 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -844,7 +844,47 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n-    def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n+    def test_get_list_editable_queryset_with_regex_chars_in_prefix(self):\n+        \"\"\"Test formset prefixes with regex special characters are handled properly.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form*.-TOTAL_FORMS': '2',\n+            'form*.-INITIAL_FORMS': '2',\n+            'form*.-MIN_NUM_FORMS': '0',\n+            'form*.-MAX_NUM_FORMS': '1000',\n+            'form*.-0-uuid': str(a.pk),\n+            'form*.-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form*.')\n+        self.assertEqual(queryset.count(), 1)\n+\n+    def test_get_list_editable_queryset_with_varied_regex_chars(self):\n+        \"\"\"Test formset prefixes with different regex special characters are handled properly.\"\"\"\n+        b = Swallow.objects.create(origin='Swallow C', load=3, speed=3)\n+        Swallow.objects.create(origin='Swallow D', load=5, speed=4)\n+        data = {\n+            'form[1]-TOTAL_FORMS': '2',\n+            'form[1]-INITIAL_FORMS': '2',\n+            'form[1]-MIN_NUM_FORMS': '0',\n+            'form[1]-MAX_NUM_FORMS': '1000',\n+            'form[1]-0-uuid': str(b.pk),\n+            'form[1]-0-load': '12',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form[1]')\n+        self.assertEqual(queryset.count(), 1)\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n         Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..212d32d 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -95,7 +96,29 @@ class TestUtils(AdminDocsSimpleTestCase):\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n \n-    def test_parse_rst(self):\n+    def test_trim_docstring_with_content_on_first_line(self):\n+        \"\"\"\n+        Test trim_docstring with a docstring that has content on the first line.\n+        \"\"\"\n+        docstring = 'First line with text.\\n\\n    Second line.'\n+        expected_trimmed = 'First line with text.\\n\\nSecond line.'\n+        self.assertEqual(trim_docstring(docstring), expected_trimmed)\n+\n+    def test_trim_docstring_with_only_first_line(self):\n+        \"\"\"\n+        Test trim_docstring with a single line docstring.\n+        \"\"\"\n+        docstring = 'Single line.'\n+        expected_trimmed = 'Single line.'\n+        self.assertEqual(trim_docstring(docstring), expected_trimmed)\n+\n+    def test_trim_docstring_with_empty_lines(self):\n+        \"\"\"\n+        Test trim_docstring with empty docstring lines.\n+        \"\"\"\n+        docstring = '\\n\\nFirst line.\\n\\n    Second line.'\n+        expected_trimmed = 'First line.\\n\\nSecond line.'\n+        self.assertEqual(trim_docstring(docstring), expected_trimmed)\n         \"\"\"\n         parse_rst() should use `cmsreference` as the default role.\n         \"\"\"\n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..0040f23 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,15 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_splitarraywidget_with_booleanfield(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, True, False], {})\n+        subwidgets = context['widget']['subwidgets']\n+        \n+        self.assertEqual(subwidgets[0]['attrs'].get('checked'), None, \"First should not be checked\")\n+        self.assertEqual(subwidgets[1]['attrs'].get('checked'), True, \"Second should be checked\")\n+        self.assertEqual(subwidgets[2]['attrs'].get('checked'), None, \"Third should not be checked\")\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..00fb5eb 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -253,7 +253,12 @@ class SmallPKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n \n-class UUIDData(models.Model):\n+import uuid\n+from django.db import models\n+\n+class Sample(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+    name = models.CharField(blank=True, max_length=100)\n     data = models.UUIDField(primary_key=True)\n \n \n",
  "django__django-12262": "diff --git a/tests/template_tests/templatetags/inclusion.py b/tests/template_tests/templatetags/inclusion.py\nindex da4058d..0acc6c0 100644\n--- a/tests/template_tests/templatetags/inclusion.py\n+++ b/tests/template_tests/templatetags/inclusion.py\n@@ -124,6 +124,11 @@ def inclusion_two_params_from_template(one, two):\n     return {\"result\": \"inclusion_two_params_from_template - Expected result: %s, %s\" % (one, two)}\n \n \n+@register.simple_tag\n+def inclusion_keyword_only_default(*, kwarg=42):\n+    \"\"\"A test inclusion tag with a keyword-only argument.\"\"\"\n+    return {\"result\": f\"inclusion_keyword_only_default - Expected result: {kwarg}\"}\n+\n inclusion_two_params_from_template.anything = \"Expected inclusion_two_params_from_template __dict__\"\n \n \n",
  "django__django-12276": "diff --git a/tests/forms_tests/widget_tests/test_fileinput.py b/tests/forms_tests/widget_tests/test_fileinput.py\nindex c3ea9d6..b69638e 100644\n--- a/tests/forms_tests/widget_tests/test_fileinput.py\n+++ b/tests/forms_tests/widget_tests/test_fileinput.py\n@@ -14,7 +14,16 @@ class FileInputTest(WidgetTest):\n         self.check_html(self.widget, 'email', 'test@example.com', html='<input type=\"file\" name=\"email\">')\n         self.check_html(self.widget, 'email', '', html='<input type=\"file\" name=\"email\">')\n         self.check_html(self.widget, 'email', None, html='<input type=\"file\" name=\"email\">')\n+    def test_fileinput_use_required_attribute_with_initial(self):\n+        \"\"\"Test FileInput does not output 'required' attribute when initial data is set.\"\"\"\n+        widget = FileInput()\n+        \n+        # No initial data, 'required' should be True\n+        self.assertIs(widget.use_required_attribute(None), True)\n+        \n+        # With initial data, 'required' should be False\n+        self.assertIs(widget.use_required_attribute('somefile.txt'), False)\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), True)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)\n",
  "django__django-12304": "diff --git a/tests/template_tests/test_callables.py b/tests/template_tests/test_callables.py\nindex d71266b..eee79cd 100644\n--- a/tests/template_tests/test_callables.py\n+++ b/tests/template_tests/test_callables.py\n@@ -1,6 +1,7 @@\n+\n from unittest import TestCase\n \n-from django.template import Context, Engine\n+from django.template import Context, Engine, Template\n \n \n class CallableVariablesTests(TestCase):\n@@ -38,8 +39,27 @@ class CallableVariablesTests(TestCase):\n         t = self.engine.from_string('{{ my_doodad.the_value }}')\n         self.assertEqual(t.render(c), '42')\n         self.assertEqual(my_doodad.num_calls, 2)\n-\n-    def test_alters_data(self):\n+    \n+    def test_enum_in_template(self):\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', 'Freshman'\n+            SOPHOMORE = 'SO', 'Sophomore'\n+            JUNIOR = 'JR', 'Junior'\n+            SENIOR = 'SR', 'Senior'\n+        \n+        template = Template(\n+            '{% if student_year == YearInSchool.FRESHMAN.value %}Is a freshman{% endif %}'\n+        )\n+        context = Context({'YearInSchool': YearInSchool, 'student_year': 'FR'})\n+        output = template.render(context)\n+        self.assertEqual(output.strip(), 'Is a freshman')\n+\n+        template = Template(\n+            '{% if student_year == YearInSchool.SOPHOMORE.value %}Is a sophomore{% endif %}'\n+        )\n+        context = Context({'YearInSchool': YearInSchool, 'student_year': 'SO'})\n+        output = template.render(context)\n+        self.assertEqual(output.strip(), 'Is a sophomore')\n \n         class Doodad:\n             alters_data = True\n@@ -122,4 +142,4 @@ class CallableVariablesTests(TestCase):\n \n         # Double-check that the object was really never called during the\n         # template rendering.\n-        self.assertEqual(my_doodad.num_calls, 0)\n+        self.assertEqual(my_doodad.num_calls, 0)\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..ae52707 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -129,8 +129,60 @@ class UtilsTests(SimpleTestCase):\n             ('test_from_model', article.test_from_model()),\n             ('non_field', INSTANCE_ATTRIBUTE)\n         )\n+from django.db import models\n+from django.contrib.admin.utils import display_for_field\n+import unittest\n+\n+class TestDisplayForField(unittest.TestCase):\n+    empty_value = ''\n+\n+    def test_json_display_for_field(self):\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON.\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n+\n+    def test_json_display_with_none(self):\n+        display_value = display_for_field(None, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, self.empty_value)\n+\n+    def test_json_display_empty_dict(self):\n+        display_value = display_for_field({}, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, '{}')\n+\n+    def test_json_display_empty_list(self):\n+        display_value = display_for_field([], models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, '[]')\n+\n+    def test_json_display_empty_string(self):\n+        display_value = display_for_field('', models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, '\"\"')\n+\n+    def test_json_display_integer(self):\n+        display_value = display_for_field(123, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, '123')\n+\n+    def test_json_display_float(self):\n+        display_value = display_for_field(123.456, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, '123.456')\n+\n+    def test_json_display_false_boolean(self):\n+        display_value = display_for_field(False, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, 'false')\n+\n+    def test_json_display_true_boolean(self):\n+        display_value = display_for_field(True, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, 'true')\n \n-        mock_admin = MockModelAdmin()\n+    # Original code\n         for name, value in verifications:\n             field, attr, resolved_value = lookup_field(name, article, mock_admin)\n \n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..a0cf5d6 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1005,8 +1005,23 @@ class OtherModelTests(SimpleTestCase):\n             from_country = models.ForeignKey(Country, models.CASCADE)\n \n         self.assertEqual(ShippingMethod.check(), [])\n+    def test_mti_onetoonefield_ordering(self):\n+        # Testing the case where order of OneToOneField definitions affects behavior\n+        with self.assertRaisesMessage(ImproperlyConfigured, 'Add parent_link=True to invalid_models_tests.Picking.origin.'):\n+            class Document(models.Model):\n+                pass\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # Correct order with parent_link=True should not raise an exception\n+        class Document(models.Model):\n+            pass\n+        class Picking(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n \n-    def test_missing_parent_link(self):\n+        self.assertEqual(Picking.check(), [])\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Place(models.Model):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..0b908fc 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -248,10 +248,17 @@ class SecurityMiddlewareTest(SimpleTestCase):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n     @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n-    def test_referrer_policy_already_present(self):\n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_referrer_policy_default_same_origin(self):\n+        \"\"\"\n+        When the SECURE_REFERRER_POLICY is set to its new default 'same-origin',\n+        ensure the middleware adds the \"Referrer-Policy: same-origin\" header to the response.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n         \"\"\"\n         The middleware will not override a \"Referrer-Policy\" header already\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..51d3402 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,6 +13,7 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..5d3595b 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -4,6 +4,9 @@ import re\n from datetime import datetime, timedelta\n from importlib import import_module\n \n+from django.contrib.auth.models import Group\n+from django.forms import CheckboxSelectMultiple\n+\n import pytz\n \n from django import forms\n@@ -14,7 +17,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, ManyToManyField, UUIDField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -138,6 +141,52 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         self.assertEqual(f2.widget.attrs['maxlength'], '20')\n         self.assertEqual(f2.widget.attrs['size'], '10')\n \n+    def test_formfield_overrides_m2m_filter_widget(self):\n+        \"\"\"\n+        The autocomplete_fields, raw_id_fields, filter_vertical, and\n+        filter_horizontal widgets for ManyToManyFields may be overridden by\n+        specifying a widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_formfield_for_manytomany_respects_override(self):\n+        \"\"\"\n+        Custom widget overrides in formfield_for_manytomany should be respected.\n+        \"\"\"\n+        class GroupAdmin(admin.ModelAdmin):\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': CheckboxSelectMultiple},\n+            }\n+        ga = GroupAdmin(Group, admin.site)\n+        field = ga.formfield_for_manytomany(Group._meta.get_field('permissions'), request=None)\n+        self.assertIsInstance(field.widget, CheckboxSelectMultiple)\n+\n+    def test_defaults_do_not_override_custom_widget(self):\n+        \"\"\"\n+        Check that default behavior does not override custom widget choice.\n+        \"\"\"\n+        class CustomAdmin(admin.ModelAdmin):\n+            filter_horizontal = ['members']\n+\n+            def formfield_for_manytomany(self, db_field, request, **kwargs):\n+                form_field = super().formfield_for_manytomany(db_field, request, **kwargs)\n+                if db_field.name == 'members':\n+                    self.assertIsInstance(form_field.widget, CheckboxSelectMultiple)\n+                return form_field\n+\n+        ca = CustomAdmin(Band, admin.site)\n+\n+        with self.subTest(filter_type=\"filter_horizontal\"):\n+            field = ca.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+            self.assertIsInstance(field.widget, CheckboxSelectMultiple)\n+\n     def test_formfield_overrides_for_datetime_field(self):\n         \"\"\"\n         Overriding the widget for DateTimeField doesn't overrides the default\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..ebc81b0 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)  # Updated call without alias\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,15 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n+            \n+        # Additional test case\n+        sql_list_empty = connection.ops.sql_flush(\n+            no_style(),\n+            [],\n+            reset_sequences=True,\n+            allow_cascade=True,\n+        )\n+        connection.ops.execute_sql_flush(sql_list_empty)  # Flushing with empty list\n+        self.assertIs(Author.objects.exists(), False)\n+        self.assertIs(Book.objects.exists(), False)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..ea200b1 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,6 +2444,31 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n+\n \n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n@@ -2453,4 +2478,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..e265ed4 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -5,8 +5,10 @@ from operator import attrgetter\n \n from django.core.exceptions import FieldError\n from django.db import connection\n-from django.db.models import Exists, Max, OuterRef\n+from django.db.models import Exists, Max, OuterRef, Q\n+from django.db import models\n from django.db.models.functions import Substr\n+from django.test.utils import isolate_apps\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -194,7 +196,36 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    @isolate_apps('lookup')\n+    def test_in_bulk_with_uniqueconstraint(self):\n+        # Testing in_bulk on a model with UniqueConstraint, expecting success if a unique field is used.\n+        class UniqueConstraintModel(models.Model):\n+            code = models.CharField(max_length=10)\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['code'], name='unique_code_constraint'),\n+                ]\n+\n+        obj1 = UniqueConstraintModel.objects.create(code='A01')\n+        obj2 = UniqueConstraintModel.objects.create(code='A02')\n+        self.assertEqual(\n+            UniqueConstraintModel.objects.in_bulk(['A01', 'A02'], field_name='code'),\n+            {'A01': obj1, 'A02': obj2}\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_with_non_unique_uniqueconstraint(self):\n+        # Testing in_bulk on a model with non-unique field under UniqueConstraint, expecting ValueError.\n+        class NonUniqueConstraintModel(models.Model):\n+            barcode = models.CharField(max_length=20)\n+            title = models.CharField(max_length=100)\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['barcode'], name='unique_barcode_constraint', condition=Q(title__startswith='Special')),\n+                ]\n+\n+        with self.assertRaisesMessage(ValueError, \"in_bulk()'s field_name must be a unique field but 'title' isn't.\"):\n+            NonUniqueConstraintModel.objects.in_bulk(['SomeTitle'], field_name='title')\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..99d7729 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -893,7 +893,15 @@ class OtherModelTests(SimpleTestCase):\n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n \n-    def test_ordering_pointing_to_related_model_pk(self):\n+    def test_ordering_lookup_not_transform(self):\n+        class Model(models.Model):\n+            test = models.CharField(max_length=100)\n+\n+            class Meta:\n+                ordering = ('test__isnull',)\n+\n+        # Check that there are no system check errors for this model.\n+        self.assertEqual(Model.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..82260c4 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,28 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+    class ExpressionWrapperTests(SimpleTestCase):\n+        def test_empty_group_by(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+        def test_non_empty_group_by(self):\n+            expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+        def test_constant_expression_wrapped(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            # Simulate execution context where this would lead the query to include it in the GROUP BY\n+            group_by_cols = expr.get_group_by_cols(alias=None)\n+            self.assertEqual(group_by_cols, [], \"Constant expression should not appear in GROUP BY\")\n+\n+        def test_non_constant_expression_wrapped(self):\n+            expr = ExpressionWrapper(F('column_a'), output_field=IntegerField())\n+            group_by_cols = expr.get_group_by_cols(alias=None)\n+            self.assertGreaterEqual(len(group_by_cols), 1, \"Non-constant expression should appear in GROUP BY\")\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..89e03ab 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -342,6 +342,33 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+    \n+    def test_self_referential_fk_ordering(self):\n+        # Set up the models needed for the test\n+        one1 = OneModel.objects.create(oneval=2)\n+        one2 = OneModel.objects.create(root=one1, oneval=1)\n+        one3 = OneModel.objects.create(root=one2, oneval=3)\n+        \n+        # Create instances of TwoModel referencing OneModel\n+        two1 = TwoModel.objects.create(record=one1, twoval=100)\n+        two2 = TwoModel.objects.create(record=one2, twoval=200)\n+        two3 = TwoModel.objects.create(record=one3, twoval=300)\n+\n+        # Test ordering by the self-referential foreign key\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs, \n+            [two2, two3, two1],  # Expected order based on record__root_id ascending\n+            transform=lambda x: x\n+        )\n+        \n+        # Test alternative ordering to handle the DESC case\n+        qs_desc = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"-record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs_desc, \n+            [two1, two3, two2],  # Expected order based on record__root_id descending\n+            transform=lambda x: x\n+        )\n \n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n@@ -353,6 +380,33 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+    \n+    def test_self_referential_fk_ordering(self):\n+        # Set up the models needed for the test\n+        one1 = OneModel.objects.create(oneval=2)\n+        one2 = OneModel.objects.create(root=one1, oneval=1)\n+        one3 = OneModel.objects.create(root=one2, oneval=3)\n+        \n+        # Create instances of TwoModel referencing OneModel\n+        two1 = TwoModel.objects.create(record=one1, twoval=100)\n+        two2 = TwoModel.objects.create(record=one2, twoval=200)\n+        two3 = TwoModel.objects.create(record=one3, twoval=300)\n+\n+        # Test ordering by the self-referential foreign key\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs, \n+            [two2, two3, two1],  # Expected order based on record__root_id ascending\n+            transform=lambda x: x\n+        )\n+        \n+        # Test alternative ordering to handle the DESC case\n+        qs_desc = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by(\"-record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs_desc, \n+            [two1, two3, two2],  # Expected order based on record__root_id descending\n+            transform=lambda x: x\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..cfe9621 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -609,6 +609,28 @@ class BaseCacheTests:\n         for i in range(1, initial_count):\n             cull_cache.set('cull%d' % i, 'value', 1000)\n         count = 0\n+\n+    def test_none_type_issue_in_cull(self):\n+        \"\"\"Test to ensure _cull handles NoneType scenarios properly.\"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+\n+        # Set the cache to a state that requires culling\n+        cull_cache.clear()\n+        cull_cache._max_entries = 2\n+        cull_cache._cull_frequency = 1\n+\n+        # Insert enough entries to trigger culling\n+        cull_cache.set('key1', 'value1', timeout=50)\n+        cull_cache.set('key2', 'value2', timeout=50)\n+        cull_cache.set('key3', 'value3', timeout=50)  # This should trigger culling\n+\n+        # Ensure no errors occurred during culling\n+        self.assertIsNotNone(cull_cache.get('key3'))\n+\n+        cull_cache.clear()  # Clean up explicitly\n         # Count how many keys are left in the cache.\n         for i in range(1, initial_count):\n             if cull_cache.has_key('cull%d' % i):\n",
  "django__django-13109": "",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..c8bdd1e 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,29 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_reference_mixed_case_app_label(self):\n+        \"\"\"\n+        Test ForeignKey migration with a mixed-case app name.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, on_delete=models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..0e712ab 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1606,6 +1606,24 @@ class FTimeDeltaTests(TestCase):\n             output_field=DateTimeField(),\n         ))\n         self.assertIsNone(queryset.first().shifted)\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Test subtraction directly between two DateTimeField instances\n+        Experiment.objects.create(\n+            name='temp1',\n+            start=datetime.datetime(2023, 10, 1, 12, 0, 0),\n+            end=datetime.datetime(2023, 10, 1, 18, 0, 0)\n+        )\n+        Experiment.objects.create(\n+            name='temp2',\n+            start=datetime.datetime(2023, 10, 2, 8, 0, 0),\n+            end=datetime.datetime(2023, 10, 2, 20, 0, 0)\n+        )\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        results = [(e.name, e.delta) for e in queryset]\n+        self.assertEqual(results, [('temp1', datetime.timedelta(hours=6)), ('temp2', datetime.timedelta(hours=12))])\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n     def test_datetime_subquery_subtraction(self):\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..458774d 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,6 @@\n import operator\n \n+import operator\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -39,7 +40,19 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    @skipUnlessDBFeature('supports_select_difference')\n+    \n+    def test_union_none_behavior(self):\n+        # Test the behavior of QuerySet.none() on a union of queries\n+        qs1 = Number.objects.filter(num__lt=2)\n+        qs2 = Number.objects.filter(num__gt=8)\n+        qs_union = qs1.union(qs2)\n+        \n+        # Simulate the form submission case where no selections are made\n+        selected_items = qs_union.none()\n+        self.assertNumbersEqual(selected_items, [], ordered=True)\n+        \n+        # Ensure the union still maintains correct items when not using none()\n+        self.assertNumbersEqual(qs_union, [0, 1, 9], ordered=False)\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n         qs2 = Number.objects.filter(num__lte=4)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..9176166 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,7 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -312,7 +313,13 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n-    def test_decode_legacy(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        # Ensure legacy decode works with DEFAULT_HASHING_ALGORITHM set to 'sha1'\n+        data = {'a test key': 'a test value'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session._legacy_decode(encoded), data)\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n             'OWUzNTNmNWQxNTBjOWExZmM4MmQ3NzNhMDRmMjU4NmYwNDUyNGI2NDp7ImEgdGVzd'\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..2100ecc 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -8,6 +8,10 @@ from django.test import (\n from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n+from .models import Artist\n+from django.shortcuts import get_object_or_404\n+from django.urls import path\n+from django.views.generic import TemplateView\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n@@ -590,7 +594,21 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        \"\"\"Test SimpleLazyObject issue in TemplateView.get_context_data().\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+            def get_context_data(self, **kwargs):\n+                # Simulate acquiring a SimpleLazyObject in kwargs\n+                offer_slug = kwargs.get('offer_slug', '')\n+                offer = get_object_or_404(Artist, name=str(offer_slug))\n+                return {'offer': offer, 'offer_slug': offer_slug}\n+\n+        Artist.objects.create(name='Pablo Picasso')\n+        response = OfferView.as_view()(self.client.get('/offers/Pablo%20Picasso/'), offer_slug='Pablo%20Picasso')\n+        self.assertEqual(response.context_data['offer'].name, 'Pablo Picasso')\n+        self.assertEqual(response.context_data['offer_slug'], 'Pablo Picasso')\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..80f3dfd 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3,6 +3,8 @@ import os\n from decimal import Decimal\n from unittest import mock, skipUnless\n \n+from django.test.utils import isolate_apps\n+\n from django import forms\n from django.core.exceptions import (\n     NON_FIELD_ERRORS, FieldError, ImproperlyConfigured, ValidationError,\n@@ -2819,7 +2821,73 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action='2023-01-01')\n+        self.marley = Character.objects.create(username='Marley', last_action='2023-01-01')\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..35c6a0b 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, temp_storage, temp_storage_location, callable_storage\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -82,7 +82,20 @@ class FileSystemStorageTests(unittest.TestCase):\n         path, args, kwargs = storage.deconstruct()\n         self.assertEqual(kwargs, kwargs_orig)\n \n-    def test_lazy_base_url_init(self):\n+    def test_deconstruction_with_callable_storage(self):\n+        \"\"\"\n+        Deconstruction of FileField with callable storage should return the callable,\n+        not the evaluated storage instance.\n+        \"\"\"\n+        # Create an instance of Storage model, which uses callable_storage\n+        obj = Storage()\n+        \n+        # Deconstruct the FileField to see the storage argument\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        \n+        # The storage should be the original callable, not the evaluated storage\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n         \"\"\"\n         FileSystemStorage.__init__() shouldn't evaluate base_url.\n         \"\"\"\n",
  "django__django-13346": "",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..b62319a 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -20,6 +20,10 @@ from django.test import (\n from django.utils import timezone\n \n from ..models import Author, DTModel, Fan\n+import pytz\n+from datetime import datetime\n+from django.db.models import Count\n+from django.utils import timezone\n \n \n def truncate_to(value, kind, tzinfo=None):\n@@ -1133,7 +1137,41 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_with_tzinfo(self):\n+        # Create a test model with a datetime aware field\n+        start_datetime = datetime(2023, 10, 20, 15, 45)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime)\n+\n+        # Define different timezones\n+        new_york_tz = pytz.timezone(\"America/New_York\")\n+        london_tz = pytz.timezone(\"Europe/London\")\n+        \n+        # Annotate the model with TruncDate using timezone\n+        model = DTModel.objects.annotate(\n+            new_york_date=TruncDate('start_datetime', tzinfo=new_york_tz),\n+            london_date=TruncDate('start_datetime', tzinfo=london_tz)\n+        ).first()\n+\n+        # Assert the truncation and time zone conversion are done correctly\n+        self.assertEqual(model.new_york_date, start_datetime.astimezone(new_york_tz).date())\n+        self.assertEqual(model.london_date, start_datetime.astimezone(london_tz).date())\n+\n+    def test_trunctime_with_tzinfo(self):\n+        start_datetime = datetime(2023, 10, 20, 15, 45)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime)\n+\n+        sydney_tz = pytz.timezone('Australia/Sydney')\n+        tokyo_tz = pytz.timezone('Asia/Tokyo')\n+        \n+        model = DTModel.objects.annotate(\n+            sydney_time=TruncTime('start_datetime', tzinfo=sydney_tz),\n+            tokyo_time=TruncTime('start_datetime', tzinfo=tokyo_tz)\n+        ).first()\n+\n+        self.assertEqual(model.sydney_time, start_datetime.astimezone(sydney_tz).time())\n+        self.assertEqual(model.tokyo_time, start_datetime.astimezone(tokyo_tz).time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..537ce63 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,7 +103,35 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n-class ChoicesTests(SimpleTestCase):\n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+class FieldEqualityTests(SimpleTestCase):\n+    def test_abstract_inherited_fields_are_not_equal(self):\n+        \"\"\"\n+        Field instances from abstract models are not equal,\n+        even if they have the same field definition in their models.\n+        \"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ConcreteModel1(AbstractModel):\n+            pass\n+\n+        class ConcreteModel2(AbstractModel):\n+            pass\n+\n+        abstract_field = AbstractModel._meta.get_field('field')\n+        field_from_model1 = ConcreteModel1._meta.get_field('field')\n+        field_from_model2 = ConcreteModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(field_from_model1, field_from_model2, \n+                            \"Fields from different models should not be equal.\")\n+        self.assertNotEqual(hash(field_from_model1), hash(field_from_model2), \n+                            \"Hashes of fields from different models should not be equal.\")\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..1997b54 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -8,7 +9,7 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n@@ -169,6 +170,36 @@ class FileTests(unittest.TestCase):\n             test_file.seek(0)\n             self.assertEqual(test_file.read(), (content * 2).encode())\n \n+class FileLockTestCase(unittest.TestCase):\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f1, open(file_path, 'r') as f2:\n+            # Acquire exclusive lock on f1\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            # Fail to acquire exclusive lock on f2\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            # Fail to acquire shared lock on f2\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            # Unlock f1\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'r') as f1, open(file_path, 'r') as f2:\n+            # Acquire shared lock on f1\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            # Acquire shared lock on f2\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            # Unlock f1 and f2\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_lock_and_unlock_return_values(self):\n+        # Verify lock and unlock return correct values\n+        with tempfile.NamedTemporaryFile() as temp_file:\n+            self.assertTrue(locks.lock(temp_file, locks.LOCK_EX))\n+            self.assertTrue(locks.unlock(temp_file))\n+            self.assertFalse(locks.lock(temp_file, locks.LOCK_EX | locks.LOCK_NB))\n \n class NoNameFileTestCase(unittest.TestCase):\n     \"\"\"\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..e7d7aae 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,23 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('id'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('notes').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Annotation.objects.values('notes').annotate(num_notes=Count('id'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('notes').ordered, True)\n+\n+    def test_group_by_with_default_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('id'))\n+        self.assertIs(qs.ordered, False)\n+        qs_grouped = qs.values('notes').annotate(num_entries=Count('id'))\n+        self.assertIs(qs_grouped.ordered, False)\n+        self.assertIs(qs_grouped.order_by('notes').ordered, True)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..64d428b 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -335,6 +335,32 @@ class CommandTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 management.call_command('subparser_dest', subcommand='foo', bar=12)\n \n+    def test_management_command_flush_behavior(self):\n+        \"\"\"\n+        Test that the flush method on stdout works correctly in management commands.\n+        This is particularly relevant to commands like 'migrate' where output needs\n+        to be flushed to show progress.\n+        \"\"\"\n+        from io import StringIO\n+        from unittest import mock\n+        from django.core import management\n+\n+        class TestCommand(BaseCommand):\n+            def handle(self, **options):\n+                self.stdout.write(\"Starting migration...\")\n+                self.stdout.flush()\n+                self.stdout.write(\"Migration complete!\")\n+\n+        # Simulate the management command with mock stdout\n+        out = StringIO()\n+        command = TestCommand(stdout=out)\n+\n+        with mock.patch.object(out, 'flush', wraps=out.flush) as mocked_flush:\n+            command.handle()\n+            self.assertIn(\"Starting migration...\", out.getvalue())\n+            self.assertIn(\"Migration complete!\", out.getvalue())\n+            self.assertTrue(mocked_flush.called)\n+\n     def test_create_parser_kwargs(self):\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\n         epilog = 'some epilog text'\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..a521826 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models.with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +39,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..be8374d 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -9,6 +10,8 @@ from django.test import (\n )\n from django.test.utils import isolate_apps\n \n+from django.db.models import Q, UniqueConstraint\n+from django.apps import apps\n from .models import CustomUserNonUniqueUsername\n \n \n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..b845d7d 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,28 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_order_by_random_with_aggregation(self):\n+        \"\"\"Regression test for issue where order_by('?') breaks aggregation.\"\"\"\n+        t = Thing.objects.create()\n+        rs = [Related.objects.create(thing=t) for _ in range(2)]\n+\n+        queryset = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+        # Since order_by('?') should not affect the count, expect one result with count 2.\n+        result = list(queryset)\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(result[0]['rc'], 2)\n+\n+    def test_order_by_related_with_aggregation(self):\n+        \"\"\"Test that ordering by related model changes the grouping.\"\"\"\n+        t = Thing.objects.create()\n+        Related.objects.create(thing=t)\n+        Related.objects.create(thing=t)\n+\n+        queryset = Thing.objects.annotate(rc=Count('related')).order_by('related').values('id', 'rc')\n+        # Expecting to break grouping, so should return two results with count 1 each.\n+        result = list(queryset)\n+        self.assertEqual(len(result), 2)\n+        for res in result:\n+            self.assertEqual(res['rc'], 1)\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..64a42f0 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -801,8 +802,40 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+from collections import namedtuple\n \n class IterableLookupInnerExpressionsTests(TestCase):\n+\n+    def test_range_lookup_namedtuple(self):\n+        ceo = Employee.objects.create(firstname='Test', lastname='Employee', salary=50)\n+        c1 = Company.objects.create(name='Test Company', num_employees=60, num_chairs=100, ceo=ceo)\n+        c2 = Company.objects.create(name='Another Company', num_employees=150, num_chairs=200, ceo=ceo)\n+\n+        # Named tuple test for __range filter\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        filters = [\n+            EmployeeRange(minimum=51, maximum=100),\n+            EmployeeRange(minimum=101, maximum=200),\n+            EmployeeRange(minimum=151, maximum=200),  # edge case where it should fail\n+        ]\n+        \n+        # Correct range filter\n+        qs1 = Company.objects.filter(\n+            num_employees__range=filters[0],\n+        )\n+        self.assertQuerysetEqual(qs1, ['<Company: Test Company>'], ordered=False)\n+\n+        # Another range which does not include any result\n+        qs2 = Company.objects.filter(\n+            num_employees__range=filters[1],\n+        )\n+        self.assertQuerysetEqual(qs2, ['<Company: Another Company>'], ordered=False)\n+\n+        # Failed case: this should return empty queryset.\n+        qs3 = Company.objects.filter(\n+            num_employees__range=filters[2],\n+        )\n+        self.assertQuerysetEqual(qs3, [])\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..7ff82c4 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -28,10 +28,37 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from django.test.utils import captured_stderr, captured_stdout\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n \n+class ExecuteFromCommandLineTestCase(SimpleTestCase):\n+    def test_program_name_derived_from_custom_argv(self):\n+        \"\"\"\n+        Test that the program name is derived from the custom argv provided to\n+        execute_from_command_line, not from sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_different_sys_argv(self):\n+        \"\"\"\n+        Test that a different sys.argv doesn't affect the program name when custom argv is used.\n+        \"\"\"\n+        sys_args = [None, 'startapp']\n+        custom_args = ['my_admin', 'runserver']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', sys_args):\n+                execute_from_command_line(custom_args)\n+        self.assertIn('usage: my_admin runserver', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+\n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n",
  "django__django-13670": "",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..d9c1d85 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1024,6 +1024,24 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n+    def test_readonlypasswordhashfield_disabled_property(self):\n+        field = ReadOnlyPasswordHashField()\n+        # Check if the disabled attribute is set to True\n+        self.assertIs(field.disabled, True)\n+\n+    def test_form_with_readonlypasswordhashfield(self):\n+        class TestForm(forms.Form):\n+            password = ReadOnlyPasswordHashField()\n+\n+        form = TestForm(initial={'password': 'initial_hash_value'})\n+        # Ensure the form renders the password field with the correct initial value\n+        self.assertInHTML('<div id=\"id_password\">', form.as_p(), count=1)\n+        \n+        # Check the form cleaned_data uses initial value regardless of input tampering\n+        form = TestForm(data={'password': 'tampered_value'}, initial={'password': 'initial_hash_value'})\n+        self.assertTrue(form.is_valid())\n+        self.assertEqual(form.cleaned_data['password'], 'initial_hash_value')\n+\n \n class AdminPasswordChangeFormTest(TestDataMixin, TestCase):\n \n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..d5b0b41 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -118,6 +118,41 @@ class OptimizerTests(SimpleTestCase):\n                 migrations.CreateModel('Foo', fields=[], options={'verbose_name_plural': 'Foozes'}),\n             ]\n         )\n+    def test_create_model_and_remove_model_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [migrations.CreateModel('MyModel', fields=[])],\n+        )\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'verbose_name_plural': 'My Model plural',\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+            ],\n+        )\n \n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..d372c93 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,6 +1,9 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n+from django.utils.translation import gettext_lazy\n+from django.utils.functional import lazy\n from django.test import SimpleTestCase\n \n from ..utils import setup\n@@ -46,6 +49,27 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n \n class FunctionTests(SimpleTestCase):\n \n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..b4024d5 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -12,6 +12,8 @@ from django.db import (\n from django.db.backends.base.base import BaseDatabaseWrapper\n from django.db.backends.signals import connection_created\n from django.db.backends.utils import CursorWrapper\n+from django.db import connection, transaction, IntegrityError\n+from .models import SQLKeywordsModel\n from django.db.models.sql.constants import CURSOR\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..42d4d34 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,7 +1314,25 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n-class ManageRunserverMigrationWarning(TestCase):\n+class ManageRunserverSkipChecks(TestCase):\n+    \n+    def setUp(self):\n+        self.stdout = StringIO()\n+        self.cmd = RunserverCommand(stdout=self.stdout)\n+        \n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_with_skip_checks(self, mocked_check):\n+        call_command('runserver', use_reloader=False, skip_checks=True, stdout=self.stdout)\n+        output = self.stdout.getvalue()\n+        self.assertNotIn('Performing system checks...', output)\n+        mocked_check.assert_not_called()\n+\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_without_skip_checks(self, mocked_check):\n+        call_command('runserver', use_reloader=False, skip_checks=False, stdout=self.stdout)\n+        output = self.stdout.getvalue()\n+        self.assertIn('Performing system checks...', output)\n+        mocked_check.assert_called()\n \n     def setUp(self):\n         self.stdout = StringIO()\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..2480d67 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -272,6 +273,38 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n     async def test_async_and_sync_middleware_async_call(self):\n         response = await self.async_client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.content, b'OK')\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+    ])\n+    async def test_middleware_not_used_skips_async_call(self):\n+        # This test checks that SyncOnlyMiddleware gets effectively skipped,\n+        # and the AsyncOnlyMiddleware handles the request without problems.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'Async Only OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'MiddlewareNotUsed: \\'middleware_exceptions.middleware.SyncOnlyMiddleware\\'',\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.AsyncOnlyMiddleware',\n+        'middleware_exceptions.middleware.SyncOnlyMiddleware',\n+    ])\n+    async def test_middleware_not_used_async_chain_poison_check(self):\n+        # This test ensures that the 'poisoning' of the middleware chain does not occur\n+        # due to incorrect handler setup in presence of non-async-capable middleware.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'Async Only OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertIn(\n+            'MiddlewareNotUsed: \\'middleware_exceptions.middleware.SyncOnlyMiddleware\\'',\n+            [record.getMessage() for record in cm.records],\n+        )\n         self.assertEqual(response.status_code, 200)\n \n     @override_settings(MIDDLEWARE=[\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..c383381 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,8 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n+from importlib import reload\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n@@ -512,6 +515,37 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_loading_regular_package_no__file__(self):\n+        \"\"\"\n+        MigrationLoader should load migrations from regular packages without a __file__ attribute.\n+        This tests the environment simulating the absence of the __file__ attribute in frozen environments.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n+        loader = MigrationLoader(connection)\n+        \n+        # Simulate no __file__ attribute situation\n+        module_file = getattr(test_module, '__file__', None)\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        \n+        try:\n+            delattr(test_module, '__file__', None)\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            \n+            loader.load_disk()\n+            migrations = [\n+                name for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            if module_file is not None:\n+                test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..39ff42c 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -9,6 +9,7 @@ from unittest import mock\n \n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n+import mock\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n from django.db.utils import ConnectionHandler\n from django.test import (\n@@ -18,11 +19,9 @@ from django.test.utils import isolate_apps\n \n from ..models import Author, Item, Object, Square\n \n-try:\n-    from django.db.backends.sqlite3.base import check_sqlite_version\n-except ImproperlyConfigured:\n-    # Ignore \"SQLite is too old\" when running tests on another database.\n-    pass\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db.backends.sqlite3.base import check_sqlite_version\n+import sqlite3.dbapi2 as dbapi2\n \n \n @unittest.skipUnless(connection.vendor == 'sqlite', 'SQLite tests')\n@@ -36,7 +35,21 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_newer(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_check_sqlite_version_edge(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.9.0).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()  # Should not raise\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..af4c1df 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -159,13 +159,30 @@ class TestIterModulesAndFiles(SimpleTestCase):\n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n+\n+    @mock.patch('sys.argv', ['some_dir', 'runserver'])\n+    def test_run_as_directory(self):\n+        with mock.patch.dict('sys.modules', {'__main__': None}):\n+            with mock.patch('django.utils.autoreload.sys'):\n+                sys.modules['__main__'] = mock.Mock()\n+                sys.modules['__main__'].__spec__ = mock.Mock()\n+                sys.modules['__main__'].__spec__.parent = 'some_package'\n+                self.assertEqual(\n+                    autoreload.get_child_arguments(),\n+                    [sys.executable, '-m', 'some_package', 'runserver'],\n+                )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n             [sys.executable, '-m', 'django', 'runserver']\n         )\n \n-    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -174,6 +191,23 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n+\n+    @mock.patch('sys.argv', ['some_dir', 'runserver'])\n+    def test_run_as_directory(self):\n+        with mock.patch.dict('sys.modules', {'__main__': None}):\n+            with mock.patch('django.utils.autoreload.sys'):\n+                sys.modules['__main__'] = mock.Mock()\n+                sys.modules['__main__'].__spec__ = mock.Mock()\n+                sys.modules['__main__'].__spec__.parent = 'some_package'\n+                self.assertEqual(\n+                    autoreload.get_child_arguments(),\n+                    [sys.executable, '-m', 'some_package', 'runserver'],\n+                )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..9b04271 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -395,6 +395,36 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_explicit_inherited_pk_in_grandchild(self):\n+        class Grandparent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Parent(Grandparent):\n+            pass\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_explicit_pk_with_manual_inheritance(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(models.Model):\n+            id = Parent._meta.get_field('id')\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_inherited_pk_with_additional_primary_key(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            extra_id = models.AutoField(primary_key=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.BigAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -414,4 +444,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..e6bc2a4 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -298,7 +298,19 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n-        # ModelMultipleChoiceField\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Test to ensure ModelChoiceField includes value of invalid choice in error message.\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': '%(value)s IS INVALID CHOICE',\n@@ -307,4 +319,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..878b80d 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -7,6 +8,7 @@ from django.test import TestCase\n from django.utils.translation import gettext_lazy\n \n from .models import (\n+    ParentStringPrimaryKey, ChildStringPrimaryKeyParent,\n     Article, Category, Child, ChildNullableParent, City, Country, District,\n     First, Parent, Record, Relation, Reporter, School, Student, Third,\n     ToFieldChild,\n@@ -549,6 +551,27 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey()\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            child.parent.name = 'non-auto-pk'\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_before_assignment(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='pre-set-non-auto-pk')\n+            parent.save()\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n+\n     def test_fk_to_bigautofield(self):\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..566421a 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,25 @@\n+\n+class CustomAutoFieldTests(TestCase):\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that MyAutoField's from_db_value is called on instance creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that MyAutoField's from_db_value is called on bulk_create.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyAutoField, MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..d7716bd 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -815,6 +815,26 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n             [self.example_inc.ceo, self.max],\n         )\n+        \n+        # Test for commutative property of the & operator\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n+            [self.max],\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+            [self.max],\n+        )\n+        \n+        # Test for commutative property of the | operator\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            [self.example_inc.ceo, self.max],\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n+            [self.example_inc.ceo, self.max],\n+        )\n \n \n class IterableLookupInnerExpressionsTests(TestCase):\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..0d30137 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,26 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yield_in_post_process(self):\n+        \"\"\"\n+        Test that no file is yielded more than once during the post_process.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        options = {\n+            'interactive': False,\n+            'link': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+            'use_default_ignore_patterns': True\n+        }\n+        collectstatic_cmd.set_options(**options)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Verify that no file is yielded more than once\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..2ed858c 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -6,6 +7,7 @@ import copy\n import pickle\n \n from django.test import SimpleTestCase\n+import collections.abc\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n     MultiValueDictKeyError, OrderedSet,\n@@ -40,6 +42,30 @@ class OrderedSetTests(SimpleTestCase):\n         s.add(1)\n         self.assertIn(1, s)\n \n+    def test_reversed(self):\n+        # Test the basic functionality of reversed()\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        # Test the reversed() on an empty OrderedSet\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_non_integers(self):\n+        # Test the reversed() with a OrderedSet of strings\n+        s = reversed(OrderedSet(['a', 'b', 'c']))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), ['c', 'b', 'a'])\n+\n+    def test_reversed_mixed_types(self):\n+        # Test the reversed() with a OrderedSet of mixed types\n+        s = reversed(OrderedSet(['a', 1, 3.14, None]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [None, 3.14, 1, 'a'])\n+\n     def test_bool(self):\n         # Refs #23664\n         s = OrderedSet()\n",
  "django__django-14122": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex b2ec8af..dfb3798 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -429,6 +430,27 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(list(qs), [{'rating': 4.0, 'count': 2}])\n \n+    def test_group_by_excludes_ordering_fields(self):\n+        \"\"\"\n+        Meta.ordering fields must not be included in the GROUP BY clause when annotating.\n+        \"\"\"\n+        qs = Article.objects.values('author').annotate(count=Count('author')).order_by('author__name')\n+        self.assertCountEqual(list(qs), [\n+            {'author': self.a1.id, 'count': 1},\n+            {'author': self.a2.id, 'count': 1},\n+            {'author': self.a3.id, 'count': 1},\n+            {'author': self.a4.id, 'count': 1},\n+        ])\n+        \"\"\"\n+        An annotation not included in values() before an aggregate should be\n+        excluded from the group by clause.\n+        \"\"\"\n+        qs = (\n+            Book.objects.annotate(xprice=F('price')).filter(rating=4.0).values('rating')\n+                .annotate(count=Count('publisher_id', distinct=True)).values('count', 'rating').order_by('count')\n+        )\n+        self.assertEqual(list(qs), [{'rating': 4.0, 'count': 2}])\n+\n     def test_grouped_annotation_in_group_by(self):\n         \"\"\"\n         An annotation included in values() before an aggregate should be\n@@ -1339,4 +1361,4 @@ class AggregateTestCase(TestCase):\n             ('Wesley J. Chun', 1),\n             ('Stuart Russell', 1),\n             ('Peter Norvig', 2),\n-        ], lambda a: (a.name, a.contact_count), ordered=False)\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..26019a2 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -838,8 +838,13 @@ class BasicExpressionsTests(TestCase):\n             with self.subTest(conditions):\n                 self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n \n-\n-class IterableLookupInnerExpressionsTests(TestCase):\n+    def test_deconstruct_exists_expression(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..8be3de7 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,5 +1,7 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n+from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n \n@@ -67,6 +69,26 @@ class TestDefaultPK(SimpleTestCase):\n                 pass\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -83,6 +105,26 @@ class TestDefaultPK(SimpleTestCase):\n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..cb91e98 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -229,6 +229,13 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    # Newlines and tabs are not accepted at any position.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..b5d7fad 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,6 +1526,40 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.test import TestCase\n+from django.db.models import Count, Q\n+from myapp.models import Author, Book, PropertyGroup, Agent\n+\n+class QObjectOrTest(TestCase):\n+    def setUp(self):\n+        # Set up initial data for the test case\n+        self.property_groups = PropertyGroup.objects.create(name=\"Group1\")\n+        self.agent = Agent.objects.create(name=\"Agent1\")\n+        self.agent.property_groups.add(self.property_groups)\n+        self.agent.save()\n+\n+    def test_q_object_or_in_behavior(self):\n+        property_groups = PropertyGroup.objects.filter(agent=self.agent)\n+        queryset = Agent.objects.annotate(Count('property_groups'))\n+\n+        # This should now work without error since the issue is fixed\n+        results = queryset.filter(\n+            Q(property_groups__in=property_groups) | Q(property_groups__count=0)\n+        ).distinct()\n+\n+        self.assertEqual(results.count(), 1)  # Ensure correct filtering\n+\n+    def test_q_object_or_in_error_behavior(self):\n+        property_groups = PropertyGroup.objects.agent_groups(self.agent)\n+        queryset = Agent.objects.annotate(Count('property_groups'))\n+\n+        # This should raise an error due to the issue\n+        with self.assertRaises(django.db.utils.ProgrammingError):\n+            results = queryset.filter(\n+                Q(property_groups__in=property_groups)\n+                | Q(property_groups__count=0)\n+            ).distinct()\n+\n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..5d0e4ae 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -179,7 +179,21 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n-    def test_twelve_hour_format(self):\n+    def test_y_format_year_before_1000(self):\n+        # Test cases for year < 1000 for the 'Y' formatter\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+\n+    def test_y_format_year_edge_cases(self):\n+        # Test edge case around the millennia\n+        self.assertEqual(dateformat.format(datetime(1000, 1, 1), 'Y'), '1000')\n+        self.assertEqual(dateformat.format(datetime(9999, 12, 31), 'Y'), '9999')\n+\n+    def test_y_format_common_years(self):\n+        # Test with some common historical years\n+        self.assertEqual(dateformat.format(datetime(1066, 10, 14), 'Y'), '1066')  # Battle of Hastings\n+        self.assertEqual(dateformat.format(datetime(1776, 7, 4), 'Y'), '1776')   # American Independence\n+        self.assertEqual(dateformat.format(datetime(2023, 1, 1), 'Y'), '2023')   # Current year\n         tests = [\n             (0, '12'),\n             (1, '1'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..415b9c7 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,7 +38,36 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n-    def test_options_override_settings_proper_values(self):\n+    def test_prefer_non_deprecated_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n         settings_port = 444\n         options_port = 555\n         self.assertNotEqual(settings_port, options_port, 'test pre-req')\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..5f07d54 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2193,7 +2193,15 @@ class SchemaTests(TransactionTestCase):\n             if details['columns'] == ['name', 'birthday'] and details['unique'] and name != custom_constraint_name\n         ]\n         self.assertEqual(len(other_constraints), 1)\n-        # Drop the unique constraint\n+        # Test for the references_column issue\n+        with connection.schema_editor() as editor:\n+            # Create an Author model with a typo in field reference\n+            editor.create_model(Author)\n+        typo_constraint = UniqueConstraint(fields=['non_existent_field'], name='typo_uq')\n+        with connection.schema_editor() as editor:\n+            # Attempt to add the constraint with a typo should result in an error\n+            with self.assertRaises(FieldDoesNotExist):\n+                editor.add_constraint(Author, typo_constraint)\n         with connection.schema_editor() as editor:\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..41a2fb0 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -454,6 +454,12 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n         )\n \n \n+import io\n+from django.test import override_settings\n+from django.core.management import call_command\n+from django.contrib.staticfiles.management.commands.collectstatic import Command as CollectstaticCommand\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n class TestCollectionNoneHashStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..c0d0ed8 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -652,8 +652,42 @@ class ExecutorTests(MigrationTestBase):\n             (\"migrations\", \"0001_squashed_0002\"),\n             recorder.applied_migrations(),\n         )\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_unapply_squashed_migration_marks_correctly(self):\n+        \"\"\"Test that unapplying a squashed migration correctly marks it unapplied.\"\"\"\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+\n+        # Ensure the squashed migration is applied\n+        self.assertIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n \n-    # When the feature is False, the operation and the record won't be\n+        # Unapply the squashed migration\n+        executor.migrate([('migrations', None)])\n+\n+        # Ensure the squashed migration is marked as unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+    \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_unapply_individual_replacements(self):\n+        \"\"\"Test that unapplying individual migrations marks the squashed migration unapplied.\"\"\"\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        \n+        # Unapply the individual migrations\n+        executor.migrate([('migrations', '0001_initial')])\n+        executor.migrate([('migrations', '0002_second')])\n+\n+        # Ensure the squashed migration is marked as unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n     # performed in a transaction and the test will systematically pass.\n     @skipUnlessDBFeature('can_rollback_ddl')\n     def test_migrations_applied_and_recorded_atomically(self):\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..dc27ec4 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -250,10 +250,34 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for google.com/?q=! and see.',\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>! and see.'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Example link https://example.com/?param=1&amp;test=2. Check it out!',\n+                'Example link <a href=\"https://example.com/?param=1&amp;test=2\">https://example.com/?param=1&amp;test=2</a>. Check it out!'\n+            ),\n+            (\n+                'Visit www.example.org.</p>',\n+                'Visit <a href=\"http://www.example.org\">www.example.org</a>.</p>'\n+            ),\n             (\n                 lazystr('Search for google.com/?q=!'),\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Example link https://example.com/?param=1&amp;test=2. Check it out!',\n+                'Example link <a href=\"https://example.com/?param=1&amp;test=2\">https://example.com/?param=1&amp;test=2</a>. Check it out!'\n+            ),\n+            (\n+                'Visit www.example.org.</p>',\n+                'Visit <a href=\"http://www.example.org\">www.example.org</a>.</p>'\n+            ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n         )\n         for value, output in tests:\n",
  "django__django-14559": "",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..1e9d4f7 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,7 +984,24 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n-    def test_formset_iteration(self):\n+    def test_non_form_error_css_class(self):\n+        \"\"\"\n+        Test that a non-form error in a FormSet uses the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',\n+            'drinks-INITIAL_FORMS': '0',\n+            'drinks-MIN_NUM_FORMS': '0',\n+            'drinks-MAX_NUM_FORMS': '0',\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n         formset = ChoiceFormset()\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..125e323 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,34 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_bound_field_access_in_clean_fields(self):\n+        \"\"\"Ensure BaseForm._clean_fields accesses values through BoundField.\"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = forms.DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        form._clean_fields()\n+        cleaned_value = form.cleaned_data['dt']\n+        bound_field_initial = form['dt'].initial\n+\n+        self.assertEqual(cleaned_value, bound_field_initial)\n+\n+    def test_did_change_method_in_bound_field(self):\n+        \"\"\"Check if BoundField.did_change() correctly identifies unchanged data.\"\"\"\n+        class TestForm(forms.Form):\n+            field = forms.CharField(initial='initial_value')\n+\n+        form = TestForm({'field': 'initial_value'})\n+        bound_field = form['field']\n+\n+        self.assertFalse(bound_field._did_change())\n+\n+        form_with_change = TestForm({'field': 'changed_value'})\n+        changed_bound_field = form_with_change['field']\n+\n+        self.assertTrue(changed_bound_field._did_change())\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 6fb82ec..aa2223b 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -820,8 +820,33 @@ class ShadowingFieldsTests(SimpleTestCase):\n                 id='models.E006',\n             )\n         ])\n+    \n+    def test_field_name_clash_with_m2m_through(self):\n+        class Parent(models.Model):\n+            clash_id = models.IntegerField()\n+\n+        class Child(Parent):\n+            clash = models.ForeignKey('Child', models.CASCADE)\n+\n+        class Model(models.Model):\n+            parents = models.ManyToManyField(\n+                to=Parent,\n+                through='Through',\n+                through_fields=['parent', 'model'],\n+            )\n+\n+        class Through(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE)\n+            model = models.ForeignKey(Model, models.CASCADE)\n \n-    def test_multiinheritance_clash(self):\n+        self.assertEqual(Child.check(), [\n+            Error(\n+                \"The field 'clash' clashes with the field 'clash_id' from \"\n+                \"model 'invalid_models_tests.parent'.\",\n+                obj=Child._meta.get_field('clash'),\n+                id='models.E006',\n+            )\n+        ])\n         class Mother(models.Model):\n             clash = models.IntegerField()\n \n",
  "django__django-14752": "",
  "django__django-14765": "",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..3863063 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -237,6 +237,16 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_to_autoreloader(self):\n+        # Test that -X options are passed correctly to the child process\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n         del module.__spec__\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..b8ea000 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -199,6 +199,32 @@ class MethodDecoratorTests(SimpleTestCase):\n     \"\"\"\n     Tests for method_decorator\n     \"\"\"\n+    from functools import wraps\n+    from django.utils.decorators import method_decorator\n+\n+    def test_preserve_wrapper_assignments(self):\n+        \"\"\"Test that method_decorator preserves function wrapper assignments.\"\"\"\n+\n+        def sample_decorator(func):\n+            @wraps(func)\n+            def wrapper(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return wrapper\n+\n+        class TestClass:\n+            @method_decorator(sample_decorator)\n+            def test_method(self):\n+                \"\"\"Test Method Docstring\"\"\"\n+                return 'test'\n+\n+        instance = TestClass()\n+        method = instance.test_method\n+\n+        # Check if the original attributes are preserved\n+        self.assertEqual(method.__name__, 'test_method')\n+        self.assertEqual(method.__doc__, \"Test Method Docstring\")\n+        self.assertEqual(method(), 'test')\n+\n     def test_preserve_signature(self):\n         class Test:\n             @simple_dec_m\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..6b5249f 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5143,7 +5143,43 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin:admin_views_topping_add'))\n         self.assertEqual(response.status_code, 200)\n \n-    def test_readonly_manytomany_forwards_ref(self):\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields in the default admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        response = self.client.get(\n+            reverse('admin:admin_views_chapter_change', args=(chapter.pk,))\n+        )\n+        book_url = reverse('admin:admin_views_book_change', args=(chapter.book.pk,))\n+        self.assertContains(\n+            response,\n+            f'<div class=\"readonly\"><a href=\"{book_url}\">Book 1</a></div>',\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields in a custom admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 2',\n+            content='content',\n+            book=Book.objects.create(name='Book 2'),\n+        )\n+        response = self.client.get(\n+            reverse('custom_admin:admin_views_chapter_change', args=(chapter.pk,))\n+        )\n+        book_url = reverse('custom_admin:admin_views_book_change', args=(chapter.book.pk,))\n+        self.assertContains(\n+            response,\n+            f'<div class=\"readonly\"><a href=\"{book_url}\">Book 2</a></div>',\n+            html=True,\n+        )\n         topping = Topping.objects.create(name='Salami')\n         pizza = Pizza.objects.create(name='Americano')\n         pizza.toppings.add(topping)\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..94f2fb8 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,24 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        # Create ModelChoiceIteratorValue instances\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        \n+        # Test hash consistency\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+        \n+        # Test usage in set\n+        choices_set = {value_1, value_2}\n+        self.assertIn(value_1, choices_set)\n+        self.assertIn(value_2, choices_set)\n+        \n+        # Test usage as dictionary keys\n+        choices_dict = {value_1: \"Choice 1\", value_2: \"Choice 2\"}\n+        self.assertEqual(choices_dict[value_1], \"Choice 1\")\n+        self.assertEqual(choices_dict[value_2], \"Choice 2\")\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..9498783 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -790,6 +790,28 @@ class OperationTests(OperationTestBase):\n         rider = Rider.objects.create()\n         pony.riders.add(rider)\n         self.assertEqual(Pony.objects.count(), 2)\n+\n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..18738b0 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -171,6 +171,46 @@ class ChangeListTests(TestCase):\n         row_html = build_tbody_html(new_child.id, link, '<td class=\"field-parent nowrap\">-</td>')\n         self.assertNotEqual(table_output.find(row_html), -1, 'Failed to find expected row element: %s' % table_output)\n \n+    def test_search_with_excessive_joins(self):\n+        \"\"\"\n+        Test that searching with multiple words does not produce excessive joins.\n+        \"\"\"\n+        parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=parent, name='Danielle', age=18)\n+        Child.objects.create(parent=parent, name='Daniel', age=19)\n+\n+        m = ParentAdminTwoSearchFields(Parent, custom_site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'danielle daniel 18 19'})\n+        request.user = self.superuser\n+        \n+        with CaptureQueriesContext(connection) as context:\n+            cl = m.get_changelist_instance(request)\n+            self.assertEqual(cl.queryset.count(), 0)\n+            join_count = context.captured_queries[0]['sql'].count('JOIN')\n+            # Assert that the number of JOINs is reasonable, not exceeding expected count\n+            self.assertLessEqual(join_count, 4, f\"Excessive JOINs in query: {join_count}\")\n+\n+    def test_search_with_single_result(self):\n+        \"\"\"\n+        Ensure that filtering directly by a related field with multiple search terms\n+        results in a single join and correct queryset filtering.\n+        \"\"\"\n+        parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=parent, name='Danielle', age=18)\n+        child = Child.objects.create(parent=parent, name='Daniel', age=19)\n+\n+        m = ParentAdminTwoSearchFields(Parent, custom_site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'Daniel 19'})\n+        request.user = self.superuser\n+\n+        with CaptureQueriesContext(connection) as context:\n+            cl = m.get_changelist_instance(request)\n+            self.assertEqual(cl.queryset.count(), 1)\n+            self.assertEqual(cl.queryset.first(), parent)\n+            join_count = context.captured_queries[0]['sql'].count('JOIN')\n+            # Assert only one join is used, indicating optimized querying\n+            self.assertEqual(join_count, 1)\n+\n     def test_result_list_set_empty_value_display_on_admin_site(self):\n         \"\"\"\n         Empty value display can be set on AdminSite.\n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..3cee8b4 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,3 +1,4 @@\n+\n from django.test import SimpleTestCase\n \n from ..utils import setup\n@@ -5,7 +6,10 @@ from ..utils import setup\n \n class JsonScriptTests(SimpleTestCase):\n \n-    @setup({'json-tag01': '{{ value|json_script:\"test_id\" }}'})\n+    @setup({'json-tag02': '{{ value|json_script }}'})\n+    def test_without_id(self):\n+        output = self.engine.render_to_string('json-tag02', {'value': {}})\n+        self.assertEqual(output, '<script type=\"application/json\">{}</script>')\n     def test_basic(self):\n         output = self.engine.render_to_string(\n             'json-tag01',\n@@ -16,4 +20,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..893d26c 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2834,8 +2834,42 @@ class AutodetectorTests(TestCase):\n                     expected_number,\n                 )\n \n+class MigrationAutodetectorTestCase(TestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_rename_custom_foreign_key_field(self):\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        before.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('renamed_custom', CustomFKField(on_delete=models.CASCADE))]))\n \n-class MigrationSuggestNameTests(SimpleTestCase):\n+        changes = MigrationAutodetector(before, after)._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameField'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, model_name='TestModel', old_name='custom', new_name='renamed_custom')\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..f5135f1 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,8 +1,9 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n from django.contrib.messages.storage import base, default_storage\n-from django.contrib.messages.storage.base import Message\n+from django.contrib.messages.storage.base import Message, LEVEL_TAGS\n from django.http import HttpRequest, HttpResponse\n from django.test import modify_settings, override_settings\n from django.urls import reverse\n@@ -361,6 +362,30 @@ class BaseTests:\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n \n+    @override_settings(MESSAGE_TAGS={\n+        constants.INFO: 'test-info',\n+        constants.DEBUG: 'test-debug',\n+        constants.WARNING: 'test-warning',\n+        constants.ERROR: 'test-error',\n+        constants.SUCCESS: 'test-success',\n+    })\n+    def test_override_settings_level_tags_reflected_in_storage(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        # Test that LEVEL_TAGS reflects the override\n+        expected_tags = {\n+            constants.INFO: 'test-info',\n+            constants.DEBUG: 'test-debug',\n+            constants.WARNING: 'test-warning',\n+            constants.ERROR: 'test-error',\n+            constants.SUCCESS: 'test-success',\n+            # custom level for verification\n+            12: 'custom',\n+        }\n+        self.assertEqual(LEVEL_TAGS, expected_tags)\n+        self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n+\n     def test_level_tag(self):\n         storage = self.get_storage()\n         storage.level = 0\n",
  "django__django-15128": "",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..0cdf7c7 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1754,6 +1754,13 @@ class ValueTests(TestCase):\n         Time.objects.create()\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n+    \n+    def test_deconstruct_F_expression(self):\n+        f_expression = F('field_name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, (f_expression.name,))\n+        self.assertEqual(kwargs, {})\n \n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..d173faf 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,35 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_optimize_alter_foo_together(self):\n+        \"\"\"\n+        Ensure that separate AlterFooTogether operations are optimized into one.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+        optimized_operations = self.optimizer.optimize(operations, app_label=\"migrations\")\n+        # Verify that the operations are optimized to a single AlterUniqueTogether and AlterIndexTogether\n+        self.assertEqual(len(optimized_operations), 2)\n+        self.assertIsInstance(optimized_operations[0], migrations.AlterUniqueTogether)\n+        self.assertIsInstance(optimized_operations[1], migrations.AlterIndexTogether)\n+        self.assertEqual(optimized_operations[0].unique_together, {(\"col\",)})\n+        self.assertEqual(optimized_operations[1].index_together, {(\"col\",)})\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..930f0f6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1852,6 +1852,32 @@ class ValueTests(TestCase):\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get broken validators\n+        that throw an exception during clean.\n+        \"\"\"\n+        value_types = [\n+            'test',  # str\n+            True,    # bool\n+            42,      # int\n+            3.14,    # float\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                # Ensure that validators do not raise exceptions\n+                if hasattr(field, 'validators'):\n+                    for validator in field.validators:\n+                        validator(value)  # This should not raise an exception\n+\n \n class ExistsTests(TestCase):\n     def test_optimizations(self):\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..41638be 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -624,6 +624,29 @@ class SchemaTests(TransactionTestCase):\n         # Make sure the values were transformed correctly\n         self.assertEqual(Author.objects.extra(where=[\"thing = 1\"]).count(), 2)\n \n+    def test_add_field_o2o_nullable_with_unique(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField with unique constraint on SQLite.\n+        This test verifies that adding such a field does not crash with OperationalError.\n+        \"\"\"\n+        # Create the models in the database\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        \n+        # Define the new OneToOneField with unique constraint\n+        new_field = OneToOneField(Note, CASCADE, null=True, unique=True)\n+        new_field.set_attributes_from_name('note')\n+        \n+        # Add the field to the Author model\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        \n+        # Verify the field was added and is nullable\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])  # Ensure it is nullable\n+\n     def test_add_field_binary(self):\n         \"\"\"\n         Tests binary fields get a sane default (#22851)\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..affc093 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -80,7 +80,50 @@ class BasicFieldTests(SimpleTestCase):\n         f = Foo._meta.get_field('a')\n         self.assertEqual(str(f), 'model_fields.Foo.a')\n \n-    def test_field_ordering(self):\n+    def test_hash_immutability(self):\n+        \"\"\"\n+        Test that the hash of a field is immutable before and after being\n+        assigned to a model.\n+        \"\"\"\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_field_in_dict_before_and_after_assignment(self):\n+        \"\"\"\n+        Test that a field can be used as a key in a dictionary before\n+        and after being assigned to a model class.\n+        \"\"\"\n+        field = models.CharField(max_length=200)\n+        field_dict = {field: 'initial value'}\n+        \n+        self.assertIn(field, field_dict)\n+\n+        class AnotherModel(models.Model):\n+            title = field\n+\n+        self.assertIn(field, field_dict)\n+        self.assertEqual(field_dict[field], 'initial value')\n+\n+    def test_field_hash_remains_constant(self):\n+        \"\"\"\n+        Test that the hash value of the field remains constant even when\n+        the field is used across multiple model classes.\n+        \"\"\"\n+        field = models.IntegerField()\n+        initial_hash = hash(field)\n+\n+        class ModelA(models.Model):\n+            number = field\n+\n+        class ModelB(models.Model):\n+            number = field\n+\n+        self.assertEqual(initial_hash, hash(field))\n         \"\"\"Fields are ordered based on their creation.\"\"\"\n         f1 = models.Field()\n         f2 = models.Field(auto_created=True)\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..b599609 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,7 +204,22 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+    def test_f_expression_plain_case(self):\n+        notes = [\n+            Note.objects.create(note='test_note', misc='test_misc')\n+            for _ in range(10)\n+        ]\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n+\n+    def test_f_expression_self_ref(self):\n+        obj = SelfRef.objects.create(name='ref_name', c8='initial')\n+        obj.c8 = F('name')\n+        SelfRef.objects.bulk_update([obj], ['c8'])\n+        obj.refresh_from_db()\n+        self.assertEqual(obj.c8, 'ref_name')\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..74a9a67 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,6 +1049,30 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n+    def test_rename_model_and_field_simultaneously(self):\n+        \"\"\"Test renaming a model and a field simultaneously.\"\"\"\n+        original_state = [ModelState('testapp', 'OriginalModel', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('name', models.CharField(max_length=200)),\n+        ])]\n+        new_state = [ModelState('testapp', 'RenamedModel', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('renamed_name', models.CharField(max_length=200)),\n+        ])]\n+        changes = self.get_changes(\n+            original_state,\n+            new_state,\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='OriginalModel', new_name='RenamedModel',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+\n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..8c5c43d 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,31 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import Manager, MyModel\n+\n+class ExistsSubqueryTests(TestCase):\n+    def test_negated_empty_exists_with_filtered_queryset(self):\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()), name='test')\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_negated_empty_exists_without_additional_conditions(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()))\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_double_negated_empty_exists(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(~~Exists(Manager.objects.none()), pk=manager.pk)\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_negated_exists_with_non_empty_queryset(self):\n+        manager = Manager.objects.create()\n+        related_qs = Manager.objects.filter(pk=manager.pk)\n+        qs = Manager.objects.filter(~Exists(related_qs))\n+        self.assertSequenceEqual(qs, [])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..6b10e70 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -27,6 +27,10 @@ from django.db.models import (\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n+from django.contrib.admin import ModelAdmin\n+from django.contrib.admin.sites import AdminSite\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n \n from .models import (\n     Advisor,\n@@ -141,7 +145,23 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n         self.assertIsNone(ff.empty_label)\n \n-    def test_many_to_many(self):\n+    def test_foreignkey_radio_fields_respects_empty_label(self):\n+        class Band(models.Model):\n+            name = models.CharField(max_length=100)\n+            parent = models.ForeignKey('self', null=True, blank=True, on_delete=models.SET_NULL)\n+\n+        class BandAdmin(ModelAdmin):\n+            radio_fields = {'parent': admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+                if db_field.name == 'parent':\n+                    kwargs['empty_label'] = \"Custom Empty Label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        band_admin = BandAdmin(Band, AdminSite())\n+        formfield = band_admin.formfield_for_dbfield(Band._meta.get_field('parent'), request=None)\n+\n+        self.assertEqual(formfield.empty_label, \"Custom Empty Label\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..b95054f 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -127,9 +127,58 @@ class OptimizerTests(SimpleTestCase):\n                     \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n                 ),\n             ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n         )\n \n-    def test_create_model_and_remove_model_options(self):\n+    def test_create_model_and_alter_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"TestModel\",\n+                    fields=[],\n+                    managers=[],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"TestModel\",\n+                    managers=[\n+                        (\"primary\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"TestModel\",\n+                    fields=[],\n+                    managers=[\n+                        (\"primary\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+        )\n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel(\n@@ -137,6 +186,11 @@ class OptimizerTests(SimpleTestCase):\n                     fields=[],\n                     options={\"verbose_name\": \"My Model\"},\n                 ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n                 migrations.AlterModelOptions(\"MyModel\", options={}),\n             ],\n             [migrations.CreateModel(\"MyModel\", fields=[])],\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/models.py b/tests/fixtures_regress/models.py\nindex 6245d2f..2ea51fd 100644\n--- a/tests/fixtures_regress/models.py\n+++ b/tests/fixtures_regress/models.py\n@@ -15,6 +15,37 @@ class Animal(models.Model):\n         return self.name\n \n \n+from django.db import models\n+\n+class Person(models.Model):\n+    name = models.CharField(max_length=255, unique=True)\n+\n+    def natural_key(self):\n+        return (self.name,)\n+\n+    class Meta:\n+        app_label = 'fixtures_regress'\n+\n+\n+class NaturalKeyWithFKDependencyManager(models.Manager):\n+    def get_by_natural_key(self, name, author):\n+        return self.get(name=name, author__name=author)\n+\n+\n+class NaturalKeyWithFKDependency(models.Model):\n+    name = models.CharField(max_length=255)\n+    author = models.ForeignKey(Person, models.CASCADE)\n+    objects = NaturalKeyWithFKDependencyManager()\n+\n+    class Meta:\n+        unique_together = [\"name\", \"author\"]\n+        app_label = 'fixtures_regress'\n+\n+    def natural_key(self):\n+        return (self.name,) + self.author.natural_key()\n+\n+    natural_key.dependencies = [\"fixtures_regress.Person\"]\n+\n class Plant(models.Model):\n     name = models.CharField(max_length=150)\n \n",
  "django__django-15561": "",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..031dff6 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -324,8 +324,16 @@ class LookupTests(TestCase):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n \n+    def test_unregister_lookup_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n \n-class BilateralTransformTests(TestCase):\n+        # Register a lookup to populate the cache\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister the lookup and ensure the cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n     def test_bilateral_upper(self):\n         with register_lookup(models.CharField, UpperBilateralTransform):\n             author1 = Author.objects.create(name=\"Doe\")\n",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..a7e9961 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -76,7 +76,30 @@ class TemplateReloadTests(SimpleTestCase):\n             },\n         )\n \n-    @mock.patch(\"django.template.loaders.base.Loader.reset\")\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_path(self):\n+        self.assertEqual(autoreload.get_template_directories(), set())\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", str(ROOT) + \"/absolute_str\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_mixed_paths(self):\n+        self.assertSetEqual(\n+            autoreload.get_template_directories(),\n+            {ROOT / \"absolute_str\"}\n+        )\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..e4cd014 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -5,6 +6,7 @@ from unittest import mock\n from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n+import inspect\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n from django.test import (\n     SimpleTestCase,\n@@ -737,6 +739,12 @@ class ManagerTest(SimpleTestCase):\n         )\n \n \n+class TestManagerMethodSignature(TestCase):\n+    def test_bulk_create_signature(self):\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        actual_signature = str(inspect.signature(Person.objects.bulk_create))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n class SelectOnSaveTests(TestCase):\n     def test_select_on_save(self):\n         a1 = Article.objects.create(pub_date=datetime.now())\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..9a2579f 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,8 +1,11 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n \n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n@@ -74,7 +77,18 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_with_lazy(self):\n+        \"\"\"\n+        Test get_format function with a lazy string to ensure it doesn't raise\n+        a TypeError and functions correctly.\n+        \"\"\"\n+        lazy_date_format = gettext_lazy(\"DATE_FORMAT\")\n+        self.assertEqual(get_format(lazy_date_format), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy_string_in_template(self):\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..f8f2100 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,9 +398,36 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+from django.test import TestCase\n+from django.db import models\n+from django.core.management import BaseCommand\n+from django.utils.deconstruct import deconstructible\n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n-class ProxyModelAdminTests(TestCase):\n+# Models to mimic the issue scenario\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(ProxyCustomModel, on_delete=models.SET_NULL, null=True, blank=True)\n+\n+class TestProxyModel(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.custom = ProxyCustomModel.objects.create(name=\"Proxy\")\n+        cls.another = AnotherModel.objects.create(custom=cls.custom)\n+\n+    def test_only_select_related_with_proxy(self):\n+        \"\"\"Test QuerySet.only() after select_related() on proxy model.\"\"\"\n+        try:\n+            objs = list(AnotherModel.objects.select_related(\"custom\").only(\"custom__name\"))\n+            self.assertEqual(len(objs), 1)\n+            self.assertEqual(objs[0].custom.name, \"Proxy\")\n+        except Exception as e:\n+            self.fail(f\"Test failed due to unexpected exception: {e}\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.superuser = AuthUser.objects.create(is_superuser=True, is_staff=True)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..5ef2fb7 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_order(self):\n+        # Test the order of parameters and dbname in the args list\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..9cbaaf4 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -32,7 +32,29 @@ class FloatformatTests(SimpleTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_inputs(self):\n+    def test_decimal_precision(self):\n+        # Test case from the original issue\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        # Additional test cases to ensure precision is maintained\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.00000000000000000001\"), 20),\n+            \"0.00000000000000000001\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"999999999999999999.99999999999999999999\"), 20),\n+            \"999999999999999999.99999999999999999999\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.000000000000000000\"), 18),\n+            \"1.000000000000000000\",\n+        )\n         self.assertEqual(floatformat(7.7), \"7.7\")\n         self.assertEqual(floatformat(7.0), \"7\")\n         self.assertEqual(floatformat(0.7), \"0.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..7d79b12 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -413,6 +413,17 @@ class CaseExpressionTests(TestCase):\n             )\n         )\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n+\n+    def test_annotate_with_negated_empty_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        # Verify that all objects are annotated with \"selected\"\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n     def test_combined_expression(self):\n",
  "django__django-15987": "",
  "django__django-16032": "",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..faa0fcc 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..d5766b3 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2379,6 +2379,18 @@ class MakeMigrationsTests(MigrationTestBase):\n             )\n             self.assertIn(\"operations=[]\" if HAS_BLACK else \"operations=[\\n]\", content)\n \n+    def test_makemigrations_check_no_migrations_created(self):\n+        \"\"\"\n+        makemigrations --check should not create any migrations \n+        and should exit with a non-zero status if changes are detected.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            self.assertFalse(os.path.exists(tmpdir))\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Ensure no migration files were created\n+            self.assertFalse(os.listdir(tmpdir))\n+        \n     def test_makemigrations_with_invalid_custom_name(self):\n         msg = \"The migration name must be a valid Python identifier.\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..dc109ba 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,10 +7,12 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n+import asyncio\n \n from .models import SimpleModel\n \n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..4eff33d 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,6 @@\n-import datetime\n+\n+import urllib.parse\n+from django.urls import reverse\n import re\n from unittest import mock\n \n@@ -892,6 +894,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field_with_fix(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        expected_pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, expected_pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..705086e 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,6 +1600,22 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_runserver_with_zero_ip(self, *mocked_objects):\n+        self.output = StringIO()\n+        call_command(\n+            \"runserver\",\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n+\n     def test_runner_hostname(self):\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..e13e341 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -505,6 +505,18 @@ class HTTPSitemapTests(SitemapTestsBase):\n             \"</urlset>\"\n         )\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_lastmod_no_items(self):\n+        # Test case for sitemap with callable lastmod and no items.\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content_index = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            \"<sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\\n\"\n+            \"</sitemapindex>\"\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..7e99864 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,10 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "",
  "django__django-16429": "",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..104b1c3 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,6 +469,26 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n+class SubparserErrorFormattingTests(SimpleTestCase):\n+    def test_missing_subparser_argument(self):\n+        from django.core.management import call_command\n+        from django.core.management.base import CommandError\n+\n+        # Verify correct error output when missing subparser argument\n+        with self.assertRaises(CommandError) as cm:\n+            call_command(\"subparser\", \"foo\")\n+        self.assertIn(\"the following arguments are required: bar\", str(cm.exception))\n+\n+    def test_invalid_subparser_argument_type(self):\n+        from django.core.management import call_command\n+        from django.core.management.base import CommandError\n+\n+        # Verify correct error output for invalid argument type\n+        with self.assertRaises(CommandError) as cm:\n+            call_command(\"subparser\", \"foo\", \"twelve\")\n+        self.assertIn(\"argument bar: invalid int value: 'twelve'\", str(cm.exception))\n+\n+\n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..cdf2503 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -104,6 +104,22 @@ class FunctionTests(SimpleTestCase):\n             # Invalid suffix.\n             self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n \n+    def test_zero_string_float(self):\n+        # These test cases are specifically for the issue where floatformat crashes on \"0.00\"\n+        from decimal import Decimal\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+        self.assertEqual(floatformat(\"0.00\", -1), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), -1), \"0\")\n+    \n+    def test_edge_cases(self):\n+        # Additional test cases to ensure robustness\n+        from decimal import Decimal\n+        self.assertEqual(floatformat(\"0.0000000000\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.0000000000\"), 1), \"0.0\")\n+        self.assertEqual(floatformat(\"123456789.000000001\", 0), \"123456789\")\n+        self.assertEqual(floatformat(\"123456789.000000001\", 2), \"123456789.00\")\n+\n     def test_zero_values(self):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..edf9c5f 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -91,8 +91,16 @@ class GetStorageClassTests(SimpleTestCase):\n             get_storage_class(\"django.core.files.storage.FileSystemStorage\"),\n \n \n+from django.core.files.storage import FileSystemStorage, default_storage\n+\n class FileSystemStorageTests(unittest.TestCase):\n     def test_deconstruction(self):\n+        \"\"\"\n+        Test deconstruction for a callable returning default_storage.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n         path, args, kwargs = temp_storage.deconstruct()\n         self.assertEqual(path, \"django.core.files.storage.FileSystemStorage\")\n         self.assertEqual(args, ())\n@@ -1010,6 +1018,12 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         self.assertIsInstance(obj.storage_callable_class.storage, BaseStorage)\n \n     def test_deconstruction(self):\n+        \"\"\"\n+        Test deconstruction for a callable returning default_storage.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n         \"\"\"\n         Deconstructing gives the original callable, not the evaluated value.\n         \"\"\"\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..1b0b967 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..7553166 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -67,7 +67,33 @@ class BaseConstraintTests(SimpleTestCase):\n         )\n         self.assertEqual(c.get_violation_error_message(), \"custom base_name message\")\n \n-    def test_custom_violation_error_message_clone(self):\n+    def test_custom_violation_code_message(self):\n+        constraint = models.CheckConstraint(\n+            check=models.Q(price__lt=10),\n+            name=\"lt_10\",\n+            violation_error_code=\"price_low\",\n+        )\n+        invalid_product = Product(price=20, discounted_price=5)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"price_low\")\n+        self.assertEqual(\n+            repr(constraint),\n+            \"<CheckConstraint: check=(AND: ('price__lt', 10)) name='lt_10' \"\n+            \"violation_error_code='price_low'>\"\n+        )\n+\n+    def test_validate_with_custom_violation_error_code(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price_check\",\n+            violation_error_code=\"price_violation\"\n+        )\n+        invalid_product = Product(price=5, discounted_price=10)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"price_violation\")\n         constraint = BaseConstraint(\n             name=\"base_name\",\n             violation_error_message=\"custom %(name)s message\",\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..0b67d22 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,23 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+        # Test case for issue with add_fields() when index is None\n+        from django import forms\n+\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(\n+            initial=None,\n+        )\n+        # Ensure that the empty_form does not contain a \"DELETE\" field, which was causing the issue.\n+        self.assertNotIn(\"DELETE\", my_formset.empty_form.fields)\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..a07901c 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,52 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_alter_field(self):\n+        # Test that consecutive AlterField operations collapse into the last one\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=256)),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128)),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, help_text=\"help\")),\n+                migrations.AlterField(\n+                    \"book\", \n+                    \"title\", \n+                    models.CharField(max_length=128, help_text=\"help\", default=None)\n+                ),\n+            ],\n+            [\n+                migrations.AlterField(\n+                    \"book\", \n+                    \"title\", \n+                    models.CharField(max_length=128, help_text=\"help\", default=None)\n+                )\n+            ]\n+        )\n+\n+    def test_multiple_alter_fields_with_intermediate_operations(self):\n+        # Test that an intermediate operation prevents collapsing of AlterField\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=256)),\n+                migrations.AddField(\"author\", \"name\", models.CharField(max_length=100)),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128)),\n+            ]\n+        )\n+\n+    def test_alter_with_other_model_operations(self):\n+        # Test that operations on different models do not affect the optimization\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=256)),\n+                migrations.AlterField(\"author\", \"name\", models.CharField(max_length=150)),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128)),\n+            ],\n+            [\n+                migrations.AlterField(\"author\", \"name\", models.CharField(max_length=150)),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128)),\n+            ]\n+        )\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..6cd9aac 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,21 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        \n+    def test_mime_type_for_br_and_Z_files(self):\n+        \"\"\"\n+        Test that files with .br and .Z extensions have the correct MIME type.\n+        \"\"\"\n+        test_tuples = (\n+            (\".br\", \"application/x-brotli\"),\n+            (\".Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..d84a347 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -153,6 +153,55 @@ class ModelAdminTests(TestCase):\n         self.assertIs(\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n+    \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+        \n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+        \n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+        \n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+        \n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+        \n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True)\n+\n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_disallowed_scenarios(self):\n+        class City(models.Model):\n+            name = models.CharField(max_length=256)\n+        \n+        class State(models.Model):\n+            city = models.ForeignKey(City, models.CASCADE)\n+        \n+        class Hotel(models.Model):\n+            state = models.OneToOneField(State, models.CASCADE, primary_key=True)\n+\n+        class Staff(models.Model):\n+            hotel = models.ForeignKey(Hotel, models.CASCADE)\n+        \n+        class StaffAdmin(ModelAdmin):\n+            list_filter = [\n+                \"hotel__state__city\",\n+                \"hotel__state__city__name\",\n+            ]\n+        \n+        sa = StaffAdmin(Staff, self.site)\n+        self.assertIs(sa.lookup_allowed(\"hotel__state__city__code\", \"XYZ\"), False)\n+        self.assertIs(sa.lookup_allowed(\"hotel__state__city__unknown\", \"unknown_value\"), False)\n \n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..9b6f603 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,33 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_ordering_with_multiple_standard_and_django_imports(self):\n+        \"\"\"\n+        Test that imports are correctly ordered with standard and Django imports.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ],\n+                \"dependencies\": [],\n+                \"replaces\": None,\n+                \"initial\": False,\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Imports should be sorted: standard library imports first, followed by Django imports.\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..3ee137a 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1157,4 +1157,61 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n+\n+    def test_multiple_add_remove_index(self):\n+        # Test case to check optimization for multiple add/remove index operations\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\", \"blue\"], name=\"idx_pony_height_blue\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height_blue\"),\n+            ],\n+            [],\n+        )\n+\n+    def test_interleaved_add_remove_index(self):\n+        # Test case to check optimization when add/remove index operations are interleaved with other operations\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RenameIndex(\n+                    \"Pony\", new_name=\"mid_name\", old_name=\"old_name\"\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\", \"blue\"], name=\"idx_pony_height_blue\"\n+                    ),\n+                ),\n+                migrations.RenameIndex(\n+                    \"Pony\", new_name=\"new_name\", old_fields=(\"height\", \"blue\")\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height_blue\"),\n+            ],\n+            [\n+                migrations.RenameIndex(\n+                    \"Pony\", new_name=\"mid_name\", old_name=\"old_name\"\n+                ),\n+                migrations.RenameIndex(\n+                    \"Pony\", new_name=\"new_name\", old_fields=(\"height\", \"blue\")\n+                ),\n+            ],\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..c54cdef 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -798,8 +798,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n-                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n             )\n@@ -814,8 +815,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n-                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n+                \"not a callable, an attribute of 'CityInline', or an attribute of \"\n+                \"'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n             )\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..4ffac7e 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -43,7 +44,41 @@ class XorLookupsTests(TestCase):\n             self.numbers[3:8],\n         )\n \n-    def test_stages(self):\n+    def test_parity_xor_three_conditions(self):\n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+        )\n+        self.assertCountEqual(\n+            qs,\n+            [self.numbers[1], self.numbers[2], self.numbers[5], self.numbers[6], self.numbers[7], self.numbers[8], self.numbers[9]],\n+        )\n+\n+    def test_parity_xor_four_conditions(self):\n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+            ^ Q(num__gte=7)\n+        )\n+        self.assertCountEqual(\n+            qs,\n+            [self.numbers[0], self.numbers[3], self.numbers[4], self.numbers[7], self.numbers[8], self.numbers[9]],\n+        )\n+\n+    def test_parity_xor_five_conditions(self):\n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+            ^ Q(num__gte=7)\n+            ^ Q(num__gte=9)\n+        )\n+        self.assertCountEqual(\n+            qs,\n+            [self.numbers[1], self.numbers[2], self.numbers[5], self.numbers[6], self.numbers[9]],\n+        )\n         numbers = Number.objects.all()\n         self.assertSequenceEqual(\n             numbers.filter(num__gte=0) ^ numbers.filter(num__lte=11),\n@@ -64,4 +99,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "diff --git a/django/apps/registry.py b/django/apps/registry.py\nindex ca85962..61b5345 100644\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -376,6 +376,7 @@ class Apps:\n         # Call expire cache on each model. This will purge\n         # the relation tree and the fields cache.\n         self.get_models.cache_clear()\n+        self.get_swappable_settings_name.cache_clear()\n         if self.ready:\n             # Circumvent self.get_models() to prevent that the cache is refilled.\n             # This particularly prevents that an empty value is cached while cloning.\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..195f44e 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -298,7 +298,44 @@ class PaginationTests(SimpleTestCase):\n             paginator.get_page(1)\n \n \n-class ModelPaginationTests(TestCase):\n+class PaginatorIterationTests(TestCase):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_single_page_paginator(self):\n+        paginator = Paginator([1], 2)\n+        page_iterator = iter(paginator)\n+        self.assertEqual([1], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_multiple_full_pages(self):\n+        paginator = Paginator([1, 2, 3, 4, 5, 6], 2)\n+        expected_pages = [[1, 2], [3, 4], [5, 6]]\n+        page_iterator = iter(paginator)\n+        for expected in expected_pages:\n+            self.assertEqual(expected, list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_partial_final_page(self):\n+        paginator = Paginator([1, 2, 3, 4, 5], 2)\n+        expected_pages = [[1, 2], [3, 4], [5]]\n+        page_iterator = iter(paginator)\n+        for expected in expected_pages:\n+            self.assertEqual(expected, list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n     \"\"\"\n     Test pagination with Django model instances\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..d375912 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,38 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Original test to ensure range with density is respected\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_large_data_range_and_density():\n+    # Large dataset\n+    _, bins, _ = plt.hist(np.random.rand(1000), 50, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_negative_range_and_density():\n+    # Range with negative numbers\n+    _, bins, _ = plt.hist(np.random.randn(100), 20, range=(-2, 2), density=True)\n+    assert bins[0] == -2\n+    assert bins[-1] == 2\n+\n+def test_hist_mismatched_range_and_data():\n+    # Data outside range\n+    _, bins, _ = plt.hist(np.random.rand(100) * 2, 30, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_without_density():\n+    # Ensure without density, the same behavior is consistent\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6398,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..3c9f2ec 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -918,6 +918,37 @@ def test_hexbin_log():\n     plt.colorbar(h)\n \n \n+def test_inverting_log_scale_axes():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    # Test inverting log scale y-axis.\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+\n+    # Verify plotting still works with inverted log scale.\n+    y = np.linspace(0.1, 10, 100)\n+    x = np.exp(-y)\n+    ax.plot(x, y)\n+    assert ax.get_ylim() == (10, 1)\n+\n+    # Test inverting both x and y axes for completeness.\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"log\")\n+    ax.set_yscale(\"log\")\n+    ax.set_xlim(10, 1)\n+    ax.set_ylim(100, 10)\n+    assert ax.get_xlim() == (10, 1)\n+    assert ax.get_ylim() == (100, 10)\n+    \n+    x = np.linspace(0.1, 10, 100)\n+    y = np.exp(x)\n+    ax.plot(x, y)\n+    assert ax.get_xlim() == (10, 1)\n+    assert ax.get_ylim() == (100, 10)\n+\n def test_inverted_limits():\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..c404433 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,8 +6960,31 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_shared_axes_retick():\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_after_clear(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without using clear\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure where clear is used\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+        \n+    # Ensure tick labels on shared axes are properly handled\n+    for a, b in zip(axs_ref.flat, axs_test.flat):\n+        assert a.get_xticks().tolist() == b.get_xticks().tolist(), \"X-ticks do not match\"\n+        assert a.get_yticks().tolist() == b.get_yticks().tolist(), \"Y-ticks do not match\"\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..c93cc84 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -307,8 +307,27 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert y_units is ax.yaxis.units\n \n \n-def test_hist():\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted when passing empty data.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    ax.plot([], [])\n+\n+def test_no_conversion_error_on_empty_data():\n+    \"\"\"\n+    Test to ensure that no ConversionError is raised when empty data is passed.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"c\", \"d\"])\n+    try:\n+        ax.convert_xunits([])\n+    except Exception as e:\n+        raise AssertionError(f\"Unexpected exception raised: {e}\")\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..28ff033 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -918,8 +918,34 @@ def test_proportional_colorbars():\n                                      extend=extends[i])\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n+import pytest\n \n-def test_negative_boundarynorm():\n+@pytest.mark.parametrize(\"extend, coloroffset, res\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, res):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                    drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), res))\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n \n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..f25f1d5 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,13 +490,24 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+from matplotlib import rc_context, get_backend\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n \n-def test_rcparams_reset_after_fail():\n+def test_backend_no_fig_clearing():\n+    # Test that get_backend() doesn't clear figures in Gcf if they are created inside an rc_context\n+    with rc_context():\n+        fig = plt.figure()\n+    initial_figs = plt._pylab_helpers.Gcf.get_num_fig_managers()\n+    _ = get_backend()\n+    after_figs = plt._pylab_helpers.Gcf.get_num_fig_managers()\n+    assert initial_figs == after_figs, f'Initial: {initial_figs}, After: {after_figs}'\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..9ebba1f 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -11,10 +11,28 @@ from matplotlib import colors as mcolors\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_set_visible(fig_test, fig_ref):\n+    # Create a figure with two 3D subplots\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax2 = fig_test.add_subplot(122, projection='3d')\n+    \n+    # Plot something on both axes\n+    ax1.scatter([1], [1], [1])\n+    ax2.scatter([1], [1], [1], color='r')\n+    \n+    # Set the first subplot invisible\n+    ax1.set_visible(False)\n+\n+    # In the reference figure, only plot on the second axes\n+    ax = fig_ref.add_subplot(111, projection='3d')\n+    ax.scatter([1], [1], [1], color='r')\n+\n from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n \n \n mpl3d_image_comparison = functools.partial(\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..42d3d11 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -156,8 +156,31 @@ def test_negative_rect():\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n+import matplotlib.pyplot as plt\n+import matplotlib.patches as patches\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_render(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.5, 0.5)\n+    width, height = (1.0, 1.0)\n+\n+    # Reference rectangles with known offsets\n+    ref_rect1 = patches.Rectangle(loc, width, height, linewidth=2, edgecolor='g', linestyle=(0, (5, 2)))\n+    ref_rect2 = patches.Rectangle(loc, width, height, linewidth=2, edgecolor='m', linestyle=(3, (5, 2)))\n+    \n+    ax_ref.add_patch(ref_rect1)\n+    ax_ref.add_patch(ref_rect2)\n+\n+    # Test rectangles, should have the same appearance as the reference\n+    test_rect1 = patches.Rectangle(loc, width, height, linewidth=2, edgecolor='g', linestyle=(0, (5, 2)))\n+    test_rect2 = patches.Rectangle(loc, width, height, linewidth=2, edgecolor='m', linestyle=(3, (5, 2)))\n \n-@image_comparison(['clip_to_bbox'])\n+    ax_test.add_patch(test_rect1)\n+    ax_test.add_patch(test_rect2)\n def test_clip_to_bbox():\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..f0e2fd2 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,9 +2866,28 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-\n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n-def test_stackplot_baseline():\n+def test_stackplot_color_cycler():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n+\n+    # Define the data and the colors using the 'CN' notation\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    \n+    # Use a color from the cycler for the plot\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    \n+    # Use a color from the cycler for the rectangle\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    \n+    # Apply the stackplot with colors using 'CN' notation\n+    try:\n+        ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+        print(\"Test passed: Stackplot accepted CN colors without altering the cycler.\")\n+    except ValueError as e:\n+        print(\"Test failed: Stackplot raised ValueError for CN colors.\")\n+        raise e\n     np.random.seed(0)\n \n     def layers(n, m):\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..6beecc9 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,20 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import numpy as np\n+import pytest\n+from matplotlib import colors as mcolors\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+import matplotlib as mpl\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_warning(dtype):\n+    cm = mpl.colormaps[\"viridis\"]\n+    with np.errstate(over='ignore'):\n+        assert_array_equal(cm(dtype(0)), cm(0))\n+    with np.errstate(over='ignore'):\n+        assert_array_equal(cm(dtype(255)), cm(255))\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..d9bbb4e 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -623,7 +623,30 @@ class TestSpectral:\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n-    def test_psd_window_hanning_detrend_linear(self):\n+    def test_psd_window_flattop(self):\n+        if self.NFFT_density is None:\n+            return\n+        \n+        # Create flattop window and verify window correction\n+        window = signal.windows.flattop(self.NFFT_density_real)\n+        ydata = np.arange(self.NFFT_density)\n+        ycontrol = np.zeros(self.NFFT_density)\n+        ydata_f = np.tile(ydata, (20, 1)).flatten()\n+        ycontrol_f = np.tile(ycontrol, (20, 1)).flatten()\n+\n+        spec_c, fsp_c = mlab.psd(x=ycontrol_f,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=window)\n+        spec_c *= len(ydata)/(window**2).sum()\n+\n+        # Recalculate using the adjusted correction factor\n+        expected_window_correction = (window.sum()**2) / (window**2).sum()\n+        assert_allclose(spec_c * expected_window_correction,\n+                        spec_c * self.Fs * (window**2).sum(),\n+                        atol=1e-08)\n         if self.NFFT_density is None:\n             return\n         ydata = np.arange(self.NFFT_density)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..d23689f 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,33 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..4284c1e 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,29 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    ax.plot(time, speed, label='speed')\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure that FigureCanvasAgg is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Load the pickled figure to ensure no errors in unpickling\n+    loaded_fig = pickle.loads(pkl)\n+    assert loaded_fig is not None\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..92634a3 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -42,9 +42,34 @@ def test_simple():\n     plt.plot(np.arange(10))\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n+import matplotlib.pyplot as plt  # Add any necessary imports if not already present\n+import pickle\n+import numpy as np\n+from io import BytesIO\n \n-\n-def _generate_complete_test_figure(fig_ref):\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    \n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # This line was causing the pickling issue\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        # If no exception is raised, check if pickle_data is not None\n+        assert pickle_data is not None\n+    except Exception as e:\n+        # If an exception is caught, fail the test with the exception message\n+        assert False, f\"Pickling failed with exception: {e}\"\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..a90cc1b 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,6 +991,47 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n \n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..42c8107 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -99,10 +99,39 @@ def test_contour_Nlevels():\n     cs2 = ax.contour(z, levels=5)\n     assert (cs1.levels == cs2.levels).all()\n \n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+from matplotlib import pyplot as plt\n+import numpy as np\n \n-@pytest.mark.parametrize(\"split_collections\", [False, True])\n-@image_comparison(['contour_manual_labels'], remove_text=True, style='mpl20', tol=0.26)\n-def test_contour_manual_labels(split_collections):\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_change(fig_test, fig_ref):\n+    # Test the change of paths using set_paths()\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    x, y = np.meshgrid(np.linspace(-3, 3, 100), np.linspace(-3, 3, 100))\n+    z = np.sin(np.sqrt(x**2 + y**2))\n+\n+    cs_test = ax_test.contour(x, y, z)\n+    cs_ref = ax_ref.contour(x, y, -z)\n+\n+    # Modify the paths of cs_test with those of cs_ref\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_no_change(fig_test, fig_ref):\n+    # Test without changing any paths to ensure the method works without side effects\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    x, y = np.meshgrid(np.linspace(-3, 3, 100), np.linspace(-3, 3, 100))\n+    z = np.sin(np.sqrt(x**2 + y**2))\n+\n+    cs_test = ax_test.contour(x, y, z)\n+    cs_ref = ax_ref.contour(x, y, z)\n+\n+    # Keep paths the same\n+    cs_test.set_paths(cs_test.get_paths())\n     x, y = np.meshgrid(np.arange(0, 10), np.arange(0, 10))\n     z = np.max(np.dstack([abs(x), abs(y)]), 2)\n \n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..de99063 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,7 +244,9 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n-def test_templates_list(test_apps):\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n     from blueprintapp import app\n \n     templates = sorted(app.jinja_env.list_templates())\n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..523f481 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,10 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://-example.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..7de2bda 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,23 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n-\n-def test_raise_no_warning_for_nan_in_binary_ops():\n+def test_no_coercion_of_objects_with_value_property():\n+    class HasValues:\n+        def __init__(self, val):\n+            self.values = val\n+\n+    # Create DataArray instances for testing\n+    good_indexed = xr.DataArray([None])\n+    bad_indexed = xr.DataArray([None])\n+\n+    # Assign a set object, should be stored as is\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    assert isinstance(good_indexed.values[0], set)\n+\n+    # Assign an object with a 'values' property, should not be coerced\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues(5)\n+    assert isinstance(bad_indexed.values[0], HasValues)\n+    assert bad_indexed.values[0].values == 5\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..86f7ac8 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2107,7 +2107,16 @@ class TestDataset:\n \n         assert_identical(ds.coords['a'], expected_orig)\n \n-    def test_copy_with_data_errors(self):\n+    @pytest.mark.parametrize('deep', [True, False])\n+    def test_copy_unicode_index(self, deep):\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+        copied = ds.copy(deep=deep)\n+        assert copied.x.dtype == ds.x.dtype\n+        assert copied.y.dtype == ds.y.dtype\n+        assert copied.z.dtype == ds.z.dtype\n         orig = create_test_data()\n         new_var1 = np.arange(orig['var1'].size).reshape(orig['var1'].shape)\n         with raises_regex(ValueError, 'Data must be dict-like'):\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..7de01ff 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,6 +611,25 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n+    def test_combine_leaving_bystander_dimensions(self):\n+        # Check non-monotonic bystander dimension coord doesn't raise\n+        # ValueError on combine (https://github.com/pydata/xarray/issues/3150)\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n     def test_check_for_impossible_ordering(self):\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..4c5fde0 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,6 +2310,22 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n+    def test_quantile_keep_attrs(self):\n+        # Create a DataArray with attributes\n+        da = xr.DataArray([0, 0, 1, 2], dims=\"x\", attrs={'units': 'K', 'description': 'test data'})\n+        \n+        # Compute quantile and keep attributes\n+        result = da.quantile(0.5, dim='x', keep_attrs=True)\n+        \n+        # Ensure attributes are preserved\n+        assert result.attrs == da.attrs\n+        \n+        # Compute quantile without keeping attributes\n+        result_no_attrs = da.quantile(0.5, dim='x', keep_attrs=False)\n+        \n+        # Ensure attributes are not preserved\n+        assert result_no_attrs.attrs == {}\n+\n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..3b09eb8 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,11 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..47f71c9 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,24 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"b\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"c\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"a\"] = \"d\"\n+        assert ds1.attrs[\"a\"] == \"b\"\n+        assert ds2.attrs[\"a\"] == \"c\"\n+        assert ds3.attrs[\"a\"] == \"d\"\n+\n+    def test_merge_attrs_override_copy_with_multiple_attrs(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"b\", \"x\": \"original\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"c\", \"x\": \"not_used\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = \"modified\"\n+        assert ds1.attrs[\"x\"] == \"original\"\n+        assert ds2.attrs[\"x\"] == \"not_used\"\n+        assert ds3.attrs[\"x\"] == \"modified\"\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..fa6ce8b 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1922,6 +1922,35 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_preserves_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"cond_attr\": \"condition\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"x_attr\": \"value x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"y_attr\": \"value y\"})\n+\n+    # Test with keep_attrs=False\n+    result = xr.where(cond, x, y, keep_attrs=False)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(result, expected)\n+    assert result.attrs == {}\n+\n+    # Test with keep_attrs=True, should preserve the attributes of x\n+    result = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"x_attr\": \"value x\"})\n+    assert_identical(result, expected)\n+\n+    # Check that y's attributes aren't picked when cond is all False\n+    cond_false = xr.DataArray([False, False], dims=\"x\", attrs={\"cond_attr\": \"condition\"})\n+    result = xr.where(cond_false, x, y, keep_attrs=True)\n+    expected = xr.DataArray([0, 0], dims=\"x\", attrs={\"y_attr\": \"value y\"})\n+    assert_identical(result, expected)\n+\n+    # When cond is not all True or False, x's attributes should be preferred\n+    cond_mixed = xr.DataArray([True, False], dims=\"x\")\n+    result = xr.where(cond_mixed, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"x_attr\": \"value x\"})\n+    assert_identical(result, expected)\n+\n+\n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..7e317db 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -10,7 +10,34 @@ from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n \n-with suppress(ImportError):\n+import numpy as np\n+from contextlib import suppress\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_from_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == unsigned_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n     import dask.array as da\n \n \n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..e3f8b75 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1928,6 +1928,30 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+def test_where_scalar_with_keep_attrs() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    # Test with scalars for x and y with keep_attrs=True\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    # Test where x is a scalar and y is a DataArray\n+    y = xr.DataArray([0, 0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, 1, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"y\"})\n+    assert_identical(expected, actual)\n+\n+    # Test where x is a DataArray and y is a scalar\n+    x = xr.DataArray([1, 1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    actual = xr.where(cond, x, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test with scalars for both x and y with keep_attrs=False\n+    actual = xr.where(cond, 1, 0, keep_attrs=False)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..381ab8f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,14 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..a1d67e5 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -1050,7 +1050,32 @@ class TestDataset:\n             data.chunk({\"foo\": 10})\n \n     @requires_dask\n-    def test_dask_is_lazy(self) -> None:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # regression test for accessing the chunks attribute without data load\n+\n+        # Mock dataset that raises error on data access\n+        class InaccessibleArray:\n+            def __init__(self, data):\n+                self.array = data\n+\n+            def __array__(self, dtype=None):\n+                raise AssertionError(\"Attempt to access array data\")\n+            \n+            def __getattr__(self, attr):\n+                if attr in [\"shape\", \"dtype\", \"ndim\"]:\n+                    return getattr(self.array, attr)\n+                raise AttributeError(attr)\n+        \n+        store = InaccessibleVariableDataStore()\n+        create_test_data().dump_to_store(store)\n+\n+        ds = open_dataset(store)\n+        # Replace with InaccessibleArray\n+        for k, v in ds.variables.items():\n+            ds[k].data = InaccessibleArray(v.data)\n+        \n+        # Assert chunks can be accessed without triggering load\n+        assert ds.chunks == {}\n         store = InaccessibleVariableDataStore()\n         create_test_data().dump_to_store(store)\n         ds = open_dataset(store).chunk()\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..7190ac7 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -18,6 +18,10 @@ from xarray.tests import (\n     requires_dask,\n     requires_numbagg,\n )\n+import numpy as np\n+import xarray as xr\n+import pytest\n+from xarray.testing import assert_array_equal\n \n pytestmark = [\n     pytest.mark.filterwarnings(\"error:Mean of empty slice\"),\n@@ -50,7 +54,20 @@ class TestDataArrayRolling:\n                 )\n \n     @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n-    def test_rolling_repr(self, da) -> None:\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    def test_rolling_manual_iteration_center(self, size, center) -> None:\n+        my_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n+        expected_result = my_data.rolling(x=size, center=center).mean().values\n+        \n+        my_data_rolling = my_data.rolling(x=size, center=center)\n+        manual_result = [window.mean().values.item() for label, window in my_data_rolling]\n+\n+        # When center=True, initial and end 'size//2' elements should be NaN\n+        if center:\n+            manual_result = [np.nan] * (size//2) + manual_result[:-(size//2)]\n+        \n+        np.testing.assert_allclose(manual_result, expected_result, rtol=1e-5)\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n         rolling_obj = da.rolling(time=7, center=True)\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..d10b4bd 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,28 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import xarray as xr\n+import numpy as np\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_restore_int32_dtype_on_multiindexes() -> None:\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+    stacked = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked['a'].values.dtype\n+\n+def test_restore_float64_dtype_on_multiindexes() -> None:\n+    ds = xr.Dataset(coords={'a': np.array([0.0], dtype='f8')})\n+    stacked = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked['a'].values.dtype\n+\n+def test_restore_dtype_on_multiindexes_mixed() -> None:\n+    ds = xr.Dataset(coords={'a': np.array([0, 1], dtype='i4'), 'c': np.array([0.0, 1.0], dtype='f8')})\n+    stacked = ds.stack(b=('a', 'c'))\n+    assert ds['a'].values.dtype == stacked['a'].values.dtype\n+    assert ds['c'].values.dtype == stacked['c'].values.dtype\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..ae6998d 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,33 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint import Run\n+from _pytest.capture import CaptureFixture\n+import pytest\n+from some_module import EMPTY_MODULE  # Make sure to import EMPTY_MODULE from the appropriate module\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_no_verbose_argument_required(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure that the -v option does not require an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+    assert \"expected one argument\" not in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..7821761 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,23 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    def test_recursive_with_ignore(self):\n+        \"\"\"Test recursive running with ignore options\"\"\"\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore=ignored_subdirectory\"],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore-paths=.*ignored.*\"],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore-patterns=^ignored_\"],\n+            code=0,\n+        )\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..4421aef 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,27 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self):\n+        \"\"\"Tests that ignore-paths is respected when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            # pytest is including directory HERE/regrtest_data to sys.path which causes\n+            # astroid to believe that directory is a package.\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^directory/ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..1903333 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -759,11 +759,33 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n-            paths = [cwd, cwd, *default_paths]\n+            # Test case: the first item is a custom path - should not be removed\n+            paths = [\"custom_path\", *default_paths]\n             sys.path = copy(paths)\n-            with _test_environ_pythonpath(\".\"):\n+            with _test_environ_pythonpath():\n                 modify_sys_path()\n-            assert sys.path == paths[1:]\n+            assert sys.path == paths  # Should remain unchanged\n+\n+            # Another test case: first item is os.getcwd() - should be removed\n+            paths = [cwd, *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]  # First entry removed\n+\n+            # Another test case: first item is \".\" - should be removed\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]  # First entry removed\n+\n+            # Another test case: first item is an empty string (\"\") - should be removed\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]  # First entry removed\n \n             paths = [cwd, \"/custom_pythonpath\", *default_paths]\n             sys.path = copy(paths)\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..f6d2ee7 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -171,8 +171,31 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     # This reaches into private API, don't use this type of thing in real tests!\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n+import logging\n+\n+def test_caplog_get_records_and_clear_consistency(caplog):\n+    \"\"\"Test to ensure that caplog.get_records and caplog.clear are consistent.\"\"\"\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Before any logging or clearing\n+    verify_consistency()\n+    assert caplog.get_records(\"call\") == []\n+\n+    # Log a message and verify consistency\n+    logging.info(\"test_log\")\n+    verify_consistency()\n+\n+    # Clear logs and verify consistency\n+    caplog.clear()\n+    verify_consistency()\n+\n+    # Ensure no records exist after clearing\n+    assert caplog.get_records(\"call\") == []\n \n-def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n+    # Log another message and check\n+    logging.info(\"test_log_after_clear\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"test_log_after_clear\"]\n     pytester.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..6209a0a 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1273,6 +1273,35 @@ def test_pdb_teardown_skipped(\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+def test_pdb_teardown_skipped_for_unittest_skip_class(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"Ensure that with --pdb, setUp and tearDown are not called for unittest.TestCase classes\n+    skipped via a decorator on the class.\"\"\"\n+    tracked: List[str] = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skip(\"skipped for pdb test\")\n+        class SkippedTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_1(self):\n+                pass\n+        \"\"\"\n+    )\n+\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n \n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..69e63d3 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,9 +1051,24 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n-\n-@contextlib.contextmanager\n-def saved_fd(fd):\n+def test_encodedfile_write_mode():\n+    from _pytest.capture import EncodedFile\n+    import io\n+\n+    # Create a BytesIO object to simulate the file\n+    buffer = io.BytesIO()\n+    # Create an EncodedFile wrapping the buffer\n+    ef = EncodedFile(buffer, encoding='utf-8')\n+\n+    # Ensure that passing a str works\n+    ef.write('hello')\n+    buffer.seek(0)\n+    assert buffer.read() == b'hello'.encode('utf-8')\n+\n+    # Ensure that passing bytes raises a TypeError in Python 3\n+    import pytest\n+    with pytest.raises(TypeError):\n+        ef.write(b'world')\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..bf95345 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,6 +178,31 @@ class TestMockDecoration:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n+    def test_patch_with_numpy_array(self, testdir):\n+        pytest.importorskip(\"numpy\")  # Ensure numpy is available\n+        testdir.makepyfile(\n+            \"\"\"\n+            from unittest.mock import patch\n+            import numpy as np\n+\n+            class TestNumpyPatch:\n+                @patch(target='dummy.NUMPY_ARRAY', new=np.array([-5.5, 3.0]))\n+                def test_patch_array(self):\n+                    assert (dummy.NUMPY_ARRAY == np.array([-5.5, 3.0])).all()\n+            \"\"\"\n+        )\n+        \n+        # Create a dummy module with NUMPY_ARRAY\n+        dummy_module = testdir.makepyfile(\n+            dummy=\"\"\"\n+            import numpy as np\n+            NUMPY_ARRAY = np.array([0.0, 0.0])  # Initial array\n+            \"\"\"\n+        )\n+        \n+        reprec = testdir.inline_run(dummy_module)\n+        reprec.assertoutcome(passed=1)\n+\n     def test_mock(self, testdir):\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..f41d758 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,10 +116,21 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n-\n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n \n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        # Test to ensure the lexer used is \"text\" and not \"python3\"\n+        result = pastebin.create_new_paste(b\"example pytest output\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=example pytest output\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n@@ -130,4 +141,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..216a8bb 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -685,6 +685,8 @@ class Test_genitems:\n     def test_example_items1(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n+            import pytest\n+\n             def testone():\n                 pass\n \n@@ -697,10 +699,16 @@ class Test_genitems:\n         \"\"\"\n         )\n         items, reprec = testdir.inline_genitems(p)\n-        assert len(items) == 3\n-        assert items[0].name == \"testone\"\n-        assert items[1].name == \"testmethod_one\"\n-        assert items[2].name == \"testmethod_one\"\n+        import pytest\n+\n+        @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+        def testmethod_two(self, arg0):\n+            pass\n+\n+        assert len(items) == 4\n+        assert items[3].name == \"testmethod_two[.[]\"\n+        # PR #6202: Fix incorrect result of getmodpath method. (Resolves issue #6189)\n+        assert items[3].getmodpath() == \"TestY.testmethod_two[.[]\"\n \n         # let's also test getmodpath here\n         assert items[0].getmodpath() == \"testone\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..2a33c7e 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,22 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    import sys\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..bbac9d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -235,6 +235,35 @@ class TestXFail:\n             [\"*def test_func():*\", \"*assert 0*\", \"*1 failed*1 pass*\"]\n         )\n \n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\", \"-v\"],\n+                [\"test_sample.py::test_skip_location SKIPPED [1]: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_report_location_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n     def test_xfail_evalfalse_but_fails(self, testdir):\n         item = testdir.getitem(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..1d86718 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,8 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n-from _pytest.skipping import evaluate_skip_marks\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n \n@@ -397,7 +398,30 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n-    def test_dynamic_xfail_no_run(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486: Test if dynamically adding xfail during runtime works as expected.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486: Test if strict xfail marks the test failed when passed unexpectedly.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..4ad1cb3 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,6 +513,12 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n+    \n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"Greetings from DOS\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n \n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..037aba6 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,6 +51,38 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n+def test_change_level_undos_handler_level(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            # Check initial handler level.\n+            assert caplog.handler.level == 0\n+            # Change handler level.\n+            caplog.set_level(41)\n+            # Verify change.\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            # Ensure handler level is restored to initial value.\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            # Check initial handler level.\n+            assert caplog.handler.level == 0\n+            # Change handler level.\n+            caplog.set_level(43)\n+            # Verify change.\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n+\n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..ebbf462 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1178,6 +1179,20 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    # Create a directory with a test file\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    \n+    # Create a symlink to the above directory\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    \n+    # Run pytest and check the outcomes\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n",
  "pytest-dev__pytest-8399": "",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..4514fae 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -575,7 +575,31 @@ def test_class_weights_cv():\n \n \n def test_ridgecv_store_cv_values():\n-    # Test _RidgeCV's store_cv_values attribute.\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    def test_ridge_classifier_cv_store_cv_values():\n+        # Setup test data\n+        x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+        y = np.array([1, 1, 1, -1, -1])\n+\n+        n_samples = x.shape[0]\n+        alphas = [1e-1, 1e0, 1e1]\n+        n_alphas = len(alphas)\n+\n+        # Initialize RidgeClassifierCV with store_cv_values=True\n+        r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+        # Test with single target\n+        n_targets = 1\n+        r.fit(x, y)\n+        assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+        # Test with multiple target\n+        y = np.array([[1, 1, 1, -1, -1],\n+                      [1, -1, 1, -1, 1],\n+                      [-1, -1, 1, -1, -1]]).transpose()\n+        n_targets = y.shape[1]\n+        r.fit(x, y)\n+        assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n     rng = rng = np.random.RandomState(42)\n \n     n_samples = 8\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..7656429 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,19 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+from sklearn.metrics import fowlkes_mallows_score\n+from sklearn.utils._testing import assert_all_finite\n+\n+def test_fowlkes_mallows_score_int_overflow():\n+    # Test to ensure no RuntimeWarnings or overflow issues for large integers in fowlkes_mallows_score\n+\n+    # Create large cluster assignments to simulate large pk, qk values\n+    labels_true = np.array([0] * 30000 + [1] * 40000 + [2] * 30000)\n+    labels_pred = np.array([0] * 50000 + [1] * 50000 + [2] * 10000)\n+\n+    # Compute fowlkes_mallows_score and assert the result is finite and valid\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..e0a8a7f 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,29 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_with_provided_vocabulary():\n+    # Test if `get_feature_names` works without fitting when vocabulary is provided\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n \n-def test_vectorizer_max_features():\n+    cv = CountVectorizer(vocabulary=vocab)\n+    \n+    # Should not raise NotFittedError\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+\n+    # Ensure transform works without prior fitting\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?'\n+    ]\n+    \n+    X = cv.transform(corpus)\n+    assert_equal(X.shape, (4, 9))  # 4 documents, 9 features\n+\n+    # Check if vocabulary_ attribute is set after transform\n+    assert_true(hasattr(cv, 'vocabulary_'))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..6b63e40 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1172,8 +1172,20 @@ def test_search_cv_timing():\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+@ignore_warnings()\n+def test_search_cv_refit_time():\n+    svc = LinearSVC(random_state=0)\n+    X = [[1, ], [2, ], [3, ], [4, ]]\n+    y = [0, 1, 1, 0]\n \n-def test_grid_search_correct_score_results():\n+    gs = GridSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0)\n+    rs = RandomizedSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, n_iter=2)\n+\n+    for search in (gs, rs):\n+        search.fit(X, y)\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..c484c76 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,6 +21,10 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.linear_model.logistic import _log_reg_scoring_path\n+from sklearn.datasets import make_classification\n+from sklearn.utils import assert_array_almost_equal\n \n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..641ebfd 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -166,8 +166,14 @@ def test_clone_sparse_matrices():\n         assert clf.empty.__class__ is clf_cloned.empty.__class__\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n+def test_clone_estimator_types_with_class():\n+    from sklearn.preprocessing import StandardScaler\n+    scaler_class = StandardScaler\n+    clf = MyEstimator(empty=scaler_class)\n+    clf2 = clone(clf)\n \n-def test_repr():\n+    # Check if the cloned object's empty attribute is the same as original\n+    assert clf.empty is clf2.empty\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n     repr(my_estimator)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..3e97036 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -8,6 +8,7 @@ from scipy import linalg\n import pytest\n \n from sklearn.model_selection import train_test_split\n+from sklearn.linear_model.least_angle import LassoLarsIC\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_less\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..f10a723 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -494,6 +494,41 @@ def test_shuffle_stratifiedkfold():\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n+def test_stratified_kfold_shuffle_different_random_states():\n+    # Ensure shuffling produces different test sets for different random_state\n+    X = np.arange(20)\n+    y = np.array([0] * 10 + [1] * 10)\n+\n+    skf1 = StratifiedKFold(n_splits=10, shuffle=True, random_state=0)\n+    skf2 = StratifiedKFold(n_splits=10, shuffle=True, random_state=1)\n+\n+    test_sets1 = [test for _, test in skf1.split(X, y)]\n+    test_sets2 = [test for _, test in skf2.split(X, y)]\n+\n+    for test1, test2 in zip(test_sets1, test_sets2):\n+        assert_not_equal(set(test1), set(test2))\n+\n+\n+def test_stratified_kfold_consistency_with_shuffle():\n+    # Verify that using shuffle=False produces consistent folds\n+    X = np.arange(20)\n+    y = np.array([0] * 10 + [1] * 10)\n+\n+    skf_no_shuffle = StratifiedKFold(n_splits=10, shuffle=False)\n+\n+    test_sets_no_shuffle = [test for _, test in skf_no_shuffle.split(X, y)]\n+\n+    skf_same_random = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n+    test_sets_same_random = [test for _, test in skf_same_random.split(X, y)]\n+\n+    assert_not_equal(test_sets_no_shuffle, test_sets_same_random)\n+\n+    skf_same_random_again = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n+    test_sets_same_random_again = [test for _, test in skf_same_random_again.split(X, y)]\n+\n+    np.testing.assert_equal(test_sets_same_random, test_sets_same_random_again)\n+\n+\n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..38ceb97 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -203,6 +203,30 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n \n+@pytest.mark.parametrize(\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(\n+        strategy, expected_2bins, expected_3bins, expected_5bins):\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # with 2 bins\n+    est = KBinsDiscretizer(n_bins=2, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_2bins, Xt.ravel())\n+\n+    # with 3 bins\n+    est = KBinsDiscretizer(n_bins=3, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_3bins, Xt.ravel())\n+\n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..9a81aa6 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,15 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..f6623a0 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1058,7 +1058,38 @@ def test_pipeline_memory():\n         shutil.rmtree(cachedir)\n \n \n-def test_make_pipeline_memory():\n+from sklearn import svm\n+from sklearn.datasets import make_classification\n+from sklearn.feature_selection import SelectKBest, f_regression\n+from sklearn.pipeline import Pipeline\n+\n+def test_pipeline_len():\n+    # Generate some data to play with\n+    X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = svm.SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+    # Test the length of the pipeline\n+    assert len(pipe) == 2\n+\n+    # Test for an empty pipeline\n+    empty_pipe = Pipeline([])\n+    assert len(empty_pipe) == 0\n+\n+    # Test for a pipeline with one step\n+    single_step_pipe = Pipeline([('anova', anova_filter)])\n+    assert len(single_step_pipe) == 1\n+\n+    # Test pipeline slicing\n+    sub_pipeline = pipe[:1]\n+    assert len(sub_pipeline) == 1\n+    assert sub_pipeline.steps[0][0] == 'anova'\n+    \n+    # Test indexing by step name\n+    assert pipe['anova'] is anova_filter\n+    assert pipe['svc'] is clf\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1101,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..77f3b12 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -11,6 +12,8 @@ import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_array_equal\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..0d561b9 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -506,4 +506,50 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n+\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier, VotingClassifier, VotingRegressor\n+import numpy as np\n+from sklearn.datasets import load_iris\n+import pytest\n+\n+@pytest.mark.filterwarnings('ignore: Default solver will be changed')  # 0.22\n+@pytest.mark.filterwarnings('ignore: Default multi_class will')  # 0.22\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(load_iris(return_X_y=True), VotingClassifier(\n+        [('lr', LogisticRegression()), \n+         ('rf', RandomForestClassifier(n_estimators=5))])\n+    )]\n+)\n+def test_none_estimator_with_weights(X_y_voter):\n+    X, y, voter = X_y_voter\n+    # Check that setting an estimator to None with weights works\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+\n+# Additional test to check behavior with all None estimators\n+def test_all_none_estimators():\n+    X, y = load_iris(return_X_y=True)\n+    voter = VotingClassifier(\n+        estimators=[('lr', None), ('rf', None)]\n+    )\n+    with pytest.raises(ValueError, match=\"All estimators are None. At least one is required!\"):\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n+\n+# Additional test to verify weights handling\n+def test_estimator_with_weights_handling():\n+    X, y = load_iris(return_X_y=True)\n+    voter = VotingClassifier(\n+        estimators=[('lr', LogisticRegression()), ('rf', RandomForestClassifier())]\n+    )\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(rf=None)\n+    # Check that estimator set to None is not fitted\n+    assert 'rf' not in voter.named_estimators_\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..093e9ad 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,36 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+def test_export_text_single_feature():\n+    # Test case to verify fix for single feature\n+    X_single_feature = [[-2], [-1], [0], [1], [2]]\n+    y_single_feature = [-1, -1, 0, 1, 1]\n+    clf_single = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single.fit(X_single_feature, y_single_feature)\n+\n+    expected_report_single_feature = dedent(\"\"\"\n+    |--- feature_0 <= 0.50\n+    |   |--- class: -1\n+    |--- feature_0 >  0.50\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf_single, feature_names=['feature_0']) == expected_report_single_feature\n+\n+    # Test with regression\n+    X_single_regression = [[-2], [-1], [0], [1], [2]]\n+    y_single_regression = [[-1], [-1], [0], [1], [1]]\n+    reg_single = DecisionTreeRegressor(max_depth=2, random_state=0)\n+    reg_single.fit(X_single_regression, y_single_regression)\n+\n+    expected_report_single_regression = dedent(\"\"\"\n+    |--- feature_0 <= 0.50\n+    |   |--- value: [-1.0]\n+    |--- feature_0 >  0.50\n+    |   |--- value: [1.0]\n+    \"\"\").lstrip()\n \n-def test_plot_tree_entropy(pyplot):\n+    assert export_text(reg_single, feature_names=['feature_0'], decimals=1) == expected_report_single_regression\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..bf24ad8 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1531,27 +1531,34 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_train) == gs.predict(X_train)).mean() >= .8\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n-def test_LogisticRegressionCV_no_refit(multi_class):\n-    # Test LogisticRegressionCV attribute shapes when refit is False\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_index_error(penalty, multi_class):\n+    # Test LogisticRegressionCV when refit=False and check for IndexError\n \n-    n_classes = 3\n-    n_features = 20\n-    X, y = make_classification(n_samples=200, n_classes=n_classes,\n-                               n_informative=n_classes, n_features=n_features,\n-                               random_state=0)\n+    n_samples = 1000\n+    n_features = 3\n+    X, y = make_classification(n_samples=n_samples, n_features=n_features,\n+                               n_informative=3, n_classes=2, random_state=29)\n \n     Cs = np.logspace(-4, 4, 3)\n-    l1_ratios = np.linspace(0, 1, 2)\n-\n-    lrcv = LogisticRegressionCV(penalty='elasticnet', Cs=Cs, solver='saga',\n-                                l1_ratios=l1_ratios, random_state=0,\n-                                multi_class=multi_class, refit=False)\n-    lrcv.fit(X, y)\n-    assert lrcv.C_.shape == (n_classes,)\n-    assert lrcv.l1_ratio_.shape == (n_classes,)\n-    assert lrcv.coef_.shape == (n_classes, n_features)\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    try:\n+        lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n+                                    l1_ratios=l1_ratios, random_state=0,\n+                                    multi_class=multi_class, refit=False)\n+        lrcv.fit(X, y)\n+    except IndexError:\n+        pytest.fail(\"IndexError thrown with LogisticRegressionCV and refit=False\")\n \n \n def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..b7b6e6a 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -12,7 +12,12 @@ def test_get_sys_info():\n     assert 'machine' in sys_info\n \n \n-def test_get_deps_info():\n+from sklearn.utils._show_versions import _get_deps_info\n+\n+def test_joblib_in_deps_info():\n+    \"\"\"Test that joblib is included in dependencies information.\"\"\"\n+    deps_info = _get_deps_info()\n+    assert 'joblib' in deps_info\n     deps_info = _get_deps_info()\n \n     assert 'pip' in deps_info\n@@ -30,4 +35,4 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..c7ff95f 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,45 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+import pytest\n+from sklearn.utils._testing import assert_array_equal\n+from sklearn.datasets import make_blobs\n+from sklearn.neighbors import NearestNeighbors\n+\n+# Adding test for min_samples being a float\n+def test_optics_min_samples_float():\n+    rng = np.random.RandomState(42)\n+    # Create a simple dataset\n+    X, _ = make_blobs(n_samples=100, centers=3, cluster_std=1.0, random_state=42)\n+\n+    # Expected behavior with float min_samples\n+    optics = OPTICS(min_samples=0.1, min_cluster_size=0.08, max_eps=20, cluster_method='xi', xi=0.4)\n+    optics.fit(X)\n+\n+    # Since we aren't testing for specific clustering output here\n+    # (as it's stochastic without a ground truth),\n+    # we just ensure no exceptions are raised and an output is produced\n+    assert len(optics.labels_) == len(X)\n+\n+# Additional test cases to validate different float scenarios\n+def test_optics_min_samples_float_edge_cases():\n+    rng = np.random.RandomState(42)\n+    X, _ = make_blobs(n_samples=100, centers=3, cluster_std=1.0, random_state=42)\n+\n+    # Test with min_samples as exactly 0.2 expecting exactly 20% of 100 = 20\n+    clust = OPTICS(min_samples=0.2, min_cluster_size=0.08, max_eps=20, cluster_method='xi', xi=0.4)\n+    clust.fit(X)\n+    assert len(clust.labels_) == 100\n \n-def test_extract_xi():\n+    # Test with min_samples as a very small float greater than 0\n+    clust = OPTICS(min_samples=0.01, min_cluster_size=0.08, max_eps=20, cluster_method='xi', xi=0.4)\n+    clust.fit(X)\n+    assert len(clust.labels_) == 100\n+\n+    # Test with min_samples as exactly 1.0 which should interpret as the whole dataset\n+    clust = OPTICS(min_samples=1.0, min_cluster_size=0.08, max_eps=20, cluster_method='xi', xi=0.4)\n+    clust.fit(X)\n+    assert len(clust.labels_) == 100\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..b4fcf47 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,22 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+from scipy import sparse\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the ZeroDivisionError in #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, cache_size=200,\n+                    epsilon=0.1, max_iter=15000, tol=0.001)\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size, \"Support vectors should be empty\"\n+    assert not model.dual_coef_.data.size, \"Dual coefficients should be empty\"\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..19e6efc 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,27 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents_nfkd():\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n \n-def test_to_ascii():\n+    # Test issue example with NFKD representation\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N + COMBINING TILDE\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..8a23cc5 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,30 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n+def test_output_dataframe_preserve_dtypes():\n+    \"\"\"Check that transformers preserve input dtypes when using pandas DataFrame.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame(\n+        {\n+            \"a\": pd.Series([1.0, 2.4, 4.5], dtype=np.float32),\n+            \"b\": pd.Series([\"a\", \"b\", \"a\"], dtype=\"category\"),\n+            \"c\": pd.Series([\"j\", \"b\", \"b\"], dtype=\"category\"),\n+            \"d\": pd.Series([3.0, 2.4, 1.2], dtype=np.float16),\n+        }\n+    )\n+    \n+    y = pd.Series([0, 1, 0], dtype=\"int\")\n+\n+    selector = SelectKBest(k=2).set_output(transform=\"pandas\")\n+    selector.fit(X, y)\n+\n+    output = selector.transform(X)\n+    for name, dtype in output.dtypes.items():\n+        assert dtype == X.dtypes[name], f\"Expected dtype {X.dtypes[name]} but got {dtype}\"\n \n def test_get_support():\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..a6bef8b 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -330,7 +330,20 @@ def test_iforest_with_n_jobs_does_not_segfault():\n def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n-    model = IsolationForest()\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+\n+    # Ensure no warnings are raised when fitting with DataFrame and predicting with DataFrame\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+        X_predict = pd.DataFrame(data=rng.randn(4), columns=[\"a\"])\n+        model.predict(X_predict)\n+\n+    # Ensure prediction works with numpy array but without raising warnings after fitting with DataFrame\n+    X_np_predict = rng.randn(4, 1)\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.predict(X_np_predict)\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +351,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..7aa7706 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,34 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    assert new_score < initial_score\n+\n+def test_sequential_feature_selector_with_iterable_of_splits():\n+    \"\"\"Test SequentialFeatureSelector with an iterable of splits.\"\"\"\n+    X, y = make_classification(random_state=42)\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2:] = 1\n+\n+    cv = LeaveOneGroupOut()\n+    splits = list(cv.split(X, y, groups=groups))\n+\n+    clf = KNeighborsClassifier(n_neighbors=5)\n+    sfs = SequentialFeatureSelector(clf, n_features_to_select=5, scoring='accuracy', cv=splits)\n+    sfs.fit(X, y)\n+\n+    assert sfs.get_support().sum() == 5  # Ensure that 5 features are selected\n+\n+def test_sequential_feature_selector_with_different_n_features():\n+    \"\"\"Test SequentialFeatureSelector with different numbers of features.\"\"\"\n+    X, y = make_classification(random_state=42)\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2:] = 1\n+\n+    cv = LeaveOneGroupOut()\n+    splits = list(cv.split(X, y, groups=groups))\n+\n+    clf = KNeighborsClassifier(n_neighbors=5)\n+    for n_features in [1, 2, 3, 4, 5]:\n+        sfs = SequentialFeatureSelector(clf, n_features_to_select=n_features, scoring='accuracy', cv=splits)\n+        sfs.fit(X, y)\n+        assert sfs.get_support().sum() == n_features\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..d18fb82 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -20,11 +20,47 @@ from sklearn.compose import (\n     make_column_selector,\n )\n from sklearn.exceptions import NotFittedError\n-from sklearn.preprocessing import FunctionTransformer\n+from sklearn.feature_selection import VarianceThreshold\n+import pandas as pd\n+import pytest\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for the reported issue.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    # Test with remainder as an estimator\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+    # Test without remainder as an estimator\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        (VarianceThreshold(), make_column_selector(dtype_exclude=bool)),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n \n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n \n-class Trans(TransformerMixin, BaseEstimator):\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n     def fit(self, X, y=None):\n         return self\n \n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..88d288f 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -15,6 +16,9 @@ from sklearn.utils.testing import assert_raises_regex\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import assert_warns_message\n from sklearn.utils.testing import if_safe_multiprocessing_with_blas\n+from sklearn.datasets import make_blobs\n+from sklearn.cluster import KMeans\n+import numpy as np\n from sklearn.utils.testing import assert_raise_message\n from sklearn.utils.validation import _num_samples\n from sklearn.base import clone\n",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..adec65d 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,29 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_no_return_type_for_class(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.SimpleSquare\\n',\n+        encoding='utf8'\n+    )\n+    # Add the Python code for the class SimpleSquare\n+    (app.srcdir / 'target' / 'typehints.py').write_text(\n+        'class SimpleSquare:\\n'\n+        '    \"\"\"A class representing a square figure.\"\"\"\\n'\n+        '    def __init__(self, width: int, height: int) -> None:\\n'\n+        '        self.width = width\\n'\n+        '        self.height = height\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints.SimpleSquare\\n'\n+            '\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n'\n+            '   __init__(width: int, height: int)\\n' == context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..0592884 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +10,33 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n+\n+def test_Catalog_unique_locations():\n+    catalog = Catalog()\n+    catalog.add('repeat', MsgOrigin('/duplicate/path', 10))\n+    catalog.add('repeat', MsgOrigin('/duplicate/path', 10))\n+    catalog.add('repeat', MsgOrigin('/duplicate/path', 15))\n+    catalog.add('repeat', MsgOrigin('/another/path', 20))\n+\n+    assert len(list(catalog)) == 1\n+\n+    msg, = list(catalog)\n+    assert msg.text == 'repeat'\n+    assert set(msg.locations) == {('/duplicate/path', 10), ('/duplicate/path', 15), ('/another/path', 20)}\n+\n+def test_Catalog_different_messages_same_location():\n+    catalog = Catalog()\n+    catalog.add('first', MsgOrigin('/same/location', 1))\n+    catalog.add('second', MsgOrigin('/same/location', 1))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'first'\n+    assert msg1.locations == [('/same/location', 1)]\n+    assert msg2.text == 'second'\n+    assert msg2.locations == [('/same/location', 1)]\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..39f475f 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -124,6 +124,39 @@ def test_glossary(app):\n                                                                      index)],\n                                                              definition)])],\n     ))\n+\n+    # Test case for issue: glossary duplicate term with different case\n+    uppercase_text = (\".. glossary::\\n\"\n+                      \"\\n\"\n+                      \"   MySQL\\n\"\n+                      \"       description for uppercase MySQL\\n\"\n+                      \"\\n\"\n+                      \"   mysql\\n\"\n+                      \"       description for lowercase mysql\\n\")\n+\n+    # doctree\n+    doctree_uppercase = restructuredtext.parse(app, uppercase_text)\n+    assert_node(doctree_uppercase, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree_uppercase[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree_uppercase[0][0][0][1][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree_uppercase[0][0][0][0][2],\n+                [definition, nodes.paragraph, \"description for uppercase MySQL\"])\n+    assert_node(doctree_uppercase[0][0][1][1],\n+                [definition, nodes.paragraph, \"description for lowercase mysql\"])\n+\n+    # index\n+    objects_uppercase = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects_uppercase\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects_uppercase\n     assert_node(doctree[0][0][0][0][1],\n                 entries=[(\"single\", \"term1\", \"term-term1\", \"main\", None)])\n     assert_node(doctree[0][0][0][1][1],\n",
  "sphinx-doc__sphinx-7757": "",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..4016be1 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from importlib import import_module\n import pytest\n \n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n+from typing import TypeVar, Generic\n \n \n def test_MockModule():\n@@ -52,7 +54,21 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+def test_generic_typed_class_mock():\n+    T = TypeVar('T')\n+\n+    class GenericSubClass(mock.SomeClass, Generic[T]):\n+        \"\"\"Generic subclass documentation\"\"\"\n+\n+        def method(self, value: T) -> T:\n+            return value\n+\n+    obj = GenericSubClass()\n+    assert GenericSubClass.__doc__ == \"Generic subclass documentation\"\n+    assert isinstance(obj, GenericSubClass)\n+    assert obj.method(10) == 10\n+    assert obj.method(\"test\") == \"test\"\n+    assert isinstance(obj.method([]), list)\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 464108d..4d627cf 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -1261,6 +1261,13 @@ def test_automethod_for_builtin(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_in_docs(app):\n+    actual = do_autodoc(app, 'class', 'target.decorated_init.Foo')\n+    assert '.. py:method:: Foo.__init__' in actual\n+    assert '   :module: target.decorated_init' in actual\n+    assert '   Initialize self.  See help(type(self)) for accurate signature.' in actual\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_automethod_for_decorated(app):\n@@ -1272,6 +1279,13 @@ def test_automethod_for_decorated(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_in_docs(app):\n+    actual = do_autodoc(app, 'class', 'target.decorated_init.Foo')\n+    assert '.. py:method:: Foo.__init__' in actual\n+    assert '   :module: target.decorated_init' in actual\n+    assert '   Initialize self.  See help(type(self)) for accurate signature.' in actual\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_abstractmethods(app):\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..50d43e1 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -85,6 +85,24 @@ def test_defaults_json(app, status, warning):\n         rowsby[\"https://www.google.com/image.png\"][\"info\"]\n \n \n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    # Check that valid local file links are marked as working\n+    assert \"conf.py\" not in content  # assuming 'conf.py' is an existing file in testroot\n+\n+    # Check that invalid local file links are marked as broken\n+    assert \"path/to/notfound\" in content\n+    assert \"[broken] path/to/notfound\" in content\n+    assert len(content.splitlines()) == 6  # assuming the output contains 6 lines including the broken local link\n+\n+    assert \"[broken] doesntexist\" in content  # Check the local link from the issue description\n+\n @pytest.mark.sphinx(\n     'linkcheck', testroot='linkcheck', freshenv=True,\n     confoverrides={'linkcheck_anchors_ignore': [\"^!\", \"^top$\"],\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..d23c959 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,49 @@ from test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    # Test specifying a single private member\n+    options = {\"members\": None, \"private-members\": \"_specific_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _specific_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   specific_private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n+\n+    # Test specifying multiple private members\n+    options = {\"members\": None, \"private-members\": \"_specific_private_function,_another_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _specific_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   specific_private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+        '',\n+        '.. py:function:: _another_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   another_private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n",
  "sphinx-doc__sphinx-8120": "",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..1ed6169 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,26 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.application import Sphinx\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={'autodoc_typehints': 'description', \n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_type_aliases_with_description(app: SphinxTestApp):\n+    (app.srcdir / 'annotations.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    context = (app.outdir / 'annotations.txt').read_text()\n+    assert \"types.sphinx_doc(data)\" in context\n+    assert \"Parameters:\" in context\n+    assert \"* **data** (*types.JSONObject*)\" in context\n+    assert \"Return type:\" in context\n+    assert \"types.JSONObject\" in context\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..4ff0769 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,34 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from pathlib import Path\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app: SphinxTestApp, status, warning):\n+    app.builder.build_all()\n+    # Check that the module pages are not created when viewcode_enable_epub is False\n+    assert not (Path(app.outdir) / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app: SphinxTestApp, status, warning):\n+    app.builder.build_all()\n+    # Check that the module pages are created when viewcode_enable_epub is True\n+    assert (Path(app.outdir) / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': None})\n+def test_viewcode_epub_default_none(app: SphinxTestApp, status, warning):\n+    app.builder.build_all()\n+    # Check the default behavior when viewcode_enable_epub is not set; it should not create pages\n+    assert not (Path(app.outdir) / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_config_override(app: SphinxTestApp, status, warning):\n+    app.builder.build_all()\n+    # Ensure that the confoverrides work properly;\n+    assert not (Path(app.outdir) / '_modules/spam/mod2.xhtml').exists()\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..45ea8f0 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,6 +515,16 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n+    class MyEnum(enum.Enum):\n+        FOO = 1\n+        BAR = 2\n+\n+    # Test if the object description of an enum is rendered correctly without values\n+    assert inspect.object_description(MyEnum.FOO) == \"MyEnum.FOO\"\n+    assert inspect.object_description(MyEnum.BAR) == \"MyEnum.BAR\"\n+\n \n def test_getslots():\n     class Foo:\n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..e9b718a 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -9,11 +9,12 @@\n \"\"\"\n \n import time\n+import sys\n from io import StringIO\n \n import pytest\n \n-from sphinx import application\n+from sphinx import application, quickstart as qs\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n \n@@ -240,8 +241,18 @@ def test_default_filename(tempdir):\n     ns = {}\n     exec(conffile.read_text(), ns)\n \n+def test_exits_when_existing_confpy_with_enter(monkeypatch):\n+    # Mocking path.isfile to simulate the presence of an existing conf.py\n+    def mock_isfile(path):\n+        return True\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n \n-def test_extensions(tempdir):\n+    # Mocking input to simulate pressing Enter when prompted for a new root path\n+    qs.term_input = lambda prompt: ''\n+\n+    # Expect SystemExit since pressing Enter should exit the program\n+    with pytest.raises(SystemExit):\n+        qs.ask_user({})\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..1dce1b9 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -53,7 +53,8 @@ from sphinx.pycode import ast\n     (\"+ a\", \"+ a\"),                             # UAdd\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n-    (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1, 2, 3)\", \"(1, 2, 3)\"),                 # Tuple\n+    (\"(1,)\", \"(1,)\"),                           # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..9438789 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,31 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt  # Import sqrt for assertions\n+\n+def test_issue_11617():\n+    # Test with 3D to 2D point distance\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+    # Additional tests for thoroughness:\n+\n+    # Test with both points in 3D\n+    p3 = Point3D(3, 4, 0)\n+    p4 = Point3D(0, 0, 0)\n+    assert p3.distance(p4) == 5  # sqrt(3**2 + 4**2 + 0**2)\n+\n+    # Test with 2D to 3D point distance (with z=0 for Point2D as well)\n+    p5 = Point2D(0, 0)\n+    p6 = Point3D(0, 3, 4)\n+    assert p5.distance(p6) == 5  # sqrt(0**2 + 3**2 + 4**2)\n+\n+    # Test with two 2D points, should work as normal\n+    p7 = Point2D(1, 1)\n+    p8 = Point2D(4, 5)\n+    assert p7.distance(p8) == 5  # sqrt((4-1)^2 + (5-1)^2)\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..49bad39 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -752,8 +752,29 @@ def test_issue_2790():\n     assert lambdify(x, x + 1, dummify=False)(1) == 2\n \n \n-def test_ITE():\n-    assert lambdify((x, y, z), ITE(x, y, z))(True, 5, 3) == 5\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    assert f(f(2)).evalf() == Float(16)\n+\n+def test_evalf_recursive():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+    h = implemented_function('h', lambda x: x + 3)\n+    \n+    # Simple nested composition\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    \n+    # More complex nested composition\n+    assert f(g(h(1))).evalf() == Float(64)\n+    assert h(f(g(1))).evalf() == Float(19)\n+\n+    # Evaluating multiple compositions\n+    assert f(f(g(2))).evalf() == Float(256)\n+    assert g(g(f(1))).evalf() == Float(8)\n     assert lambdify((x, y, z), ITE(x, y, z))(False, 5, 3) == 3\n \n \n",
  "sympy__sympy-12419": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..1870358 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,13 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # Test case for the issue: non-disjoint cycles should be applied in left-to-right order\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    # Additional test cases to ensure fix\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])  # Applying [0, 1] then [1, 2]\n+    assert Permutation([[1, 2], [0, 1]]) == Permutation([0, 2, 1])  # Applying [1, 2] then [0, 1]\n+    assert Permutation([[2, 3], [1, 2], [0, 1]]) == Permutation([1, 0, 3, 2])  # Applying series of swaps\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..d7c34ab 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -489,8 +489,14 @@ def test_errors():\n     raises(ShapeError,\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n-\n-def test_len():\n+def test_hstack_vstack_sparse_matrices():\n+    # Testing hstack with 0 x n sparse matrices\n+    sparse_matrices_h = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_h).shape == (0, 6)\n+\n+    # Testing vstack with n x 0 sparse matrices\n+    sparse_matrices_v = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_v).shape == (6, 0)\n     assert not SparseMatrix()\n     assert SparseMatrix() == SparseMatrix([])\n     assert SparseMatrix() == SparseMatrix([[]])\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..b8d61ca 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -230,8 +230,37 @@ def test_evalf_bugs():\n     #issue 11518\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n \n-\n-def test_evalf_integer_parts():\n+def test_unboundlocalerror_in_evalf():\n+    from sympy import Mul, Max, NS, symbols\n+    x, y = symbols('x y')\n+    \n+    # Original test case from the issue\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    \n+    # Additional test cases\n+    # Changing the order of multiplication arguments\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    \n+    # Case with simple numeric values\n+    assert NS(Mul(Max(0, 1), 2, evaluate=False).evalf()) == '2*Max(0, 1)'\n+    \n+    # Verify it with only Max in evalf\n+    assert NS(Max(0, 2).evalf()) == '2.00000000000000'\n+    \n+    # Verify with different types of values\n+    assert NS(Mul(Max(0, -1), x, evaluate=False).evalf()) == '0'\n+\n+    # Check if it correctly handles non-numeric max\n+    assert NS(Mul(Max(x, y), x, evaluate=False).evalf()) == 'x*Max(x, y)'\n+\n+    # Testing with zero values\n+    assert NS(Mul(Max(0, 0), x, evaluate=False).evalf()) == '0'\n+\n+    # Check for negative multiplication\n+    assert NS(Mul(Max(-1, -2), x, evaluate=False).evalf()) == 'x*Max(-1, -2)'\n+\n+    # Floating point consideration\n+    assert NS(Mul(Max(0.5, y), 0.1, evaluate=False).evalf()) == '0.100000000000000*Max(0.5, y)'\n     a = floor(log(8)/log(2) - exp(-1000), evaluate=False)\n     b = floor(log(8)/log(2), evaluate=False)\n     assert a.evalf() == 3\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..ed71715 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -204,6 +204,19 @@ def test_tanh():\n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n \n+from sympy import Symbol, coth, log, tan\n+\n+def test_coth_subs_issue():\n+    x = Symbol('x')\n+    expression = coth(log(tan(x)))\n+    \n+    # Test specific integral values that were causing issues\n+    for val in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        expr_sub = expression.subs(x, val)\n+        assert expr_sub is not None, f\"subs failed for x = {val}\"\n+        # Further assertions can be added based on expected outcomes.\n+        # For now, just ensure no errors occur.\n+\n def test_tanh_series():\n     x = Symbol('x')\n     assert tanh(x).series(x, 0, 10) == \\\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..21ee3d3 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -164,6 +164,26 @@ def test_difference():\n \n     assert -1 in S.Reals - S.Naturals\n \n+    # isssue 12712\n+    # Test complement with mixed set of symbols and numbers\n+    a = FiniteSet(x, y, 2)\n+    b = Interval(-10, 10)\n+    expected_result = Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(a, b) == expected_result\n+\n+    # Additional test cases\n+    # Test with only symbols\n+    assert Complement(FiniteSet(x, y), Interval(-10, 10)) == FiniteSet(x, y)\n+\n+    # Test with only numbers\n+    assert Complement(FiniteSet(1, 2, 3), Interval(-10, 10)) == EmptySet()\n+\n+    # Test with numbers out of interval range\n+    assert Complement(FiniteSet(20, 3, 4), Interval(-10, 10)) == FiniteSet(20)\n+\n+    # Test empty set as input\n+    assert Complement(S.EmptySet, Interval(-10, 10)) == S.EmptySet\n+\n \n def test_Complement():\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..2e7ffc1 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,20 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    import sympy as sm\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..c00e886 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -665,8 +665,17 @@ def test_Poly_sub():\n def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n+from sympy import symbols, Poly, S\n \n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+def test_issue_multiplication_with_Poly():\n+    x = symbols('x')\n+\n+    # These are tests related to the issue described\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..327a3bd 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,17 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_custom_mul_symbol():\n+    # Test using a custom multiplication symbol\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3 \\, x^{2} \\, y\"\n+    # Test using a custom multiplication symbol for numeric multiplication\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+    # Additional test cases for mul_symbol with thin space\n+    assert latex(2*x**3*y**2, mul_symbol='\\\\,') == r\"2 \\, x^{3} \\, y^{2}\"\n+    assert latex(-x*y*z, mul_symbol='\\\\,') == r\"- x \\, y \\, z\"\n+    # Testing with default behavior for thin space in integrals\n+    assert latex(Integral(2*x**2*y, x)) == r\"\\int 2 x^{2} y \\, dx\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..4f08da0 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,23 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+def test_issue_13835():\n+    from sympy import symbols, Matrix\n+    a = symbols('a')\n+    f = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)]).det()\n+\n+    # Testing the cases mentioned in the issue\n+    assert f(1) == 0\n+    assert f(2) == -a\n+    assert f(3).expand() == 0  # Expanding for simplification\n+    assert f(4) == 0\n+    assert f(5) == 0\n+    assert f(6) == 0  # We expect a determinant calculation and no error\n+\n+    # Check for larger matrices to ensure stability beyond the described issue scope\n+    assert f(7) == 0\n+    assert f(8) == 0\n+    assert f(9) == 0\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..9be5035 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -726,7 +726,47 @@ def test_precomputed_cdf():\n         compdiff = simplify(compdiff.rewrite(erfc))\n         assert compdiff == 0\n \n-def test_issue_13324():\n+def test_precomputed_cdf_issue():\n+    from sympy import S, Piecewise, asin, exp, uppergamma, lowergamma\n+    from sympy.stats import (\n+        Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy,\n+        Laplace, Logistic, Nakagami, StudentT, UniformSum, cdf\n+    )\n+    \n+    # Test precomputed CDF for specific distributions with known issues\n+    assert cdf(Arcsin(\"x\", 0, 3))(1) == Piecewise(\n+        (0, 0 > 1),\n+        (2*asin(S(1)/3)/pi, 3 >= 1),\n+        (1, True)\n+    )\n+    assert cdf(Dagum(\"x\", S(1)/3, S(1)/5, 2))(3).rewrite(exp) == Piecewise(\n+        ((1 + (3/2)**(-S(1)/3))**(-2), 3 >= 0),\n+        (0, True)\n+    )\n+    assert cdf(Erlang(\"x\", 1, 1))(1) == lowergamma(1, 1)/gamma(1)\n+    assert cdf(Frechet(\"x\", S(4)/3, 1, 2))(3).rewrite(exp) == exp(-(S(1)))\n+    assert cdf(Gamma(\"x\", 0.1, 2))(3).rewrite(lowergamma) == lowergamma(0.1, 1.5)/gamma(0.1)\n+    assert cdf(GammaInverse(\"x\", S(5)/7, 2))(3).rewrite(uppergamma) == uppergamma(S(5)/7, 2/3)/gamma(S(5)/7)\n+    assert cdf(Kumaraswamy(\"x\", S(1)/123, 5))(S(1)/3) == Piecewise(\n+        (0, S(1)/3 < 0),\n+        (-(-((S(1)/3)**(S(1)/123)) + 1)**5 + 1, S(1)/3 <= 1),\n+        (1, True)\n+    )\n+    assert cdf(Laplace(\"x\", 2, 3))(5).rewrite(exp) == Piecewise(\n+        (exp(-1), 2 > 5),\n+        (-exp(-1) + 1, True)\n+    )\n+    assert cdf(Logistic(\"x\", 1, 0.1))(2).rewrite(exp) == 1/(exp(1) + 1)\n+    assert cdf(Nakagami(\"x\", S(7)/3, 1))(2).rewrite(lowergamma) == lowergamma(S(7)/3, (S(7)/3)*4)/gamma(S(7)/3)\n+    assert cdf(StudentT(\"x\", 10))(2).rewrite(exp) == S.Half + 2*gamma(5.5)*hyper((S.Half, 5.5), (3/S(2),), -S(4)/10)/(sqrt(pi)*sqrt(10)*gamma(5))\n+    assert cdf(UniformSum(\"x\", 5))(2) == Piecewise(\n+        (0, 2 < 0),\n+        (S(1)/120, 0 <= 2 <= 1),\n+        (S(8)/15, 1 < 2 <= 2),\n+        (S(434)/120, 2 < 2 <= 3),\n+        (S(77)/120, 3 < 2 <= 4),\n+        (1, 2 >= 5)\n+    )\n     X = Uniform('X', 0, 1)\n     assert E(X, X > Rational(1,2)) == Rational(3,4)\n     assert E(X, X > 0) == Rational(1,2)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..a85dbb7 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,35 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+from sympy import Symbol\n+from sympy.physics.quantum import TensorProduct as TP\n+from sympy.physics.quantum import tensor_product_simp\n+from sympy.physics.paulialgebra import Pauli\n+\n+A, B, C, D = symbols('A,B,C,D', commutative=False)\n+\n+def test_tensor_product_powers():\n+    # Test the simplification of powers of TensorProducts\n+    assert tensor_product_simp(TP(A, B)**2) == TP(A**2, B**2)\n+    assert tensor_product_simp(Symbol('x')*TP(A, B)**2) == Symbol('x')*TP(A**2, B**2)\n+    assert tensor_product_simp(Symbol('x')*(TP(A, B)**2)*TP(C, D)) == Symbol('x')*TP(A**2*C, B**2*D)\n+    assert tensor_product_simp(TP(A, B) - TP(C, D)**2) == TP(A, B) - TP(C**2, D**2)\n+\n+    # Test cases from the issue description\n+    a = Symbol('a', commutative=False)\n+    \n+    t1 = TP(1, 1)*TP(1, 1)\n+    assert tensor_product_simp(t1) == TP(1, 1)**2\n+    assert t1.expand(tensorproduct=True) == TP(1, 1)**2\n+\n+    assert tensor_product_simp(TP(1, 1)*TP(1, a)).subs(a, 1) == TP(1, 1)\n+\n+    t2 = TP(1, Pauli(3))*TP(1, Pauli(3))\n+    assert tensor_product_simp(t2) == TP(1, Pauli(3))**2\n+    assert t2.expand(tensorproduct=True) == TP(1, Pauli(3))**2\n+\n+    assert tensor_product_simp(TP(1, Pauli(3))*TP(1, a)).subs(a, Pauli(3)) == TP(1, 1)\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..79243c0 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -78,8 +78,14 @@ def test_python_keyword_function_name_escaping():\n     assert python(\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n+from sympy import Symbol, Eq, Ne, Rational, Limit, sstr\n \n def test_python_relational():\n+    # Test that 'python' function respects sympy_integers in sstr\n+    x = Symbol(\"x\")\n+    y = Symbol(\"y\")\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    assert python(Ne(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x, y)\"\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..ad577fa 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,19 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+def test_vector_addition_with_zero_multiplier():\n+    N = ReferenceFrame('N')\n+    assert sum([N.x, (0 * N.x)]) == N.x\n+    assert sum([0 * N.x, N.x]) == N.x\n+    assert sum([0 * N.x, 0 * N.x]) == 0 * N.x\n+\n+    # Additional test cases\n+    assert sum([N.x, N.y, 0 * N.z]) == N.x + N.y\n+    assert sum([0 * N.x, 0]) == 0 * N.x\n+\n+x, y, z = symbols('x y z')\n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..bcd0349 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -133,7 +134,16 @@ def test_math_lambda():\n            # if this succeeds, it can't be a python math function\n \n \n+from sympy import rf\n+import inspect\n+\n @conserve_mpmath_dps\n+def test_lambdify_mpmath_rational():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in source_code, \"Rational not wrapped in mpmath.mpf\"\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -144,7 +154,16 @@ def test_mpmath_lambda():\n            # if this succeeds, it can't be a mpmath function\n \n \n+from sympy import rf\n+import inspect\n+\n @conserve_mpmath_dps\n+def test_lambdify_mpmath_rational():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in source_code, \"Rational not wrapped in mpmath.mpf\"\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..4d15be0 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -65,6 +66,24 @@ def test_ndim_array_initiation():\n     assert array_with_long_shape[long(0), long(0)] == 0\n     assert array_with_long_shape.rank() == 2\n \n+    # Test case for the issue: len of rank-0 arrays\n+    rank_zero_array_with_element = ImmutableDenseNDimArray(3)  # rank-0 array with a scalar element\n+    assert len(rank_zero_array_with_element) == 1  # Verify the length is 1, as per the fix\n+    assert rank_zero_array_with_element.shape == ()  # Shape should still be () for rank-0\n+    assert rank_zero_array_with_element.rank() == 0  # Rank should still be 0\n+    assert rank_zero_array_with_element[()] == 3  # Accessing the element directly with ()\n+\n+    # Additional test cases for coverage\n+    from sympy import Array\n+    rank_0_array_sympy = Array(3)\n+    assert len(rank_0_array_sympy) == 1  # Verify against the sympy Array object\n+    assert list(rank_0_array_sympy) == [3]  # Converting to list should yield [3]\n+\n+    rank_0_array_empty = ImmutableDenseNDimArray([])\n+    assert len(rank_0_array_empty) == 0  # An empty array should still have length 0\n+    assert rank_0_array_empty.shape == (0,)  # Shape should be (0,)\n+    assert rank_0_array_empty.rank() == 1  # Rank should be 1 for an empty array\n+\n     vector_with_long_shape = ImmutableDenseNDimArray(range(5), long(5))\n     assert len(vector_with_long_shape) == 5\n     assert vector_with_long_shape.shape == (long(5),)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..50ad492 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,18 @@\n+\n+def test_Max_Min():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    assert mcode(Max(x, 2, y)) == \"Max[x, 2, y]\"\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+    assert mcode(Max(x,y,z)*Min(y,z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..4264add 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,31 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional test cases to ensure proper simplification\n+    # Test with zero\n+    assert Mod(0, 2) == 0\n+    assert Mod(3*0, 2) == Mod(0, 2)\n+\n+    # Test with negative integers\n+    assert Mod(-3*i, 2) == Mod(-i, 2)\n+    assert Mod(-1, 2) == 1\n+\n+    # Test with symbols without assumptions\n+    k = Symbol('k')\n+    assert Mod(3*k, 2).simplify() != Mod(k, 2)  # May not simplify without assumptions\n+\n+    # Test with non-integer divisors\n+    assert Mod(3*i, Rational(3, 2)) == Mod(i, Rational(1, 2))\n+\n+    # Test with non-integer terms\n+    assert Mod(3.5*i, 2.5) == Mod(1.5*i, 2.5)\n+    assert Mod(7.5, 2.5) == 0\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..1e753bc 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,10 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    from sympy import S  # Ensure S is imported if not already\n+\n+    # Test Min() with zero arguments after fix\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +159,10 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    from sympy import S  # Ensure S is imported if not already\n+\n+    # Test Max() with zero arguments after fix\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..2a0f22f 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,35 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n-\n-def test_issue_14392():\n+from sympy import I, simplify, symbols\n+\n+# Original test case for issue 15873\n+def test_issue_15873():\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True\n+\n+# Additional test cases to thoroughly test the fix\n+def test_addition_with_imaginary_and_real():\n+    # Test case where the real and imaginary parts cancel each other out\n+    e = (2 + 3*I) - (2 + 3*I)\n+    assert e.is_zero is True\n+    \n+    # Test case with purely imaginary numbers\n+    e = 5*I - 5*I\n+    assert e.is_zero is True\n+    \n+    # Test case with complex expression that simplifies to zero\n+    e = I*(1 + I) + (1 - I)*I\n+    assert simplify(e).is_zero is True\n+\n+    # Test case where is_zero needs to return None\n+    x = symbols('x')\n+    e = x + I*x\n+    assert e.is_zero is None\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..1c94b02 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,8 +477,35 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n-\n-def test_issue_5950():\n+def test_issue_16438():\n+    from sympy import Symbol, posify\n+\n+    # Test for finite assumption being preserved\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] is True\n+    assert eq.assumptions0['infinite'] is False\n+\n+    # Additional tests for other assumptions\n+    m = Symbol('m', integer=True)\n+    eq_m, rep_m = posify(m)\n+    assert eq_m.assumptions0['integer'] is True\n+\n+    n = Symbol('n', rational=True)\n+    eq_n, rep_n = posify(n)\n+    assert eq_n.assumptions0['rational'] is True\n+\n+    p = Symbol('p', prime=True)\n+    eq_p, rep_p = posify(p)\n+    assert eq_p.assumptions0['prime'] is True\n+\n+    even = Symbol('even', even=True)\n+    eq_even, rep_even = posify(even)\n+    assert eq_even.assumptions0['even'] is True\n+\n+    odd = Symbol('odd', odd=True)\n+    eq_odd, rep_odd = posify(odd)\n+    assert eq_odd.assumptions0['odd'] is True\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n     assert logcombine(log(x) - log(y)) == log(x/y)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..6b0bf91 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -11,7 +12,8 @@ from sympy.matrices import SparseMatrix, MatrixSymbol\n from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n-from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n+from sympy.printing.pycode import PythonCodePrinter\n \n x, y, z = symbols('x y z')\n \n@@ -36,7 +38,14 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n \n-def test_MpmathPrinter():\n+def test_PythonCodePrinter_Indexed():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    # Test with single index\n+    assert prntr.doprint(p[0]) == \"p[0]\"\n+    # Test with multiple indices\n+    assert prntr.doprint(p[0, 1]) == \"p[0, 1]\"\n+    assert prntr.doprint(p[x, y, z]) == \"p[x, y, z]\"\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..9b4b5f4 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -48,7 +48,22 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n-def test_cython_wrapper_outarg():\n+def test_cython_wrapper_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    # Define a matrix symbol 'x' which will be an unused argument\n+    x = MatrixSymbol('x', 2, 1)\n+    # Expression does not depend on 'x'\n+    expr = 1.0\n+\n+    # Attempt to autowrap using Cython backend\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    # Call the generated function, expecting no error and a result of 1.0\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0, \"Function should return 1.0 even if 'x' is unused\"\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..a7eb6cf 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,8 +248,9 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n-\n-def test_decode_morse():\n+    # Test the fix for Morse encoding of \"1\"\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('10') == '.----|-----'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_fu.py b/sympy/simplify/tests/test_fu.py\nindex 135b4cd..2297cb5 100644\n--- a/sympy/simplify/tests/test_fu.py\n+++ b/sympy/simplify/tests/test_fu.py\n@@ -68,6 +68,13 @@ def test_TR3():\n         assert verify_numerically(i, j) and i.func != j.func\n \n \n+from sympy import Symbol, cos, I, simplify\n+\n+def test_issue_17137_fu():\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n def test__TR56():\n     h = lambda x: 1 - x\n     assert T(sin(x)**3, sin, cos, h, 4, False) == sin(x)**3\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..76fe740 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -175,8 +178,11 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n-\n-def test_issue_5653():\n+def test_issue_12420():\n+    assert _sqrt_match(4 + I) == []\n+    assert sqrtdenest((3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2) == (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..dfc8f05 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -95,6 +96,13 @@ def test_point():\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n+    # Test scalar multiplication order consistency\n+    assert (p3 + p4 * S(2)) == Point(2, 2)\n+    assert (p3 + S(2) * p4) == Point(2, 2)\n+\n+    assert (p3 + p4 * sympy.sympify(2.0)) == Point(2, 2)\n+    assert (p3 + sympy.sympify(2.0) * p4) == Point(2, 2)\n+\n     # Point differences should be simplified\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n",
  "sympy__sympy-18189": "",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..71c1e1e 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -672,7 +672,23 @@ def test_latex_derivatives():\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n \n+from sympy import Subs, latex\n+from sympy.abc import x, y\n+\n def test_latex_subs():\n+    # Test from the issue to check correct parenthesization\n+    assert latex(3*Subs(-x+y, (x,),(1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Additional test cases\n+    # Simple substitution without expressions needing parenthesization\n+    assert latex(Subs(x*y, (x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+\n+    # Substitution with an additional multiplication factor\n+    assert latex(2*Subs(x + y, (x,), (1,))) == r'2 \\left. \\left(x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # More complex expressions to check consistent parenthesization\n+    assert latex(Subs(x**2 + y**2, (x, y), (1, 1))) == r'\\left. \\left(x^{2} + y^{2}\\right) \\right|_{\\substack{ x=1\\\\ y=1 }}'\n+    assert latex(5*Subs(x*y + y**2 - x, (x, y), (2, 3))) == r'5 \\left. \\left(- x + x y + y^{2}\\right) \\right|_{\\substack{ x=2\\\\ y=3 }}'\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..f614ae1 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -513,8 +513,34 @@ def test_kernS():\n     one = kernS('x - (x - 1)')\n     assert one != 1 and one.expand() == 1\n \n+def test_kern_unbound_local_error():\n+    # Test for UnboundLocalError: local variable 'kern' referenced before assignment\n+    # This should not raise any error if `kern` is handled properly in `kernS`.\n+    try:\n+        assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+    except UnboundLocalError as e:\n+        assert False, f\"UnboundLocalError occurred: {e}\"\n+    \n+    # Additional test cases to make sure no UnboundLocalError occurs\n+    try:\n+        assert kernS(\"3*(a+b)\") == 3*(a+b)\n+    except UnboundLocalError as e:\n+        assert False, f\"UnboundLocalError occurred: {e}\"\n+        \n+    try:\n+        assert kernS(\"x+1\") == x+1\n+    except UnboundLocalError as e:\n+        assert False, f\"UnboundLocalError occurred: {e}\"\n \n-def test_issue_6540_6552():\n+    try:\n+        assert kernS(\"-x*(y+z)\") == -x*(y+z)\n+    except UnboundLocalError as e:\n+        assert False, f\"UnboundLocalError occurred: {e}\"\n+\n+    try:\n+        assert kernS(\"sin(x)*cos(y)\") == sin(x)*cos(y)\n+    except UnboundLocalError as e:\n+        assert False, f\"UnboundLocalError occurred: {e}\"\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..d83f563 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -106,7 +107,23 @@ def test_identity():\n         assert represent(IdentityOperator(n)) == eye(n)\n \n \n-def test_outer_product():\n+def test_dagger_identity_operator():\n+    \"\"\"Test that Dagger(Operator) * IdentityOperator is simplified properly.\"\"\"\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    D = Dagger(O)\n+    \n+    # Check that multiplying with IdentityOperator simplifies correctly\n+    assert D * I == D\n+    assert I * D == D\n+\n+    # Conduct additional checks with more complex operations if necessary\n+    assert D * I * I == D\n+    assert I * I * D == D\n+\n+    # Ensure that the original behavior (without Dagger) is unaffected\n+    assert O * I == O\n+    assert I * O == O\n     k = Ket('k')\n     b = Bra('b')\n     op = OuterProduct(k, b)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..0e732af 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,8 +905,29 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n+def test_sylow_subgroup_issue():\n+    # Test for DihedralGroup(18) as shown in the issue description\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Test for DihedralGroup(50) as shown in the issue description\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Additional test cases to ensure no IndexError for different dihedral groups\n+    G = DihedralGroup(30)\n+    S = G.sylow_subgroup(p=3)\n+    assert S.order() == 3\n+\n+    G = DihedralGroup(40)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 8\n \n-@slow\n+    G = DihedralGroup(60)\n+    S = G.sylow_subgroup(p=5)\n+    assert S.order() == 5\n def test_presentation():\n     def _test(P):\n         G = P.presentation()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..7ccd11f 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,6 +513,23 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n+def test_partitions_no_reuse():\n+    # Create a list of partitions to check if they are distinct objects\n+    result = list(partitions(6, k=2))\n+    \n+    # Verify that each partition is a distinct object\n+    for i in range(len(result) - 1):\n+        assert result[i] is not result[i + 1]\n+    \n+    # Verify the content is as expected\n+    assert result == [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    \n+    # Additionally, ensure that no dictionaries are reused by modifying one and checking the others\n+    modified = result[0]\n+    modified[2] = 0  # Modify the first partition\n+    assert result[1][2] == 2  # Ensure the modification did not affect the second partition\n+    assert result[2][2] == 1  # Ensure the modification did not affect the third partition\n+    assert result[3][1] == 6  # Ensure the modification did not affect the fourth partition\n \n def test_binary_partitions():\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..4ecee4f 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,9 +583,26 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n-def test_float_mpf():\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+def test_zero_not_true():\n+    assert (S(0.0) == S.true) is False\n+    assert (S.true == S(0.0)) is False\n+    assert (S(0) == S.true) is False\n+    assert (S.true == S(0)) is False\n+\n+def test_float_boolean_comparisons():\n+    assert (S(1.0) == S.true) is True\n+    assert (S.true == S(1.0)) is True\n+    assert (S(0.0) == S.true) is False\n+    assert (S.true == S(0.0)) is False\n     import mpmath\n     mpmath.mp.dps = 100\n     mp_pi = mpmath.pi()\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..8a4cc7d 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -20,6 +21,30 @@ def test_subs():\n     assert e == Rational(6)\n \n \n+def test_subs_issue_21373():\n+    from sympy.functions.elementary.trigonometric import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    x_r, y_r, z = symbols('x_r y_r z', real=True)\n+    \n+    # Test for the original problem statement to ensure no PolynomialError\n+    expr1 = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    try:\n+        expr1.subs({1: 1.0})\n+        error_occurred = False\n+    except PolynomialError:\n+        error_occurred = True\n+    assert not error_occurred, \"Unexpected PolynomialError triggered on substitution.\"\n+    \n+    # Test with modifications mentioned in the issue to ensure the error doesn't occur\n+    expr2 = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    expr3 = exp(Piecewise((x_r, y_r > x_r), (y_r, True)))\n+    expr4 = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) * z ** -1.0)\n+\n+    assert expr2.subs({1: 1.0}).is_zero == False\n+    assert expr3.subs({1: 1.0}) is not None\n+    assert expr4.subs({1: 1.0}).is_zero == False\n+\n def test_subs_Matrix():\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..b5e5b76 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -161,8 +161,29 @@ def test_monomials():\n                     j**2*k**2, x*j, x**2*k, x**2*j**2*k, j, x**2*j*k,\n                     x*j**2, x*k**2, x*j*k, x**2*j**2*k**2, x*j*k**2, x**2, x**2*j*k**2\n             }\n-\n-def test_monomial_count():\n+def test_itermonomials_with_min_degrees():\n+    from sympy.polys.monomials import itermonomials\n+    from sympy.polys.orderings import monomial_key\n+\n+    x1, x2, x3 = symbols('x1, x2, x3')\n+    \n+    # Test case reflecting the bug report.\n+    max_degrees = 3\n+    min_degrees = 3\n+    monomials = sorted(itermonomials([x1, x2, x3], max_degrees, min_degrees=min_degrees), \n+                       key=monomial_key('grlex', [x1, x2, x3]))\n+    expected_monomials = {x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2, x2**3, x2**2*x3, x2*x3**2, x3**3}\n+    assert set(monomials) == expected_monomials\n+\n+    # Additional test cases\n+    x, y = symbols('x, y')\n+    # A simple case with two variables\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+\n+    # Three variables with different min_degrees and max_degrees\n+    i, j, k = symbols('i, j, k')\n+    assert set(itermonomials([i, j, k], 2, 2)) == {k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k}\n     assert monomial_count(2, 2) == 6\n     assert monomial_count(2, 3) == 10\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..352f91e 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -279,7 +279,18 @@ def test_String():\n     assert str(s) == 'foo'\n     assert repr(s) == \"String('foo')\"\n \n-def test_Comment():\n+def test_String_argument_invariance():\n+    st = String('foobar')\n+    assert st.func(*st.args) == st\n+    assert st.func(**st.kwargs()) == st\n+\n+    qs = QuotedString('baz')\n+    assert qs.func(*qs.args) == qs\n+    assert qs.func(**qs.kwargs()) == qs\n+\n+    cmnt = Comment('A comment')\n+    assert cmnt.func(*cmnt.args) == cmnt\n+    assert cmnt.func(**cmnt.kwargs()) == cmnt\n     c = Comment('foobar')\n     assert c.text == 'foobar'\n     assert str(c) == 'foobar'\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..bea9e43 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -8,7 +9,7 @@ from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n-from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..5a992b9 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -67,7 +68,38 @@ def test_PythonCodePrinter_standard():\n     raises(ValueError, lambda: PythonCodePrinter({'standard':'python4'}))\n \n \n-def test_MpmathPrinter():\n+def test_Min_Max_Printing():\n+    prntr = PythonCodePrinter()\n+\n+    # Test for Min\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Min(Min(x, y), z)) == \"min(min(x, y), z)\"\n+\n+    # Test for Max\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    assert prntr.doprint(Max(Max(x, y), z)) == \"max(max(x, y), z)\"\n+\n+    # Mix of Min and Max\n+    expr = Max(Min(x, y), z)\n+    assert prntr.doprint(expr) == \"max(min(x, y), z)\"\n+\n+    expr = Min(Max(x, y), z)\n+    assert prntr.doprint(expr) == \"min(max(x, y), z)\"\n+\n+    # Test with numbers\n+    expr = Min(x, 3)\n+    assert prntr.doprint(expr) == \"min(x, 3)\"\n+\n+    expr = Max(5, y)\n+    assert prntr.doprint(expr) == \"max(5, y)\"\n+\n+    expr = Min(3, Max(x, y))\n+    assert prntr.doprint(expr) == \"min(3, max(x, y))\"\n+\n+    expr = Max(Min(x, 2), Min(y, 3))\n+    assert prntr.doprint(expr) == \"max(min(x, 2), min(y, 3))\"\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..a4770a0 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,21 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n+def test_single_element_tuple():\n+    f2b = lambdify([], (1,))  # Test for single-element tuple\n+    assert f2b() == (1,)\n+    source_code = inspect.getsource(f2b)\n+    assert 'return (1,)' in source_code\n+\n+def test_multi_element_tuple():\n+    f2c = lambdify([], (1, 2))  # Test for multi-element tuple\n+    assert f2c() == (1, 2)\n+    source_code = inspect.getsource(f2c)\n+    assert 'return (1, 2)' in source_code\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..df922a0 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,11 +1,22 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n+def test_symbols_with_function_class():\n+    # Verify that symbols creates instances of UndefinedFunction when extra parentheses are used\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(u[1]) == UndefinedFunction\n+\n+    # Verify that without extra parentheses, the behavior is as expected\n+    q_plain = symbols('q:2', cls=Function)\n+    assert type(q_plain[0]) == UndefinedFunction\n \n def test_Str():\n     a1 = Str('a')\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..5df84fa 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -182,8 +182,34 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     st = tfunc(t)\n     assert _is_tensor_eq(st, t)\n \n+import sympy\n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, kahane_simplify, LorentzIndex\n+from sympy.tensor.tensor import tensor_indices\n \n-def test_kahane_algorithm():\n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Original test for two cases\n+    t1 = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r1 = kahane_simplify(t1)\n+    assert r1.equals(4*G(rho)*G(sigma))\n+\n+    t2 = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r2 = kahane_simplify(t2)\n+    assert r2.equals(4*G(rho)*G(sigma))\n+\n+    # Additional test cases for more permutations\n+    t3 = G(sigma)*G(rho)*G(mu)*G(-mu)\n+    r3 = kahane_simplify(t3)\n+    assert r3.equals(4*G(sigma)*G(rho))\n+    \n+    t4 = G(mu)*G(-mu)*G(sigma)*G(rho)\n+    r4 = kahane_simplify(t4)\n+    assert r4.equals(4*G(sigma)*G(rho))\n+    \n+    t5 = G(mu)*G(rho)*G(sigma)*G(-mu)\n+    r5 = kahane_simplify(t5)\n+    assert r5.equals(4*G(rho)*G(sigma))\n     # Wrap this function to convert to and from TIDS:\n \n     def tfunc(e):\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..58c61fb 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,9 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Symbol, S, FiniteSet, Contains, Integers, Reals\n+from sympy.testing.pytest import raises\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -46,6 +49,18 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    # Test that calling as_set() on Contains raises NotImplementedError\n+    with raises(NotImplementedError):\n+        Contains(x, FiniteSet(y)).as_set()\n+\n+    with raises(NotImplementedError):\n+        Contains(x, S.Integers).as_set()\n+\n+    with raises(NotImplementedError):\n+        Contains(x, S.Reals).as_set()\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..ae6cd60 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,30 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..ddf4abd 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -548,7 +548,46 @@ def test_issue_24062():\n     R = Quantity('R')\n     C = Quantity('C')\n     T = Quantity('T')\n-    SI.set_quantity_dimension(R, impedance)\n+from sympy.physics.units import Quantity, velocity, acceleration, time, meter, second\n+from sympy.physics.units.systems.si import SI\n+\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+\n+def test_equivalent_dimension_with_different_scale_factors():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    expr = A1*T1 + V1\n+    # The dimensions are equivalent: (acceleration*time) and (velocity)\n+    # Should not raise an error if properly detecting equivalent dimensions\n+    factor, dimension = SI._collect_factor_and_dimension(expr)\n+    assert dimension == SI.get_quantity_dimension(V1)\n     SI.set_quantity_dimension(C, capacitance)\n     SI.set_quantity_dimension(T, time)\n     R.set_global_relative_scale_factor(1, ohm)\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..3a075ed 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -43,6 +44,21 @@ def test_homomorphism():\n     assert T.invert(a**-1*b**-1*a**2) == a*b**-1\n \n     # PermutationGroup -> PermutationGroup\n+\n+    # Test case for verifying the issue with _check_homomorphism\n+    # This test checks if the _check_homomorphism works correctly\n+    # for PermutationGroup -> PermutationGroup with inverted generators.\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Additional test for homomorphism using inverted generator\n+    a = Permutation(0, 1)\n+    b = Permutation(1, 2)\n+    P = PermutationGroup([a, b])\n+    # Attempt to map with inverted generator\n+    T = homomorphism(P, P, [a, b], [b**-1, a**-1])\n+    assert T.is_isomorphism() is False\n     D = DihedralGroup(8)\n     p = Permutation(0, 1, 2, 3, 4, 5, 6, 7)\n     P = PermutationGroup(p)\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..03e7d97 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -270,6 +270,26 @@ def test_PolyElement_as_expr():\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n+def test_PolyElement_accepts_custom_symbols():\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    # Test with different symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test with same symbols as ring (expect identical expression)\n+    X, Y, Z = symbols(\"x,y,z\")\n+    g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+    assert f.as_expr(X, Y, Z) == f.as_expr()\n+\n+    # Test with insufficient symbol length (should raise ValueError)\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with excessive symbol length (should raise ValueError)\n+    raises(ValueError, lambda: f.as_expr(U, V, W, X))\n+\n def test_PolyElement_from_expr():\n     x, y, z = symbols(\"x,y,z\")\n     R, X, Y, Z = ring((x, y, z), ZZ)\n",
  "sympy__sympy-24661": "",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..cf13ce3 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,8 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n     ],\n )\n def test_unit_grammar(strings, unit):\n@@ -90,6 +92,8 @@ def test_unit_grammar_fail(string):\n         ([\"[cm/s2]\"], dex(u.cm / u.s**2)),\n         ([\"[K]\"], dex(u.K)),\n         ([\"[-]\"], dex(u.dimensionless_unscaled)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n     ],\n )\n def test_cds_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..0a77c28 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1899,7 +1899,32 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Author.objects.get(), author)\n \n     @skipUnlessDBFeature('supports_table_check_constraints')\n-    def test_remove_constraint(self):\n+    def test_check_constraint_with_or_and_sqlite(self):\n+        # Setting up original state\n+        app_label = 'test_checkconstraint_with_or_and'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name='field_1_has_value_if_flag_set')\n+\n+        # Applying the operation\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        \n+        # Execute and test the migration SQL on SQLite\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        \n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        \n+        # Ensure constraint applies correctly\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        TestConstraint.objects.create(field_1=1, flag=True)\n+        TestConstraint.objects.create(field_1=None, flag=False)\n+\n+        # Ensuring SQL does not include fully qualified names\n+        # This is a conceptual check since we don't access SQL directly here\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n             models.CheckConstraint(check=models.Q(pink__gt=2), name=\"test_remove_constraint_pony_pink_gt_2\"),\n             models.CheckConstraint(check=models.Q(pink__lt=100), name=\"test_remove_constraint_pony_pink_lt_100\"),\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..e7e0c6b 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,6 +163,27 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n+    def test_translate_url_with_optional_parameters(self):\n+        # Test case where the optional parameter is missing\n+        with translation.override('en'):\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/', 'nl'),\n+                '/nl/regex_optional/1/'\n+            )\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/2/', 'nl'),\n+                '/nl/regex_optional/1/2/'\n+            )\n+\n+        with translation.override('nl'):\n+            self.assertEqual(\n+                translate_url('/nl/regex_optional/1/', 'en'),\n+                '/en/regex_optional/1/'\n+            )\n+            self.assertEqual(\n+                translate_url('/nl/regex_optional/1/2/', 'en'),\n+                '/en/regex_optional/1/2/'\n+            )\n \n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..4ffcb31 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -5,7 +6,12 @@ import datetime\n from operator import attrgetter\n from unittest import expectedFailure\n \n+import uuid\n from django import forms\n+from .models import (\n+    ArticleWithAuthor, BachelorParty, BirthdayParty, BusStation, Child,\n+    Derived, Item, \n+)\n from django.test import TestCase\n \n from .models import (\n@@ -18,7 +24,32 @@ from .models import (\n \n \n class ModelInheritanceTest(TestCase):\n-    def test_model_inheritance(self):\n+    class ResetPrimaryKeyTestCase(TestCase):\n+        def setUp(self):\n+            # Create an initial Derived object with a primary key\n+            self.initial_derived = Derived.objects.create(f=True)\n+\n+        def test_reset_primary_key_creates_new_instance(self):\n+            # Retrieve the initial object\n+            derived_object = Derived.objects.get(pk=self.initial_derived.pk)\n+            # Reset the primary key to None\n+            derived_object.reset()\n+            derived_object.save()\n+\n+            # Fetch all Derived objects from the database\n+            derived_objects = Derived.objects.all()\n+\n+            # There should be two objects: the original and the new one\n+            self.assertEqual(derived_objects.count(), 2)\n+\n+            # Check that the initial object still exists\n+            initial_object = Derived.objects.get(pk=self.initial_derived.pk)\n+            self.assertTrue(initial_object.f)\n+\n+            # Verify that the new object is created with a new primary key\n+            new_object = Derived.objects.exclude(pk=self.initial_derived.pk).first()\n+            self.assertIsNotNone(new_object)\n+            self.assertFalse(new_object.f)\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n         # existent child instance, saving the Parent doesn't duplicate the\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..d4afff8 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -606,6 +606,13 @@ class DeletionTests(TestCase):\n \n class FastDeleteTests(TestCase):\n \n+    def test_full_delete_no_subquery(self):\n+        # Ensure that a full delete does not use a subquery.\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertNotIn('SELECT', sql)\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +709,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..2becb2b 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,6 +26,13 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n+    def test_to_python_with_dict(self):\n+        f = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        # Test with a dictionary which should raise a ValidationError\n+        with self.assertRaisesMessage(ValidationError, msg % ({})):\n+            f.to_python({})\n+\n     def test_default(self):\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..704b5e4 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n \n import django\n from django.db import models\n from django.test import TestCase\n+from django.db.models import Sum\n \n from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n \n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..e38fc5b 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -24,6 +24,13 @@ class JSONFieldTest(SimpleTestCase):\n         with self.assertRaisesMessage(ValidationError, 'Enter a valid JSON.'):\n             field.clean('{some badly formed: json}')\n \n+    def test_unicode_handling(self):\n+        field = JSONField()\n+        # Test Unicode characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d\uff0c\u4e16\u754c', 'ja\u017a\u0144']), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n+\n     def test_prepare_value(self):\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..a77e9ec 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,7 +6602,23 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/customprefix/')\n+    def test_redirect_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get('/customprefix' + known_url[:-1], SCRIPT_NAME='/customprefix/')\n+        self.assertRedirects(\n+            response,\n+            '/customprefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6628,7 +6644,23 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertEqual(response.status_code, 404)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/customprefix/')\n+    def test_redirect_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get('/customprefix' + known_url[:-1], SCRIPT_NAME='/customprefix/')\n+        self.assertRedirects(\n+            response,\n+            '/customprefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..066f340 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,42 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_serialize_with_mixin_and_abstractbase(self):\n+        \"\"\"\n+        Tests that migrations with models using mixins and abstract base classes\n+        do not miss necessary imports.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        fields = {\n+            'name': MyField(primary_key=True),\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name='MyModel',\n+                    fields=tuple(fields.items()),\n+                    options={'abstract': False},\n+                    bases=(MyMixin, MyBaseModel),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Make sure the generated file contains the necessary import for models\n+        self.assertIn(\"from django.db import models\", output)\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "",
  "django__django-15695": "",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..49dd60c 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,7 +3497,53 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n-class LocalizedModelFormTest(TestCase):\n+import unittest\n+from django.forms import forms, modelform_factory\n+from django.test import TestCase\n+from .models import Person, Triple  # Ensure Person and Triple are imported for testing\n+\n+class FormFieldCallbackTest(TestCase):\n+    def test_custom_callback_in_meta_applied(self):\n+        def callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.widget = forms.Textarea\n+            return formfield\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = callback\n+\n+        # Verify that the callback is applied when BaseForm is used directly.\n+        for field in BaseForm.base_fields.values():\n+            self.assertIsInstance(field.widget, forms.Textarea)\n+\n+        # Verify that the callback is applied when the form is built via modelform_factory.\n+        FactoryForm = modelform_factory(Person, form=BaseForm)\n+        for field in FactoryForm.base_fields.values():\n+            self.assertIsInstance(field.widget, forms.Textarea)\n+\n+    def test_factory_specified_callback_overrides_meta(self):\n+        def base_callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.widget = forms.Textarea\n+            return formfield\n+        \n+        def override_callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.widget = forms.TextInput\n+            return formfield\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = base_callback\n+\n+        FactoryForm = modelform_factory(Person, form=BaseForm, formfield_callback=override_callback)\n+        for field in FactoryForm.base_fields.values():\n+            self.assertIsInstance(field.widget, forms.TextInput)\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..e9a5734 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,9 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.core.serializers import serialize\n+from django.core.serializers.base import SerializationError\n+from django.db import models\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n@@ -67,7 +69,33 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             if field_name in obj_dict[\"fields\"]\n         ]\n \n-    def test_indentation_whitespace(self):\n+    def test_m2m_custom_manager_with_select_related(self):\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = Test.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+\n+        try:\n+            data = serialize(\"json\", [test_instance])\n+            self.assertTrue(isinstance(data, str))  # Ensure serialization returns a string\n+        except SerializationError:\n+            self.fail(\"Serialization failed for m2m with custom manager using select_related\")\n         s = serializers.json.Serializer()\n         json_data = s.serialize([Score(score=5.0), Score(score=6.0)], indent=2)\n         for line in json_data.splitlines():\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..14b905a 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -207,7 +207,14 @@ def test_cmap(cmap):\n     pickle.dumps(cmap)\n \n \n-def test_unpickle_canvas():\n+def test_dpi_after_unpickle():\n+    import matplotlib.figure as mfigure\n+    fig = mfigure.Figure(dpi=100)\n+    fig_path = BytesIO()\n+    pickle.dump(fig, fig_path)\n+    fig_path.seek(0)\n+    fig_unpickled = pickle.load(fig_path)\n+    assert fig.dpi == fig_unpickled.dpi, \"DPI should remain the same after unpickling\"\n     fig = mfigure.Figure()\n     assert fig.canvas is not None\n     out = BytesIO()\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..ca6318a 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6587,6 +6587,14 @@ def test_integrate(dask):\n \n     # along y\n     actual = da.integrate(\"y\")\n+\n+    # Test using coord argument (new API)\n+    actual_coord = da.integrate(coord=\"y\")\n+    assert_equal(actual, actual_coord)\n+    \n+    # Check FutureWarning on using dim argument\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..9950604 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -130,6 +130,32 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     )\n     assert assertString in output.err\n \n+import re\n+from typing import Any\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+    (\"foo{1,3}, bar{2,}\", [\"foo{1,3}\", \"bar{2,}\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n \n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an option is passed and one\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..e177e8d 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,31 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas as output configuration.\"\"\"\n+\n+    pd = pytest.importorskip(\"pandas\")\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X, y=None):\n+            return self\n+\n+        def transform(self, X):\n+            return X[\"value\"].groupby(X[\"date\"]).sum().to_frame().T\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # This should work without raising an error\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    union.set_output(transform=\"pandas\")\n+    result = union.fit_transform(data)\n+    expected_columns = [\"my_transformer__value\"]\n+    assert result.columns.tolist() == expected_columns\n+    assert len(result) == 1  # Only one row due to aggregation over dates\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..4f451f2 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -10,7 +10,8 @@\n \n import pytest\n \n-from sphinx import addnodes\n+from sphinx import addnodes, application\n+from sphinx.testing.util import parse_doctree\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n@@ -30,4 +31,22 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_typehints_none_linking(app):\n+    app.builder.build_all()\n+    \n+    # Test with autodoc_typehints='description'\n+    app.config.autodoc_typehints = 'description'\n+    content = app.env.get_doctree('index')\n+    assert isinstance(content[3], addnodes.desc)\n+    assert 'https://docs.python.org/3/library/constants.html#None' in content[3][1].astext()\n+\n+    # Test with autodoc_typehints='signature'\n+    app.config.autodoc_typehints = 'signature'\n+    app.builder.build_all()\n+    content = app.env.get_doctree('index')\n+    assert isinstance(content[3], addnodes.desc)\n+    assert 'https://docs.python.org/3/library/constants.html#None' not in content[3][1].astext()\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..7aaaf10 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,40 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_multiple_parameters_with_optional(self):\n+        # Test case for bug report related to multiple parameters including \"optional\" keyword\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of ``x1``, ``x2``.\n+x3, x4 : array_like, optional\n+    Optional input arrays, description of ``x3``, ``x4``.\n+\"\"\"\n+\n+        # napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:Parameters: * **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+             * **x3, x4** (:class:`array_like`, *optional*) -- Optional input arrays, description of ``x3``, ``x4``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`\n+:param x3: Optional input arrays, description of ``x3``, ``x4``.\n+:type x3: :class:`array_like`, *optional*\n+:param x4: Optional input arrays, description of ``x3``, ``x4``.\n+:type x4: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..e9f9b29 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -774,7 +774,50 @@ def test_pydecoratormethod_signature(app):\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n \n+import pytest\n+from docutils import nodes\n+from sphinx import addnodes\n+from sphinx.testing import restructuredtext\n+\n @pytest.mark.sphinx(freshenv=True)\n+def test_type_rtype_resolution(app):\n+    text = (\"\"\"\n+    .. py:module:: mod\n+\n+    .. py:class:: A\n+\n+    .. py:module:: mod.submod\n+\n+    .. py:class:: A\n+\n+    .. py:function:: f()\n+\n+        :param A a: blah blah\n+        :param mod.A b: blah blah\n+        :param mod.submod.A c: blah blah\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    \"\"\")\n+    # Parse the reStructuredText input\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Verify that there are no ambiguous warnings and resolutions are correct\n+    # Check for the first function with unqualified parameter and return types.\n+    param_reference_node = doctree.traverse(addnodes.pending_xref)\n+    assert len(param_reference_node) == 6  # We expect three parameters and three return types\n+\n+    # First 'A' should resolve to 'mod.submod.A'\n+    assert param_reference_node[0]['reftarget'] == 'mod.submod.A'\n+    # Assert the second param resolves to 'mod.A'\n+    assert param_reference_node[1]['reftarget'] == 'mod.A'\n+    # Assert the third param resolves to 'mod.submod.A'\n+    assert param_reference_node[2]['reftarget'] == 'mod.submod.A'\n+    # Assert the return type resolves correctly\n+    assert param_reference_node[3]['reftarget'] == 'mod.submod.A'\n+    assert param_reference_node[4]['reftarget'] == 'mod.A'\n+    assert param_reference_node[5]['reftarget'] == 'mod.submod.A'\n def test_module_index(app):\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..d4fd61d 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1047,6 +1047,17 @@ def test__solveset_multi():\n             ImageSet(Lambda(((r,),), (r, 0)), ImageSet(Lambda(r, (r,)), Interval(0, 1))),\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n+from sympy import Eq, cos, sin, S, Reals, ConditionSet, sqrt\n+from sympy.abc import x, n\n+\n+def test_issue_18188():\n+    # Verify that a ConditionSet is returned for unsolvable equations\n+    result1 = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert result1.as_set() == ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)\n+\n+    result2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert result2.as_set() == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n+\n \n def test_conditionset():\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..2d83924 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3330,6 +3330,26 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+def test_issue_8695():\n+    # Test case from the issue description.\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == expected_result\n+\n+    # Additional test cases\n+    # Case with distinct roots\n+    p2 = (x - 1)**3 * (x - 4)**2\n+    expected_result2 = (1, [(x - 4, 2), (x - 1, 3)])\n+    assert sqf_list(p2) == expected_result2\n+\n+    # Case with no multiplicity\n+    p3 = (x + 1) * (x + 2) * (x + 3)\n+    expected_result3 = (1, [(x + 1, 1), (x + 2, 1), (x + 3, 1)])\n+    assert sqf_list(p3) == expected_result3\n+\n+    # Complex factor case\n+    p4 = (x - I) * (x + I)\n+    expected_result4 = (1, [(x**2 + 1, 1)])\n+    assert sqf_list(p4) == expected_result4\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..79938f2 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -252,8 +252,12 @@ def test_Poly_from_poly():\n def test_Poly_from_expr():\n     raises(GeneratorsNeeded, lambda: Poly.from_expr(S.Zero))\n     raises(GeneratorsNeeded, lambda: Poly.from_expr(S(7)))\n+from sympy import factor, expand, I\n+from sympy.abc import x, y\n \n-    F3 = FF(3)\n+def test_issue_18895():\n+    z = expand((x-1)*(y-1))\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n \n     assert Poly.from_expr(x + 5, domain=F3).rep == DMP([F3(1), F3(2)], F3)\n     assert Poly.from_expr(y + 5, domain=F3).rep == DMP([F3(1), F3(2)], F3)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..b46e172 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,17 @@\n+\n+def test_symbol_no_dict_attribute():\n+    # Test to ensure that Symbol instances do not have a __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Expected Symbol instance to not have a __dict__ attribute\"\n+    assert hasattr(s, '__slots__'), \"Expected Symbol instance to have __slots__\"\n+    with raises(AttributeError):\n+        s.__dict__\n+\n+def test_symbol_slots():\n+    # Test to ensure __slots__ are defined correctly\n+    s = Symbol('s')\n+    assert s.__slots__ == ('name',), \"Expected __slots__ to contain ('name',)\"\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -11,7 +25,7 @@ from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n-from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n+from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum, Symbol\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n from sympy.core import I, pi\n",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..dc12637 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,8 +3201,38 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    \n+    def test_boundfield_subwidget_id_for_label(self):\n+        \"\"\"\n+        If auto_id is provided when initializing the form, the generated ID in\n+        subwidgets must reflect that prefix.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+        \n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n+    \n+    def test_boundfield_subwidget_custom_id_for_label(self):\n+        \"\"\"\n+        If custom IDs are provided in `ChoiceWidget.options`, \n+        they override the generated ID.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_%s'}),\n+            )\n \n-    def test_boundfield_widget_type(self):\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..a5de48a 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -302,6 +302,35 @@ def test_tool_line_handle():\n     assert tool_line_handle.positions == positions\n \n \n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n+\n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n \n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..b15b8c4 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,12 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+from sklearn.linear_model import Lasso\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..87b5a86 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,8 +147,28 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+import pytest\n \n-# Import the data\n+def test_cross_val_predict_multioutputclassifier_predict_proba():\n+    # Create a multilabel dataset\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=5, n_labels=2, random_state=42)\n+    \n+    # Initialize a MultiOutputClassifier with a base estimator that supports predict_proba\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # Test cross_val_predict with method='predict_proba' to ensure no AttributeError is raised\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+    \n+    # Ensure the predictions have the correct structure: a list of arrays\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]\n+    for proba in pred_proba:\n+        assert proba.shape[0] == X.shape[0]\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n X = iris.data\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..d26f7cf 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -158,7 +158,40 @@ def test_restify_pep_585():\n                                                    \"[:py:class:`int`, ...]]\")\n \n \n+from sphinx.util.typing import restify, stringify\n+from sphinx.ext.autodoc import mock\n+import pytest\n+\n @pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n+\n+\n+def test_restify_mock_inheritance():\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockBase(nn.Module):\n+            pass\n+        \n+        class Derived(MockBase):\n+            pass\n+\n+        # Test restify with inherited class\n+        assert restify(Derived) == ':py:class:`tests.test_util_typing.Derived`'\n+        # Test restify Base\n+        assert restify(MockBase) == ':py:class:`torch.nn.Module`'\n+\n+def test_stringify_mock_inheritance():\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockBase(nn.Module):\n+            pass\n+        \n+        class Derived(MockBase):\n+            pass\n+\n+        # Test stringify with inherited class\n+        assert stringify(Derived) == 'tests.test_util_typing.Derived'\n+        # Test stringify Base\n+        assert stringify(MockBase) == 'torch.nn.Module'\n def test_restify_type_union_operator():\n     assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n     assert restify(int | str) == \":py:class:`int` | :py:class:`str`\"  # type: ignore\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..71c2d3d 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,20 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+from sympy import Symbol, Product, S\n+\n+def test_issue_13546():\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    \n+    # Test the specific case from the issue\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    \n+    # Additional test cases to verify the fix for other values\n+    assert p.subs(n, 3).doit() == S(315)/8  # (3 + 1) * (3 + 1/2) * (3 + 1/4)\n+    assert p.subs(n, 1).doit() == 2          # (1 + 1)\n+    assert p.subs(n, 4).doit() == S(2835)/16 # (4 + 1) * (4 + 1/2) * (4 + 1/4) * (4 + 1/8)\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +369,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}