{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..477d038 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,39 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_floating_point_string_representation_card_issue_14507(self):\n+        \"\"\"Ensure float values are correctly represented avoiding comment truncation\"\"\"\n+\n+        # Test case for the specific float and comment pair in the issue\n+        k = \"HIERARCH ESO IFM CL RADIUS\"\n+        v = 0.009125\n+        com = \"[m] radius arround actuator to avoid\"\n+        c = fits.Card(k, v, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Further tests for different float representations\n+        # Verifying that different float values do not lead to unnecessary extension\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 3.14159265358979, \"This is a longer comment that just fits\")\n+        expected_str = f\"{k} = 3.14159265358979 / This is a longer comment that just fits\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 1e-10, \"A small number with a long comment that fits\")\n+        expected_str = f\"{k} = 1E-10 / A small number with a long comment that fits\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(\"TESTKEY\", 0.1, \"Minimal rounding\")\n+        expected_str = \"TESTKEY = 0.1 / Minimal rounding\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..e44fb0f 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            pass\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n \n-def test_set_locale():\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..a385c8d 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -168,9 +168,24 @@ def test_multiple_solidus():\n     assert 'm/s/kg' in str(warning_lines[0].message)\n     assert 'discouraged' in str(warning_lines[0].message)\n \n-    with pytest.raises(ValueError):\n-        u.Unit(\"m/s/kg\", format=\"vounit\")\n+import astropy.units as u\n+import pytest\n+\n+\n+def test_unit_equality_with_none():\n+    # Create an unrecognized unit in silent mode\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    \n+    # Assert that comparing against None does not raise an error and returns False\n+    assert unit != None  # noqa\n+    assert not (unit == None)  # Should not raise TypeError, should be False\n \n+    # Additional tests for None comparison\n+    assert unit not in [None, u.m]\n+    assert (unit == u.m) == False  # Confirm it's only False, not raising an error\n+\n+    with pytest.raises(TypeError):\n+        unit5 = u.Unit(None)\n \n def test_unknown_unit3():\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n",
  "astropy__astropy-7671": "",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..4de1f6a 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -77,7 +77,47 @@ class TestHeaderFunctions(FitsTestCase):\n         assert 'B' in header\n         assert header[0] == 'B'\n         assert header['B'] == 'B'\n-        assert header.comments['B'] == 'C'\n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_card_from_unicode(self):\n+        \"\"\"\n+        Test loading a Card from a unicode string (str type in Python 3).\n+        \"\"\"\n+        c = fits.Card.fromstring(\"DEF     = 'def'\")\n+        assert c.keyword == 'DEF'\n+        assert c.value == 'def'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n+    def test_header_fromstring_unicode(self):\n+        \"\"\"\n+        Test reading a Header from a unicode string (str type in Python 3).\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'r', encoding='ascii') as fobj:\n+            pri_hdr_from_unicode = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_unicode['NAXIS']\n+        assert pri_hdr == pri_hdr_from_unicode\n+        assert pri_hdr.tostring() == pri_hdr_from_unicode.tostring()\n \n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n@@ -2330,6 +2370,9 @@ class TestHeaderFunctions(FitsTestCase):\n                 c.verify('exception')\n \n \n+from astropy.io import fits\n+import pytest\n+\n class TestRecordValuedKeywordCards(FitsTestCase):\n     \"\"\"\n     Tests for handling of record-valued keyword cards as used by the\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..16f4b4f 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -34,8 +34,38 @@ except ImportError:\n \n \"\"\" The Quantity class will represent a number + unit + uncertainty \"\"\"\n \n+import numpy as np\n+import astropy.units as u\n+import pytest\n+import decimal\n \n class TestQuantityCreation:\n+    def test_float16_preservation(self):\n+        \"\"\"Test that float16 is preserved when creating a Quantity.\"\"\"\n+        # Create a np.float16 quantity\n+        q_float16 = np.float16(1) * u.km\n+        assert q_float16.dtype == np.float16\n+        \n+        # Create an array of float16s and make it a Quantity\n+        a_float16 = np.array([1., 2.], dtype=np.float16)\n+        q_float16_array = u.Quantity(a_float16, u.yr)\n+        assert q_float16_array.dtype == a_float16.dtype\n+        \n+        # Ensure that float32 behaves correctly for comparison\n+        a_float32 = np.array([1., 2.], dtype=np.float32)\n+        q_float32_array = u.Quantity(a_float32, u.yr)\n+        assert q_float32_array.dtype == a_float32.dtype\n+\n+    def test_float32_and_higher_preservation(self):\n+        \"\"\"Test that float32 and higher precisions are preserved.\"\"\"\n+        q_float32 = np.float32(1) * u.km\n+        assert q_float32.dtype == np.float32\n+\n+        q_float64 = np.float64(1) * u.km\n+        assert q_float64.dtype == np.float64\n+\n+        q_float128 = np.float128(1) * u.km\n+        assert q_float128.dtype == np.float128\n \n     def test_1(self):\n         # create objects through operations with Unit objects:\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..61ec3ea 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -225,6 +225,23 @@ TEST_DATA = [\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n+    # Invalid URLs with unencoded characters in username and/or password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+\n+    # Valid URLs with correctly encoded characters\n+    (URLValidator(), 'http://foo%40bar@example.com', None),\n+    (URLValidator(), 'http://foo%3Abar@example.com', None),\n+    (URLValidator(), 'http://foo%2Fbar@example.com', None),\n+\n+    # Invalid URLs with valid parts\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+\n     (BaseValidator(True), True, None),\n     (BaseValidator(True), False, ValidationError),\n \n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..0ff4268 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When  # Ensure required imports are present\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -395,6 +397,37 @@ class AggregateTestCase(TestCase):\n         sql = ctx.captured_queries[0]['sql']\n         self.assertIn('SELECT COUNT(*) ', sql)\n \n+    def test_count_distinct_expression(self):\n+        # Original test to ensure that the issue is fixed\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_no_match(self):\n+        # Additional test case where condition should match no records\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=1000, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 0)\n+\n+    def test_count_distinct_expression_multiple_conditions(self):\n+        # Additional test case with multiple conditions\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(\n+                When(pages__gt=300, then='rating'),\n+                When(pages__lt=150, then='rating')\n+            ), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 5) # Adjust based on expected database state\n+\n+    def test_count_distinct_expression_with_null_values(self):\n+        # Additional test to check handling of null values\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=200, then='unknown_field')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 0)  # Assuming no records with null 'unknown_field'\n+\n     def test_non_grouped_annotation_not_in_group_by(self):\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..aa49d38 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1092,6 +1092,12 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertEqual(default_storage.base_location, '')\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        By default, FILE_UPLOAD_PERMISSIONS should be set to 0o644.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n \n     def test_override_file_upload_permissions(self):\n         \"\"\"\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..90a2ae0 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,7 +1,9 @@\n+\n import os\n import signal\n from unittest import mock\n \n+import subprocess\n from django.db.backends.postgresql.client import DatabaseClient\n from django.test import SimpleTestCase\n \n@@ -29,7 +31,40 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_subprocess_run_with_pgpassword(self):\n+        \"\"\"Test that subprocess.run is used with the correct PGPASSWORD environment variable.\"\"\"\n+        def _mock_subprocess_run(*args, **kwargs):\n+            env = kwargs.get('env', {})\n+            pgpassword = env.get('PGPASSWORD')\n+            self.assertEqual(pgpassword, 'somepassword')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            dbinfo = {\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+            }\n+            self._run_it(dbinfo)\n+\n+    def test_subprocess_run_without_pgpassword(self):\n+        \"\"\"Test that subprocess.run is used without PGPASSWORD when no password is provided.\"\"\"\n+        def _mock_subprocess_run(*args, **kwargs):\n+            env = kwargs.get('env', {})\n+            pgpassword = env.get('PGPASSWORD')\n+            self.assertIsNone(pgpassword)\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            dbinfo = {\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+            }\n+            self._run_it(dbinfo)\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +148,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "",
  "django__django-11095": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..9def715 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\n', 'trailingnewline\\u000A'\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +250,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n', 'trailingnewline\\u000A']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +258,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..b717187 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -1,5 +1,6 @@\n import os\n \n+import os\n from django.core.exceptions import ImproperlyConfigured\n from django.template import Context\n from django.template.engine import Engine\n@@ -22,7 +23,21 @@ class RenderToStringTest(SimpleTestCase):\n         )\n \n \n-class GetDefaultTests(SimpleTestCase):\n+class AutoescapeTests(SimpleTestCase):\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..6c1f0e2 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -445,7 +445,30 @@ class HttpResponseTests(unittest.TestCase):\n         r.writelines(['foo\\n', 'bar\\n', 'baz\\n'])\n         self.assertEqual(r.content, b'foo\\nbar\\nbaz\\n')\n \n-    def test_unsafe_redirect(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_large_content(self):\n+        large_content = memoryview(b'a' * 65536)  # Test a large memoryview object\n+        r = HttpResponse(large_content)\n+        self.assertEqual(r.content, b'a' * 65536)\n+\n+    def test_memoryview_unicode_content(self):\n+        # Although this is not typical for binary data, it's a robustness check.\n+        unicode_data = memoryview('caf\u00e9'.encode('utf-8'))\n+        r = HttpResponse(unicode_data)\n+        self.assertEqual(r.content, 'caf\u00e9'.encode('utf-8'))\n+\n+    def test_memoryview_empty_content(self):\n+        empty_content = memoryview(b'')\n+        r = HttpResponse(empty_content)\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_mixed_content(self):\n+        parts = [memoryview(b'123'), b'456', '789']\n+        r = HttpResponse(parts)\n+        self.assertEqual(r.content, b'123456789')\n         bad_urls = [\n             'data:text/html,<script>window.alert(\"xss\")</script>',\n             'mailto:test@example.com',\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..615c717 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -508,8 +508,29 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, ['0001_initial'])\n \n+class NamespacePackageTests(MigrationTestBase):\n \n-class PycLoaderTests(MigrationTestBase):\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_empty_dir_namespace_package'},\n+    )\n+    def test_loading_empty_namespace_directory(self):\n+        \"\"\"An empty directory without an __init__.py should not load migrations.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            list(migration_loader.disk_migrations.keys()),\n+            []\n+        )\n \n     def test_valid(self):\n         \"\"\"\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..3c0b686 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -635,8 +635,47 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, '<h2>Inner2s</h2>')\n         self.assertNotContains(response, 'Add another Inner2')\n         self.assertNotContains(response, 'id=\"id_inner2_set-TOTAL_FORMS\"')\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n \n-    def test_inline_add_m2m_add_perm(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # The field in the inline is read-only.\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n         permission = Permission.objects.get(codename='add_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(reverse('admin:admin_inlines_author_add'))\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..71e8b49 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,35 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_empty_fields_list(self):\n+        \"\"\"model_to_dict with fields=[] should return an empty dict.\"\"\"\n+        bw = BetterWriter.objects.create(name='Test Writer', score=15)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_specific_fields_list(self):\n+        \"\"\"model_to_dict with a specific list of fields should return only those fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Test Writer', score=15)\n+        self.assertEqual(model_to_dict(bw, fields=['id', 'name']), {'id': bw.id, 'name': bw.name})\n+\n+    def test_no_fields_argument(self):\n+        \"\"\"model_to_dict with no fields argument should return all fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Test Writer', score=15)\n+        self.assertEqual(sorted(model_to_dict(bw)), ['id', 'name', 'score', 'writer_ptr'])\n+\n+    def test_exclude_all_fields(self):\n+        \"\"\"model_to_dict with all fields in exclude should return an empty dict.\"\"\"\n+        bw = BetterWriter.objects.create(name='Test Writer', score=15)\n+        self.assertEqual(model_to_dict(bw, exclude=['id', 'name', 'score', 'writer_ptr']), {})\n+\n+    def test_exclude_none(self):\n+        \"\"\"model_to_dict with exclude=[] should return all fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Test Writer', score=15)\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=[])), ['id', 'name', 'score', 'writer_ptr'])\n+\n+    def test_exclude_specific_fields(self):\n+        \"\"\"model_to_dict excluding certain fields should return the rest.\"\"\"\n+        bw = BetterWriter.objects.create(name='Test Writer', score=15)\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=['id', 'name'])), ['score', 'writer_ptr'])\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..2fc25bf 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n@@ -464,7 +466,36 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # This test verifies that after deleting a User instance with no dependencies,\n+        # the primary key (pk) is set to None.\n+        u = User.objects.create()\n+        collector = Collector(using='default')\n+        # Ensure User instance can be fast-deleted\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        # Confirm the primary key has been cleared\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_not_fast_deletable(self):\n+        # Assuming the HiddenUser model has dependencies, it should not be fast-deletable.\n+        hu = HiddenUser.objects.create()\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(hu))\n+        hu.delete()\n+        # Even if not fast-deletable, ensure pk is cleared after deletion\n+        self.assertIsNone(hu.pk)\n+\n+    def test_delete_instance_with_manual_cascade(self):\n+        # Similar test with manual cascade delete handling\n+        parent = Parent.objects.create()\n+        child = Child.objects.create(parent=parent)\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(parent))\n+        parent.delete()\n+        # Check both objects are deleted and pk is cleared for parent\n+        self.assertIsNone(parent.pk)\n+        self.assertFalse(Child.objects.filter(pk=child.pk).exists())\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..749b505 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,11 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('0.{}1'.format('0' * 199), 2, '0.00'),\n+            ('0.{}1'.format('0' * 200), 2, '0.00'),\n+            ('0.{}1'.format('0' * 199), 10, '0.0000000000'),\n+            ('0.{}1234'.format('0' * 199), 6, '0.000000'),\n+            ('1e-205', 2, '0.00'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..7a8198e 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,19 @@\n+\n+import uuid\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=200)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+    description = models.TextField()\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..e2c9e66 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,8 +81,31 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {\n+                    'PGSSLCERT': 'client.crt',\n+                    'PGSSLKEY': 'client.key',\n+                    'PGSSLMODE': 'verify-ca',\n+                    'PGSSLROOTCERT': 'root.crt',\n+                },\n+                None,  # Assuming no password for simplicity\n+            )\n+        )\n+\n     def test_sigint_handler(self):\n-        \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n+        \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n             self.assertEqual(handler, signal.SIG_IGN)\n",
  "django__django-11265": "",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..4771491 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -27,7 +27,7 @@ class TestUtilsHtml(SimpleTestCase):\n             ('<', '&lt;'),\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n-            (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..406f3e0 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,7 +243,31 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n+    def test_skip_checks(self):\n+        \"\"\"\n+        Test that the --skip-checks option allows skipping system checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # This would normally trigger a staticfiles.E001 check\n+        })\n+        \n+        # Run management command with --skip-checks\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_does_not_skip_checks(self):\n+        \"\"\"\n+        Test the absence of --skip-checks does not skip system checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # This would normally trigger a staticfiles.E001 check\n+        })\n+        \n+        # Run management command without --skip-checks\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('staticfiles.E001', err)\n+        self.assertNotIn('Set foo', out)\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n         abbreviated forms of the --setting and --pythonpath options.\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..b8554d5 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,8 +1,37 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n+class ResolverCacheTests(SimpleTestCase):\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default__root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_different_calls(self):\n+        # Initial call should cache based on None if set_urlconf hasn't been called.\n+        init_resolver = get_resolver()  # supposed to use settings.ROOT_URLCONF\n+        specific_resolver = get_resolver('urlpatterns.path_urls')\n+        self.assertIs(init_resolver, specific_resolver)\n+\n+        # Change URL configuration context and check cache behavior.\n+        different_resolver = get_resolver('urlpatterns.different_urls')\n+        self.assertIsNot(init_resolver, different_resolver)\n+        self.assertIsNot(specific_resolver, different_resolver)\n+\n+        # Further test for post set_urlconf scenario\n+        # With patched settings, ensure consistent resolver usage after set_urlconf.\n+        with override_settings(ROOT_URLCONF='urlpatterns.path_dynamic_urls'):\n+            dynamic_resolver = get_resolver()\n+            self.assertIsNot(init_resolver, dynamic_resolver)\n+            self.assertIsNot(specific_resolver, dynamic_resolver)\n+\n class RegexPatternTests(SimpleTestCase):\n \n     def test_str(self):\n@@ -12,4 +41,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..17d6d53 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -227,6 +227,12 @@ class BaseModelBackendTest:\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n \n+from django.test import TestCase, override_settings\n+from django.contrib.auth import authenticate, get_user_model\n+from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n+\n+User = get_user_model()\n+\n class ModelBackendTest(BaseModelBackendTest, TestCase):\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n@@ -241,8 +247,23 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             email='test2@example.com',\n             password='test',\n         )\n-\n-    def test_authenticate_inactive(self):\n+    \n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        \"\"\"\n+        This test verifies that no database queries are made when the username or\n+        password is not provided, and that the password hasher is not called.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..19607da 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,14 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_composed_queries_with_values_list(self):\n+        # Ensures composed queries can change the list of columns\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+\n+        # This call should reflect a change in the columns selected\n+        reserved_name = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name, (2,))\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..97e3b26 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -10,6 +10,7 @@ import threading\n from email import charset, message_from_binary_file, message_from_bytes\n from email.header import Header\n from email.mime.text import MIMEText\n+from unittest import mock\n from email.utils import parseaddr\n from io import StringIO\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n@@ -359,8 +360,34 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach_alternative(html_content, 'text/html')\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n-\n-    def test_none_body(self):\n+    \n+    @mock.patch('django.core.mail.utils.DNS_NAME', '\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self):\n+        \"\"\"\n+        Test handling non-ASCII DNS names in email headers when encoding is not unicode.\n+        \"\"\"\n+        email = EmailMessage('Subject', 'Body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--p8s937b', message['Message-ID'])\n+\n+    @mock.patch('django.core.mail.utils.DNS_NAME', 'nonasciidns')\n+    def test_non_ascii_domain_with_different_encodings(self):\n+        \"\"\"\n+        Test handling of Message-ID header for different charset encodings.\n+        \"\"\"\n+        test_encodings = ['utf-8', 'iso-8859-1', 'ascii']\n+        for encoding in test_encodings:\n+            email = EmailMessage('Subject', 'Body', 'from@example.com', ['to@example.com'])\n+            email.encoding = encoding\n+            message = email.message()\n+            # Check that we are using punycode encoding for the DNS part of the Message-ID\n+            if encoding != 'ascii':\n+                self.assertIn('@xn--nonasciidns', message['Message-ID'])\n+            else:\n+                # ASCII should fail to encode non-ASCII parts without conversion\n+                with self.assertRaises(UnicodeEncodeError):\n+                    message.as_string()\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n",
  "django__django-11551": "",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..5353f43 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,8 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n+from datetime import datetime\n \n \n class OrderingTests(TestCase):\n@@ -462,6 +463,31 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        # Create instances of ChildArticle with different authors.\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(\n+            headline='h1',\n+            pub_date=datetime(2005, 7, 28),\n+        )\n+        # Order by the parent model's pointer field and verify correct order.\n+        articles = ChildArticle.objects.order_by('article_ptr_id')\n+        self.assertQuerysetEqual(articles, [ca4, ca2, ca1, ca3], lambda x: x)\n+\n     def test_deprecated_values_annotate(self):\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n@@ -469,5 +495,30 @@ class OrderingTests(TestCase):\n             \"descending=False), OrderBy(F(second_author__name), \"\n             \"descending=False)) to retain the current query.\"\n         )\n+\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        # Create instances of ChildArticle with different authors.\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(\n+            headline='h1',\n+            pub_date=datetime(2005, 7, 28),\n+        )\n+        # Order by the parent model's pointer field and verify correct order.\n+        articles = ChildArticle.objects.order_by('article_ptr_id')\n+        self.assertQuerysetEqual(articles, [ca4, ca2, ca1, ca3], lambda x: x)\n         with self.assertRaisesMessage(RemovedInDjango31Warning, msg):\n             list(Article.objects.values('author').annotate(Count('headline')))\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..eff6d03 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -403,7 +403,55 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(aggs['distinct_ratings'], 4)\n \n-    def test_non_grouped_annotation_not_in_group_by(self):\n+    def test_distinct_on_avg_sum(self):\n+        \"\"\"\n+        Test the DISTINCT functionality for Avg and Sum aggregates.\n+        \"\"\"\n+        testdata = [\n+            (Avg, 'rating', 4.125),  # Avg of distinct ratings\n+            (Sum, 'rating', 16.5),   # Sum of distinct ratings\n+        ]\n+        for aggregate, field, expected in testdata:\n+            with self.subTest(aggregate=aggregate.__name__):\n+                result = Book.objects.aggregate(agg_result=aggregate(field, distinct=True))\n+                self.assertEqual(result['agg_result'], expected)\n+\n+\n+    def test_distinct_min_max(self):\n+        \"\"\"\n+        Although the application to Min and Max was noted as 'pointless', test for consistency.\n+        \"\"\"\n+        testdata = [\n+            (Min, 'rating', 3.5),    # Expected min for distinct ratings\n+            (Max, 'rating', 5.0),    # Expected max for distinct ratings\n+        ]\n+        for aggregate, field, expected in testdata:\n+            with self.subTest(aggregate=aggregate.__name__):\n+                result = Book.objects.aggregate(agg_result=aggregate(field, distinct=True))\n+                self.assertEqual(result['agg_result'], expected)\n+\n+    def test_empty_distinct_set(self):\n+        \"\"\"\n+        Test behavior when applying distinct aggregates to an empty dataset.\n+        \"\"\"\n+        Book.objects.all().delete()  # Ensure no books\n+        result = Book.objects.aggregate(\n+            distinct_avg=Avg('rating', distinct=True),\n+            distinct_sum=Sum('rating', distinct=True),\n+        )\n+        self.assertIsNone(result['distinct_avg'])\n+        self.assertEqual(result['distinct_sum'], 0)\n+\n+    def test_mixed_fields_with_distinct(self):\n+        \"\"\"\n+        Test using distinct and non-distinct fields in combination.\n+        \"\"\"\n+        result = Book.objects.aggregate(\n+            distinct_sum=Sum('rating', distinct=True),\n+            non_distinct_sum=Sum('rating', distinct=False),\n+        )\n+        self.assertEqual(result['distinct_sum'], 16.5)  # Expected sum of distinct ratings\n+        self.assertEqual(result['non_distinct_sum'], 33)  # Expected regular sum, assuming preloaded dataset\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n",
  "django__django-11740": "",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..704c7a9 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -209,7 +209,43 @@ class CommandTests(SimpleTestCase):\n         self.assertIn('need_me', out.getvalue())\n         self.assertIn('needme2', out.getvalue())\n \n-    def test_command_add_arguments_after_common_arguments(self):\n+    def test_mutually_exclusive_group_required_options(self):\n+        from django.core.management import CommandError, call_command\n+        from io import StringIO\n+\n+        out = StringIO()\n+        # Test calling with foo_id argument\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        # Test calling with foo_name argument\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test calling with no arguments should raise an error\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n+\n+    def test_mutually_exclusive_group_required_options_with_kwargs(self):\n+        from django.core.management import CommandError, call_command\n+        from io import StringIO\n+\n+        out = StringIO()\n+        # Call command using the keyword argument style\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Ensure the command raises the appropriate error when neither argument is supplied\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n         out = StringIO()\n         management.call_command('common_args', stdout=out)\n         self.assertIn('Detected that --version already exists', out.getvalue())\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..cc1f4bc 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,24 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_renders_maxlength_attribute(self):\n+        data = {\n+            'username': 'user',\n+            'password': 'password',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertIn('maxlength', form.fields['username'].widget.attrs)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_renders_maxlength_attribute_for_custom_user_model(self):\n+        data = {\n+            'username': 'customuser',\n+            'password': 'password',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertIn('maxlength', form.fields['username'].widget.attrs)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..7768aba 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -306,7 +306,27 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n \n-    def test_serialize_choices(self):\n+    def test_serialize_enum_with_translations(self):\n+        from django.utils.translation import gettext_lazy as _\n+\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+            def __str__(self):\n+                return self.name\n+\n+        # Mock a field using this enum as a default value\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(tag.name, tag) for tag in TranslatedEnum], max_length=128)\n+        string = MigrationWriter.serialize(field)[0]\n+        # Ensure the serialized default value uses the enum's name, not the translated string\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('BAD', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'], max_length=128)\"\n+        )\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n             B = 'B', 'B value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..db2da31 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n",
  "django__django-11880": "",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..81c92c4 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,5 +1,7 @@\n+\n from operator import attrgetter\n \n+from math import ceil\n from django.db import IntegrityError, NotSupportedError, connection\n from django.db.models import FileField, Value\n from django.db.models.functions import Lower\n",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..3ff22c2 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,13 +1,31 @@\n+\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n+from django.utils.translation import gettext_lazy as _\n from django.db import connection, models\n from django.test import SimpleTestCase, TestCase\n \n from .models import Post\n \n \n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n class TestCharField(TestCase):\n+    def test_textchoices_field_retrieval(self):\n+        initial_obj = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+        initial_obj.refresh_from_db()\n+        self.assertIsInstance(initial_obj.my_str_value, str)\n+        self.assertEqual(initial_obj.my_str_value, MyChoice.FIRST_CHOICE)\n+\n+        retrieved_obj = MyObject.objects.get(pk=initial_obj.pk)\n+        self.assertIsInstance(retrieved_obj.my_str_value, str)\n+        self.assertEqual(retrieved_obj.my_str_value, MyChoice.FIRST_CHOICE)\n \n     def test_max_length_passed_to_formfield(self):\n         \"\"\"\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..fe4c392 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -162,7 +162,18 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(Whiz(c='').get_c_display(), '')        # Empty value\n         self.assertEqual(WhizDelayed(c=0).get_c_display(), 'Other')  # Delayed choices\n \n-    def test_get_FIELD_display_translated(self):\n+    def test_overriding_FIELD_display(self):\n+        \"\"\"\n+        Test that the get_FIELD_display method can be overridden.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         \"\"\"A translated display value is coerced to str.\"\"\"\n         val = Whiz(c=5).get_c_display()\n         self.assertIsInstance(val, str)\n@@ -177,7 +188,27 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsNone(WhizIter(c=None).c)         # Blank value\n         self.assertEqual(WhizIter(c='').c, '')        # Empty value\n \n-    def test_empty_iterator_choices(self):\n+    def test_overriding_and_original_FIELD_display(self):\n+        \"\"\"\n+        Test both overriding and original FIELD display.\n+        \"\"\"\n+        class FooBarOriginal(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+        class FooBarOverride(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return \"something else\"\n+\n+        original_instance = FooBarOriginal(foo_bar=1)\n+        overridden_instance = FooBarOverride(foo_bar=1)\n+\n+        # Assert that the original display method returns 'foo'\n+        self.assertEqual(original_instance.get_foo_bar_display(), 'foo')\n+\n+        # Assert that the overridden method returns 'something else'\n+        self.assertEqual(overridden_instance.get_foo_bar_display(), 'something else')\n         \"\"\"\n         get_choices() works with empty iterators.\n         \"\"\"\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..4c5a3c2 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -75,6 +75,46 @@ class SchemaIndexesTests(TestCase):\n         index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList)\n         self.assertEqual(len(index_sql), 1)\n \n+    def test_columns_list_sql_with_proper_whitespace(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql_with_proper_whitespace(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql_with_proper_whitespace(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql_with_proper_whitespace(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n \n @skipIf(connection.vendor == 'postgresql', 'opclasses are PostgreSQL only')\n class SchemaIndexesNotPostgreSQLTests(TransactionTestCase):\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..7491ae2 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,7 +1,8 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n-from django.db.models import CharField, F, Q\n+from django.db.models import CharField, F, Q, Exact\n from django.db.models.expressions import SimpleCol\n from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n@@ -15,7 +16,28 @@ from .models import Author, Item, ObjectC, Ranking\n \n \n class TestQuery(SimpleTestCase):\n-    def test_simple_query(self):\n+    def test_iterable_lookup_value(self):\n+        # Test with a list\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Ensure the iterable type is maintained as list\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+        \n+        # Test with a tuple\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact_tuple = where.children[0]\n+        self.assertIsInstance(name_exact_tuple, Exact)\n+        # Ensure the iterable type is maintained as tuple\n+        self.assertEqual(name_exact_tuple.rhs, ('a', 'b'))\n+        \n+        # Test with other iterable types\n+        where = query.build_where(Q(name={'a', 'b'}))  # Using a set\n+        name_exact_set = where.children[0]\n+        self.assertIsInstance(name_exact_set, Exact)\n+        # Ensure the iterable type is maintained as set\n+        self.assertEqual(name_exact_set.rhs, {'a', 'b'})\n         query = Query(Author)\n         where = query.build_where(Q(num__gt=2))\n         lookup = where.children[0]\n",
  "django__django-12125": "",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..e536101 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -844,7 +844,45 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n-    def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n+    def test_get_list_editable_queryset_with_regex_chars_in_prefix(self):\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form$-TOTAL_FORMS': '2',\n+            'form$-INITIAL_FORMS': '2',\n+            'form$-MIN_NUM_FORMS': '0',\n+            'form$-MAX_NUM_FORMS': '1000',\n+            'form$-0-uuid': str(a.pk),\n+            'form$-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$')\n+        self.assertEqual(queryset.count(), 1)\n+    \n+    def test_get_list_editable_queryset_with_other_special_chars_in_prefix(self):\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form.*-TOTAL_FORMS': '2',\n+            'form.*-INITIAL_FORMS': '2',\n+            'form.*-MIN_NUM_FORMS': '0',\n+            'form.*-MAX_NUM_FORMS': '1000',\n+            'form.*-0-uuid': str(a.pk),\n+            'form.*-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form.*')\n+        self.assertEqual(queryset.count(), 1)\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n         Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..42fe6da 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -95,7 +96,32 @@ class TestUtils(AdminDocsSimpleTestCase):\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n \n-    def test_parse_rst(self):\n+    def test_parse_rst_with_docstring_no_leading_line_feed(self):\n+        title, body, _ = parse_docstring('firstline\\\\n\\\\n    second line')\n+        with captured_stderr() as stderr:\n+            self.assertEqual(parse_rst(title, ''), '<p>firstline</p>\\\\n')\n+            self.assertEqual(parse_rst(body, ''), '<p>second line</p>\\\\n')\n+        self.assertEqual(stderr.getvalue(), '')\n+\n+    def test_parse_rst_with_single_line_docstring(self):\n+        \"\"\"\n+        Ensure handling docstring with content only on the first line.\n+        \"\"\"\n+        title, body, _ = parse_docstring('Single line only')\n+        with captured_stderr() as stderr:\n+            self.assertEqual(parse_rst(title, ''), '<p>Single line only</p>\\\\n')\n+            self.assertEqual(stderr.getvalue(), '')\n+\n+    def test_parse_rst_with_multiline_docstring_without_initial_line_feed(self):\n+        \"\"\"\n+        Ensure handling of multiline docstring starting on the same line.\n+        \"\"\"\n+        docstring = \"Title\\\\n\\\\n    First paragraph.\\\\n    Second paragraph.\"\n+        title, body, _ = parse_docstring(docstring)\n+        with captured_stderr() as stderr:\n+            self.assertEqual(parse_rst(title, ''), '<p>Title</p>\\\\n')\n+            self.assertEqual(parse_rst(body, ''), '<p>First paragraph.</p>\\\\n<p>Second paragraph.</p>\\\\n')\n+        self.assertEqual(stderr.getvalue(), '')\n         \"\"\"\n         parse_rst() should use `cmsreference` as the default role.\n         \"\"\"\n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..e7487aa 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,37 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_splitarrayfield_checkbox_behavior(self):\n+        # Prepare the widget with a size of 4 and initial data\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [False, True, False, True])\n+\n+        # Verify that only the correct checkboxes are marked as checked\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {'checked': True}, {}, {'checked': True}]\n+        )\n+\n+    def test_splitarrayfield_all_true(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, True, True])\n+\n+        # All checkboxes should be checked\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {'checked': True}, {'checked': True}]\n+        )\n+\n+    def test_splitarrayfield_all_false(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, False, False])\n+\n+        # No checkboxes should be checked\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}]\n+        )\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..9a6127f 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -253,6 +253,12 @@ class SmallPKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n \n+import uuid\n+\n+class Sample(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+    name = models.CharField(blank=True, max_length=100)\n+\n class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n \n",
  "django__django-12262": "diff --git a/tests/template_tests/templatetags/inclusion.py b/tests/template_tests/templatetags/inclusion.py\nindex da4058d..6ba9e0c 100644\n--- a/tests/template_tests/templatetags/inclusion.py\n+++ b/tests/template_tests/templatetags/inclusion.py\n@@ -124,6 +124,14 @@ def inclusion_two_params_from_template(one, two):\n     return {\"result\": \"inclusion_two_params_from_template - Expected result: %s, %s\" % (one, two)}\n \n \n+# Add a new inclusion tag for testing keyword-only arguments with defaults\n+@register.inclusion_tag('inclusion.html')\n+def inclusion_keyword_only_default(*, kwarg=42):\n+    \"\"\"Test for keyword-only arguments with default values.\"\"\"\n+    return {\n+        \"result\": f\"inclusion_keyword_only_default - Expected result: {kwarg}\",\n+    }\n+\n inclusion_two_params_from_template.anything = \"Expected inclusion_two_params_from_template __dict__\"\n \n \n",
  "django__django-12276": "diff --git a/tests/forms_tests/widget_tests/test_fileinput.py b/tests/forms_tests/widget_tests/test_fileinput.py\nindex c3ea9d6..5312792 100644\n--- a/tests/forms_tests/widget_tests/test_fileinput.py\n+++ b/tests/forms_tests/widget_tests/test_fileinput.py\n@@ -14,7 +14,14 @@ class FileInputTest(WidgetTest):\n         self.check_html(self.widget, 'email', 'test@example.com', html='<input type=\"file\" name=\"email\">')\n         self.check_html(self.widget, 'email', '', html='<input type=\"file\" name=\"email\">')\n         self.check_html(self.widget, 'email', None, html='<input type=\"file\" name=\"email\">')\n+    def test_fileinput_not_required_with_initial_data(self):\n+        widget = FileInput()\n+        # Check that required is True if the initial value is None or empty\n+        self.assertIs(widget.use_required_attribute(None), True)\n+        self.assertIs(widget.use_required_attribute(''), True)\n+        # Check that required is False if there is initial data\n+        self.assertIs(widget.use_required_attribute('resume.txt'), False)\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), True)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)\n",
  "django__django-12304": "diff --git a/tests/template_tests/test_callables.py b/tests/template_tests/test_callables.py\nindex d71266b..c63c520 100644\n--- a/tests/template_tests/test_callables.py\n+++ b/tests/template_tests/test_callables.py\n@@ -1,4 +1,5 @@\n-from unittest import TestCase\n+\n+from django.db import models\n \n from django.template import Context, Engine\n \n@@ -10,6 +11,22 @@ class CallableVariablesTests(TestCase):\n         cls.engine = Engine()\n         super().setUpClass()\n \n+    def test_enum_do_not_call_in_templates(self):\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', 'Freshman'\n+            SOPHOMORE = 'SO', 'Sophomore'\n+            JUNIOR = 'JR', 'Junior'\n+            SENIOR = 'SR', 'Senior'\n+\n+        template = self.engine.from_string('{% if student.year_in_school == YearInSchool.FRESHMAN %}Freshman{% endif %}')\n+        \n+        context = Context({\n+            'student': {'year_in_school': YearInSchool.FRESHMAN},\n+            'YearInSchool': YearInSchool\n+        })\n+\n+        self.assertEqual(template.render(context), 'Freshman')\n+\n     def test_callable(self):\n \n         class Doodad:\n@@ -122,4 +139,4 @@ class CallableVariablesTests(TestCase):\n \n         # Double-check that the object was really never called during the\n         # template rendering.\n-        self.assertEqual(my_doodad.num_calls, 0)\n+        self.assertEqual(my_doodad.num_calls, 0)\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..9a5a509 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -167,6 +167,23 @@ class UtilsTests(SimpleTestCase):\n         self.assertHTMLEqual(display_value, expected)\n \n         display_value = display_for_field(None, models.BooleanField(null=True), self.empty_value)\n+\n+    def test_json_readonly_display_for_field(self):\n+        \"\"\"\n+        Test to ensure that JSONField values are correctly serialized\n+        to JSON when displayed in the admin as readonly.\n+        \"\"\"\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            ({'number': 1, 'list': [1, 2, 3]}, '{\"number\": 1, \"list\": [1, 2, 3]}'),\n+            ({'unicode': 'unicode-string', 'bool': True}, '{\"unicode\": \"unicode-string\", \"bool\": true}'),\n+        ]\n+        for value, expected_display_value in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(display_value, expected_display_value)\n         expected = '<img src=\"%sadmin/img/icon-unknown.svg\" alt=\"None\" />' % settings.STATIC_URL\n         self.assertHTMLEqual(display_value, expected)\n \n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..58bc0c6 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1014,6 +1014,36 @@ class OtherModelTests(SimpleTestCase):\n \n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n+    def test_onetoone_mti_model_order_impact(self):\n+        \"\"\"\n+        Test case for MTI using OneToOneField for parent linking\n+        with different ordering scenarios. Ensure Django does not raise \n+        ImproperlyConfigured errors due to field order.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        # Case 1: 'document_ptr' defined first with 'parent_link=True'.\n+        class Picking1(Document):\n+            document_ptr = models.OneToOneField(\n+                Document, on_delete=models.CASCADE, parent_link=True, related_name='+'\n+            )\n+            origin = models.OneToOneField(\n+                Document, related_name='picking1', on_delete=models.PROTECT\n+            )\n+\n+        self.assertEqual(Picking1.check(), [])\n+\n+        # Case 2: 'origin' defined first without 'parent_link=True'.\n+        class Picking2(Document):\n+            origin = models.OneToOneField(\n+                Document, related_name='picking2', on_delete=models.PROTECT\n+            )\n+            document_ptr = models.OneToOneField(\n+                Document, on_delete=models.CASCADE, parent_link=True, related_name='+'\n+            )\n+\n+        self.assertEqual(Picking2.check(), [])\n \n     def test_m2m_table_name_clash(self):\n         class Foo(models.Model):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..b02f589 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -247,6 +247,17 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        By default, the SECURE_REFERRER_POLICY should be 'same-origin'.\n+        Therefore, a 'Referrer-Policy' header with value 'same-origin' should\n+        be present in the response.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertIn('Referrer-Policy', response)\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n+\n     @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n@@ -254,4 +265,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..d0d2130 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -55,6 +55,29 @@ class MigrationTestBase(TransactionTestCase):\n     def assertColumnNotNull(self, table, column, using='default'):\n         self.assertFalse(self._get_column_allows_null(table, column, using))\n \n+    def test_index_together_with_unique_together(self):\n+        \"\"\"Test removing index_together where fields are also in unique_together\"\"\"\n+        app_label = 'test_idx_uniq_together'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=[('pink', 'weight')])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Initially add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Now remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n     def assertIndexExists(self, table, columns, value=True, using='default', index_type=None):\n         with connections[using].cursor() as cursor:\n             self.assertEqual(\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..30c6c40 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, ManyToManyField, UUIDField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -138,6 +138,21 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         self.assertEqual(f2.widget.attrs['maxlength'], '20')\n         self.assertEqual(f2.widget.attrs['size'], '10')\n \n+    def test_formfield_overrides_m2m_filter_widget(self):\n+        \"\"\"\n+        The autocomplete_fields, raw_id_fields, filter_vertical, and\n+        filter_horizontal widgets for ManyToManyFields may be overridden by\n+        specifying a widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget.widget, forms.CheckboxSelectMultiple)\n+\n     def test_formfield_overrides_for_datetime_field(self):\n         \"\"\"\n         Overriding the widget for DateTimeField doesn't overrides the default\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..f68a6b8 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,19 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        # Original call to be refactored\n+        connection.ops.execute_sql_flush(sql_list)\n+\n+        # New test case to ensure method works with refactored signature\n+        sql_list = connection.ops.sql_flush(\n+            no_style(),\n+            [Author._meta.db_table, Book._meta.db_table],\n+            reset_sequences=True,\n+            allow_cascade=True,\n+        )\n+\n+        # Expect no exception with the refactored method\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +193,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..508c531 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,8 +2444,34 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        from django.db import models\n+        from django.test import SimpleTestCase\n+        from django.db.migrations.state import ModelState\n \n-    def test_mti_inheritance_model_removal(self):\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n@@ -2453,4 +2479,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..a19db35 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -10,8 +10,10 @@ from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n \n+from django.db import models\n+from django.test.utils import isolate_apps\n from .models import (\n-    Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n+    Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag, Model,\n )\n \n \n@@ -189,6 +191,44 @@ class LookupTests(TestCase):\n             }\n         )\n \n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n+\n     def test_in_bulk_non_unique_field(self):\n         msg = \"in_bulk()'s field_name must be a unique field but 'author' isn't.\"\n         with self.assertRaisesMessage(ValueError, msg):\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..7ac6d3a 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -892,8 +892,24 @@ class OtherModelTests(SimpleTestCase):\n \n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n+        \n+    def test_ordering_nonexistent_field_lookup(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n \n-    def test_ordering_pointing_to_related_model_pk(self):\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..9349f61 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1820,6 +1820,14 @@ class CombinableTests(SimpleTestCase):\n     def test_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n+    class ExpressionWrapperTests(SimpleTestCase):\n+        def test_empty_group_by(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+        def test_non_empty_group_by(self):\n+            expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n \n     def test_reversed_and(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n@@ -1827,4 +1835,4 @@ class CombinableTests(SimpleTestCase):\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..c780161 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1211,7 +1211,29 @@ class Queries1Tests(TestCase):\n         )\n \n \n-class Queries2Tests(TestCase):\n+from django.test import TestCase\n+from django.db import models\n+from .models import Author, ExtraInfo\n+\n+class FilterableFieldTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.n2 = None  # Assume Note model is already defined above.\n+        cls.e2 = ExtraInfo.objects.create(info='e2', note=cls.n2, value=41, filterable=False)\n+        cls.a3 = Author.objects.create(name='a3', num=3003, extra=cls.e2)\n+        cls.a4 = Author.objects.create(name='a4', num=4004, extra=cls.e2)\n+\n+    def test_filter_with_non_filterable_field(self):\n+        # This tests the behavior described in the issue text\n+        with self.assertRaises(models.NotSupportedError):\n+            list(Author.objects.filter(extra=self.e2))\n+\n+    def test_field_with_filterable_replacement(self):\n+        # Fixing the field name resolves the issue\n+        self.assertSequenceEqual(\n+            Author.objects.filter(extra__info='e2'),\n+            [self.a3, self.a4],\n+        )\n     @classmethod\n     def setUpTestData(cls):\n         Number.objects.create(num=4)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..9ed2e58 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -342,6 +342,27 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+        \n+    def test_self_referencing_fk_order_by(self):\n+        # Test for self-referencing foreign key unexpected ordering issue\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        root_author = Author.objects.create(name=\"Root Author\", editor=author_1)\n+\n+        article_1 = Article.objects.create(author=root_author, headline=\"Article 1\", pub_date='2023-01-01')\n+        article_2 = Article.objects.create(author=author_1, headline=\"Article 2\", pub_date='2023-01-02')\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor__pk'), \n+            [\"Article 1\", \"Article 2\"],\n+            attrgetter('headline')\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'), \n+            [\"Article 2\", \"Article 1\"],\n+            attrgetter('headline')\n+        )\n \n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n@@ -353,6 +374,27 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+        \n+    def test_self_referencing_fk_order_by(self):\n+        # Test for self-referencing foreign key unexpected ordering issue\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        root_author = Author.objects.create(name=\"Root Author\", editor=author_1)\n+\n+        article_1 = Article.objects.create(author=root_author, headline=\"Article 1\", pub_date='2023-01-01')\n+        article_2 = Article.objects.create(author=author_1, headline=\"Article 2\", pub_date='2023-01-02')\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor__pk'), \n+            [\"Article 1\", \"Article 2\"],\n+            attrgetter('headline')\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'), \n+            [\"Article 2\", \"Article 1\"],\n+            attrgetter('headline')\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..a76a2ce 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -617,6 +617,28 @@ class BaseCacheTests:\n \n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n+ \n+    def test_cull_no_data(self):\n+        \"\"\"\n+        Test that _cull method handles the case where the cache is empty\n+        and hence no data is fetched by the cursor's fetchone method.\n+        \"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+\n+        # Ensuring the cache table is empty\n+        cull_cache.clear()\n+\n+        old_max_entries = cull_cache._max_entries\n+        try:\n+            cull_cache._max_entries = 1\n+            cull_cache._cull(None, None, None)  # Directly invoke the _cull method with mock params\n+            # If no exception is raised, we consider this passed.\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n+\n \n     def test_zero_cull(self):\n         self._perform_cull_test('zero_cull', 50, 19)\n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..dad8763 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,7 +1645,40 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n-class ModelMultipleChoiceFieldTests(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from .models import Article, Writer\n+\n+class ModelFormForeignKeyValidationTests(TestCase):\n+    def setUp(self):\n+        self.archived_writer = Writer.objects.create(name='Archived Writer', archived=True)\n+        self.active_writer = Writer.objects.create(name='Active Writer', archived=False)\n+        self.archived_article = Article.objects.create(title='Archived Article', writer=self.archived_writer, archived=True)\n+        self.active_article = Article.objects.create(title='Active Article', writer=self.active_writer, archived=False)\n+\n+    def test_foreign_key_validation_with_default_manager(self):\n+        class ArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+        form = ArticleForm({'title': 'Test Article', 'writer': self.archived_writer.pk})\n+        self.assertFalse(form.is_valid())\n+        self.assertEqual(form.errors['writer'], ['Select a valid choice. That choice is not one of the available choices.'])\n+\n+    def test_foreign_key_validation_with_base_manager(self):\n+        class ArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                self.fields['writer'].queryset = Writer._base_manager.all()\n+\n+        form = ArticleForm({'title': 'Test Article', 'writer': self.archived_writer.pk})\n+        self.assertTrue(form.is_valid())\n     @classmethod\n     def setUpTestData(cls):\n         cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n",
  "django__django-13112": "",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..63c35aa 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1484,7 +1484,14 @@ class FTimeDeltaTests(TestCase):\n         ))\n         self.assertIsNone(queryset.first().shifted)\n \n-    def test_duration_expressions(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Verify that datetime subtraction works directly\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n         for delta in self.deltas:\n             qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n             for obj in qs:\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..ebc0e2c 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -39,7 +39,15 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    @skipUnlessDBFeature('supports_select_difference')\n+    def test_union_none_behavior(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        # Combine two querysets with union\n+        qs3 = qs1.union(qs2)\n+        # Checking that qs3.none() indeed returns no results\n+        self.assertSequenceEqual(list(qs3.none()), [])\n+        # Verify that qs3 itself correctly contains the combined results\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n         qs2 = Number.objects.filter(num__lte=4)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..8b2cb1c 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -32,6 +32,7 @@ from django.core.exceptions import ImproperlyConfigured, SuspiciousOperation\n from django.http import HttpResponse\n from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n+    logging\n )\n from django.utils import timezone\n \n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..7e50e33 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -9,6 +9,10 @@ from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n+from django.http import Http404\n+from django.shortcuts import get_object_or_404\n+from django.test import TestCase\n+from .models import Artist\n \n from . import views\n \n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..adb8304 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2830,6 +2831,78 @@ class LimitChoicesToTests(TestCase):\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n \n+class LimitChoicesToForeignKeyTests(TestCase):\n+\n+    def setUp(self):\n+        self.marley = Character.objects.create(username=\"Marley\", last_action=\"2023-10-07\")\n+        self.threepwood = Character.objects.create(username=\"Threepwood\", last_action=\"2023-10-07\")\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+\n class FormFieldCallbackTests(SimpleTestCase):\n \n     def test_baseform_with_widgets_in_meta(self):\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..78cfe62 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -21,7 +21,8 @@ from django.core.files.uploadedfile import (\n     InMemoryUploadedFile, SimpleUploadedFile, TemporaryUploadedFile,\n )\n from django.db.models import FileField\n-from django.db.models.fields.files import FileDescriptor\n+from django.db.models.fields.files import FileDescriptor, Storage\n+from .models import callable_storage\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n@@ -906,7 +907,16 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         obj = FileField(storage=GetStorage)\n         self.assertIsInstance(obj.storage, BaseStorage)\n \n-    def test_callable_storage_file_field_in_model(self):\n+    def test_deconstruction_callable_storage(self):\n+        \"\"\"\n+        Test that FileField with callable storage deconstructs to the callable itself,\n+        not the evaluated storage object.\n+        \"\"\"\n+        obj = Storage()\n+        field = obj._meta.get_field('storage_callable')\n+        _, _, kwargs = field.deconstruct()\n+        storage_callable = kwargs['storage']\n+        self.assertIs(storage_callable, callable_storage)\n         obj = Storage()\n         self.assertEqual(obj.storage_callable.storage, temp_storage)\n         self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n",
  "django__django-13346": "",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..fe25138 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -1111,7 +1111,41 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n             self.assertEqual(model.day_melb, 16)\n             self.assertEqual(model.day_utc, 15)\n \n-    def test_trunc_timezone_applied_before_truncation(self):\n+    def test_truncdate_uses_provided_tzinfo(self):\n+        # Create UTC-aware datetime\n+        utc = pytz.UTC\n+        nyc_tz = pytz.timezone('America/New_York')\n+        start_datetime = datetime(2023, 10, 20, 15, 45)\n+        start_datetime = timezone.make_aware(start_datetime, utc)\n+        \n+        # Create model entry\n+        self.create_model(start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            nyc_date=TruncDate('start_datetime', tzinfo=nyc_tz),\n+            utc_date=TruncDate('start_datetime', tzinfo=utc)\n+        ).get()\n+\n+        self.assertEqual(model.nyc_date, start_datetime.astimezone(nyc_tz).date())\n+        self.assertEqual(model.utc_date, start_datetime.astimezone(utc).date())\n+\n+    def test_trunctime_uses_provided_tzinfo(self):\n+        # Create UTC-aware datetime\n+        utc = pytz.UTC\n+        nyc_tz = pytz.timezone('America/New_York')\n+        start_datetime = datetime(2023, 10, 20, 15, 45)\n+        start_datetime = timezone.make_aware(start_datetime, utc)\n+        \n+        # Create model entry\n+        self.create_model(start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            nyc_time=TruncTime('start_datetime', tzinfo=nyc_tz),\n+            utc_time=TruncTime('start_datetime', tzinfo=utc)\n+        ).get()\n+        \n+        self.assertEqual(model.nyc_time, start_datetime.astimezone(nyc_tz).timetz())\n+        self.assertEqual(model.utc_time, start_datetime.astimezone(utc).timetz())\n         start_datetime = datetime(2016, 1, 1, 1, 30, 50, 321)\n         end_datetime = datetime(2016, 6, 15, 14, 10, 50, 123)\n         start_datetime = timezone.make_aware(start_datetime, is_dst=False)\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..c343670 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,6 +103,45 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n+import pickle\n+from django.test import SimpleTestCase\n+from django.db import models\n+from django.db.models import IntegerField\n+from django.test import TestCase\n+\n+class FieldEqualityTests(TestCase):\n+\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+        # Check ordering if it is applicable after fix\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n class ChoicesTests(SimpleTestCase):\n \n     @classmethod\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..65a4c73 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,39 @@\n+\n+class FileLockTestCase(unittest.TestCase):\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write(\"Test content\")\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write(\"Test content\")\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_unlock_failure(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write(\"Test content\")\n+        with open(file_path) as f1:\n+            # Attempt to unlock a file that was not locked\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_lock_failure_handling(self):\n+        # Here we verify the OSError handling path\n+        with self.assertRaises(OSError):\n+            with locks.temporary_file_lock('non_existent_file', locks.LOCK_SH):\n+                pass\n+\n import errno\n import gzip\n import os\n@@ -17,6 +53,8 @@ from django.core.files.uploadedfile import (\n     UploadedFile,\n )\n from django.test import override_settings\n+from django.core.files import locks\n+from pathlib import Path\n \n try:\n     from PIL import Image\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..0d9a043 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2082,6 +2082,24 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_annotated_ordering(self):\n         qs = Annotation.objects.annotate(num_notes=Count('notes'))\n         self.assertIs(qs.ordered, False)\n+        # Test the ordering when the queryset explicitly orders by a field\n+        qs_with_ordering = Annotation.objects.annotate(num_notes=Count('notes')).order_by('num_notes')\n+        self.assertIs(qs_with_ordering.ordered, True)\n+\n+        # Test related to the Meta.ordering with annotate\n+        class OrderedModelTests(TestCase):\n+            @classmethod\n+            def setUpTestData(cls):\n+                cls.obj1 = OrderedModel.objects.create(name='a')\n+                cls.obj2 = OrderedModel.objects.create(name='b')\n+\n+            def test_ordering_with_meta_and_group_by(self):\n+                qs = OrderedModel.objects.annotate(cnt=Count('pk'))\n+                self.assertIs(qs.ordered, False)  # Grouped query with no explicit ordering should not be ordered\n+\n+                # Using order_by should result in an ordered queryset\n+                qs_ordered = qs.order_by('name')\n+                self.assertIs(qs_ordered.ordered, True)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n \n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..c089786 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,6 +1,8 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n+from .with_custom_email_field import CustomEmailField\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n@@ -25,6 +27,34 @@ class TokenGeneratorTest(TestCase):\n         tk1 = p0.make_token(user)\n         self.assertIs(p0.check_token(user, tk1), True)\n \n+    def test_token_invalidation_after_email_change(self):\n+        \"\"\"Test that password reset token is invalidated after user email change.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n+    def test_token_validation_with_same_email(self):\n+        \"\"\"Test that password reset token remains valid if email is unchanged.\"\"\"\n+        user = User.objects.create_user('sameemailuser', 'test5@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+\n     def test_10265(self):\n         \"\"\"\n         The token generated for a user created in the same request\n@@ -34,6 +64,34 @@ class TokenGeneratorTest(TestCase):\n         user_reload = User.objects.get(username='comebackkid')\n         p0 = MockedPasswordResetTokenGenerator(datetime.now())\n         tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+\n+    def test_token_invalidation_after_email_change(self):\n+        \"\"\"Test that password reset token is invalidated after user email change.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n+    def test_token_validation_with_same_email(self):\n+        \"\"\"Test that password reset token remains valid if email is unchanged.\"\"\"\n+        user = User.objects.create_user('sameemailuser', 'test5@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n@@ -45,6 +103,34 @@ class TokenGeneratorTest(TestCase):\n         now = datetime.now()\n         p0 = MockedPasswordResetTokenGenerator(now)\n         tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+\n+    def test_token_invalidation_after_email_change(self):\n+        \"\"\"Test that password reset token is invalidated after user email change.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n+    def test_token_validation_with_same_email(self):\n+        \"\"\"Test that password reset token remains valid if email is unchanged.\"\"\"\n+        user = User.objects.create_user('sameemailuser', 'test5@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n         p1 = MockedPasswordResetTokenGenerator(\n             now + timedelta(seconds=settings.PASSWORD_RESET_TIMEOUT)\n         )\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..b6a0e50 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,7 +1,9 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n+from django.db.models import Q, UniqueConstraint\n from django.core import checks\n from django.db import models\n from django.test import (\n@@ -138,7 +140,54 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraintOnly')\n+    def test_username_unique_with_only_unique_constraint(self):\n+        \"\"\"\n+        Test user model where username is not unique but has a UniqueConstraint.\n+        It should not trigger auth.E003.\n+        \"\"\"\n+        class CustomUserUniqueConstraintOnly(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique_constraint'),\n+                ]\n+\n+        self.assertEqual(checks.run_checks(self.apps.get_app_configs()), [])\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(self.apps.get_app_configs())\n+            self.assertEqual(errors, [])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserMissingUniqueConstraint')\n+    def test_username_missing_unique_constraint(self):\n+        \"\"\"\n+        Test user model where username is neither unique nor has UniqueConstraint.\n+        It should trigger auth.E003.\n+        \"\"\"\n+        class CustomUserMissingUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'CustomUserMissingUniqueConstraint.username' must be unique because it is named as the 'USERNAME_FIELD'.\",\n+                obj=CustomUserMissingUniqueConstraint,\n+                id='auth.E003',\n+            ),\n+        ])\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [\n+                checks.Warning(\n+                    \"'CustomUserMissingUniqueConstraint.username' is named as the 'USERNAME_FIELD', but it is not unique.\",\n+                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                    obj=CustomUserMissingUniqueConstraint,\n+                    id='auth.W004',\n+                ),\n+            ])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..06a49ff 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -814,8 +815,43 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5050 Ltd', num_employees=50, num_chairs=50, ceo=ceo)\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n-\n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    \n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_regular_tuple(self):\n+        qs = Company.objects.filter(\n+            num_employees__range=(51, 100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_with_multiple_namedtuples(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        range1 = EmployeeRange(minimum=1, maximum=50)\n+        range2 = EmployeeRange(minimum=51, maximum=100)\n+        qs = Company.objects.filter(\n+            num_employees__range=range2\n+        ).exclude(\n+            num_employees__range=range1\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_mixed_tuple_types(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        regular_range = (51, 100)\n+        named_range = EmployeeRange(minimum=51, maximum=100)\n+        qs_regular = Company.objects.filter(\n+            num_employees__range=regular_range,\n+        )\n+        qs_named = Company.objects.filter(\n+            num_employees__range=named_range,\n+        )\n+        self.assertSequenceEqual(qs_regular, [self.c5])\n+        self.assertSequenceEqual(qs_named, [self.c5])\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..0a27d1e 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,25 +19,48 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n-class AdminScriptTestCase(SimpleTestCase):\n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    \n+    def test_prog_name_from_custom_argv(self):\n+        \"\"\"Test if execute_from_command_line correctly uses argv to determine program name.\"\"\"\n+        args = ['help', 'shell']\n+        custom_argv = ['custom-admin'] + args\n+        expected_prog_name = 'custom-admin'\n+        \n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(custom_argv)\n+        \n+        # Check if the usage message includes the custom program name\n+        self.assertIn(f'usage: {expected_prog_name} shell', out.getvalue())\n+        # Ensure no errors were output\n+        self.assertEqual(err.getvalue(), '')\n     def setUp(self):\n         tmpdir = tempfile.TemporaryDirectory()\n         self.addCleanup(tmpdir.cleanup)\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..439d8e5 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -76,7 +77,22 @@ class DateFormatTests(SimpleTestCase):\n         dt = datetime(2009, 5, 16, microsecond=123)\n         self.assertEqual(dateformat.format(dt, 'u'), '000123')\n \n-    def test_date_formats(self):\n+    def test_pre_1000_year_formats(self):\n+        \"\"\"\n+        Test the 'y' format for years less than 1000 to ensure proper\n+        leading zeros are included.\n+        \"\"\"\n+        tests = [\n+            (9, '09'),    # Expected: '09' for year 0009\n+            (82, '82'),   # Expected: '82' for year 0082\n+            (476, '76'),  # Expected: '76' for year 0476 (verify again)\n+            (42, '42'),   # Expected: '42' for year 0042 (verify again)\n+            (4, '04')     # Expected: '04' for year 0004 (verify again)\n+        ]\n+        for year, expected in tests:\n+            with self.subTest(year=year):\n+                dt = datetime(year, 4, 5, 6, 7)\n+                self.assertEqual(dateformat.format(dt, 'y'), expected)\n         my_birthday = datetime(1979, 7, 8, 22, 00)\n         timestamp = datetime(2008, 5, 19, 11, 45, 23, 123456)\n \n@@ -164,4 +180,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..a274771 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,6 +1,9 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n from django.test import SimpleTestCase\n \n from ..utils import setup\n",
  "django__django-13807": "diff --git a/tests/backends/models.py b/tests/backends/models.py\nindex a2fd310..5dba817 100644\n--- a/tests/backends/models.py\n+++ b/tests/backends/models.py\n@@ -134,9 +134,19 @@ class RawData(models.Model):\n     raw_data = models.BinaryField()\n \n \n+from django.db import models, IntegrityError, transaction, connection\n+from itertools import chain\n+\n+class SQLKeywordsModel(models.Model):\n+    id = models.AutoField(primary_key=True, db_column='select')\n+    reporter = models.ForeignKey('Reporter', models.CASCADE, db_column='where')\n+\n+    class Meta:\n+        db_table = 'order'\n+\n class Author(models.Model):\n     name = models.CharField(max_length=255, unique=True)\n \n \n class Book(models.Model):\n-    author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n+    author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..d5a26a4 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,13 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import unittest\n+from unittest import mock\n+from io import StringIO\n+from django.core.management import call_command\n+from django.test import TestCase\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n@@ -1343,7 +1350,34 @@ class ManageRunserverMigrationWarning(TestCase):\n         )\n \n \n-class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n+class ManageRunserverSkipChecksTestCase(TestCase):\n+    def setUp(self):\n+        self.stdout = StringIO()\n+\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_checks_option(self, mocked_check):\n+        # Test with skip_checks=True\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.stdout,\n+        )\n+        self.assertNotIn('Performing system checks...', self.stdout.getvalue())\n+        mocked_check.assert_not_called()\n+\n+        self.stdout.truncate(0)\n+        self.stdout.seek(0)\n+\n+        # Test with skip_checks=False\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.stdout,\n+        )\n+        self.assertIn('Performing system checks...', self.stdout.getvalue())\n+        mocked_check.assert_called()\n     def setUp(self):\n         super().setUp()\n         self.write_settings('settings.py', sdict={\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..b13fd70 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -163,6 +164,46 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n             \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_middleware_not_used_ignored_correctly(self):\n+        \"\"\"\n+        Test that MiddlewareNotUsed does not affect the middleware chain\n+        when the application is running in an asynchronous context.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        \n+        # Verify the response\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        \n+        # Validate the logs to ensure MiddlewareNotUsed does not disrupt the chain\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.'\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_handles_sync_and_async(self):\n+        \"\"\"\n+        Ensure DummyMiddleware properly handles both sync and async requests\n+        without poisoning the middleware chain after MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        # Check the expected content and status code\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=['middleware_exceptions.tests.MyMiddlewareWithExceptionMessage'])\n     def test_log_custom_message(self):\n         with self.assertLogs('django.request', 'DEBUG') as cm:\n@@ -172,6 +213,46 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n             \"MiddlewareNotUsed('middleware_exceptions.tests.MyMiddlewareWithExceptionMessage'): spam eggs\"\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_middleware_not_used_ignored_correctly(self):\n+        \"\"\"\n+        Test that MiddlewareNotUsed does not affect the middleware chain\n+        when the application is running in an asynchronous context.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        \n+        # Verify the response\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        \n+        # Validate the logs to ensure MiddlewareNotUsed does not disrupt the chain\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.'\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_handles_sync_and_async(self):\n+        \"\"\"\n+        Ensure DummyMiddleware properly handles both sync and async requests\n+        without poisoning the middleware chain after MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        # Check the expected content and status code\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(\n         DEBUG=False,\n         MIDDLEWARE=['middleware_exceptions.tests.MyMiddleware'],\n@@ -215,6 +296,46 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_middleware_not_used_ignored_correctly(self):\n+        \"\"\"\n+        Test that MiddlewareNotUsed does not affect the middleware chain\n+        when the application is running in an asynchronous context.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        \n+        # Verify the response\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        \n+        # Validate the logs to ensure MiddlewareNotUsed does not disrupt the chain\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.'\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_handles_sync_and_async(self):\n+        \"\"\"\n+        Ensure DummyMiddleware properly handles both sync and async requests\n+        without poisoning the middleware chain after MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        # Check the expected content and status code\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware',\n     ])\n@@ -224,6 +345,46 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware must '\n             'have at least one of sync_capable/async_capable set to True.'\n         )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_middleware_not_used_ignored_correctly(self):\n+        \"\"\"\n+        Test that MiddlewareNotUsed does not affect the middleware chain\n+        when the application is running in an asynchronous context.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        \n+        # Verify the response\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        \n+        # Validate the logs to ensure MiddlewareNotUsed does not disrupt the chain\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.'\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_handles_sync_and_async(self):\n+        \"\"\"\n+        Ensure DummyMiddleware properly handles both sync and async requests\n+        without poisoning the middleware chain after MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        # Check the expected content and status code\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n         with self.assertRaisesMessage(RuntimeError, msg):\n             self.client.get('/middleware_exceptions/view/')\n \n@@ -240,6 +401,46 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"middleware_exceptions.middleware.PaymentMiddleware adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_middleware_not_used_ignored_correctly(self):\n+        \"\"\"\n+        Test that MiddlewareNotUsed does not affect the middleware chain\n+        when the application is running in an asynchronous context.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        \n+        # Verify the response\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        \n+        # Validate the logs to ensure MiddlewareNotUsed does not disrupt the chain\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.'\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_handles_sync_and_async(self):\n+        \"\"\"\n+        Ensure DummyMiddleware properly handles both sync and async requests\n+        without poisoning the middleware chain after MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        # Check the expected content and status code\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n@@ -252,6 +453,46 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             'Payment Required: /middleware_exceptions/view/',\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_middleware_not_used_ignored_correctly(self):\n+        \"\"\"\n+        Test that MiddlewareNotUsed does not affect the middleware chain\n+        when the application is running in an asynchronous context.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        \n+        # Verify the response\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        \n+        # Validate the logs to ensure MiddlewareNotUsed does not disrupt the chain\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.'\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_handles_sync_and_async(self):\n+        \"\"\"\n+        Ensure DummyMiddleware properly handles both sync and async requests\n+        without poisoning the middleware chain after MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        # Check the expected content and status code\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(\n         DEBUG=False,\n         MIDDLEWARE=[\n@@ -263,6 +504,46 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"AsyncNoTemplateResponseMiddleware.process_template_response \"\n             \"didn't return an HttpResponse object.\"\n         )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_middleware_not_used_ignored_correctly(self):\n+        \"\"\"\n+        Test that MiddlewareNotUsed does not affect the middleware chain\n+        when the application is running in an asynchronous context.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        \n+        # Verify the response\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        \n+        # Validate the logs to ensure MiddlewareNotUsed does not disrupt the chain\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.'\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ])\n+    async def test_dummy_middleware_handles_sync_and_async(self):\n+        \"\"\"\n+        Ensure DummyMiddleware properly handles both sync and async requests\n+        without poisoning the middleware chain after MiddlewareNotUsed.\n+        \"\"\"\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        # Check the expected content and status code\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n         with self.assertRaisesMessage(ValueError, msg):\n             self.client.get('/middleware_exceptions/template_response/')\n \n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..9251cd8 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -512,6 +513,37 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_loading_with_missing_file_in_non_namespace_package(self):\n+        \"\"\"\n+        Test loading migrations from a non-namespace package without a __file__.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n+        loader = MigrationLoader(connection)\n+        # Store original attributes\n+        module_file = getattr(test_module, '__file__', None)\n+        module_path = test_module.__path__\n+        module_has_location = getattr(test_module.__spec__, 'has_location', False)\n+        try:\n+            # Simulate missing __file__ typical in frozen environments\n+            delattr(test_module, '__file__')\n+            test_module.__spec__.has_location = False\n+            # Ensure __path__ is a list since this distinguishes regular modules from namespace packages\n+            self.assertIsInstance(module_path, list)\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            # Restore original attributes\n+            if module_file:\n+                setattr(test_module, '__file__', module_file)\n+            test_module.__path__ = module_path\n+            test_module.__spec__.has_location = module_has_location\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..21c6516 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -16,6 +16,8 @@ from django.test import (\n )\n from django.test.utils import isolate_apps\n \n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n from ..models import Author, Item, Object, Square\n \n try:\n@@ -36,7 +38,14 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_minimum_supported(self):\n+        \"\"\"Ensure no ImproperlyConfigured is raised for versions >= 3.9.0.\"\"\"\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..11fbd08 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -158,14 +158,28 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__': django.__main__}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+            )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n             [sys.executable, '-m', 'django', 'runserver']\n         )\n \n-    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__': django.__main__}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+            )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -173,8 +187,21 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n-    def test_exe_fallback(self):\n+    def test_run_as_non_django_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__': django.__main__}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+            )\n+    @mock.patch('sys.warnoptions', ['default'])\n+    def test_non_existent_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__.__spec__': None}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-Wdefault', __file__, 'runserver'],\n+            )\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n             exe_path.touch()\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..7e9fc2e 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -401,8 +401,17 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             pass\n \n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+    def test_explicit_inherited_manually_defined_pk(self):\n+        class Parent(models.Model):\n+            id = models.BigAutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n \n-    def test_explicit_pk(self):\n+        # No warning should be raised since Child inherits the primary key from Parent.\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_explicit_inherited_pk(self):\n         class Model(models.Model):\n             id = models.BigAutoField(primary_key=True)\n \n@@ -414,4 +423,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..00e15b1 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -297,8 +297,15 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n-\n-        # ModelMultipleChoiceField\n+        \n+        # Additional test for ModelChoiceField to check if invalid choice value is included\n+        f_with_placeholder = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            }\n+        )\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f_with_placeholder.clean, 'invalid')\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': '%(value)s IS INVALID CHOICE',\n@@ -307,4 +314,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..788e3b3 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -220,7 +223,16 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n-    # SQLite lets objects be saved with an empty primary key, even though an\n+class CustomAutoFieldTests(TestCase):\n+    def test_auto_field_subclass_create(self):\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n     @skipIfDBFeature('supports_unspecified_pk')\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..2059094 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -816,6 +816,24 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+    def test_commutative_q_exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test and & or operations between Q and Exists.\n+        cases = [\n+            (Q(salary__gte=30) & Exists(is_ceo), [self.max]),\n+            (Exists(is_ceo) & Q(salary__gte=30), [self.max]),\n+            (Q(salary__lt=15) | Exists(is_poc), [self.example_inc.ceo, self.max]),\n+            (Exists(is_poc) | Q(salary__lt=15), [self.example_inc.ceo, self.max]),\n+        ]\n+\n+        for conditions, expected in cases:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n+\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..0d81623 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -204,8 +204,20 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('cached', 'css', 'img', 'window.png'), stats['unmodified'])\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n+    def test_no_multiple_yields_for_same_file(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(post_process=True)\n \n-    def test_css_import_case_insensitive(self):\n+        # Collect stat using the command\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Create a counter to count occurrences of each post-processed file\n+        from collections import Counter\n+        file_counter = Counter(stats['post_processed'])\n+        \n+        # Ensure no file is processed more than once\n+        for file, count in file_counter.items():\n+            self.assertEqual(count, 1, f\"File {file} was post-processed {count} times.\")\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n         with storage.staticfiles_storage.open(relpath) as relfile:\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..3873574 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -5,6 +6,7 @@ Tests for stuff in django.utils.datastructures.\n import copy\n import pickle\n \n+import collections.abc\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n@@ -27,7 +29,24 @@ class OrderedSetTests(SimpleTestCase):\n         self.assertEqual(len(s), 1)\n         self.assertNotIn(2, s)\n \n-    def test_discard(self):\n+    def test_reversed(self):\n+        # Test that reversed() returns an iterator\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        # Test that the reversed order is correct\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        # Test reversed on an empty OrderedSet\n+        s = reversed(OrderedSet())\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        # Test reversed on a single-element OrderedSet\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..adce53f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -824,7 +824,15 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n-    def test_boolean_expression_combined_with_empty_Q(self):\n+    def test_exists_with_non_subscriptable(self):\n+        from django.db.models import Exists, OuterRef\n+        from .models import Tag\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q = Q(Exists(tagged))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n         self.gmbh.save()\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..ecb48f8 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -74,7 +75,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n         class Model(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..c68cd6c 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -182,6 +182,15 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..770fe7e 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -229,6 +229,14 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    # Newlines, carriage returns, and tabs are not accepted within URLs.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n+\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..39c351b 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,7 +1526,28 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.db.models import Q\n+from django.test import TestCase\n+from django.db.models import Count\n+from .models import PropertyGroup, ManagerTicketRatingCumulativeMovingAverage\n+\n class JoinPromotionTests(TestCase):\n+    def test_subquery_in_or_condition(self):\n+        # Setup Property Groups and ManagementAgent\n+        management_agent = ManagementAgent.objects.create(name='Agent 1')\n+        pg1 = PropertyGroup.objects.create(name='Group 1', management_agent=management_agent)\n+        pg2 = PropertyGroup.objects.create(name='Group 2', management_agent=management_agent)\n+        \n+        property_groups = PropertyGroup.objects.agent_groups(management_agent)\n+        queryset = ManagerTicketRatingCumulativeMovingAverage.objects.annotate(Count(\"agent__property_groups\"))\n+        \n+        # This should pass without a ProgrammingError\n+        queryset = queryset.filter(\n+            Q(agent__property_groups__in=property_groups) | Q(agent__property_groups__count=0)\n+        ).distinct()\n+        \n+        expected_count = queryset.count()\n+        self.assertTrue(expected_count >= 0)\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..6a3ff29 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -157,6 +157,14 @@ class DateFormatTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 dateformat.format(my_birthday, specifier)\n \n+from django.utils import dateformat\n+from datetime import datetime\n+\n+class DateFormatTests(TestCase):\n+    def test_y_format_year_before_1000(self):\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+\n     def test_r_format_with_non_en_locale(self):\n         # Changing the locale doesn't change the \"r\" format.\n         dt = datetime(1979, 7, 8, 22, 00)\n@@ -179,6 +187,18 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n+    def test_Y_format_year_edge_cases(self):\n+        \"\"\"Test additional edge cases for Y format with years before 1000.\"\"\"\n+        test_cases = [\n+            (0, '0000'),   # Year zero\n+            (10, '0010'),  # Year ten\n+            (999, '0999'), # Already tested, but kept for completeness\n+            (1000, '1000'), # Regular case, no padding needed\n+        ]\n+        for year, expected in test_cases:\n+            with self.subTest(year=year):\n+                self.assertEqual(dateformat.format(datetime(year, 1, 1), 'Y'), expected)\n+\n     def test_twelve_hour_format(self):\n         tests = [\n             (0, '12'),\n",
  "django__django-14376": "",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..b96dfb5 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2199,6 +2199,20 @@ class SchemaTests(TransactionTestCase):\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n     @skipUnlessDBFeature('supports_expression_indexes')\n+    def test_constraint_reference_columns(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='name_uq')\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        # Verify that the SQL correctly references the column.\n+        self.assertTrue(sql.references_column(table, 'name'))\n+\n+        # Attempt using the wrong type to simulate the error scenario.\n+        self.assertFalse(sql.references_column(table, Author))\n+        \n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..f6a7aec 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -454,8 +454,18 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n         )\n \n \n-@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n-class TestCollectionNoneHashStorage(CollectionTestCase):\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.test_storage.NoPostProcessReplacedPathStorage')\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n+\n+    def test_collectstatistic_no_post_process_replaced_paths(self):\n+        stdout = StringIO()\n+        self.run_collectstatic(verbosity=1, stdout=stdout)\n+        # Ensure 'post-processed' does not appear in the output when max_post_process_passes is 0\n+        self.assertNotIn('post-processed', stdout.getvalue())\n     hashed_file_path = hashed_file_path\n \n     def test_hashed_name(self):\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..4fa1cd3 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -640,18 +640,41 @@ class ExecutorTests(MigrationTestBase):\n         \"\"\"\n         recorder = MigrationRecorder(connection)\n         # Record all replaced migrations as applied\n-        recorder.record_applied(\"migrations\", \"0001_initial\")\n-        recorder.record_applied(\"migrations\", \"0002_second\")\n-        executor = MigrationExecutor(connection)\n-        executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n+from django.test import override_settings\n+from django.db.migrations.executor import MigrationExecutor\n \n-        # Because 0001 and 0002 are both applied, even though this migrate run\n-        # didn't apply anything new, their squashed replacement should be\n-        # marked as applied.\n+@override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+def test_migrate_marks_replacement_unapplied(self):\n+    executor = MigrationExecutor(connection)\n+    executor.migrate([('migrations', '0001_squashed_0002')])\n+    try:\n         self.assertIn(\n-            (\"migrations\", \"0001_squashed_0002\"),\n-            recorder.applied_migrations(),\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n         )\n+    finally:\n+        executor.loader.build_graph()\n+        executor.migrate([('migrations', None)])\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n+def test_unapply_keeps_squashed_unapplied(self):\n+    executor = MigrationExecutor(connection)\n+    executor.migrate([('migrations', '0001_squashed_0002')])\n+    # Ensure that the squashed migration is initially applied\n+    self.assertIn(\n+        ('migrations', '0001_squashed_0002'),\n+        executor.recorder.applied_migrations(),\n+    )\n+    # Unapply the squashed migration\n+    executor.migrate([('migrations', None)])\n+    # Ensure that the squashed migration is not marked as applied\n+    self.assertNotIn(\n+        ('migrations', '0001_squashed_0002'),\n+        executor.recorder.applied_migrations(),\n+    )\n \n     # When the feature is False, the operation and the record won't be\n     # performed in a transaction and the test will systematically pass.\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..cbf8b03 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -250,10 +250,50 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for google.com/?q=! and see.',\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>! and see.'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Visit example.net/somepage.html&gt; and check it out.',\n+                'Visit <a href=\"http://example.net/somepage.html%3E\">example.net/somepage.html&gt</a> and check it out.'\n+            ),\n+            (\n+                '<a href=\"https://example.com/?a=1&amp;b=2\">example.com/?a=1&amp;b=2</a>',\n+                '<a href=\"https://example.com/?a=1&amp;b=2\">example.com/?a=1&amp;b=2</a>'\n+            ),\n+            (\n+                'Try emailing foo@example.com; see what happens.',\n+                'Try emailing <a href=\"mailto:foo@example.com\">foo@example.com</a>; see what happens.'\n+            ),\n+            (\n+                \"Check out 'example.org'!\",\n+                \"Check out '<a href=\\\"http://example.org\\\">example.org</a>'!\"\n+            ),\n             (\n                 lazystr('Search for google.com/?q=!'),\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Visit example.net/somepage.html&gt; and check it out.',\n+                'Visit <a href=\"http://example.net/somepage.html%3E\">example.net/somepage.html&gt</a> and check it out.'\n+            ),\n+            (\n+                '<a href=\"https://example.com/?a=1&amp;b=2\">example.com/?a=1&amp;b=2</a>',\n+                '<a href=\"https://example.com/?a=1&amp;b=2\">example.com/?a=1&amp;b=2</a>'\n+            ),\n+            (\n+                'Try emailing foo@example.com; see what happens.',\n+                'Try emailing <a href=\"mailto:foo@example.com\">foo@example.com</a>; see what happens.'\n+            ),\n+            (\n+                \"Check out 'example.org'!\",\n+                \"Check out '<a href=\\\"http://example.org\\\">example.org</a>'!\"\n+            ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n         )\n         for value, output in tests:\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..3fc09a5 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -134,8 +134,34 @@ class BulkUpdateTests(TestCase):\n         ])\n         notes = list(Note.objects.all())\n         Note.objects.bulk_update(notes, ['note'])\n+    def test_bulk_update_returns_rows_matched(self):\n+        # Test with no objects\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n \n-    def test_only_concrete_fields_allowed(self):\n+        # Create sample notes for testing\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 3)\n+        ])\n+        notes = list(Note.objects.all())\n+\n+        # Test updating existing notes\n+        for note in notes:\n+            note.note = \"updated\"\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 3)\n+\n+        # Test with duplicate notes\n+        note = Note.objects.first()\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+        # Test with duplicates in different batches\n+        note.note = \"batch_update\"\n+        note.misc = \"batch_update\"\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         obj = Valid.objects.create(valid='test')\n         detail = Detail.objects.create(data='test')\n         paragraph = Paragraph.objects.create(text='test')\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..e579593 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,7 +984,29 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n-    def test_formset_iteration(self):\n+    def test_non_form_errors_css_class(self):\n+        \"\"\"\n+        Test that non-form errors in a formset have the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3',  # the number of forms rendered\n+            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'choices-MIN_NUM_FORMS': '0',  # min number of forms\n+            'choices-MAX_NUM_FORMS': '1',  # max number of forms; should trigger non-form error\n+            'choices-0-choice': 'Option 1',\n+            'choices-0-votes': '10',\n+            'choices-1-choice': 'Option 1',  # Duplicate choice to trigger the error\n+            'choices-1-votes': '20',\n+            'choices-2-choice': 'Option 2',\n+            'choices-2-votes': '30',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=3, max_num=1, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n         formset = ChoiceFormset()\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..f5abb82 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,41 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_bound_field_access_in_changed_data(self):\n+        \"\"\"\n+        Test that changed_data uses BoundField.did_change() if refactored as per the issue.\n+        Here we mock the behavior as the detailed implementation might need full Django context.\n+        \"\"\"\n+        class DummyBoundField:\n+            def __init__(self, initial, data):\n+                self.initial = initial\n+                self.data = data\n+\n+            def did_change(self):\n+                return self.initial != self.data\n+\n+        # Assuming form._bound_items() would yield the name and DummyBoundField\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField()\n+\n+        form = DateTimeForm({'dt': datetime.datetime(2006, 10, 25, 14, 30, 45)})\n+        form._bound_items = lambda: [('dt', DummyBoundField(\n+            initial=datetime.datetime(2006, 10, 25, 14, 30, 45),\n+            data=datetime.datetime(2006, 10, 25, 14, 30, 46)))]\n+        \n+        self.assertEqual(form.changed_data, ['dt'])\n+\n+    def test_clean_fields_access_via_bound_field(self):\n+        \"\"\"\n+        Test that _clean_fields accesses initial value via BoundField.\n+        \"\"\"\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=datetime.datetime(2006, 10, 25, 14, 30, 45), disabled=True)\n+\n+        form = DateTimeForm({})\n+        form.full_clean()\n+        self.assertEqual(form.cleaned_data['dt'], datetime.datetime(2006, 10, 25, 14, 30, 45))\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..1e5b02b 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -3,6 +3,8 @@ from operator import attrgetter\n \n from django.db import IntegrityError\n from django.test import TestCase\n+from django.db import models\n+from django.core.checks import Error\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..5bf6462 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -8,7 +9,9 @@ from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n-from django.test import RequestFactory, override_settings\n+from django.test import RequestFactory, override_settings, TestCase\n+import datetime\n+from .models import Question\n from django.urls import reverse, reverse_lazy\n \n from .admin import AnswerAdmin, QuestionAdmin\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..bcbd1f0 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,8 +923,31 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n+    def test_real_apps_non_set(self):\n+        \"\"\"\n+        Test that ProjectState raises AssertionError when real_apps is not a set.\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n \n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_is_set(self):\n+        \"\"\"\n+        Test that ProjectState accepts real_apps as a set.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_empty(self):\n+        \"\"\"\n+        Test that ProjectState accepts None or an empty set for real_apps.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps=None)\n+            ProjectState(real_apps=set())\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..14a537b 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -196,6 +196,12 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch('__main__.__spec__', None)\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    def test_xoptions_are_passed(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -236,6 +242,12 @@ class TestChildArguments(SimpleTestCase):\n             autoreload.get_child_arguments()\n \n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    def test_xoptions_are_passed(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n     @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..0b605a1 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5132,6 +5132,35 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Ensure ForeignKey readonly fields in a custom Admin Site generate the correct URL.\n+        \"\"\"\n+        # Set up objects and custom admin site\n+        chapter = Chapter.objects.create(\n+            title='Chapter 2',\n+            content='second content',\n+            book=Book.objects.create(name='Book 2'),\n+        )\n+        language = Language.objects.create(iso='ENG', name='English')\n+        chapter.language = language\n+        chapter.save()\n+\n+        # Fetch change form page from the custom admin site\n+        response = self.client.get(reverse('namespaced_admin:admin_views_chapter_change', args=(chapter.pk,)))\n+        self.assertEqual(response.status_code, 200)\n+\n+        # Validate correct URL is generated for the readonly ForeignKey field\n+        language_url = reverse(\n+            'namespaced_admin:admin_views_language_change',\n+            args=(quote(language.pk),),\n+        )\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">ENG</a></div>' % language_url,\n+            html=True,\n+        )\n+\n     def test_readonly_manytomany_backwards_ref(self):\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..1ec85ee 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,33 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_choice_value_equality(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_1_duplicate = ModelChoiceIteratorValue(self.c1.pk, None)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(value_1, value_1_duplicate)\n+        self.assertNotEqual(value_1, value_2)\n+\n+    def test_choice_value_in_set(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        test_set = {value_1}\n+        self.assertIn(value_1, test_set)\n+        self.assertNotIn(value_2, test_set)\n+\n+    def test_choice_value_dict_key(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        test_dict = {value_1: 'value_1'}\n+        self.assertEqual(test_dict[value_1], 'value_1')\n+        with self.assertRaises(KeyError):\n+            _ = test_dict[value_2]\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..c819cd9 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,54 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop_postgresql(self):\n+        # This test function is to ensure that even in PostgreSQL the operation is a noop\n+        app_label = 'test_rmwdbtn_pg'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider_pg'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_preserved_fk(self):\n+        # This test checks if foreign key constraints are preserved\n+        app_label = 'test_rmwdbtn_fk'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider_fk'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            # Ensure no alterations are made to foreign keys\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertEqual(Pony.objects.count(), 2)\n+        self.assertEqual(Rider.objects.count(), 2)\n+        self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..4146793 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -204,7 +204,19 @@ class InspectDBTestCase(TestCase):\n             output,\n         )\n \n-    def test_digits_column_name_introspection(self):\n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_foreign_key_to_specific_field(self):\n+        \"\"\"Test introspection of a foreign key to a non-primary key field.\"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_bartable', stdout=out)\n+        output = out.getvalue()\n+        \n+        # Expected model field with a foreign key pointing to a specific field `other_id`\n+        expected_fk_declaration = (\n+            \"other_id = models.ForeignKey('InspectdbFootable', models.DO_NOTHING, to_field='other_id')\"\n+        )\n+        self.assertIn(expected_fk_declaration, output, \n+                      msg=\"The foreign key should reference the specific field 'other_id' in the 'Footable' model.\")\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..8284508 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n \n+from django.utils.html import json_script\n from ..utils import setup\n \n \n@@ -16,4 +18,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..e8fc2be 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2835,7 +2835,28 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n-class MigrationSuggestNameTests(SimpleTestCase):\n+class TestCustomFKFieldMigration(TestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        author_empty = ModelState('testapp', 'Author', [])\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = MigrationAutodetector(\n+            ProjectState([author_empty]),\n+            ProjectState([author_empty, book_hardcoded_fk_to])\n+        )._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n+        self.assertEqual(changes['testapp'][0].operations[0].name, 'Book')\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..3961e4d 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -379,5 +380,28 @@ class BaseTests:\n         storage = self.get_storage()\n         storage.level = 0\n         add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', '', 'debug', 'warning', 'bad', 'custom'])\n+    \n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'custom_info',\n+        constants.DEBUG: 'custom_debug',\n+        constants.SUCCESS: 'custom_success',\n+    })\n+    def test_partial_override_tags(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['custom_info', 'debug', 'custom_debug', 'warning', 'bad', 'custom_success'])\n+\n+    @override_settings_tags(MESSAGE_TAGS={})\n+    def test_empty_override_tags(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        # Default behavior with empty tags should revert to default level names\n+        self.assertEqual(tags, ['info', 'debug', 'debug', 'warning', 'error', 'success'])\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', 'custom', 'extra-tag', '', 'bad', 'success'])\n",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..b90e171 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -612,7 +612,15 @@ class OrderItem(models.Model):\n         return str(self.pk)\n \n \n+from django.db import models\n+\n class BaseUser(models.Model):\n+    annotation = models.ForeignKey('Annotation', models.CASCADE, null=True, blank=True)\n+\n+class Annotation(models.Model):\n+    tag = models.ForeignKey('Tag', models.CASCADE)\n+\n+class Tag(models.Model):\n     pass\n \n \n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..c61da0c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1767,6 +1767,20 @@ class ValueTests(TestCase):\n         self.assertEqual(args, (value.value,))\n         self.assertEqual(kwargs, {})\n \n+    def test_deconstruct_f(self):\n+        f = F('field_name')\n+        path, args, kwargs = f.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_value(self):\n+        value = Value('test_value')\n+        path, args, kwargs = value.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Value')\n+        self.assertEqual(args, ('test_value',))\n+        self.assertEqual(kwargs, {})\n+\n     def test_deconstruct_output_field(self):\n         value = Value('name', output_field=CharField())\n         path, args, kwargs = value.deconstruct()\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..b8f8e23 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1661,7 +1661,26 @@ class AutodetectorTests(TestCase):\n             changes, 'otherapp', 0, 4, model_name='book', name='newfield',\n         )\n \n-    def test_alter_field_and_foo_together(self):\n+    def test_optimization_of_foo_together_operations(self):\n+        \"\"\"\n+        Test that multiple consecutive AlterFooTogether operations are optimized into one.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book],\n+            [self.author_empty, self.book_foo_together_optimized]\n+        )\n+        # Right number/type of migrations?\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book', unique_together={('col',)},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book', index_together={('col',)},\n+        )\n         \"\"\"Fields are altered after deleting some index/unique_together.\"\"\"\n         initial_author = ModelState('testapp', 'Author', [\n             ('id', models.AutoField(primary_key=True)),\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..0621ec6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1842,10 +1842,57 @@ class ValueTests(TestCase):\n             (b'', BinaryField),\n             (uuid.uuid4(), UUIDField),\n         ]\n+        from django.db import models\n+        from django.core.validators import MaxLengthValidator\n+        from django.db.models import Value\n+        from decimal import Decimal\n+        import datetime\n+        import uuid\n+\n         for value, output_field_type in value_types:\n             with self.subTest(type=type(value)):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n+        \n+        # Additional tests to verify CharField max_length handling\n+        def test_charfield_max_length_validator(self):\n+            # Check that CharField without max_length does not add a broken validator\n+            char_field_no_max_length = models.CharField()\n+            self.assertNotIn(\n+                MaxLengthValidator(char_field_no_max_length.max_length),\n+                char_field_no_max_length.validators,\n+            )\n+\n+            # Check that CharField with a defined max_length adds a proper validator\n+            char_field_with_max_length = models.CharField(max_length=10)\n+            self.assertIn(\n+                MaxLengthValidator(10),\n+                char_field_with_max_length.validators,\n+            )\n+        \n+        def test_resolve_output_field_validators(self):\n+            \"\"\"Ensure _resolve_output_field does not create broken validators.\"\"\"\n+            value_types = [\n+                'test',  # str\n+                True,  # bool\n+                42,  # int\n+                3.14,  # float\n+                datetime.date(2019, 5, 15),  # date\n+                datetime.datetime(2019, 5, 15),  # datetime\n+                datetime.time(3, 16),  # time\n+                datetime.timedelta(1),  # timedelta\n+                Decimal('3.14'),  # Decimal\n+                b'',  # bytes\n+                uuid.uuid4(),  # uuid\n+            ]\n+            for value in value_types:\n+                with self.subTest(type=type(value)):\n+                    field = Value(value)._resolve_output_field()\n+                    # Test if field.validate method doesn't raise exceptions\n+                    field.clean(value, model_instance=None)\n+            with self.subTest(type=type(value)):\n+                expr = Value(value)\n+                self.assertIsInstance(expr.output_field, output_field_type)\n \n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..a8148af 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -618,7 +618,40 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         # Ensure the field is there\n+from django.db import connection\n+from django.db.models import OneToOneField, CASCADE\n+from django.test import TestCase\n+\n+# Define the mock models for the test\n+class Note(models.Model):\n+    text = models.TextField()\n+\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+class AddNullableOneToOneFieldTest(TestCase):\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField does not cause OperationalError on SQLite.\n+        \"\"\"\n+        # Create initial models\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Note)\n+            editor.create_model(Author)\n+\n+        # Define a new nullable OneToOneField\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+\n+        # Add the nullable OneToOneField to the Author model\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+\n         columns = self.column_classes(Author)\n+        # Ensure the new field is correctly added\n+        self.assertIn('note_id', columns)\n+        # Ensure the field allows NULLs\n+        self.assertTrue(columns['note_id'][1][6])\n         field_type, field_info = columns['thing']\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n         # Make sure the values were transformed correctly\n@@ -636,7 +669,40 @@ class SchemaTests(TransactionTestCase):\n         new_field.set_attributes_from_name(\"bits\")\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n+from django.db import connection\n+from django.db.models import OneToOneField, CASCADE\n+from django.test import TestCase\n+\n+# Define the mock models for the test\n+class Note(models.Model):\n+    text = models.TextField()\n+\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+class AddNullableOneToOneFieldTest(TestCase):\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField does not cause OperationalError on SQLite.\n+        \"\"\"\n+        # Create initial models\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Note)\n+            editor.create_model(Author)\n+\n+        # Define a new nullable OneToOneField\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+\n+        # Add the nullable OneToOneField to the Author model\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+\n         columns = self.column_classes(Author)\n+        # Ensure the new field is correctly added\n+        self.assertIn('note_id', columns)\n+        # Ensure the field allows NULLs\n+        self.assertTrue(columns['note_id'][1][6])\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n",
  "django__django-15315": "",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..df1fcb2 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -218,6 +218,21 @@ class BulkUpdateTests(TestCase):\n         Individual.objects.bulk_update(individuals, ['alive'])\n         self.assertCountEqual(Individual.objects.filter(alive=True), individuals)\n \n+    def test_f_expression_with_bulk_update(self):\n+        # Create initial objects with some sample data.\n+        initial_notes = [Note.objects.create(note=f'note_{i}', misc=f'misc_{i}') for i in range(10)]\n+        \n+        # Modify the 'misc' field to hold an F expression pointing to the 'note' field.\n+        for note in initial_notes:\n+            note.misc = F('note')\n+\n+        # Perform bulk_update on these notes to set the 'misc' field based on the 'note' field.\n+        Note.objects.bulk_update(initial_notes, ['misc'])\n+\n+        # Assert that the 'misc' field is now equal to the 'note' field on all items.\n+        for note in Note.objects.all():\n+            self.assertEqual(note.misc, note.note)\n+\n     def test_ipaddressfield(self):\n         for ip in ('2001::1', '1.2.3.4'):\n             with self.subTest(ip=ip):\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..122e94e 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1048,6 +1048,26 @@ class AutodetectorTests(TestCase):\n             changes, 'app', 0, 1, model_name='bar', old_name='foo',\n             new_name='renamed_foo',\n         )\n+    def test_rename_model_and_field(self):\n+        \"\"\"Test for renaming a model and a field simultaneously.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedModel', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_field', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='MyModel', new_name='RenamedModel',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='my_field', new_name='renamed_field',\n+        )\n \n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..d02d326 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1905,8 +1905,39 @@ class ExistsTests(TestCase):\n         )\n         self.assertNotIn('ORDER BY', captured_sql)\n \n+from django.test import TestCase\n+from django.db.models import Q, Exists\n+from .models import Manager\n \n-class FieldTransformTests(TestCase):\n+class ExistsSubqueryTests(TestCase):\n+    def test_negated_empty_exists(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_empty_exists(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_negated_exists_with_non_empty_subquery(self):\n+        manager = Manager.objects.create()\n+        another_manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.filter(pk=another_manager.pk)) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_exists_with_non_empty_subquery(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.filter(pk=manager.pk)) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..bce5ce7 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -132,6 +132,38 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             raw_id_fields=[\"main_band\"],\n         )\n \n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class InventoryAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = InventoryAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_foreignkey_with_blank(self):\n+        class CustomAdmin(admin.ModelAdmin):\n+            radio_fields = {\"foreign_key_field\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+                if db_field.name == 'foreign_key_field':\n+                    kwargs['empty_label'] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = CustomAdmin(MyModel, admin.site)\n+        ff = ma.formfield_for_dbfield(MyModel._meta.get_field(\"foreign_key_field\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_foreignkey_without_override(self):\n+        class AnotherAdmin(admin.ModelAdmin):\n+            radio_fields = {\"another_foreign_key\": admin.VERTICAL}\n+\n+        ma = AnotherAdmin(MyModel, admin.site)\n+        ff = ma.formfield_for_dbfield(MyModel._meta.get_field(\"another_foreign_key\"), request=None)\n+        self.assertEqual(ff.empty_label, 'None' if MyModel._meta.get_field(\"another_foreign_key\").blank else None)\n+\n     def test_radio_fields_ForeignKey(self):\n         ff = self.assertFormfield(\n             Event,\n@@ -139,6 +171,38 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             widgets.AdminRadioSelect,\n             radio_fields={\"main_band\": admin.VERTICAL},\n         )\n+\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class InventoryAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = InventoryAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_foreignkey_with_blank(self):\n+        class CustomAdmin(admin.ModelAdmin):\n+            radio_fields = {\"foreign_key_field\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+                if db_field.name == 'foreign_key_field':\n+                    kwargs['empty_label'] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = CustomAdmin(MyModel, admin.site)\n+        ff = ma.formfield_for_dbfield(MyModel._meta.get_field(\"foreign_key_field\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_foreignkey_without_override(self):\n+        class AnotherAdmin(admin.ModelAdmin):\n+            radio_fields = {\"another_foreign_key\": admin.VERTICAL}\n+\n+        ma = AnotherAdmin(MyModel, admin.site)\n+        ff = ma.formfield_for_dbfield(MyModel._meta.get_field(\"another_foreign_key\"), request=None)\n+        self.assertEqual(ff.empty_label, 'None' if MyModel._meta.get_field(\"another_foreign_key\").blank else None)\n         self.assertIsNone(ff.empty_label)\n \n     def test_many_to_many(self):\n@@ -149,6 +213,38 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             Band, \"members\", widgets.ManyToManyRawIdWidget, raw_id_fields=[\"members\"]\n         )\n \n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class InventoryAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = InventoryAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_foreignkey_with_blank(self):\n+        class CustomAdmin(admin.ModelAdmin):\n+            radio_fields = {\"foreign_key_field\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+                if db_field.name == 'foreign_key_field':\n+                    kwargs['empty_label'] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = CustomAdmin(MyModel, admin.site)\n+        ff = ma.formfield_for_dbfield(MyModel._meta.get_field(\"foreign_key_field\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_foreignkey_without_override(self):\n+        class AnotherAdmin(admin.ModelAdmin):\n+            radio_fields = {\"another_foreign_key\": admin.VERTICAL}\n+\n+        ma = AnotherAdmin(MyModel, admin.site)\n+        ff = ma.formfield_for_dbfield(MyModel._meta.get_field(\"another_foreign_key\"), request=None)\n+        self.assertEqual(ff.empty_label, 'None' if MyModel._meta.get_field(\"another_foreign_key\").blank else None)\n+\n     def test_filtered_many_to_many(self):\n         self.assertFormfield(\n             Band, \"members\", widgets.FilteredSelectMultiple, filter_vertical=[\"members\"]\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..eb60824 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -127,6 +127,16 @@ class OptimizerTests(SimpleTestCase):\n                     \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n                 ),\n             ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n         )\n \n     def test_create_model_and_remove_model_options(self):\n@@ -137,6 +147,11 @@ class OptimizerTests(SimpleTestCase):\n                     fields=[],\n                     options={\"verbose_name\": \"My Model\"},\n                 ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n                 migrations.AlterModelOptions(\"MyModel\", options={}),\n             ],\n             [migrations.CreateModel(\"MyModel\", fields=[])],\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..4bc4ca5 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,64 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+import json\n+from django.core import management\n+from django.test import TestCase\n+from django.db import connection\n+from django.test.utils import override_settings\n+\n+from .models import Author, Book\n+\n+class NaturalKeyWithFKDependencyTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        # Create the database structure for both default and other databases.\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"CREATE DATABASE IF NOT EXISTS test_default;\")\n+            cursor.execute(\"CREATE DATABASE IF NOT EXISTS test_other;\")\n+\n+    @override_settings(DATABASES={\"default\": {\"NAME\": \"test_default\"}, \"other\": {\"NAME\": \"test_other\"}})\n+    def test_natural_key_with_fk_dependency(self):\n+        \"\"\"\n+        Test that loading data with natural keys and foreign key dependencies works\n+        across different databases.\n+        \"\"\"\n+        # Define the initial data\n+        data = [\n+            {\n+                \"model\": \"fixtures_regress.author\",\n+                \"fields\": {\n+                    \"name\": \"J.R.R. Tolkien\"\n+                }\n+            },\n+            {\n+                \"model\": \"fixtures_regress.book\",\n+                \"fields\": {\n+                    \"title\": \"The Lord of the Rings\",\n+                    \"author\": [\n+                        \"J.R.R. Tolkien\"\n+                    ]\n+                }\n+            }\n+        ]\n+\n+        # Write the data to a fixture file\n+        with open(\"test_fixture.json\", \"w\") as f:\n+            json.dump(data, f)\n+\n+        # Load data into the other database\n+        management.call_command(\"loaddata\", \"test_fixture.json\", database=\"other\", verbosity=0)\n+\n+        # Verify the data was loaded correctly\n+        book = Book.objects.using(\"other\").get(title=\"The Lord of the Rings\")\n+        self.assertEqual(book.author.name, \"J.R.R. Tolkien\")\n+\n+    def tearDown(self):\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"DROP DATABASE IF EXISTS test_default;\")\n+            cursor.execute(\"DROP DATABASE IF EXISTS test_other;\")\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..f66c528 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,7 +3961,33 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n-    def test_add_textfield_unhashable_default(self):\n+    def test_alter_field_choices_noop(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_help_text_noop(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            max_length=255,\n+            help_text=\"A new help text\"\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..96416fb 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -324,8 +324,17 @@ class LookupTests(TestCase):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n \n+    def test_unregister_lookups_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register a lookup and ensure the cache is filled\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n \n-class BilateralTransformTests(TestCase):\n+        # Unregister the lookup and ensure the cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n     def test_bilateral_upper(self):\n         with register_lookup(models.CharField, UpperBilateralTransform):\n             author1 = Author.objects.create(name=\"Doe\")\n",
  "django__django-15572": "",
  "django__django-15731": "",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..a80be55 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,9 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -74,7 +77,13 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy_format(self):\n+        self.assertEqual(get_format(_(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..fa0cab2 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -382,7 +382,40 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-        # Select related + filter on a related proxy of proxy field\n+from django.test import TestCase\n+from django.db import models\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+    \n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+        \n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyModelTests(TestCase):\n+    \n+    def test_select_related_only_proxy_model(self):\n+        custom_obj = ProxyCustomModel.objects.create(name=\"Test\")\n+        AnotherModel.objects.create(custom=custom_obj)\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.first()\n+        self.assertEqual(result.custom.name, \"Test\")\n+        \n+    def test_select_related_only_with_no_proxy(self):\n+        custom_obj = CustomModel.objects.create(name=\"Test\")\n+        AnotherModel.objects.create(custom=custom_obj)\n+        # This should not raise any exception as it involves no proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.first()\n+        self.assertEqual(result.custom.name, \"Test\")\n         resp = ProxyImprovement.objects.select_related().get(\n             associated_bug__summary__icontains=\"fix\"\n         )\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..7fceecc 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,30 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_with_command(self):\n+        \"\"\"\n+        Test that additional parameters are passed before the database name for PostgreSQL.\n+        \"\"\"\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_with_command(self):\n+        \"\"\"\n+        Test that additional parameters are passed before the database name for PostgreSQL.\n+        \"\"\"\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..ae86f4e 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -405,6 +405,18 @@ class CaseExpressionTests(TestCase):\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n \n+    def test_annotate_with_negated_empty_filter(self):\n+        # This test is to ensure that ~Q(pk__in=[]) does not cause a syntax error\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        # All objects should be annotated with \"selected\" because ~Q(pk__in=[]) should match all\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n             selected=Case(\n@@ -412,6 +424,18 @@ class CaseExpressionTests(TestCase):\n                 default=Value(\"not selected\"),\n             )\n         )\n+\n+    def test_annotate_with_negated_empty_filter(self):\n+        # This test is to ensure that ~Q(pk__in=[]) does not cause a syntax error\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        # All objects should be annotated with \"selected\" because ~Q(pk__in=[]) should match all\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..82f6536 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -556,7 +557,23 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            Path(_cur_dir) / \"fixtures\",\n+            Path(_cur_dir) / \"fixtures\",  # Duplicate path as Path instance\n+        ]\n+    )\n+    def test_fixture_dirs_with_duplicate_path_instances(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS should not contain duplicate directories when\n+        they are instances of pathlib.Path.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is listed more than once in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"))\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..e8f3619 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,49 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n+    def test_annotation_and_alias_filter_related_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(pages__gt=400)\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = Publisher.objects.filter(\n+            book__in=long_books_qs,\n+        ).values(\"name\")\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"},\n+            ],\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..7782b34 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n@@ -2427,6 +2427,8 @@ class CombinedExpressionTests(SimpleTestCase):\n                         connector,\n                         Expression(rhs()),\n                     )\n+                    # Verify that the output_field is resolved correctly.\n+                    self.assertIsInstance(expr.output_field, combined)\n                     self.assertIsInstance(expr.output_field, combined)\n \n     def test_resolve_output_field_with_null(self):\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..3087508 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +403,55 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Assuming Swallow is a model registered for admin with list_editable fields.\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        # Simulate a database error during the logging of changes.\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values should be preserved, ensuring atomicity.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        # Simulate a database error after first change is saved.\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Again, original values should be preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..c9eacab 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,25 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_dry_run(self):\n+        \"\"\"\n+        Test that makemigrations --check without --dry-run does not create any migration files.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Ensure no migration files are created\n+            self.assertFalse(os.listdir(tmpdir))\n+\n+    def test_makemigrations_check_with_dry_run(self):\n+        \"\"\"\n+        Test that makemigrations --check with --dry-run behaves the same as without --dry-run.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\", verbosity=0)\n+            # Ensure no migration files are created\n+            self.assertFalse(os.listdir(tmpdir))\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..85ad7e0 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,5 +1,8 @@\n+\n import datetime\n import re\n+import urllib.parse\n+from django.urls import reverse\n from unittest import mock\n \n from django.contrib.auth.forms import (\n@@ -882,6 +885,46 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n \n         self.assertTrue(form.is_valid())\n         # original hashed password contains $\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_with_pk(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via pk.\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n     def test_bug_19349_bound_password_field(self):\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..5a057ce 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,6 +507,28 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from datetime import datetime\n+from django.contrib.sitemaps import Sitemap\n+from django.test import TestCase\n+from django.urls import path\n+from django.utils.decorators import method_decorator\n+from django.views.decorators.cache import cache_page\n+from django.contrib.sitemaps.views import index, sitemap\n+\n+class CallableLastmodNoItemsSitemapTests(TestCase):\n+    def test_callable_lastmod_no_items(self):\n+        # This test checks that the sitemap with no items and a callable lastmod does not raise an error.\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content_index = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '<sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\\n'\n+            '</sitemapindex>'\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content_index)\n+\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..2b5dcf9 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,11 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n@@ -79,6 +84,11 @@ class NoFields(models.Model):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..8934e6a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..4846e5b 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -236,6 +237,28 @@ class TimesinceTests(TestCase):\n             with self.subTest():\n                 self.assertEqual(timesince(t, value), expected)\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        # Current time with timezone awareness\n+        now = timezone.now()\n+        \n+        # Create a datetime object 31 days ago, aware of timezone\n+        past_date_aware = now - datetime.timedelta(days=31)\n+        \n+        # Test that timesince with aware datetime doesn't raise a TypeError\n+        self.assertEqual(timesince(past_date_aware), \"1\\xa0month\")\n+\n+        # Additional test with different time zones\n+        # Using a different timezone\n+        another_tz = timezone.pytz.timezone('America/New_York')\n+        past_date_another_tz = timezone.make_aware(datetime.datetime(2007, 7, 14, 13, 46, 0), another_tz)\n+        self.assertEqual(timesince(past_date_another_tz, another_tz), \"16\\xa0years, 2\\xa0months\")\n+\n+        # Test with naive datetime to ensure backward compatibility\n+        past_date_naive = datetime.datetime(2007, 7, 14, 13, 46, 0)\n+        self.assertEqual(timesince(past_date_naive), \"16\\xa0years, 2\\xa0months\")\n+\n     def test_depth_invalid(self):\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..d564262 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,7 +469,51 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n-class UtilsTests(SimpleTestCase):\n+class SubparserCommandTests(SimpleTestCase):\n+    def test_subparser_required_argument_missing(self):\n+        \"\"\"\n+        Ensure that a clear error message is shown when a required argument\n+        for a subparser is missing.\n+        \"\"\"\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"cheeses\", \"create\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py cheeses create: error: the following arguments are required: name\",\n+        )\n+    \n+    def test_subparser_non_integer_argument(self):\n+        \"\"\"\n+        Ensure that proper error formatting is preserved when a non-integer\n+        argument is provided where an integer is expected.\n+        \"\"\"\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"twelve\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'twelve'\",\n+        )\n+\n+    def test_subparser_non_django_error_formatting(self):\n+        \"\"\"\n+        Verify that non-Django error formatting is correctly applied to\n+        subparsers.\n+        \"\"\"\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser_vanilla\", \"foo\", \"seven\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser_vanilla foo: error: argument bar: invalid int value: 'seven'\",\n+        )\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..854c1f5 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -92,7 +92,17 @@ class GetStorageClassTests(SimpleTestCase):\n \n \n class FileSystemStorageTests(unittest.TestCase):\n-    def test_deconstruction(self):\n+    from django.core.files.storage import default_storage\n+    from .models import callable_default_storage\n+\n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n         path, args, kwargs = temp_storage.deconstruct()\n         self.assertEqual(path, \"django.core.files.storage.FileSystemStorage\")\n         self.assertEqual(args, ())\n@@ -1009,7 +1019,17 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n         self.assertIsInstance(obj.storage_callable_class.storage, BaseStorage)\n \n-    def test_deconstruction(self):\n+    from django.core.files.storage import default_storage\n+    from .models import callable_default_storage\n+\n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n         \"\"\"\n         Deconstructing gives the original callable, not the evaluated value.\n         \"\"\"\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..dad06d0 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,9 +1,12 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..759f29b 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -107,8 +107,19 @@ class BaseConstraintTests(SimpleTestCase):\n         c = BaseConstraint(\"name\", \"custom %(name)s message\")\n         self.assertEqual(c.get_violation_error_message(), \"custom name message\")\n \n-\n class CheckConstraintTests(TestCase):\n+    def test_check_constraint_custom_violation_code(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price_check\",\n+            violation_error_code=\"price_violation\",\n+        )\n+        # Test that custom error code is used.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"price_violation\")\n     def test_eq(self):\n         check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n         check2 = models.Q(price__lt=models.F(\"discounted_price\"))\n@@ -341,8 +352,16 @@ class UniqueConstraintTests(TestCase):\n                 violation_error_message=\"custom error\",\n             ),\n         )\n-\n-    def test_eq_with_condition(self):\n+    def test_unique_constraint_custom_violation_code(self):\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\", \"color\"],\n+            name=\"unique_name_color\",\n+            violation_error_code=\"unique_violation\",\n+        )\n+        duplicate_product = UniqueConstraintProduct(name=self.p1.name, color=self.p1.color)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(UniqueConstraintProduct, duplicate_product)\n+        self.assertEqual(cm.exception.code, \"unique_violation\")\n         self.assertEqual(\n             models.UniqueConstraint(\n                 fields=[\"foo\", \"bar\"],\n",
  "django__django-16569": "",
  "django__django-16595": "",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..9f53d81 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8463,6 +8463,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_multiple_query_strings(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Test with multiple query strings\n+        response = self.client.get(f\"{known_url[:-1]}?id=1&name=test\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&name=test\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_and_query_append_slash_true_empty_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Test with empty query string\n+        response = self.client.get(f\"{known_url[:-1]}?\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8499,6 +8537,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_multiple_query_strings(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Test with multiple query strings\n+        response = self.client.get(f\"{known_url[:-1]}?id=1&name=test\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&name=test\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_and_query_append_slash_true_empty_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Test with empty query string\n+        response = self.client.get(f\"{known_url[:-1]}?\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..5fb1ac2 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,19 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+\n+    def test_br_and_Z_extensions(self):\n+        \"\"\"Test correct MIME type guessing for .br and .Z file extensions.\"\"\"\n+        test_tuples = (\n+            (\".br\", \"application/x-brotli\"),\n+            (\".Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..cfa59d6 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -141,19 +141,45 @@ class ModelAdminTests(TestCase):\n         class EmployeeProfileAdmin(ModelAdmin):\n             list_filter = [\n                 \"employee__employeeinfo__description\",\n-                \"employee__department__code\",\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n             ]\n \n-        ma = EmployeeProfileAdmin(EmployeeProfile, self.site)\n-        # Reverse OneToOneField\n+        ma = WaiterAdmin(Waiter, self.site)\n+        # Test if lookups with foreign key primary key are allowed correctly\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n         self.assertIs(\n-            ma.lookup_allowed(\"employee__employeeinfo__description\", \"test_value\"), True\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n         )\n-        # OneToOneField and ForeignKey\n         self.assertIs(\n-            ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n         )\n \n+    def test_lookup_allowed_foreign_primary_additional_cases(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        # Additional test cases for different foreign key lookups\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name__contains\", \"test\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name__startswith\", \"test\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name__endswith\", \"value\"), True)\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..fcb9b0f 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,6 +922,37 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n+    def test_complex_imports_sorting(self):\n+        \"\"\"\n+        Test that imports are sorted correctly even with multiple sections.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.RunPython(time.time),\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield\",\n+                        models.DateTimeField(\n+                            default=datetime.datetime(\n+                                2012, 1, 1, 1, 1, tzinfo=datetime.timezone.utc\n+                            ),\n+                        ),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        expected_imports = (\n+            \"import datetime\\n\"\n+            \"import time\\n\"\n+            \"from django.db import migrations, models\\n\"\n+        )\n+        self.assertIn(expected_imports, output)\n+\n     def test_migration_file_header_comments(self):\n         \"\"\"\n         Test comments at top of file.\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..7db940e 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -320,6 +320,19 @@ class ImageFieldTwoDimensionsTests(ImageFieldTestMixin, TestCase):\n         self.assertIs(p.mugshot.was_opened, True)\n \n \n+from django.db.models import signals\n+\n+def test_post_init_not_connected(self):\n+    \"\"\"\n+    Test that the post_init signal handler is not connected if\n+    width_field and height_field are not specified.\n+    \"\"\"\n+    person_model_id = id(self.PersonModel)\n+    self.assertNotIn(\n+        person_model_id,\n+        [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+    )\n+\n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n     \"\"\"\n@@ -329,6 +342,19 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n     PersonModel = Person\n \n \n+from django.db.models import signals\n+\n+def test_post_init_not_connected(self):\n+    \"\"\"\n+    Test that the post_init signal handler is not connected if\n+    width_field and height_field are not specified.\n+    \"\"\"\n+    person_model_id = id(self.PersonModel)\n+    self.assertNotIn(\n+        person_model_id,\n+        [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+    )\n+\n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n     \"\"\"\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..2e79984 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -790,7 +790,6 @@ class SystemChecksTestCase(SimpleTestCase):\n \n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n-\n     def test_nonexistent_field(self):\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"title\", \"nonexistent\")\n@@ -798,8 +797,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n-                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n             )\n@@ -814,14 +814,28 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n-                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n+                \"not a callable, an attribute of 'CityInline', or an attribute of \"\n+                \"'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n             )\n         ]\n         self.assertEqual(errors, expected)\n \n+    def test_valid_readonly_field(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"title\",)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        self.assertEqual(errors, [])\n+\n+    def test_callable_readonly_field(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"__str__\",)  # Assuming __str__ is defined on the model.\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        self.assertEqual(errors, [])\n     def test_readonly_fields_not_list_or_tuple(self):\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = \"test\"\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..b74ee83 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -19,7 +20,22 @@ class XorLookupsTests(TestCase):\n             self.numbers[:3] + self.numbers[8:],\n         )\n \n-    def test_filter_negated(self):\n+    def test_filter_multiple_xor(self):\n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+            ^ Q(num__gte=7)\n+            ^ Q(num__gte=9)\n+        )\n+        self.assertCountEqual(\n+            qs.values_list(\"num\", flat=True),\n+            [\n+                i\n+                for i in range(10)\n+                if (i >= 1) ^ (i >= 3) ^ (i >= 5) ^ (i >= 7) ^ (i >= 9)\n+            ],\n+        )\n         self.assertCountEqual(\n             Number.objects.filter(Q(num__lte=7) ^ ~Q(num__lt=3)),\n             self.numbers[:3] + self.numbers[8:],\n@@ -64,4 +80,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..1ba34a5 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,6 +297,29 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+    def test_paginator_iteration(self):\n+        \"\"\"Testing the iteration over Paginator using the implemented __iter__ method.\"\"\"\n+        paginator = Paginator([1, 2, 3, 4], 2)\n+        page_iterator = iter(paginator)\n+        for page_number, expected_items in enumerate(([1, 2], [3, 4]), start=1):\n+            with self.subTest(page=page_number):\n+                self.assertEqual(expected_items, list(next(page_iterator)))\n+\n+    def test_empty_paginator_iteration(self):\n+        \"\"\"Testing iteration over an empty Paginator.\"\"\"\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_partial_page(self):\n+        \"\"\"Testing iteration over Paginator when the last page is partial.\"\"\"\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page_number, expected_items in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page_number):\n+                self.assertEqual(expected_items, list(next(page_iterator)))\n+\n \n class ModelPaginationTests(TestCase):\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..1a17c26 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,28 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_no_density_within_range():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_density_outside_range():\n+    _, bins, _ = plt.hist(np.random.rand(10) * 2, \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_no_density_outside_range():\n+    _, bins, _ = plt.hist(np.random.rand(10) * 2, \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] != 1  # Since the data range exceeds specified range\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6388,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..27da9cf 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -918,6 +918,9 @@ def test_hexbin_log():\n     plt.colorbar(h)\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n def test_inverted_limits():\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n@@ -939,7 +942,17 @@ def test_inverted_limits():\n     plt.close()\n \n \n-@image_comparison(baseline_images=['nonfinite_limits'])\n+def test_invert_log_scale_axis():\n+    # Test inverting a log scale y-axis using its limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(1000, 1)  # Attempt to invert log scale\n+    assert ax.get_ylim() == (1000, 1), \"Log scale axis not inverted using set_ylim.\"\n+\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(1000, 1)  # Attempt to invert log scale\n+    assert ax.get_xlim() == (1000, 1), \"Log scale axis not inverted using set_xlim.\"\n def test_nonfinite_limits():\n     x = np.arange(0., np.e, 0.01)\n     # silence divide by zero warning from log(0)\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..f24158e 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,8 +6960,37 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_shared_axes_retick():\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    \n+    x = np.arange(0.0, 2 * np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Create reference plot without clearing and check tick mark presence\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Create test plot with `clear` and check the behavior\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Explicitly check the tick mark and label visibility\n+    for ax, ax_ref in zip(axs_test.flat, axs_ref.flat):\n+        assert ax.get_xticks().tolist() == ax_ref.get_xticks().tolist(), \\\n+            \"XTicks do not match reference after clearing\"\n+        assert ax.get_yticks().tolist() == ax_ref.get_yticks().tolist(), \\\n+            \"YTicks do not match reference after clearing\"\n+        assert len(ax.get_xticklabels()) == len(ax_ref.get_xticklabels()), \\\n+            \"XTick labels do not match reference after clearing\"\n+        assert len(ax.get_yticklabels()) == len(ax_ref.get_yticklabels()), \\\n+            \"YTick labels do not match reference after clearing\"\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..d76be83 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -307,8 +307,29 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert y_units is ax.yaxis.units\n \n \n-def test_hist():\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted. See #22640.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    ax.plot([], [])\n+    # If the warning is not properly suppressed, pytest will fail this test.\n+\n+def test_no_conversion_error_on_empty_data_with_direct_conversion():\n+    \"\"\"\n+    Test that no conversion error is raised when using convert_xunits\n+    on empty data with string category units.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    try:\n+        ax.convert_xunits([])\n+    except Exception as e:\n+        pytest.fail(f\"convert_xunits raised {type(e).__name__} unexpectedly!\")\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..7fd31e0 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,25 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_get_backend_does_not_clear_gcf():\n+    with plt.rc_context():\n+        fig1 = plt.figure()\n+\n+    fig2 = plt.figure()\n+\n+    before_backend_call = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    plt.get_backend()\n+    after_backend_call = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before_backend_call == after_backend_call, (\n+        f\"Gcf.figs changed after get_backend() call:\\n\"\n+        f\"Before: {before_backend_call}\\n\"\n+        f\"After: {after_backend_call}\"\n+    )\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..ef0143f 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -12,6 +12,7 @@ from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n+from matplotlib.testing.decorators import check_figures_equal\n \n import matplotlib.pyplot as plt\n import numpy as np\n@@ -20,8 +21,20 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n-\n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d_axes(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax2 = fig_test.add_subplot(122, projection='3d')\n+    ax1.scatter([1], [1], [1])\n+    ax2.scatter([1], [1], [1], c='r')\n+    \n+    ax1.set_visible(False)\n+\n+    # In fig_ref, all axes are visible.\n+    ax1_ref = fig_ref.add_subplot(121, projection='3d')\n+    ax2_ref = fig_ref.add_subplot(122, projection='3d')\n+    ax1_ref.scatter([1], [1], [1])\n+    ax2_ref.scatter([1], [1], [1], c='r')\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..2dd0b63 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -156,9 +156,28 @@ def test_negative_rect():\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n+from matplotlib.patches import Rectangle\n+from matplotlib.testing.decorators import check_figures_equal\n \n-@image_comparison(['clip_to_bbox'])\n-def test_clip_to_bbox():\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_effect_on_patch(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+\n+    # Reference rectangle with dash offset\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(10, [10, 5]))\n+    ax_ref.add_patch(rect_ref)\n+\n+    # Test rectangle with the same dash pattern\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(10, [10, 5]))\n+    ax_test.add_patch(rect_test)\n+\n+    # Ensure that the dash offset is applied correctly\n+    assert rect_test.get_linestyle() == (10, [10, 5])\n+    assert rect_ref.get_linestyle() == (10, [10, 5])\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n     ax.set_ylim([-150, 100])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..0507461 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2857,6 +2857,44 @@ def test_stackplot():\n     ax = fig.add_subplot(1, 1, 1)\n     ax.stackplot(x, y1, y2, y3)\n     ax.set_xlim((0, 10))\n+\n+def test_stackplot_color_cycler():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n+    from cycler import cycler\n+\n+    # Create a figure and axis\n+    fig, ax = plt.subplots()\n+\n+    # Set a specific initial color cycler\n+    initial_cycler = cycler(color=['r', 'g', 'b', 'y'])\n+    ax.set_prop_cycle(initial_cycler)\n+\n+    # Plot a line and a rectangle to use color cycle\n+    ax.plot([0, 1], [0, 1])\n+    ax.add_patch(Rectangle((0.5, 0.5), 0.1, 0.1))\n+\n+    # Save the color used so far\n+    used_colors = [line.get_color() for line in ax.get_lines()]\n+    patches = [p.get_facecolor() for p in ax.patches]\n+    used_colors.extend(patches)\n+\n+    # Use stackplot with specific 'C' color cycle references\n+    x = [0, 1, 2]\n+    data = np.array([[1, 2, 3], [3, 2, 1], [2, 3, 1]])\n+    ax.stackplot(x, data, colors=['C0', 'C1', 'C2'])\n+\n+    # Check if the colors after stackplot are consistent\n+    stack_colors = [poly.get_facecolor() for poly in ax.collections]\n+\n+    # Verify that stackplot does not interfere with the color cycler\n+    after_stackplot_cycler = [color['color'] for color in ax.prop_cycler]\n+    \n+    # Test that the colors used match expectations and the cycler hasn't changed unexpectedly\n+    assert used_colors + stack_colors == initial_cycler, \"Color cycle should remain unchanged\"\n+\n+    # Verify that no error is raised when using 'C0', 'C1', etc., colors in stackplot\n     ax.set_ylim((0, 70))\n \n     # Reuse testcase from above for a labeled data test\n@@ -2864,6 +2902,44 @@ def test_stackplot():\n     fig, ax = plt.subplots()\n     ax.stackplot(\"x\", \"y1\", \"y2\", \"y3\", data=data)\n     ax.set_xlim((0, 10))\n+\n+def test_stackplot_color_cycler():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n+    from cycler import cycler\n+\n+    # Create a figure and axis\n+    fig, ax = plt.subplots()\n+\n+    # Set a specific initial color cycler\n+    initial_cycler = cycler(color=['r', 'g', 'b', 'y'])\n+    ax.set_prop_cycle(initial_cycler)\n+\n+    # Plot a line and a rectangle to use color cycle\n+    ax.plot([0, 1], [0, 1])\n+    ax.add_patch(Rectangle((0.5, 0.5), 0.1, 0.1))\n+\n+    # Save the color used so far\n+    used_colors = [line.get_color() for line in ax.get_lines()]\n+    patches = [p.get_facecolor() for p in ax.patches]\n+    used_colors.extend(patches)\n+\n+    # Use stackplot with specific 'C' color cycle references\n+    x = [0, 1, 2]\n+    data = np.array([[1, 2, 3], [3, 2, 1], [2, 3, 1]])\n+    ax.stackplot(x, data, colors=['C0', 'C1', 'C2'])\n+\n+    # Check if the colors after stackplot are consistent\n+    stack_colors = [poly.get_facecolor() for poly in ax.collections]\n+\n+    # Verify that stackplot does not interfere with the color cycler\n+    after_stackplot_cycler = [color['color'] for color in ax.prop_cycler]\n+    \n+    # Test that the colors used match expectations and the cycler hasn't changed unexpectedly\n+    assert used_colors + stack_colors == initial_cycler, \"Color cycle should remain unchanged\"\n+\n+    # Verify that no error is raised when using 'C0', 'C1', etc., colors in stackplot\n     ax.set_ylim((0, 70))\n \n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..a98c2b7 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,23 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype(dtype):\n+    # We use subtraction in the indexing, so need to verify that uint8 works\n+    cm = mpl[\"viridis\"]\n+    assert_array_equal(cm(dtype(0)), cm(0))\n+\n+def test_deprecation_warning_handling():\n+    # Test to ensure no DeprecationWarning is raised with NumPy 1.24\n+    with pytest.warns(None) as record:\n+        np.array([257, 256, 258], dtype=np.uint8)\n+    assert len(record) == 0, \"Expected no deprecation warnings but got some.\"\n+\n+import numpy as np\n+import pytest\n+from matplotlib import colormaps as mpl, colors as mcolors\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..9bd6df0 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -670,7 +670,31 @@ class TestSpectral:\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n-    def test_psd_windowarray(self):\n+    def test_psd_flattop_window_correction(self):\n+        # Test for the window correction issue with the flattop window\n+        from scipy import signal\n+        # Using the same data setup as the test functions already implemented\n+        if self.NFFT_density is None:\n+            return\n+        window = signal.windows.flattop(self.NFFT_density_real)\n+        spec, fsp = mlab.psd(x=self.y,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=window)\n+        # Expected result should have zero correction difference\n+        correction_difference = np.abs(window).sum()**2 - window.sum()**2\n+        assert_allclose(correction_difference, 0, atol=1e-08)\n+        # Ensure the spectrum is correctly adjusted\n+        scaled_spec = spec * window.sum()**2\n+        ref_spec, _ = mlab.psd(x=self.y,\n+                               NFFT=self.NFFT_density,\n+                               Fs=self.Fs,\n+                               noverlap=0,\n+                               sides=self.sides,\n+                               window=window)\n+        assert_allclose(scaled_spec, ref_spec * self.Fs * (window**2).sum(), atol=1e-08)\n         freqs = self.freqs_density\n         spec, fsp = mlab.psd(x=self.y,\n                              NFFT=self.NFFT_density,\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..8917528 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,9 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..9f96ff5 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -90,7 +91,28 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n-@mpl.style.context(\"default\")\n+@pytest.mark.parametrize(\"draggable\", [True, False])\n+def test_pickle_figure_with_legend(draggable):\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(draggable)\n+\n+    # Attempt to pickle\n+    try:\n+        pickle_data = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+        no_pickle_error = True\n+    except Exception as e:\n+        print(f\"Error occurred: {e}\")\n+        no_pickle_error = False\n+\n+    # Check whether a pickle error is expected based on the draggable state\n+    assert no_pickle_error if not draggable else not no_pickle_error\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..1a61205 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -44,6 +44,34 @@ def test_simple():\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n \n+def test_pickle_figure_with_aligned_labels():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n+\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+    \n+    # Test pickling\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    loaded = pickle.loads(pkl.getbuffer())\n+    loaded.canvas.draw()\n+    \n+    # Ensure the loaded figure is drawn without errors\n+    assert loaded is not None\n+\n+\n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..4513b11 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,45 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_hexbin_log_clim():\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..1239aaf 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,47 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib import pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    \n+    # Create a contour\n+    X, Y = np.meshgrid(np.arange(0, 3), np.arange(0, 3))\n+    Z = X + Y\n+    cs_test = ax_test.contour(X, Y, Z)\n+    cs_ref = ax_ref.contour(X, Y, Z)\n+    \n+    # Get original paths\n+    original_paths = cs_test.get_paths()\n+    \n+    # Test set_paths by replacing with reference paths\n+    cs_test.set_paths(cs_ref.get_paths())\n+    \n+    # Ensure the paths are indeed replaced\n+    assert cs_test.get_paths() != original_paths\n+    assert cs_test.get_paths() == cs_ref.get_paths()\n+\n+def test_contour_set_paths_empty():\n+    fig, ax = plt.subplots()\n+    \n+    # Create a contour\n+    X, Y = np.meshgrid(np.arange(0, 3), np.arange(0, 3))\n+    Z = X + Y\n+    cs = ax.contour(X, Y, Z)\n+    \n+    # Set paths to an empty list\n+    original_paths = cs.get_paths()\n+    cs.set_paths([])\n+    \n+    # Ensure the paths are now empty\n+    assert cs.get_paths() == []\n+    assert cs.get_paths() != original_paths\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..50ddc72 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -251,6 +251,18 @@ def test_templates_list(test_apps):\n     assert templates == [\"admin/index.html\", \"frontend/index.html\"]\n \n \n+import pytest\n+import flask\n+\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    \"\"\"Test that whitespace-only names raise a ValueError.\"\"\"\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n+\n def test_dotted_name_not_allowed(app, client):\n     with pytest.raises(ValueError):\n         flask.Blueprint(\"app.ui\", __name__)\n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..2fc9f1f 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,10 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://-example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://example.com..'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..da60c76 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,30 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n-\n-def test_raise_no_warning_for_nan_in_binary_ops():\n+def test_setitem_preserves_object_with_values_attribute():\n+    import numpy as np\n+    from xarray import Variable\n+\n+    # Class with a values attribute\n+    class HasValues:\n+        def __init__(self, value):\n+            self.values = value\n+\n+    # Initialize the Variable with dtype=object\n+    data = np.array([None], dtype=object)\n+    variable = Variable(dims=(\"x\"), data=data)\n+\n+    # Assign an instance of HasValues with non-broadcasted assignment\n+    obj = HasValues(5)\n+    variable[0] = obj\n+\n+    # Check that the object is stored as is, without coercion\n+    assert isinstance(variable.values[0], HasValues)\n+    assert variable.values[0].values == 5\n+\n+    # Check for other object types for comparison\n+    variable[0] = set()\n+    assert isinstance(variable.values[0], set)\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..209d1e9 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2062,6 +2062,12 @@ class TestDataset:\n             assert data.attrs['Test'] is copied.attrs['Test']\n \n         for copied in [data.copy(deep=True), deepcopy(data)]:\n+            # Test case for checking if unicode indices are not cast to object\n+            ds_unicode = xr.Dataset(coords={'x': ['foo'], 'y': ('x', ['bar'])}, data_vars={'z': ('x', ['baz'])})\n+            ds_copy = ds_unicode.copy(deep=True)\n+            assert ds_unicode['x'].dtype == ds_copy['x'].dtype, \"Deep copy should not change dtype of 'x'\"\n+            assert ds_unicode['y'].dtype == ds_copy['y'].dtype, \"Deep copy should not change dtype of 'y'\"\n+            assert ds_unicode['z'].dtype == ds_copy['z'].dtype, \"Deep copy should not change dtype of 'z'\"\n             assert_identical(data, copied)\n             for k, v0 in data.variables.items():\n                 v1 = copied.variables[k]\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..d0b20d8 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,7 +574,30 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n-    def test_infer_order_from_coords(self):\n+    def test_combine_non_monotonic_identical_coords(self):\n+        # Test with identical non-monotonic coordinates that should not raise error\n+        ycoord = ['a', 'c', 'b']\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data1)),\n+            coords=dict(x=[1, 2, 3], y=ycoord)\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data2)),\n+            coords=dict(x=[4, 5, 6, 7], y=ycoord)\n+        )\n+\n+        expected_data = np.concatenate([data1, data2], axis=0)\n+        expected = Dataset(\n+            data_vars=dict(data=(['x', 'y'], expected_data)),\n+            coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord)\n+        )\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n         actual = combine_by_coords(objs)\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..49621ec 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,7 +2310,32 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+        from collections import OrderedDict\n+        \n+        # Create a DataArray with attributes\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units':'K'})\n+        # Apply quantile with keep_attrs=True\n+        out = da.quantile(.9, dim='x', keep_attrs=True)\n+        # Check if attributes are preserved\n+        assert out.attrs == OrderedDict([('units', 'K')])\n+\n+        # Test with a multi-dimensional array\n+        da_multi = xr.DataArray(np.random.rand(3, 4), dims=(\"x\", \"y\"), attrs={\"description\": \"random data\"})\n+        out_multi = da_multi.quantile(0.5, dim='x', keep_attrs=True)\n+        assert out_multi.attrs == {\"description\": \"random data\"}\n+\n+        # Test with no attributes\n+        da_no_attr = xr.DataArray([1, 2, 3], dims=\"x\")\n+        out_no_attr = da_no_attr.quantile(0.5, dim='x', keep_attrs=True)\n+        assert out_no_attr.attrs == {}\n+\n+        # Test with keep_attrs=False\n+        da_with_attr = xr.DataArray([0, 1, 2], dims=\"x\", attrs={'units':'C'})\n+        out_without_attrs = da_with_attr.quantile(.5, dim='x', keep_attrs=False)\n+        assert out_without_attrs.attrs == {}\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..93da7dd 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,37 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        # Basic test case to verify merging a DataArray into a Dataset\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        expected = xr.merge([ds, da])\n+        assert_identical(ds.merge(da), expected)\n+\n+        # Test case with more complex data structures\n+        ds = xr.Dataset({\"a\": (\"x\", [1, 2, 3])})\n+        da = xr.DataArray(data=[4, 5, 6], dims=\"x\", name=\"b\")\n+        expected = xr.merge([ds, da])\n+        assert_identical(ds.merge(da), expected)\n+\n+        # Test case with mismatched dimensions\n+        ds = xr.Dataset({\"a\": (\"x\", [1, 2, 3])})\n+        da = xr.DataArray(data=[4, 5], dims=\"y\", name=\"b\")\n+        with pytest.raises(ValueError):\n+            ds.merge(da)\n+\n+        # Test case with existing variable name\n+        ds = xr.Dataset({\"a\": (\"x\", [1, 2, 3])})\n+        da = xr.DataArray(data=[4, 5, 6], dims=\"x\", name=\"a\")\n+        with pytest.raises(xr.MergeError):\n+            ds.merge(da)\n+\n+        # Test case with different dimension names\n+        ds = xr.Dataset({\"a\": (\"x\", [1, 2])})\n+        da = xr.DataArray(data=[3, 4], dims=\"y\", name=\"b\")\n+        expected = xr.Dataset({\"a\": (\"x\", [1, 2]), \"b\": (\"y\", [3, 4])})\n+        assert_identical(ds.merge(da), expected)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..f23f3d9 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -603,11 +603,41 @@ def test_min_count_dataset(func):\n     expected = getattr(ds[\"var1\"], func)(dim=\"x\", skipna=True, min_count=3)\n     assert_allclose(actual, expected)\n \n+import pytest\n+import numpy as np\n+from xarray import DataArray, Dataset\n+from xarray.tests import assert_allclose, assert_dask_array\n+from .test_duck_array_ops import construct_dataarray, series_reduce, has_dask\n+\n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n+@pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_nd(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    min_count = 3\n+    dim_num = 3\n+    da = construct_dataarray(dim_num, dtype, contains_nan=True, dask=dask)\n+\n+    # Test for multiple dimensions with min_count specified\n+    actual = getattr(da, func)(dim=[\"x\", \"y\", \"z\"], skipna=True, min_count=min_count)\n+    # Supplying all dims is equivalent to supplying `...` or `None`\n+    expected = getattr(da, func)(dim=..., skipna=True, min_count=min_count) \n+\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n \n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n @pytest.mark.parametrize(\"dask\", [False, True])\n+@pytest.mark.parametrize(\"skipna\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n-def test_multiple_dims(dtype, dask, func):\n+def test_multiple_dims(dtype, dask, skipna, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+\n+    actual = getattr(da, func)((\"x\", \"y\"), skipna=skipna)\n     if dask and not has_dask:\n         pytest.skip(\"requires dask\")\n     da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..56e02fe 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,50 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_no_reference(self):\n+        ds1 = xr.Dataset(attrs={\"key\": \"value1\"})\n+        ds2 = xr.Dataset(attrs={\"key\": \"value2\"})\n+        merged = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        merged.attrs[\"key\"] = \"value3\"\n+        \n+        # Checking that modifying the merged dataset doesn't change the original datasets\n+        assert ds1.attrs[\"key\"] == \"value1\"\n+        assert ds2.attrs[\"key\"] == \"value2\"\n+        assert merged.attrs[\"key\"] == \"value3\"\n+\n+    def test_merge_attrs_drop(self):\n+        ds1 = xr.Dataset(attrs={\"key\": \"value1\"})\n+        ds2 = xr.Dataset(attrs={\"key\": \"value2\"})\n+        merged = xr.merge([ds1, ds2], combine_attrs=\"drop\")\n+        \n+        # All attributes should be dropped\n+        assert merged.attrs == {}\n+\n+    def test_merge_attrs_no_conflicts(self):\n+        ds1 = xr.Dataset(attrs={\"key1\": \"value1\"})\n+        ds2 = xr.Dataset(attrs={\"key2\": \"value2\"})\n+        merged = xr.merge([ds1, ds2], combine_attrs=\"no_conflicts\")\n+        \n+        # No conflicts, so all attributes should be merged\n+        assert merged.attrs == {\"key1\": \"value1\", \"key2\": \"value2\"}\n+\n+    def test_merge_attrs_identical(self):\n+        ds1 = xr.Dataset(attrs={\"key\": \"value\"})\n+        ds2 = xr.Dataset(attrs={\"key\": \"value\"})\n+        merged = xr.merge([ds1, ds2], combine_attrs=\"identical\")\n+        \n+        # Attributes are identical, so merge should succeed\n+        assert merged.attrs == {\"key\": \"value\"}\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..394797f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,23 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_preserve_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond_attr\"})\n+    x = xr.DataArray([1, 2], dims=\"x\", attrs={\"attr\": \"x_attr\"})\n+    y = xr.DataArray([3, 4], dims=\"x\", attrs={\"attr\": \"y_attr\"})\n+\n+    # Test with keep_attrs=True\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 4], dims=\"x\", attrs={\"attr\": \"x_attr\"})\n+    \n+    assert_identical(expected, actual)\n+\n+    # Test with keep_attrs=False\n+    actual_no_attrs = xr.where(cond, x, y, keep_attrs=False)\n+    expected_no_attrs = xr.DataArray([1, 4], dims=\"x\")\n+\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..0e1a67c 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,8 +13,33 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+import numpy as np\n \n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_from_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == unsigned_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..44179fc 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1928,8 +1928,35 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+import xarray as xr\n+import pytest\n \n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+def test_where_scalar_values_with_keep_attrs():\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    \n+    # Case 1: Scalar 'x', DataArray 'y'\n+    y = xr.DataArray([0, 1, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, 1, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 1, 1], dims=\"x\", attrs={\"attr\": \"y\"})\n+    xr.testing.assert_identical(expected, actual)\n+\n+    # Case 2: DataArray 'x', Scalar 'y'\n+    x = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    actual = xr.where(cond, x, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    xr.testing.assert_identical(expected, actual)\n+\n+    # Case 3: Scalar 'x' and 'y'\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    xr.testing.assert_identical(expected, actual)\n+\n+# Ensure the original patch test remains\n+def test_where_original_patch():\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    xr.testing.assert_identical(expected, actual)\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..f440d69 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,6 +221,20 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # regression test for the issue where accessing chunks loads the entire dataset into memory\n+        # Create an in-memory Zarr store with a dummy dataset\n+        store = xr.backends.MemoryStore()\n+        original = xr.Dataset({'foo': (('x',), np.arange(10))})\n+        original.to_zarr(store)\n+\n+        # Open the dataset without chunking\n+        ds = xr.open_dataset(store, engine='zarr')\n+\n+        # Access chunks and verify it doesn't load data into memory\n+        assert ds.chunks == {}\n+        assert isinstance(ds['foo'].data, np.ndarray)\n+\n     def test_repr(self) -> None:\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..744849a 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,13 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n-\n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+# Verify dtype preservation when stacking coordinates.\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"int64\", \"float32\", \"float64\", \"int16\"])\n+def test_dtype_preservation_on_stack(dtype: str) -> None:\n+    # Create a Dataset with a coordinate of a specific dtype\n+    ds = xr.Dataset(coords={\"a\": np.array([0, 1], dtype=dtype)})\n+    # Stack the Dataset along a new dimension\n+    stacked_ds = ds.stack(b=(\"a\",))\n+    # Assert that the dtype of the stacked coordinate matches the original dtype\n+    assert str(ds[\"a\"].values.dtype) == str(stacked_ds[\"a\"].values.dtype)\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..c97c3e2 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,38 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint import Run\n+from _pytest.capture import CaptureFixture\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the --verbose flag does not expect an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_invalid_short_verbose_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that -v doesn't expect an argument, providing one raises error.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\", \"unexpected\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"error: unrecognized arguments: unexpected\" in output.err\n+\n+def test_invalid_long_verbose_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that --verbose doesn't expect an argument, providing one raises error.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"--verbose\", \"unexpected\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"error: unrecognized arguments: unexpected\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex d5ccd91..c7d86a7 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -863,6 +863,55 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         # computed for that module\n         assert module_stats[\"statement\"] == linter2.stats.statement\n \n+def test_recursive_ignore_ignore_patterns_paths() -> None:\n+    \"\"\"Test if Pylint respects --ignore, --ignore-patterns, and --ignore-paths in recursive mode.\"\"\"\n+    from pylint.lint import Run\n+    import os\n+    from os.path import join\n+\n+    regrtest_data_dir = join(os.path.dirname(__file__), \"regrtest_data\")\n+\n+    test_cases = [\n+        (\"--ignore\", \"ignored_subdirectory\"),\n+        (\"--ignore\", \"failing.py\"),\n+        (\"--ignore-patterns\", \"ignored_.*\"),\n+        (\"--ignore-patterns\", \"failing.*\"),\n+        (\"--ignore-paths\", \".*ignored.*\"),\n+        (\"--ignore-paths\", \".*failing.*\"),\n+    ]\n+\n+    for ignore_param, ignore_value in test_cases:\n+        run = Run(\n+            [\n+                \"--recursive=y\",\n+                ignore_param,\n+                ignore_value,\n+                join(regrtest_data_dir, \"directory\"),\n+            ],\n+            exit=False,\n+        )\n+\n+        linted_files = run.linter._iterate_file_descrs(\n+            tuple(run.linter._discover_files([join(regrtest_data_dir, \"directory\")]))\n+        )\n+        linted_file_paths = [file_item.file_path for file_item in linted_files]\n+\n+        ignored_file = os.path.abspath(\n+            join(regrtest_data_dir, \"directory\", \"ignored_subdirectory\", \"failing.py\")\n+        )\n+        assert ignored_file not in linted_file_paths\n+\n+        valid_modules = [\n+            (\"directory\", \"subdirectory\", \"subsubdirectory\", \"module.py\"),\n+            (\"directory\", \"subdirectory\", \"module.py\"),\n+            (\"directory\", \"package\", \"module.py\"),\n+            (\"directory\", \"package\", \"subpackage\", \"module.py\"),\n+        ]\n+\n+        for module_parts in valid_modules:\n+            module = os.path.abspath(join(regrtest_data_dir, *module_parts))\n+            assert module in linted_file_paths\n+\n \n def test_import_sibling_module_from_namespace(initialized_linter: PyLinter) -> None:\n     \"\"\"If the parent directory above `namespace` is on sys.path, ensure that\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..dc91a3f 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1329,8 +1329,26 @@ class TestRunTC:\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n                 )\n-\n-    def test_regression_recursive_current_dir(self):\n+    def test_ignore_paths_with_recursive(self):\n+        \"\"\"Test that `--recursive=y` respects `ignore-paths` setting.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Set the working directory to a test directory structure\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Run pylint with recursive option and ignore paths regex\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\"\n+                    ],\n+                    code=0,  # Expect success, indicating ignored paths were respected\n+                )\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n             # astroid to believe that directory is a package.\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..4006a4a 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -765,8 +765,41 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n-            paths = [cwd, \"/custom_pythonpath\", *default_paths]\n+            paths = [\"/do_not_remove\", *default_paths]\n             sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths\n+\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [cwd, *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [\"not_cwd_or_dot\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths  # Should remain unchanged since it's not \"\", \".\", or cwd\n+\n+            paths = [\"another_path\", os.getcwd(), *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath(\".\"):\n+                modify_sys_path()\n+            assert sys.path == paths  # Should remain unchanged as the first isn't \"\", \".\", or cwd\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..bb719fb 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,8 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -172,7 +174,30 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n-def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n+def test_caplog_get_records_and_clear_consistency(caplog):\n+    # Initial consistency check\n+    assert caplog.get_records(\"call\") == []\n+    assert caplog.records == []\n+\n+    # Log a message and check consistency\n+    logging.warning(\"first warning\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"first warning\"]\n+    assert [x.message for x in caplog.records] == [\"first warning\"]\n+\n+    # Clear logs and ensure both get_records and records are cleared\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+    assert caplog.records == []\n+\n+    # Log another message and check consistency\n+    logging.warning(\"second warning\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"second warning\"]\n+    assert [x.message for x in caplog.records] == [\"second warning\"]\n+\n+    # Another clear to ensure consistency remains after multiple operations\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+    assert caplog.records == []\n     pytester.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..54cd36b 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -192,7 +192,29 @@ class TestPDB:\n         child.sendeof()\n         self.flush(child)\n \n-    def test_pdb_print_captured_stdout_and_stderr(self, pytester: Pytester) -> None:\n+    def test_pdb_teardown_skipped_for_unittest_skip_class(self, pytester: Pytester) -> None:\n+        \"\"\"Test that tearDown is not called for classes decorated with unittest.skip when running with --pdb\"\"\"\n+\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+\n+            @unittest.skip(\"Skip this class\")\n+            class MyTestCase(unittest.TestCase):\n+                def setUp(self):\n+                    raise Exception(\"setUp should not be called\")\n+\n+                def tearDown(self):\n+                    raise Exception(\"tearDown should not be called\")\n+\n+                def test_one(self):\n+                    pass\n+            \"\"\"\n+        )\n+        result = pytester.runpytest_inprocess(\"--pdb\", p1)\n+        result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+        assert \"Exception: setUp should not be called\" not in result.stdout.str()\n+        assert \"Exception: tearDown should not be called\" not in result.stdout.str()\n         p1 = pytester.makepyfile(\n             \"\"\"\n             def test_1():\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..36a1539 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,6 +1051,26 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+    def test_capfd_sys_stdout_mode(self, capfd):\n+        import sys\n+        capfd.readouterr()  # Reset any previous output\n+        assert \"b\" not in sys.stdout.mode\n+\n+    def test_encodedfile_write_mode(self):\n+        from _pytest.capture import EncodedFile\n+        import io\n+        buffer = io.StringIO()\n+        encoded_file = EncodedFile(buffer, 'utf-8')\n+        \n+        # Test writing string\n+        encoded_file.write(\"test string\")\n+        \n+        # Test that TypeError is raised when writing bytes\n+        with pytest.raises(TypeError, match=r\"write\\(\\) argument must be str, not bytes\"):\n+            encoded_file.write(b\"test bytes\")\n+        \n+        assert buffer.getvalue() == \"test string\"\n+\n \n @contextlib.contextmanager\n def saved_fd(fd):\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..e4fa13d 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -9,6 +9,8 @@ import pytest\n from _pytest.main import _in_venv\n from _pytest.main import ExitCode\n from _pytest.main import Session\n+from unittest.mock import patch\n+import numpy as np\n \n \n class TestCollector:\n@@ -46,7 +48,21 @@ class TestCollector:\n             assert [1, 2, 3] != fn\n             assert modcol != fn\n \n-    def test_getparent(self, testdir):\n+    def test_patch_with_numpy_array(self, testdir):\n+        \"\"\"Test that patching with a numpy array does not raise a ValueError.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            from unittest.mock import patch\n+            import numpy as np\n+\n+            class TestClass:\n+                @patch(target='dummy.FOO', new=np.array([-5.5, 3.0]))\n+                def test_patch_with_array(self):\n+                    pass\n+            \"\"\"\n+        )\n+        result = testdir.inline_run()\n+        result.assertoutcome(passed=1)\n         modcol = testdir.getmodulecol(\n             \"\"\"\n             class TestClass(object):\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..de0cc6a 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -119,15 +119,25 @@ class TestPaste(object):\n \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n-\n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n         assert url == \"https://bpaste.net\"\n-        assert \"lexer=%s\" % lexer in data.decode()\n+        assert \"lexer=text\" in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n+    def test_create_new_paste_with_special_characters(self, pastebin, mocked_urlopen):\n+        special_contents = b\"special-characters-\\xe2\\x9c\\x94\"\n+        result = pastebin.create_new_paste(special_contents)\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 2\n+        url, data = mocked_urlopen[1]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=special-characters-\\xe2\\x9c\\x94\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..22789ea 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -687,6 +687,10 @@ class Test_genitems:\n             \"\"\"\n             def testone():\n                 pass\n+            \n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(self, arg0):\n+                pass\n \n             class TestX(object):\n                 def testmethod_one(self):\n@@ -694,6 +698,10 @@ class Test_genitems:\n \n             class TestY(TestX):\n                 pass\n+            \n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(self, arg0):\n+                pass\n         \"\"\"\n         )\n         items, reprec = testdir.inline_genitems(p)\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..2a33c7e 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,22 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    import sys\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..b6d1fb0 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -595,7 +595,18 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*testing stuff*\", \"*1 skipped*\"])\n \n-    def test_skip_no_reason(self, testdir):\n+    def test_skip_with_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_no_exec():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        # Assert the skip location is correct even with --runxfail\n+        result.stdout.fnmatch_lines([\"*test_no_exec*\", \"*unconditional skip*\", \"*1 skipped*\"])\n         testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..14dd298 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -382,7 +383,30 @@ class TestXFail:\n         \"\"\"\n         )\n \n-    def xtest_dynamic_xfail_set_during_setup(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Test to ensure dynamic xfail marks added during a test are respected as xfail.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Test to ensure dynamic xfail marks added with strict=True cause a test to fail if it passes.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..26020c8 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -514,6 +514,12 @@ class TestCaptureFixture:\n         )\n         reprec.assertoutcome(passed=1)\n \n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n+\n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..ddfdce9 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,7 +51,47 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n-def test_with_statement(caplog):\n+# Additional tests for caplog level restoration issue\n+\n+def test_caplog_level_restoration(testdir):\n+    \"\"\"Ensure the log levels set by caplog are restored after each test\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test_set_level_42(caplog):\n+            caplog.set_level(42)\n+            assert caplog.handler.level == 42\n+\n+        def test_check_restored_level(caplog):\n+            # Check if the level is restored to default\n+            assert caplog.handler.level == 0\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_caplog_multiple_level_changes(testdir):\n+    \"\"\"Test multiple log level changes within the same test to ensure it handles them correctly.\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test_multiple_level_changes(caplog):\n+            caplog.set_level(logging.WARNING)\n+            assert caplog.handler.level == logging.WARNING\n+\n+            caplog.set_level(logging.ERROR)\n+            assert caplog.handler.level == logging.ERROR\n+\n+            caplog.set_level(logging.DEBUG)\n+            assert caplog.handler.level == logging.DEBUG\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=1)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..316a961 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,8 +1,10 @@\n+\n import os\n import pprint\n import sys\n import textwrap\n from pathlib import Path\n+from _pytest.pytester import Pytester\n \n import pytest\n from _pytest.config import ExitCode\n",
  "pytest-dev__pytest-8399": "",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..4e3c95f 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,28 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    # Data preparation\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n \n-def test_ridgecv_sample_weight():\n+    # RidgeClassifierCV with 1D target\n+    y = rng.choice([-1, 1], size=n_samples)\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # RidgeClassifierCV with 2D target (for multioutput)\n+    n_targets = 3\n+    y = rng.choice([-1, 1], size=(n_samples, n_targets))\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..5ae6d94 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,19 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+import numpy as np\n+from sklearn.metrics import fowlkes_mallows_score\n+from sklearn.utils.testing import assert_all_finite\n+\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Test for integer overflow in fowlkes_mallows_score\n+    # These are constructed to create large values for pk and qk\n+    labels_true = np.array([1] * (100000) + [2] * (50000))\n+    labels_pred = np.array([1] * (75000) + [2] * (25000) + [3] * (25000))\n+\n+    # Calculate the score and ensure it's finite\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..da6e3a9 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,28 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_custom_vocabulary_without_fitting():\n+    # Test for custom vocabulary without explicit fitting\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer = CountVectorizer(vocabulary=vocab)\n+    \n+    # get_feature_names should work as vocabulary is provided\n+    feature_names = vectorizer.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+\n+    # transform should work even without prior fitting\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = vectorizer.transform(corpus)\n+    assert_equal(X.shape, (4, 9))\n \n-def test_vectorizer_max_features():\n+    # vocabulary_ should be set after transform\n+    assert_true(hasattr(vectorizer, \"vocabulary_\"))\n+    assert_equal(set(vectorizer.vocabulary_.keys()), set(vocab))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..682cf7a 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1172,8 +1172,34 @@ def test_search_cv_timing():\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+from sklearn.utils.testing import assert_true\n+from sklearn.utils.testing import assert_greater_equal\n+from sklearn.ensemble import RandomForestClassifier\n+from sklearn.datasets import load_iris\n+from sklearn.model_selection import GridSearchCV\n+import numpy as np\n+\n+def test_search_cv_refit_time():\n+    # Load dataset\n+    X, y = load_iris(return_X_y=True)\n+\n+    # Create a GridSearchCV instance\n+    grid_search = GridSearchCV(\n+        estimator=RandomForestClassifier(),\n+        param_grid={'n_estimators': [2, 3, 4, 5]},\n+        refit=True\n+    )\n+    grid_search.fit(X, y)\n \n-def test_grid_search_correct_score_results():\n+    # Assert refit_time_ is present and is a float\n+    assert_true(hasattr(grid_search, \"refit_time_\"))\n+    assert_true(isinstance(grid_search.refit_time_, float))\n+    assert_greater_equal(grid_search.refit_time_, 0, \"The refit time should be non-negative\")\n+    \n+    # Sanity check: ensure that refit_time_ is less than total fit time\n+    total_fit_time = np.sum(grid_search.cv_results_['mean_fit_time'])\n+    assert_true(grid_search.refit_time_ < total_fit_time, \n+                \"The refit time should be less than total fit time during CV.\")\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..6e73366 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -20,7 +20,8 @@ from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n-from sklearn.utils.testing import assert_warns_message\n+from sklearn.metrics import log_loss\n+from sklearn.utils.extmath import softmax\n \n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n@@ -491,8 +492,30 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n+def test_logistic_regressioncv_multinomial_predict_proba():\n+    # Test that LogisticRegressionCV uses the multinomial softmax properly\n+    X, y = make_classification(n_samples=100, n_features=20, n_classes=3, random_state=42, n_informative=10)\n+\n+    # Split data into train and test\n+    train, test = np.arange(80), np.arange(80, 100)\n+\n+    # Fit LogisticRegressionCV with multinomial\n+    clf = LogisticRegressionCV(cv=3, multi_class='multinomial', solver='lbfgs', random_state=42)\n+    clf.fit(X[train], y[train])\n+\n+    # Extract decision function and manually calculate softmax probabilities\n+    decision_function = clf.decision_function(X[test])\n+    manual_probs = softmax(decision_function)\n+\n+    # Get predicted probabilities from the model\n+    predicted_probs = clf.predict_proba(X[test])\n+\n+    # Check that the manually calculated probabilities match the model's probabilities\n+    assert_array_almost_equal(predicted_probs, manual_probs, decimal=6)\n \n-def test_multinomial_logistic_regression_string_inputs():\n+    # Check the log loss score using predicted probabilities\n+    score = log_loss(y[test], predicted_probs, labels=clf.classes_)\n+    assert_almost_equal(-clf.score(X[test], y[test]), score, decimal=6)\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..8b8b540 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,7 +167,23 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n-def test_repr():\n+from sklearn.base import BaseEstimator, clone\n+from sklearn.utils.testing import assert_raises\n+\n+class MyEstimator(BaseEstimator):\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf_cloned = clone(clf)\n+\n+    assert clf.empty is MyEstimator\n+    assert clf_cloned.empty is MyEstimator\n+\n+    # Test that cloning an estimator with a class inside doesn't raise an error\n+    assert_raises(TypeError, clone, MyEstimator(empty=BaseEstimator), safe=True)\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n     repr(my_estimator)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..4df1620 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -6,6 +6,8 @@ import numpy as np\n from scipy import linalg\n \n import pytest\n+import numpy as np\n+from sklearn.linear_model.least_angle import LassoLarsIC\n \n from sklearn.model_selection import train_test_split\n from sklearn.utils.testing import assert_equal\n@@ -23,7 +25,30 @@ from sklearn.linear_model.least_angle import _lars_path_residues\n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n \n-# TODO: use another dataset that has multiple drops\n+@pytest.mark.parametrize('copy_X_init, copy_X_fit, expected', [\n+    (True, True, True),\n+    (True, False, False),\n+    (False, True, True),\n+    (False, False, False),\n+    (True, None, True),\n+    (False, None, False),\n+])\n+def test_lasso_lars_combined_copyX_behaviour(copy_X_init, copy_X_fit, expected):\n+    \"\"\"\n+    Test interaction between __init__ and fit method copy_X parameters.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=copy_X_init, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+\n+    if copy_X_fit is not None:\n+        lasso_lars.fit(X, y, copy_X=copy_X_fit)\n+    else:\n+        lasso_lars.fit(X, y)\n+\n+    assert expected == np.array_equal(X, X_copy)\n \n \n def test_simple():\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..9db758e 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,8 +493,16 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n-\n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+def test_stratified_kfold_shuffle():\n+    # New test to ensure StratifiedKFold shuffles samples within each class\n+    # when shuffle is True and random_state is different.\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=24)\n+    test_set1 = sorted([tuple(sorted(test_idx)) for _, test_idx in kf1.split(X, y)])\n+    test_set2 = sorted([tuple(sorted(test_idx)) for _, test_idx in kf2.split(X, y)])\n+    assert test_set1 != test_set2, \"The test sets with different random states should differ when shuffle=True.\"\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..8401370 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -203,6 +203,30 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n \n+@pytest.mark.parametrize(\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # with 2 bins\n+    est = KBinsDiscretizer(n_bins=2, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_2bins, Xt.ravel())\n+\n+    # with 3 bins\n+    est = KBinsDiscretizer(n_bins=3, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_3bins, Xt.ravel())\n+    \n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n+\n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..e312fdb 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,24 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n-\n-def test_plot_tree_entropy(pyplot):\n+def test_export_text_single_feature():\n+    # Reproduce issue: Exporting text for a decision tree with a single feature\n+    X_single = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single = [-1, -1, -1, 1, 1, 1]\n+    \n+    # Train a DecisionTreeClassifier with a single feature\n+    clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf.fit(X_single, y_single)\n+    \n+    expected_report = dedent(\"\"\"\n+    |--- feature_0 <= 0.00\n+    |   |--- class: -1\n+    |--- feature_0 >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    assert export_text(clf) == expected_report\n+    assert export_text(clf, feature_names=['only_feature']) == expected_report.replace('feature_0', 'only_feature')\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..274363f 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,7 +1532,33 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('solver', ('liblinear', 'saga'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_varied_params(penalty, solver, multi_class):\n+    # Test for IndexError when refit is False for various penalties, solvers, and multi_class options\n+\n+    n_classes = 3\n+    n_features = 20\n+    X, y = make_classification(n_samples=200, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=0)\n+\n+    Cs = np.logspace(-4, 4, 3)\n+    \n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver=solver,\n+                                l1_ratios=l1_ratios, random_state=0,\n+                                multi_class=multi_class, refit=False)\n+    lrcv.fit(X, y)\n+    assert lrcv.C_.shape == (n_classes,) if multi_class != 'auto' else (1,)\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_.shape == (n_classes,) if multi_class != 'auto' else (1,)\n+    assert lrcv.coef_.shape[1] == n_features\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..eb2f3c7 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -24,10 +24,18 @@ def test_get_deps_info():\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n \n+def test_joblib_in_deps_info():\n+    deps_info = _get_deps_info()\n+    assert 'joblib' in deps_info\n+\n+def test_show_versions_includes_joblib(capsys):\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'joblib' in out\n \n def test_show_versions_with_blas(capsys):\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..f11875c 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,34 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+from sklearn.cluster import OPTICS\n+import numpy as np\n+from sklearn.utils import shuffle\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_float_min_samples():\n+    # Test OPTICS with float min_samples and ensure proper rounding\n+    rng = np.random.RandomState(42)\n+    \n+    # Create a simple dataset\n+    X = np.random.randn(100, 2)\n+\n+    # Manually set expected labels assuming the data is mostly noise for demonstration\n+    expected_labels = np.full(100, -1)  # Let's assume all data should be noise\n+\n+    # Test with min_samples as float to check if it handles correctly\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08, max_eps=20, cluster_method='xi', xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+def test_large_min_samples():\n+    # Test with a large value of min_samples to see if it handles boundary correctly\n+    rng = np.random.RandomState(42)\n+    X = np.random.randn(100, 2)\n \n-def test_extract_xi():\n+    # Set min_samples to a large float value\n+    clust = OPTICS(min_samples=0.9, min_cluster_size=0.5, max_eps=20, cluster_method='xi', xi=0.4).fit(X)\n+    # Expected labels depend on clustering behavior, but for this test, we can check no error is raised\n+    assert clust.labels_.shape[0] == X.shape[0]\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..03f494f 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -689,6 +689,37 @@ def test_sparse_precomputed():\n     except TypeError as e:\n         assert \"Sparse precomputed\" in str(e)\n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, epsilon=0.1)\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_empty_input():\n+    # Additional test case to check behavior with empty input\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix((0, 4))  # Empty sparse matrix with 4 features\n+    y_train = np.array([])  # Empty target\n+    model = svm.SVR(kernel='linear', C=316.227766017, epsilon=0.1)\n+    try:\n+        model.fit(X_train, y_train)\n+        assert not \"reached\"\n+    except ValueError as e:\n+        assert \"Found array with 0 sample(s)\" in str(e)\n+\n \n def test_linearsvc_parameters():\n     # Test possible parameter combinations in LinearSVC\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..100de5a 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -980,6 +980,19 @@ def test_repeated_cv_value_errors():\n         assert_raises(ValueError, cv, n_repeats=1.5)\n \n \n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = ('{}(n_repeats=6, n_splits=2, random_state=None)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n+\n def test_repeated_kfold_determinstic_split():\n     X = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n     random_state = 258173307\n",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..9898aec 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,28 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n-\n-def test_to_ascii():\n+def test_strip_accents_nfkd():\n+    # Test strings that are already decomposed in NFKD form\n+\n+    # Single character with combining diacritic\n+    a = 'n\\u0303'  # 'n' followed by combining tilde\n+    expected = 'n'\n+    assert strip_accents_unicode(a) == expected, f'Expected {expected} but got {strip_accents_unicode(a)}'\n+\n+    # Multiple combining marks on one character\n+    a = 'o\\u0308\\u0304'  # 'o' with combining diaeresis and macron\n+    expected = 'o'\n+    assert strip_accents_unicode(a) == expected, f'Expected {expected} but got {strip_accents_unicode(a)}'\n+\n+    # Standalone combining marks should be removed\n+    a = '\\u0300\\u0301\\u0302\\u0303'  # various combining accents\n+    expected = ''\n+    assert strip_accents_unicode(a) == expected, f'Expected {expected} but got {strip_accents_unicode(a)}'\n+\n+    # String with multiple decomposed characters\n+    a = 'n\\u0303 and a\\u0301re'\n+    expected = 'n and are'\n+    assert strip_accents_unicode(a) == expected, f'Expected {expected} but got {strip_accents_unicode(a)}'\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..f4b0464 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1520,9 +1520,109 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     )\n     X_imputed = imputer.fit_transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n+\n+def test_iterative_imputer_constant_fill_value():\n+    \"\"\"Check that the fill_value parameter is correctly applied.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+    \n+    fill_value = 100\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    \n+    # Check if the initial strategy imputer used the correct fill_value\n+    expected = np.array([[100, 2, 3, 100], [4, 100, 5, 100], [6, 7, 100, 100], [8, 9, 0, 100]])\n+    assert_array_equal(X_imputed, expected)\n+\n+def test_iterative_imputer_fill_value_with_nan():\n+    \"\"\"Check that np.nan can be used as fill_value.\"\"\"\n+    X = np.array([[np.nan, 2, 3, np.nan], [4, np.nan, 5, np.nan], [6, 7, np.nan, np.nan], [8, 9, 0, np.nan]])\n+    \n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        missing_values=np.nan,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    \n+    # Check if the initial strategy imputer used np.nan as fill_value and kept it as is\n+    assert_allclose(np.isnan(X_imputed), np.isnan(X))\n+\n+def test_iterative_imputer_fill_value_with_string():\n+    \"\"\"Check that string fill_value can be used for non-numeric data.\"\"\"\n+    X = np.array([[\"?\", \"b\", \"?\"], [\"a\", \"?\", \"c\"], [\"?\", \"b\", \"c\"]], dtype=object)\n+    \n+    fill_value = \"missing\"\n+    imputer = IterativeImputer(\n+        missing_values=\"?\",\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    \n+    # Check if the initial strategy imputer used the correct string fill_value\n+    expected = np.array([[\"missing\", \"b\", \"missing\"], [\"a\", \"missing\", \"c\"], [\"missing\", \"b\", \"c\"]], dtype=object)\n+    assert_array_equal(X_imputed, expected)\n     X_imputed = imputer.transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n \n+def test_iterative_imputer_constant_fill_value():\n+    \"\"\"Check that the fill_value parameter is correctly applied.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+    \n+    fill_value = 100\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    \n+    # Check if the initial strategy imputer used the correct fill_value\n+    expected = np.array([[100, 2, 3, 100], [4, 100, 5, 100], [6, 7, 100, 100], [8, 9, 0, 100]])\n+    assert_array_equal(X_imputed, expected)\n+\n+def test_iterative_imputer_fill_value_with_nan():\n+    \"\"\"Check that np.nan can be used as fill_value.\"\"\"\n+    X = np.array([[np.nan, 2, 3, np.nan], [4, np.nan, 5, np.nan], [6, 7, np.nan, np.nan], [8, 9, 0, np.nan]])\n+    \n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        missing_values=np.nan,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    \n+    # Check if the initial strategy imputer used np.nan as fill_value and kept it as is\n+    assert_allclose(np.isnan(X_imputed), np.isnan(X))\n+\n+def test_iterative_imputer_fill_value_with_string():\n+    \"\"\"Check that string fill_value can be used for non-numeric data.\"\"\"\n+    X = np.array([[\"?\", \"b\", \"?\"], [\"a\", \"?\", \"c\"], [\"?\", \"b\", \"c\"]], dtype=object)\n+    \n+    fill_value = \"missing\"\n+    imputer = IterativeImputer(\n+        missing_values=\"?\",\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    \n+    # Check if the initial strategy imputer used the correct string fill_value\n+    expected = np.array([[\"missing\", \"b\", \"missing\"], [\"a\", \"missing\", \"c\"], [\"missing\", \"b\", \"c\"]], dtype=object)\n+    assert_array_equal(X_imputed, expected)\n+\n \n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..07633a6 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -330,12 +330,37 @@ def test_iforest_with_n_jobs_does_not_segfault():\n def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n-    model = IsolationForest()\n-    model.fit(X, y)\n+from sklearn.ensemble import IsolationForest\n+import pytest\n+import numpy as np\n+import warnings\n \n-    warn_msg = (\n-        \"Attribute `base_estimator_` was deprecated in version 1.2 and \"\n-        \"will be removed in 1.4. Use `estimator_` instead.\"\n-    )\n-    with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+\n+    Feature names are required for consistency checks during scoring.\n+\n+    Non-regression test for Issue #25844\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(0)\n+\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+# Verify that warning about feature names is not raised\n+def test_iforest_no_unexpected_warnings():\n+    \"\"\"Ensure no warnings about invalid feature names are raised.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    X = pd.DataFrame({\"a\": [-1.1, 0.3, 0.5, 100]})\n+    clf = IsolationForest(random_state=0, contamination=0.05)\n+\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        clf.fit(X)\n+        assert all(not issubclass(warning.category, UserWarning) for warning in w), \\\n+            \"Unexpected warning about feature names found\"\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..fcc438e 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -13,6 +13,44 @@ from sklearn.utils._testing import assert_array_equal\n from sklearn.utils._testing import assert_allclose_dense_sparse\n from sklearn.utils._testing import assert_almost_equal\n \n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for #26306.\n+    \"\"\"\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+    \n+    # Test case with 'remainder' as an estimator\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    # Test with non-pandas output\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+    # Test case with explicit transformer for all columns\n+    ct_explicit = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        (VarianceThreshold(), make_column_selector(dtype_exclude=bool)),\n+        verbose_feature_names_out=False,\n+    )\n+    ct_explicit.set_output(transform=\"pandas\")\n+    out_explicit = ct_explicit.fit_transform(df)\n+    pd.testing.assert_frame_equal(out_explicit, df)\n+\n+    # Test with empty DataFrame to ensure no failure\n+    df_empty = pd.DataFrame({\"a\": [], \"b\": []})\n+    ct.set_output(transform=\"pandas\")\n+    out_empty = ct.fit_transform(df_empty)\n+    pd.testing.assert_frame_equal(out_empty, df_empty)\n+\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.compose import (\n     ColumnTransformer,\n@@ -21,6 +59,10 @@ from sklearn.compose import (\n )\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n+from sklearn.feature_selection import VarianceThreshold\n+import pytest\n+import pandas as pd\n+import numpy as np\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n \n \n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..75b7a97 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -11,6 +12,7 @@ from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_allclose\n from sklearn.utils.testing import assert_almost_equal\n from sklearn.utils.testing import assert_raises\n+from sklearn.utils import check_random_state\n from sklearn.utils.testing import assert_raises_regex\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import assert_warns_message\n",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..f62def7 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,20 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_class_return(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints.Square\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      None\\n' not in context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..bfc28a6 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -6,10 +7,27 @@ import re\n import subprocess\n from subprocess import PIPE, CalledProcessError\n \n-import pytest\n+import collections\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n from sphinx.util.osutil import cd\n \n+def test_Catalog_deduplication_of_locations():\n+    catalog = Catalog()\n+    # Add the same message with duplicate locations\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file', 10))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file', 10))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/another', 20))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file', 10))  # Intentionally repeated\n+\n+    # Final message locations should have no duplicates\n+    message = next(iter(catalog))\n+    assert message.text == 'duplicate_test'\n+    assert collections.Counter(message.locations) == collections.Counter([\n+        ('/path/to/file', 10),\n+        ('/path/to/another', 20)\n+    ])\n+\n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n def test_build_gettext(app):\n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..3769db2 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -337,6 +337,19 @@ def test_get_toctree_for_includehidden(app):\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n \n+@pytest.mark.sphinx('xml', testroot='toctree-indices-and-tables')\n+def test_toctree_with_indices_and_tables(app):\n+    app.build()\n+    toctree = app.env.tocs['index']\n+    assert_node(toctree,\n+                [bullet_list, ([list_item, (compact_paragraph,\n+                                            [bullet_list, (addnodes.toctree,\n+                                                           addnodes.toctree)])])])\n+    assert_node(toctree[0][1][1], addnodes.toctree,\n+                caption=\"Indices and tables\", glob=False, hidden=False,\n+                titlesonly=False, maxdepth=1,\n+                entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')])\n+\n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n@@ -345,4 +358,4 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n \n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..606d470 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -142,6 +142,29 @@ def test_glossary(app):\n \n     # index\n     objects = list(app.env.get_domain(\"std\").get_objects())\n+\n+    # Testing mixed-case terms\n+    text_mixed_case = (\".. glossary::\\n\"\n+                       \"\\n\"\n+                       \"   MySQL\\n\"\n+                       \"       description for MySQL\\n\"\n+                       \"\\n\"\n+                       \"   mysql\\n\"\n+                       \"       description for mysql\\n\")\n+    \n+    doctree_mixed_case = restructuredtext.parse(app, text_mixed_case)\n+    assert_node(doctree_mixed_case, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree_mixed_case[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree_mixed_case[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n     assert (\"term1\", \"term1\", \"term\", \"index\", \"term-term1\", -1) in objects\n     assert (\"term2\", \"term2\", \"term\", \"index\", \"term-term2\", -1) in objects\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..3b4cf78 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,18 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_from_str_positional_only_with_defaults():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..f85c67f 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -11,6 +12,7 @@\n import abc\n import sys\n from importlib import import_module\n+from typing import Generic, TypeVar\n \n import pytest\n \n@@ -52,7 +54,20 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+def test_generic_mock():\n+    T = TypeVar('T')\n+\n+    class GenericClass(Generic[T]):\n+        def method(self, value: T) -> T:\n+            return value\n+\n+    class SubClass(GenericClass[int]):\n+        \"\"\"docstring of SubClass\"\"\"\n+\n+    obj = SubClass()\n+    assert SubClass.__doc__ == \"docstring of SubClass\"\n+    assert isinstance(obj, SubClass)\n+    assert obj.method(10) == 10\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..23139e5 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -165,11 +166,47 @@ class SkipMemberTest(TestCase):\n                         SampleClass.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_doc(self):\n+        def simple_decorator(f):\n+            \"\"\" A simple decorator that does nothing, for tests to use. \"\"\"\n+            @functools.wraps(f)\n+            def wrapper(*args, **kwargs):\n+                return f(*args, **kwargs)\n+            return wrapper\n+\n+        class DecoratedInitClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"This is a decorated __init__ method.\"\"\"\n+                pass\n+\n+        cfg = Config(napoleon_include_init_with_doc=True)\n+        app = mock.Mock(config=cfg)\n+        self.assertIs(_skip_member(app, 'class', '__init__', DecoratedInitClass.__init__, False, None), False)\n+\n     def test_class_special_undoc(self):\n         self.assertSkip('class', '__special_undoc__',\n                         SampleClass.__special_undoc__, True,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_doc(self):\n+        def simple_decorator(f):\n+            \"\"\" A simple decorator that does nothing, for tests to use. \"\"\"\n+            @functools.wraps(f)\n+            def wrapper(*args, **kwargs):\n+                return f(*args, **kwargs)\n+            return wrapper\n+\n+        class DecoratedInitClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"This is a decorated __init__ method.\"\"\"\n+                pass\n+\n+        cfg = Config(napoleon_include_init_with_doc=True)\n+        app = mock.Mock(config=cfg)\n+        self.assertIs(_skip_member(app, 'class', '__init__', DecoratedInitClass.__init__, False, None), False)\n+\n     def test_exception_private_doc(self):\n         self.assertSkip('exception', '_private_doc',\n                         SampleError._private_doc, False,\n@@ -185,6 +222,24 @@ class SkipMemberTest(TestCase):\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_doc(self):\n+        def simple_decorator(f):\n+            \"\"\" A simple decorator that does nothing, for tests to use. \"\"\"\n+            @functools.wraps(f)\n+            def wrapper(*args, **kwargs):\n+                return f(*args, **kwargs)\n+            return wrapper\n+\n+        class DecoratedInitClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"This is a decorated __init__ method.\"\"\"\n+                pass\n+\n+        cfg = Config(napoleon_include_init_with_doc=True)\n+        app = mock.Mock(config=cfg)\n+        self.assertIs(_skip_member(app, 'class', '__init__', DecoratedInitClass.__init__, False, None), False)\n+\n     def test_exception_special_undoc(self):\n         self.assertSkip('exception', '__special_undoc__',\n                         SampleError.__special_undoc__, True,\n",
  "sphinx-doc__sphinx-7985": "",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..25cccb5 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -13,8 +14,61 @@ import pytest\n from test_ext_autodoc import do_autodoc\n \n \n+import pytest\n+from test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_member(app):\n+    \"\"\"Test if specific private members can be documented.\"\"\"\n+    app.config.autoclass_content = 'class'\n+    options = {\n+        \"members\": None,\n+        \"private-members\": \"_specific_private_func\"\n+    }\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _specific_private_func(param1)',\n+        '   :module: target.private',\n+        '',\n+        '   _specific_private_func is a docstring.',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_private_field(app):\n+def test_multiple_specific_private_members(app):\n+    \"\"\"Test if multiple specific private members can be documented.\"\"\"\n+    app.config.autoclass_content = 'class'\n+    options = {\n+        \"members\": None,\n+        \"private-members\": \"_private_func1, _private_func2\"\n+    }\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_func1(param)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_func1 is a docstring.',\n+        '',\n+        '   :meta private:',\n+        '',\n+        '.. py:function:: _private_func2(param)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_func2 is a docstring.',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..c41bcac 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,38 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+from babel.messages import pofile\n+from sphinx import locale\n+from sphinx.testing.util import SphinxTestApp\n+import pytest\n \n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+def test_locale_override(make_app, app_params, sphinx_test_tempdir):\n+    \"\"\"Test that custom locale translations are correctly applied.\"\"\"\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # Prepare a custom catalog for Danish language\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        kwargs['confoverrides'] = {'language': 'da'}\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar' in content\n+        assert 'Whatever' in content\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 7842f56..182f7dd 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -107,6 +107,44 @@ def test_anchors_ignored(app, status, warning):\n     assert not content\n \n \n+\n+import http.server\n+import threading\n+from unittest import mock\n+import pytest\n+\n+class HttpServerThread(threading.Thread):\n+    def __init__(self, handler, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.server = http.server.HTTPServer((\"localhost\", 7777), handler)\n+\n+    def run(self):\n+        self.server.serve_forever(poll_interval=0.01)\n+\n+    def terminate(self):\n+        self.server.shutdown()\n+        self.server.server_close()\n+        self.join()\n+\n+class InternalServerErrorHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        self.send_error(500, \"Internal Server Error\")\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_raises_for_invalid_status(app, status, warning):\n+    server_thread = HttpServerThread(InternalServerErrorHandler, daemon=True)\n+    server_thread.start()\n+    try:\n+        app.builder.build_all()\n+    finally:\n+        server_thread.terminate()\n+    content = (app.outdir / 'output.txt').read_text()\n+    assert content == (\n+        \"index.rst:1: [broken] http://localhost:7777/#anchor: \"\n+        \"500 Server Error: Internal Server Error \"\n+        \"for url: http://localhost:7777/\\n\"\n+    )\n+\n @pytest.mark.sphinx(\n     'linkcheck', testroot='linkcheck', freshenv=True,\n     confoverrides={'linkcheck_auth': [\n@@ -159,4 +197,11 @@ def test_linkcheck_request_headers(app, status, warning):\n                 assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n                 assert headers[\"X-Secret\"] == \"open sesami\"\n             else:\n-                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-8459": "",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..3447559 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,13 +372,35 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import json\n+import pytest\n+import http.server\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util import requests\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_get_fallback_on_too_many_redirects(app: SphinxTestApp):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n         \"code\": 0,\n-        \"status\": \"broken\",\n+        \"status\": \"working\",\n         \"filename\": \"index.rst\",\n         \"lineno\": 1,\n-        \"uri\": \"https://localhost:7777/\",\n-        \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+        \"uri\": \"http://localhost:7777/\",\n+        \"info\": \"\",\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..af4a659 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -60,8 +60,21 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/c/' in stuff\n     assert 'http://foobar/cpp/' in stuff\n \n+import pytest\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+\n+    # Ensure the module page is not created for epub when viewcode_enable_epub is False\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n \n-@pytest.mark.sphinx(testroot='ext-viewcode-find')\n+    # Ensure the module page is created for epub when viewcode_enable_epub is True\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n         if modname == 'not_a_package':\n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..a480cff 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,15 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert inspect.object_description(MyEnum.ValueB) == \"MyEnum.ValueB\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..98f96f1 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -10,6 +10,7 @@\n \n import time\n from io import StringIO\n+import sys\n \n import pytest\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..4c7bccb 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -50,6 +50,7 @@ from sphinx.pycode import ast\n     (\"{1, 2, 3}\", \"{1, 2, 3}\"),                 # Set\n     (\"a - b\", \"a - b\"),                         # Sub\n     (\"'str'\", \"'str'\"),                         # Str\n+    (\"(1,)\", \"(1,)\"),                           # Tuple (single element)\n     (\"+ a\", \"+ a\"),                             # UAdd\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..e2163ae 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,33 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_pyproperty_type_annotation_cross_reference(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: x\\n\"\n+            \"   .. attribute:: y\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_name, \"Point\"])],\n+                                  desc_content)]))\n+    \n+    # Assert that the cross-reference is created for Point in the property's type annotation\n+    assert_node(doctree[2][1][0], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, \": \",\n+                                                      [pending_xref, \"Point\"]])],\n+                                   [desc_content, ()]))\n+    \n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..67afaad 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -755,8 +755,9 @@ def test_pymethod_options(app):\n     assert domain.objects['Class.meth4'] == ('index', 'Class.meth4', 'method', False)\n \n     # :property:\n+    # Update the test for :property: to expect no parentheses\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..acc9c74 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -255,7 +255,42 @@ def test_transform():\n         Point(5, 6)\n \n \n-def test_concyclic_doctest_bug():\n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_mismatched_dimensions():\n+    # Test Points in 2D and 3D\n+    p2d = Point2D(1, 2)\n+    p3d = Point3D(2, 3, 4)\n+    assert p2d.distance(p3d) == sqrt((1 - 2)**2 + (2 - 3)**2 + 4**2)\n+    # Test Points in 3D and 2D\n+    assert p3d.distance(p2d) == sqrt((2 - 1)**2 + (3 - 2)**2 + 4**2)\n+\n+    # Test Points in same dimension\n+    assert p2d.distance(Point2D(4, 6)) == sqrt((1 - 4)**2 + (2 - 6)**2)\n+    assert p3d.distance(Point3D(5, 6, 7)) == sqrt((2 - 5)**2 + (3 - 6)**2 + (4 - 7)**2)\n+\n+    # Test same point distance\n+    assert p2d.distance(p2d) == 0\n+    assert p3d.distance(p3d) == 0\n+\n+    # Test 1D and 3D Point\n+    p1d = Point(3,)\n+    assert p1d.distance(p3d) == sqrt((3 - 2)**2 + 3**2 + 4**2)\n+\n+    # Test 1D and 2D Point\n+    assert p1d.distance(p2d) == sqrt((3 - 1)**2 + 2**2)\n+\n+def test_distance_with_negative_coordinates():\n+    # Test Points with negative coordinates\n+    p1 = Point2D(-1, -2)\n+    p2 = Point3D(-3, -4, -5)\n+    assert p1.distance(p2) == sqrt(((-1) - (-3))**2 + ((-2) - (-4))**2 + (-5)**2)\n     p1, p2 = Point(-1, 0), Point(1, 0)\n     p3, p4 = Point(0, 1), Point(-1, 2)\n     assert Point.is_concyclic(p1, p2, p3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..860cb6e 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,16 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+    assert f(f(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    assert f(g(2)).evalf() == Float(16)\n+    assert f(g(f(2))).evalf() == Float(64)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..0243004 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -72,7 +72,15 @@ def test_ZeroMatrix_doit():\n     assert isinstance(Znn.doit().rows, Mul)\n \n \n-def test_Identity():\n+def test_issue_identity_matrix_sum():\n+    from sympy import MatrixSymbol, Identity, Symbol, Sum, symbols\n+\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+\n+    # The total sum of the elements of an identity matrix should be 'n'\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     A = MatrixSymbol('A', n, m)\n     In = Identity(n)\n     Im = Identity(m)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..2642998 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -332,6 +332,24 @@ def test_args():\n     assert p._cyclic_form is None\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n+    \n+    # Test for non-disjoint cycles, should resolve to identity\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])\n+\n+    # Additional test cases for edge cases and non-disjoint cycles\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[1, 2], [0, 1]]) == Permutation([0, 1, 2])\n+    assert Permutation([[1, 2], [2, 3]]) == Permutation([0, 1, 3, 2])\n+    \n+    # Test that identity cycle correctly returns identity permutation\n+    assert Permutation([]) == Permutation([0])\n+    assert Permutation([[]]) == Permutation([0])\n+    assert Permutation([[0], [1], [2]]) == Permutation([0, 1, 2])\n+\n+    # Test with non-disjoint cycles that resolve to a permutation other than identity\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[0, 1], [0, 2, 3]]) == Permutation([0, 3, 1, 2])\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n         Permutation(((0, ), [1]))\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..9515072 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -489,8 +489,16 @@ def test_errors():\n     raises(ShapeError,\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n-\n-def test_len():\n+def test_hstack_vstack_sparse():\n+    # Test for SparseMatrix.hstack with 0 x n matrices\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    result = SparseMatrix.hstack(*sparse_matrices)\n+    assert result.shape == (0, 6)\n+\n+    # Test for SparseMatrix.vstack with n x 0 matrices\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    result = SparseMatrix.vstack(*sparse_matrices)\n+    assert result.shape == (6, 0)\n     assert not SparseMatrix()\n     assert SparseMatrix() == SparseMatrix([])\n     assert SparseMatrix() == SparseMatrix([[]])\n",
  "sympy__sympy-13372": "",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..075b135 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -203,6 +203,13 @@ def test_tanh():\n \n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n+def test_coth_log_tan_subs():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # Test the original error triggering substitutions\n+    for value in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        assert e.subs(x, value) is not None\n+\n \n def test_tanh_series():\n     x = Symbol('x')\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..a8e444f 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -155,7 +155,26 @@ def test_difference():\n         Union(Interval(0, 1, False, True), Interval(1, 2, True, False))\n \n     assert FiniteSet(1, 2, 3) - FiniteSet(2) == FiniteSet(1, 3)\n-    assert FiniteSet('ham', 'eggs') - FiniteSet('eggs') == FiniteSet('ham')\n+from sympy import Symbol, FiniteSet, Interval, Complement\n+\n+x, y = Symbol('x'), Symbol('y')\n+\n+def test_issue_12712():\n+    # Original test case\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 10))\n+           \n+    # Test cases for a mix of symbols and floats\n+    assert Complement(FiniteSet(x, 2.5, -5, y), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 10))\n+           \n+    # Test cases for full numeric input\n+    assert Complement(FiniteSet(1, 2, 3.5), Interval(0, 10)) == \\\n+           FiniteSet(1)\n+           \n+    # Test cases with additional elements and larger intervals\n+    assert Complement(FiniteSet(x, y, 2, 15, 30), Interval(-10, 20)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 20))\n     assert FiniteSet(1, 2, 3, 4) - Interval(2, 10, True, False) == \\\n         FiniteSet(1, 2)\n     assert FiniteSet(1, 2, 3, 4) - S.EmptySet == FiniteSet(1, 2, 3, 4)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..2de8ae2 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,8 +201,50 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n-    m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n+def test_issue_13643_col_insert():\n+    # Recreate the scenario described in the issue\n+    M = Matrix.eye(6)\n+    V = 2 * Matrix.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+def test_col_insert_varied():\n+    # Test with different sizes of matrices\n+    M = Matrix.eye(3)\n+    V = Matrix([[5, 5], [5, 5], [5, 5]])\n+    result = M.col_insert(1, V)\n+    expected = Matrix([\n+        [1, 5, 5, 0],\n+        [0, 5, 5, 1],\n+        [0, 5, 5, 0]\n+    ])\n+    assert result == expected\n+\n+    # Test inserting into the first column\n+    result = M.col_insert(0, V)\n+    expected = Matrix([\n+        [5, 5, 1, 0],\n+        [5, 5, 0, 1],\n+        [5, 5, 0, 0]\n+    ])\n+    assert result == expected\n+\n+    # Test inserting into the last column\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 5, 5],\n+        [0, 1, 5, 5],\n+        [0, 0, 5, 5]\n+    ])\n+    assert result == expected\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n     assert m.extract(range(4), range(3)) == m\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..70bc3e6 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -678,7 +678,32 @@ def test_Poly_mul():\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n-def test_Poly_sqr():\n+def test_issue_13079():\n+    x = symbols('x')\n+    \n+    # Existing test cases from the original test patch\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n+    # Additional test cases to cover more scenarios\n+    assert Poly(x + 1)*x == Poly(x**2 + x, x, domain='ZZ')\n+    assert x*Poly(x + 1) == Poly(x**2 + x, x, domain='ZZ')\n+    assert Poly(2*x)*Poly(x) == Poly(2*x**2, x, domain='ZZ')\n+    assert Poly(x)*Poly(2*x) == Poly(2*x**2, x, domain='ZZ')\n+\n+    # Checking with symbolic coefficients\n+    y = symbols('y')\n+    assert x*Poly(y, x) == Poly(y*x, x, domain='ZZ[y]')\n+    assert Poly(y, x)*x == Poly(y*x, x, domain='ZZ[y]')\n+\n+    # Ensure multiplication compatibility with other numbers and S\n+    assert Poly(x)*(-1) == Poly(-x, x, domain='ZZ')\n+    assert (-1)*Poly(x) == Poly(-x, x, domain='ZZ')\n+    assert Poly(x)*S(-1) == Poly(-x, x, domain='ZZ')\n+    assert S(-1)*Poly(x) == Poly(-x, x, domain='ZZ')\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..d256f9e 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,25 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    # Test with custom mul_symbol (thin space)\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    # Test with another custom symbol (explicitly entered thin space via escape)\n+    assert latex(3*x + y*2, mul_symbol='\\\\\\\\,') == r\"3\\\\,x + y\\\\,2\"\n+\n+def test_latex_mul_symbol_edge_cases():\n+    # Test with mul_symbol set to None\n+    assert latex(2*x*y, mul_symbol=None) == \"2 x y\"\n+    # Test with mul_symbol set to an invalid value\n+    try:\n+        latex(2*x*y, mul_symbol='invalid_symbol')\n+    except KeyError:\n+        # Expecting a KeyError for using an invalid symbol\n+        invalid_symbol_error = True\n+    else:\n+        invalid_symbol_error = False\n+    assert invalid_symbol_error, \"Expected KeyError for invalid mul_symbol\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..8f58112 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -313,8 +313,30 @@ def test_as_mutable():\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n \n+from sympy import Matrix, symbols\n \n def test_determinant():\n+    # Additional tests for issue 13835\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    \n+    # Check matrices of various sizes\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    # The result for n=3 is simplified to check if complex symbolic math is handled\n+    assert M(3).det() == 0  \n+    assert M(4).det() == 0\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    # Checking larger matrices\n+    assert M(7).det() == 0\n+    assert M(8).det() == 0\n+\n+    # Re-run original test cases to ensure they still pass\n+    assert Matrix(( (-3,  2),\n+                    ( 8, -5) )).det(method=\"bareiss\") == -1\n+    assert Matrix(( (x,   1),\n+                    (y, 2*y) )).det(method=\"bareiss\") == 2*x*y - y\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert (\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..78ae3a0 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -156,8 +156,79 @@ def test_characteristic_function():\n     assert cf(0) == 1\n     assert simplify(cf(1)) == S(25)/26 + 5*I/26\n \n+def test_precomputed_cdf_issue():\n+    from sympy import S, Piecewise, asin, uppergamma, lowergamma, exp, And, sqrt, pi, gamma, hyper, erfc\n+\n+    # Test case for Arcsin distribution\n+    a, b = S(0), S(3)\n+    X = Arcsin(\"x\", a, b)\n+    cdf_expr = Piecewise((0, a > x), (2 * asin(sqrt((-a + x)/(-a + b)))/pi, b >= x), (1, True))\n+    assert cdf(X)(1) == cdf_expr.subs(x, 1)\n+\n+    # Test case for Dagum distribution\n+    p, a, b = S(1)/3, S(1)/5, 2\n+    X = Dagum(\"x\", p, a, b)\n+    cdf_expr = Piecewise(((1 + (x/b)**(-a))**(-p), x >= 0), (0, True))\n+    assert cdf(X)(3) == cdf_expr.subs(x, 3)\n+\n+    # Test case for Erlang distribution\n+    k, l = 1, 1\n+    X = Erlang(\"x\", k, l)\n+    cdf_expr = Piecewise((lowergamma(k, l*x)/gamma(k), x > 0), (0, True))\n+    assert cdf(X)(1) == cdf_expr.subs(x, 1)\n+\n+    # Test case for Frechet distribution\n+    a, s, m = S(4)/3, 1, 2\n+    X = Frechet(\"x\", a, s, m)\n+    cdf_expr = Piecewise((exp(-((-m + x)/s)**(-a)), m <= x), (0, True))\n+    assert cdf(X)(3) == cdf_expr.subs(x, 3)\n+\n+    # Test case for Gamma distribution\n+    k, theta = 0.1, 2\n+    X = Gamma(\"x\", k, theta)\n+    cdf_expr = Piecewise((lowergamma(k, x/theta)/gamma(k), x > 0), (0, True))\n+    assert cdf(X)(3) == cdf_expr.subs(x, 3)\n+\n+    # Test case for GammaInverse distribution\n+    a, b = S(5)/7, 2\n+    X = GammaInverse(\"x\", a, b)\n+    cdf_expr = Piecewise((uppergamma(a, b/x)/gamma(a), x > 0), (0, True))\n+    assert cdf(X)(3) == cdf_expr.subs(x, 3)\n \n-def test_sample():\n+    # Test case for Kumaraswamy distribution\n+    a, b = S(1)/123, 5\n+    X = Kumaraswamy(\"x\", a, b)\n+    cdf_expr = Piecewise((0, x < 0), (-(-x**a + 1)**b + 1, x <= 1), (1, True))\n+    assert cdf(X)(S(1)/3) == cdf_expr.subs(x, S(1)/3)\n+\n+    # Test case for Laplace distribution\n+    mu, b = 2, 3\n+    X = Laplace(\"x\", mu, b)\n+    cdf_expr = Piecewise((exp((x - mu)/b)/2, mu > x), (-exp((-x + mu)/b)/2 + 1, True))\n+    assert cdf(X)(5) == cdf_expr.subs(x, 5)\n+\n+    # Test case for Logistic distribution\n+    mu, s = 1, 0.1\n+    X = Logistic(\"x\", mu, s)\n+    cdf_expr = 1/(exp((mu - x)/s) + 1)\n+    assert cdf(X)(2) == cdf_expr.subs(x, 2)\n+\n+    # Test case for Nakagami distribution\n+    mu, omega = S(7)/3, 1\n+    X = Nakagami(\"x\", mu, omega)\n+    cdf_expr = Piecewise((lowergamma(mu, mu*x**2/omega)/gamma(mu), x > 0), (0, True))\n+    assert cdf(X)(2) == cdf_expr.subs(x, 2)\n+\n+    # Test case for StudentT distribution\n+    nu = 10\n+    X = StudentT(\"x\", nu)\n+    cdf_expr = 1/2 + x*gamma(nu/2 + 1/2)*hyper((1/2, nu/2 + 1/2), (3/2,), -x**2/nu)/(sqrt(pi)*sqrt(nu)*gamma(nu/2))\n+    assert cdf(X)(2) == cdf_expr.subs(x, 2)\n+\n+    # Test case for UniformSum distribution\n+    X = UniformSum(\"x\", 5)\n+    # No straightforward symbolic expression is possible, verify numerically\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x, a=0.1, b=4.9)\n     z = Symbol('z')\n     Z = ContinuousRV(z, exp(-z), set=Interval(0, oo))\n     assert sample(Z) in Z.pspace.domain.set\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..5c7d97d 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -49,7 +49,32 @@ def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n \n-def test_issue_5923():\n+from sympy import Symbol\n+from sympy.physics.quantum import TensorProduct as TP\n+from sympy.physics.quantum import tensor_product_simp as tps\n+from sympy.physics.paulialgebra import Pauli\n+\n+def test_tensor_product_powers():\n+    A, B, C, D = symbols('A B C D', commutative=False)\n+    x = Symbol('x')\n+\n+    # Test power expressions\n+    assert tps(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tps(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+    assert tps(x*(TP(A, B)**2)*TP(C, D)) == x*TP(A**2*C, B**2*D)\n+    assert tps(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n+\n+    # Additional specific tests\n+    t1 = TP(1, 1) * TP(1, 1)\n+    assert tps(t1) == TP(1, 1)\n+\n+    a = Symbol('a', commutative=False)\n+    assert tps(TP(1, 1) * TP(1, a)).subs(a, 1) == TP(1, 1)\n+\n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tps(t2) == TP(1, 1)\n+\n+    assert tps(TP(1, Pauli(3)) * TP(1, a)).subs(a, Pauli(3)) == TP(1, 1)\n     # most of the issue regarding sympification of args has been handled\n     # and is tested internally by the use of args_cnc through the quantum\n     # module, but the following is a test from the issue that used to raise.\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..067d625 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -80,6 +80,13 @@ def test_python_keyword_function_name_escaping():\n \n \n def test_python_relational():\n+    # Verify that Eq(x, y) correctly generates symbols for x and y\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    # Verify that Ne with division and exponents accounts for both possible outputs\n+    assert python(Ne(x/(y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"\n+    ]\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..34f2f5e 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,18 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+from sympy.physics.vector import ReferenceFrame\n+from sympy import symbols\n+\n+def test_issue_zero_multiplication():\n+    N = ReferenceFrame('N')\n+    # Test case derived directly from the issue\n+    assert sum([N.x, (0 * N.x)]) == N.x\n+    # Additional test cases\n+    assert sum([N.x, N.y, (0 * N.z)]) == N.x + N.y\n+    assert sum([(0 * N.x), (0 * N.y), (0 * N.z)]) == 0 * N.x  # Should be a zero vector\n+    assert N.x + (0 * N.y) == N.x  # Simplified addition with zero\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..9f3727f 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -143,6 +144,24 @@ def test_mpmath_lambda():\n     raises(TypeError, lambda: f(x))\n            # if this succeeds, it can't be a mpmath function\n \n+@conserve_mpmath_dps\n+def test_mpmath_rational_lambdify():\n+    from sympy.functions.combinatorial.numbers import rf\n+    import inspect\n+\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+\n+    # Verify that the function expression uses `mpmath.mpf`\n+    source = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source\n+\n+    # Test precision by solving equation using nsolve\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    assert abs(result - (77 + Rational(1, 3)).evalf(64)) < 1e-60\n+\n \n @conserve_mpmath_dps\n def test_number_precision():\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..a6b5f5a 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -79,8 +80,23 @@ def test_ndim_array_initiation():\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n+from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n+from sympy import Symbol\n+\n+def test_rank_zero_array_len():\n+    # Test case for rank-0 array (scalar)\n+    rank_zero_array = ImmutableDenseNDimArray(42)\n+    assert len(rank_zero_array) == 1  # Expected behavior after fix\n+    assert rank_zero_array[()] == 42\n+    raises(ValueError, lambda: rank_zero_array[0])\n \n-def test_reshape():\n+def test_rank_zero_array_with_symbol():\n+    # Test case for rank-0 array with a symbol\n+    x = Symbol('x')\n+    rank_zero_array = ImmutableDenseNDimArray(x)\n+    assert len(rank_zero_array) == 1  # Expected behavior after fix\n+    assert rank_zero_array[()] == x\n+    raises(ValueError, lambda: rank_zero_array[0])\n     array = ImmutableDenseNDimArray(range(50), 50)\n     assert array.shape == (50,)\n     assert array.rank() == 1\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7d51f3f 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -23,6 +24,15 @@ def test_Rational():\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n+def test_Max():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(5, x, y)) == \"Max[5, x, y]\"\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    # Edge case: test with a single element\n+    assert mcode(Max(x)) == \"Max[x]\"\n+    # Test with constants only\n+    assert mcode(Max(3, 2, 5)) == \"Max[3, 2, 5]\"\n+\n \n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..e3e2164 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,39 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_matrix_sign_issue():\n+    \"\"\"Test for the correct sign in the rotation matrix.\"\"\"\n+    from sympy import symbols, cos, sin, trigsimp\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix = Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n+def test_quaternion_rotation_matrix_no_rotation():\n+    \"\"\"Test that a quaternion representing no rotation returns identity matrix.\"\"\"\n+    q = Quaternion(1, 0, 0, 0)\n+    expected_matrix = Matrix([\n+        [1, 0, 0],\n+        [0, 1, 0],\n+        [0, 0, 1]\n+    ])\n+    assert q.to_rotation_matrix() == expected_matrix\n+\n+def test_quaternion_rotation_matrix_pi_rotation():\n+    \"\"\"Test for a quaternion representing 180 degrees rotation around the x-axis.\"\"\"\n+    from sympy import pi\n+    q = Quaternion(0, 1, 0, 0)\n+    expected_matrix = Matrix([\n+        [1,  0,  0],\n+        [0, -1,  0],\n+        [0,  0, -1]\n+    ])\n+    assert q.to_rotation_matrix() == expected_matrix\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +152,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..a197e63 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,19 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # additional tests for issue 15493\n+    k = Symbol('k', integer=True)\n+    assert Mod(3*k, 2) == Mod(k, 2)\n+    assert Mod(6*k, 3) == 0\n+    assert Mod(9*k, 3) == 0\n+    assert Mod(15*k, 5) == 0\n+    assert Mod(9*k, 2) == Mod(k, 2)\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..93279e2 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,6 +1986,14 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+def test_issue_15873():\n+    # Importing necessary functions and classes\n+    from sympy import I, simplify\n+\n+    # Issue 15873: Test case for complex integer is_zero behavior\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None  # Initially, is_zero is undecided\n+    assert simplify(e).is_zero  # After simplification, it should be True\n \n def test_issue_14392():\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n@@ -1993,4 +2001,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..80f3d7f 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -504,6 +504,33 @@ def test_posify():\n     orig = [x, n, p]\n     modified, reps = posify(orig)\n     assert str(modified) == '[_x, n, p]'\n+\n+    # Additional test cases for issue with posify not preserving assumptions\n+    # Test preserving 'finite' assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['infinite'] == False\n+\n+    # Test preserving 'integer' assumption\n+    ki = Symbol('ki', integer=True)\n+    eq, rep = posify(ki)\n+    assert eq.assumptions0['integer'] == True\n+\n+    # Test preserving 'rational' assumption\n+    kr = Symbol('kr', rational=True)\n+    eq, rep = posify(kr)\n+    assert eq.assumptions0['rational'] == True\n+\n+    # Test preserving 'even' assumption\n+    ke = Symbol('ke', even=True)\n+    eq, rep = posify(ke)\n+    assert eq.assumptions0['even'] == True\n+\n+    # Test preserving 'odd' assumption\n+    ko = Symbol('ko', odd=True)\n+    eq, rep = posify(ko)\n+    assert eq.assumptions0['odd'] == True\n     assert [w.subs(reps) for w in modified] == orig\n \n     assert str(Integral(posify(1/x + y)[0], (y, 1, 3)).expand()) == \\\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..fa0b9fc 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,8 +37,14 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n-\n-def test_MpmathPrinter():\n+def test_indexed_printing():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    q = IndexedBase(\"q\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(q[x]) == 'q[x]'\n+    assert prntr.doprint(q[x, y, z]) == 'q[x, y, z]'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..908fabc 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -48,7 +48,21 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n-def test_cython_wrapper_outarg():\n+def test_autowrap_cython_unused_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    # Define a MatrixSymbol 'x' which is not used in the expression\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # A constant expression that does not use 'x'\n+\n+    # Autowrap the expression using 'cython' backend\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    # Test if the generated function returns 1.0 as expected\n+    result = f(np.array([[1.0, 2.0]]))\n+    assert result == 1.0, f\"Unexpected result: {result}\"\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..38a0452 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -237,8 +237,10 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(3, (8, 3)) == 1\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n+from sympy.crypto.crypto import encode_morse, decode_morse\n \n def test_encode_morse():\n+    # Original test cases\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n     assert encode_morse('SMS\\n') == '...|--|...||'\n@@ -248,6 +250,8 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n+    # New test case to specifically test the issue with \"1\"\n+    assert encode_morse('1') == '.----'\n \n def test_decode_morse():\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..fb3fd19 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..e900069 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -91,8 +92,16 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    assert 5 * p4 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n+    # Test scalar multiplication order\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympy.sympify(2.0)\n+    assert point1 + point2 * scalar == point1 + scalar * point2\n+    assert point1 + point2 * scalar == Point(2, 2)\n+\n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n     # Point differences should be simplified\n@@ -168,8 +177,15 @@ def test_point3D():\n \n \n     assert p4 * 5 == Point3D(5, 5, 5)\n+    assert 5 * p4 == Point3D(5, 5, 5)\n     assert p4 / 5 == Point3D(0.2, 0.2, 0.2)\n \n+    # Test scalar multiplication order for Point3D\n+    point1_3D = Point3D(0, 0, 0)\n+    point2_3D = Point3D(1, 1, 1)\n+    assert point1_3D + point2_3D * scalar == point1_3D + scalar * point2_3D\n+    assert point1_3D + point2_3D * scalar == Point3D(2, 2, 2)\n+\n     raises(ValueError, lambda: Point3D(0, 0, 0) + 10)\n \n     # Point differences should be simplified\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..20c32c9 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,6 +553,33 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+def test_issue_18186():\n+    from sympy import symbols\n+    x, y = symbols('x y', integer=True)\n+    \n+    # Test the original issue with different permutations\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    \n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+\n+    # Additional test for swapped variables without permute=True (should be consistent)\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=False) == \\\n+        set([(2, 3)])\n+        \n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=False) == \\\n+        set([(3, 2)])\n+        \n+    # Additional test with extra variables\n+    a, b = symbols('a b', integer=True)\n+    assert diophantine(x**4 + y**4 + a**4 + b**4 - 2**4 - 3**4, syms=(x, y, a, b), permute=True) == \\\n+        set([(-3, -2, 0, 0), (-3, 2, 0, 0), (-2, -3, 0, 0), (-2, 3, 0, 0), \n+             (2, -3, 0, 0), (2, 3, 0, 0), (3, -2, 0, 0), (3, 2, 0, 0)])\n+    \n+    assert diophantine(x**4 + y**4 + a**4 + b**4 - 2**4 - 3**4, syms=(a, b, x, y), permute=True) == \\\n+        set([(0, 0, -3, -2), (0, 0, -3, 2), (0, 0, -2, -3), (0, 0, -2, 3),\n+             (0, 0, 2, -3), (0, 0, 2, 3), (0, 0, 3, -2), (0, 0, 3, 2)])\n \n def test_general_pythagorean():\n     from sympy.abc import a, b, c, d, e\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..e5bb0ee 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -677,7 +677,31 @@ def test_latex_subs():\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+def test_latex_subs_extended():\n+    from sympy import Subs, symbols\n+\n+    # Test the original reported case\n+    x, y = symbols('x y')\n+    assert latex(3 * Subs(-x + y, (x,), (1,))) == r\"3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}\"\n+\n+    # Test with a more complex expression inside Subs\n+    z = symbols('z')\n+    assert latex(Subs((x + y)**2, (x, y), (1, z))) == r\"\\left. \\left(x + y\\right)^{2} \\right|_{\\substack{ x=1\\\\ y=z }}\"\n+\n+    # Test with a negative coefficient outside Subs\n+    assert latex(-2*Subs(x + y, (x,), (1,))) == r\"- 2 \\left. \\left(x + y\\right) \\right|_{\\substack{ x=1 }}\"\n+\n+    # Test with multiple substitutions and nested Subs\n+    assert latex(Subs(Subs(x*y + z, (x,), (1,)), (y,), (z,))) == r\"\\left. \\left. x y + z \\right|_{\\substack{ x=1 }} \\right|_{\\substack{ y=z }}\"\n+    \n+    # Test with no substitutions\n+    assert latex(Subs(x + y, (), ())) == r\"\\left. x + y \\right|_{\\substack{  }}\"\n+    \n+    # Ensure parentheses are retained with zero as substitution\n+    assert latex(3 * Subs(-x + y, (x,), (0,))) == r\"3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=0 }}\"\n+\n+    # Verify that the structure remains unchanged when no substitutions are needed\n+    assert latex(Subs(x*y + z, (x,), (x,))) == r\"\\left. x y + z \\right|_{\\substack{ x=x }}\"\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..9e49520 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -476,6 +476,10 @@ def test_issue_4988_builtins():\n     assert exp2 == C  # Make sure it did not get mixed up with sympy.C\n \n \n+from sympy.core.sympify import kernS, SympifyError\n+from sympy.abc import x, y, z\n+from sympy import Rational\n+\n def test_geometry():\n     p = sympify(Point(0, 1))\n     assert p == Point(0, 1) and isinstance(p, Point)\n@@ -514,7 +518,28 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_kernS_issue():\n+    # Verify kernS function does not raise UnboundLocalError\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+\n+    # Test with unmatched parentheses\n+    try:\n+        kernS(\"(2*x)/(x-1\")\n+    except SympifyError:\n+        assert True\n+    else:\n+        assert False, \"Expected SympifyError for unmatched parentheses\"\n+\n+    # Test expression where no substitution is necessary\n+    assert kernS(\"x + y + z\") == x + y + z\n+\n+    # Test with expression containing whitespace\n+    assert kernS(\" ( 2*x ) / ( x - 1 ) \") == 2*x/(x-1)\n+\n+    # Test with an expression having multiple operations\n+    expr = \"3*(x + 2*y) - (z/2) + 7\"\n+    expected_result = 3*(x + 2*y) - z/2 + 7\n+    assert kernS(expr) == expected_result\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_dagger.py b/sympy/physics/quantum/tests/test_dagger.py\nindex ad97a01..ada8754 100644\n--- a/sympy/physics/quantum/tests/test_dagger.py\n+++ b/sympy/physics/quantum/tests/test_dagger.py\n@@ -1,11 +1,24 @@\n+\n from sympy import I, Matrix, symbols, conjugate, Expr, Integer\n \n from sympy.physics.quantum.dagger import adjoint, Dagger\n-from sympy.external import import_module\n-from sympy.testing.pytest import skip\n-\n-\n-def test_scalars():\n+from sympy.physics.quantum.operator import Operator, IdentityOperator\n+from sympy import Mul\n+def test_dagger_and_identity_operator():\n+    # Test for Dagger() * IdentityOperator() simplification\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    assert Dagger(O) * I == Dagger(O), \"Dagger(O) * IdentityOperator() should simplify to Dagger(O)\"\n+    assert I * Dagger(O) == Dagger(O), \"IdentityOperator() * Dagger(O) should simplify to Dagger(O)\"\n+\n+    # Additional checks with symbolic operators\n+    A = Operator('A')\n+    D_A = Dagger(A)\n+    \n+    # Test associativity and identity property with Dagger\n+    assert (D_A * I) * O == D_A * O, \"Associativity failed with IdentityOperator\"\n+    assert D_A * (I * O) == D_A * O, \"Associativity failed with IdentityOperator\"\n+    assert I * (D_A * I) == D_A, \"Identity property failed with IdentityOperator\"\n     x = symbols('x', complex=True)\n     assert Dagger(x) == conjugate(x)\n     assert Dagger(I*x) == -I*conjugate(x)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..8f608d1 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -870,6 +870,27 @@ def test_sylow_subgroup():\n     assert S.order() == 8\n \n     P = SymmetricGroup(10)\n+\n+    # Test cases for the reported issue with DihedralGroup\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Additional test case to ensure stability with a different p\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=5)\n+    assert S.order() == 5\n+\n+    # Boundary case with p greater than the order of the group\n+    G = DihedralGroup(6)\n+    try:\n+        S = G.sylow_subgroup(p=7)\n+    except ValueError:\n+        pass  # Expected as there is no Sylow subgroup for p greater than group order\n     S = P.sylow_subgroup(2)\n     assert S.order() == 256\n     S = P.sylow_subgroup(3)\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..bcfae40 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,9 +470,22 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n-\n-def test_partitions():\n-    ans = [[{}], [(0, {})]]\n+from sympy.utilities.iterables import partitions\n+\n+def test_partitions_reuse_issue():\n+    # This test checks if the issue of dictionary reuse has been resolved.\n+    # It ensures that iterating without copying doesn't lead to repeated values.\n+    \n+    # Directly calling list() should return altered results if reuse is happening.\n+    result = list(partitions(6, k=2))\n+    assert result == [\n+        {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}\n+    ], \"Partitions do not match expected values; potential dictionary reuse issue.\"\n+    \n+    # Ensure that without copying, further use does not alter previously yielded values (original condition).\n+    for p in partitions(6, k=2):\n+        p[1] = 10  # Arbitrarily change to see if it affects others\n+    assert list(partitions(6, k=2)) != [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n         assert list(partitions(1, 0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..f604620 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,33 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # Verify that S(0.0) is not equal to S.false in both comparison orders\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+\n+    # Verify that S(0) is not equal to S.false in both comparison orders\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Additional test cases for different numeric forms\n+    assert (S(0.0) != S.true) is True\n+    assert (S.true != S(0.0)) is True\n+    assert (S(0) != S.true) is True\n+    assert (S.true != S(0)) is True\n+\n+    # Verifying with non-number symbolic objects\n+    assert (S.false == Symbol('x')) is False\n+    assert (Symbol('x') == S.false) is False\n+\n+    # Check behavior with different types\n+    assert (S(0.0) == False) is False\n+    assert (S.false == 0.0) is False\n+\n+    # Verifying symmetry and reflexivity properties\n+    assert (S.false == S.false) is True\n+    assert (S(0.0) == S(0.0)) is True\n+    assert (S(0) == S(0)) is True\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..df8c642 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -10,6 +11,32 @@ from sympy.abc import a, x, y, z, t\n \n def test_subs():\n     n3 = Rational(3)\n+\n+    # Test case for issue with unexpected PolynomialError\n+    from sympy.functions.elementary.hyperbolic import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    # Reproducing scenario from the issue\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr_issue = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    \n+    # This substitution used to raise an error in earlier versions\n+    result = expr_issue.subs({1: 1.0})\n+    assert result == expr_issue.subs({1: 1.0}), \"Substitution should not raise an error.\"\n+\n+    # Ensure variations also work\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    result_no_div = expr_no_div.subs({1: 1.0})\n+    assert result_no_div == expr_no_div.subs({1: 1.0})\n+\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    result_no_exp = expr_no_exp.subs({1: 1.0})\n+    assert result_no_exp == expr_no_exp.subs({1: 1.0})\n+\n+    # Different hyperbolic function\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    result_cosh = expr_cosh.subs({1: 1.0})\n+    assert result_cosh == expr_cosh.subs({1: 1.0})\n     e = x\n     e = e.subs(x, n3)\n     assert e == Rational(3)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..b484041 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -14,6 +14,8 @@ from sympy.polys.polyerrors import ExactQuotientFailed\n from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n \n \n def test_monomials():\n@@ -40,6 +42,28 @@ def test_monomials():\n     raises(ValueError, lambda: set(itermonomials([x, y], -1)))\n \n     assert set(itermonomials([x], 0)) == {S.One}\n+    \n+    # Issue-related tests\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, x1**2*x2, x1**2*x3, x1*x2**2, \n+        x1*x3**2, x2**2*x3, x2*x3**2, x1*x2*x3}\n+    \n+    # Original test patch verification\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+    \n+    i, j, k = symbols('i j k', commutative=False)\n+    assert set(itermonomials([i, j, k], 2, 2)) == {\n+        k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k\n+    }\n+    assert set(itermonomials([i, j, k], 3, 2)) == {\n+        j*k**2, i*k**2, k*i*j, k*i**2, k**2, j*k*j, k*j**2, i*k*i, i*j,\n+        j**2*k, i**2*j, j*i*k, j**3, i**3, k*j*i, j*k*i, j*i,\n+        k**2*j, j*i**2, k*j, k*j*k, i*j*i, j*i*j, i*j**2, j**2,\n+        k*i*k, i**2, j*k, i*k, i*k*j, k**3, i**2*k, j**2*i, k**2*i,\n+        i*j*k, k*i\n+    }\n     assert set(itermonomials([x], 1)) == {S.One, x}\n     assert set(itermonomials([x], 2)) == {S.One, x, x**2}\n     assert set(itermonomials([x], 3)) == {S.One, x, x**2, x**3}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..b73b1a1 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Test for argument invariance\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..005b374 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,5 @@\n+\n+from sympy.core.parameters import evaluate\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -440,7 +442,20 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Original test case to verify no error is raised\n+    with evaluate(False):\n+        assert Point2D(1, 2) == Point(1, 2)\n+\n+def test_issue_22684_sympy_syntax():\n+    # Test case using sympify to verify no error is raised\n+    with evaluate(False):\n+        point_expr = sympify('Point2D(1, 2)')\n+        assert point_expr == Point(1, 2)\n+\n+    # Test case to ensure Point2D handles integers without evaluate=False correctly\n+    point_normal = Point2D(1, 2)\n+    assert point_normal == Point(1, 2)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..cf0d5ab 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -59,6 +60,21 @@ def test_PythonCodePrinter():\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n \n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    # Additional tests to verify different scenarios\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    # Test with numeric expressions\n+    assert prntr.doprint(Min(1, 2)) == \"min(1, 2)\"\n+    assert prntr.doprint(Max(3, 5)) == \"max(3, 5)\"\n+    # Test with symbolic and numeric mixed\n+    assert prntr.doprint(Min(x, 3)) == \"min(x, 3)\"\n+    assert prntr.doprint(Max(x, 4)) == \"max(x, 4)\"\n+    # Test with nested Min/Max\n+    assert prntr.doprint(Min(Max(x, y), z)) == \"min(max(x, y), z)\"\n+    assert prntr.doprint(Max(Min(x, y), z)) == \"max(min(x, y), z)\"\n+\n def test_PythonCodePrinter_standard():\n     prntr = PythonCodePrinter()\n \n",
  "sympy__sympy-23262": "",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..32942ee 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,7 +1,9 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..085b348 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -261,8 +261,35 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n+def test_kahane_leading_uncontracted_gammas():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Test case 1: Check for contracted gamma matrices with leading uncontracted ones\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Test case 2: Leading uncontracted gammas should not be reordered\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+    \n+    # Additional case: Single uncontracted gamma followed by contractions\n+    t = G(nu)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(2*G(nu))\n+\n+    # Additional case: Multiple leading uncontracted gammas\n+    t = G(rho)*G(sigma)*G(mu)*G(nu)*G(-mu)*G(-nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(D * G(rho) * G(sigma))  # D = 4 in gamma simplifications\n+\n+    # Additional case: Check order maintenance with multiple contractions\n+    t = G(mu)*G(nu)*G(-nu)*G(sigma)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(-2*G(sigma))\n \n-def test_gamma_matrix_class():\n+    print(\"All tests for kahane_leading_uncontracted_gammas passed.\")\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..378874e 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,9 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Symbol, FiniteSet, S, Contains\n+from sympy.testing.pytest import raises\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -46,6 +49,26 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    # Test original assertions (these verify the expected behavior; they should pass after fix)\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n+\n+    # Additional test cases\n+    # Confirm NotImplementedError is raised for currently unsupported set conversions\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(1, 2, 3)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Naturals).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.EmptySet).as_set())\n+\n+    # Add further cases to check behavior with special sets\n+    # These cases might need to be updated based on the actual fixes implemented, \n+    # but they represent the logical expectations of the function.\n+    assert Contains(x, S.UniversalSet).as_set() == S.UniversalSet\n+    raises(NotImplementedError, lambda: Contains(x, S.Complexes).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Rationals).as_set())\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..8c0a8cc 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,28 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units.quantities import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..c4ee419 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,45 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1 * T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_collect_factor_and_dimension_with_different_scale_factors():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr = a1 * t1 + v1\n+    # should not throw ValueError here\n+    factor, dim = SI._collect_factor_and_dimension(expr)\n+    expected_factor = -9.8 * 5 + 2\n+    expected_dim = SI.get_dimension_system().get_dimension(acceleration * time) \n+    assert factor == expected_factor, \"Factor mismatch\"\n+    assert dim == expected_dim, \"Dimension mismatch\"\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..e808692 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -43,6 +44,29 @@ def test_homomorphism():\n     assert T.invert(a**-1*b**-1*a**2) == a*b**-1\n \n     # PermutationGroup -> PermutationGroup\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Additional test cases\n+    a = Permutation(0, 1, 2)\n+    b = Permutation(0, 2)\n+    G = PermutationGroup([a, b])\n+    \n+    # Test identity homomorphism\n+    T_identity = homomorphism(G, G, G.generators, G.generators)\n+    assert T_identity.is_isomorphism()\n+    \n+    # Test homomorphism where only one generator is mapped directly\n+    T_partial = homomorphism(G, G, [a], [a])\n+    assert not T_partial.is_isomorphism()\n+\n+    # Test homomorphism where generators are mapped to other elements\n+    c = Permutation(0, 1, 2)\n+    d = Permutation(1, 2)\n+    T = homomorphism(G, PermutationGroup([c, d]), G.generators, [c, d])\n+    assert T(a*b**2*a**-1) == c*d**2*c**-1\n+    assert not T.is_isomorphism()\n     D = DihedralGroup(8)\n     p = Permutation(0, 1, 2, 3, 4, 5, 6, 7)\n     P = PermutationGroup(p)\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..e7995cd 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -270,7 +270,29 @@ def test_PolyElement_as_expr():\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n-def test_PolyElement_from_expr():\n+def test_PolyElement_custom_symbols():\n+    from sympy import ring, ZZ, symbols\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    # Test using different symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test with a different number of symbols to check for error\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test no symbols and it should use the original symbols\n+    assert f.as_expr() == f.as_expr(x, y, z)\n+\n+    # Test with additional symbols\n+    A, B, C, D = symbols(\"a,b,c,d\")\n+    raises(ValueError, lambda: f.as_expr(A, B, C, D))\n+\n+    # Test with symbols in reverse order\n+    g_reverse = 3*W**2*V - W*V*U + 7*U**3 + 1\n+    assert f.as_expr(W, V, U) == g_reverse\n     x, y, z = symbols(\"x,y,z\")\n     R, X, Y, Z = ring((x, y, z), ZZ)\n \n",
  "sympy__sympy-24661": "",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..8b7be3b 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -61,6 +61,8 @@ def test_unit_grammar_fail(string):\n         ([\"mW/(m2)\"], u.Unit(u.erg / u.cm**2 / u.s)),\n         ([\"km/s\", \"km.s-1\"], u.km / u.s),\n         ([\"10pix/nm\"], u.Unit(10 * u.pix / u.nm)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / u.m / u.s / u.kpc**2)),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / u.s / u.kpc**2)),\n         ([\"1.5x10+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"1.5\u00d710+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"m2\"], u.m**2),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..7ad71ff 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1889,6 +1889,13 @@ class OperationTests(OperationTestBase):\n         from_state = to_state\n         to_state = from_state.clone()\n         operation.state_forwards(app_label, to_state)\n+        # Additional test case for CheckConstraint with OR operator\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            # This should fail because field_1 is null, but flag is true\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        TestConstraint.objects.create(field_1=1, flag=True)  # Should succeed\n+        TestConstraint.objects.create(field_1=None, flag=False)  # Should succeed\n         Author = to_state.apps.get_model(app_label, 'Author')\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, from_state, to_state)\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..b192d94 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -164,7 +164,27 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translation.get_language(), 'nl')\n \n \n-class URLNamespaceTests(URLTestCaseBase):\n+    def test_translate_url_with_optional_groups(self):\n+        # Ensure translate_url handles URLs with optional parameters correctly\n+        self.assertEqual(\n+            translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+            '/nl/with-arguments/regular-argument/'\n+        )\n+        self.assertEqual(\n+            translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+            '/nl/with-arguments/regular-argument/optional.html'\n+        )\n+        # Test with missing optional argument\n+        self.assertEqual(\n+            translate_url('/en/regex_optional/1/', 'nl'),\n+            '/nl/regex_optional/1/'\n+        )\n+        self.assertEqual(\n+            translate_url('/en/regex_optional/1/2/', 'nl'),\n+            '/nl/regex_optional/1/2/'\n+        )\n+        # Ensure language is maintained post-translation\n+        self.assertEqual(translation.get_language(), 'en')\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n     \"\"\"\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..83f1158 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -15,10 +16,39 @@ from .models import (\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n )\n+from .models import Item, Derived\n \n \n class ModelInheritanceTest(TestCase):\n-    def test_model_inheritance(self):\n+    def test_create_new_derived_instance_with_pk_equals_none(self):\n+        derived_instance = Derived.objects.create(f=True)\n+        # Reset and clear the primary key\n+        derived_instance.reset()\n+        derived_instance.save()\n+        \n+        # Now check that the original object still exists\n+        original = Derived.objects.get(pk=derived_instance.pk)\n+        self.assertIsNotNone(original)\n+        self.assertTrue(original.f)\n+\n+        # Ensure a new object was created\n+        self.assertEqual(Derived.objects.count(), 2)\n+\n+    def test_reset_and_create_new_instance(self):\n+        # Create initial instance\n+        item_instance = Item.objects.create(f=True)\n+        derived_instance = Derived.objects.get(pk=item_instance.pk)\n+        \n+        # Reset the derived instance\n+        derived_instance.reset()\n+        derived_instance.save()\n+        \n+        # Check the original item still exists\n+        original_item = Item.objects.get(pk=item_instance.pk)\n+        self.assertEqual(original_item.f, True)\n+\n+        # Ensure a new derived instance was created\n+        self.assertEqual(Derived.objects.count(), 2)\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n         # existent child instance, saving the Parent doesn't duplicate the\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..81b83ec 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -605,8 +605,27 @@ class DeletionTests(TestCase):\n \n \n class FastDeleteTests(TestCase):\n-\n-    def test_fast_delete_fk(self):\n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries is used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n+    def test_delete_with_lock(self):\n+        \"\"\"\n+        Test that Model.objects.all().delete() can be used with table lock\n+        without failure due to subquery issue.\n+        \"\"\"\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"LOCK TABLES %s WRITE;\" % connection.ops.quote_name(User._meta.db_table))\n+            try:\n+                with self.assertNumQueries(1) as ctx:\n+                    User.objects.all().delete()\n+                sql = ctx.captured_queries[0]['sql']\n+                self.assertNotIn('IN (SELECT', sql)\n+            finally:\n+                cursor.execute(\"UNLOCK TABLES;\")\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n         )\n@@ -702,4 +721,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..b31965f 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,12 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value_with_dict(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        value = {}\n+        with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+            field.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..a316563 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -172,7 +173,29 @@ class PickleabilityTestCase(TestCase):\n         m2ms = pickle.loads(pickle.dumps(m2ms))\n         self.assertSequenceEqual(m2ms, [m2m])\n \n-    def test_pickle_exists_queryset_still_usable(self):\n+    def test_values_annotation_pickle(self):\n+        \"\"\"\n+        Test pickling a queryset with values() and annotation.\n+        \"\"\"\n+        qs = Happening.objects.values('name').annotate(latest_time=models.Max('when'))\n+        reloaded = Happening.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertEqual(list(reloaded), list(qs))\n+\n+    def test_values_list_annotation_pickle(self):\n+        \"\"\"\n+        Test pickling a queryset with values_list() and annotation.\n+        \"\"\"\n+        tests = [\n+            Happening.objects.values_list('name'),\n+            Happening.objects.values_list('name', flat=True),\n+            Happening.objects.values_list('name', named=True),\n+        ]\n+        for qs in tests:\n+            with self.subTest(qs._iterable_class.__name__):\n+                reloaded = Happening.objects.all()\n+                reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+                self.assertEqual(list(reloaded), list(qs))\n         group = Group.objects.create(name='group')\n         Event.objects.create(title='event', group=group)\n         groups = Group.objects.annotate(\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..ccd7bda 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -5,10 +5,13 @@ class Classification(models.Model):\n     code = models.CharField(max_length=10)\n \n \n+from decimal import Decimal\n+\n class Employee(models.Model):\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n     name = models.CharField(max_length=40, blank=False, null=False)\n     salary = models.PositiveIntegerField()\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n",
  "django__django-13512": "",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..e14ed05 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6603,6 +6603,41 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        script_name = '/customprefix/'\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME=script_name)\n+        self.assertRedirects(\n+            response,\n+            script_name[:-1] + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/customprefix/')\n+    def test_redirect_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/customprefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6629,6 +6664,41 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        script_name = '/customprefix/'\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME=script_name)\n+        self.assertRedirects(\n+            response,\n+            script_name[:-1] + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/customprefix/')\n+    def test_redirect_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/customprefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "",
  "django__django-15375": "",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..bdbeb66 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2979,6 +2979,28 @@ class OperationTests(OperationTestBase):\n         )\n \n         new_state = project_state.clone()\n+\n+        # Test unnamed index renaming back and forth\n+        table_name = 'pony_table'\n+        unnamed_operation = RenameIndex('Pony', old_fields=('pony', 'weight'), new_name='new_unnamed_idx')\n+\n+        # Perform forward rename operation\n+        with connection.schema_editor() as editor:\n+            unnamed_operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Verify the new name exists\n+        self.assertIndexNameExists(table_name, 'new_unnamed_idx')\n+\n+        # Perform backward rename operation (should restore old name or state)\n+        with connection.schema_editor() as editor:\n+            unnamed_operation.database_backwards(app_label, editor, new_state, project_state)\n+        \n+        # Attempt the forward operation again to ensure no crash\n+        with connection.schema_editor() as editor:\n+            unnamed_operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Check if the final new name exists\n+        self.assertIndexNameExists(table_name, 'new_unnamed_idx')\n         operation.state_forwards(app_label, new_state)\n         # Rename index.\n         with connection.schema_editor() as editor:\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..2654467 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,6 +3496,40 @@ class FormFieldCallbackTests(SimpleTestCase):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+    def test_modelform_factory_uses_formfield_callback_in_meta(self):\n+        class MyModel(models.Model):\n+            name = models.CharField(max_length=100)\n+        \n+        def custom_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+        \n+        class CustomForm(forms.ModelForm):\n+            class Meta:\n+                model = MyModel\n+                fields = '__all__'\n+                formfield_callback = custom_callback\n+        \n+        # Creating a form using modelform_factory\n+        FactoryForm = forms.modelform_factory(MyModel, form=CustomForm)\n+        \n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_modelform_factory_no_callback_provided(self):\n+        class MyModel(models.Model):\n+            name = models.CharField(max_length=100)\n+        \n+        class NoCallbackForm(forms.ModelForm):\n+            class Meta:\n+                model = MyModel\n+                fields = '__all__'\n+        \n+        # Creating a form using modelform_factory without formfield_callback in Meta\n+        FactoryForm = forms.modelform_factory(MyModel, form=NoCallbackForm)\n+        \n+        for field in FactoryForm.base_fields.values():\n+            self.assertNotEqual(type(field.widget), forms.Textarea)\n+\n \n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..47e2a00 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -12,7 +12,8 @@ from django.test.utils import isolate_apps\n from django.utils.translation import gettext_lazy, override\n \n from .models import Score\n-from .tests import SerializersTestBase, SerializersTransactionTestBase\n+from django.core import serializers\n+from django.db import models\n \n \n class JsonSerializerTestCase(SerializersTestBase, TestCase):\n@@ -258,7 +259,32 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_not_iterable(self):\n+    def test_m2m_serialization_with_custom_manager(self):\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = Test.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+        test_instance.save()\n+\n+        serialized_data = serializers.serialize(\"json\", [test_instance])\n+        \n+        self.assertIn('\"fields\": {\"name\": \"test\", \"tags\": []}', serialized_data)\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..1f67f8d 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -207,7 +207,13 @@ def test_cmap(cmap):\n     pickle.dumps(cmap)\n \n \n-def test_unpickle_canvas():\n+def test_unpickle_dpi_consistency():\n+    initial_dpi = 200  # Set the initial DPI for the figure\n+    fig = plt.figure(dpi=initial_dpi)\n+    \n+    for _ in range(10):  # Repeat the pickle/unpickle process multiple times\n+        fig = pickle.loads(pickle.dumps(fig))\n+        assert fig.dpi == initial_dpi, f\"Unexpected DPI value: {fig.dpi}\"\n     fig = mfigure.Figure()\n     assert fig.canvas is not None\n     out = BytesIO()\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..1f81607 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,7 +6586,27 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n-    actual = da.integrate(\"y\")\n+    # Test using 'coord' argument which is expected after the fix\n+    actual = da.integrate(coord=\"y\")\n+    expected_y = xr.DataArray(\n+        np.trapz(da, da[\"y\"], axis=1),\n+        dims=[\"x\"],\n+        coords={k: v for k, v in da.coords.items() if \"y\" not in v.dims},\n+    )\n+    assert_allclose(expected_y, actual.compute())\n+    assert_equal(actual, ds.integrate(coord=\"y\")[\"var\"])\n+    assert_equal(ds[\"var\"].integrate(coord=\"y\"), ds.integrate(coord=\"y\")[\"var\"])\n+\n+    # along x and y\n+    actual = da.integrate(coord=(\"y\", \"x\"))\n+    assert actual.ndim == 0\n+\n+    with pytest.raises(ValueError):\n+        da.integrate(coord=\"x2d\")\n+\n+    # Ensure 'dim' argument generates a FutureWarning\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..9735959 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,33 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import re\n+from typing import Any\n+from pylint.lint import Run\n+from pytest import mark\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+]\n+\n+@mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\"\"\"\n+    \n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..d346122 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.pytester import Testdir\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..6e1f7c6 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,20 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"input_expr\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_compile_special_constants(input_expr: str) -> None:\n+    try:\n+        Expression.compile(input_expr)\n+    except AssertionError as e:\n+        pytest.fail(f\"Unexpected AssertionError: {e}\")\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..070d42e 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,25 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+def test_feature_union_with_pandas_output():\n+    # Arrange\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X, y=None, **kwargs):\n+            return self\n+\n+        def transform(self, X, y=None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+    # Act & Assert\n+    set_config(transform_output=\"default\")\n+    default_output = make_union(MyTransformer()).fit_transform(data)\n+    assert isinstance(default_output, pd.DataFrame)\n+\n+    set_config(transform_output=\"pandas\")\n+    pandas_output = make_union(MyTransformer()).fit_transform(data)\n+    assert isinstance(pandas_output, pd.DataFrame)\n+    assert pandas_output.shape == (data[\"date\"].nunique(), 1)  # as we expect one output per date\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..6073b6c 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -235,8 +235,20 @@ def test_get_full_qualified_name():\n     node = nodes.reference(reftarget='func', **kwargs)\n     assert domain.get_full_qualified_name(node) == 'module1.Class.func'\n \n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n \n def test_parse_annotation():\n+    doctree = _parse_annotation(\"None\")\n+    # None type makes an object-reference (not a class reference)\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n+    doctree = _parse_annotation(\"Optional[None]\")\n+    assert_node(doctree, ([pending_xref, \"Optional\"],\n+                          [desc_sig_punctuation, \"[\"],\n+                          [pending_xref, \"None\"],\n+                          [desc_sig_punctuation, \"]\"]))\n     doctree = _parse_annotation(\"int\")\n     assert_node(doctree, ([pending_xref, \"int\"],))\n \n@@ -742,4 +754,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..7e2f8f2 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,58 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_multiple_parameters(self):\n+        # Test with multiple parameters on the same line\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with multiple parameters on the same line including optional\n+        docstring_optional = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring_optional, config))\n+        expected_optional = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+        \"\"\"\n+        self.assertEqual(expected_optional, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring_optional), config))\n+        expected_optional = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected_optional, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..d040e25 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -769,10 +769,102 @@ def test_pydecoratormethod_signature(app):\n                                   desc_content)]))\n     assert_node(doctree[1], addnodes.desc, desctype=\"method\",\n                 domain=\"py\", objtype=\"method\", noindex=False)\n+import pytest\n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+\n+@pytest.mark.sphinx('dummy', freshenv=True)\n+def test_type_and_rtype_resolution(app, status, warning):\n+    text = \"\"\"\n+    .. py:class:: mod.A\n+    .. py:class:: mod.submod.A\n+\n+    .. py:function:: f()\n+    \n+        :param mod.A a:\n+        :param mod.submod.A b:\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod\n+\n+    .. py:function:: f()\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod.submod\n+\n+    .. py:function:: f()\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \"\"\"\n+\n+    # Parse the test RST text\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Check that there are no warnings for ambiguous 'A'\n+    assert \"more than one target found for cross-reference 'A'\" not in warning.getvalue()\n \n+    # Further assertions can be added if needed to check internal doctree structure\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n+import pytest\n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+\n+@pytest.mark.sphinx('dummy', freshenv=True)\n+def test_type_and_rtype_resolution(app, status, warning):\n+    text = \"\"\"\n+    .. py:class:: mod.A\n+    .. py:class:: mod.submod.A\n+\n+    .. py:function:: f()\n+    \n+        :param mod.A a:\n+        :param mod.submod.A b:\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod\n+\n+    .. py:function:: f()\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod.submod\n+\n+    .. py:function:: f()\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \"\"\"\n+\n+    # Parse the test RST text\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Check that there are no warnings for ambiguous 'A'\n+    assert \"more than one target found for cross-reference 'A'\" not in warning.getvalue()\n \n+    # Further assertions can be added if needed to check internal doctree structure\n \n @pytest.mark.sphinx(freshenv=True)\n def test_module_index(app):\n",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..4a95497 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -922,7 +922,47 @@ def test_info_field_list(app):\n             \"   :param age: blah blah\\n\"\n             \"   :type age: int\\n\"\n             \"   :param items: blah blah\\n\"\n-            \"   :type items: Tuple[str, ...]\\n\")\n+            \"   :type items: Tuple[str, ...]\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    \n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, ([nodes.list_item, nodes.paragraph],\n+                                                        [nodes.list_item, nodes.paragraph],\n+                                                        [nodes.list_item, nodes.paragraph],\n+                                                        [nodes.list_item, nodes.paragraph])]))\n+\n+    # :param dict(str, str) opc_meta: (optional)\n+    assert_node(doctree[3][1][0][0][1][0][3][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][3][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     doctree = restructuredtext.parse(app, text)\n     print(doctree)\n \n",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..2d21180 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -834,6 +834,32 @@ def test_autodoc_typehints_description(app):\n             in context)\n \n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_typehints_description_target': 'documented',\n+                                   'napoleon_numpy_docstring': False})\n+def test_autodoc_typehints_description_with_napoleon(app):\n+    # Test case to verify that documented type annotations (rtype) are included\n+    # when using autodoc_typehints_description_target set to 'documented'\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.sample_function\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+\n+    assert ('target.typehints.sample_function(param1, param2)\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **param1** -- First parameter.\\n'\n+            '      **param2** -- Second parameter.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      The returned value.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n' in context)\n+\n+\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n                                    'autodoc_typehints_description_target': 'documented'})\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..da8701f 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,7 +1048,23 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n-def test_conditionset():\n+from sympy import Eq, cos, sin, Reals, ConditionSet, symbols\n+from sympy.solvers.solveset import solveset\n+\n+x, n = symbols('x n')\n+\n+def test_issue_18188():\n+    # Test for the original issue\n+    result1 = solveset(Eq(n*cos(n) - 3*sin(n), 0), n, domain=Reals)\n+    assert result1 == ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)\n+\n+    # Additional test\n+    result2 = solveset(Eq(x**2 + cos(x) + sin(x), 0), x, domain=Reals)\n+    assert result2 == ConditionSet(x, Eq(x**2 + cos(x) + sin(x), 0), Reals)\n+    \n+    # Decompose into separate components to verify it doesn't break the existing functionality\n+    result3 = solveset(Eq(x**2 + 2*x + 1, 0), x, domain=Reals)\n+    assert result3 == {-1}\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..89b7045 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3330,6 +3330,19 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+def test_issue_8695_additional():\n+    from sympy import symbols, sqf_list\n+\n+    x = symbols('x')\n+    \n+    # Test case based on the issue description\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == expected_result\n+\n+    # Additional test case to ensure no regression\n+    p_additional = (x**3 - 3*x**2 + 3*x - 1) * (x - 4)**2 * (x + 5)**3\n+    expected_result_additional = (1, [(x - 1, 3), (x - 4, 2), (x + 5, 3)])\n+    assert sqf_list(p_additional) == expected_result_additional\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..bc63f4b 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3255,6 +3255,21 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n+def test_issue_18895_factor_with_extension():\n+    from sympy import expand, factor, I, symbols\n+\n+    x, y = symbols('x y')\n+    z = expand((x - 1)*(y - 1))\n+\n+    # Factor without any extension\n+    assert factor(z) == (x - 1)*(y - 1)\n+\n+    # Factor with complex extension\n+    result = factor(z, extension=[I])\n+    # Should not drop the factor (y - 1)\n+    assert result == (x - 1)*(y - 1)\n+\n+...\n def test_noncommutative():\n     class foo(Expr):\n         is_commutative=False\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..6489cb9 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,9 @@\n+\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    assert s.__slots__ == ('name',)\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -11,7 +17,7 @@ from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n-from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n+from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum, Symbol\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n from sympy.core import I, pi\n",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..157a9b8 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,40 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundfield_subwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Tests that BoundWidget.id_for_label uses the id from Widget.attrs \n+        when provided, especially in the case of subwidgets like CheckboxSelectMultiple.\n+        \"\"\"\n+        class CustomForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id_%s'}),\n+            )\n+\n+        form = CustomForm(auto_id=False)\n+        subwidgets = form['field'].subwidgets\n+\n+        # Asserting that the given `id` in `Widget.attrs` is used\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n+\n+    def test_boundfield_subwidget_id_for_label_default_auto_id(self):\n+        \"\"\"\n+        Ensures the default id generation behavior if no custom id is provided in Widget.attrs.\n+        \"\"\"\n+        class DefaultForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(),\n+            )\n+\n+        form = DefaultForm(auto_id='default_prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+\n+        # Asserting that the auto_id convention is correctly applied\n+        self.assertEqual(subwidgets[0].id_for_label, 'default_prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'default_prefix_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..633351c 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,11 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..13a3385 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,27 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+\n+def test_cross_val_predict_with_multilabel_classifier():\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=42)\n+\n+    # Create a MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # Call cross_val_predict with method='predict_proba'\n+    try:\n+        pred_proba = cross_val_predict(mo_clf, X, Y, cv=3, method='predict_proba')\n+        assert isinstance(pred_proba, list)  # It should return a list of arrays\n+        assert all(isinstance(arr, np.ndarray) for arr in pred_proba)\n+    except AttributeError as e:\n+        pytest.fail(f\"Unexpected AttributeError: {e}\")\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..cc7596e 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -289,6 +289,28 @@ def test_stringify_type_Literal():\n def test_stringify_type_union_operator():\n     assert stringify(int | None) == \"int | None\"  # type: ignore\n     assert stringify(int | str) == \"int | str\"  # type: ignore\n+\n+def test_restify_mock_inheritance():\n+    with mock(['torch']):\n+        class MockBase:\n+            pass\n+\n+        class Derived(MockBase):\n+            pass\n+        \n+        # Test restify on mock inheritance\n+        assert restify(Derived) == ':py:class:`tests.test_util_typing.Derived`'\n+\n+def test_stringify_mock_inheritance():\n+    with mock(['torch']):\n+        class MockBase:\n+            pass\n+\n+        class Derived(MockBase):\n+            pass\n+\n+        # Test stringify on mock inheritance\n+        assert stringify(Derived) == 'tests.test_util_typing.Derived'\n     assert stringify(int | str | None) == \"int | str | None\"  # type: ignore\n \n \n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..a86078a 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,35 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+def test_issue_13546():\n+    from sympy import Symbol, S, Product\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+def test_issue_13546_various_cases():\n+    from sympy import Symbol, S, Product\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p_expr = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+\n+    # Test for n = 1\n+    p_n1 = p_expr.subs(n, 1).doit()\n+    assert p_n1 == S(3)  # (1 + 2^0) = 3\n+\n+    # Test for n = 3\n+    p_n3 = p_expr.subs(n, 3).doit()\n+    expected_p_n3 = (3 + 1)*(3 + 1/2)*(3 + 1/4)  # 4 * 3.5 * 3.25\n+    assert p_n3 == expected_p_n3\n+\n+    # Test for n = 4\n+    p_n4 = p_expr.subs(n, 4).doit()\n+    expected_p_n4 = (4 + 1)*(4 + 1/2)*(4 + 1/4)*(4 + 1/8)\n+    assert p_n4 == expected_p_n4\n+\n+    # Ensure the product reduces as expected for symbolic n\n+    assert p_expr.is_number is False\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +384,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}