{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..c253eb1 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,9 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import (BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect)\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..3ed046d 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,7 +137,36 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n-    def test_complex_value_card(self):\n+    def test_floating_point_string_representation_card_extended(self):\n+        \"\"\"Extended tests for float precision in FITS Card\"\"\"\n+\n+        # Case 1: Small float\n+        k = \"HIERARCH SMALL FLOAT\"\n+        com = \"This is a small float value test\"\n+        c = fits.Card(k, 1.23e-10, com)\n+        expected_str = f\"{k} = 1.23E-10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Case 2: Large float\n+        k = \"HIERARCH LARGE FLOAT\"\n+        com = \"This is a large float value test\"\n+        c = fits.Card(k, 1.23e+10, com)\n+        expected_str = f\"{k} = 1.23E+10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Case 3: Negative float\n+        k = \"HIERARCH NEGATIVE FLOAT\"\n+        com = \"This is a negative float value test\"\n+        c = fits.Card(k, -1.23, com)\n+        expected_str = f\"{k} = -1.23 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Case 4: Edge float value\n+        k = \"HIERARCH EDGE CASE FLOAT\"\n+        com = \"Edge case float representation\"\n+        c = fits.Card(k, 0.0, com)\n+        expected_str = f\"{k} = 0.0 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n         c = fits.Card(\"abc\", (1.2345377437887837487e88 + 6324767364763746367e-33j))\n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..42e01d5 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,27 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_fitsdiff_identical_file_with_vla(self):\n+        \"\"\"\n+        Test that FITSDiff correctly identifies identical files with variable-length arrays (VLAs)\n+        \"\"\"\n+\n+        # Create a FITS file with a variable-length array column\n+        col_vla = Column(name='a', format='QD', array=[[0], [0, 0]])\n+        hdu_vla = BinTableHDU.from_columns([col_vla])\n+        hdu_vla.writeto('test_vla_identical.fits', overwrite=True)\n+\n+        # Use FITSDiff to compare the file with itself\n+        diff_vla = FITSDiff('test_vla_identical.fits', 'test_vla_identical.fits')\n+\n+        # Assert that the files are found identical by FITSDiff\n+        assert diff_vla.identical\n+\n+        # Print the diff report and check that it's empty\n+        report_vla = diff_vla.report()\n+        assert \"Primary HDU\" not in report_vla\n+        assert \"Extension HDU\" not in report_vla\n+        assert \"data contains differences\" not in report_vla\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..56a7258 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -89,7 +89,20 @@ def test_inherit_docstrings():\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n \n-def test_set_locale():\n+def test_inherit_docstrings_with_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"\"\"BAR\"\"\"\n+            return 'bar_value'\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 'subclass_bar_value'\n+\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..bb4c22d 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -194,6 +194,12 @@ def test_unknown_unit3():\n     with pytest.raises(ValueError):\n         unit4 = u.Unit(\"BAR\", parse_strict='strict')\n \n+    # Test the issue where comparing unit with None should return False, not raise TypeError.\n+    unit_none = u.Unit('asdf', parse_strict='silent')\n+    assert unit_none != None  # noqa\n+    assert not (unit_none == None)  # noqa, explicit test for equality being False\n+    assert unit_none not in (None,)\n+\n     with pytest.raises(TypeError):\n         unit5 = u.Unit(None)\n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..a4d4d6f 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -66,10 +66,19 @@ def test_find_mod_objs():\n def test_minversion():\n     from types import ModuleType\n     test_module = ModuleType(str(\"test_module\"))\n+    test_module.__version__ = '1.14.3'\n+\n+    # Test case replicating the issue with LooseVersion\n+    problematic_versions = ['1.14dev', '1.14rc']\n+    for version in problematic_versions:\n+        with pytest.raises(TypeError):\n+            minversion(test_module, version)\n+\n+    # Re-evaluate with solution-based version comparison if implemented\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n     bad_versions = ['1', '1.2rc1']\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..628720c 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,34 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_from_bytes_varied_encoding(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object with different encodings.\n+        \"\"\"\n+        # Valid ASCII bytes input\n+        c = fits.Card.fromstring(b\"ABC     = 'ascii'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'ascii'\n+\n+        # Latin-1 string bytes\n+        c = fits.Card.fromstring(b\"LATIN   = 'latin \\xe1'\")\n+        assert c.keyword == 'LATIN'\n+        assert c.value == 'latin \u00e1'\n+\n+        with pytest.raises(UnicodeDecodeError):\n+            # UTF-8 encoded string that's not valid Latin-1 should raise an error\n+            fits.Card.fromstring(b\"UTF8    = '\\xc3\\x28'\")  # Invalid sequence\n+\n+    def test_header_fromstring_with_invalid_input(self):\n+        \"\"\"\n+        Test `Header.fromstring` with invalid input types.\n+        \"\"\"\n+        with pytest.raises(TypeError):\n+            fits.Header.fromstring(12345)  # not a string or bytes\n+\n+        with pytest.raises(ValueError):\n+            fits.Header.fromstring(b\"\")  # Empty byte string\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..3c1140d 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -139,6 +139,30 @@ class TestQuantityCreation:\n         assert q2.unit == q1.unit\n \n         # but we should preserve float32\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+        assert q3_16.value[0] == a3_16[0]\n+        assert q3_16.value[1] == a3_16[1]\n+\n+        # Test with float16 scalar\n+        scalar_16 = np.float16(1.0)\n+        q_scalar_16 = scalar_16 * u.m\n+        assert q_scalar_16.dtype == np.dtype('float16')\n+        assert q_scalar_16.value == scalar_16\n+\n+        # Test consistency across other float types\n+        scalar_32 = np.float32(1.0)\n+        q_scalar_32 = scalar_32 * u.m\n+        assert q_scalar_32.dtype == np.dtype('float32')\n+\n+        scalar_64 = np.float64(1.0)\n+        q_scalar_64 = scalar_64 * u.m\n+        assert q_scalar_64.dtype == np.dtype('float64')\n+\n+        scalar_128 = np.float128(1.0)\n+        q_scalar_128 = scalar_128 * u.m\n+        assert q_scalar_128.dtype == np.dtype('float128')\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..723adf6 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -217,6 +217,20 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n+    # Test cases for URLValidator with invalid characters in the username and password\n+    (URLValidator(), 'http://user@:pass@example.com', ValidationError),\n+    (URLValidator(), 'http://user@pass@example.com', ValidationError),\n+    (URLValidator(), 'http://user:pa:ss@example.com', ValidationError),\n+    (URLValidator(), 'http://user/pass@example.com', ValidationError),\n+    (URLValidator(), 'http://user@exa@mple.com', ValidationError),\n+    (URLValidator(), 'http://user:pass@exa!mple.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+\n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..8e57e6d 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -8,6 +9,7 @@ from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n     Max, Min, Sum, Value,\n )\n+from django.db.models import Case, When\n from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n@@ -389,6 +391,19 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_count_distinct_with_case(self):\n+        \"\"\"\n+        Test Count with a combination of Case condition and distinct=True.\n+        This test is added to verify issue resolution where the SQL syntax \n+        was causing a query error. Specifically tests COUNT(DISTINCT CASE ...\n+        \"\"\"\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(When(pages__gt=300, then='rating')), distinct=True\n+            ),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..f739b28 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1103,7 +1103,14 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n-    def test_override_file_upload_directory_permissions(self):\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The file_permissions_mode attribute should default to 0o644 if\n+        FILE_UPLOAD_PERMISSIONS is not explicitly set.\n+        \"\"\"\n+        self.assertIsNone(default_storage.file_permissions_mode)\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         \"\"\"\n         Overriding the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting should be\n         reflected in the directory_permissions_mode attribute of\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..eb769ad 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -43,7 +45,45 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_nopass(self):\n+    def test_with_pgpassword(self):\n+        \"\"\"\n+        Test the setting of PGPASSWORD in the environment when a password is provided.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.subprocess_args = list(args[0])\n+            self.pgpassword = env.get('PGPASSWORD') if env else None\n+            return mock.Mock(returncode=0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            self.assertEqual(\n+                DatabaseClient.runshell_db({\n+                    'database': 'dbname',\n+                    'user': 'someuser',\n+                    'password': 'somepassword',\n+                    'host': 'somehost',\n+                    'port': '444',\n+                }),\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname']\n+            )\n+            self.assertEqual(self.pgpassword, 'somepassword')\n+\n+    def test_without_pgpassword(self):\n+        \"\"\"\n+        Test that PGPASSWORD is not set when no password is provided.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.subprocess_args = list(args[0])\n+            self.pgpassword = env.get('PGPASSWORD') if env else None\n+            return mock.Mock(returncode=0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n+            self.assertIsNone(self.pgpassword)\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +153,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..aa75ebf 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,8 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n+from django.db import transaction, IntegrityError\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -47,7 +49,25 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_missing_content_type_rename_ignore(self):\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_rename_content_type_on_specified_database(self):\n+        # Create a content type in the 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        \n+        # Attempt to rename the model on the 'other' database\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        \n+        # Assert that the old model name doesn't exist and the new model name does exist in 'other' database\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+\n+        # Rollback the migration\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        \n+        # Assert that after rollback, the original state is restored\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n@@ -63,4 +83,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..0b9e193 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -425,7 +425,32 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n             inlines = [\n                 AlternateInline, MediaInline\n             ]\n-        ma = EpisodeAdmin(Episode, self.site)\n+        def test_get_inlines_behavior(self):\n+            class MediaInline(GenericTabularInline):\n+                model = Media\n+\n+            class AlternateInline(GenericTabularInline):\n+                model = Media\n+\n+            class EpisodeAdmin(admin.ModelAdmin):\n+                inlines = (AlternateInline, MediaInline)\n+\n+                def get_inlines(self, request, obj=None):\n+                    if hasattr(request, 'name'):\n+                        if request.name == 'alternate':\n+                            return self.inlines[:1]\n+                        elif request.name == 'media':\n+                            return self.inlines[1:2]\n+                    return []\n+\n+            ma = EpisodeAdmin(Episode, self.site)\n+            self.assertEqual(ma.get_inlines(request, None), [])\n+            self.assertEqual(ma.get_inline_instances(request), [])\n+\n+            for name, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+                request.name = name\n+                self.assertEqual(ma.get_inlines(request, None), (inline_class,))\n+                self.assertEqual(type(ma.get_inline_instances(request)[0]), inline_class)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..f4b7436 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\"\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -248,6 +248,18 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n+    def test_unicode_validator_no_trailing_newline(self):\n+        validator = validators.UnicodeUsernameValidator()\n+        with self.assertRaises(ValidationError):\n+            validator(\"username\\n\")\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n@@ -258,4 +270,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..c826f3e 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -22,6 +22,41 @@ class RenderToStringTest(SimpleTestCase):\n         )\n \n \n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_off_with_different_objects(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<b>bold</b>'}),\n+            'obj:<b>bold</b>\\n',\n+        )\n+        \n+    def test_autoescape_on_with_different_objects(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<b>bold</b>'}),\n+            'obj:&lt;b&gt;bold&lt;/b&gt;\\n',\n+        )\n+\n+    def test_autoescape_off_empty_context(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {}),\n+            'obj:\\n',\n+        )\n+\n+    def test_autoescape_on_empty_context(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {}),\n+            'obj:\\n',\n+        )\n+\n class GetDefaultTests(SimpleTestCase):\n \n     @override_settings(TEMPLATES=[])\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..13ccffd 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -417,7 +417,9 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n \n-    def test_file_interface(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n         r = HttpResponse()\n         r.write(b\"hello\")\n         self.assertEqual(r.tell(), 5)\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..d9867b5 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -508,6 +508,17 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, ['0001_initial'])\n \n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..4728641 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -645,7 +645,45 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, 'Add another Author-Book Relationship')\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n \n-    def test_inline_add_fk_add_perm(self):\n+    def test_inline_add_m2m_view_only_perm(self):\n+        # Add only view permission and verify inline is read-only.\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines should appear, but not allow adding new m2m relations.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+\n+    def test_inline_change_m2m_view_only_perm(self):\n+        # Add only view permission and verify inline is read-only.\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines should appear, but not allow editing existing m2m relations.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n         permission = Permission.objects.get(codename='add_inner2', content_type=self.inner_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(reverse('admin:admin_inlines_holder2_add'))\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..1d5a0d5 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,26 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_empty_fields_list(self):\n+        \"\"\"model_to_dict should return an empty dict when fields=[] is provided.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+        self.assertEqual(model_to_dict(bw, fields=None), {'id': bw.id, 'name': 'Joe Better', 'score': 10, 'writer_ptr': bw.writer_ptr.id})\n+\n+    def test_specified_fields(self):\n+        \"\"\"model_to_dict should return a dict with only the specified fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=['id', 'name']), {'id': bw.id, 'name': 'Joe Better'})\n+\n+    def test_exclude_all_fields(self):\n+        \"\"\"model_to_dict should return an empty dict when all fields are excluded.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, exclude=['id', 'name', 'score', 'writer_ptr']), {})\n+\n+    def test_exclude_some_fields(self):\n+        \"\"\"model_to_dict should return a dict without the excluded fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, exclude=['id', 'name']), {'score': 10, 'writer_ptr': bw.writer_ptr.id})\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..2585a34 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..107f0dd 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,16 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('0.{}1234'.format('0' * 299), 3, '0.000'),\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-10', 10, '0.0000000001'),\n+            ('1e-11', 10, '0.0000000000'),\n+            ('1e-201', 3, '0.000'),\n+            ('1e-299', 5, '0.00000'),\n+            ('1e-300', 5, '0.00000'),\n+            ('1e-301', 5, '0.00000'),\n+            ('5e-200', 5, '0.00000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..2c7d659 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,7 +81,35 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate_support(self):\n+        ssl_params = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'host': 'somehost',\n+            'port': '444',\n+            'sslmode': 'verify-ca',\n+            'sslrootcert': 'root.crt',\n+            'sslcert': 'client.crt',\n+            'sslkey': 'client.key',\n+        }\n+        expected_args = [\n+            'psql', \n+            '-U', 'someuser', \n+            '-h', 'somehost', \n+            '-p', '444', \n+            'dbname'\n+        ]\n+        expected_env_vars = {\n+            'PGSSLCERT': 'client.crt',\n+            'PGSSLKEY': 'client.key',\n+            'PGSSLMODE': 'verify-ca',\n+            'PGSSLROOTCERT': 'root.crt',\n+        }\n+\n+        self.assertEqual(\n+            self._run_it(ssl_params)[:-1],  # Ignoring password part\n+            (expected_args, expected_env_vars)\n+        )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..34a9231 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -82,6 +82,36 @@ class FilteredRelationTests(TestCase):\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+    \n+    def test_with_exclude_no_annotation_match(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                non_existent_book=FilteredRelation('book', condition=Q(book__title__iexact='non-existent title')),\n+            ).exclude(non_existent_book__isnull=False),\n+            [self.author1, self.author2],\n+        )\n+    \n+    def test_with_exclude_and_complex_condition(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice_or_rented=FilteredRelation(\n+                    'book', \n+                    condition=Q(\n+                        Q(book__title__iexact='poem by alice') |\n+                        Q(book__state=Book.RENTED)\n+                    ),\n+                ),\n+            ).exclude(book_alice_or_rented__isnull=False),\n+            [self.author2],\n+        )\n+\n     def test_without_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..e55a978 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -28,7 +28,20 @@ class TestUtilsHtml(SimpleTestCase):\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n+            (\"'example'\", '&#x27;example&#x27;'),\n         )\n+        # Test backward compatibility for single quote with django.utils.html.escape()\n+        backward_compatible_items = (\n+            (\"'\", '&#39;'),\n+            (\"'example'\", '&#39;example&#39;'),\n+        )\n+\n+        for value, output in backward_compatible_items:\n+            with self.subTest(value=value, output=output):\n+                for pattern in patterns:\n+                    with self.subTest(value=value, output=output, pattern=pattern):\n+                        self.check_output(original_django_escape, pattern % value, pattern % output)\n+                        self.check_output(original_django_escape, lazystr(pattern % value), pattern % output)\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n         for value, output in items:\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..da54ea2 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,7 +243,24 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n+    def test_skip_checks_command_option(self):\n+        \"\"\"\n+        Test that the --skip-checks option correctly skips the system checks\n+        when running a management command.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # This would normally trigger a system check error\n+        })\n+        \n+        # Run the command with the --skip-checks option and verify it completes without error output\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+        \n+        # Run the command without the --skip-checks option and expect system check output\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn(\"SystemCheckError:\", err)\n+        self.assertNoOutput(out)\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n         abbreviated forms of the --setting and --pythonpath options.\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..1c22dc9 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.test.utils import override_settings\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +11,41 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n-class RoutePatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_with_None_and_ROOT_URLCONF(self):\n+        \"\"\"\n+        Test that get_resolver(None) returns the same cached resolver\n+        as get_resolver(settings.ROOT_URLCONF) due to caching behavior.\n+        \"\"\"\n+        resolver_default = get_resolver()\n+        resolver_from_none = get_resolver(None)\n+        resolver_explicit = get_resolver('urlpatterns.path_urls')\n+\n+        self.assertIs(resolver_default, resolver_from_none)\n+        self.assertIs(resolver_default, resolver_explicit)\n+        self.assertIs(resolver_from_none, resolver_explicit)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_different_configs(self):\n+        \"\"\"\n+        Test that different URLConfs result in different resolver instances.\n+        \"\"\"\n+        resolver_default = get_resolver()\n+        resolver_dynamic = get_resolver('urlpatterns.path_dynamic_urls')\n+        resolver_other = get_resolver('urlpatterns.other_urlconf')\n+\n+        self.assertIsNot(resolver_default, resolver_dynamic)\n+        self.assertIsNot(resolver_default, resolver_other)\n+        self.assertIsNot(resolver_dynamic, resolver_other)\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..546c669 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -227,6 +227,52 @@ class BaseModelBackendTest:\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n \n+from django.contrib.auth import authenticate\n+from django.test import override_settings, TestCase\n+from django.contrib.auth.models import User\n+\n+class CountingMD5PasswordHasher:\n+    calls = 0\n+\n+    @classmethod\n+    def set_password(cls, password):\n+        cls.calls += 1\n+\n+class BaseModelBackendTest:\n+    UserModel = User\n+    user_credentials = {'username': 'test', 'password': 'test'}\n+\n+    def setUp(self):\n+        self.create_users()\n+\n+    def create_users(self):\n+        self.user = User.objects.create_user(email='test@example.com', **self.user_credentials)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    def test_authenticate_no_queries_if_username_none(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            authenticate(username=None, password='test')\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    def test_authenticate_no_queries_if_password_none(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            authenticate(username='test', password=None)\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n class ModelBackendTest(BaseModelBackendTest, TestCase):\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..690c1ba 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,39 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_union_can_change_column_list_with_values_list(self):\n+        ReservedName.objects.create(name='b', order=3)\n+        qs1 = ReservedName.objects.all()\n+        # Test changing from retrieving 'name' and 'order' to just 'order'\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (3,))\n+\n+    def test_union_can_change_column_list_with_values(self):\n+        ReservedName.objects.create(name='c', order=4)\n+        qs1 = ReservedName.objects.all()\n+        # Test changing from retrieving 'name' and 'order' to just 'name'\n+        reserved_name = qs1.union(qs1).values('name').get()\n+        self.assertEqual(reserved_name['name'], 'c')\n+\n+    def test_union_retrieves_full_column_set_then_reduces_with_values_list(self):\n+        ReservedName.objects.create(name='d', order=5)\n+        qs1 = ReservedName.objects.all()\n+        # Start with retrieving all columns with no filter\n+        full_reservation = qs1.union(qs1).values_list().get()\n+        # Ensure that reducing the selected columns to just 'name' works\n+        name_only = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(full_reservation[0], 'd')  # Assuming 'name' is the first field\n+        self.assertEqual(name_only, ('d',))\n+\n+    def test_union_different_values_configuration(self):\n+        ReservedName.objects.create(name='e', order=6)\n+        qs1 = ReservedName.objects.all()\n+        qs2 = ReservedName.objects.filter(order__gt=0)\n+        # Union with different column combinations\n+        self.assertCountEqual(\n+            qs1.values_list('name').union(qs2.values_list('order')),\n+            [('e',), (6,)]\n+        )\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..378e0c6 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..ece0b6b 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,7 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n \n class OrderingTests(TestCase):\n@@ -462,7 +462,25 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_with_ordering_expressions(self):\n+        # Prepare the environment\n+        author3 = Author.objects.create(name=\"Name 3\")\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2', pub_date=datetime(2005, 7, 27), author=author3\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2', pub_date=datetime(2005, 7, 27), author=self.author_1\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3', pub_date=datetime(2005, 7, 27), author=self.author_1\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+\n+        # Order by using parent model's pointer with default ordering\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+\n+        # Assert the correct order when Meta.ordering includes expressions\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..e880ea1 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -403,7 +403,25 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(aggs['distinct_ratings'], 4)\n \n-    def test_non_grouped_annotation_not_in_group_by(self):\n+    def test_distinct_on_avg(self):\n+        \"\"\"Test DISTINCT support for Avg aggregate.\"\"\"\n+        result = Book.objects.aggregate(distinct_avg=Avg('rating', distinct=True))\n+        self.assertEqual(result['distinct_avg'], 4.125)\n+\n+    def test_distinct_on_sum(self):\n+        \"\"\"Test DISTINCT support for Sum aggregate.\"\"\"\n+        result = Book.objects.aggregate(distinct_sum=Sum('rating', distinct=True))\n+        self.assertEqual(result['distinct_sum'], 16.5)\n+\n+    def test_distinct_on_aggregate(self):\n+        for aggregate, expected_result in (\n+            (Avg, 4.125),\n+            (Count, 4),\n+            (Sum, 16.5),\n+        ):\n+            with self.subTest(aggregate=aggregate.__name__):\n+                books = Book.objects.aggregate(ratings=aggregate('rating', distinct=True))\n+                self.assertEqual(books['ratings'], expected_result)\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n",
  "django__django-11740": "",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..69ae0e1 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -209,6 +209,23 @@ class CommandTests(SimpleTestCase):\n         self.assertIn('need_me', out.getvalue())\n         self.assertIn('needme2', out.getvalue())\n \n+    def test_mutually_exclusive_group_with_kwargs(self):\n+        out = StringIO()\n+        # Testing with foo_id passed as kwargs\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Testing with foo_name passed as kwargs\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Testing without any mutually exclusive arguments\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_command_add_arguments_after_common_arguments(self):\n         out = StringIO()\n         management.call_command('common_args', stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..c352e40 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,43 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_max_length_is_set_in_widget(self):\n+        \"\"\"\n+        Test that the username field in AuthenticationForm sets the maxlength \n+        attribute in the widget according to the max_length of the field.\n+        \"\"\"\n+        # Test with default User model where max_length should be 150 (or a typical value)\n+        data = {\n+            'username': 'user',\n+            'password': 'password',\n+        }\n+        User.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].max_length, 150)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 150)\n+\n+        # Test with User model having a custom max_length of 255\n+        with self.modify_user_model(CustomEmailField):\n+            data_custom_max_length = {\n+                'username': 'u' * 255,\n+                'password': 'password',\n+                'email': 'test@example.com',\n+            }\n+            CustomEmailField.objects.create_user(**data_custom_max_length)\n+            form_custom = AuthenticationForm(None, data_custom_max_length)\n+            self.assertEqual(form_custom.fields['username'].max_length, 255)\n+            self.assertEqual(form_custom.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+        # Ensure for IntegerUsernameUser the default maxlength is 254\n+        with self.override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser'):\n+            integer_username_data = {\n+                'username': '0123456',\n+                'password': 'password',\n+            }\n+            IntegerUsernameUser.objects.create_user(**integer_username_data)\n+            form_integer = AuthenticationForm(None, integer_username_data)\n+            self.assertEqual(form_integer.fields['username'].max_length, 254)\n+            self.assertEqual(form_integer.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..fdd68e3 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -306,6 +306,24 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n \n+    def test_serialize_enum_with_translations(self):\n+        from django.utils.translation import gettext_lazy as _\n+\n+        class TranslatedEnum(enum.Enum):\n+            YES = _('Yes')\n+            NO = _('No')\n+\n+        # Simulate the serialization of a translated enum\n+        field = models.CharField(default=TranslatedEnum.YES, choices=[(m.value, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('Yes', migrations.test_writer.TranslatedEnum('Yes')), \"\n+            \"('No', migrations.test_writer.TranslatedEnum('No'))], \"\n+            \"default=migrations.test_writer.TranslatedEnum('Yes'))\"\n+        )\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..e6e6fa3 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +317,41 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Set the fixed current dates for simulation\n+        current_year_cases = [\n+            datetime(2019, 11, 6, 8, 49, 37),\n+            datetime(2020, 11, 6, 8, 49, 37),\n+            datetime(2048, 11, 6, 8, 49, 37),\n+        ]\n+\n+        # Test cases based on the adjustments for years\n+        rfc850_test_cases = [\n+            ('Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            ('Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            ('Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            ('Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            ('Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        ]\n+\n+        # Adding additional test cases to thoroughly test the logic\n+        additional_cases = [\n+            ('Wednesday, 06-Nov-49 08:49:37 GMT', datetime(2049, 11, 6, 8, 49, 37)),\n+            ('Tuesday, 06-Nov-50 08:49:37 GMT', datetime(1950, 11, 6, 8, 49, 37)),\n+            ('Monday, 31-Dec-19 08:49:37 GMT', datetime(2019, 12, 31, 8, 49, 37))\n+        ]\n+\n+        for utcnow in current_year_cases:\n+            mocked_datetime.utcnow.return_value = utcnow\n+            for rfc850str, expected_date in rfc850_test_cases + additional_cases:\n+                with self.subTest(rfc850str=rfc850str):\n+                    parsed = parse_http_date(rfc850str)\n+                    self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11880": "",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..0f52ae6 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -203,6 +205,27 @@ class BulkCreateTests(TestCase):\n \n     def test_empty_model(self):\n         NoFields.objects.bulk_create([NoFields() for i in range(2)])\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size_additional(self):\n+        # Additional test case to ensure batch size logic is correct\n+        objs = [Country(name=f\"Country {i}\") for i in range(1500)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        \n+        # Ensure the default calculation without informing batch_size\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs)\n+\n+        # Test with explicit batch_size smaller than max_batch_size\n+        small_batch_size = max_batch_size // 2\n+        with self.assertNumQueries(ceil(len(objs) / small_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=small_batch_size)\n+\n+        # Test with explicit batch_size larger than max_batch_size\n+        large_batch_size = max_batch_size + 10  # Larger than max_batch_size\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=large_batch_size)\n         self.assertEqual(NoFields.objects.count(), 2)\n \n     @skipUnlessDBFeature('has_bulk_insert')\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..cc49b96 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -39,8 +39,33 @@ class Gender(models.TextChoices):\n \n     __empty__ = '(Undeclared)'\n \n+from django.test import TestCase\n+from django.db import models\n \n class ChoicesTests(SimpleTestCase):\n+    def test_enum_behaviour_in_model_field(self):\n+        class SimpleCharEnum(models.TextChoices):\n+            OPTION_1 = \"opt1\", \"Option 1\"\n+            OPTION_2 = \"opt2\", \"Option 2\"\n+\n+        class SampleModel(models.Model):\n+            test_field = models.CharField(max_length=10, choices=SimpleCharEnum.choices)\n+\n+        instance = SampleModel(test_field=SimpleCharEnum.OPTION_1)\n+        instance.save()\n+        instance.refresh_from_db()\n+\n+        # Ensure direct access returns a str\n+        self.assertIsInstance(instance.test_field, str)\n+        self.assertEqual(instance.test_field, SimpleCharEnum.OPTION_1)\n+\n+        # Ensure created instance accesses the correct string value\n+        self.assertEqual(str(instance.test_field), \"opt1\")\n+\n+        # Retrieve from database should also return str\n+        retrieved = SampleModel.objects.get(pk=instance.pk)\n+        self.assertIsInstance(retrieved.test_field, str)\n+        self.assertEqual(retrieved.test_field, \"opt1\")\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..c305c5e 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -147,8 +147,24 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.test import TestCase\n+from django.db import models\n+\n+class FooBar(models.Model):\n+    foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+    def get_foo_bar_display(self):\n+        return \"something\"\n+\n+class OverridingFieldDisplayTests(TestCase):\n+\n+    def test_overriding_FIELD_display(self):\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n \n-class GetFieldDisplayTests(SimpleTestCase):\n+    def test_get_FIELD_display_should_return_choice_value(self):\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(super(FooBar, f).get_foo_bar_display(), 'foo')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12039": "",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..92d595d 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,7 +1,8 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n-from django.db.models import CharField, F, Q\n+from django.db.models import CharField, F, Q, Value\n from django.db.models.expressions import SimpleCol\n from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n@@ -107,7 +108,21 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_resolve_lookup_value_list_remains_list(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertIsInstance(name_exact.rhs, list)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_resolve_lookup_value_tuple_remains_tuple(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertIsInstance(name_exact.rhs, tuple)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..39d2f01 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -269,8 +269,40 @@ class WriterTests(SimpleTestCase):\n             [list, tuple, dict, set, frozenset],\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n-\n-    def test_serialize_lazy_objects(self):\n+    \n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class TestModel(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field_string, imports = MigrationWriter.serialize(TestModel._meta.get_field('field'))\n+        expected_class_path = \"tests.migrations.test_writer.Outer.Inner\"\n+        \n+        self.assertEqual(\n+            field_string,\n+            f\"models.CharField(max_length=20)\",\n+        )\n+        self.assertIn(expected_class_path, imports)\n+\n+    def test_serialize_nested_enum_field(self):\n+        import enum\n+        from enumfields import Enum, EnumField\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+            state = EnumField(enum=State)\n+\n+        field_string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        expected_class_path = \"tests.migrations.test_writer.Thing.State\"\n+        \n+        self.assertIn(expected_class_path, field_string)\n+        self.assertIn('enumfields.fields.EnumField', imports)\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n@@ -746,4 +778,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..f6e434a 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -835,6 +835,51 @@ class ChangeListTests(TestCase):\n         self.client.force_login(superuser)\n         changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n         m = SwallowAdmin(Swallow, custom_site)\n+\n+    def test_get_list_editable_queryset_with_regex_chars_in_prefix(self):\n+        \"\"\"Test if queryset is filtered correctly with regex special characters in the prefix.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form$-TOTAL_FORMS': '2',\n+            'form$-INITIAL_FORMS': '2',\n+            'form$-MIN_NUM_FORMS': '0',\n+            'form$-MAX_NUM_FORMS': '1000',\n+            'form$-0-uuid': str(a.pk),\n+            'form$-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$')\n+        self.assertEqual(queryset.count(), 1)\n+\n+    def test_get_list_editable_queryset_with_empty_prefix(self):\n+        \"\"\"Test behavior when prefix is an empty string.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            '-TOTAL_FORMS': '2',\n+            '-INITIAL_FORMS': '2',\n+            '-MIN_NUM_FORMS': '0',\n+            '-MAX_NUM_FORMS': '1000',\n+            '-0-uuid': str(a.pk),\n+            '-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='')\n+        self.assertEqual(queryset.count(), 1)\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 1)\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..508f072 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,4 +1,6 @@\n+\n import unittest\n+from django.test.utils import captured_stderr\n \n from django.contrib.admindocs.utils import (\n     docutils_is_available, parse_docstring, parse_rst, trim_docstring,\n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..ba48445 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1102,8 +1102,33 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n                 }\n             }\n         )\n-\n-    def test_render(self):\n+    def test_splitarrayfield_boolean(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [True, False, False, True])\n+        \n+        # Check that the values are correctly transferred.\n+        self.assertEqual(\n+            context['widget']['value'], '[True, False, False, True]'\n+        )\n+        \n+        checked_status = [subwidget['attrs'].get('checked', False) for subwidget in context['widget']['subwidgets']]\n+        \n+        # Ensure correct 'checked' attribute propagation per value\n+        self.assertEqual(checked_status, [True, False, False, True])\n+\n+    def test_splitarrayfield_boolean_edge_case(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, True, False])\n+        \n+        # Check that the values are correctly reflected\n+        self.assertEqual(\n+            context['widget']['value'], '[False, True, False]'\n+        )\n+        \n+        checked_status = [subwidget['attrs'].get('checked', False) for subwidget in context['widget']['subwidgets']]\n+        \n+        # Ensure 'checked' remains accurate for each value\n+        self.assertEqual(checked_status, [False, True, False])\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n             \"\"\"\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..fe69b19 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -252,8 +252,12 @@ class SmallPKData(models.Model):\n # class TimePKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n+import uuid\n+from django.db import models\n \n-class UUIDData(models.Model):\n+class UUIDDefaultData(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+    name = models.CharField(max_length=100, blank=True)\n     data = models.UUIDField(primary_key=True)\n \n \n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..6c7553b 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,8 +77,23 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world - Expected result: hi world'),\n+            ('{% load custom %}{% hello %}', 'hello world - Expected result: hello world'),\n+            # Here is the expected error message when a keyword argument is provided twice.\n+            (\n+                \"'hello' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'\n+            ),\n         ]\n \n+        for entry in templates:\n+            if isinstance(entry, tuple):\n+                t = self.engine.from_string(entry[0])\n+                self.assertEqual(t.render(c), entry[1])\n+            else:\n+                with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                    t = self.engine.from_string(entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -101,8 +116,23 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world - Expected result: hi world'),\n+            ('{% load custom %}{% hello %}', 'hello world - Expected result: hello world'),\n+            # Here is the expected error message when a keyword argument is provided twice.\n+            (\n+                \"'hello' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'\n+            ),\n         ]\n \n+        for entry in templates:\n+            if isinstance(entry, tuple):\n+                t = self.engine.from_string(entry[0])\n+                self.assertEqual(t.render(c), entry[1])\n+            else:\n+                with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                    t = self.engine.from_string(entry[1])\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -190,8 +220,23 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world - Expected result: hi world'),\n+            ('{% load custom %}{% hello %}', 'hello world - Expected result: hello world'),\n+            # Here is the expected error message when a keyword argument is provided twice.\n+            (\n+                \"'hello' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'\n+            ),\n         ]\n \n+        for entry in templates:\n+            if isinstance(entry, tuple):\n+                t = self.engine.from_string(entry[0])\n+                self.assertEqual(t.render(c), entry[1])\n+            else:\n+                with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                    t = self.engine.from_string(entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n",
  "django__django-12276": "",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..e7619ec 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,27 @@\n+\n+class YearInSchool(models.TextChoices):\n+    FRESHMAN = 'FR', _('Freshman')\n+    SOPHOMORE = 'SO', _('Sophomore')\n+    JUNIOR = 'JR', _('Junior')\n+    SENIOR = 'SR', _('Senior')\n+\n+\n+class EnumerationTemplateTests(SimpleTestCase):\n+    def test_integer_choices_in_template(self):\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        output = template.render(Context({'Suit': Suit}))\n+        self.assertEqual(output, 'Diamond|1')\n+\n+    def test_text_choices_in_template(self):\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Yes{% else %}No{% endif %}')\n+        output = template.render(Context({'YearInSchool': YearInSchool, 'student': {'year_in_school': 'FR'}}))\n+        self.assertEqual(output, 'Yes')\n+\n+    def test_text_choices_access_label_value(self):\n+        template = Template('{{ YearInSchool.FRESHMAN.label }}|{{ YearInSchool.FRESHMAN.value }}')\n+        output = template.render(Context({'YearInSchool': YearInSchool}))\n+        self.assertEqual(output, 'Freshman|FR')\n+\n import datetime\n import decimal\n import ipaddress\n@@ -6,6 +30,7 @@ import uuid\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..8a23dd2 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1006,6 +1006,34 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(ShippingMethod.check(), [])\n \n+    def test_multiple_onetoone_references_order(self):\n+        \"\"\"\n+        Test to ensure the order of OneToOneFields does not affect MTI relationships,\n+        and that the parent_link can be correctly set independent of declaration order.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        class PickingOrderOne(Document):\n+            document_ptr = models.OneToOneField(\n+                Document, on_delete=models.CASCADE, parent_link=True, related_name='+'\n+            )\n+            origin = models.OneToOneField(\n+                Document, related_name='picking', on_delete=models.PROTECT\n+            )\n+\n+        self.assertEqual(PickingOrderOne.check(), [])\n+\n+        class PickingOrderTwo(Document):\n+            origin = models.OneToOneField(\n+                Document, related_name='picking', on_delete=models.PROTECT\n+            )\n+            document_ptr = models.OneToOneField(\n+                Document, on_delete=models.CASCADE, parent_link=True, related_name='+'\n+            )\n+\n+        self.assertEqual(PickingOrderTwo.check(), [])\n+\n     def test_missing_parent_link(self):\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..397c82f 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,6 +231,14 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        When SECURE_REFERRER_POLICY is not set, the Referrer-Policy should \n+        default to 'same-origin'.\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n+\n     def test_referrer_policy_on(self):\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n@@ -254,4 +262,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..de29422 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -20,6 +20,7 @@ from django.db.models.functions import (\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.utils.functional import SimpleLazyObject\n from django.test.utils import Approximate, isolate_apps\n \n from .models import (\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..f4e6ac3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..0f97947 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,8 +2444,34 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    from django.db import models\n+    from django.test import TestCase\n+    from django.db.migrations.state import ModelState\n \n-    def test_mti_inheritance_model_removal(self):\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Test that ensures a field is removed from a base model before adding\n+        a new model with a field of the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n@@ -2453,4 +2479,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..703dad4 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -12,6 +12,7 @@ from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n+    SeasonWithUniqueConstraint,\n )\n \n \n@@ -194,7 +195,43 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = SeasonWithUniqueConstraint.objects.create(year=2011)\n+        season_2012 = SeasonWithUniqueConstraint.objects.create(year=2012)\n+        SeasonWithUniqueConstraint.objects.create(year=2013)\n+        self.assertEqual(\n+            SeasonWithUniqueConstraint.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constaint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(brand='Acme')\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..312a10f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1825,6 +1825,29 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n-    def test_reversed_or(self):\n+    class ExpressionWrapperTests(SimpleTestCase):\n+        def test_empty_group_by(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+        def test_non_empty_group_by(self):\n+            expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+        def test_constant_expression_not_in_group_by(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b')).query\n+            # Simulate the inspection of the SQL part\n+            sql_query = str(query)\n+            self.assertNotIn('GROUP BY \"model\".\"column_a\", 3', sql_query)\n+            self.assertIn('GROUP BY \"model\".\"column_a\"', sql_query)\n+        \n+        def test_non_constant_expression_in_group_by(self):\n+            expr = ExpressionWrapper(Lower(Value('field_name')), output_field=IntegerField())\n+            query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b')).query\n+            # Simulate the inspection of the SQL part\n+            sql_query = str(query)\n+            # Assuming Lower(Value('field_name')) results in a valid GROUP BY expression\n+            self.assertIn('\"model\".\"column_a\",', sql_query) # Expecting the actual column transformation\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a43cfb4..4efa1a7 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -63,6 +63,17 @@ class DateTimePK(models.Model):\n     date = models.DateTimeField(primary_key=True, auto_now_add=True)\n \n \n+class ProductMetaDataType(models.Model):\n+    label = models.CharField(max_length=255, unique=True, blank=False, null=False)\n+    filterable = models.BooleanField(default=False)\n+\n+\n+class ProductMetaData(models.Model):\n+    product = models.ForeignKey('Product', null=False, blank=False, on_delete=models.CASCADE)\n+    value = models.TextField(null=False, blank=False)\n+    metadata_type = models.ForeignKey(ProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE)\n+\n+\n class ExtraInfo(models.Model):\n     info = models.CharField(max_length=100)\n     note = models.ForeignKey(Note, models.CASCADE, null=True)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..42bc66a 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,32 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk_behavior(self):\n+        # Setup authors and articles similar to the self-referential case described\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\", editor=author_1)\n+        author_3 = Author.objects.create(name=\"Author 3\", editor=author_2)\n+\n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article_2 = Article.objects.create(author=author_2, headline=\"Article 2\", pub_date=\"2023-01-02\")\n+        article_3 = Article.objects.create(author=author_3, headline=\"Article 3\", pub_date=\"2023-01-03\")\n+\n+        # The problematic queryset with ordering by self-referential fk\n+        queryset = Article.objects.filter(author__isnull=False).order_by('author__editor_id')\n+        self.assertQuerysetEqual(\n+            queryset,\n+            ['Article 1', 'Article 2', 'Article 3'],\n+            attrgetter('headline')\n+        )\n+\n+        # Check inverse order to ensure proper handling\n+        queryset_inverted = Article.objects.filter(author__isnull=False).order_by('-author__editor_id')\n+        self.assertQuerysetEqual(\n+            queryset_inverted,\n+            ['Article 3', 'Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..abe7bbd 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,6 +1645,34 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n+class ForeignKeyBaseManagerTests(TestCase):\n+    \n+    def setUp(self):\n+        # Create an archived article\n+        self.article = Article.objects.create(title='Test Article', archived=True)\n+\n+    def test_foreign_key_validation_with_base_manager(self):\n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteAricles  # Assume the corrected spelling\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                # Use base manager to allow archived articles\n+                self.fields['article'].queryset = Article._base_manager.all()\n+        \n+        # Form data includes an archived article\n+        form_data = {'article': self.article.pk}\n+        form = FavoriteArticleForm(data=form_data)\n+        self.assertTrue(form.is_valid(), \"The form should be valid for archived articles using base manager.\")\n+\n+\n+import datetime\n+from django.test import TestCase\n+from django import forms\n+from .models import Article, FavoriteAricles  # Assuming FavoriteArticles typo correction is made there\n+\n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..71fcdd6 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -864,6 +864,26 @@ class StateTests(SimpleTestCase):\n             \"The field migrations.Magazine_authors.author was declared with a lazy reference \"\n             \"to 'migrations.author', but app 'migrations' doesn't provide model 'author'.\"\n         )\n+\n+    def test_foreign_key_with_mixed_case_app_label(self):\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCaseApp'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCaseApp'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n",
  "django__django-13121": "",
  "django__django-13128": "",
  "django__django-13158": "",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..2cb9507 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,7 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -312,6 +313,16 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n+    def test_decode_legacy_incorrect_format(self):\n+        # Test scenario where encoded data does not split properly and raises a ValueError\n+        bad_legacy_encoded = (\n+            'OWUzNTNmNWQxNTBjOWExZmM4MmQ3NzNhMDRmMjU4NmYwNEYyOWI2NDp7ImEgdGVst'\n+        )\n+        self.assertEqual(\n+            self.session._legacy_decode(bad_legacy_encoded),\n+            {}, # Should return an empty dictionary due to malformed session data\n+        )\n+        \n     def test_decode_legacy(self):\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n@@ -323,6 +334,14 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        # Verify that legacy decode works in conjunction with sha1 during the transition to Django 3.1\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n     def test_decode_failure_logged_to_security(self):\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..8dc8738 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -1,10 +1,20 @@\n import time\n \n+# Adding a model class Account for testing purposes\n+from django.db import models\n+\n+class Account(models.Model):\n+    slug = models.SlugField(unique=True)\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.http import HttpResponse\n from django.test import (\n-    RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n+    RequestFactory, SimpleTestCase, ignore_warnings, override_settings, TestCase,\n )\n+from django.shortcuts import get_object_or_404\n+from django.urls import path\n+from django.utils.functional import SimpleLazyObject\n+from django.views.generic import TemplateView\n from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -570,7 +580,23 @@ class SingleObjectTemplateResponseMixinTest(SimpleTestCase):\n             view.get_template_names()\n \n \n-@override_settings(ROOT_URLCONF='generic_views.urls')\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_simple_lazy_object_issue(self):\n+        \"\"\"Test to ensure SimpleLazyObject in kwargs is handled correctly.\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+    \n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get('offer_slug', '')\n+                offer_slug = str(offer_slug)  # Ensuring resolution of SimpleLazyObject\n+                offer = get_object_or_404(Account, slug=offer_slug)\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+        \n+        # Setup test\n+        offer_slug = 'test-offer'\n+        account = Account.objects.create(slug=offer_slug)\n+        response = self.client.get(f'/offers/{offer_slug}/')  # Note: Normally, we'd need to add this URL and view.\n+        self.assertEqual(response.context_data['offer'], account)\n class DeprecationTests(SimpleTestCase):\n     @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_template_params(self):\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..1b395b7 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2829,8 +2830,50 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+class LimitChoicesToTests(TestCase):\n+    def setUp(self):\n+        self.threepwood = Character.objects.create(username='Guybrush Threepwood', last_action='2023-10-13')\n+        self.marley = Character.objects.create(username='Elaine Marley', last_action='2023-10-13')\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        \n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n \n-class FormFieldCallbackTests(SimpleTestCase):\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..3c1c6aa 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -912,6 +912,16 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n         self.assertIsInstance(obj.storage_callable_class.storage, BaseStorage)\n \n+    def test_deconstruction_with_callable(self):\n+        \"\"\"\n+        Test that deconstructing a FileField with callable storage returns\n+        the original callable, not the evaluated storage.\n+        \"\"\"\n+        obj = Storage()\n+        _, _, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..ad6c3b2 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,6 +632,34 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n+    def test_key_in_lookup(self):\n+        # This test will help verify that the __in lookup issue is resolved.\n+        # We will test the scenario described in the issue with JSONField key transformations.\n+\n+        # We assume self.objs is pre-populated with appropriate test data for these assertions.\n+\n+        # Setup test data.\n+        items_matching_0 = [self.objs[i] for i in range(10, 20)]  # Assuming these objs have 'key': 0\n+        items_not_matching = []  # No objs with 'key' other than 0\n+        \n+        # Test __in lookup for a single value\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__key__in=[0]),\n+            items_matching_0,\n+        )\n+\n+        # Test __in lookup for multiple values, assuming some items match 0 and others match 1 \n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__key__in=[0, 1]),\n+            items_matching_0 + items_not_matching,\n+        )\n+\n+        # Test empty list - should return no matches\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__key__in=[]),\n+            [],\n+        )\n+\n     def test_key_icontains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..e4a3c78 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -1136,6 +1136,38 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n     def test_trunc_ambiguous_and_invalid_times(self):\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n+\n+    def test_truncdate_with_different_timezones(self):\n+        start_datetime = datetime(2023, 10, 15, 15, 30, 45)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        ny = pytz.timezone(\"America/New_York\")\n+        la = pytz.timezone(\"America/Los_Angeles\")\n+\n+        model = DTModel.objects.annotate(\n+            new_york_date=TruncDate('start_datetime', tzinfo=ny),\n+            los_angeles_date=TruncDate('start_datetime', tzinfo=la),\n+        ).get()\n+\n+        self.assertEqual(model.new_york_date, start_datetime.astimezone(ny).date())\n+        self.assertEqual(model.los_angeles_date, start_datetime.astimezone(la).date())\n+\n+    def test_trunctime_with_different_timezones(self):\n+        start_datetime = datetime(2023, 10, 15, 15, 30, 45)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        ny = pytz.timezone(\"America/New_York\")\n+        la = pytz.timezone(\"America/Los_Angeles\")\n+\n+        model = DTModel.objects.annotate(\n+            new_york_time=TruncTime('start_datetime', tzinfo=ny),\n+            los_angeles_time=TruncTime('start_datetime', tzinfo=la),\n+        ).get()\n+\n+        self.assertEqual(model.new_york_time, start_datetime.astimezone(ny).time())\n+        self.assertEqual(model.los_angeles_time, start_datetime.astimezone(la).time())\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n         end_datetime = utc.localize(datetime(2016, 2, 21, 1))\n         self.create_model(start_datetime, end_datetime)\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..1d38977 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -102,8 +102,42 @@ class BasicFieldTests(SimpleTestCase):\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n+class ModelFieldInheritanceTests(SimpleTestCase):\n+    def test_inherited_fields_not_equal(self):\n+        \"\"\"Test fields from different inherited classes are not equal.\"\"\"\n+        class AbstractBase(models.Model):\n+            myfield = models.IntegerField()\n \n-class ChoicesTests(SimpleTestCase):\n+            class Meta:\n+                abstract = True\n+\n+        class Model1(AbstractBase):\n+            pass\n+\n+        class Model2(AbstractBase):\n+            pass\n+\n+        field1 = Model1._meta.get_field('myfield')\n+        field2 = Model2._meta.get_field('myfield')\n+\n+        self.assertNotEqual(field1, field2, \"Fields from different models should not be equal.\")\n+        self.assertNotEqual(hash(field1), hash(field2), \"Hash values of fields from different models should differ.\")\n+        self.assertTrue(field1 < field2 or field1 > field2, \"Fields should be totally ordered based on creation_counter for comparison.\")\n+\n+    def test_same_model_fields_equal(self):\n+        \"\"\"Test fields in the same model compare equal to themselves.\"\"\"\n+        class SingleModel(models.Model):\n+            myfield1 = models.IntegerField()\n+            myfield2 = models.IntegerField()\n+\n+        field1 = SingleModel._meta.get_field('myfield1')\n+        field1_alias = SingleModel._meta.get_field('myfield1')\n+        field2 = SingleModel._meta.get_field('myfield2')\n+\n+        self.assertEqual(field1, field1_alias, \"Fields from the same model with the same name should be equal.\")\n+        self.assertEqual(hash(field1), hash(field1_alias), \"Fields with the same name should have the same hash value.\")\n+        self.assertNotEqual(field1, field2, \"Different fields in the same model should not be equal.\")\n+        self.assertNotEqual(hash(field1), hash(field2), \"Different fields in the same model should have different hash values.\")\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..a978913 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,64 @@\n+\n+class FileLockTestCase(unittest.TestCase):\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        # Create a file for testing\n+        with open(file_path, 'wb') as f:\n+            f.write(b'Test content')\n+\n+        with open(file_path, 'rb') as f1, open(file_path, 'rb') as f2:\n+            # Attempt to acquire an exclusive lock on the first file\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            # Attempt to acquire an exclusive lock non-blockingly on the second file\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            # Attempt to acquire a shared lock non-blockingly on the second file\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            # Release the lock on the first file\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        # Create a file for testing\n+        with open(file_path, 'wb') as f:\n+            f.write(b'Test content')\n+\n+        with open(file_path, 'rb') as f1, open(file_path, 'rb') as f2:\n+            # Attempt to acquire a shared lock on the first file\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            # Attempt to acquire a shared lock non-blockingly on the second file\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            # Release the lock on the first file\n+            self.assertIs(locks.unlock(f1), True)\n+            # Release the lock on the second file\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_unlock_unlocked_file(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'rb') as f:\n+            # Attempt to unlock a file that has no locks\n+            self.assertIs(locks.unlock(f), True)\n+\n+    def test_blocks_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'rb') as f1, open(file_path, 'rb') as f2:\n+            # Acquire an exclusive lock on the first file\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            # Attempt to blockingly acquire an exclusive lock on the second file\n+            # This would normally block indefinitely, but we simulate/illustrate purpose\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX), False)\n+            # Release the lock on the first file\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_to_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'rb') as f1:\n+            # Acquire a shared lock on the file\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            # Attempt to upgrade to an exclusive lock (blocking)\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            # Release the lock\n+            self.assertIs(locks.unlock(f1), True)\n+\n import errno\n import gzip\n import os\n@@ -8,7 +69,8 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n+from pathlib import Path\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..219c6e0 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2076,7 +2076,15 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_empty_queryset(self):\n         self.assertIs(Annotation.objects.none().ordered, True)\n \n-    def test_order_by_extra(self):\n+    def test_annotated_default_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Annotation.objects.values('name').annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n         self.assertIs(Annotation.objects.all().extra(order_by=['id']).ordered, True)\n \n     def test_annotated_ordering(self):\n",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..cc775d6 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -342,6 +342,31 @@ class CommandTests(SimpleTestCase):\n         self.assertEqual(parser.epilog, epilog)\n \n \n+from io import StringIO\n+from unittest import mock\n+from django.core import management\n+from django.core.management.base import BaseCommand\n+\n+class OutputWrapperTest(BaseCommand):\n+    def handle(self, **options):\n+        self.stdout.write('Starting migration...')\n+        self.stdout.flush()\n+        import time\n+        time.sleep(1)  # Simulate long migration task\n+        self.stdout.write('Intermediate step...')\n+        self.stdout.flush()\n+        time.sleep(1)  # Continue simulating long task\n+        self.stdout.write('Migration complete.')\n+    \n+    def test_handle_with_flush(self):\n+        out = StringIO()\n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            management.call_command('test_outputwrapper', stdout=out)\n+            self.assertIn('Starting migration...', out.getvalue())\n+            self.assertIn('Intermediate step...', out.getvalue())\n+            self.assertIn('Migration complete.', out.getvalue())\n+            self.assertTrue(mocked_flush.called)\n+\n class CommandRunTests(AdminScriptTestCase):\n     \"\"\"\n     Tests that need to run by simulating the command line, not by call_command.\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..4ef2a3f 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n@@ -16,9 +17,44 @@ class MockedPasswordResetTokenGenerator(PasswordResetTokenGenerator):\n     def _now(self):\n         return self._now_val\n \n+from .models.with_custom_email_field import CustomEmailField\n \n class TokenGeneratorTest(TestCase):\n \n+    def test_token_invalid_after_email_change(self):\n+        \"\"\"\n+        Test that a password reset token is invalidated after the user's email\n+        address is changed.\n+        \"\"\"\n+        user = User.objects.create_user('changemailuser', 'test5@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)  # Token should be valid initially\n+\n+        # Change user's email\n+        user.email = 'test5changed@example.com'\n+        user.save()\n+\n+        # Token should now be invalid\n+        self.assertIs(p0.check_token(user, tk1), False)\n+\n+    def test_token_invalid_after_email_change_custom_field(self):\n+        \"\"\"\n+        Test that a password reset token is invalidated after the CustomEmailField user's\n+        email address is changed.\n+        \"\"\"\n+        user = CustomEmailField.objects.create_user('changemailuser', 'customtest5@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)  # Token should be valid initially\n+\n+        # Change user's email in custom field model\n+        user.email_address = 'customtest5changed@example.com'\n+        user.save()\n+\n+        # Token should now be invalid\n+        self.assertIs(p0.check_token(user, tk1), False)\n+\n     def test_make_token(self):\n         user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n         p0 = PasswordResetTokenGenerator()\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..86be898 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,7 +1,9 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n+from django.db.models import Q, UniqueConstraint  # Add the required imports for new test cases\n from django.core import checks\n from django.db import models\n from django.test import (\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..aa33abe 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1310,8 +1310,22 @@ class AggregateTestCase(TestCase):\n             contact_publisher__isnull=False,\n         ).annotate(count=Count('authors'))\n         self.assertSequenceEqual(books_qs, [book])\n+\n+    def test_random_order_by_does_not_break_group_by(self):\n+        \"\"\"\n+        Test that using order_by('?') does not unintentionally break\n+        the GROUP BY aggregation.\n+        \"\"\"\n+        t = Thing.objects.create()\n+        rs = [Related.objects.create(thing=t) for _ in range(2)]\n+        \n+        # Annotate the Thing object with a count of related items and order randomly.\n+        queryset = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+        \n+        # Ensure that random ordering does not break the aggregation count in the results.\n+        self.assertEqual(list(queryset), [{'id': t.id, 'rc': 2}])\n         # FIXME: GROUP BY doesn't need to include a subquery with\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..241590c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n@@ -875,6 +877,25 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'],\n             ordered=False\n         )\n+\n+    def test_range_lookup_with_namedtuple(self):\n+        # This test verifies using a namedtuple as the range argument.\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(num_employees__range=EmployeeRange(minimum=51, maximum=100))\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_with_normal_tuple(self):\n+        # Ensure normal tuples work as expected for control.\n+        qs = Company.objects.filter(num_employees__range=(51, 100))\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_with_namedtuple_fails_in_old_versions(self):\n+        # Simulate the failure condition (showing what would happen before the fix)\n+        # For demonstration purposes, left here commented out.\n+        # EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        # with self.assertRaises(TypeError):\n+        #     Company.objects.filter(num_employees__range=EmployeeRange(minimum=51, maximum=100))\n+        pass\n         self.assertQuerysetEqual(\n             Company.objects.filter(num_employees__range=(1, 100)),\n             [\n@@ -884,6 +905,25 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_with_namedtuple(self):\n+        # This test verifies using a namedtuple as the range argument.\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(num_employees__range=EmployeeRange(minimum=51, maximum=100))\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_with_normal_tuple(self):\n+        # Ensure normal tuples work as expected for control.\n+        qs = Company.objects.filter(num_employees__range=(51, 100))\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_with_namedtuple_fails_in_old_versions(self):\n+        # Simulate the failure condition (showing what would happen before the fix)\n+        # For demonstration purposes, left here commented out.\n+        # EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        # with self.assertRaises(TypeError):\n+        #     Company.objects.filter(num_employees__range=EmployeeRange(minimum=51, maximum=100))\n+        pass\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..59d3532 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -16,6 +16,7 @@ from unittest import mock\n \n from django import conf, get_version\n from django.conf import settings\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n@@ -31,8 +32,42 @@ from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n-\n-custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n+class ExecuteFromCommandLineTest(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_when_sys_argv_empty_string(self):\n+        \"\"\"\n+        Test when sys.argv[0] is an empty string. The program name should still\n+        be taken from the passed argv, not from sys.argv.\n+        \"\"\"\n+        args = ['help', 'runserver']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [''] + args):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin runserver', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_when_sys_argv_has_weird_value(self):\n+        \"\"\"\n+        Test when sys.argv[0] has a weird value. The program name should still\n+        be taken from the passed argv.\n+        \"\"\"\n+        args = ['help', 'migrate']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['weird_value'] + args):\n+                execute_from_command_line(['custom-django'] + args)\n+        self.assertIn('usage: custom-django migrate', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..8ad5a6f 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,4 +1,6 @@\n+\n from datetime import date, datetime\n+from django.utils import dateformat\n \n from django.test import SimpleTestCase, override_settings\n from django.test.utils import TZ_SUPPORT, requires_tz_support\n@@ -61,7 +63,21 @@ class DateFormatTests(SimpleTestCase):\n         udt = datetime(1970, 1, 1, tzinfo=utc)\n         self.assertEqual(format(udt, 'U'), '0')\n \n-    def test_empty_format(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (1000, '00'), # this should still return '00' because only the last two digits are considered\n+            (1001, '01'), # checking year just above 1000 to ensure no regression\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = datetime(1979, 7, 8, 22, 00)\n \n         self.assertEqual(dateformat.format(my_birthday, ''), '')\n@@ -164,4 +180,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..70e9f98 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,7 +1020,21 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_field_is_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n+    def test_readonly_field_bound_data(self):\n+        field = ReadOnlyPasswordHashField()\n+        initial_value = \"initial_password_hash\"\n+        data_value = \"data_password_hash\"\n+        # Assert that bound_data always returns the initial value\n+        self.assertEqual(field.bound_data(data_value, initial_value), initial_value)\n+\n+    def test_readonly_field_initialization(self):\n+        # Test with custom initialization and ensure 'disabled' is set to True.\n+        field = ReadOnlyPasswordHashField(required=True)\n+        self.assertIs(field.disabled, True)\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..a1e32eb 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,8 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n+from django.utils.translation import gettext_lazy, lazy\n from ..utils import setup\n \n \n@@ -46,6 +48,27 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n \n class FunctionTests(SimpleTestCase):\n \n",
  "django__django-13807": "",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..ef48666 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,16 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+from django.core.management import call_command\n+from io import StringIO\n+import mock\n+from django.test import TestCase\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from unittest.mock import patch\n+from django.utils.module_loading import import_module\n+from django.conf import settings\n+from django.test.utils import override_settings\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n@@ -1343,6 +1353,46 @@ class ManageRunserverMigrationWarning(TestCase):\n         )\n \n \n+class ManageRunserverSkipChecks(TestCase):\n+\n+    def setUp(self):\n+        self.output = StringIO()\n+\n+    @patch('django.core.management.commands.runserver.Command.check')\n+    def test_skip_checks(self, mocked_check):\n+        # Test that system checks are skipped when skip_checks=True\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+        # Clear output and test with skip_checks=False\n+        self.output.truncate(0)\n+        self.output.seek(0)\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.output,\n+        )\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n+\n+    @patch('django.core.management.commands.runserver.Command.inner_run')\n+    def test_runserver_executes_with_skip_checks(self, mocked_inner_run):\n+        # Ensure runserver still executes inner_run with skip_checks flag\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        mocked_inner_run.assert_called()\n+\n class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n     def setUp(self):\n         super().setUp()\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..e500db5 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -187,6 +188,18 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n     ROOT_URLCONF='middleware_exceptions.urls',\n )\n class MiddlewareSyncAsyncTests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_dummy_middleware_affect_async(self):\n+        # Verifying that DummyMiddleware and SyncAndAsyncMiddleware can coexist\n+        # without poisoning the middleware chain in an async request.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n@@ -194,6 +207,18 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_dummy_middleware_affect_async(self):\n+        # Verifying that DummyMiddleware and SyncAndAsyncMiddleware can coexist\n+        # without poisoning the middleware chain in an async request.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.DecoratedPaymentMiddleware',\n     ])\n@@ -201,6 +226,18 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_dummy_middleware_affect_async(self):\n+        # Verifying that DummyMiddleware and SyncAndAsyncMiddleware can coexist\n+        # without poisoning the middleware chain in an async request.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n@@ -215,6 +252,18 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_dummy_middleware_affect_async(self):\n+        # Verifying that DummyMiddleware and SyncAndAsyncMiddleware can coexist\n+        # without poisoning the middleware chain in an async request.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware',\n     ])\n@@ -227,6 +276,18 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             self.client.get('/middleware_exceptions/view/')\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_dummy_middleware_affect_async(self):\n+        # Verifying that DummyMiddleware and SyncAndAsyncMiddleware can coexist\n+        # without poisoning the middleware chain in an async request.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n@@ -240,6 +301,18 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"middleware_exceptions.middleware.PaymentMiddleware adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_dummy_middleware_affect_async(self):\n+        # Verifying that DummyMiddleware and SyncAndAsyncMiddleware can coexist\n+        # without poisoning the middleware chain in an async request.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n@@ -266,6 +339,18 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             self.client.get('/middleware_exceptions/template_response/')\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_dummy_middleware_affect_async(self):\n+        # Verifying that DummyMiddleware and SyncAndAsyncMiddleware can coexist\n+        # without poisoning the middleware chain in an async request.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n@@ -274,6 +359,18 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         self.assertEqual(response.content, b'OK')\n         self.assertEqual(response.status_code, 200)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_dummy_middleware_affect_async(self):\n+        # Verifying that DummyMiddleware and SyncAndAsyncMiddleware can coexist\n+        # without poisoning the middleware chain in an async request.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n@@ -285,6 +382,18 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n \n @override_settings(ROOT_URLCONF='middleware_exceptions.urls')\n class AsyncMiddlewareTests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_dummy_middleware_affect_async(self):\n+        # Verifying that DummyMiddleware and SyncAndAsyncMiddleware can coexist\n+        # without poisoning the middleware chain in an async request.\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.AsyncTemplateResponseMiddleware',\n     ])\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..3b0c325 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,7 +1,7 @@\n+\n import compileall\n import os\n-\n-from django.db import connection, connections\n+from importlib import import_module\n from django.db.migrations.exceptions import (\n     AmbiguityError, InconsistentMigrationHistory, NodeNotFoundError,\n )\n@@ -512,6 +512,31 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_file'},\n+    )\n+    def test_loading_regular_package_without__file__(self):\n+        \"\"\"\n+        Test that MigrationLoader loads migrations from regular packages\n+        without a __file__ attribute, to support frozen environments.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_no_file')\n+        loader = MigrationLoader(connection)\n+        try:\n+            del test_module.__file__\n+            module_file = getattr(test_module, '__file__', None)\n+            self.assertIsNone(module_file, \"test_module should not have __file__ attribute.\")\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            # Restore test_module's original state if necessary in actual implementation\n+            pass\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..2570ab1 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -30,6 +30,23 @@ class Tests(TestCase):\n     longMessage = True\n \n     def test_check_sqlite_version(self):\n+        versions_to_test = [\n+            ((3, 8, 11, 1), '3.8.11.1', 'SQLite 3.9.0 or later is required (found 3.8.11.1).'),\n+            ((3, 8, 9), '3.8.9', 'SQLite 3.9.0 or later is required (found 3.8.9).'),\n+            ((3, 9, 0), '3.9.0', None),  # Supported version (should not raise)\n+            ((3, 9, 1), '3.9.1', None),  # Supported version (should not raise)\n+        ]\n+        for version_info, version_str, expected_msg in versions_to_test:\n+            with mock.patch.object(DatabaseWrapper, 'sqlite_version_info', new_callable=mock.PropertyMock(return_value=version_info)), \\\n+                    mock.patch.object(DatabaseWrapper, 'sqlite_version', new_callable=mock.PropertyMock(return_value=version_str)):\n+                if expected_msg is None:\n+                    try:\n+                        check_sqlite_version()\n+                    except ImproperlyConfigured:\n+                        self.fail(f\"ImproperlyConfigured raised for version {version_str} which should be supported.\")\n+                else:\n+                    with self.assertRaisesMessage(ImproperlyConfigured, expected_msg):\n+                        check_sqlite_version()\n         msg = 'SQLite 3.8.3 or later is required (found 3.8.2).'\n         with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 2)), \\\n                 mock.patch.object(dbapi2, 'sqlite_version', '3.8.2'), \\\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..655de67 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -155,8 +155,32 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                     frozenset(),\n                 )\n \n-\n class TestChildArguments(SimpleTestCase):\n+\n+    @mock.patch.dict('sys.modules', {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n+\n+    @mock.patch('sys.argv', ['utils_tests/test_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_directory(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n+\n+    @mock.patch('sys.argv', ['utils_tests/test_module.zip', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_zipfile(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n",
  "django__django-13925": "",
  "django__django-13933": "",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..cd1af1e 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -76,6 +76,12 @@ class Child(models.Model):\n class ChildNullableParent(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n \n class ToFieldChild(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, to_field='name', related_name='to_field_children')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..a0a3e9d 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,10 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, Employee, Foo, CustomAutoFieldModel\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n \n \n class BasicCustomPKTests(TestCase):\n@@ -176,7 +179,23 @@ class BasicCustomPKTests(TestCase):\n         )\n \n \n-class CustomPKTests(TestCase):\n+class CustomAutoFieldTests(TestCase):\n+\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that the from_db_value is called on create and the returned object is a MyWrapper instance.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that the from_db_value is called on bulk_create and the returned object is a MyWrapper instance.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n     def test_custom_pk_create(self):\n         \"\"\"\n         New objects can be created both with pk and the custom name\n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..0573aa4 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,40 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        \"\"\"\n+        Test that no file is yielded multiple times during post-processing.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(\n+            clear=False,\n+            dry_run=False,\n+            post_process=True,\n+            use_default_ignore_patterns=True,\n+            ignore_patterns=['*.ignoreme']\n+        )\n+        stats = collectstatic_cmd.collect()\n+        # Check that all post-processed files are unique\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n+    def test_no_duplicate_yields_specific_file(self):\n+        \"\"\"\n+        Test that a specific file is not yielded multiple times during post-processing.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(\n+            clear=False,\n+            dry_run=False,\n+            post_process=True,\n+            use_default_ignore_patterns=True,\n+            ignore_patterns=['*.ignoreme']\n+        )\n+        stats = collectstatic_cmd.collect()\n+        file_to_check = os.path.join('admin', 'css', 'base.css')\n+        post_processed_files = [entry for entry in stats['post_processed'] if entry.startswith(file_to_check)]\n+        # Ensure the specific file is only post-processed once\n+        self.assertEqual(len(post_processed_files), 1)\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +248,40 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        \"\"\"\n+        Test that no file is yielded multiple times during post-processing.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(\n+            clear=False,\n+            dry_run=False,\n+            post_process=True,\n+            use_default_ignore_patterns=True,\n+            ignore_patterns=['*.ignoreme']\n+        )\n+        stats = collectstatic_cmd.collect()\n+        # Check that all post-processed files are unique\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n+    def test_no_duplicate_yields_specific_file(self):\n+        \"\"\"\n+        Test that a specific file is not yielded multiple times during post-processing.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(\n+            clear=False,\n+            dry_run=False,\n+            post_process=True,\n+            use_default_ignore_patterns=True,\n+            ignore_patterns=['*.ignoreme']\n+        )\n+        stats = collectstatic_cmd.collect()\n+        file_to_check = os.path.join('admin', 'css', 'base.css')\n+        post_processed_files = [entry for entry in stats['post_processed'] if entry.startswith(file_to_check)]\n+        # Ensure the specific file is only post-processed once\n+        self.assertEqual(len(post_processed_files), 1)\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..9c44841 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,7 +1,9 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n \n+import collections.abc\n import copy\n import pickle\n \n",
  "django__django-14122": "",
  "django__django-14140": "",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..eed0391 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,7 +1,9 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n+from django.db import models\n \n \n @isolate_apps('model_options')\n@@ -65,8 +67,25 @@ class TestDefaultPK(SimpleTestCase):\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Model(models.Model):\n                 pass\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -81,8 +100,25 @@ class TestDefaultPK(SimpleTestCase):\n             pass\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..b8fd9c6 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -167,6 +167,41 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        class MockSpec:\n+            parent = 'foo.bar.baz'\n+\n+        with mock.patch('__main__.__spec__', MockSpec()):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'foo.bar.baz', 'runserver']\n+            )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_package(self):\n+        class MockSpec:\n+            parent = 'foo.bar'\n+\n+        with mock.patch('__main__.__spec__', MockSpec()):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'foo.bar', 'runserver']\n+            )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -176,6 +211,41 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        class MockSpec:\n+            parent = 'foo.bar.baz'\n+\n+        with mock.patch('__main__.__spec__', MockSpec()):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'foo.bar.baz', 'runserver']\n+            )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_package(self):\n+        class MockSpec:\n+            parent = 'foo.bar'\n+\n+        with mock.patch('__main__.__spec__', MockSpec()):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'foo.bar', 'runserver']\n+            )\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -191,6 +261,41 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        class MockSpec:\n+            parent = 'foo.bar.baz'\n+\n+        with mock.patch('__main__.__spec__', MockSpec()):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'foo.bar.baz', 'runserver']\n+            )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_package(self):\n+        class MockSpec:\n+            parent = 'foo.bar'\n+\n+        with mock.patch('__main__.__spec__', MockSpec()):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'foo.bar', 'runserver']\n+            )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n@@ -202,6 +307,41 @@ class TestChildArguments(SimpleTestCase):\n                 )\n \n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        class MockSpec:\n+            parent = 'foo.bar.baz'\n+\n+        with mock.patch('__main__.__spec__', MockSpec()):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'foo.bar.baz', 'runserver']\n+            )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_package(self):\n+        class MockSpec:\n+            parent = 'foo.bar'\n+\n+        with mock.patch('__main__.__spec__', MockSpec()):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'foo.bar', 'runserver']\n+            )\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..d857f1a 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -229,6 +229,15 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    # Newlines, carriage returns, and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://www.django\\tproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\tffff:192.9.5.5]', ValidationError),\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..bafe110 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1525,6 +1525,27 @@ class AggregationTests(TestCase):\n             allow_distinct = True\n         DistinctAggregate('foo', distinct=True)\n \n+class QObjectOrTests(TestCase):\n+    def test_q_object_or_subquery(self):\n+        property_groups = PropertyGroup.objects.filter(some_filter=some_value)\n+        queryset = Thing.objects.annotate(Count(\"agent__property_groups\"))\n+        \n+        # Test using agent__property_groups__in which caused issues in the problem\n+        with self.assertRaisesMessage(ProgrammingError, \"subquery must return only one column\"):\n+            queryset.filter(\n+                Q(agent__property_groups__in=property_groups) |\n+                Q(agent__property_groups__count=0)\n+            ).distinct()\n+        \n+        # Test using agent__property_groups__id__in which should work fine\n+        try:\n+            queryset.filter(\n+                Q(agent__property_groups__id__in=property_groups.values_list(\"id\", flat=True)) |\n+                Q(agent__property_groups__count=0)\n+            ).distinct()\n+        except ProgrammingError:\n+            self.fail(\"Q object with `__id__in` raised ProgrammingError unexpectedly.\")\n+\n \n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..243ed40 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -37,8 +37,38 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             }),\n             (expected_args, expected_env),\n         )\n-\n-    def test_options_override_settings_proper_values(self):\n+    def test_deprecated_and_new_keys_coexistence(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        # Testing coexistence of deprecated 'db', 'passwd' with 'database', 'password'\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',  # 'database' should take precedence over 'db'\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}  # 'password' takes precedence over 'passwd'\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n         settings_port = 444\n         options_port = 555\n         self.assertNotEqual(settings_port, options_port, 'test pre-req')\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..4148850 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2198,6 +2198,26 @@ class SchemaTests(TransactionTestCase):\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n+    def test_unique_constraint_references_column_with_table_instance(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='name_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        # Using the table instance instead of table name string\n+        self.assertIs(sql.references_table(table), True)\n+        # Test with the actual table instance:\n+        from django.db.models import Table\n+        table_instance = Table(Author)\n+        self.assertIs(sql.references_column(table_instance, 'name'), True)\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n+\n     @skipUnlessDBFeature('supports_expression_indexes')\n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..b3d93ab 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -94,6 +94,8 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n     )\n \n \n-class NoneHashStorage(ManifestStaticFilesStorage):\n+\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..75f406f 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -641,6 +641,49 @@ class ExecutorTests(MigrationTestBase):\n         recorder = MigrationRecorder(connection)\n         # Record all replaced migrations as applied\n         recorder.record_applied(\"migrations\", \"0001_initial\")\n+\n+    def test_unapply_squashed_migration(self):\n+        \"\"\"\n+        Test that unapplying a squashed migration marks only the replaced\n+        migrations as unapplied and keeps the squashed migration unapplied.\n+        \"\"\"\n+        # Setup a test database state where the squashed migration is applied\n+        recorder = MigrationRecorder(connection)\n+        recorder.record_applied(\"migrations\", \"0001_squashed_0002\")\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', None)])  # Unapply all migrations\n+\n+        # Check that the squashed migration is marked as unapplied\n+        self.assertNotIn(\n+            (\"migrations\", \"0001_squashed_0002\"),\n+            recorder.applied_migrations(),\n+        )\n+\n+    def test_unapply_with_replaced_migrations_present(self):\n+        \"\"\"\n+        Test unapply scenario where replaced migrations are present and ensure\n+        the squashed migration is marked unapplied appropriately.\n+        \"\"\"\n+        recorder = MigrationRecorder(connection)\n+        recorder.record_applied(\"migrations\", \"0001_squashed_0002\")\n+        recorder.record_applied(\"migrations\", \"0001_initial\")\n+        recorder.record_applied(\"migrations\", \"0002_second\")\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', None)])  # Unapply all migrations\n+\n+        # Ensure the individual replaced migrations are also marked as unapplied\n+        self.assertNotIn(\n+            (\"migrations\", \"0001_initial\"),\n+            recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            (\"migrations\", \"0002_second\"),\n+            recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            (\"migrations\", \"0001_squashed_0002\"),\n+            recorder.applied_migrations(),\n+        )\n         recorder.record_applied(\"migrations\", \"0002_second\")\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..567eb89 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -256,6 +256,27 @@ class TestUtilsHtml(SimpleTestCase):\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n         )\n+        # Test case verifying issue resolution: handling of HTML-escaped string and trailing punctuation\n+        (\n+            'Search for google.com/?q=1&lt! and see.',\n+            'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+        ),\n+        (\n+            'Visit example.com/path/ with trailing slash.',\n+            'Visit <a href=\"http://example.com/path/\">example.com/path/</a> with trailing slash.'\n+        ),\n+        (\n+            'Check out http://example.com/p(a)th.',\n+            'Check out <a href=\"http://example.com/p(a)th\">http://example.com/p(a)th</a>.'\n+        ),\n+        (\n+            'Is this your email: user@example.com!',\n+            'Is this your email: <a href=\"mailto:user@example.com\">user@example.com</a>!'\n+        ),\n+        (\n+            'Secure link: https://secure.example.com/?token=abcd1234.',\n+            'Secure link: <a href=\"https://secure.example.com/?token=abcd1234\">https://secure.example.com/?token=abcd1234</a>.'\n+        ),\n         for value, output in tests:\n             with self.subTest(value=value):\n                 self.assertEqual(urlize(value), output)\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..dc3660e 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,35 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+from django.test import TestCase\n+from .models import Note, CustomPk, Valid, Detail, Member, Paragraph\n+from django.db import transaction\n+\n+class BulkUpdateTestCase(TestCase):\n+    def test_bulk_update_return_value(self):\n+        # Test with empty input\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+        # Create test data\n+        Note.objects.bulk_create([Note(note=str(i), misc=str(i)) for i in range(0, 2000)])\n+        notes = list(Note.objects.all())\n+\n+        # Test bulk update with data\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_with_duplicates(self):\n+        # Create a single note\n+        note = Note.objects.create(note='test-note', misc='test')\n+\n+        # Test with duplicates in input list\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+        # Test with batch_size causing duplicates in different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..e6b33a9 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,7 +984,22 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n-    def test_formset_iteration(self):\n+    def test_formset_nonform_css_class(self):\n+        \"\"\"\n+        Test that non-form errors include the CSS class 'nonform'.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',  # the number of forms rendered\n+            'drinks-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'drinks-MIN_NUM_FORMS': '0',  # min number of forms\n+            'drinks-MAX_NUM_FORMS': '0',  # max number of forms\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertIn('<ul class=\"errorlist nonform\">', str(non_form_errors))\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n         formset = ChoiceFormset()\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..33bfbbf 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,41 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_cleaned_data_consistent_with_bound_field_initial(self):\n+        \"\"\"\n+        Test that the cleaned data value is consistent with the\n+        BoundField's initial value when a form field is disabled and has\n+        a callable initial.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned_data_value = form.cleaned_data['dt']\n+        bound_field_initial = form['dt'].initial\n+\n+        self.assertEqual(cleaned_data_value, bound_field_initial)\n+\n+    def test_changed_data_reflects_bound_field_logic(self):\n+        \"\"\"\n+        Test that `changed_data` uses the logic within BoundField such that\n+        it accurately reflects changes based on the bound field's initial.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=False)\n+\n+        # Value is the same as the initial, so there should be no changes.\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45.123456'})\n+        self.assertEqual(form.changed_data, [])\n+\n+        # Change the submitted data to reflect a different time,\n+        # which should now be detected as a change.\n+        form = DateTimeForm({'dt': '2006-10-25 14:31:45.123456'})\n+        self.assertIn('dt', form.changed_data)\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..19b4e5c 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -2,6 +2,8 @@ from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n from django.db import IntegrityError\n+from django.db import models\n+from django.core.checks import Error\n from django.test import TestCase\n \n from .models import (\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..7e04c2f 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -10,6 +11,8 @@ from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n from django.urls import reverse, reverse_lazy\n+import datetime\n+from django.http import JsonResponse\n \n from .admin import AnswerAdmin, QuestionAdmin\n from .models import (\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..bfa8766 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -915,7 +915,42 @@ class StateTests(SimpleTestCase):\n         with self.assertRaises(ValueError):\n             project_state.apps\n \n-        # If we include the real app it should succeed\n+    def test_real_apps_set(self):\n+        \"\"\"\n+        Test that ProjectState.__init__ accepts a set for real_apps without error.\n+        \"\"\"\n+        # Passing a set should not raise an error\n+        try:\n+            project_state = ProjectState(real_apps={'contenttypes'})\n+            self.assertIsInstance(project_state.real_apps, set)\n+        except AssertionError:\n+            self.fail(\"ProjectState.__init__ raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_empty(self):\n+        \"\"\"\n+        Test that ProjectState.__init__ can handle None or empty real_apps.\n+        \"\"\"\n+        # Passing None\n+        try:\n+            project_state = ProjectState(real_apps=None)\n+            self.assertEqual(project_state.real_apps, set())\n+        except AssertionError:\n+            self.fail(\"ProjectState.__init__ raised AssertionError unexpectedly when passing None!\")\n+\n+        # Passing an empty set\n+        try:\n+            project_state = ProjectState(real_apps=set())\n+            self.assertEqual(project_state.real_apps, set())\n+        except AssertionError:\n+            self.fail(\"ProjectState.__init__ raised AssertionError unexpectedly when passing an empty set!\")\n+\n+        # Passing an empty list (should raise an AssertionError)\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=[])\n+\n+        # Passing an empty tuple (should raise an AssertionError)\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=())\n         project_state = ProjectState(real_apps={'contenttypes'})\n         project_state.add_model(ModelState.from_model(TestModel))\n         rendered_state = project_state.apps\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..c47507a 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,6 +166,45 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 )\n \n \n+class TestXOptions(SimpleTestCase):\n+\n+    @mock.patch('sys._xoptions', {'utf8': True, 'buffering': '1'})\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_to_child(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+\n+    @mock.patch('sys._xoptions', {})\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_utf8_buffering(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xbuffering=1', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys._xoptions', {'faulthandler': True})\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_to_child(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+\n+    @mock.patch('sys._xoptions', {})\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_faulthandler(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xfaulthandler', __file__, 'runserver']\n+        )\n+\n+\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n@@ -195,7 +234,16 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_to_child(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+\n+    @mock.patch('sys._xoptions', {})\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -235,8 +283,17 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_to_child(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+\n+    @mock.patch('sys._xoptions', {})\n+    @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n         del module.__spec__\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..7287fa8 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,6 +271,29 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+        \n     def test_new_attribute(self):\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..f28c631 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5132,6 +5132,33 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Ensure ForeignKey readonly fields in the default admin site have correct URLs.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Ensure ForeignKey readonly fields in a custom admin site have correct URLs.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom-admin')\n+\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper method to test ForeignKey readonly field URLs in both default and custom admin sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        remote_obj = language\n+        reverse_path = f'{admin_site}:admin_views_language_change'\n+        url = reverse(reverse_path, args=[quote(remote_obj.pk)])\n+        self.assertIn(f'/{admin_site}/', url, f\"The URL should contain '/{admin_site}/'. URL: {url}\")\n+\n     def test_readonly_manytomany_backwards_ref(self):\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..0e9628b 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -279,7 +280,27 @@ class ModelChoiceFieldTests(TestCase):\n         field = CustomModelChoiceField(Category.objects.all())\n         self.assertIsInstance(field.choices, CustomModelChoiceIterator)\n \n-    def test_choice_iterator_passes_model_to_widget(self):\n+    def test_choice_value_hash(self):\n+        # Create instances of ModelChoiceIteratorValue with different PKs\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        \n+        # Assert that hash of the same value is equal, even when instance is None\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        \n+        # Assert that different values have different hashes\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+        \n+    def test_choice_value_equality(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_1_same = ModelChoiceIteratorValue(self.c1.pk, None)\n+        value_different = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        \n+        # Equality with same values\n+        self.assertEqual(value_1, value_1_same)\n+        \n+        # Inequality with different values\n+        self.assertNotEqual(value_1, value_different)\n         class CustomCheckboxSelectMultiple(CheckboxSelectMultiple):\n             def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n                 option = super().create_option(name, value, label, selected, index, subindex, attrs)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..0b53e72 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,28 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..12c02b8 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -153,6 +153,49 @@ class ChangeListTests(TestCase):\n         cl = ia.get_changelist_instance(request)\n         self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n \n+    def test_search_terms_leading_to_minimal_joins(self):\n+        \"\"\"\n+        Test that a search with many terms on related fields results in a minimal number of JOINs.\n+        \"\"\"\n+\n+        parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=parent, name='Danielle', age=18)\n+        Child.objects.create(parent=parent, name='Daniel', age=19)\n+\n+        m = ParentAdmin(Parent, custom_site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel ' * 50})\n+        request.user = self.superuser\n+\n+        # Capture the SQL queries\n+        with CaptureQueriesContext(connection) as context:\n+            cl = m.get_changelist_instance(request)\n+            cl.queryset.count()\n+\n+        # We expect that the number of JOINs should not increase linearly with the number of terms\n+        join_count = context.captured_queries[0]['sql'].count('JOIN')\n+        self.assertLessEqual(join_count, 2, \"The number of JOINs should be minimal even with many search terms.\")\n+\n+    def test_combined_search_on_related_fields(self):\n+        \"\"\"\n+        Ensure combined search terms on related fields perform optimally.\n+        \"\"\"\n+        parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=parent, name='Danielle', age=18)\n+        Child.objects.create(parent=parent, name='Daniel', age=19)\n+\n+        m = ParentAdminTwoSearchFields(Parent, custom_site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'danielle 18 daniel '})\n+        request.user = self.superuser\n+        cl = m.get_changelist_instance(request)\n+        \n+        # Verify that such a query doesn't lead to excessive JOINs\n+        with CaptureQueriesContext(connection) as context:\n+            count = cl.queryset.count()\n+        \n+        self.assertEqual(count, 1, \"Query should return correct count\")\n+        join_count = context.captured_queries[0]['sql'].count('JOIN')\n+        self.assertLessEqual(join_count, 2, \"Query with combined search terms on related fields should not have excessive JOINs.\")\n+\n     def test_result_list_empty_changelist_value(self):\n         \"\"\"\n         Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored\n",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..de8cd57 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -203,8 +203,20 @@ class InspectDBTestCase(TestCase):\n             'people_unique = models.OneToOneField(InspectdbPeople, models.DO_NOTHING)',\n             output,\n         )\n-\n-    def test_digits_column_name_introspection(self):\n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_foreign_key_to_specific_field(self):\n+        \"\"\"\n+        Test that `inspectdb` correctly generates foreign key relationships to non-primary key fields.\n+        \"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        output = out.getvalue()\n+        \n+        # Ensure that the foreign key is correctly specified with the to_field pointing to 'people_unique'\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', models.DO_NOTHING, to_field='people_unique')\",\n+            output,\n+        )\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex b862331..9c816ca 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -151,7 +151,10 @@ class TestUtilsHtml(SimpleTestCase):\n                 self.check_output(escapejs, value, output)\n                 self.check_output(escapejs, lazystr(value), output)\n \n-    def test_json_script(self):\n+    def test_json_script_no_id(self):\n+        # Test json_script without an id\n+        result = json_script({'test': 'value'})\n+        self.assertHTMLEqual(result, '<script type=\"application/json\">{\"test\": \"value\"}</script>')\n         tests = (\n             # \"<\", \">\" and \"&\" are quoted inside JSON strings\n             (('&<>', '<script id=\"test_id\" type=\"application/json\">\"\\\\u0026\\\\u003C\\\\u003E\"</script>')),\n@@ -276,4 +279,4 @@ class TestUtilsHtml(SimpleTestCase):\n         )\n         for value in tests:\n             with self.subTest(value=value):\n-                self.assertEqual(urlize(value), value)\n+                self.assertEqual(urlize(value), value)\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..b235db7 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2843,7 +2843,50 @@ class MigrationSuggestNameTests(SimpleTestCase):\n         migration = Migration('some_migration', 'test_app')\n         self.assertIs(migration.suggest_name().startswith('auto_'), True)\n \n-    def test_no_operations_initial(self):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_add_custom_fk_with_missing_to_deconstruction(self):\n+        class BuggyHardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.AnotherModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                # Simulating the error by not adding 'to' in kwargs\n+                return name, path, args, kwargs\n+\n+        another_model_fk = ModelState('testapp', 'AnotherModel', [\n+            ('reference', BuggyHardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, another_model_fk],\n+        )\n+        # This test should ensure no exception is raised\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='AnotherModel')\n         class Migration(migrations.Migration):\n             initial = True\n             operations = []\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..516aad2 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -366,6 +367,32 @@ class BaseTests:\n         storage.level = 0\n         add_level_messages(storage)\n         tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', '', 'debug', 'warning', 'bad', 'custom'])\n+\n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: '',\n+        constants.WARNING: 'caution',\n+        constants.ERROR: 'bad',\n+        12: 'custom',\n+    })\n+    def test_new_level_tags_respected(self):\n+        # Ensure new tags are respected\n+        storage = self.get_storage()\n+        storage.add(constants.WARNING, 'A warning message')\n+        storage.add(12, 'A custom message')\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['caution', 'custom'])\n+\n+    def test_restore_original_tags(self):\n+        # Ensure original tags are restored after override\n+        storage = self.get_storage()\n+        storage.add(constants.INFO, 'An info message')\n+        storage.add(constants.ERROR, 'An error message')\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', 'error'])\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n     @override_settings_tags(MESSAGE_TAGS={\n@@ -379,5 +406,31 @@ class BaseTests:\n         storage = self.get_storage()\n         storage.level = 0\n         add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', '', 'debug', 'warning', 'bad', 'custom'])\n+\n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: '',\n+        constants.WARNING: 'caution',\n+        constants.ERROR: 'bad',\n+        12: 'custom',\n+    })\n+    def test_new_level_tags_respected(self):\n+        # Ensure new tags are respected\n+        storage = self.get_storage()\n+        storage.add(constants.WARNING, 'A warning message')\n+        storage.add(12, 'A custom message')\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['caution', 'custom'])\n+\n+    def test_restore_original_tags(self):\n+        # Ensure original tags are restored after override\n+        storage = self.get_storage()\n+        storage.add(constants.INFO, 'An info message')\n+        storage.add(constants.ERROR, 'An error message')\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', 'error'])\n+        add_level_messages(storage)\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', 'custom', 'extra-tag', '', 'bad', 'success'])\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..8026be8 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,9 +30,33 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, Foo, Bar, Baz, Qux\n )\n \n+from django.db.models import Q\n+\n+\n+class QuerySetAliasChangeTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.qux = Qux.objects.create()\n+        cls.baz = Baz.objects.create()\n+        cls.qux.bazes.add(cls.baz)\n+        cls.foo1 = Foo.objects.create(qux=cls.qux)\n+        cls.foo2 = Foo.objects.create(qux=cls.qux)\n+        cls.bar1 = Bar.objects.create(foo=cls.foo1, another_foo=cls.foo2, baz=cls.baz)\n+        cls.bar2 = Bar.objects.create(foo=cls.foo2, another_foo=cls.foo1, baz=cls.baz)\n+\n+    def test_conflicting_aliases_during_combine(self):\n+        qs1 = self.qux.foos.all()\n+        qs2 = Foo.objects.filter(\n+            Q(bars__baz__in=self.qux.bazes.all()) | Q(other_bars__baz__in=self.qux.bazes.all())\n+        )\n+        # Test both combinations to ensure no AssertionError is raised\n+        combined1 = qs2 | qs1\n+        combined2 = qs1 | qs2\n+        self.assertCountEqual(combined1, combined2)\n+        self.assertCountEqual(combined1, [self.foo1, self.foo2])\n \n class Queries1Tests(TestCase):\n     @classmethod\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..cb7fb5c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1755,6 +1755,27 @@ class ValueTests(TestCase):\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n \n+    def test_deconstruct_F_expression(self):\n+        expr = F('field_name')\n+        path, args, kwargs = expr.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, (expr.name,))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_case_expression(self):\n+        case = Case(When(condition=True, then=Value(1)))\n+        path, args, kwargs = case.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Case')\n+        self.assertEqual(args, case.cases)\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_func_expression(self):\n+        func = Func('column', function='COUNT')\n+        path, args, kwargs = func.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Func')\n+        self.assertEqual(args, func.source_expressions)\n+        self.assertEqual(kwargs['function'], 'COUNT')\n+\n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n",
  "django__django-15268": "",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..46a9fe3 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,6 +1847,31 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15, 13, 45),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                # Ensure it does not throw an exception\n+                field.clean(value, model_instance=None)\n+\n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..6b77e7c 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -624,7 +624,45 @@ class SchemaTests(TransactionTestCase):\n         # Make sure the values were transformed correctly\n         self.assertEqual(Author.objects.extra(where=[\"thing = 1\"]).count(), 2)\n \n-    def test_add_field_binary(self):\n+    def test_add_field_o2o_nullable_integrity(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField does not violate integrity and works as expected.\n+        \"\"\"\n+        class Author(Model):\n+            pass\n+\n+        class Note(Model):\n+            pass\n+\n+        # Create the initial models\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        # Add a nullable OneToOneField\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        # Ensure the field exists and is nullable\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])  # Checking if nullable\n+\n+        # Test setting the OneToOneField to None\n+        author_instance = Author.objects.create()\n+        self.assertIsNone(author_instance.note_id)\n+\n+    def test_add_field_o2o_nullable(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])\n         \"\"\"\n         Tests binary fields get a sane default (#22851)\n         \"\"\"\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..0b8233b 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -80,7 +80,14 @@ class BasicFieldTests(SimpleTestCase):\n         f = Foo._meta.get_field('a')\n         self.assertEqual(str(f), 'model_fields.Foo.a')\n \n-    def test_field_ordering(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+        \n+        class MyModel(models.Model):\n+            rank = field\n+        \n+        self.assertEqual(field_hash, hash(field))\n         \"\"\"Fields are ordered based on their creation.\"\"\"\n         f1 = models.Field()\n         f2 = models.Field(auto_created=True)\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..fb9d845 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -211,6 +211,20 @@ class BulkUpdateTests(TestCase):\n         Number.objects.bulk_update(numbers, ['num'])\n         self.assertCountEqual(Number.objects.filter(num=1), numbers)\n \n+    def test_f_expression_with_field_reference(self):\n+        # Setup: Create Note instances\n+        notes = [Note.objects.create(note='initial', misc='misc_value') for _ in range(10)]\n+        \n+        # Apply F expression to mimic the issue\n+        for note in notes:\n+            note.misc = F('note')\n+        \n+        # Perform bulk_update\n+        Note.objects.bulk_update(notes, ['misc'])\n+        \n+        # Test that bulk_update correctly handled F('note') expressions\n+        self.assertCountEqual(Note.objects.filter(misc='initial'), notes)\n+\n     def test_booleanfield(self):\n         individuals = [Individual.objects.create(alive=False) for _ in range(10)]\n         for individual in individuals:\n",
  "django__django-15380": "",
  "django__django-15382": "",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..74179bc 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -140,8 +140,24 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             radio_fields={\"main_band\": admin.VERTICAL},\n         )\n         self.assertIsNone(ff.empty_label)\n+    from django.contrib import admin\n+    from django.db import models\n+    from .models import Inventory\n \n-    def test_many_to_many(self):\n+    class Inventory(models.Model):\n+        name = models.CharField(max_length=100)\n+        parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True)\n+\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                models.ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..fb3c4f4 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,37 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+from django.test import TestCase\n+from django.core import management\n+from fixtures_regress.models import Author, Book\n+\n+class NaturalKeyWithFKDependencyTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def setUp(self):\n+        # Setup any necessary state for the tests\n+        author = Author.objects.using(\"other\").create(name=\"J.R.R. Tolkien\")\n+        # No need to create Book as it will be tested during loaddata\n+\n+    def tearDown(self):\n+        # Clean up after tests\n+        Author.objects.using(\"other\").all().delete()\n+        Book.objects.using(\"other\").all().delete()\n+\n+    def test_natural_key_dependencies(self):\n+        \"\"\"\n+        Test loaddata with natural keys and foreign keys on non-default database.\n+        \"\"\"\n+        try:\n+            management.call_command(\n+                \"loaddata\", \"nk_with_foreign_key.json\", database=\"other\", verbosity=0\n+            )\n+            obj = Book.objects.using(\"other\").get()\n+            self.assertEqual(obj.title, \"The Lord of the Rings\")\n+            self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+        except Book.DoesNotExist:\n+            self.fail(\"Book object was not created in the 'other' database.\")\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..6fd4b0d 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,6 +3961,41 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n+    def test_alter_field_choices_noop(self):\n+        \"\"\"\n+        Test that altering a field to add/change choices is a no-op on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_addition_noop(self):\n+        \"\"\"\n+        Test that a similar no-op alteration doesn't generate SQL in SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        # New field with choices; should be a no-op in terms of schema changes.\n+        new_field = CharField(\n+            max_length=255,\n+            choices=[('Alice', 'Alice'), ('Bob', 'Bob')],\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n     def test_add_textfield_unhashable_default(self):\n         # Create the table\n         with connection.schema_editor() as editor:\n",
  "django__django-15569": "",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..8c6ccfb 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -80,6 +80,30 @@ class TemplateReloadTests(SimpleTestCase):\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_path(self):\n+        self.assertEqual(autoreload.get_template_directories(), set())\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", str(ROOT) + \"/valid_path\", \"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_multiple_empty_paths(self):\n+        self.assertSetEqual(\n+            autoreload.get_template_directories(),\n+            {ROOT / \"valid_path\"}\n+        )\n \n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..cfb7a1c 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,7 +1,30 @@\n+\n+class ManagerMethodSignatureTests(TestCase):\n+    def test_manager_method_signature_bulk_create(self):\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        actual_signature = str(inspect.signature(Article.objects.bulk_create))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_manager_method_signature_get(self):\n+        expected_signature = \"(self, *args, **kwargs)\"\n+        actual_signature = str(inspect.signature(Article.objects.get))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_manager_method_docstring_bulk_create(self):\n+        expected_docstring = models.QuerySet.bulk_create.__doc__\n+        actual_docstring = Article.objects.bulk_create.__doc__\n+        self.assertEqual(actual_docstring, expected_docstring)\n+\n+    def test_manager_method_name_bulk_create(self):\n+        expected_name = models.QuerySet.bulk_create.__name__\n+        actual_name = Article.objects.bulk_create.__name__\n+        self.assertEqual(actual_name, expected_name)\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n \n+import inspect\n from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..746e116 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,8 +1,11 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n \n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n@@ -77,7 +80,22 @@ class FunctionTests(SimpleTestCase):\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n-    def test_no_args(self):\n+    def test_get_format_lazy_string(self):\n+        \"\"\"\n+        Test get_format with a lazy translation string for DATE_FORMAT.\n+        \"\"\"\n+        with translation.override(\"en\"):\n+            lazy_date_format = gettext_lazy(\"DATE_FORMAT\")\n+            self.assertEqual(get_format(lazy_date_format), \"N j, Y\")\n+\n+    def test_get_format_lazy_time(self):\n+        \"\"\"\n+        Test get_format with a lazy translation string in a date template filter.\n+        \"\"\"\n+        @setup({\"datelazytime\": '{{ t|date:_(\"H:i\") }}'})\n+        def test_date_lazy_time(self):\n+            output = self.engine.render_to_string(\"datelazytime\", {\"t\": time(0, 0)})\n+            self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(\"\"), \"\")\n         self.assertEqual(date(None), \"\")\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..f97106f 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -383,6 +383,22 @@ class ProxyModelTests(TestCase):\n         )\n \n         # Select related + filter on a related proxy of proxy field\n+\n+    def test_select_related_only_proxy(self):\n+        # Creating a CustomModel instance\n+        custom_model_instance = CustomModel.objects.create(name=\"TestCustom\")\n+\n+        # Creating a ProxyCustomModel instance that points to the CustomModel instance\n+        proxy_custom_model_instance = ProxyCustomModel.objects.get(pk=custom_model_instance.pk)\n+\n+        # Create an AnotherModel instance with a ForeignKey to the ProxyCustomModel\n+        another_model_instance = AnotherModel.objects.create(custom=proxy_custom_model_instance)\n+\n+        # Query to test select_related and only on the proxy model\n+        objs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+\n+        # There shouldn't be any exception specifically related to the bug.\n+        self.assertEqual(objs.get(), another_model_instance)\n         resp = ProxyImprovement.objects.select_related().get(\n             associated_bug__summary__icontains=\"fix\"\n         )\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..2acb070 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,6 +151,18 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_additional_params_before_dbname(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n+    def test_multiple_additional_params(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--no-password\", \"-c\", \"SELECT * FROM test_table\"]),\n+            ([\"psql\", \"--no-password\", \"-c\", \"SELECT * FROM test_table\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..987017d 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -55,6 +55,23 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(001.3000, 2), \"1.30\")\n         self.assertEqual(floatformat(0.12345, 2), \"0.12\")\n         self.assertEqual(floatformat(Decimal(\"555.555\"), 2), \"555.56\")\n+\n+    def test_decimal_precision(self):\n+        # Test issue resolution: floatformat should not drop precision for Decimals.\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        # Additional checks for precision\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.000000000000000000123456789012345678901\"), 30),\n+            \"0.000000000000000000123456789012\",\n+        )\n+        self.assertEqual(floatformat(Decimal(\"1.0000000000\"), 10), \"1.0000000000\")\n         self.assertEqual(floatformat(Decimal(\"09.000\")), \"9\")\n         self.assertEqual(floatformat(\"foo\"), \"\")\n         self.assertEqual(floatformat(13.1031, \"bar\"), \"13.1031\")\n",
  "django__django-15930": "",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..8012f18 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -569,6 +570,21 @@ class TestFixtures(TestCase):\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n+    @override_settings(\n+        FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\", Path(_cur_dir) / \"fixtures\"]\n+    )\n+    def test_duplicate_fixture_dirs_with_pathlib(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS should not allow duplicate fixture directories\n+        when using pathlib.Path objects.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a duplicate entry in settings.FIXTURE_DIRS and cannot be listed twice.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"))\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+\n     @override_settings(\n         FIXTURE_DIRS=[\n             os.path.join(_cur_dir, \"fixtures_1\"),\n",
  "django__django-16032": "",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..0b1280f 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,11 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from django.urls import reverse\n+from .models import Swallow  # Assuming Swallow model is defined in the same test application\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +405,87 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+    # Additional test case to verify transaction is rolled back on partial failure\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_partial_update_rollback(self):\n+        a = Swallow.objects.create(origin=\"Swallow C\", load=3, speed=2)\n+        b = Swallow.objects.create(origin=\"Swallow D\", load=7, speed=4)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"6.0\",\n+            \"form-0-speed\": \"5.0\",  # Intentionally incorrect to trigger an error\n+            \"form-1-load\": \"8.0\",\n+            \"form-1-speed\": \"3.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Check that neither object was updated\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 3)\n+        self.assertEqual(a.speed, 2)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 7)\n+        self.assertEqual(b.speed, 4)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..a7729ad 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2379,6 +2379,28 @@ class MakeMigrationsTests(MigrationTestBase):\n             )\n             self.assertIn(\"operations=[]\" if HAS_BLACK else \"operations=[\\n]\", content)\n \n+    def test_makemigrations_check_no_file_creation(self):\n+        \"\"\"\n+        makemigrations --check should not create any migration files when there are changes.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            # Ensure tmpdir does not exist initially\n+            self.assertFalse(os.path.exists(tmpdir))\n+            with self.assertRaises(SystemExit):  # Expecting SystemExit when changes exist\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Ensure tmpdir still does not exist after the command\n+            self.assertFalse(os.path.exists(tmpdir))\n+\n+    def test_makemigrations_check_no_changes_exit_zero(self):\n+        \"\"\"\n+        makemigrations --check should exit with zero status when there are no changes.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            result = call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertIsNone(result)  # Exits with status 0 normally\n+\n     def test_makemigrations_with_invalid_custom_name(self):\n         msg = \"The migration name must be a valid Python identifier.\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..f28b3bf 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory\n+import asyncio\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n@@ -106,7 +109,30 @@ class ViewTests(SimpleTestCase):\n             (SyncView, False),\n             (AsyncView, True),\n         ]\n-        for view_cls, is_coroutine in tests:\n+class HttpResponseNotAllowedTest(SimpleTestCase):\n+\n+    def test_async_http_method_not_allowed(self):\n+        \"\"\"\n+        Test that HttpResponseNotAllowed works correctly with async views.\n+        \"\"\"\n+        class Demo(View):\n+            async def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        # Simulate a GET request where only POST is allowed.\n+        request_factory = RequestFactory()\n+        view_instance = Demo()\n+        \n+        # Async call to http_method_not_allowed\n+        async def async_not_allowed():\n+            return await view_instance.http_method_not_allowed(request_factory.get(\"/demo\"))\n+\n+        # Run the async call\n+        try:\n+            response = asyncio.run(async_not_allowed())\n+            self.assertIsInstance(response, HttpResponseNotAllowed)\n+        except TypeError as e:\n+            self.fail(f\"TypeError occurred: {e}\")\n             with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n                 instance = view_cls()\n                 response = instance.options(None)\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..8f07413 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,7 @@\n+\n import datetime\n+import urllib.parse\n+from django.urls import reverse\n import re\n from unittest import mock\n \n@@ -881,7 +884,25 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         form = UserChangeForm(instance=user, data=post_data)\n \n         self.assertTrue(form.is_valid())\n-        # original hashed password contains $\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.create(username=\"testfielduser\", pk=9876)\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n     def test_bug_19349_bound_password_field(self):\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..ae5db0e 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,6 +508,44 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n+from django.test import TestCase\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from django.utils.decorators import override_settings\n+from django.test import Client\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapCallableLastmodNoItemsTest(TestCase):\n+    def setUp(self):\n+        self.client = Client()\n+        \n+    def test_callable_sitemap_no_items(self):\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '<sitemap><loc>http://example.com/callable-lastmod-no-items/sitemap.xml</loc></sitemap>\\n'\n+            '</sitemapindex>'\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n+\n+urlpatterns = [\n+    path(\n+        \"callable-lastmod-no-items/index.xml\",\n+        views.index,\n+        {\"sitemaps\": {\"callable-lastmod-no-items\": CallableLastmodNoItemsSitemap}},\n+    ),\n+]\n+\n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..a2dce6d 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -79,6 +79,11 @@ class NoFields(models.Model):\n     pass\n \n \n+class MixedCaseDbColumnModel(models.Model):\n+    identifier = models.IntegerField(primary_key=True, db_column=\"Identifier\")\n+    description = models.CharField(max_length=100, null=True, db_column=\"Description\")\n+\n+\n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..ecb0ad2 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,7 +254,59 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+    \n+    def test_custom_form_with_empty_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient2\",\n+            \"password2\": \"testclient2\",\n+            \"orgs\": [],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n+    \n+    def test_custom_form_invalid_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": ['invalid'],  # Invalid input for M2M field\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), False)\n+        self.assertIn('orgs', form.errors)\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..1ef9673 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,22 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_tz_aware_timesince(self):\n+        now = timezone.now()\n+        past = now - datetime.timedelta(days=31)\n+        past = timezone.make_aware(past, timezone.get_default_timezone())\n+        self.assertEqual(timesince(past, now), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_tz_aware_timesince_with_more_than_a_month(self):\n+        now = timezone.now()\n+        past = now - datetime.timedelta(days=45)  # More than a month\n+        past = timezone.make_aware(past, timezone.get_default_timezone())\n+        self.assertEqual(timesince(past, now), \"1\\xa0month, 2\\xa0weeks\")\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..f2849fd 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,7 +469,36 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n-class UtilsTests(SimpleTestCase):\n+from django.core.management import CommandError\n+from django.test import SimpleTestCase\n+from django.core.management.base import BaseCommand\n+import argparse\n+\n+class SubparserErrorFormattingTests(SimpleTestCase):\n+    def setUp(self):\n+        self.parser = CommandParser(prog='manage.py')\n+        subparsers = self.parser.add_subparsers(title='subcommands', dest='subcommand')\n+        self.create_parser = subparsers.add_parser('create', parser_class=CommandParser)\n+        self.create_parser.add_argument('name', help='Name of the entity to create')\n+\n+    def test_missing_subparser_argument(self):\n+        \"\"\"Test that missing subparser argument raises a CommandError with the correct message.\"\"\"\n+        with self.assertRaises(CommandError) as cm:\n+            self.parser.parse_args(['create'])\n+        self.assertEqual(\n+            str(cm.exception),\n+            \"Error: the following arguments are required: name\"\n+        )\n+\n+    def test_invalid_type_for_subparser_argument(self):\n+        \"\"\"Test invalid argument type for subparser argument.\"\"\"\n+        self.create_parser.add_argument('age', type=int, help='Age of the entity')\n+        with self.assertRaises(CommandError) as cm:\n+            self.parser.parse_args(['create', 'Alice', 'twenty'])\n+        self.assertIn(\n+            \"argument age: invalid int value: 'twenty'\",\n+            str(cm.exception)\n+        )\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..2bd5672 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -92,6 +92,17 @@ class GetStorageClassTests(SimpleTestCase):\n \n \n class FileSystemStorageTests(unittest.TestCase):\n+    from .models import callable_default_storage\n+\n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n     def test_deconstruction(self):\n         path, args, kwargs = temp_storage.deconstruct()\n         self.assertEqual(path, \"django.core.files.storage.FileSystemStorage\")\n@@ -1009,6 +1020,17 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n         self.assertIsInstance(obj.storage_callable_class.storage, BaseStorage)\n \n+    from .models import callable_default_storage\n+\n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n     def test_deconstruction(self):\n         \"\"\"\n         Deconstructing gives the original callable, not the evaluated value.\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..2f15503 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -33,7 +36,39 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        # Test with a user that has change permission but not add permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Test with a user that has both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..f683e25 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -108,6 +108,11 @@ class BaseConstraintTests(SimpleTestCase):\n         self.assertEqual(c.get_violation_error_message(), \"custom name message\")\n \n \n+from django.db import models\n+from django.core.exceptions import ValidationError\n+from django.test import TestCase\n+from .models import Product, UniqueConstraintProduct, UniqueConstraintConditionProduct, ChildUniqueConstraintProduct\n+\n class CheckConstraintTests(TestCase):\n     def test_eq(self):\n         check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n@@ -217,7 +222,34 @@ class CheckConstraintTests(TestCase):\n         constraints = get_constraints(ChildModel._meta.db_table)\n         self.assertIn(\"constraints_childmodel_adult\", constraints)\n \n-    def test_validate(self):\n+    def test_violation_error_code_customization(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"custom message\",\n+            violation_error_code=\"custom_code\",\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"custom message\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n+\n+    def test_unique_constraint_violation_error_code(self):\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\", \"color\"],\n+            name=\"unique_name_color\",\n+            violation_error_code=\"unique_error\",\n+        )\n+        non_unique_product = UniqueConstraintProduct(\n+            name=self.p1.name, color=self.p1.color\n+        )\n+        msg = \"Unique constraint product with this Name and Color already exists.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"unique_error\")\n         check = models.Q(price__gt=models.F(\"discounted_price\"))\n         constraint = models.CheckConstraint(check=check, name=\"price\")\n         # Invalid product.\n@@ -654,7 +686,34 @@ class UniqueConstraintTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             NoCodeErrorConstraintModel(name=\"test\").validate_constraints()\n \n-    def test_validate(self):\n+    def test_violation_error_code_customization(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"custom message\",\n+            violation_error_code=\"custom_code\",\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"custom message\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n+\n+    def test_unique_constraint_violation_error_code(self):\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\", \"color\"],\n+            name=\"unique_name_color\",\n+            violation_error_code=\"unique_error\",\n+        )\n+        non_unique_product = UniqueConstraintProduct(\n+            name=self.p1.name, color=self.p1.color\n+        )\n+        msg = \"Unique constraint product with this Name and Color already exists.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"unique_error\")\n         constraint = UniqueConstraintProduct._meta.constraints[0]\n         msg = \"Unique constraint product with this Name and Color already exists.\"\n         non_unique_product = UniqueConstraintProduct(\n",
  "django__django-16569": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..ba074b3 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,30 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_alter_field(self):\n+        # Test case where multiple AlterField operations should collapse into one\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=256, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ],\n+            [\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ]\n+        )\n+\n+    def test_alter_alter_field_separated(self):\n+        # Separate AddField and AlterField operations to test non-reduction\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True)),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+                migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ]\n+        )\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..db4aa3e 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -255,6 +255,23 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n+\n+    def test_mime_type_br_and_Z(self):\n+        \"\"\"\n+        Test that the MIME type for .br and .Z extensions is guessed correctly.\n+        \"\"\"\n+        test_tuples = (\n+            (\".html.br\", \"application/x-brotli\"),\n+            (\".html.Z\", \"application/x-compress\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
  "django__django-16661": "",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..29d13a4 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,35 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_correct_import_ordering(self):\n+        \"\"\"\n+        Test that the migration writer orders imports correctly.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield\",\n+                        models.CharField(max_length=100),\n+                    ),\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Expected order: standard library imports, then third-party imports\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..020fed4 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -330,7 +330,21 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n-class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n+class TestImageFieldPostInitSignal(TestCase):\n+    def test_post_init_signal_not_connected_for_no_dimensions(self):\n+        # A simple model with an ImageField and no dimension fields.\n+        class SimpleModel(models.Model):\n+            image = models.ImageField(upload_to='images/')\n+\n+        # Ensure the post_init signal is NOT connected for SimpleModel\n+        simple_model_id = id(SimpleModel)\n+        connected_senders = [sender_id for (_, sender_id), *_ in signals.post_init.receivers]\n+        \n+        self.assertNotIn(\n+            simple_model_id,\n+            connected_senders,\n+            \"post_init signal should not be connected for model with no dimensions.\"\n+        )\n     \"\"\"\n     Tests behavior of an ImageField with one dimensions field.\n     \"\"\"\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..94bf4b6 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1148,6 +1148,62 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.RenameIndex(\"Pony\", new_name=\"new_name\", old_name=\"old_name\")],\n         )\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"blue\"], name=\"idx_pony_weight_blue\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_blue\"),\n+            ],\n+            [],\n+        )\n+\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+            ],\n+            [],\n+        )\n+\n+        self.assertOptimizesTo(\n+            [\n+                migrations.RenameIndex(\n+                    \"Pony\", new_name=\"mid_name\", old_name=\"old_name\"\n+                ),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+                migrations.RenameIndex(\n+                    \"Pony\", new_name=\"new_name\", old_name=\"mid_name\"\n+                ),\n+            ],\n+            [\n+                migrations.RenameIndex(\n+                    \"Pony\", new_name=\"new_name\", old_name=\"old_name\"\n+                ),\n+            ],\n+        )\n+\n         self.assertDoesNotOptimize(\n             [\n                 migrations.RenameIndex(\n@@ -1157,4 +1213,4 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..30cf368 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -798,8 +798,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n-                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is not \"\n+                \"a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n             )\n@@ -814,8 +815,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n-                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is not \"\n+                \"a callable, an attribute of 'CityInline', or an attribute of \"\n+                \"'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n             )\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..8757505 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -42,8 +43,29 @@ class XorLookupsTests(TestCase):\n             Number.objects.exclude(Q(num__lte=7) ^ Q(num__gte=3)),\n             self.numbers[3:8],\n         )\n-\n-    def test_stages(self):\n+    \n+    def test_xor_parity(self):\n+        # Testing XOR parity for odd number of arguments to ensure odd parity\n+        # Case 1: Three arguments, only one true\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=2) ^ Q(num__gte=4) ^ Q(num__gte=6)),\n+            self.numbers[2:4],  # Parity: True (only num__gte=2 is True)\n+        )\n+        # Case 2: Three arguments, two true\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5)),\n+            self.numbers[1:3] + self.numbers[5:],  # Parity: True (odd number of Trues)\n+        )\n+        # Case 3: Four arguments, all true\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=0) ^ Q(num__gte=2) ^ Q(num__gte=4) ^ Q(num__gte=6)),\n+            self.numbers[:6],  # Parity: False (even number of Trues)\n+        )\n+        # Case 4: Five arguments, three true\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7) ^ Q(num__gte=9)),\n+            self.numbers[1:3] + self.numbers[5:7] + self.numbers[9:],  # Parity: True (odd number of Trues)\n+        )\n         numbers = Number.objects.all()\n         self.assertSequenceEqual(\n             numbers.filter(num__gte=0) ^ numbers.filter(num__lte=11),\n@@ -64,4 +86,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..5ff939e 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -638,7 +638,17 @@ class MakeMigrationsTests(MigrationTestBase):\n                 with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n                     with mock.patch.object(TestRouter, 'allow_migrate', return_value=False) as allow_migrate:\n                         call_command('makemigrations', 'migrations', verbosity=0)\n-                allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n+                # Check allow_migrate is called correctly\n+                allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+                allow_migrate.assert_any_call('other', 'migrations', model_name='UnicodeModel')\n+                self.assertEqual(\n+                    allow_migrate.mock_calls.count(mock.call('default', 'migrations', model_name='UnicodeModel')), \n+                    1\n+                )\n+                self.assertEqual(\n+                    allow_migrate.mock_calls.count(mock.call('other', 'migrations', model_name='UnicodeModel')),\n+                    1\n+                )\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n     def test_failing_migration(self):\n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..920fc25 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,6 +297,43 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+    def test_paginator_iteration_with_empty_list(self):\n+        \"\"\"Test iterating over a paginator with an empty list.\"\"\"\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_with_single_page(self):\n+        \"\"\"Test iterating over a paginator with a single page.\"\"\"\n+        paginator = Paginator([1], 2)\n+        page_iterator = iter(paginator)\n+        first_page = next(page_iterator)\n+        self.assertEqual(list(first_page), [1])\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_with_multiple_full_pages(self):\n+        \"\"\"Test iterating over a paginator with multiple full pages.\"\"\"\n+        paginator = Paginator([1, 2, 3, 4], 2)\n+        page_iterator = iter(paginator)\n+        first_page = next(page_iterator)\n+        self.assertEqual(list(first_page), [1, 2])\n+        second_page = next(page_iterator)\n+        self.assertEqual(list(second_page), [3, 4])\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_with_partial_last_page(self):\n+        \"\"\"Test iterating over a paginator with a partial last page.\"\"\"\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        first_page = next(page_iterator)\n+        self.assertEqual(list(first_page), [1, 2])\n+        second_page = next(page_iterator)\n+        self.assertEqual(list(second_page), [3])\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n \n class ModelPaginationTests(TestCase):\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..105e7da 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,35 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_with_density_false():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_no_range_density_true():\n+    data = np.random.rand(10)\n+    _, bins, _ = plt.hist(data, \"auto\", density=True)\n+    assert bins[0] <= data.min() and bins[-1] >= data.max()\n+\n+def test_hist_density_with_weights():\n+    weights = np.random.rand(10)\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True, weights=weights)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_cumulative_density():\n+    data = np.random.rand(10)\n+    _, bins, _ = plt.hist(data, \"auto\", range=(0, 1), density=True, cumulative=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6395,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..36c8ee6 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -939,7 +939,16 @@ def test_inverted_limits():\n     plt.close()\n \n \n-@image_comparison(baseline_images=['nonfinite_limits'])\n+def test_invert_log_axis():\n+    # Test inverting a log-scaled axis using set_ylim\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1), \"Failed to invert log-scale axis limits\"\n+\n+    ax.set_ylim(1, 10)\n+    assert ax.get_ylim() == (1, 10), \"Failed to restore original log-scale axis limits\"\n+    plt.close(fig)\n def test_nonfinite_limits():\n     x = np.arange(0., np.e, 0.01)\n     # silence divide by zero warning from log(0)\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..2c0e9d4 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -306,9 +306,31 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert x_units is ax.xaxis.units\n         assert y_units is ax.yaxis.units\n \n-\n-def test_hist():\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted. See #22640.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    import warnings\n+\n+    # Create a figure and axis\n+    f, ax = plt.subplots()\n+    \n+    # Update units on x-axis\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    \n+    # Capture warnings\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        \n+        # Plot empty data\n+        ax.plot([], [])\n+        \n+        # Assert that no warnings are raised\n+        assert len(w) == 0, f\"Warnings were raised: {[str(warn.message) for warn in w]}\"\n+        \n+    plt.close(f)\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..0fafbf6 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,13 +490,24 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n \n-def test_rcparams_reset_after_fail():\n+def test_get_backend_does_not_clear_figs():\n+    # Ensure that calling get_backend() does not clear figures created under rc_context.\n+    with rc_context():\n+        fig2 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, '\\nFigures were cleared:\\n' + before + '\\n' + after\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..ebcf453 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,13 +15,25 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n \n \n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax2 = fig_test.add_subplot(122, projection='3d')\n+    ax1.scatter(1, 1, 1)\n+    ax2.scatter(1, 1, 1, c='r')\n+    ax1.set_visible(False)\n+\n+    ref_ax1 = fig_ref.add_subplot(121, projection='3d')\n+    ref_ax2 = fig_ref.add_subplot(122, projection='3d')\n+    ref_ax2.scatter(1, 1, 1, c='r')\n+    # ref_ax1 is not set visible, as we are comparing with the invisibility of test_ax1\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..a5d2c1b 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,30 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-\n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+def test_stackplot_color_cycle():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    from matplotlib.patches import Rectangle\n+\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    \n+    # Creating a figure and axis\n+    fig, ax = plt.subplots()\n+    \n+    # Use a color from the cycle\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    \n+    # Adding a rectangle patch with another color from the cycle\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    \n+    # Testing stackplot with cycler colors\n+    try:\n+        ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+        color_cycle_changed = False\n+    except ValueError:\n+        color_cycle_changed = True\n+    \n+    assert not color_cycle_changed, \"Stackplot should not change Axes cycler.\"\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..88f71f3 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -16,6 +16,35 @@ from matplotlib.offsetbox import (\n     OffsetImage, TextArea, _get_packed_offsets)\n \n \n+@pytest.mark.parametrize(\"align\", [\"bottom\", \"top\"])\n+def test_hpacker_align_top_bottom(align):\n+    \"\"\"Test HPacker align with top and bottom to ensure correct behavior.\"\"\"\n+    # set the DPI to match points to make the math easier\n+    fig = plt.figure(dpi=72)\n+    x1, y1 = 10, 30\n+    x2, y2 = 20, 60\n+    r1 = DrawingArea(x1, y1)\n+    r2 = DrawingArea(x2, y2)\n+\n+    hpacker = HPacker(children=[r1, r2], pad=0, sep=0, align=align)\n+    renderer = fig.canvas.get_renderer()\n+\n+    # Get extents and offsets\n+    *extents, offset_pairs = hpacker.get_extent_offsets(renderer)\n+\n+    # HPacker Measurements\n+    assert_allclose((x1 + x2, max(y1, y2), 0, 0), extents)\n+\n+    # Internal element placement\n+    if align == \"bottom\":\n+        y_height = 0\n+    elif align == \"top\":\n+        y_height = y2 - y1\n+\n+    # x-offsets, y-offsets\n+    assert_allclose([(0, y_height), (x1, 0)], offset_pairs)\n+\n+\n @image_comparison(['offsetbox_clipping'], remove_text=True)\n def test_offsetbox_clipping():\n     # - create a plot\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..7195297 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -595,6 +595,80 @@ def test_svg_font_string(font_str, include_generic):\n \n     with BytesIO() as fd:\n         fig.savefig(fd, format=\"svg\")\n+\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox\n+    # in output svg.\n+    fig = plt.figure()\n+    ax = fig.add_subplot()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n+\n+\n+def test_multiple_annotationbboxes_with_gid():\n+    # Test multiple AnnotationBboxes with different gids appear in the SVG.\n+    fig = plt.figure()\n+    ax = fig.add_subplot()\n+    arr_img = np.ones((32, 32))\n+    xy1 = (0.2, 0.4)\n+    xy2 = (0.5, 0.6)\n+    xy3 = (0.8, 0.2)\n+\n+    # Create multiple annotation bboxes\n+    imageboxes = [OffsetImage(arr_img, zoom=0.1) for _ in range(3)]\n+    for idx, imagebox in enumerate(imageboxes):\n+        imagebox.image.axes = ax\n+\n+    # Set different gids\n+    anns = [\n+        AnnotationBbox(imageboxes[0], xy1, xybox=(120., -80.), xycoords='data',\n+                       boxcoords=\"offset points\", pad=0.5, arrowprops=dict(\n+                arrowstyle=\"->\", connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")),\n+        AnnotationBbox(imageboxes[1], xy2, xybox=(100., -50.), xycoords='data',\n+                       boxcoords=\"offset points\", pad=0.5, arrowprops=dict(\n+                arrowstyle=\"->\", connectionstyle=\"arc3,rad=0.1\")),\n+        AnnotationBbox(imageboxes[2], xy3, xybox=(150., -100.), xycoords='data',\n+                       boxcoords=\"offset points\", pad=0.5, arrowprops=dict(\n+                arrowstyle=\"->\", connectionstyle=\"arc,angleA=0,angleB=90,rad=10\"))\n+    ]\n+\n+    gid_labels = [\"GID_1\", \"GID_2\", \"GID_3\"]\n+    \n+    for ann, gid in zip(anns, gid_labels):\n+        ann.set_gid(gid)\n+        ax.add_artist(ann)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    # Check that each gid is present in the SVG output\n+    for gid in gid_labels:\n+        expected = f'<g id=\"{gid}\">'\n+        assert expected in buf\n         buf = fd.getvalue()\n \n     tree = xml.etree.ElementTree.fromstring(buf)\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..20ec305 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,22 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import numpy as np\n+import pytest\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+import matplotlib as mpl\n+import matplotlib.colors as mcolors\n+import matplotlib.pyplot as plt\n+\n+@pytest.mark.parametrize('dtype', [np.uint8, np.int32, np.float32, np.float64])\n+def test_no_numpy_deprecation_warnings(dtype):\n+    # This test ensures that using color maps with different dtypes does not raise deprecation warnings.\n+    cm = mpl.colormaps['viridis']\n+    with pytest.warns(None) as record:\n+        cm(np.empty((0,), dtype=dtype))\n+    # Ensure no warnings were raised\n+    assert len(record) == 0\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..7e35b8d 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,34 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..012bef4 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,10 +1,11 @@\n+\n from io import BytesIO\n import ast\n import pickle\n \n import numpy as np\n import pytest\n-\n+import pickletools\n import matplotlib as mpl\n from matplotlib import cm\n from matplotlib.testing import subprocess_run_helper\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..852d383 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -38,6 +38,33 @@ def test_simple():\n     pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     fig = plt.figure()\n+\n+def test_pickle_figure_with_aligned_labels():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n+    # Reproducing the issue scenario\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+    fig.align_labels()\n+    \n+    # Attempt to pickle the figure\n+    try:\n+        pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n+        pickle_successful = True\n+    except Exception as e:\n+        pickle_successful = False\n+        print(f\"Pickle failed with exception: {e}\")\n+    \n+    assert pickle_successful, \"Figure with aligned labels could not be pickled\"\n     ax = plt.axes()\n     plt.plot(np.arange(10))\n     ax.set_yscale('log')\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..c0bc430 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -992,6 +992,70 @@ def test_hexbin_linear():\n               reduce_C_function=np.sum)\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+import pytest\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal()\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+@pytest.mark.parametrize('mincnt, expected_non_nan_hexbins', [\n+    (1, 3),  # mincnt=1 should keep bins with at least one point.\n+    (2, 1)   # mincnt=2 should keep bins with at least two points.\n+])\n+def test_hexbin_mincnt_with_and_without_C(mincnt, expected_non_nan_hexbins, recwarn):\n+    # Additional test to ensure that mincnt works consistently with or without the C parameter.\n+\n+    X, Y = np.array([0, 0, 1]), np.array([0, 0, 1])\n+    Z = np.ones_like(X)\n+\n+    fig, ax = plt.subplots(2, 1, figsize=(8, 8))\n+\n+    hb_no_C = ax[0].hexbin(X, Y, mincnt=mincnt)\n+    hb_with_C = ax[1].hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=mincnt)\n+    \n+    assert np.isfinite(hb_no_C.get_array()).sum() == expected_non_nan_hexbins\n+    assert np.isfinite(hb_with_C.get_array()).sum() == expected_non_nan_hexbins\n+\n+    # Checking no warnings are raised\n+    assert not recwarn\n+\n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..4a21bb7 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,26 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    x = np.array([[0, 1], [1, 2]])\n+    y = np.array([[2, 1], [1, 0]])\n+\n+    cs_test = ax_test.contour(x)\n+    cs_ref = ax_ref.contour(y)\n+\n+    # Use the set_paths method to set the paths from cs_ref to cs_test\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+    # Both figures should be identical due to the path copy\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..6bc474c 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,25 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n+\n+def test_valid_name_allowed(app, client):\n+    try:\n+        blueprint = flask.Blueprint(\"valid_name\", __name__)\n+    except ValueError:\n+        pytest.fail(\"Blueprint with a valid name raised ValueError unexpectedly.\")\n+\n+    assert blueprint.name == \"valid_name\"\n+\n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..87d0812 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -86,7 +86,14 @@ class TestRequests:\n         with pytest.raises(exception):\n             requests.get(url)\n \n-    def test_basic_building(self):\n+    @pytest.mark.parametrize(\n+        'exception, url', (\n+            (InvalidURL, 'http://.example.com'),\n+        )\n+    )\n+    def test_invalid_url_new_cases(self, exception, url):\n+        with pytest.raises(exception):\n+            requests.get(url)\n         req = requests.Request()\n         req.url = 'http://kennethreitz.org/'\n         req.data = {'life': '42'}\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..2247548 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,22 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n-\n-def test_raise_no_warning_for_nan_in_binary_ops():\n+def test_setitem_coercion_with_values_property():\n+    import numpy as np\n+    import xarray as xr\n+\n+    class HasValues:\n+        values = 5\n+\n+    # Test case for assigning object without 'values' attribute\n+    good_indexed = xr.DataArray([None], dims=\"dim_0\")\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    assert isinstance(good_indexed.values[0], set), \"Expected a set object in the array\"\n+\n+    # Test case for assigning object with 'values' attribute\n+    bad_indexed = xr.DataArray([None], dims=\"dim_0\")\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+    assert isinstance(bad_indexed.values[0], HasValues), \"Expected a HasValues object in the array\"\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "",
  "pydata__xarray-3151": "",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..f67a655 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,18 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n-\n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+\n+        # Create a DataArray with attributes\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={\"units\": \"K\"})\n+        \n+        # Compute the quantile while keeping attributes\n+        out = da.quantile(0.9, dim='x', keep_attrs=True)\n+        \n+        # Assert that attributes are retained\n+        assert out.attrs == da.attrs\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..89fff6a 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,8 +1,10 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -134,6 +136,24 @@ class TestMergeFunction:\n \n \n class TestMergeMethod:\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Test basic merge\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n+        # Test merging when the DataArray has the same name as a dataset variable\n+        da_same_name = xr.DataArray(data=2, name=\"a\")\n+        with pytest.raises(xr.MergeError):\n+            ds.merge(da_same_name)\n+\n+        # Test merging when the DataArray has different dimensions\n+        da_different_dim = xr.DataArray(data=[1, 2], dims=\"x\", name=\"b\")\n+        ds_with_dim = xr.Dataset({\"a\": (\"x\", [0, 0]), \"x\": [0, 1]})\n+        expected = xr.Dataset({\"a\": (\"x\", [0, 0]), \"b\": (\"x\", [1, 2]), \"x\": [0, 1]})\n+        assert_identical(ds_with_dim.merge(da_different_dim), expected)\n+\n     def test_merge(self):\n         data = create_test_data()\n         ds1 = data[[\"var1\"]]\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..b30038a 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,34 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_no_reference(self):\n+        ds1 = xr.Dataset(attrs={\"key\": \"value1\"})\n+        ds2 = xr.Dataset(attrs={\"key\": \"value2\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"key\"] = \"new_value\"\n+        assert ds1.attrs[\"key\"] == \"value1\"\n+        assert ds2.attrs[\"key\"] == \"value2\"\n+        assert ds3.attrs[\"key\"] == \"new_value\"\n+\n+    def test_merge_attrs_override_shared_keys(self):\n+        ds1 = xr.Dataset(attrs={\"shared\": \"ds1_value\", \"unique1\": \"value1\"})\n+        ds2 = xr.Dataset(attrs={\"shared\": \"ds2_value\", \"unique2\": \"value2\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"shared\"] = \"overridden_value\"\n+        ds3.attrs[\"unique1\"] = \"overridden_unique1\"\n+        assert ds1.attrs[\"shared\"] == \"ds1_value\"\n+        assert ds2.attrs[\"shared\"] == \"ds2_value\"\n+        assert ds3.attrs[\"shared\"] == \"overridden_value\"\n+        assert ds3.attrs[\"unique1\"] == \"overridden_unique1\"\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..029f3fd 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1916,6 +1916,38 @@ def test_dot_align_coords(use_dask) -> None:\n \n \n def test_where() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"cond_attr\": \"condition\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"x_attr\": \"x-values\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"y_attr\": \"y-values\"})\n+    \n+    # Test without keep_attrs\n+    actual_no_attrs = xr.where(cond, x, y)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+    \n+    # Test with keep_attrs=True\n+    actual_with_attrs = xr.where(cond, x, y, keep_attrs=True)\n+    expected_with_attrs = xr.DataArray([1, 0], dims=\"x\", attrs={\"x_attr\": \"x-values\"})\n+    assert_identical(expected_with_attrs, actual_with_attrs)\n+    \n+    # Check that attributes are not present when keep_attrs=False\n+    assert actual_no_attrs.attrs == {}\n+    \n+    # Check that attributes are correct when keep_attrs=True\n+    assert actual_with_attrs.attrs == {\"x_attr\": \"x-values\"}\n+\n+    # Edge case: When x and y have the same attribute\n+    x.attrs = y.attrs = {\"shared_attr\": \"shared\"}\n+    actual_shared_attrs = xr.where(cond, x, y, keep_attrs=True)\n+    expected_shared_attrs = xr.DataArray([1, 0], dims=\"x\", attrs={\"shared_attr\": \"shared\"})\n+    assert_identical(expected_shared_attrs, actual_shared_attrs)\n+\n+    # Edge case: Different attributes on x and y, check merge precedence (x's attrs should be used)\n+    x.attrs = {\"x_only\": \"unique to x\"}\n+    y.attrs = {\"y_only\": \"unique to y\"}\n+    actual_diff_attrs = xr.where(cond, x, y, keep_attrs=True)\n+    expected_diff_attrs = xr.DataArray([1, 0], dims=\"x\", attrs={\"x_only\": \"unique to x\"})\n+    assert_identical(expected_diff_attrs, actual_diff_attrs)\n     cond = xr.DataArray([True, False], dims=\"x\")\n     actual = xr.where(cond, 1, 0)\n     expected = xr.DataArray([1, 0], dims=\"x\")\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..01f718d 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,6 +13,31 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_from_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == unsigned_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n \n def test_CFMaskCoder_decode():\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..a02c936 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1925,6 +1925,22 @@ def test_where_attrs() -> None:\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n     y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n     actual = xr.where(cond, x, y, keep_attrs=True)\n+\n+    # Test where with keep_attrs=True and scalar second argument\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual_scalar_x = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected_scalar_x = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected_scalar_x, actual_scalar_x)\n+\n+    # Test where with keep_attrs=True and scalar third argument\n+    actual_scalar_y = xr.where(cond, xr.DataArray([1, 2, 3], dims=\"x\"), 0, keep_attrs=True)\n+    expected_scalar_y = xr.DataArray([1, 0, 3], dims=\"x\", attrs={})\n+    assert_identical(expected_scalar_y, actual_scalar_y)\n+\n+    # Test where with keep_attrs=True and both x and y as scalars\n+    actual_both_scalars = xr.where(cond, 42, -1, keep_attrs=True)\n+    expected_both_scalars = xr.DataArray([42, -1, 42], dims=\"x\", attrs={})\n+    assert_identical(expected_both_scalars, actual_both_scalars)\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..fec2474 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -696,4 +696,17 @@ def test_safe_cast_to_index_datetime_datetime():\n     expected = pd.Index(dates)\n     actual = safe_cast_to_index(np.array(dates))\n     assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+    assert isinstance(actual, pd.Index)\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"int16\", \"float64\", \"uint32\"])\n+def test_multiindex_dtype_persistence(dtype: str) -> None:\n+    arr = np.array([0, 1, 2], dtype=dtype)\n+    ds = xr.Dataset(coords={\"coord\": (\"x\", arr)})\n+    stacked = ds.stack(y=(\"coord\",))\n+    assert ds[\"coord\"].dtype == stacked[\"coord\"].dtype, f\"Expected {dtype}, got {stacked['coord'].dtype}\"\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..9dbdd1e 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -494,11 +494,36 @@ def test_get_map_data() -> None:\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n \n-    assert len(expected_linelists) == len(data)\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers.similar import Similar\n+\n+\n+def test_set_duplicate_lines_to_zero():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar = Similar(min_lines=0)\n+        similar.append_stream(\"dummy1\", StringIO(\"print('Hello World')\\nprint('Hello Again')\"))\n+        similar.append_stream(\"dummy2\", StringIO(\"print('Hello World')\\nprint('Hello Again')\"))\n+        similar.run()\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+    \n+def test_set_duplicate_lines_to_nonzero():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar = Similar(min_lines=1)\n+        similar.append_stream(\"dummy1\", StringIO(\"print('Hello World')\\nprint('Hello Again')\"))\n+        similar.append_stream(\"dummy2\", StringIO(\"print('Hello World')\\nprint('Hello Again')\"))\n+        similar.run()\n+    assert ex.value.code == 0\n+    assert \"dummy1\" in output.getvalue()\n+    assert \"dummy2\" in output.getvalue()\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..c0a1f89 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,27 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+from pylint.lint import Run\n+from _pytest.capture import CaptureFixture\n+\n+EMPTY_MODULE = \"dummy_module.py\"\n+\n+def test_short_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the short -v option works without requiring an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the long --verbose option works without requiring an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..6c16801 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,66 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    def test_recursive_ignore(self):\n+        \"\"\"Tests recursive run of linter ignoring files or directories using --ignore parameter.\"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=subdirectory/ignored_file.py\",\n+            ],\n+            code=0,\n+        )\n+        \n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_recursive_ignore_patterns(self):\n+        \"\"\"Tests recursive run of linter ignoring files or directories using --ignore-patterns parameter.\"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=subdirectory/.*\",\n+            ],\n+            code=0,\n+        )\n+        \n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=.*ignored_file.py\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_recursive_ignore_paths(self):\n+        \"\"\"Tests recursive run of linter ignoring files or directories using --ignore-paths parameter.\"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*ignored_subdirectory/.*\",\n+            ],\n+            code=0,\n+        )\n+        \n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*subdirectory/ignored_file.py\",\n+            ],\n+            code=0,\n+        )\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..19b216d 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1323,6 +1323,60 @@ class TestRunTC:\n                 for path in sys.path\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n+    def test_ignore_paths_with_recursive_option(self) -> None:\n+        \"\"\"Test that `--ignore-paths` works with `--recursive=y`\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+                \n+    def test_combined_ignore_paths_and_ignore_option(self) -> None:\n+        \"\"\"Test that combined use of `--ignore-paths` and `--ignore` works correctly.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory/.*\",\n+                        \"--ignore=subdirectory\",\n+                    ],\n+                    code=0,\n+                )\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n             with _test_cwd():\n                 os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n                 self._runtest(\n@@ -1339,6 +1393,60 @@ class TestRunTC:\n                 for path in sys.path\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n+    def test_ignore_paths_with_recursive_option(self) -> None:\n+        \"\"\"Test that `--ignore-paths` works with `--recursive=y`\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+                \n+    def test_combined_ignore_paths_and_ignore_option(self) -> None:\n+        \"\"\"Test that combined use of `--ignore-paths` and `--ignore` works correctly.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory/.*\",\n+                        \"--ignore=subdirectory\",\n+                    ],\n+                    code=0,\n+                )\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n             with _test_cwd():\n                 os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n                 self._test_output(\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..33db13b 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -753,10 +753,38 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n         ]\n         with _test_sys_path(), patch(\"os.getcwd\") as mock_getcwd:\n             mock_getcwd.return_value = cwd\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            # Expect the first element \"\" to be removed\n+            assert sys.path == paths[1:]\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            # Expect the first element \".\" to be removed\n+            assert sys.path == paths[1:]\n+\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            # Expect the first element \"/do_not_remove\" not to be removed\n+            assert sys.path == paths\n+\n             paths = [cwd, *default_paths]\n             sys.path = copy(paths)\n             with _test_environ_pythonpath():\n                 modify_sys_path()\n+            # Expect the first element cwd to be removed\n+            assert sys.path == paths[1:]\n+\n+            paths = [cwd, cwd, *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath(\".\"):\n+                modify_sys_path()\n             assert sys.path == paths[1:]\n \n             paths = [cwd, cwd, *default_paths]\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..591b948 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,31 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+def test_caplog_get_records_and_clear(caplog):\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+    \n+    # Initially, both should be empty\n+    verify_consistency()\n+    \n+    # Log a message and verify they are synchronized\n+    logging.warning(\"test message\")\n+    verify_consistency()\n+    assert [record.message for record in caplog.get_records(\"call\")] == [\"test message\"]\n+\n+    # Clear the caplog and verify both are empty\n+    caplog.clear()\n+    verify_consistency()\n+    assert not caplog.get_records(\"call\")\n+    assert not caplog.records\n+\n+    # Logging another message after clear\n+    logging.warning(\"another test message\")\n+    verify_consistency()\n+    assert [record.message for record in caplog.get_records(\"call\")] == [\"another test message\"]\n+\n+import logging\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..edbfb55 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1273,6 +1273,39 @@ def test_pdb_teardown_skipped(\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+@pytest.mark.parametrize(\"mark\", [\"@unittest.skip\", \"@pytest.mark.skip\"])\n+def test_pdb_teardown_skipped_for_classes_with_unittest_skip_if(\n+    pytester: Pytester, monkeypatch: MonkeyPatch, mark: str\n+) -> None:\n+    \"\"\"\n+    With --pdb, setUp and tearDown should not be called for tests skipped\n+    via a decorator on the class (#10060).\n+    \"\"\"\n+    tracked: List[str] = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skipIf(True, \"skipped for reasons\")\n+        class MyTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_1(self):\n+                pass\n+    \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n \n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..1aa292c 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1042,6 +1042,28 @@ class TestFDCapture(object):\n             os.write(1, b\"world\")\n             sys.stdout.write(\"qlwkej\")\n             assert not cap.snap()\n+\n+    def test_encodedfile_mode(self, capfd):\n+        import sys\n+        captured = capfd.readouterr()\n+        assert \"b\" not in sys.stdout.mode\n+\n+    def test_encodedfile_write_with_str(self):\n+        from _pytest.capture import EncodedFile\n+        import io\n+        buffer = io.StringIO()\n+        ef = EncodedFile(buffer, 'utf-8')\n+        ef.write(\"Hello World\")\n+        assert buffer.getvalue() == \"Hello World\"\n+\n+    def test_encodedfile_write_with_bytes_raises(self):\n+        from _pytest.capture import EncodedFile\n+        import io\n+        buffer = io.StringIO()\n+        ef = EncodedFile(buffer, 'utf-8')\n+        import pytest\n+        with pytest.raises(TypeError, match=r\"write\\(\\) argument must be str, not bytes\"):\n+            ef.write(b\"Hello World\")\n             cap.resume()\n             os.write(1, b\"but now\")\n             sys.stdout.write(\" yes\\n\")\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 8c1c2d7..8fe5ab3 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1,6 +1,9 @@\n+\n import gc\n \n import pytest\n+import numpy as np\n+from unittest.mock import patch\n from _pytest.main import ExitCode\n \n \n@@ -19,6 +22,25 @@ def test_simple_unittest(testdir):\n     assert reprec.matchreport(\"testpassing\").passed\n     assert reprec.matchreport(\"test_failing\").failed\n \n+def test_patch_with_numpy_array(testdir):\n+    \"\"\"\n+    Test patching with a numpy array to ensure no ValueError is raised during test collection.\n+    \"\"\"\n+    testpath = testdir.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import numpy as np\n+        from unittest.mock import patch\n+\n+        class TestNumpyPatch(unittest.TestCase):\n+            @patch(\"dummy_module.some_attribute\", new=np.array([1, 2, 3]))\n+            def test_numpy_patch(self):\n+                self.assertTrue(True)  # Simply test if it runs without error\n+    \"\"\"\n+    )\n+    reprec = testdir.inline_run(testpath)\n+    assert reprec.matchreport(\"test_numpy_patch\").passed\n+\n \n def test_runTest_method(testdir):\n     testdir.makepyfile(\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..c453fdd 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,8 +116,31 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n-\n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n+        \n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=full-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n+    def test_handle_bad_request(self, pastebin, monkeypatch):\n+        # Mock urlopen to raise an HTTPError for bad requests\n+        from urllib.error import HTTPError\n+        def mock_urlopen_raise_error(*args, **kwargs):\n+            raise HTTPError(args[0], 400, \"Bad Request\", {}, None)\n+        \n+        monkeypatch.setattr(urllib.request, \"urlopen\", mock_urlopen_raise_error)\n+\n+        # Ensure bad requests are handled gracefully\n+        with pytest.raises(HTTPError) as excinfo:\n+            pastebin.create_new_paste(b\"problematic contents\")\n+        assert excinfo.value.code == 400\n         return calls\n \n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n@@ -130,4 +153,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..696a349 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -702,6 +702,31 @@ class Test_genitems:\n         assert items[1].name == \"testmethod_one\"\n         assert items[2].name == \"testmethod_one\"\n \n+    def test_example_items2(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(arg0):\n+                pass\n+\n+            class TestY:\n+                @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+                def testmethod_two(self, arg0):\n+                    pass\n+        \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 3\n+        assert items[0].name == \"testmethod_two[.[]\"\n+        assert items[1].name == \"testmethod_two[.[]\"\n+        assert items[2].name == \"testmethod_two[.[]\"\n+\n+        # Let's also test getmodpath here\n+        assert items[0].getmodpath() == \"testmethod_two[.[]\"\n+        assert items[1].getmodpath() == \"TestY.testmethod_two[.[]\"\n+\n         # let's also test getmodpath here\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..e5a789a 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..7386c09 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,6 +607,36 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n+    def test_skip_with_xfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            @pytest.mark.xfail(run=True, reason=\"this should not run\")\n+            def test_skip_and_xfail():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines(\n+            [\"SKIPPED [1] test_skip_and_xfail.py:3: unconditional skip\", \"*1 skipped*\"]\n+        )\n+\n+    def test_skip_location_with_xfail_deactivated(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"should skip\")\n+            @pytest.mark.xfail(run=False, reason=\"xfail reason\")\n+            def test_skip_and_xfail_deactivated():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines(\n+            [\"SKIPPED [1] test_skip_and_xfail_deactivated.py:3: should skip\", \"*1 skipped*\"]\n+        )\n+\n     def test_skip_with_reason(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..8b1b528 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,6 +1,8 @@\n+\n import sys\n \n import pytest\n+from _pytest.pytester import Testdir\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n@@ -382,7 +384,31 @@ class TestXFail:\n         \"\"\"\n         )\n \n-    def xtest_dynamic_xfail_set_during_setup(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Test dynamically adding xfail during a test which fails.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Test dynamically adding xfail during a test with strict=True, which passes.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                # This test does not fail intentionally\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..26020c8 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -514,6 +514,12 @@ class TestCaptureFixture:\n         )\n         reprec.assertoutcome(passed=1)\n \n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n+\n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n",
  "pytest-dev__pytest-7571": "",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..b1ee676 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -12,6 +13,8 @@ from _pytest.pathlib import symlink_or_skip\n from _pytest.pytester import Testdir\n \n \n+from _pytest.pytester import Pytester\n+\n class TestCollector:\n     def test_collect_versus_item(self):\n         from pytest import Collector, Item\n@@ -1178,6 +1181,41 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n+def test_collect_symlink_in_nested_dir(pytester: Pytester) -> None:\n+    \"\"\"Test collecting symlinked directories that are nested within another directory.\"\"\"\n+    outer_dir = pytester.mkdir(\"outer_dir\")\n+    inner_dir = outer_dir.mkdir(\"inner_dir\")\n+    inner_symlink = outer_dir.joinpath(\"inner_symlink\")\n+    inner_symlink.symlink_to(inner_dir)\n+    inner_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", encoding=\"utf-8\")\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n+def test_collect_symlink_with_fixture(pytester: Pytester) -> None:\n+    \"\"\"Test collecting a symlinked directory where the test uses a fixture.\"\"\"\n+    symlinked_dir = pytester.mkdir(\"fixture_dir\")\n+    symlinked_dir.joinpath(\"test_fixture.py\").write_text(\n+        textwrap.dedent(\n+            \"\"\"\n+            import pytest\n+            @pytest.fixture\n+            def sample_fixture():\n+                return 42\n+\n+            def test_with_fixture(sample_fixture):\n+                assert sample_fixture == 42\n+            \"\"\"\n+        ),\n+        encoding=\"utf-8\",\n+    )\n+    pytester.path.joinpath(\"symlink_fixture\").symlink_to(symlinked_dir)\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n",
  "pytest-dev__pytest-8399": "",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..eb3a585 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,10 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+import numpy as np\n+from sklearn.linear_model import RidgeClassifierCV\n+from numpy.testing import assert_array_equal\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n@@ -598,7 +602,33 @@ def test_ridgecv_store_cv_values():\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n \n-def test_ridgecv_sample_weight():\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    # Sample data\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # RidgeClassifierCV with store_cv_values=True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # Fit with single target\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, 1, n_alphas), \"Unexpected shape for cv_values_ with single target.\"\n+\n+    # Fit with multiple targets - transpose ensures multiple targets\n+    y_multi = np.array([[1, 1, 1, -1, -1],\n+                        [1, -1, 1, -1, 1],\n+                        [-1, -1, 1, -1, -1]]).transpose()\n+    r.fit(x, y_multi)\n+    n_targets = y_multi.shape[1]\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas), \"Unexpected shape for cv_values_ with multiple targets.\"\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..fe97372 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,22 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+import numpy as np\n+from sklearn.metrics import fowlkes_mallows_score\n+from sklearn.utils.testing import assert_all_finite\n+\n+def test_int_overflow_mutual_info_fowlkes_mallows_score():\n+    # Test overflow in mutual_info_score and fowlkes_mallows_score\n+    x = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 + 204) + [4] * (814 + 39) + [5] * (316 + 20))\n+    y = np.array([0] * 52632 + [1] * 2529 + [0] * 14660 + [1] * 793 + [0] * 3271 + [1] * 204 + [0] * 814 + [1] * 39 + [0] * 316 + [1] * 20)\n+    \n+    # Modify x and y to ensure pk and qk are large enough\n+    p_large = np.array([0] * 70000 + [1] * 30000)\n+    q_large = np.array([0] * 50000 + [1] * 50000)\n+\n+    # Test if fowlkes_mallows_score handles large inputs gracefully\n+    score = fowlkes_mallows_score(p_large, q_large)\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..9af88f0 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,30 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_with_provided_vocabulary():\n+    # Given a predefined vocabulary\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n \n-def test_vectorizer_max_features():\n+    # When initializing CountVectorizer with the predefined vocabulary\n+    cv = CountVectorizer(vocabulary=vocabulary)\n+\n+    # Then get_feature_names should return the provided vocabulary in sorted order\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this'], feature_names)\n+\n+    # Transform should work without fitting and not raise NotFittedError\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = cv.transform(corpus)\n+    assert_equal(X.shape, (4, 9))  # 4 documents, 9 features\n+\n+    # Ensure vocabulary_ is set after transform\n+    assert_true(hasattr(cv, \"vocabulary_\"))\n+    assert_true(cv.fixed_vocabulary_)\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..807fb26 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -19,6 +19,11 @@ from sklearn.utils.testing import assert_raise_message\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n+from sklearn.linear_model import _logistic\n+from sklearn.utils._testing import assert_array_almost_equal\n+from sklearn.datasets import make_classification\n+import numpy as np\n+from sklearn.metrics.scorer import get_scorer\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n \n@@ -491,8 +496,32 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _logistic._log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..516749e 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -19,11 +19,46 @@ from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n-\n-# TODO: use another dataset that has multiple drops\n+@pytest.mark.parametrize('copy_X', [True, False])\n+def test_lasso_larsic_init_copyX_behavior(copy_X):\n+    \"\"\"\n+    Test that the copy_X parameter in the initialization of LassoLarsIC\n+    is respected when no override is given in the fit method.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    lasso_lars.fit(X, y)\n+    assert copy_X == np.array_equal(X, X_copy)\n+\n+\n+@pytest.mark.parametrize('copy_X', [True, False, None])\n+def test_lasso_larsic_fit_copyX_override_behavior(copy_X):\n+    \"\"\"\n+    Test that an explicit copy_X parameter in the fit method\n+    overrides the copy_X parameter set during initialization.\n+    If copy_X is None, it checks that the original initialization value is used.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=False, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    if copy_X is None:\n+        # This means fit should use the initialized copy_X\n+        expected_copy_behavior = False\n+        lasso_lars.fit(X, y)\n+    else:\n+        expected_copy_behavior = copy_X\n+        lasso_lars.fit(X, y, copy_X=copy_X)\n+    assert expected_copy_behavior == np.array_equal(X, X_copy)\n \n \n def test_simple():\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..feaae4c 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,8 +493,26 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n-\n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+def test_stratifiedkfold_shuffle_effect():\n+    # Ensure that shuffling with different random states affect the result.\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    # Without shuffling\n+    skf_no_shuffle = StratifiedKFold(n_splits=10, shuffle=False)\n+    test_indices_no_shuffle = [test_idx for _, test_idx in skf_no_shuffle.split(X, y)]\n+\n+    # With shuffling, using a fixed random state\n+    skf_shuffle_1 = StratifiedKFold(n_splits=10, shuffle=True, random_state=0)\n+    test_indices_shuffle_1 = [test_idx for _, test_idx in skf_shuffle_1.split(X, y)]\n+\n+    # With shuffling, using a different random state\n+    skf_shuffle_2 = StratifiedKFold(n_splits=10, shuffle=True, random_state=1)\n+    test_indices_shuffle_2 = [test_idx for _, test_idx in skf_shuffle_2.split(X, y)]\n+\n+    # Assert that shuffling indeed changes the test set indices\n+    assert test_indices_no_shuffle != test_indices_shuffle_1, \"Shuffling with random_state=0 should change test indices\"\n+    assert test_indices_shuffle_1 != test_indices_shuffle_2, \"Different random states should produce different test indices\"\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..d460ff6 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n@@ -202,6 +202,11 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     Xt = est.fit_transform(X)\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n \n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..1bd5e56 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..9197129 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -499,6 +499,36 @@ def test_transform():\n         flatten_transform=False).fit(X, y)\n \n     assert_array_equal(eclf1.transform(X).shape, (4, 6))\n+\n+@pytest.mark.filterwarnings('ignore: Default solver will be changed')  # 0.22\n+@pytest.mark.filterwarnings('ignore: Default multi_class will')  # 0.22\n+@pytest.mark.parametrize(\"X, y, voter\", [\n+    (load_iris(return_X_y=True)[0], load_iris(return_X_y=True)[1], VotingClassifier(\n+        [('lr', LogisticRegression()), ('rf', RandomForestClassifier(n_estimators=5))])),\n+    (make_regression(n_samples=100, n_features=20, noise=0.1, random_state=42)[0],\n+     make_regression(n_samples=100, n_features=20, noise=0.1, random_state=42)[1], VotingRegressor(\n+        [('lr', LinearRegression()), ('rf', RandomForestRegressor(n_estimators=5))]))\n+])\n+def test_none_estimator_with_weights(X, y, voter):\n+    # check that an estimator can be set to None and passing some weight\n+    # regression test for\n+    # https://github.com/scikit-learn/scikit-learn/issues/13777\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+\n+def test_all_none_estimators():\n+    # Test case where all estimators are set to None should raise ValueError\n+    X, y = load_iris(return_X_y=True)\n+    voter = VotingClassifier(\n+        estimators=[('lr', None), ('rf', None)]\n+    )\n+    try:\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    except ValueError as e:\n+        assert str(e) == 'All estimators are None. At least one is required!'\n     assert_array_equal(eclf2.transform(X).shape, (4, 6))\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n@@ -506,4 +536,4 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..8ae8a4b 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -327,8 +327,29 @@ def test_export_text_errors():\n                          \"spacing must be > 0, given 0\",\n                          export_text, clf, spacing=0)\n \n+from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\n+from sklearn.tree import export_text\n+from sklearn.datasets import load_iris\n+\n+def test_single_feature_tree_export():\n+    # Load dataset and use only one feature\n+    X, y = load_iris(return_X_y=True)\n+    X_single_feature = X[:, 0].reshape(-1, 1)  # Only the first feature\n+\n+    # Train a decision tree classifier\n+    tree = DecisionTreeClassifier(random_state=0)\n+    tree.fit(X_single_feature, y)\n+\n+    # Test export_text with a single feature\n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 5.45\n+    |   |--- class: 0\n+    |--- sepal_length >  5.45\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n \n-def test_export_text():\n+    # Ensure no IndexError is raised and the output is as expected\n+    assert export_text(tree, feature_names=['sepal_length'], max_depth=2) == expected_report\n     clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n     clf.fit(X, y)\n \n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..786f69d 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,7 +1532,31 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_robust(penalty, multi_class):\n+    # Test LogisticRegressionCV with various penalties when refit is False\n+    \n+    n_classes = 3\n+    n_features = 20\n+    X, y = make_classification(n_samples=200, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=0)\n+    \n+    Cs = np.logspace(-4, 4, 3)\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+    \n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n+                                l1_ratios=l1_ratios, random_state=0,\n+                                multi_class=multi_class, refit=False)\n+    lrcv.fit(X, y)\n+    assert lrcv.C_.shape == (n_classes,)\n+    if l1_ratios is not None:\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..ef2977f 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -25,9 +25,14 @@ def test_get_deps_info():\n     assert 'matplotlib' in deps_info\n \n \n+def test_joblib_in_deps_info():\n+    deps_info = _get_deps_info()\n+    assert 'joblib' in deps_info\n+\n+\n def test_show_versions_with_blas(capsys):\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..e2309d4 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,22 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+import numpy as np\n+from scipy import sparse\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for issue: ZeroDivisionError in _sparse_fit\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    # Check that the support_vectors_ and dual_coef_ are empty\n+    assert model.support_vectors_.shape[0] == 0\n+    assert model.dual_coef_.shape[1] == 0\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..0c9bc7e 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,6 +97,26 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents_nfkd():\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # \"LATIN SMALL LETTER O\" followed by \"COMBINING DIAERESIS\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # various combining marks\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # \"LATIN SMALL LETTER O\" with diaeresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # string with multiple decomposed characters\n+    a = \"a\\u0301e\\u0302i\\u0303o\\u0304u\\u0308\"  # combining marks after vowels\n+    expected = \"aeiou\"\n+    assert strip_accents_unicode(a) == expected\n \n def test_to_ascii():\n     # check some classical latin accentuated symbols\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..8fa3a7e 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,35 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n+import pytest\n+import numpy as np\n+from sklearn.feature_selection import SelectKBest, chi2\n+from sklearn.utils._testing import assert_array_equal\n+from sklearn.datasets import load_iris\n \n def test_get_support():\n+    \"\"\"Test to ensure that the dtype of DataFrame outputs is preserved.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype(\n+        {\n+            \"petal width (cm)\": np.float16,\n+            \"petal length (cm)\": np.float16,\n+        }\n+    )\n+    X[\"cat\"] = y.astype(\"category\")\n+\n+    selector = SelectKBest(chi2, k=2).set_output(transform=\"pandas\")\n+    X_out = selector.fit_transform(X, y)\n+\n+    # Ensure that the output dtypes are preserved\n+    for name, dtype in X_out.dtypes.items():\n+        assert dtype == X.dtypes[name], f\"dtype mismatch for column {name}: {dtype} != {X.dtypes[name]}\"\n+\n+    # Check shape correctness after transformation\n+    assert X_out.shape[1] == 2, f\"Expected 2 columns, got {X_out.shape[1]}\"\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..e435cea 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -330,7 +330,40 @@ def test_iforest_with_n_jobs_does_not_segfault():\n def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n-    model = IsolationForest()\n+import pytest\n+import warnings\n+import numpy as np\n+from sklearn.ensemble import IsolationForest\n+\n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not 'auto'.\n+\n+    Feature names are required for consistency checks during scoring.\n+\n+    Non-regression test for Issue #25844\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(0)\n+\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+    # Additional test to check for the absence of the warning during scoring\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        model.score_samples(X)\n+        assert len(w) == 0, \"Unexpected warning raised during score_samples\"\n+\n+    # Test with a numpy array input for predict after fitting with a DataFrame\n+    X_array = X.to_numpy()\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        model.predict(X_array)\n+        assert len(w) == 0, \"Unexpected warning raised during predict with ndarray\"\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +371,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..1535109 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,9 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+import pandas as pd\n+import pytest\n+import numpy as np\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..341d8ab 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -6,7 +7,12 @@ from scipy import sparse as sp\n \n import pytest\n \n-from sklearn.utils.testing import assert_array_equal\n+import numpy as np\n+from sklearn.cluster import KMeans\n+from sklearn.datasets import make_blobs\n+import pytest\n+from sklearn.utils._testing import assert_array_equal\n+from sklearn.utils._testing import assert_allclose\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_allclose\n from sklearn.utils.testing import assert_almost_equal\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..24417d0 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,9 +251,28 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_dedent_and_append_and_prepend(literal_inc_path):\n+    # dedent: 2\n+    options = {'lines': '9-11', 'dedent': 2, 'prepend': 'class Foo:', 'append': '# comment'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"class Foo:\\n\"\n+                       \"  def baz():\\n\"\n+                       \"      pass\\n\"\n+                       \"\\n\"\n+                       \"# comment\\n\")\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n-def test_LiteralIncludeReader_tabwidth(testroot):\n+def test_LiteralIncludeReader_prepend_with_indentation(literal_inc_path):\n+    # Prepend with specific indentation\n+    options = {'lines': '9-11', 'prepend': '    class Bar:', 'dedent': 2}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"    class Bar:\\n\"\n+                       \"  def baz():\\n\"\n+                       \"      pass\\n\"\n+                       \"\\n\")\n     # tab-width: 4\n     options = {'tab-width': 4, 'pyobject': 'Qux'}\n     reader = LiteralIncludeReader(testroot / 'target.py', options, DUMMY_CONFIG)\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..23f8abb 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,24 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_autoclass(app):\n+    # Write a simple autoclass directive for a sample class\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.autodoc.Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    # Verify that there is no \"Return type\" section for the class\n+    assert 'Return type:' not in context\n+    assert 'class target.autodoc.Square' in context\n+    assert 'A class representing a square figure.' in context\n+    assert 'Parameters:' in context\n+    assert '**width** (*int*)' in context\n+    assert '**height** (*int*)' in context\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n@@ -1054,6 +1072,24 @@ def test_autodoc_typehints_description_with_documented_init(app):\n             '      Return type:\\n'\n             '         None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_autoclass(app):\n+    # Write a simple autoclass directive for a sample class\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.autodoc.Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    # Verify that there is no \"Return type\" section for the class\n+    assert 'Return type:' not in context\n+    assert 'class target.autodoc.Square' in context\n+    assert 'A class representing a square figure.' in context\n+    assert 'Parameters:' in context\n+    assert '**width** (*int*)' in context\n+    assert '**height** (*int*)' in context\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..8680d47 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +10,25 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n+\n+def test_catalog_removes_duplicate_locations():\n+    catalog = Catalog()\n+    # Add a message with duplicate locations\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file1', 10))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file1', 10))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file2', 20))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file1', 10))  # Intentional duplicate\n+\n+    # There should be only two unique locations for the 'duplicate_test' message\n+    expected_locations = [('/path/to/file1', 10), ('/path/to/file2', 20)]\n+\n+    # Extract the message from the catalog and verify the locations\n+    messages = list(catalog)\n+    assert len(messages) == 1  # Ensure only one message with text 'duplicate_test'\n+    message = messages[0]\n+    assert message.text == 'duplicate_test'\n+    assert sorted(message.locations) == sorted(expected_locations)\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..131cc57 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -148,6 +148,34 @@ def test_glossary(app):\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n \n+def test_glossary_case_sensitivity(app):\n+    # Test to ensure duplicate glossary terms are case-sensitive\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       description of MySQL\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       description of mysql\\n\")\n+\n+    # Parse the content\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, \n+            ([definition_list_item, ([term, (\"MySQL\", index)],\n+                                     definition)],\n+             [definition_list_item, ([term, (\"mysql\", index)],\n+                                     definition)])],\n+    ))\n+    assert_node(doctree[0][0][0][0][1], entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree[0][0][1][0][1], entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+\n+    # Validate that both terms exist in the domain objects\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n+\n+...\n def test_glossary_warning(app, status, warning):\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n",
  "sphinx-doc__sphinx-7757": "",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..2cc6aee 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -52,6 +53,18 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n+from typing import TypeVar\n+\n+def test_mock_typevar_integration():\n+    T = TypeVar('T')\n+\n+    class GenericClass(mock.SomeClass[T]):\n+        \"\"\"docstring of GenericClass\"\"\"\n+\n+    obj = GenericClass()\n+    assert GenericClass.__doc__ == \"docstring of GenericClass\"\n+    assert isinstance(obj, GenericClass)\n+\n def test_mock():\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..ede4711 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -14,6 +15,7 @@ from collections import namedtuple\n from unittest import TestCase, mock\n \n from sphinx.application import Sphinx\n+from sphinx.testing.util import simple_decorator\n from sphinx.ext.napoleon import _process_docstring, _skip_member, Config, setup\n \n \n@@ -39,25 +41,127 @@ class SampleClass:\n     def _private_doc(self):\n         \"\"\"SampleClass._private_doc.DOCSTRING\"\"\"\n         pass\n+        \n+    @simple_decorator\n+    def __init__(self):\n+        \"\"\"doc\"\"\"\n+        pass\n+\n+class TestInitMethodDocumentation(TestCase):\n+    def test_decorated_init_documented(self):\n+        \"\"\"Test if decorated __init__ is documented when using napoleon.\"\"\"\n+        app = mock.Mock(spec=Sphinx)\n+        config = Config(napoleon_include_init_with_doc=True)\n+        \n+        obj = SampleClass.__init__\n+        app.config = config\n+        skip = _skip_member(app, 'class', '__init__', obj, False, 'napoleon_include_init_with_doc')\n+        \n+        self.assertFalse(skip, \"Decorated __init__ should be documented but is being skipped.\")\n \n     def _private_undoc(self):\n         pass\n+        \n+    @simple_decorator\n+    def __init__(self):\n+        \"\"\"doc\"\"\"\n+        pass\n+\n+class TestInitMethodDocumentation(TestCase):\n+    def test_decorated_init_documented(self):\n+        \"\"\"Test if decorated __init__ is documented when using napoleon.\"\"\"\n+        app = mock.Mock(spec=Sphinx)\n+        config = Config(napoleon_include_init_with_doc=True)\n+        \n+        obj = SampleClass.__init__\n+        app.config = config\n+        skip = _skip_member(app, 'class', '__init__', obj, False, 'napoleon_include_init_with_doc')\n+        \n+        self.assertFalse(skip, \"Decorated __init__ should be documented but is being skipped.\")\n \n     def __special_doc__(self):\n         \"\"\"SampleClass.__special_doc__.DOCSTRING\"\"\"\n         pass\n+        \n+    @simple_decorator\n+    def __init__(self):\n+        \"\"\"doc\"\"\"\n+        pass\n+\n+class TestInitMethodDocumentation(TestCase):\n+    def test_decorated_init_documented(self):\n+        \"\"\"Test if decorated __init__ is documented when using napoleon.\"\"\"\n+        app = mock.Mock(spec=Sphinx)\n+        config = Config(napoleon_include_init_with_doc=True)\n+        \n+        obj = SampleClass.__init__\n+        app.config = config\n+        skip = _skip_member(app, 'class', '__init__', obj, False, 'napoleon_include_init_with_doc')\n+        \n+        self.assertFalse(skip, \"Decorated __init__ should be documented but is being skipped.\")\n \n     def __special_undoc__(self):\n         pass\n+        \n+    @simple_decorator\n+    def __init__(self):\n+        \"\"\"doc\"\"\"\n+        pass\n+\n+class TestInitMethodDocumentation(TestCase):\n+    def test_decorated_init_documented(self):\n+        \"\"\"Test if decorated __init__ is documented when using napoleon.\"\"\"\n+        app = mock.Mock(spec=Sphinx)\n+        config = Config(napoleon_include_init_with_doc=True)\n+        \n+        obj = SampleClass.__init__\n+        app.config = config\n+        skip = _skip_member(app, 'class', '__init__', obj, False, 'napoleon_include_init_with_doc')\n+        \n+        self.assertFalse(skip, \"Decorated __init__ should be documented but is being skipped.\")\n \n \n class SampleError(Exception):\n     def _private_doc(self):\n         \"\"\"SampleError._private_doc.DOCSTRING\"\"\"\n         pass\n+        \n+    @simple_decorator\n+    def __init__(self):\n+        \"\"\"doc\"\"\"\n+        pass\n+\n+class TestInitMethodDocumentation(TestCase):\n+    def test_decorated_init_documented(self):\n+        \"\"\"Test if decorated __init__ is documented when using napoleon.\"\"\"\n+        app = mock.Mock(spec=Sphinx)\n+        config = Config(napoleon_include_init_with_doc=True)\n+        \n+        obj = SampleClass.__init__\n+        app.config = config\n+        skip = _skip_member(app, 'class', '__init__', obj, False, 'napoleon_include_init_with_doc')\n+        \n+        self.assertFalse(skip, \"Decorated __init__ should be documented but is being skipped.\")\n \n     def _private_undoc(self):\n         pass\n+        \n+    @simple_decorator\n+    def __init__(self):\n+        \"\"\"doc\"\"\"\n+        pass\n+\n+class TestInitMethodDocumentation(TestCase):\n+    def test_decorated_init_documented(self):\n+        \"\"\"Test if decorated __init__ is documented when using napoleon.\"\"\"\n+        app = mock.Mock(spec=Sphinx)\n+        config = Config(napoleon_include_init_with_doc=True)\n+        \n+        obj = SampleClass.__init__\n+        app.config = config\n+        skip = _skip_member(app, 'class', '__init__', obj, False, 'napoleon_include_init_with_doc')\n+        \n+        self.assertFalse(skip, \"Decorated __init__ should be documented but is being skipped.\")\n \n     def __special_doc__(self):\n         \"\"\"SampleError.__special_doc__.DOCSTRING\"\"\"\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..68eeda5 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,28 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+    \n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    # Check for the existence of local link outputs\n+    assert \"broken    doesntexist\" in content\n+    assert \"ok        conf.py\" in content\n+\n+    assert len(content.splitlines()) >= 2  # Ensure at least the two tested lines are present\n+\n+    rows = [json.loads(x) for x in (app.outdir / 'output.json').read_text().splitlines()]\n+    rowsby = {row[\"uri\"]: row for row in rows}\n+    \n+    assert rowsby['conf.py']['status'] == 'working'\n+    assert rowsby['doesntexist']['status'] == 'broken'\n+    \n+    assert rowsby['conf.py']['filename'] == 'index.rst'\n+    assert rowsby['doesntexist']['filename'] == 'index.rst'\n+\n import json\n import re\n from unittest import mock\n",
  "sphinx-doc__sphinx-8035": "",
  "sphinx-doc__sphinx-8120": "",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..e31e5d0 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,58 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+import sys\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_with_type_aliases(app):\n+    (app.srcdir / 'types.py').write_text('''\n+from __future__ import annotations\n+from typing import Any, Dict\n+\n+JSONObject = Dict[str, Any]\n+\n+def sphinx_doc(data: JSONObject) -> JSONObject:\n+    \"\"\"Does it work.\n+\n+    Args:\n+        data: Does it args.\n+\n+    Returns:\n+        Does it work in return.\n+    \"\"\"\n+    return {}\n+''')\n+\n+    (app.srcdir / 'conf.py').write_text('''\n+autodoc_typehints = 'description'\n+autodoc_type_aliases = {\n+    'JSONObject': 'types.JSONObject',\n+}\n+''')\n+\n+    (app.srcdir / 'index.rst').write_text('''\n+.. autofunction:: types.sphinx_doc\n+''')\n+    \n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('Does it work.\\n'\n+            '\\n'\n+            'Parameters\\n'\n+            '----------\\n'\n+            'data : types.JSONObject\\n'\n+            '    Does it args.\\n'\n+            '\\n'\n+            'Returns\\n'\n+            '-------\\n'\n+            'types.JSONObject\\n'\n+            '    Does it work in return.\\n' in context)\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..19c1a03 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,6 +372,36 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import pytest\n+import json\n+import http.server\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util import requests\n+from sphinx.testing.fixtures import app\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD_with_multiple_redirects(app: SphinxTestApp):\n+    \"\"\"Test handling of multiple redirects on HEAD requests.\"\"\"\n+    class MultipleRedirectsHandler(http.server.BaseHTTPRequestHandler):\n+        redirect_count = 0\n+\n+        def do_HEAD(self):\n+            if self.redirect_count < 3:\n+                self.send_response(302, \"Found\")\n+                self.send_header(\"Location\", \"http://localhost:7777/\")\n+                self.redirect_count += 1\n+            else:\n+                self.send_response(200, \"OK\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(MultipleRedirectsHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n@@ -381,4 +411,4 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..2b13497 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,6 +515,16 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+import enum\n+from sphinx.util import inspect\n+\n+def test_object_description_enum():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert inspect.object_description(MyEnum.ValueB) == \"MyEnum.ValueB\"\n \n def test_getslots():\n     class Foo:\n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..1a0609a 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -12,7 +12,7 @@ import time\n from io import StringIO\n \n import pytest\n-\n+import sys\n from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n@@ -240,6 +240,23 @@ def test_default_filename(tempdir):\n     ns = {}\n     exec(conffile.read_text(), ns)\n \n+def test_exits_when_existing_confpy(monkeypatch):\n+    # The code detects existing conf.py with path.isfile()\n+    # so we mock it as True with pytest's monkeypatch\n+    def mock_isfile(path):\n+        return True\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Mock input to simulate pressing Enter at the prompt\n+    def mock_input(prompt):\n+        return ''\n+\n+    monkeypatch.setattr('builtins.input', mock_input)\n+    \n+    # Capture the sys.exit call by raising a SystemExit exception\n+    with pytest.raises(SystemExit):\n+        qs.ask_user({})\n+\n \n def test_extensions(tempdir):\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n@@ -249,4 +266,21 @@ def test_extensions(tempdir):\n     assert conffile.isfile()\n     ns = {}\n     exec(conffile.read_text(), ns)\n+\n+def test_exits_when_existing_confpy(monkeypatch):\n+    # The code detects existing conf.py with path.isfile()\n+    # so we mock it as True with pytest's monkeypatch\n+    def mock_isfile(path):\n+        return True\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Mock input to simulate pressing Enter at the prompt\n+    def mock_input(prompt):\n+        return ''\n+\n+    monkeypatch.setattr('builtins.input', mock_input)\n+    \n+    # Capture the sys.exit call by raising a SystemExit exception\n+    with pytest.raises(SystemExit):\n+        qs.ask_user({})\n     assert ns['extensions'] == ['foo', 'bar', 'baz']\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..d2b5b90 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,46 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+\n+def test_pyproperty_cross_reference(app):\n+    text = (\n+        \".. py:class:: Point\\n\"\n+        \"\\n\"\n+        \"   .. py:attribute:: x\\n\"\n+        \"      :type: int\\n\"\n+        \"\\n\"\n+        \"   .. py:attribute:: y\\n\"\n+        \"      :type: int\\n\"\n+        \"\\n\"\n+        \".. py:class:: Square\\n\"\n+        \"\\n\"\n+        \"   .. py:property:: end\\n\"\n+        \"      :type: Point\\n\"\n+        \"\\n\"\n+        \".. py:class:: Rectangle\\n\"\n+        \"\\n\"\n+        \"   .. py:property:: end\\n\"\n+        \"      :type: Point\\n\"\n+    )\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    assert_node(doctree, ([addnodes.index, desc, addnodes.index, desc, addnodes.index, desc]))\n+    \n+    # Check that the Point type gets cross-referenced correctly in Square.end\n+    assert_node(doctree[5][1][3], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"Point\"])]))\n+    \n+    # Check that the Point type gets cross-referenced correctly in Rectangle.end\n+    assert_node(doctree[9][1][3], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"Point\"])]))\n+    \n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n+    assert 'Rectangle.end' in domain.objects\n+    assert domain.objects['Rectangle.end'] == ('index', 'Rectangle.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..312a8ee 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])  # Remove parens for property\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 6ac780b..a64fc7f 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -11,6 +11,7 @@\n from typing import TYPE_CHECKING, Any, Dict\n \n from sphinx.config import Config\n+from packaging.version import Version\n from sphinx.errors import VersionRequirementError\n from sphinx.locale import __\n from sphinx.util import logging\n@@ -51,7 +52,7 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version' or Version(reqversion) > Version(extension.version):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..bee7b37 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,29 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point2D, Point3D\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_point3d_point3d():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point3D(4, 3, 6)\n+    assert p1.distance(p2) == sqrt((1-4)**2 + (0-3)**2 + (2-6)**2)\n+\n+def test_distance_point2d_point2d():\n+    p1 = Point2D(1, 0)\n+    p2 = Point2D(4, 3)\n+    assert p1.distance(p2) == sqrt((1-4)**2 + (0-3)**2)\n+\n+def test_distance_point2d_point3d():\n+    p1 = Point2D(1, 0)\n+    p2 = Point3D(4, 3, 0)\n+    assert p1.distance(p2) == sqrt((1-4)**2 + (0-3)**2)\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..33f912a 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,28 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy import implemented_function, Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    assert f(f(2)).evalf() == Float(16)\n+\n+def test_recursive_evalf():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    \n+    # Originally failing test case\n+    assert f(g(2)).evalf() == Float(16)\n+    \n+    # Test with multiple levels of composition\n+    assert f(f(g(2))).evalf() == Float(256)\n+    assert g(f(g(2))).evalf() == Float(32)\n+    assert f(g(f(2))).evalf() == Float(64)\n+    \n+    # Test with direct values and nested compositions\n+    assert f(f(f(2))).evalf() == Float(256)\n+    assert g(g(g(2))).evalf() == Float(16)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..4b3dc9c 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -72,7 +72,32 @@ def test_ZeroMatrix_doit():\n     assert isinstance(Znn.doit().rows, Mul)\n \n \n+from sympy import symbols, MatrixSymbol, Identity, Sum\n+from sympy.assumptions import assuming\n+from sympy.assumptions.ask import Q\n+from sympy.matrices.expressions.matexpr import refine\n+\n def test_Identity():\n+    # Test for the sum of elements in an Identity matrix\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+    \n+    # Total sum of the elements should be 'n'\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+    \n+    # Testing with a specific size\n+    m = 3\n+    Im = Identity(m)\n+    \n+    # Total sum of the elements should be 3 for a 3x3 identity matrix\n+    assert Sum(Sum(Im[i, j], (i, 0, m-1)), (j, 0, m-1)).doit() == m\n+\n+    # Verify orthogonal matrix property for n x n identity matrix\n+    M = MatrixSymbol('M', n, n)\n+    with assuming(Q.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+        # Ensure the refined expression is Identity\n+        assert e == Identity(n)\n     A = MatrixSymbol('A', n, m)\n     In = Identity(n)\n     Im = Identity(m)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..c61769b 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -351,7 +351,12 @@ def test_args():\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n     raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n-    # but this is ok because cycles imply that only those listed moved\n+    # Test for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[0, 1], [2, 3], [1, 2]]) == Permutation([0, 3, 1, 2])\n+    assert Permutation([[1, 2], [2, 3, 4], [1, 4]]) == Permutation([0, 4, 3, 2, 1])\n+    assert Permutation([[0, 1], [0, 2], [0, 3]]) == Permutation([0, 3, 2, 1])\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n \n",
  "sympy__sympy-13031": "",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..ce2833d 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,8 +170,13 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import Mul, Max, symbols\n+from sympy.core.evalf import N as NS\n \n def test_evalf_bugs():\n+    x, y = symbols('x y')\n+    # issue 13076\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n     assert NS(exp(10**10) + sin(1), 10) == NS(exp(10**10), 10)\n     assert NS('log(1+1/10**50)', 20) == '1.0000000000000000000e-50'\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..5d4a7b2 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -209,7 +209,18 @@ def test_tanh_series():\n     assert tanh(x).series(x, 0, 10) == \\\n         x - x**3/3 + 2*x**5/15 - 17*x**7/315 + 62*x**9/2835 + O(x**10)\n \n-\n+def test_coth_subs_issue():\n+    # Test the substitution issue with coth(log(tan(x))) for integral values\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    for n in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        try:\n+            result = e.subs(x, n)\n+            print(f\"coth(log(tan({n}))) = {result}\")\n+        except Exception as err:\n+            print(f\"Error for x = {n}: {err}\")\n+\n+            \n def test_coth():\n     x, y = symbols('x,y')\n \n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..263d55e 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -172,6 +172,17 @@ def test_Complement():\n                             FiniteSet(2, 3, 4)), Interval(1, 3)) == \\\n         Union(Interval(0, 1, False, True), FiniteSet(4))\n \n+    # Test case for issue 12712: Complement with mixed Symbols and numbers\n+    from sympy import symbols, FiniteSet, Interval, Complement\n+\n+    x, y = symbols('x y')\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+    \n+    # Additional test cases for mixed types\n+    assert Complement(FiniteSet(x, 1, 3, y), Interval(2, 4)) == Complement(FiniteSet(x, 1, y), Interval(2, 4))\n+    assert Complement(FiniteSet(1, 2, x, y), Interval(0, 2, True, False)) == FiniteSet(x, y)\n+    assert Complement(FiniteSet(-5, 0, x, 10, y), Interval(-3, 8)) == Complement(FiniteSet(-5, x, 10, y), Interval(-3, 8))\n+\n     assert not 3 in Complement(Interval(0, 5), Interval(1, 4), evaluate=False)\n     assert -1 in Complement(S.Reals, S.Naturals, evaluate=False)\n     assert not 1 in Complement(S.Reals, S.Naturals, evaluate=False)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..bcd9325 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,30 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+\n+    # Create a 6x6 identity matrix\n+    M = eye(6)\n+\n+    # Create a 6x2 matrix with all elements being 2\n+    V = 2 * ones(6, 2)\n+\n+    # Perform column insertion\n+    result = M.col_insert(3, V)\n+\n+    # Expected result after column insertion\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1],\n+    ])\n+\n+    # Assert that the result is as expected\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..7a29560 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -666,7 +666,24 @@ def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n \n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+from sympy import Symbol, Poly, S  # Add necessary imports for the test functions\n+\n+def test_issue_13079():\n+    x = Symbol('x')  # Define symbol x for use in tests\n+\n+    # Test cases based on the issue description\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x, x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n+    # Additional test cases to ensure thorough coverage\n+    assert Poly(x)*2 == Poly(2*x, x, domain='ZZ')  \n+    assert 2*Poly(x) == Poly(2*x, x, domain='ZZ')\n+    assert Poly(x, domain='QQ')*0.5 == Poly(0.5*x, x, domain='QQ')\n+    assert Poly(3*x)*Poly(2, x) == Poly(6*x, x, domain='ZZ')\n+    assert Poly(0, x)*Poly(x) == Poly(0, x)\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..8131da9 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -55,7 +55,39 @@ def test_printmethod():\n     assert latex(R(x)) == \"foo\"\n \n \n-def test_latex_basic():\n+from sympy import symbols, S, latex, Integral\n+from sympy.abc import x, y\n+\n+def test_latex_mul_symbol_custom():\n+    # Original test cases to verify custom mul_symbol\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+\n+    # Additional test cases for verification\n+\n+    # Test when mul_symbol is None and default settings\n+    assert latex(3*x*y, mul_symbol=None) == r\"3 x y\"\n+    assert latex(3*x*y) == r\"3 x y\"\n+\n+    # Test custom multiplication symbol settings and interactions with other settings\n+    # Using thin space\n+    assert latex(2*x**2 * y, mul_symbol='\\\\,') == r\"2\\,x^{2}\\,y\"\n+\n+    # Verify thin space does not alter integrals representation\n+    assert latex(Integral(2*x**2*y, x)) == r\"\\int 2 x^{2} y\\, dx\"\n+\n+    # Test with different custom symbols\n+    assert latex(2*x*y, mul_symbol='*') == r\"2*x*y\"\n+    assert latex(4*x*y, mul_symbol=':') == r\"4:x:y\"\n+\n+    # Test with empty string\n+    assert latex(3*x*y, mul_symbol='') == r\"3xy\"\n+\n+    # Test with special LaTeX symbols\n+    assert latex(2*x*y, mul_symbol=r'\\times') == r\"2\\times x\\times y\"\n+    assert latex(3*x*y, mul_symbol=r'\\cdot') == r\"3\\cdot x\\cdot y\"\n+\n+# Existing basic tests\n     assert latex(1 + x) == \"x + 1\"\n     assert latex(x**2) == \"x^{2}\"\n     assert latex(x**(1 + x)) == \"x^{x + 1}\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..1e4e898 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,25 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+def test_issue_13835():\n+    from sympy import Matrix, symbols\n+\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    \n+    # Test matrices of increasing sizes to validate they do not produce NaN or errors.\n+    assert M(5).det() != float('nan')  # originally produced nan\n+    assert M(5).det() == 0  # check expected result if known\n+    assert M(6).det() != float('nan')  # originally caused an error\n+    assert M(6).det() == 0  # check expected result if known\n+    assert M(7).det() != float('nan')\n+    assert M(7).det() == 0  # check expected result if known\n+\n+    # Additional sizes for further verification that the algorithm handles them correctly.\n+    assert M(8).det() == 0  # add expected result\n+    assert M(9).det() == 0  # add expected result\n+\n+    # You can add more sizes if necessary to thoroughly test the fix.\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..5a52589 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,8 +708,85 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n+from sympy import Piecewise, exp, hyper, sqrt, pi, gamma, lowergamma\n+from sympy.stats import Arcsin, cdf, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum\n \n def test_precomputed_cdf():\n+    # Test Arcsin distribution\n+    a, b = 0, 3\n+    X = Arcsin(\"x\", a, b)\n+    assert cdf(X)(1) == Piecewise(\n+        (0, a > 1),\n+        (2*asin(sqrt((-a + 1)/(-a + b)))/pi, b >= 1),\n+        (1, True)\n+    )\n+\n+    # Test Dagum distribution\n+    X = Dagum(\"x\", S(1)/3, S(1)/5, 2)\n+    assert cdf(X)(3) == Piecewise(\n+        ((1 + (3/2)**(-S(1)/3))**(-S(1)/5), 3 >= 0),\n+        (0, True)\n+    )\n+    \n+    # Test Erlang distribution\n+    X = Erlang(\"x\", 1, 1)\n+    assert cdf(X)(1) == Piecewise(\n+        (lowergamma(1, 1*1)/gamma(1), 1 > 0),\n+        (0, True)\n+    )\n+\n+    # Test Frechet distribution\n+    X = Frechet(\"x\", S(4)/3, 1, 2)\n+    assert cdf(X)(3) == Piecewise(\n+        (0, 3 < 2),\n+        (-exp(-((-2 + 3)/1)**(-S(4)/3)), 3 >= 2),\n+        (1, True)\n+    )\n+\n+    # Test Gamma distribution\n+    X = Gamma(\"x\", 0.1, 2)\n+    assert cdf(X)(3) == 0.0980745505327516 * lowergamma(0.1, 3/2)\n+\n+    # Test GammaInverse distribution\n+    X = GammaInverse(\"x\", S(5)/7, 2)\n+    assert cdf(X)(3) == Piecewise(\n+        (uppergamma(S(5)/7, 2/3)/gamma(S(5)/7), 3 > 0),\n+        (0, True)\n+    )\n+\n+    # Test Kumaraswamy distribution\n+    X = Kumaraswamy(\"x\", S(1)/123, 5)\n+    assert cdf(X)(S(1)/3) == Piecewise(\n+        (0, S(1)/3 < 0),\n+        (-(-S(1)/3**(S(1)/123) + 1)**5 + 1, S(1)/3 <= 1),\n+        (1, True)\n+    )\n+\n+    # Test Laplace distribution\n+    X = Laplace(\"x\", 2, 3)\n+    assert cdf(X)(5) == Piecewise(\n+        (exp((2 - 5)/3)/2, 2 > 5),\n+        (-exp(-(5 - 2)/3)/2 + 1, True)\n+    )\n+\n+    # Test Logistic distribution\n+    X = Logistic(\"x\", 1, 0.1)\n+    assert cdf(X)(2) == 1/(exp((1 - 2)/0.1) + 1)\n+\n+    # Test Nakagami distribution\n+    X = Nakagami(\"x\", S(7)/3, 1)\n+    assert cdf(X)(2) == Piecewise(\n+        (lowergamma(S(7)/3, S(7)/3*2**2/1)/gamma(S(7)/3), 2 > 0),\n+        (0, True)\n+    )\n+\n+    # Test StudentT distribution\n+    X = StudentT(\"x\", 10)\n+    assert cdf(X)(2) == 1/2 + 2*gamma(11/2)*hyper((1/2, 11/2), (3/2,), -2**2/10)/(sqrt(pi)*sqrt(10)*gamma(5))\n+\n+    # Test UniformSum distribution\n+    US = UniformSum(\"x\", 5)\n+    assert tn(diff(cdf(US)(x), x), density(US)(x), x, a=0, b=0, c=1, d=0)\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..d79ddb1 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -48,8 +48,33 @@ def test_tensor_product_commutator():\n def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n+from sympy import symbols\n+from sympy.physics.quantum import TensorProduct as TP\n+from sympy.physics.quantum import tensor_product_simp\n+from sympy.physics.paulialgebra import Pauli\n \n-def test_issue_5923():\n+A, B, C, D = symbols('A,B,C,D', commutative=False)\n+\n+def test_tensor_product_simp():\n+    assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n+    # Test cases based on the issue description to verify powers of TensorProduct\n+    a = symbols('a', commutative=False)\n+    # Test 1\n+    t1 = TP(1, 1) * TP(1, 1)\n+    assert tensor_product_simp(t1) == TP(1, 1 * 1)\n+    assert t1.expand(tensorproduct=True) == TP(1, 1 * 1)\n+\n+    # Check with substitution for the expected result\n+    assert tensor_product_simp(TP(1, 1) * TP(1, a)).subs(a, 1) == TP(1, 1)\n+\n+    # Test 2\n+    pauli_3 = Pauli(3)\n+    t2 = TP(1, pauli_3) * TP(1, pauli_3)\n+    assert tensor_product_simp(t2) == TP(1, pauli_3 * pauli_3)\n+    assert t2.expand(tensorproduct=True) == TP(1, pauli_3 * pauli_3)\n+\n+    # Check with substitution for the expected result\n+    assert tensor_product_simp(TP(1, pauli_3) * TP(1, a)).subs(a, pauli_3) == TP(1, 1)\n     # most of the issue regarding sympification of args has been handled\n     # and is tested internally by the use of args_cnc through the quantum\n     # module, but the following is a test from the issue that used to raise.\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..5bcd6b1 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,7 +79,16 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n+from sympy import Symbol, Function, Eq, Ne\n+\n def test_python_relational():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Testing expected behavior for 'Eq' function code generation\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    # Confirm that 'Ne' works with different subexpressions\n+    assert python(Ne(x/(y + 1), y**2)) in [\"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\", \n+                                           \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"]\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..615d86f 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -3,8 +3,27 @@ from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n+from sympy.physics.vector import ReferenceFrame\n+A = ReferenceFrame('A')\n+\n+def test_vector_zero_multiplication():\n+    # Test adding a vector and a zero multiplied vector\n+    N = ReferenceFrame('N')\n+    assert sum([N.x, 0 * N.x]) == N.x\n+\n+    # Additional checks for zero addition\n+    assert A.x + 0 == A.x\n+    assert 0 + A.y == A.y\n+    assert (0 * A.x).magnitude() == 0\n+\n+    # Testing with negative zero scalar multiplication\n+    assert sum([N.x, -0 * N.x]) == N.x\n \n-Vector.simp = True\n+    # Ensure zero vectors do not affect addition result\n+    zero_vector = 0 * N.x + 0 * N.y + 0 * N.z\n+    assert sum([N.x, zero_vector]) == N.x\n+    assert N.x + zero_vector == N.x\n+from sympy.physics.vector import ReferenceFrame\n A = ReferenceFrame('A')\n \n \n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..5238aaf 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -134,6 +135,22 @@ def test_math_lambda():\n \n \n @conserve_mpmath_dps\n+def test_rational_wrapping():\n+    from sympy.functions.combinatorial.factorials import rf\n+    mpmath.mp.dps = 50\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Check the source to see if mpmath.mpf is used\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source_code  # Ensure that mpmath.mpf is used\n+\n+    # Evaluate at a specific point and compare with expected precision\n+    x0 = mpmath.mpf(\"1.5\")\n+    result = f(x0)\n+    expected = mpmath.mpf(\"77.3333333333333333333333333333333333333333333333333333\")\n+    assert abs(result - expected) < mpmath.mpf(\"1e-49\")  # Match precision to 50 decimal places\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -145,6 +162,22 @@ def test_mpmath_lambda():\n \n \n @conserve_mpmath_dps\n+def test_rational_wrapping():\n+    from sympy.functions.combinatorial.factorials import rf\n+    mpmath.mp.dps = 50\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Check the source to see if mpmath.mpf is used\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source_code  # Ensure that mpmath.mpf is used\n+\n+    # Evaluate at a specific point and compare with expected precision\n+    x0 = mpmath.mpf(\"1.5\")\n+    result = f(x0)\n+    expected = mpmath.mpf(\"77.3333333333333333333333333333333333333333333333333333\")\n+    assert abs(result - expected) < mpmath.mpf(\"1e-49\")  # Match precision to 50 decimal places\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..cf06c38 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -72,6 +73,14 @@ def test_ndim_array_initiation():\n     raises(ValueError, lambda: vector_with_long_shape[long(5)])\n \n     from sympy.abc import x\n+    # Test case for verifying the fix of the issue: len of rank-0 (scalar) arrays should be 1\n+    def test_rank_zero_array_length():\n+        scalar_value = 5\n+        rank_zero_array = ImmutableDenseNDimArray(scalar_value)\n+        assert len(rank_zero_array) == 1, \"Length of rank-0 array should be 1\"\n+        assert rank_zero_array[()] == scalar_value  # Check that accessing works as expected\n+\n+    test_rank_zero_array_length()\n     rank_zero_array = ImmutableDenseNDimArray(x)\n     assert len(rank_zero_array) == 0\n     assert rank_zero_array.shape == ()\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..a66c30d 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -18,6 +19,14 @@ def test_Integer():\n def test_Rational():\n     assert mcode(Rational(3, 7)) == \"3/7\"\n     assert mcode(Rational(18, 9)) == \"2\"\n+\n+def test_Max_Min():\n+    assert mcode(Max(x, y, z)*Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x, y)) == \"Max[2, x, y]\"\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n     assert mcode(Rational(3, -7)) == \"-3/7\"\n     assert mcode(Rational(-3, -7)) == \"3/7\"\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..e3a6b61 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,23 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix_sign_issue():\n+    \"\"\"Test the sign issue in Quaternion.to_rotation_matrix()\"\"\"\n+    from sympy import symbols, cos, sin, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    x = symbols('x')\n+    # Create a quaternion for rotation around the x-axis\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    # Check whether the rotation matrix is formed correctly\n+    # The expected correct matrix should have the signs adjusted\n+    expected_matrix = Matrix([\n+        [1, 0, 0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x), cos(x)]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +136,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..5c687a8 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1628,6 +1628,19 @@ def test_Mod():\n     # issue 8677\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n+\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional tests for Mod\n+    assert Mod(3*i + 4, 2) == Mod(i + 1, 2)\n+    assert Mod(3*i - 4, 2) == Mod(i, 2)\n+    assert Mod(3*i*x, 3) == 0\n+    assert (3*i)**2 % 2 == Mod(i**2, 2)\n+    assert Mod(3*i - 3*j, 2) == Mod(i - j, 2)\n     assert factorial(n + 2) % n == 0\n     assert (factorial(n + 4) % (n + 5)).func is Mod\n \n",
  "sympy__sympy-15809": "",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..4370d96 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,6 +1986,26 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+from sympy import I, simplify\n+\n+def test_issue_15873():\n+    # Test that the is_zero property yields None for indeterminate cases\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    \n+    # Test if simplification changes the is_zero status to True\n+    assert simplify(e).is_zero is True\n+\n+    # Additional test cases for expressions with complex numbers\n+    e2 = (1 + I)*(1 - I) - 2  # This should be zero: (a + bi)(a - bi) = a^2 + b^2\n+    assert e2.is_zero is True\n+\n+    e3 = (1 + 2*I)*(1 - 2*I) - 5  # 1 - 4*i^2 = 5\n+    assert e3.is_zero is True\n+\n+    e4 = (1 + I)*(1 + I) - 2*I  # (1+I)^2 = 1 + 2I - 1\n+    assert e4.is_zero is None  # This is indeterminate without simplification\n+    assert simplify(e4).is_zero is True  # Simplified version should be zero\n \n def test_issue_14392():\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n@@ -1993,4 +2013,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..9217802 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -511,8 +511,40 @@ def test_posify():\n     assert str(Sum(posify(1/x**n)[0], (n,1,3)).expand()) == \\\n         'Sum(_x**(-n), (n, 1, 3))'\n \n-\n-def test_issue_4194():\n+def test_issue_16438_finite_assumption():\n+    # issue 16438: posify should preserve 'finite' assumptions\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['infinite'] == False\n+\n+def test_posify_preserves_other_assumptions():\n+    # Check that posify preserves other assumptions like integer, rational, even, odd\n+    a = Symbol('a', integer=True)\n+    eq, _ = posify(a)\n+    assert eq.assumptions0['integer'] == True\n+    \n+    b = Symbol('b', rational=True)\n+    eq, _ = posify(b)\n+    assert eq.assumptions0['rational'] == True\n+    \n+    c = Symbol('c', even=True)\n+    eq, _ = posify(c)\n+    assert eq.assumptions0['even'] == True\n+    \n+    d = Symbol('d', odd=True)\n+    eq, _ = posify(d)\n+    assert eq.assumptions0['odd'] == True\n+\n+    e = Symbol('e', prime=True)\n+    eq, _ = posify(e)\n+    assert eq.assumptions0['prime'] == True\n+\n+    # Adding a case where multiple assumptions are combined\n+    f = Symbol('f', prime=True, finite=True)\n+    eq, _ = posify(f)\n+    assert eq.assumptions0['prime'] == True\n+    assert eq.assumptions0['finite'] == True\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..a70ccfe 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +37,12 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test for the Indexed support\n+    q = IndexedBase(\"q\")\n+    assert prntr.doprint(q[0]) == 'q[0]'\n+    assert prntr.doprint(q[0, 1]) == 'q[0, 1]'\n+    assert prntr.doprint(q[x, y]) == 'q[x, y]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..d5fe4d4 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -31,7 +31,22 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     return source\n \n \n-def test_cython_wrapper_scalar_function():\n+def test_cython_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    # Define a matrix symbol 'x' of size (2, 1)\n+    x = MatrixSymbol('x', 2, 1)\n+    \n+    # Expression that does not involve 'x'\n+    expr = 1.0\n+    \n+    # Wrap the function using Cython backend with 'x' as an argument\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    # Test if the output is as expected\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..8d387a9 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -238,6 +238,8 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n \n+from sympy.crypto.crypto import encode_morse\n+\n def test_encode_morse():\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..8936fd2 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -814,4 +814,20 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n+\n+def test_issue_17137():\n+    from sympy import I, Symbol, simplify, cos, sin\n+\n+    x = Symbol('x')\n+    \n+    # Original test cases\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    \n+    # Additional test cases to thoroughly verify the fix\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(sin(x)**(1 + I)) == sin(x)**(1 + I)\n+    assert simplify((cos(x) + sin(x))**I) == (cos(x) + sin(x))**I\n+    assert simplify((cos(x) + I)**I) == (cos(x) + I)**I\n+    assert simplify((cos(x)**2 + sin(x)**2)**I) == (cos(x)**2 + sin(x)**2)**I\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..15ee8ed 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..6a68092 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,9 +1,12 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n+from sympy import sympify\n+from sympy.geometry import Point as gePoint\n \n \n def test_point():\n@@ -98,6 +101,14 @@ def test_point():\n     # Point differences should be simplified\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n+    # Test issue with multiplication order\n+    point1 = gePoint(0, 0)\n+    point2 = gePoint(1, 1)\n+    result1 = point1 + point2 * sympify(2.0)\n+    result2 = point1 + sympify(2.0) * point2\n+    assert result1 == Point(2, 2)\n+    assert result2 == Point(2, 2)\n+\n     a, b = S.Half, Rational(1, 3)\n     assert Point(a, b).evalf(2) == \\\n         Point(a.n(2), b.n(2), evaluate=False)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..d4a9f22 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -530,7 +530,11 @@ def test_diophantine():\n     assert diophantine(eq) == \\\n         set([(4361*p**2 - 16072*q**2, -20737*p**2 + 83312*p*q - 76424*q**2,\n         11303*p**2 - 41474*p*q + 41656*q**2)])\n-    # this produces factors during reconstruction\n+    # Test for issue: diophantine: incomplete results depending on syms order with permute=True\n+    eq = x**4 + y**4 - 2**4 - 3**4\n+    expected_solution = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(eq, syms=(x, y), permute=True) == expected_solution\n+    assert diophantine(eq, syms=(y, x), permute=True) == expected_solution\n     eq = x**2 + 3*y**2 - 12*z**2\n     coeff = eq.as_coefficients_dict()\n     assert _diop_ternary_quadratic_normal((x, y, z), coeff) == \\\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..d3b6b7f 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -672,6 +672,23 @@ def test_latex_derivatives():\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n \n+def test_issue_incorrect_parenthesizing_of_subs():\n+    from sympy import Subs\n+    from sympy.abc import x, y\n+\n+    # Test case based on the issue description\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n+    # Additional test cases for comprehensiveness\n+    # Complex expression with multiple variables\n+    expr = 5 * Subs(x**2 - y*x + y**2, (x, y), (1, 2))\n+    assert latex(expr) == r'5 \\left. \\left(x^{2} - x y + y^{2}\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+\n+    # Test case with nested Subs\n+    nested_expr = Subs(Subs(x + y, (x,), (y,)), (y,), (1,))\n+    assert latex(nested_expr) == r'\\left. \\left. x + y \\right|_{\\substack{ x=y }} \\right|_{\\substack{ y=1 }}'\n+\n+\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..bd867a6 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -126,6 +127,22 @@ def test_subs_CondSet():\n         n, n < x, Interval(0, oo)).subs(x, p) == Interval(0, oo)\n     assert ConditionSet(\n         n, n < x, Interval(-oo, 0)).subs(x, p) == S.EmptySet\n+    # Adding new tests for issue with ConditionSet and ImageSet\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    condset = ConditionSet(x, Contains(y, Interval(-1,1)), img1)\n+    assert condset.subs(y, S.One/3).dummy_eq(img2)  # Test equivalent to original test patch\n+\n+    # Additional test cases for thoroughness\n+    assert condset.subs(y, S.One/4) != img2  # Checking replacement with a different value\n+    img3 = imageset(Lambda(k, 2*k*pi + asin(S.One/4)), S.Integers)\n+    assert condset.subs(y, S.One/4).dummy_eq(img3)  # Check the correct result with 1/4\n+\n+    # Test xreplace method and simultaneous substitution\n+    assert condset.xreplace({y: S.One/3}) == img2  # Ensure xreplace behaves correctly\n+    assert condset.subs({y: S.One/3}, simultaneous=True) == img2  # Ensure simultaneous subs works\n+\n     assert ConditionSet(f(x), f(x) < 1, {w, z}\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..76f232d 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,12 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_kernS_reference_before_assignment():\n+    from sympy import Symbol\n+    # Test if kernS correctly processes the expression without errors\n+    expr = kernS(\"(2*x)/(x-1)\")\n+    expected = Symbol('2*x/(x-1)')\n+    assert expr == expected, \"kernS should parse the expression correctly without UnboundLocalError\"\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..3bae6b4 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,6 +1,8 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n+from sympy.physics.quantum.operator import IdentityOperator\n from sympy.physics.quantum.dagger import Dagger\n from sympy.physics.quantum.hilbert import HilbertSpace\n from sympy.physics.quantum.operator import (Operator, UnitaryOperator,\n@@ -84,7 +86,21 @@ def test_unitary():\n     assert Dagger(U).is_commutative is False\n \n \n-def test_identity():\n+def test_dagger_mul():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    # Existing test cases from the original patch\n+    assert Dagger(O)*O == Dagger(O)*O\n+    assert Dagger(O)*O*I == Mul(Dagger(O), O)*I\n+    assert Dagger(O)*Dagger(O) == Dagger(O)**2\n+    assert Dagger(O)*Dagger(I) == Dagger(O)\n+\n+    assert I * Dagger(O) == Dagger(O)  # Ensure left multiplication simplifies\n+    assert Dagger(O) * I == Dagger(O)  # Ensure right multiplication simplifies\n+\n+    # New test cases to verify the initial issue is resolved\n+    B = Dagger(O)\n+    assert B * I == B      # Ensure that Dagger(O) * Identity simplifies to Dagger(O)\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..cc108af 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -854,7 +854,21 @@ def test_generator_product():\n     assert w == p\n \n \n+from sympy.combinatorics import DihedralGroup\n+\n def test_sylow_subgroup():\n+    # Additional tests to verify the fix for the IndexError in sylow_subgroup\n+    G = DihedralGroup(18)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 4, \"DihedralGroup(18) sylow_subgroup(p=2) should return a subgroup of order 4\"\n+\n+    G = DihedralGroup(50)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 8, \"DihedralGroup(50) sylow_subgroup(p=2) should return a subgroup of order 8\"\n+\n+    G = DihedralGroup(2 * 25)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 8, \"DihedralGroup(50) sylow_subgroup(p=2) should return a subgroup of order 8\"\n     P = PermutationGroup(Permutation(1, 5)(2, 4), Permutation(0, 1, 2, 3, 4, 5))\n     S = P.sylow_subgroup(2)\n     assert S.order() == 4\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..98bf3d4 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,30 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n+import sympy as sp\n \n def test_partitions():\n+    # Test to ensure partitions do not reuse the same dictionary object\n+    partitions_list = list(partitions(6, k=2))\n+    assert all(p1 is not p2 for i, p1 in enumerate(partitions_list) for p2 in partitions_list[i+1:])\n+    assert all(p1 == p2 for i, p1 in enumerate(partitions_list) for p2 in partitions_list[i+1:])\n+\n+    # Test modifying one partition does not affect others\n+    partitions_list = [p.copy() for p in partitions(5)]\n+    partitions_list[0][2] = 999  # Modify the first partition\n+    assert partitions_list[1][2] != 999  # The second partition should not be affected\n+\n+    # Additional tests for different scenarios\n+    assert [p.copy() for p in partitions(7, m=3)] == [\n+        {7: 1}, {1: 1, 6: 1}, {2: 1, 5: 1}, {3: 1, 4: 1},\n+        {1: 2, 5: 1}, {1: 1, 2: 1, 4: 1}, {1: 3, 4: 1},\n+        {2: 2, 3: 1}, {1: 2, 3: 1, 3: 1}]\n+\n+    assert [p.copy() for p in partitions(9, k=4)] == [\n+        {4: 2, 1: 1}, {3: 3}, {2: 3, 3: 1}, {4: 1, 3: 1, 2: 1},\n+        {4: 1, 2: 3}, {4: 3}, {3: 2, 2: 2}, {2: 4, 1: 1},\n+        {3: 1, 2: 2, 1: 1}, {2: 4}]\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..695fce2 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,14 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..178d1f3 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -78,6 +78,14 @@ def test_monomials():\n                             x * i * j, x * j * i\n             }\n \n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3, x*y*z, y*z**2, x*z**2, x**2*z, y**2*z}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3, x*y*z, y*z**2, x*z**2, x**2*z, y**2*z, x**2*y*z}\n+    \n+    # Additional test for three variables to ensure thorough coverage\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x2**3, x3**3, x1*x2**2, x1*x3**2, x2*x1**2, x2*x3**2, x3*x1**2, x3*x2**2, x1*x2*x3, x1**2*x3, x2**2*x3, x3**2*x1, x3**2*x2, x3*x1*x2, x1**2*x2, x2**2*x1, x1*x2**2, x2*x3**2, x1*x3**2, x3*x1**2, x3*x2**2, x1*x3*x2}\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {x1**2, x2**2, x3**2, x1*x2, x1*x3, x2*x3, x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3, x3**2*x1, x3**2*x2, x1*x2*x3, x1**3, x2**3, x3**3}\n+\n     # degree_list tests\n     assert set(itermonomials([], [])) == {S.One}\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..be42e55 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Added test case to verify the fix\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..33b9d53 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -11,6 +12,16 @@ from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n \n+from sympy.core.parameters import evaluate\n+\n+def test_issue_22684():\n+    # Test to check if using evaluate(False) works without ValueError\n+    with evaluate(False):\n+        assert Point(1, 2) == Point2D(1, 2)\n+\n+    # Test specifically for the sympy expression supplied in the issue\n+    with evaluate(False):\n+        assert sympify('Point2D(Integer(1),Integer(2))') == Point2D(1, 2)\n \n def test_point():\n     x = Symbol('x', real=True)\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..f309861 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -29,6 +30,19 @@ def test_PythonCodePrinter():\n \n     assert not prntr.module_imports\n \n+    # Test cases for Min and Max with PythonCodePrinter\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    \n+    # Additional test cases for Min and Max with more than two arguments\n+    a, b, c = symbols('a b c')\n+    assert prntr.doprint(Min(a, b, c)) == \"min(a, b, c)\"\n+    assert prntr.doprint(Max(a, b, c)) == \"max(a, b, c)\"\n+    \n+    # Testing Min and Max with numerical values\n+    assert prntr.doprint(Min(3, 5, 1)) == \"min(3, 5, 1)\"\n+    assert prntr.doprint(Max(3, 5, 1)) == \"max(3, 5, 1)\"\n+\n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n     assert prntr.doprint(-Mod(x, y)) == '-(x % y)'\n@@ -37,6 +51,19 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n     assert not prntr.module_imports\n \n+    # Test cases for Min and Max with PythonCodePrinter\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    \n+    # Additional test cases for Min and Max with more than two arguments\n+    a, b, c = symbols('a b c')\n+    assert prntr.doprint(Min(a, b, c)) == \"min(a, b, c)\"\n+    assert prntr.doprint(Max(a, b, c)) == \"max(a, b, c)\"\n+    \n+    # Testing Min and Max with numerical values\n+    assert prntr.doprint(Min(3, 5, 1)) == \"min(3, 5, 1)\"\n+    assert prntr.doprint(Max(3, 5, 1)) == \"max(3, 5, 1)\"\n+\n     assert prntr.doprint(pi) == 'math.pi'\n     assert prntr.module_imports == {'math': {'pi'}}\n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..fafc596 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1193,7 +1196,10 @@ def test_issue_14941():\n     f2 = lambdify([x, y], (y, x), 'sympy')\n     assert f2(2, 3) == (3, 2)\n \n-    # test list\n+    # test single-element tuple\n+    f2b = lambdify([], (1,))  # Corresponds to original test patch for single-element tuple\n+    assert f2b() == (1,)\n+    assert 'return (1,)' in inspect.getsource(f2b)\n     f3 = lambdify([x, y], [y, x], 'sympy')\n     assert f3(2, 3) == [3, 2]\n \n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..92430d3 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..4941c63 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -261,8 +261,34 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Test case where matrices with contracted indices are at the start\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), \"Failed for contracted indices at the start\"\n+\n+    # Test case where matrices with contracted indices are at the end\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), \"Failed for contracted indices at the end\"\n \n-def test_gamma_matrix_class():\n+    # Additional test cases\n+    # Test case with no contraction, order should be maintained\n+    t = G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(rho)*G(sigma)), \"No contraction, should remain unchanged\"\n+\n+    # Test case with no contraction and more matrices\n+    t = G(rho)*G(sigma)*G(nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(rho)*G(sigma)*G(nu)), \"No contraction, should remain unchanged\"\n+\n+    # Test case with nested contractions\n+    t = G(mu)*G(-mu)*G(nu)*G(-nu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*G(rho)*G(sigma)), \"Nested contractions failed to simplify correctly\"\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..a44ac8f 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -29,8 +29,17 @@ def test_issue_10326():\n     assert Contains(oo, Interval(-oo, oo)) == False\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n-\n-def test_binary_symbols():\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    z = Symbol('z')\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n+    # Additional test case to check for a universal set\n+    assert Contains(x, S.UniversalSet).as_set() == S.UniversalSet\n+    # Test with an empty set\n+    assert Contains(x, S.EmptySet).as_set() == S.EmptySet\n     x = Symbol('x')\n     y = Symbol('y')\n     z = Symbol('z')\n@@ -48,4 +57,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..bb9c5a0 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,30 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy import exp\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units.quantities import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    \n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..974fbe0 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -561,6 +561,52 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_24211():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter, Quantity\n+    from sympy.physics.units.systems.si import SI\n+    \n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+    \n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    factor, dim = SI._collect_factor_and_dimension(expr)\n+    assert dim == SI.get_dimension_system().get_dimension(velocity)\n+    assert factor == A1.scale_factor * T1.scale_factor + V1.scale_factor\n+\n+def test_equivalent_dimensions_detection():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter, Quantity\n+    from sympy.physics.units.systems.si import SI\n+\n+    # Test with different scale factors\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1*t1 + v1\n+    factor1, dimension1 = SI._collect_factor_and_dimension(expr1)\n+    \n+    assert dimension1 == SI.get_dimension_system().get_dimension(velocity)\n+    expected_factor1 = (a1.scale_factor * t1.scale_factor + v1.scale_factor).simplify()\n+    assert factor1 == expected_factor1\n+\n \n def test_prefixed_property():\n     assert not meter.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..074b989 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -56,8 +57,13 @@ def test_homomorphism():\n     assert T.domain == F\n     assert T.codomain == D\n     assert T(a*b) == p\n-\n-def test_isomorphisms():\n+def test_issue_dihedral_group_homomorphism():\n+    from sympy.combinatorics.named_groups import DihedralGroup\n+    # Testing homomorphism with DihedralGroup where generators include inverses\n+    D3 = DihedralGroup(3)\n+    # Create homomorphism mapping generators to themselves\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism(), \"Homomorphism should be an isomorphism\"\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..c288c08 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -259,11 +259,32 @@ def test_PolyElement_as_expr():\n     assert f != g\n     assert f.as_expr() == g\n \n+    # Test with custom symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g_custom = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g_custom\n+\n+    # Ensure ValueError is raised with incorrect number of symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+    raises(ValueError, lambda: f.as_expr(U, V, W, X))\n+\n+    # Add another test case for a polynomial with a single variable\n+    R, x_single = ring(\"x\", ZZ)\n+    f_single = 2*x_single + 1\n+\n+    X_single = symbols(\"X\")\n+    assert f_single.as_expr(X_single) == 2*X_single + 1\n+\n+    # Edge case: zero polynomial\n+    f_zero = R.zero\n+    assert f_zero.as_expr() == 0\n+\n+    # Test with default symbols\n     X, Y, Z = symbols(\"x,y,z\")\n-    g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+    g_default = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n \n-    assert f != g\n-    assert f.as_expr(X, Y, Z) == g\n+    assert f != g_default\n+    assert f.as_expr(X, Y, Z) == g_default\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..d65be66 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -280,7 +280,29 @@ def test_parse_function_issue_3539():\n     assert parse_expr('f(x)') == f(x)\n \n \n-def test_split_symbols_numeric():\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+def test_issue_24288_extended():\n+    inputs = {\n+        \"x < 2\": Lt(Symbol('x'), 2, evaluate=False),\n+        \"2 > x\": Gt(2, Symbol('x'), evaluate=False),\n+        \"x <= y\": Le(Symbol('x'), Symbol('y'), evaluate=False),\n+        \"y >= x\": Ge(Symbol('y'), Symbol('x'), evaluate=False),\n+        \"x != y\": Ne(Symbol('x'), Symbol('y'), evaluate=False),\n+        \"x == 2\": Eq(Symbol('x'), 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n     transformations = (\n         standard_transformations +\n         (implicit_multiplication_application,))\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..099be6d 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,9 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        # Test cases for the reported issue with CDS format parsing\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n     ],\n )\n def test_unit_grammar(strings, unit):\n@@ -90,6 +93,9 @@ def test_unit_grammar_fail(string):\n         ([\"[cm/s2]\"], dex(u.cm / u.s**2)),\n         ([\"[K]\"], dex(u.K)),\n         ([\"[-]\"], dex(u.dimensionless_unscaled)),\n+        # Test cases for the reported issue with CDS format parsing\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n     ],\n )\n def test_cds_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..f386a7b 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1897,9 +1897,28 @@ class OperationTests(OperationTestBase):\n             Author.objects.create(name='Albert', rebate='10$')\n         author = Author.objects.create(name='Albert', rebate='10%')\n         self.assertEqual(Author.objects.get(), author)\n-\n+    \n     @skipUnlessDBFeature('supports_table_check_constraints')\n-    def test_remove_constraint(self):\n+    def test_check_constraint_with_or_and(self):\n+        \"\"\"\n+        Test case for CheckConstraint that uses a combination of OR and AND\n+        to verify that SQL is generated correctly without any table aliases\n+        such as new__app_testconstraint.\n+        \"\"\"\n+        from_state = self.set_up_test_model(\"test_checkconstraintorand\")\n+        constraint_name = 'field_1_has_value_if_flag_set'\n+        check = models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(\"test_checkconstraintorand\", to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(\"test_checkconstraintorand\", editor, from_state, to_state)\n+        TestConstraint = to_state.apps.get_model(\"test_checkconstraintorand\", \"TestConstraint\")\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        TestConstraint.objects.create(field_1=None, flag=False)\n+        TestConstraint.objects.create(field_1=1, flag=True)\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n             models.CheckConstraint(check=models.Q(pink__gt=2), name=\"test_remove_constraint_pony_pink_gt_2\"),\n             models.CheckConstraint(check=models.Q(pink__lt=100), name=\"test_remove_constraint_pony_pink_lt_100\"),\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..60ed3e5 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -164,6 +164,44 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translation.get_language(), 'nl')\n \n \n+from django.test import TestCase\n+from django.urls import resolve, reverse\n+from django.utils import translation\n+from i18n.patterns.urls import translate_url\n+from i18n.patterns.views import empty_view\n+\n+urlpatterns = [\n+    re_path(r'^with-arguments/(?P<argument>[\\w-]+)/(?:(?P<optional>[\\w-]+).html)?$', empty_view, name='with-arguments'),\n+    re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?$', empty_view, name='regex_optional'),\n+]\n+\n+class URLTranslationTests(TestCase):\n+    def test_translate_url_with_optional_arguments(self):\n+        with translation.override('en'):\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/'\n+            )\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html'\n+            )\n+\n+    def test_regex_optional_translation(self):\n+        test_cases = [\n+            ('/regex_optional/1/2/', {'arg1': '1', 'arg2': '2'}),\n+            ('/regex_optional/1/', {'arg1': '1'}),\n+        ]\n+        for url, expected_kwargs in test_cases:\n+            with self.subTest(url=url):\n+                match = resolve(url)\n+                self.assertEqual(match.url_name, 'regex_optional')\n+                self.assertEqual(match.kwargs, expected_kwargs)\n+                self.assertEqual(\n+                    match.route,\n+                    r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?'\n+                )\n+\n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..31419e5 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -10,6 +11,7 @@ from django.test import TestCase\n \n from .models import (\n     ArticleWithAuthor, BachelorParty, BirthdayParty, BusStation, Child,\n+    Derived, Item,  # Added import for the needed models\n     DerivedM, InternalCertificationAudit, ItalianRestaurant, M2MChild,\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n@@ -18,6 +20,33 @@ from .models import (\n \n \n class ModelInheritanceTest(TestCase):\n+    def test_reset_primary_key_for_derived_model(self):\n+        # Create an instance of the Derived model\n+        obj = Derived.objects.create(f=True)\n+        original_pk = obj.pk\n+\n+        # Reset the primary key\n+        obj.reset()\n+        obj.save()\n+\n+        # Ensure a new object is created instead of the original being overwritten\n+        self.assertNotEqual(obj.pk, original_pk)\n+        self.assertEqual(Derived.objects.count(), 2)\n+    \n+    def test_reset_primary_key_for_derived_model_no_overwrite(self):\n+        # Create an instance of the Derived model\n+        obj = Derived.objects.create(f=True)\n+        original_pk = obj.pk\n+\n+        # Create a new instance with the same 'uid' as the original\n+        new_obj = Derived.objects.create(f=False)\n+        new_obj.uid = original_pk\n+        new_obj.save()\n+\n+        # The original object should not be overwritten\n+        self.assertEqual(Derived.objects.filter(pk=original_pk).count(), 1)\n+        self.assertEqual(Derived.objects.count(), 2)\n+\n     def test_model_inheritance(self):\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..23a515b 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -638,13 +638,34 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n-    def test_fast_delete_instance_set_pk_none(self):\n-        u = User.objects.create()\n-        # User can be fast-deleted.\n-        collector = Collector(using='default')\n-        self.assertTrue(collector.can_fast_delete(u))\n-        u.delete()\n-        self.assertIsNone(u.pk)\n+    def test_no_subquery_in_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure no subquery is used in the delete statement.\n+        self.assertNotIn('SELECT', sql)\n+\n+    def test_large_table_deletion_no_subquery(self):\n+        # Simulates the large dataset scenario\n+        User.objects.bulk_create(User() for i in range(100000))\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure no subquery is involved in the deletion\n+        self.assertNotIn('SELECT', sql)\n+\n+    def test_delete_with_locked_table_no_subquery(self):\n+        # Assuming a setup where we have the necessary permissions to lock tables\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"LOCK TABLES testapp_user WRITE\")\n+            try:\n+                with self.assertNumQueries(1) as ctx:\n+                    User.objects.all().delete()\n+                sql = ctx.captured_queries[0]['sql']\n+                # Ensure no subquery is present\n+                self.assertNotIn('SELECT', sql)\n+            finally:\n+                cursor.execute(\"UNLOCK TABLES\")\n \n     def test_fast_delete_joined_qs(self):\n         a = Avatar.objects.create(desc='a')\n@@ -702,4 +723,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..cf584ea 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,23 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..3c348bc 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n \n import django\n from django.db import models\n from django.test import TestCase\n+from django.db.models import Sum\n \n from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n \n@@ -253,7 +255,29 @@ class PickleabilityTestCase(TestCase):\n         with self.assertRaisesMessage(RuntimeWarning, msg):\n             pickle.loads(pickle.dumps(qs))\n \n-    def test_order_by_model_with_abstract_inheritance_and_meta_ordering(self):\n+    def test_pickle_with_values(self):\n+        # Create test data\n+        g = Group.objects.create(name='Group 1')\n+        Event.objects.create(title='Event 1', group=g)\n+        Group.objects.create(name='Group 2')\n+\n+        # Test pickling of queryset using values\n+        qs = Group.objects.values('name').annotate(num_events=Sum('event__id'))\n+        reloaded_qs = Group.objects.all()\n+        reloaded_qs.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertEqual(list(reloaded_qs), list(qs))\n+\n+    def test_pickle_with_values_list(self):\n+        # Create test data\n+        g = Group.objects.create(name='Group 1')\n+        Event.objects.create(title='Event 1', group=g)\n+        Group.objects.create(name='Group 2')\n+\n+        # Test pickling of queryset using values_list\n+        qs = Group.objects.values_list('name', flat=True)\n+        reloaded_qs = Group.objects.all()\n+        reloaded_qs.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertEqual(list(reloaded_qs), list(qs))\n         group = Group.objects.create(name='test')\n         event = MyEvent.objects.create(title='test event', group=group)\n         event.edition_set.create()\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..3ebc1c4 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -7,8 +7,9 @@ class Classification(models.Model):\n \n class Employee(models.Model):\n     name = models.CharField(max_length=40, blank=False, null=False)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n     salary = models.PositiveIntegerField()\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..7860235 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -25,6 +25,11 @@ class JSONFieldTest(SimpleTestCase):\n             field.clean('{some badly formed: json}')\n \n     def test_prepare_value(self):\n+        # Additional test cases for Unicode characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        self.assertEqual(field.prepare_value({'emoji': '\ud83d\ude00\ud83d\udc31'}), '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..affc4fb 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,7 +6602,41 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/my-script/')\n+    def test_missing_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/my-script' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, SCRIPT_NAME='/another-prefix/')\n+    def test_missing_slash_with_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/another-prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6628,7 +6662,41 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertEqual(response.status_code, 404)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/my-script/')\n+    def test_missing_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/my-script' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, SCRIPT_NAME='/another-prefix/')\n+    def test_missing_slash_with_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/another-prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..7b4a5d7 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,36 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Test that a migration including models with custom fields and mixins\n+        includes all necessary imports.\n+        \"\"\"\n+        fields = {\n+            'name': models.TextField(primary_key=True),\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=tuple(fields.items()),\n+                    bases=(\"app.models.MyMixin\", models.Model),  # Simulating the bases from the generated migration\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        \n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        # Execute the migration string in a safe environment and capture result\n+        result = self.safe_exec(output)\n+        \n+        # Check if the generated migration includes necessary imports\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"import app.models\", output)\n+        self.assertIn(\"Migration\", result)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..2cd7965 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,7 +1630,20 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n-    def test_exists_none_with_aggregate(self):\n+    def test_aggregation_default_after_annotation(self):\n+        # This test checks the use of 'default' in aggregates after annotation.\n+        result = Book.objects.annotate(\n+            double_price=F('price') * 2,\n+        ).aggregate(value=Sum('double_price', default=0))\n+        # Ensure that it does not crash and returns the expected value.\n+        self.assertIsNotNone(result['value'])\n+\n+    def test_aggregation_with_default_in_annotation(self):\n+        # This test checks if default can be used in annotations as well.\n+        result = Book.objects.annotate(\n+            total=Coalesce(Sum('price', default=0), 0),\n+        ).aggregate(Sum('total'))\n+        self.assertIsNotNone(result['total__sum'])\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1655,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..e59c8b3 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,7 +2988,16 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Deconstruction.\n+        # Test backward movement with unnamed index\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        # Ensure the original index name is restored\n+        self.assertIndexNameExists(table_name, \"pony_weight_pink_idx\")\n+\n+        # Test reapplying RenameIndex\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n         self.assertEqual(definition[1], [])\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..21b4b86 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3487,7 +3487,40 @@ class FormFieldCallbackTests(SimpleTestCase):\n \n         NewForm = modelform_factory(Person, form=BaseForm, formfield_callback=callback)\n \n-        class InheritedForm(NewForm):\n+        class MyModel(models.Model):\n+            active = models.BooleanField()\n+            name = models.CharField(max_length=64, blank=True, null=True)\n+\n+        def all_required(field, **kwargs):\n+            formfield = field.formfield(**kwargs)\n+            formfield.required = True\n+            return formfield\n+\n+        class TestFormfieldCallbackInMeta(TestCase):\n+            def test_formfield_callback_in_meta(self):\n+                class CustomForm(forms.ModelForm):\n+                    class Meta:\n+                        model = MyModel\n+                        formfield_callback = all_required\n+                        fields = [\"active\", \"name\"]\n+\n+                form = CustomForm()\n+                for field_name, field in form.fields.items():\n+                    self.assertTrue(field.required, f\"Field {field_name} should be required\")\n+\n+            def test_formfield_callback_in_modelform_factory(self):\n+                class BaseForm(forms.ModelForm):\n+                    class Meta:\n+                        model = MyModel\n+                        formfield_callback = all_required\n+                        fields = \"__all__\"\n+\n+                FactoryForm = modelform_factory(MyModel, form=BaseForm)\n+                form = FactoryForm()\n+                for field_name, field in form.fields.items():\n+                    self.assertTrue(field.required, f\"Field {field_name} should be required\")\n+\n+        # Original classes for context\n             pass\n \n         for name in NewForm.base_fields:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..fb86ca3 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -12,8 +12,36 @@ from django.test.utils import isolate_apps\n from django.utils.translation import gettext_lazy, override\n \n from .models import Score\n+from django.db import models\n+from django.core import serializers\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().select_related(\"master\")\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n+class SerializationM2MTestCase(TestCase):\n+    def test_issue_serialization_with_custom_manager_using_select_related(self):\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+\n+        with self.assertRaises(serializers.base.SerializationError):\n+            serializers.serialize(\"json\", [test])\n+\n \n class JsonSerializerTestCase(SerializersTestBase, TestCase):\n     serializer_name = \"json\"\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..d711bea 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -217,7 +217,21 @@ def test_unpickle_canvas():\n     assert fig2.canvas is not None\n \n \n-def test_mpl_toolkits():\n+def test_dpi_after_unpickle():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import pickle\n+\n+    original_dpi = 200\n+    fig = plt.figure(dpi=original_dpi)\n+    x = np.linspace(0, 2 * np.pi)\n+    y = np.sin(x)\n+\n+    for i in range(10):  # Reduced the iterations for a simple test\n+        fig.canvas.draw()  # Ensure the canvas is initialized\n+        assert fig.dpi == original_dpi, f\"DPI changed from original on iteration {i}\"\n+        fig = pickle.loads(pickle.dumps(fig))  # Unpickle the figure\n+        assert fig.dpi == original_dpi, f\"DPI doubled on iteration {i}\"\n     ax = parasite_axes.host_axes([0, 0, 1, 1])\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..a50ee9e 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6598,6 +6598,17 @@ def test_integrate(dask):\n \n     # along x and y\n     actual = da.integrate((\"y\", \"x\"))\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"x\")\n+    # Test that 'coord' argument can now be used\n+    actual_coord = da.integrate(coord=\"x\")\n+    expected_x = xr.DataArray(\n+        np.trapz(da, da[\"x\"], axis=0),\n+        dims=[\"y\"],\n+        coords={k: v for k, v in da.coords.items() if \"x\" not in v.dims},\n+    )\n+    assert_allclose(expected_x, actual_coord.compute())\n+    assert_equal(actual_coord, ds.integrate(\"x\")[\"var\"])\n     assert actual.ndim == 0\n \n     with pytest.raises(ValueError):\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..d3dbfb4 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -114,6 +114,36 @@ def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"the-newest has an invalid format, should be a version string.\" in output.err\n \n+from typing import Any\n+import pytest\n+import re\n+from pylint.lint import Run\n+from tests.utils import EMPTY_MODULE\n+from pytest import CaptureFixture\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),  # Test case reflecting the issue\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are\n+    one or more commas within quantifier expressions.\n+    \"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgxs={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n \n def test_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an an option is passed whose value is an invalid regular expression.\"\"\"\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..1ef638d 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1155,8 +1155,17 @@ def test_summary_list_after_errors(testdir):\n         ]\n     )\n \n+def test_does_not_collect_init_py_files_as_tests(testdir):\n+    # Create a __init__.py file that should not be collected as a test\n+    testdir.mkpydir(\"foobar\")\n+    init_file = testdir.makepyfile('foobar/__init__.py', 'assert False')\n \n-def test_importorskip():\n+    # Create a valid test file\n+    test_file = testdir.makepyfile('def test_success(): pass')\n+\n+    # Run pytest and ensure __init__.py is not collected as a test\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n     with pytest.raises(\n         pytest.skip.Exception,\n         match=\"^could not import 'doesnotexist': No module named .*\",\n@@ -1184,4 +1193,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..7220af3 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,18 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"ident\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_invalid_idents(ident: str) -> None:\n+    with pytest.raises(AssertionError):\n+        Expression.compile(ident)\n+        \n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..1687cdd 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,39 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with custom transformer and pandas output.\"\"\"\n+\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import make_union, FeatureUnion\n+    from sklearn.utils._testing import assert_array_equal\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X, y=None):\n+            return self\n+\n+        def transform(self, X, y=None):\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Test with FeatureUnion\n+    feature_union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    feature_union.set_output(transform=\"pandas\")\n+\n+    transformed_data = feature_union.fit_transform(data)\n+    expected_data = pd.Series([240, 240, 240, 240], name=\"value\")  # Aggregate sum for each day\n+    assert_array_equal(transformed_data[\"my_transformer__value\"], expected_data)\n+\n+    # Test with make_union\n+    make_union_transformer = make_union(MyTransformer())\n+    make_union_transformer.set_output(transform=\"pandas\")\n+\n+    make_union_transformed_data = make_union_transformer.fit_transform(data)\n+    assert_array_equal(make_union_transformed_data[\"value\"], expected_data)\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..85cf07e 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -266,8 +266,10 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n-\n-def test_pyfunction_signature(app):\n+def test_none_annotation():\n+    # Ensure None in annotations links correctly\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n     text = \".. py:function:: hello(name: str) -> str\"\n     doctree = restructuredtext.parse(app, text)\n     assert_node(doctree, (addnodes.index,\n@@ -742,4 +744,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..c9b1378 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,6 +1317,38 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_input_parameters_rendering(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+x3, x4 : list, optional\n+    Input lists, description of `x3`, `x4`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: * **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+             * **x3, x4** (:class:`list`, *optional*) -- Input lists, description of ``x3``, ``x4``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`\n+:param x3: Input lists, description of ``x3``, ``x4``.\n+:type x3: :class:`list`, *optional*\n+:param x4: Input lists, description of ``x3``, ``x4``.\n+:type x4: :class:`list`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..aeed91b 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,7 +773,59 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+import pytest\n+from sphinx.testing import restructuredtext\n+from sphinx import addnodes\n+from docutils import nodes\n+\n+\n+@pytest.mark.sphinx(freshenv=True)\n+def test_type_and_rtype_cross_references(app):\n+    \"\"\"Test to ensure :type: and :rtype: handles module context correctly.\"\"\"\n+    \n+    # Test setup\n+    text = \"\"\"\n+    .. py:class:: mod.A\n+    .. py:class:: mod.submod.A\n+    \n+    .. py:function:: f()\n+    \n+        :param mod.A a:\n+        :param mod.submod.A b:\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \n+    .. py:currentmodule:: mod\n+    \n+    .. py:function:: f()\n+    \n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod.submod\n+    \n+    .. py:function:: f()\n+    \n+        :param A a: \n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \"\"\"\n+    \n+    # Parsing the text\n+    doctree = restructuredtext.parse(app, text)\n+    print(doctree)\n+\n+    # Check for warnings (expecting ambiguous warnings in current implementation)\n+    assert \"more than one target found for cross-reference 'A'\" not in app._warning.getvalue()\n \n+# Existing test\n @pytest.mark.sphinx(freshenv=True)\n def test_module_index(app):\n     text = (\".. py:module:: docutils\\n\"\n",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..24b1599 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,7 +1048,18 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n-def test_conditionset():\n+from sympy import Eq, cos, sin, solveset, S, ConditionSet, sqrt\n+\n+def test_conditionset_issue_18188():\n+    # Test case for the reported issue\n+    n = symbols('n')\n+    equation = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert solveset(equation, n, domain=S.Reals) == ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), S.Reals)\n+\n+def test_conditionset_issue_18188_additional():\n+    # Additional test case for variety\n+    equation2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert solveset(equation2, x, domain=S.Reals) == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), S.Reals)\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..62e8b64 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,6 +3265,9 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n+from sympy.polys.polytools import sqf_list\n+from sympy import Symbol\n+\n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n@@ -3330,6 +3333,18 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+def test_issue_8695():\n+    x = Symbol('x')\n+    # Given polynomial as per the issue\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == expected_result\n+\n+def test_correct_scenario():\n+    x = Symbol('x')\n+    # Another polynomial to verify correct behavior\n+    p = x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2\n+    expected_result = (1, [(x - 2, 1), (x**2 - 1, 2)])\n+    assert sqf_list(p) == expected_result\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..a55b031 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3255,7 +3255,13 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+def test_issue_18895_factor_with_extension():\n+    from sympy import factor, expand, I\n+    z = expand((x - 1) * (y - 1))\n+    # Without extension, should factor completely\n+    assert factor(z) == (x - 1) * (y - 1)\n+    # With extension over complex numbers\n+    assert factor(z, extension=[I]) == (x - 1) * (y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..9e1065a 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,11 @@\n+\n+def test_symbol_dict_and_slots():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol instance should not have a __dict__ attribute\"\n+    assert hasattr(s, '__slots__'), \"Symbol class should have __slots__ defined\"\n+    assert isinstance(s.__slots__, tuple), \"__slots__ should be a tuple\"\n+    assert 'name' in s.__slots__, \"'name' should be in __slots__ of Symbol\"\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -8,6 +16,7 @@ from sympy.core.basic import (Basic, Atom, preorder_traversal, as_Basic,\n from sympy.core.singleton import S\n from sympy.core.symbol import symbols, Symbol, Dummy\n from sympy.core.sympify import SympifyError\n+from sympy.core.symbol import Symbol\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..b591c2d 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundfield_subwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Test that the BoundWidget.id_for_label uses the custom 'id' given \n+        through attrs when rendering subwidgets of type CheckboxSelectMultiple.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n+\n+        form = SomeForm()\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..67a9c5a 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -299,9 +299,43 @@ def test_tool_line_handle():\n         assert artist.get_animated()\n         assert artist.get_visible()\n \n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    \"\"\"Test to ensure SpanSelector does not alter axis bounds when interactive.\"\"\"\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])  # Example plot\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n     assert tool_line_handle.positions == positions\n \n \n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib.widgets import SpanSelector\n+\n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n \n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..3f3b4a5 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.exceptions import ConvergenceWarning\n+from sklearn.decomposition import SparseCoder\n+\n+def test_sparse_coder_max_iter_convergence():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                                        n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..86768cd 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,14 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.utils.validation import check_is_fitted\n+from numpy.testing import assert_array_equal\n+from sklearn.utils._testing import assert_raises\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..5061130 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,22 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2  # Original test case\n+\n+    # Additional test case to check if the issue is fixed for n = 3\n+    assert p.subs(n, 3).doit() == S(105)/8\n+\n+    # Further checks for symbolic expressions\n+    # Checking for general symbolic simplification\n+    q = Product(n + 1 / 2**k, (k, 0, n-1))\n+    expected = Product(n + 1 / 2**k, (k, 0, n-1)).rewrite(Sum)  # Using rewrite for expected symbolic simplification\n+    assert simplify(q - expected) == 0  # The difference should simplify to 0\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +373,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}