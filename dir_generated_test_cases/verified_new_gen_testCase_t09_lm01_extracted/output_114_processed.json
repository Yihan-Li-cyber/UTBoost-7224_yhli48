{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..c2ab723 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,37 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_fitsdiff_identical_files_with_vla(self):\n+        \"\"\"Test FITSDiff on files with variable-length arrays to ensure identical files are reported as identical.\"\"\"\n+        col_vla = Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = BinTableHDU.from_columns([col_vla])\n+        filename = 'test_vla_identical.fits'\n+        hdu.writeto(filename, overwrite=True)\n+        \n+        diff = FITSDiff(filename, filename)\n+        \n+        assert diff.identical, \"FITSDiff should report identical for the same file\"\n+        \n+        os.remove(filename)\n+    \n+    def test_fitsdiff_different_files_with_vla(self):\n+        \"\"\"Test FITSDiff on files with variable-length arrays to ensure differences are detected.\"\"\"\n+        col_vla1 = Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu1 = BinTableHDU.from_columns([col_vla1])\n+        filename1 = 'test_vla_1.fits'\n+        hdu1.writeto(filename1, overwrite=True)\n+\n+        col_vla2 = Column('a', format='QD', array=[[1], [1, 1]])\n+        hdu2 = BinTableHDU.from_columns([col_vla2])\n+        filename2 = 'test_vla_2.fits'\n+        hdu2.writeto(filename2, overwrite=True)\n+        \n+        diff = FITSDiff(filename1, filename2)\n+        \n+        assert not diff.identical, \"FITSDiff should report differences for different files\"\n+        \n+        os.remove(filename1)\n+        os.remove(filename2)\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..ddbdf34 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -183,6 +183,13 @@ def test_unknown_unit3():\n \n     unit3 = u.Unit(\"BAR\", parse_strict='silent')\n     assert unit != unit3\n+\n+    # Also test comparisons with None, addressing issue with UnrecognizedUnit\n+    assert unit != None  # noqa\n+    assert not (unit == None)\n+\n+    # Additional test for collections containing None\n+    assert unit not in (None, unit3)\n     assert not unit.is_equivalent(unit3)\n \n     with pytest.raises(ValueError):\n",
  "astropy__astropy-7671": "",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..84e0fb3 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,48 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_from_string(self):\n+        \"\"\"Test Card.fromstring with a `str` input.\"\"\"\n+\n+        c = fits.Card.fromstring(\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_card_from_bytes(self):\n+        \"\"\"Test loading a Card from a `bytes` object.\"\"\"\n+\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_header_fromstring_str(self):\n+        \"\"\"Test Header.fromstring with a `str` input.\"\"\"\n+\n+        header_str = \"SIMPLE  =                    T / conforms to FITS standard                       \" \\\n+                     \"BITPIX  =                    8 / array data type                                 \" \\\n+                     \"NAXIS   =                    0 / number of array dimensions                      \" \\\n+                     \"EXTEND  =                    T                                                   \" \\\n+                     \"END                                                                              \"\n+        pri_hdr_from_str = fits.Header.fromstring(header_str)\n+        assert pri_hdr_from_str['SIMPLE'] is True\n+        assert pri_hdr_from_str['BITPIX'] == 8\n+        assert pri_hdr_from_str['NAXIS'] == 0\n+        assert pri_hdr_from_str['EXTEND'] is True\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"Test reading a Header from a `bytes` string.\"\"\"\n+\n+        header_bytes = b\"SIMPLE  =                    T / conforms to FITS standard                       \" \\\n+                       b\"BITPIX  =                    8 / array data type                                 \" \\\n+                       b\"NAXIS   =                    0 / number of array dimensions                      \" \\\n+                       b\"EXTEND  =                    T                                                   \" \\\n+                       b\"END                                                                              \"\n+        pri_hdr_from_bytes = fits.Header.fromstring(header_bytes)\n+        assert pri_hdr_from_bytes['SIMPLE'] is True\n+        assert pri_hdr_from_bytes['BITPIX'] == 8\n+        assert pri_hdr_from_bytes['NAXIS'] == 0\n+        assert pri_hdr_from_bytes['EXTEND'] is True\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..c8e1433 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -149,8 +149,18 @@ class TestQuantityCreation:\n \n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n-\n-    def test_copy(self):\n+    \n+    def test_preserve_float16_dtype(self):\n+        \"\"\"Test that float16 is preserved in the Quantity object\"\"\"\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+\n+        # Test with a scalar float16\n+        scalar_16 = np.float16(1.0)\n+        q_scalar_16 = u.Quantity(scalar_16, u.km)\n+        assert q_scalar_16.dtype == scalar_16.dtype\n+        assert np.all(q_scalar_16.value == scalar_16)\n \n         # By default, a new quantity is constructed, but not if copy=False\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..ab12aa9 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -225,6 +225,18 @@ TEST_DATA = [\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n+    # Test invalid URLs for username and password without proper encoding\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+    # Additional test cases with valid URLs to ensure filter doesn't reject them\n+    (URLValidator(), 'http://user:pass@example.com', None),\n+    (URLValidator(), 'http://user%3Apass@example.com', None),\n+    (URLValidator(), 'http://user%40domain.com@example.com', None),\n     (BaseValidator(True), True, None),\n     (BaseValidator(True), False, ValidationError),\n \n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..0e77924 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import re\n from decimal import Decimal\n \n from django.core.exceptions import FieldError\n from django.db import connection\n+from django.db.models.expressions import Case, When\n from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n     Max, Min, Sum, Value,\n@@ -389,6 +391,21 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_count_distinct_expression_with_case_when(self):\n+        # Testing the aggregation with COUNT, DISTINCT, and Case-When syntax\n+        books = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(books['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_with_different_case(self):\n+        # Additional test case with a different condition\n+        books = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(price__lt=30.00, then='rating')), distinct=True),\n+        )\n+        # Assuming there are 3 distinct ratings for books priced less than $30\n+        self.assertEqual(books['distinct_ratings'], 3) \n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..8a45b0d 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1100,6 +1100,15 @@ class OverrideSettingsTests(SimpleTestCase):\n         django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertIsNone(default_storage.file_permissions_mode)\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Check that the default file upload permissions are set to 0o644 when\n+        FILE_UPLOAD_PERMISSIONS is not explicitly set.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            storage = FileSystemStorage()\n+            self.assertEqual(storage.file_permissions_mode, 0o644)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..9cee66f 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -26,10 +28,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         self.subprocess_args = None\n         self.pgpass = None\n         with mock.patch('subprocess.call', new=_mock_subprocess_call):\n-            DatabaseClient.runshell_db(dbinfo)\n+            with mock.patch('subprocess.run', new=_mock_subprocess_call):\n+                DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n-\n-    def test_basic(self):\n+    \n+    def test_pgpassword_in_environment(self):\n+        \"\"\"Test that PGPASSWORD is set properly and used.\"\"\"\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n+        \n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'secretpass',\n+                'host': 'somehost',\n+                'port': '5432',\n+            })\n+        \n+        self.assertEqual(self.pgpassword, 'secretpass')\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +131,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..853f7d7 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n \n \n @override_settings(\n@@ -47,6 +48,17 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n+\n     def test_missing_content_type_rename_ignore(self):\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +75,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..ab5f00a 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -421,6 +421,46 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n             form = MediaForm\n             model = Media\n \n+        def test_get_inlines_hook(self):\n+            class MediaInline(GenericTabularInline):\n+                model = Media\n+\n+            class AlternateInline(GenericTabularInline):\n+                model = Media\n+\n+            class EpisodeAdmin(admin.ModelAdmin):\n+                inlines = [AlternateInline, MediaInline]\n+\n+                def get_inlines(self, request, obj=None):\n+                    if hasattr(request, 'name'):\n+                        if request.name == 'alternate':\n+                            return self.inlines[:1]\n+                        elif request.name == 'media':\n+                            return self.inlines[1:2]\n+                    return []\n+\n+            ma = EpisodeAdmin(Episode, self.site)\n+\n+            # Case when request doesn't have 'name' attribute\n+            request = SimpleNamespace()\n+            self.assertEqual(ma.get_inlines(request, None), [])\n+            self.assertEqual(ma.get_inline_instances(request), [])\n+\n+            # Test with 'alternate' request name\n+            request.name = 'alternate'\n+            self.assertEqual(ma.get_inlines(request, None), (AlternateInline,))\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), AlternateInline)\n+\n+            # Test with 'media' request name\n+            request.name = 'media'\n+            self.assertEqual(ma.get_inlines(request, None), (MediaInline,))\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), MediaInline)\n+\n+            # Test with an unrecognized request name\n+            request.name = 'unknown'\n+            self.assertEqual(ma.get_inlines(request, None), [])\n+            self.assertEqual(ma.get_inline_instances(request), [])\n+\n         class EpisodeAdmin(admin.ModelAdmin):\n             inlines = [\n                 AlternateInline, MediaInline\n@@ -428,4 +468,4 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..ea82ded 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +259,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..5daf252 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -1,6 +1,7 @@\n import os\n \n from django.core.exceptions import ImproperlyConfigured\n+from django.template import TemplateDoesNotExist\n from django.template import Context\n from django.template.engine import Engine\n from django.test import SimpleTestCase, override_settings\n@@ -15,7 +16,19 @@ class RenderToStringTest(SimpleTestCase):\n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n-    def test_basic_context(self):\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..11cfa3e 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -287,8 +287,16 @@ class QueryDictTests(SimpleTestCase):\n \n \n class HttpResponseTests(unittest.TestCase):\n-\n-    def test_headers_type(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_field_from_database(self):\n+        # Simulating a scenario where a BinaryField from a PostgreSQL database\n+        # returns a memoryview object and checking if it's processed correctly as content.\n+        test_content = memoryview(b'binary data from db')\n+        r = HttpResponse(test_content)\n+        self.assertEqual(r.content, b'binary data from db')\n         r = HttpResponse()\n \n         # ASCII strings or bytes values are converted to strings.\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..b788160 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -509,6 +509,11 @@ class LoaderTests(TestCase):\n         self.assertEqual(migrations, ['0001_initial'])\n \n \n+from django.test import override_settings\n+from django.db.migrations.loader import MigrationLoader\n+from django.db import connection\n+from django.test import TestCase\n+\n class PycLoaderTests(MigrationTestBase):\n \n     def test_valid(self):\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..5f50b4b 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -702,36 +702,30 @@ class TestInlinePermissions(TestCase):\n             html=True\n         )\n \n-    def test_inline_change_fk_change_perm(self):\n-        permission = Permission.objects.get(codename='change_inner2', content_type=self.inner_ct)\n-        self.user.user_permissions.add(permission)\n-        response = self.client.get(self.holder_change_url)\n-        # Change permission on inner2s, so we can change existing but not add new\n-        self.assertContains(response, '<h2>Inner2s</h2>', count=2)\n-        # Just the one form for existing instances\n-        self.assertContains(\n-            response, '<input type=\"hidden\" id=\"id_inner2_set-TOTAL_FORMS\" value=\"1\" name=\"inner2_set-TOTAL_FORMS\">',\n-            html=True\n-        )\n-        self.assertContains(\n-            response,\n-            '<input type=\"hidden\" id=\"id_inner2_set-0-id\" value=\"%i\" name=\"inner2_set-0-id\">' % self.inner2.id,\n-            html=True\n-        )\n-        # max-num 0 means we can't add new ones\n+    def test_inline_view_only_permissions(self):\n+        # Grant view only permissions\n+        view_permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(view_permission)\n+        \n+        response = self.client.get(self.author_change_url)\n+        \n+        # Verify correct permissions are set for the inline formset\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        \n+        # Verify that the inline is shown in view-only mode\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n         self.assertContains(\n             response,\n-            '<input type=\"hidden\" id=\"id_inner2_set-MAX_NUM_FORMS\" value=\"0\" name=\"inner2_set-MAX_NUM_FORMS\">',\n+            '<input type=\"hidden\" id=\"id_Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'name=\"Author_books-TOTAL_FORMS\">',\n             html=True\n         )\n-        # TabularInline\n-        self.assertContains(response, '<th class=\"column-dummy required\">Dummy</th>', html=True)\n-        self.assertContains(\n-            response,\n-            '<input type=\"number\" name=\"inner2_set-2-0-dummy\" value=\"%s\" '\n-            'class=\"vIntegerField\" id=\"id_inner2_set-2-0-dummy\">' % self.inner2.dummy,\n-            html=True,\n-        )\n+        # Check that no add or delete options are presented\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n     def test_inline_change_fk_add_change_perm(self):\n         permission = Permission.objects.get(codename='add_inner2', content_type=self.inner_ct)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..06b0c20 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1805,6 +1805,32 @@ class ModelOneToOneFieldTests(TestCase):\n         self.assertEqual(list(ImprovedArticleForm.base_fields), ['article'])\n         self.assertEqual(list(ImprovedArticleWithParentLinkForm.base_fields), [])\n \n+    def test_model_to_dict_fields_empty(self):\n+        \"\"\"\n+        Test model_to_dict with fields passed as an empty list.\n+        It should return an empty dictionary.\n+        \"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_model_to_dict_exclude_empty(self):\n+        \"\"\"\n+        Test model_to_dict with exclude passed as an empty list.\n+        It should return all fields.\n+        \"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        all_fields = ['id', 'name', 'score', 'writer_ptr']\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=[])), all_fields)\n+\n+    def test_model_to_dict_specific_fields(self):\n+        \"\"\"\n+        Test model_to_dict with specific fields requested.\n+        It should return only those fields.\n+        \"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        specific_fields = ['id', 'name']\n+        self.assertEqual(sorted(model_to_dict(bw, fields=specific_fields)), specific_fields)\n+\n     def test_modelform_subclassed_model(self):\n         class BetterWriterForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..ca6e5a3 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..8176f83 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,8 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),   # Test for an extremely small number to ensure correct handling\n+            ('1e-200', 2, '0.00'),   # Another very small number that should not use scientific notation\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..1c73b9d 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..9d26fd9 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,6 +98,33 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_exclude_with_no_matches(self):\n+        # This test checks exclusion when no matching FilteredRelation exists\n+        # for the given author.\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_bob=FilteredRelation('book', condition=Q(book__title__iexact='poem by bob')),\n+            ).exclude(book_bob__isnull=False),\n+            [self.author1, self.author2],\n+        )\n+\n+    def test_exclude_with_multiple_matches(self):\n+        # This test assumes there are multiple books by alice and tests if the exclusion captures all.\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n     def test_with_join_and_complex_condition(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..2dc33c0 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -254,6 +254,22 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), 'Set foo')\n \n \n+    def test_skip_checks_flag(self):\n+        \"\"\"\n+        Test that the --skip-checks flag skips system checks while running the command.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['user_commands'])\n+\n+        # Case where system check would normally fail, but is skipped.\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'invalid_static_dir'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set invalid_static_dir')\n+\n+        # Run without --skip-checks should raise an error\n+        out, err = self.run_manage(['set_option', '--set', 'invalid_static_dir'])\n+        self.assertIn(\"The STATICFILES_DIRS setting is not a tuple or list.\", err)\n+        self.assertNotEqual(out.strip(), 'Set invalid_static_dir')\n+\n class UtilsTests(SimpleTestCase):\n \n     def test_no_existent_external_program(self):\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..f2f7106 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.test.utils import override_settings\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +11,30 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n-class RoutePatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_different_urlconfs(self):\n+        # Ensuring different URLconfs result in different resolver instances\n+        resolver_default = get_resolver()\n+        resolver_another = get_resolver('urlpatterns.path_dynamic_urls')\n+        self.assertIsNot(resolver_default, resolver_another)\n+\n+    def test_resolver_cache_initially_none_then_root_urlconf(self):\n+        # Testing when get_resolver is called first with None and then with a specific ROOT_URLCONF\n+        # Expect only one resolver if using the same URLconf twice\n+        initial_resolver = get_resolver(None)\n+        same_resolver = get_resolver()\n+        self.assertIs(initial_resolver, same_resolver)\n+        different_resolver = get_resolver('urlpatterns.path_dynamic_urls')\n+        self.assertIsNot(same_resolver, different_resolver)\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..1a5e979 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -115,6 +115,13 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__gte=2, num__lte=3)\n         self.assertNumbersEqual(qs1.union(qs2).order_by(F('num').desc()), [3, 2, 1, 0])\n \n+    def test_union_with_changeable_values(self):\n+        # Test case for verifying that columns can be correctly changed\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        reserved_name = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name, (2,))\n+\n     def test_union_with_values(self):\n         ReservedName.objects.create(name='a', order=2)\n         qs1 = ReservedName.objects.all()\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..4921063 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -12,6 +12,7 @@ from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n from io import StringIO\n+from unittest import mock\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n \n@@ -360,6 +361,18 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n \n+    @mock.patch('django.core.mail.message.DNS_NAME', '\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email_using_punycode(self):\n+        \"\"\"\n+        Test that non-ASCII domain names are correctly handled when email\n+        encoding is set to a non-unicode encoding.\n+        \"\"\"\n+        delattr(mail.DNS_NAME, '_fqdn')  # Clear any cached DNS name\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--p8s937b>', message['Message-ID'])\n+\n     def test_none_body(self):\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..b4154c4 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,4 +1,6 @@\n+\n from django import forms\n+from django.db.models import Field, Model\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n@@ -13,6 +15,46 @@ from .models import (\n )\n \n \n+class CustomPositionFieldTestCase(SimpleTestCase):\n+    def test_field_accessible_only_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+        \n+        class TestModel(Model):\n+            field = PositionField()\n+        \n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        # This should pass without raising an admin.E108 error\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_incorrect_use_of_field(self):\n+        class IncorrectPositionField(Field):\n+            \"\"\"Custom field that does not handle instance checking properly.\"\"\"\n+            pass\n+        \n+        class TestModel(Model):\n+            incorrect_field = IncorrectPositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('incorrect_field',)\n+\n+        # This should raise an admin.E108 error due to improper handling\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'incorrect_field', which is not a callable, \"\n+            \"an attribute of 'TestModelAdmin', or an attribute or method on 'MockApp.TestModel'.\",\n+            'admin.E108'\n+        )\n+\n class CheckTestCase(SimpleTestCase):\n \n     def assertIsInvalid(self, model_admin, model, msg, id=None, hint=None, invalid_obj=None, admin_site=None):\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..2ab2f1e 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,5 +1,6 @@\n from datetime import datetime\n from operator import attrgetter\n+from datetime import datetime\n \n from django.core.exceptions import FieldError\n from django.db.models import (\n@@ -462,7 +463,36 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_meta_ordering_with_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(\n+            headline='h1',\n+            pub_date=datetime(2005, 7, 28),\n+            author=None,\n+        )\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_order_by_meta_expression_no_exception(self):\n+        try:\n+            articles = OrderedByFArticle.objects.all()\n+            self.assertIsNotNone(list(articles))\n+        except FieldError as e:\n+            self.fail(f\"Ordering with an F expression should not raise FieldError: {e}\")\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..3a501e4 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -405,9 +405,45 @@ class AggregateTestCase(TestCase):\n \n     def test_non_grouped_annotation_not_in_group_by(self):\n         \"\"\"\n+\n+    def test_avg_distinct(self):\n+        values = Book.objects.aggregate(avg_rating=Avg('rating', distinct=True))\n+        self.assertEqual(values['avg_rating'], 4.125)\n+\n+    def test_sum_distinct(self):\n+        values = Book.objects.aggregate(sum_rating=Sum('rating', distinct=True))\n+        self.assertEqual(values['sum_rating'], 16.5)\n+\n+    def test_min_distinct(self):\n+        # This is mainly to ensure no errors occur, even if DISTINCT for Min is \"pointless\".\n+        values = Book.objects.aggregate(min_rating=Min('rating', distinct=True))\n+        self.assertEqual(values['min_rating'], min(Book.objects.values_list('rating', flat=True)))\n+\n+    def test_max_distinct(self):\n+        # This is mainly to ensure no errors occur, even if DISTINCT for Max is \"pointless\".\n+        values = Book.objects.aggregate(max_rating=Max('rating', distinct=True))\n+        self.assertEqual(values['max_rating'], max(Book.objects.values_list('rating', flat=True)))\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n         \"\"\"\n+\n+    def test_avg_distinct(self):\n+        values = Book.objects.aggregate(avg_rating=Avg('rating', distinct=True))\n+        self.assertEqual(values['avg_rating'], 4.125)\n+\n+    def test_sum_distinct(self):\n+        values = Book.objects.aggregate(sum_rating=Sum('rating', distinct=True))\n+        self.assertEqual(values['sum_rating'], 16.5)\n+\n+    def test_min_distinct(self):\n+        # This is mainly to ensure no errors occur, even if DISTINCT for Min is \"pointless\".\n+        values = Book.objects.aggregate(min_rating=Min('rating', distinct=True))\n+        self.assertEqual(values['min_rating'], min(Book.objects.values_list('rating', flat=True)))\n+\n+    def test_max_distinct(self):\n+        # This is mainly to ensure no errors occur, even if DISTINCT for Max is \"pointless\".\n+        values = Book.objects.aggregate(max_rating=Max('rating', distinct=True))\n+        self.assertEqual(values['max_rating'], max(Book.objects.values_list('rating', flat=True)))\n         qs = (\n             Book.objects.annotate(xprice=F('price')).filter(rating=4.0).values('rating')\n                 .annotate(count=Count('publisher_id', distinct=True)).values('count', 'rating').order_by('count')\n",
  "django__django-11740": "",
  "django__django-11749": "",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..928a42a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -423,6 +423,7 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         CustomEmailField.objects.create_user(**data)\n         form = AuthenticationForm(None, data)\n         self.assertEqual(form.fields['username'].max_length, 255)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n         self.assertEqual(form.errors, {})\n \n     @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n@@ -435,9 +436,12 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         IntegerUsernameUser.objects.create_user(**data)\n         form = AuthenticationForm(None, data)\n         self.assertEqual(form.fields['username'].max_length, 254)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_maxlength_attribute_set(self):\n+        form = AuthenticationForm()\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 150)  # Assuming default is 150\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..b9b225e 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -306,6 +306,21 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n \n+    def test_serialize_translated_enum_names(self):\n+        class TranslatedEnum(enum.Enum):\n+            HELLO = _('Hello')\n+            GOODBYE = _('Goodbye')\n+\n+        field = models.CharField(default=TranslatedEnum.HELLO, choices=[(m.name, m.value) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('HELLO', migrations.test_writer.TranslatedEnum('Hello')), \"\n+            \"('GOODBYE', migrations.test_writer.TranslatedEnum('Goodbye'))], \"\n+            \"default=migrations.test_writer.TranslatedEnum['HELLO'])\"\n+        )\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..5cb9469 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,6 +317,29 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mock(self, mocked_datetime):\n+        # Tests involving the two-digit year handling\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Test cases with the issue scenario\n+        current_year_tests = (\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+\n+        for utcnow, date_str, expected_date in current_year_tests:\n+            with self.subTest(date_str=date_str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(date_str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n+\n     def test_parsing_rfc850(self):\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..13b096d 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,46 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.test import SimpleTestCase\n+from django.forms import CharField, Form\n+\n+class DeepCopyTests(SimpleTestCase):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+    \n+    def test_deep_copy_with_modified_error_message(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field.error_messages['required'] = 'This field is required.'\n+        field_copy = copy.deepcopy(field)\n+        self.assertNotIn('required', field_copy.error_messages)\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Form custom error message.')\n+\n+    def test_deep_copy_error_messages_with_multiple_instances(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field1 = CustomCharField()\n+        field2 = CustomCharField()\n+        field1.error_messages['required'] = 'This field is required for field1.'\n+        field2.error_messages['required'] = 'This field is required for field2.'\n+        \n+        self.assertNotEqual(field1.error_messages['required'], field2.error_messages['required'])\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..f6a2792 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..ac05cdd 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,8 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.test import TestCase\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..16c92b5 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -150,7 +150,20 @@ class ChoicesTests(SimpleTestCase):\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n-    def test_choices_and_field_display(self):\n+    def test_overriding_get_FIELD_display(self):\n+        \"\"\"\n+        Test that overriding get_FIELD_display() returns the overridden value.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        # Create an instance of FooBar with choice value 1\n+        f = FooBar(foo_bar=1)\n+        # Verify that the overridden method is called\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n         values.\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..d08b309 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -7,7 +7,7 @@ from django.db.models.deletion import CASCADE\n from django.db.models.fields.related import ForeignKey\n from django.db.models.query_utils import Q\n from django.test import (\n-    TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n+    connection, Index, TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n from django.test.utils import override_settings\n from django.utils import timezone\n@@ -34,7 +34,45 @@ class SchemaIndexesTests(TestCase):\n         )\n         self.assertEqual(index_name, \"indexes_article_c1_a52bd80b123\")\n \n-    def test_index_name(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_list_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names on the built-in database backends::\n             * Are truncated as needed.\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..9279e96 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,6 +1,8 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n+from django.db.models.sql.where import WhereNode\n from django.db.models import CharField, F, Q\n from django.db.models.expressions import SimpleCol\n from django.db.models.fields.related_lookups import RelatedIsNull\n@@ -107,7 +109,32 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_iterable_lookup_value(self):\n+        # Original test case to check list remains a list\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertIsInstance(name_exact.rhs, list)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_tuple_lookup_value(self):\n+        # Test case to ensure tuple remains a tuple\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertIsInstance(name_exact.rhs, tuple)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n+\n+    def test_set_lookup_value(self):\n+        # Test case to ensure set is correctly handled\n+        query = Query(Item)\n+        where = query.build_where(Q(name={'a', 'b'}))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertTrue(isinstance(name_exact.rhs, set) or isinstance(name_exact.rhs, list))\n+        self.assertEqual(set(name_exact.rhs), {'a', 'b'})\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..8de5091 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -838,7 +838,29 @@ class ChangeListTests(TestCase):\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 1)\n-        data['form-0-uuid'] = 'INVALD_PRIMARY_KEY'\n+    \n+    def test_get_list_editable_queryset_with_unescaped_regex_chars_in_prefix(self):\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        # Using regex special characters in prefix\n+        data = {\n+            'form(.*)-TOTAL_FORMS': '2',\n+            'form(.*)-INITIAL_FORMS': '2',\n+            'form(.*)-MIN_NUM_FORMS': '0',\n+            'form(.*)-MAX_NUM_FORMS': '1000',\n+            'form(.*)-0-uuid': str(a.pk),\n+            'form(.*)-0-load': '15',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        \n+        # This should not cause an error despite the regex special characters\n+        queryset = m._get_list_editable_queryset(request, prefix='form(.*)')\n+        self.assertEqual(queryset.count(), 1)\n         # The unfiltered queryset is returned if there's invalid data.\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..704de6f 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -95,6 +96,33 @@ class TestUtils(AdminDocsSimpleTestCase):\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n \n+    def test_trim_docstring_with_content_on_first_line(self):\n+        \"\"\"\n+        trim_docstring should correctly trim docstrings where the first line is not empty.\n+        \"\"\"\n+        docstring = \"\"\"This is a test.\n+        \n+        This line should be indented correctly.\n+            - This is a list item.\n+        \"\"\"\n+        expected_result = \"This is a test.\\n\\nThis line should be indented correctly.\\n    - This is a list item.\"\n+        self.assertEqual(trim_docstring(docstring), expected_result)\n+\n+    def test_parse_docstring_with_content_on_first_line(self):\n+        \"\"\"\n+        parse_docstring should correctly parse docstrings where the first line is not empty.\n+        \"\"\"\n+        docstring = \"\"\"Title \n+        \n+        This is the body of the docstring.\n+        More details follow.\n+        \"\"\"\n+        expected_title = \"Title\"\n+        expected_body = \"This is the body of the docstring.\\nMore details follow.\"\n+        title, body, _ = parse_docstring(docstring)\n+        self.assertEqual(title, expected_title)\n+        self.assertEqual(body, expected_body)\n+\n     def test_parse_rst(self):\n         \"\"\"\n         parse_rst() should use `cmsreference` as the default role.\n",
  "django__django-12193": "",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..f6d11f6 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -252,8 +252,13 @@ class SmallPKData(models.Model):\n # class TimePKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n+import uuid\n+from django.db import models\n+from uuid import uuid4\n \n-class UUIDData(models.Model):\n+class Sample(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid4)\n+    name = models.CharField(blank=True, max_length=100)\n     data = models.UUIDField(primary_key=True)\n \n \n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..1a1740a 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -111,7 +111,25 @@ class SimpleTagTests(TagTestCase):\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(\"%s as var %%}\" % entry[1][0:-2])\n \n-    def test_simple_tag_escaping_autoescape_off(self):\n+    def test_keyword_only_arguments_error(self):\n+        errors = [\n+            (\n+                \"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'\n+            ),\n+            (\n+                \"'simple_one_default' received multiple values for keyword argument 'two'\",\n+                '{% load custom %}{% simple_one_default 37 two=\"hello\" two=\"world\" %}'\n+            ),\n+            (\n+                \"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 kwarg=42 %}'\n+            ),\n+        ]\n+\n+        for message, template in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, message):\n+                self.engine.from_string(template)\n         c = Context({'name': \"Jack & Jill\"}, autoescape=False)\n         t = self.engine.from_string(\"{% load custom %}{% escape_naive %}\")\n         self.assertEqual(t.render(c), \"Hello Jack & Jill!\")\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..9fed5b7 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,7 @@\n+\n+# Import any additional modules required specifically for testing\n+from django.forms import FileInput\n+\n import copy\n import datetime\n import json\n@@ -2418,7 +2422,33 @@ Password: <input type=\"password\" name=\"password\" required>\n <option value=\"false\" selected>No</option>\n </select>\"\"\")\n \n-    def test_forms_with_file_fields(self):\n+    def test_filefield_with_fileinput_required(self):\n+        # Verify the behavior of FileInput with and without initial data.\n+        class FileForm(Form):\n+            file1 = forms.FileField(widget=FileInput)\n+        \n+        # Case when there is no initial file, required attribute should be present\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # Case when there is initial data, required attribute should not be present\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_use_required_attribute_with_file_input(self):\n+        widget = FileInput()\n+\n+        # When no initial data is provided, should use the required attribute\n+        self.assertIs(widget.use_required_attribute(None), True)\n+\n+        # When initial data is present, should not use the required attribute\n+        self.assertIs(widget.use_required_attribute('resume.txt'), False)\n         # FileFields are a special case because they take their data from the request.FILES,\n         # not request.POST.\n         class FileForm(Form):\n",
  "django__django-12304": "",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..674cf38 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -999,6 +999,42 @@ class OtherModelTests(SimpleTestCase):\n                 related_name='+',\n             )\n \n+    def test_onetoone_order_with_parent_link(self):\n+        \"\"\"\n+        Test to ensure OneToOne fields with parent_link configurations\n+        are correctly processed regardless of order.\n+        \"\"\"\n+        \n+        class Document(models.Model):\n+            pass\n+\n+        # Test Original Order that causes issues\n+        with self.assertRaisesMessage(ImproperlyConfigured, \"Add parent_link=True to invalid_models_tests.Picking.origin.\"):\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # Test Order that works\n+        class PickingCorrect(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        self.assertEqual(PickingCorrect.check(), [])\n+\n+    def test_invalid_onetoone_with_missing_parent_link(self):\n+        \"\"\"\n+        Test to ensure that missing parent_link raises an ImproperlyConfigured error\n+        when there are multiple OneToOne fields and one acts as a parent link.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        # Switched OneToOneField without parent_link should raise an error\n+        with self.assertRaisesMessage(ImproperlyConfigured, \"Add parent_link=True to invalid_models_tests.WrongPicking.document_ptr.\"):\n+            class WrongPicking(Document):\n+                document_ptr = models.OneToOneField(Document, related_name='wrong_picking', on_delete=models.PROTECT)\n+                origin = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n         class ShippingMethodPrice(models.Model):\n             method = models.ForeignKey(ShippingMethod, models.CASCADE)\n             to_country = models.ForeignKey(Country, models.CASCADE)\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..a718aa6 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -247,11 +247,18 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n-    @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY not explicitly set, the middleware should default\n+        to adding a \"Referrer-Policy: same-origin\" header to the response.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response.get('Referrer-Policy'), 'same-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n         The middleware will not override a \"Referrer-Policy\" header already\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..c230e48 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -22,13 +22,38 @@ from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n+from django.utils.functional import SimpleLazyObject\n from .models import (\n-    UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n-    Result, SimulationRun, Time,\n+    UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n+    RemoteEmployee, Result, SimulationRun, Time,\n )\n \n \n-class BasicExpressionsTests(TestCase):\n+class LazySubqueryTests(TestCase):\n+    def setUp(self):\n+        self.max = Employee.objects.create(firstname='Max', lastname='Mustermann')\n+        self.manager = Manager.objects.create(name='Manager')\n+        self.max.manager = self.manager\n+        self.max.save()\n+        self.gmbh = Company.objects.create(\n+            name=\"Acme GmbH\",\n+            num_employees=3,\n+            num_chairs=3,\n+            ceo=self.max,\n+        )\n+        \n+    def test_subquery_filter_by_lazy(self):\n+        max_manager = SimpleLazyObject(\n+            lambda: Manager.objects.get(pk=self.manager.pk)\n+        )\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname'),\n+                ).values('manager'),\n+            ),\n+        ).filter(ceo_manager=max_manager)\n+        self.assertEqual(qs.get(), self.gmbh)\n     @classmethod\n     def setUpTestData(cls):\n         cls.example_inc = Company.objects.create(\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..635883b 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1758,8 +1758,54 @@ class OperationTests(OperationTestBase):\n     def test_alter_index_together_remove(self):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n+    def test_alter_index_together_with_unique_together(self):\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        # Set up initial state with both unique_together and index_together.\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together for the same fields.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+        # Test removal of index_together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+    def test_remove_index_and_declare_new_method(self):\n+        app_label = 'test_alter_index_declare'\n+        table_name = '%s_pony' % app_label\n+        # Initial state with index_together using the new Options.indexes.\n+        project_state = self.set_up_test_model(app_label, indexes=[models.Index(fields=['pink', 'weight'])])\n+        \n+        # Verify index presence.\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Move index declaration, this should not cause re-creation.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Ensure unique_together constraints remain unaffected.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether('Pony', {('pink', 'weight')})\n+        operation.state_forwards(app_label, new_state)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..890a9f8 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,8 +14,8 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n-from django.test import SimpleTestCase, TestCase, override_settings\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n+from django.test import TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n \n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..d3a241b 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,13 +172,23 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n             self.assertIs(Book.objects.exists(), False)\n             if connection.features.supports_sequence_reset:\n+                # Test the simplified signature of execute_sql_flush\n+                sql_list = connection.ops.sql_flush(\n+                    no_style(),\n+                    [Author._meta.db_table, Book._meta.db_table],\n+                    reset_sequences=True,\n+                    allow_cascade=True,\n+                )\n+                connection.ops.execute_sql_flush(sql_list)  # New method signature\n+                self.assertIs(Author.objects.exists(), False)\n+                self.assertIs(Book.objects.exists(), False)\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..66b2d11 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,6 +2444,30 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n \n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n@@ -2453,4 +2477,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..999f953 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -6,6 +6,8 @@ from operator import attrgetter\n from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n+from django.db import models\n+from django.test.utils import isolate_apps\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -194,7 +196,31 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    def test_in_bulk_model_constraint(self):\n+        # Testing if in_bulk works correctly with a total UniqueConstraint\n+        article_1 = Article.objects.create(slug='unique-slug-1')\n+        article_2 = Article.objects.create(slug='unique-slug-2')\n+        result = Article.objects.in_bulk([article_1.slug, article_2.slug], field_name='slug')\n+        self.assertEqual(result, {article_1.slug: article_1, article_2.slug: article_2})\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_partial_and_together_constraints(self):\n+        class TestModel(models.Model):\n+            code = models.CharField(max_length=100)\n+            is_active = models.BooleanField(default=True)\n+            attribute = models.CharField(max_length=100)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['code'], condition=models.Q(is_active=True), name='active_code_unique_with_condition'),\n+                    models.UniqueConstraint(fields=['code', 'attribute'], name='combined_code_attribute_unique')\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['attribute']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    TestModel.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..eab67e8 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1820,11 +1820,27 @@ class CombinableTests(SimpleTestCase):\n     def test_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n-\n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_without_wrapper(self):\n+        expr = Value(3, output_field=IntegerField())\n+        ew = ExpressionWrapper(expr, output_field=IntegerField())\n+        self.assertEqual(ew.get_group_by_cols(alias=None), [])\n+\n+    def test_expression_with_function(self):\n+        expr = Lower(Value('test'))\n+        ew = ExpressionWrapper(expr, output_field=IntegerField())\n+        self.assertEqual(ew.get_group_by_cols(alias=None), [expr])\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..acf5563 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,46 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referential_fk_ordering(self):\n+        # Setting up the self-referential OneModel instances\n+        parent1 = OneModel.objects.create(oneval=1)\n+        child1 = OneModel.objects.create(root=parent1, oneval=2)\n+        \n+        parent2 = OneModel.objects.create(oneval=3)\n+        child2 = OneModel.objects.create(root=parent2, oneval=2)\n+\n+        # Setting up the TwoModel instances referencing OneModel\n+        two1 = TwoModel.objects.create(record=child1, twoval=10)\n+        two2 = TwoModel.objects.create(record=child2, twoval=20)\n+\n+        # Test for the described issue where the ordering does not work as expected\n+        # Ordering by record__root_id\n+        results1 = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by('record__root_id')\n+        self.assertQuerysetEqual(\n+            results1,\n+            [two1, two2],\n+            lambda obj: obj,\n+            ordered=False  # Since we are testing the SQL parts, not the ordered response\n+        )\n+\n+        # Test ordering explicitly by record__root__id\n+        results2 = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by('record__root__id')\n+        self.assertQuerysetEqual(\n+            results2,\n+            [two1, two2],\n+            lambda obj: obj,\n+            ordered=False\n+        )\n+\n+        # Test workaround with annotation\n+        results3 = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).annotate(root_id=models.F('record__root_id')).order_by('root_id')\n+        self.assertQuerysetEqual(\n+            results3,\n+            [two1, two2],\n+            lambda obj: obj,\n+            ordered=False\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +393,46 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referential_fk_ordering(self):\n+        # Setting up the self-referential OneModel instances\n+        parent1 = OneModel.objects.create(oneval=1)\n+        child1 = OneModel.objects.create(root=parent1, oneval=2)\n+        \n+        parent2 = OneModel.objects.create(oneval=3)\n+        child2 = OneModel.objects.create(root=parent2, oneval=2)\n+\n+        # Setting up the TwoModel instances referencing OneModel\n+        two1 = TwoModel.objects.create(record=child1, twoval=10)\n+        two2 = TwoModel.objects.create(record=child2, twoval=20)\n+\n+        # Test for the described issue where the ordering does not work as expected\n+        # Ordering by record__root_id\n+        results1 = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by('record__root_id')\n+        self.assertQuerysetEqual(\n+            results1,\n+            [two1, two2],\n+            lambda obj: obj,\n+            ordered=False  # Since we are testing the SQL parts, not the ordered response\n+        )\n+\n+        # Test ordering explicitly by record__root__id\n+        results2 = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).order_by('record__root__id')\n+        self.assertQuerysetEqual(\n+            results2,\n+            [two1, two2],\n+            lambda obj: obj,\n+            ordered=False\n+        )\n+\n+        # Test workaround with annotation\n+        results3 = TwoModel.objects.filter(record__oneval__in=[1, 2, 3]).annotate(root_id=models.F('record__root_id')).order_by('root_id')\n+        self.assertQuerysetEqual(\n+            results3,\n+            [two1, two2],\n+            lambda obj: obj,\n+            ordered=False\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..629d931 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -617,9 +617,39 @@ class BaseCacheTests:\n \n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n+    from django.core.cache import caches\n+    from django.core.cache.backends.base import InvalidCacheBackendError\n+    from unittest import skipIf\n \n-    def test_zero_cull(self):\n-        self._perform_cull_test('zero_cull', 50, 19)\n+    def test_cull_zero_entries(self):\n+        \"\"\"Test culling when there are zero entries in the cache.\"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        # Set max entries to force immediate culling.\n+        old_max_entries = cull_cache._max_entries\n+        cull_cache._max_entries = 0\n+        try:\n+            cull_cache._cull('default', None, None)  # Verify no error raised\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n+\n+    def test_cull_when_no_entries_to_delete(self):\n+        \"\"\"Test culling when there are entries, but none are removable.\"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        old_max_entries = cull_cache._max_entries\n+        # Add one entry to the cache.\n+        cull_cache.set(\"non_removable_key\", \"value\", 1000)\n+        cull_cache._max_entries = -1  # Force culling to occur\n+        try:\n+            cull_cache._cull('default', None, None)  # Verify no error raised\n+            self.assertTrue(cull_cache.has_key(\"non_removable_key\"))\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n \n     def _perform_invalid_key_test(self, key, expected_warning):\n         \"\"\"\n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..08549c4 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1644,6 +1644,38 @@ class ModelFormBasicTests(TestCase):\n         obj.name = 'Alice'\n         obj.full_clean()\n \n+    def test_foreign_key_validation_with_base_manager(self):\n+        \"\"\"\n+        Test that ForeignKey.validate() uses the _base_manager instead of the \n+        default manager.\n+        \"\"\"\n+        class ArticleManager(models.Manager):\n+            def get_queryset(self):\n+                queryset = super().get_queryset()\n+                return queryset.filter(archived=False)\n+\n+        class Article(models.Model):\n+            title = models.CharField(max_length=100)\n+            archived = models.BooleanField(default=False)\n+            objects = ArticleManager()\n+\n+        class FavoriteArticle(models.Model):\n+            article = models.ForeignKey(Article, on_delete=models.CASCADE)\n+\n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticle\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                self.fields['article'].queryset = Article._base_manager.all()\n+\n+        archived_article = Article.objects.create(title='Archived Article', archived=True)\n+        favorite_data = {'article': archived_article.pk}\n+        form = FavoriteArticleForm(data=favorite_data)\n+        self.assertTrue(form.is_valid())  # This should pass, confirming the base manager is used.\n+\n \n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..d567398 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,25 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_reference_mixed_case_foreign_key(self):\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..ad2c3a9 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1618,6 +1618,29 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_directly(self):\n+        \"\"\"Test temporal subtraction without using ExpressionWrapper.\"\"\"\n+        # Setup: Create instances for testing.\n+        e1 = Experiment.objects.create(\n+            name='test1',\n+            start=datetime.datetime(2023, 1, 1, 12, 0, 0),\n+            end=datetime.datetime(2023, 1, 1, 15, 0, 0),\n+        )\n+\n+        e2 = Experiment.objects.create(\n+            name='test2',\n+            start=datetime.datetime(2023, 1, 1, 10, 0, 0),\n+            end=datetime.datetime(2023, 1, 1, 12, 30, 0),\n+        )\n+\n+        # Test: Annotate with direct temporal subtraction.\n+        queryset = Experiment.objects.annotate(\n+            duration=F('end') - F('start')\n+        )\n+\n+        self.assertEqual(queryset.get(name='test1').duration, datetime.timedelta(hours=3))\n+        self.assertEqual(queryset.get(name='test2').duration, datetime.timedelta(hours=2, minutes=30))\n+\n     def test_datetime_subtraction_microseconds(self):\n         delta = datetime.timedelta(microseconds=8999999999999999)\n         Experiment.objects.update(end=F('start') + delta)\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..b62f1fa 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -45,7 +45,14 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__lte=4)\n         self.assertNumbersEqual(qs1.difference(qs2), [5], ordered=False)\n \n-    def test_union_distinct(self):\n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        # When calling none() on the union, the result should be an empty queryset.\n+        self.assertSequenceEqual(qs3.none(), [])\n+        # Ensure that the union itself (without none()) still returns the correct results.\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.all()\n         self.assertEqual(len(list(qs1.union(qs2, all=True))), 20)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..86a3c14 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -35,6 +35,7 @@ from django.test import (\n )\n from django.utils import timezone\n \n+from django.utils.deprecation import RemovedInDjango40Warning\n from .models import SessionStore as CustomDatabaseSession\n \n \n@@ -330,7 +331,23 @@ class SessionTestsMixin:\n         # The failed decode is logged.\n         self.assertIn('corrupted', cm.output[0])\n \n-    def test_actual_expiry(self):\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_legacy_encode_decode_round_trip(self):\n+        data = {'complex key': 'complex value'}\n+        encoded = self.session._legacy_encode(data)\n+        self.assertEqual(self.session._legacy_decode(encoded), data)\n+    \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_legacy_decode_corrupted_data(self):\n+        # Corrupted data should lead to an empty session and a warning.\n+        corrupted_data = 'corrupted'\n+        with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n+            decoded_data = self.session._legacy_decode(corrupted_data)\n+            self.assertEqual(decoded_data, {})\n+        self.assertIn('corrupted', cm.output[0])\n         # this doesn't work with JSONSerializer (serializing timedelta)\n         with override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer'):\n             self.session = self.backend()  # reinitialize after overriding settings\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..13961c6 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -2,6 +2,7 @@ import time\n \n from django.core.exceptions import ImproperlyConfigured\n from django.http import HttpResponse\n+from django.utils.functional import SimpleLazyObject\n from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n )\n@@ -590,7 +591,19 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    def test_template_params_lazy_object_handling(self):\n+        \"\"\"Test that TemplateView handles kwargs without returning SimpleLazyObject.\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                # Check if offer_slug is not SimpleLazyObject\n+                self.assertNotIsInstance(offer_slug, SimpleLazyObject)\n+                return super().get_context_data(**kwargs)\n+\n+        response = OfferView.as_view()(self.rf.get('/'), offer_slug='test-slug')\n+        self.assertEqual(response.status_code, 200)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..7ac7009 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -17,6 +17,7 @@ from django.forms.models import (\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n+from django.test.utils import isolate_apps\n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n     Category, Character, Colour, ColourfulItem, CustomErrorMessage, CustomFF,\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..2d5b028 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -22,6 +22,7 @@ from django.core.files.uploadedfile import (\n )\n from django.db.models import FileField\n from django.db.models.fields.files import FileDescriptor\n+from django.core.files.storage import Storage as BaseStorage\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n@@ -82,6 +83,15 @@ class FileSystemStorageTests(unittest.TestCase):\n         path, args, kwargs = storage.deconstruct()\n         self.assertEqual(kwargs, kwargs_orig)\n \n+    def test_callable_storage_deconstruction(self):\n+        \"\"\"\n+        Ensure that when deconstructing a FileField with a callable storage,\n+        the storage is not evaluated, and the callable is preserved.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        self.assertIs(kwargs['storage'], callable_storage)\n+\n     def test_lazy_base_url_init(self):\n         \"\"\"\n         FileSystemStorage.__init__() shouldn't evaluate base_url.\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..3b6ba95 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,7 +623,30 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n-    def test_key_iexact(self):\n+    def test_key_in_lookup_with_key_transforms(self):\n+        test_cases = [\n+            # Test cases verifying the behavior of '__in' lookup on key transforms\n+            ('value__key__in', [0], self.objs[0:0]),  # Assuming objs has some data where key is 0\n+            ('value__key__in', [0, 1], self.objs[0:0]),  # Check combining two possible values\n+            ('value__key__in', [10], []),  # For a key value that doesn't exist\n+\n+            # Additional test cases to match the behavior in SQL databases\n+            ('value__c__in', [14], self.objs[3:5]),\n+            ('value__c__in', [14, 15], self.objs[3:5]),\n+            ('value__0__in', [1], [self.objs[5]]),\n+            ('value__0__in', [1, 3], [self.objs[5]]),\n+            ('value__foo__in', ['bar'], [self.objs[7]]),\n+            ('value__foo__in', ['bar', 'baz'], [self.objs[7]]),\n+            ('value__bar__in', [['foo', 'bar']], [self.objs[7]]),\n+            ('value__bar__in', [['foo', 'bar'], ['a']], [self.objs[7]]),\n+            ('value__bax__in', [{'foo': 'bar'}, {'a': 'b'}], [self.objs[7]]),\n+        ]\n+        for lookup, value, expected in test_cases:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..31ceb68 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -1135,6 +1135,52 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n \n     def test_trunc_ambiguous_and_invalid_times(self):\n         sao = pytz.timezone('America/Sao_Paulo')\n+\n+    def test_truncdate_with_tzinfo(self):\n+        \"\"\"\n+        Test TruncDate with specific tzinfo to ensure it respects the passed timezone\n+        instead of using the global timezone settings.\n+        \"\"\"\n+        start_datetime = datetime(2023, 3, 15, 12, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.utc)\n+        self.create_model(start_datetime)\n+\n+        ny_tz = pytz.timezone('America/New_York')\n+        la_tz = pytz.timezone('America/Los_Angeles')\n+\n+        model = DTModel.objects.annotate(\n+            ny_date=TruncDate('start_datetime', tzinfo=ny_tz),\n+            la_date=TruncDate('start_datetime', tzinfo=la_tz),\n+        ).get()\n+\n+        ny_start_date = start_datetime.astimezone(ny_tz).date()\n+        la_start_date = start_datetime.astimezone(la_tz).date()\n+\n+        self.assertEqual(model.ny_date, ny_start_date)\n+        self.assertEqual(model.la_date, la_start_date)\n+\n+    def test_trunctime_with_tzinfo(self):\n+        \"\"\"\n+        Test TruncTime with specific tzinfo to ensure it respects the passed timezone\n+        instead of using the global timezone settings.\n+        \"\"\"\n+        start_datetime = datetime(2023, 3, 15, 12, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.utc)\n+        self.create_model(start_datetime)\n+\n+        ny_tz = pytz.timezone('America/New_York')\n+        la_tz = pytz.timezone('America/Los_Angeles')\n+\n+        model = DTModel.objects.annotate(\n+            ny_time=TruncTime('start_datetime', tzinfo=ny_tz),\n+            la_time=TruncTime('start_datetime', tzinfo=la_tz),\n+        ).get()\n+\n+        ny_start_time = start_datetime.astimezone(ny_tz).time()\n+        la_start_time = start_datetime.astimezone(la_tz).time()\n+\n+        self.assertEqual(model.ny_time, ny_start_time)\n+        self.assertEqual(model.la_time, la_start_time)\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n         end_datetime = utc.localize(datetime(2016, 2, 21, 1))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..e670a00 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,6 +103,46 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n+import pickle\n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+class FieldComparisonTests(SimpleTestCase):\n+\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Test equality - all these should not be equal\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Test hash - all hashes should be different\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+        # Test ordering - testing using less-than\n+        # Note: This test assumes a consistent ordering based on model identity\n+        self.assertLess(min(abstract_model_field, inherit1_model_field), max(abstract_model_field, inherit1_model_field))\n+        self.assertLess(min(abstract_model_field, inherit2_model_field), max(abstract_model_field, inherit2_model_field))\n+        self.assertLess(min(inherit1_model_field, inherit2_model_field), max(inherit1_model_field, inherit2_model_field))\n+\n class ChoicesTests(SimpleTestCase):\n \n     @classmethod\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..25294aa 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,4 +1,7 @@\n+\n import errno\n+from django.core.files import locks\n+from pathlib import Path\n import gzip\n import os\n import struct\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..5f0f415 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,40 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotated_default_ordering_no_order_by(self):\n+        # Create a queryset and annotate it with a count, without explicit ordering\n+        qs = Annotation.objects.annotate(num_annotations=Count('id'))\n+        # The queryset ordered property should be False since there's no ORDER BY clause in SQL\n+        self.assertIs(qs.ordered, False)\n+\n+    def test_annotated_values_ordering(self):\n+        # Create a queryset using values and annotate it, which should not be ordered by default\n+        qs = Annotation.objects.values('note').annotate(num_annotations=Count('id'))\n+        # The queryset ordered property should be False since there is no default or extra ordering\n+        self.assertIs(qs.ordered, False)\n+\n+    def test_annotated_with_ordering_override(self):\n+        # Create a queryset and override with order_by\n+        qs = Annotation.objects.annotate(num_annotations=Count('id')).order_by('name')\n+        # The queryset ordered property should be True because of the manual order_by clause\n+        self.assertIs(qs.ordered, True)\n+\n+    def test_group_by_without_ordering(self):\n+        # Assumes we have a model with default ordering in its Meta, e.g., 'ordering = [\"name\"]'\n+        qs = GroupByModel.objects.annotate(num_items=Count('related_model'))\n+        # The ordered property should be False due to group by without order_by\n+        self.assertIs(qs.ordered, False)\n+\n+    def test_group_by_with_order_by(self):\n+        # Explicitly order by after group by to check ordered changes to True\n+        qs = GroupByModel.objects.annotate(num_items=Count('related_model')).order_by('name')\n+        # The ordered property should be True because an explicit order_by is used\n+        self.assertIs(qs.ordered, True)\n+\n+    def test_empty_queryset_ordering(self):\n+        # Test with an empty queryset, should be ordered by default definition\n+        self.assertIs(Annotation.objects.none().ordered, True)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..de8b4ac 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +39,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.EMAIL_FIELD, 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..381e3de 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,7 +1,9 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n+from django.db.models import Q, UniqueConstraint\n from django.core import checks\n from django.db import models\n from django.test import (\n@@ -138,7 +140,72 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithTotalUniqueConstraints')\n+    def test_username_completely_unique_with_constraints(self):\n+        \"\"\"\n+        Test that a user model with USERNAME_FIELD set to a field\n+        having a complete UniqueConstraint passes with no errors.\n+        \"\"\"\n+        class UserWithTotalUniqueConstraints(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_total_unique'),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithPartialUniqueConstraints')\n+    def test_username_partially_unique_with_constraints(self):\n+        \"\"\"\n+        Test that a user model with USERNAME_FIELD set to a field\n+        having a partial UniqueConstraint issues a warning.\n+        \"\"\"\n+        class UserWithPartialUniqueConstraints(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_partial_unique', condition=Q(is_active=True)),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Warning(\n+                \"'UserWithPartialUniqueConstraints.username' is named as the 'USERNAME_FIELD', \"\n+                \"but it is not completely unique.\",\n+                hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                obj=UserWithPartialUniqueConstraints,\n+                id='auth.W004',\n+            ),\n+        ])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithNoUniqueConstraints')\n+    def test_username_not_unique_and_no_constraint(self):\n+        \"\"\"\n+        Test that a user model with a non-unique USERNAME_FIELD and\n+        no unique constraints raises an error.\n+        \"\"\"\n+        class UserWithNoUniqueConstraints(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'UserWithNoUniqueConstraints.username' must be unique because it is named as the 'USERNAME_FIELD'.\",\n+                obj=UserWithNoUniqueConstraints,\n+                id='auth.E003',\n+            ),\n+        ])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..7e15aa1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -815,7 +816,43 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        # Original test to verify named tuple works with range lookups.\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_with_regular_tuple(self):\n+        # Ensure regular tuples work as expected in range lookups.\n+        qs = Company.objects.filter(num_employees__range=(51, 100))\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_with_more_fields(self):\n+        # Test behavior when a named tuple with more than two fields is used.\n+        ExtendedEmployeeRange = namedtuple('ExtendedEmployeeRange', ['min', 'max', 'average'])\n+        qs = Company.objects.filter(\n+            num_employees__range=ExtendedEmployeeRange(min=51, max=100, average=75)[:2],  # Use slicing to pass only two elements\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_with_different_fields(self):\n+        # Use a named tuple with different field names to ensure field names don't affect the range.\n+        DifferentEmployeeRange = namedtuple('DifferentEmployeeRange', ['start', 'end'])\n+        qs = Company.objects.filter(\n+            num_employees__range=DifferentEmployeeRange(start=51, end=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+        \n+    def test_range_lookup_with_ceo_objects(self):\n+        # Check range on a different field to ensure functionality across fields.\n+        CEOExperienceRange = namedtuple('CEOExperienceRange', ['minimum', 'maximum'])\n+        ceo_query = Employee.objects.filter(\n+            salary__range=CEOExperienceRange(minimum=10, maximum=40)\n+        )\n+        # Expecting to find 'Just Doit' since they have a salary within the specified range.\n+        self.assertEqual(list(ceo_query.values_list('firstname', flat=True)), ['Just'])\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..bbbaf7e 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -29,10 +29,10 @@ from django.core.management.commands.testserver import (\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n-    LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n+    LiveServerTestCase, SimpleTestCase, TestCase, override_settings, captured_stderr, captured_stdout\n )\n \n-custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n+import os\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n@@ -1867,7 +1867,28 @@ class ArgumentOrder(AdminScriptTestCase):\n         )\n \n \n-@override_settings(ROOT_URLCONF='admin_scripts.urls')\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_fallback(self):\n+        \"\"\"\n+        Fallback to sys.argv if argv is None.\n+        \"\"\"\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['manage.py', 'help', 'shell']):\n+                execute_from_command_line(None)\n+        self.assertIn('usage: manage.py shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n     available_apps = [\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..c3fa805 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -112,7 +113,23 @@ class DateFormatTests(SimpleTestCase):\n \n         self.assertEqual(dateformat.format(my_birthday, r'jS \\o\\f F'), '8th of July')\n \n-    def test_futuredates(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (123, '23'),  # Test for year 123, should return 23\n+            (99, '99'),   # Test for year 99, should return 99\n+            (9, '09'),    # Test for year 9, should return 09\n+            (1000, '00'), # Test for year 1000, transition to four digits, should return 00\n+            (999, '99'),  # Test for year 999, should return 99\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         the_future = datetime(2100, 10, 25, 0, 00)\n         self.assertEqual(dateformat.format(the_future, r'Y'), '2100')\n \n@@ -164,4 +181,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..52bf406 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,16 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_field_is_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n+    def test_readonly_field_bound_data(self):\n+        field = ReadOnlyPasswordHashField()\n+        initial_value = \"initial_hash\"\n+        submitted_value = \"altered_hash\"\n+        self.assertEqual(field.bound_data(submitted_value, initial_value), initial_value)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..fa8cd45 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -116,7 +116,58 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [\n                 migrations.CreateModel('Foo', fields=[], options={'verbose_name_plural': 'Foozes'}),\n-            ]\n+            ],\n+        )\n+    \n+    def test_create_model_and_completely_remove_options(self):\n+        \"\"\"\n+        Test that options specified in CreateModel can be completely removed.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Test Model', 'db_table': 'test_table'},\n+                ),\n+                migrations.AlterModelOptions('TestModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('TestModel', fields=[]),\n+            ],\n+        )\n+        \n+    def test_create_model_with_options_partially_removed(self):\n+        \"\"\"\n+        Test that only specified options are removed and others are retained.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'Test Model',\n+                        'db_table': 'test_table',\n+                        'unique_together': {('field1', 'field2')},\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'TestModel',\n+                    options={'db_table': 'new_test_table'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'Test Model',\n+                        'db_table': 'new_test_table',\n+                        'unique_together': {('field1', 'field2')},\n+                    },\n+                ),\n+            ],\n         )\n \n     def _test_create_alter_foo_delete_model(self, alter_foo):\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..9483abf 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,7 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy\n+from django.utils.functional import lazy\n \n from ..utils import setup\n \n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..5754337 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -18,6 +18,7 @@ from django.test import (\n     skipUnlessDBFeature,\n )\n \n+from django.db import IntegrityError, transaction, connection\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n@@ -626,7 +627,22 @@ class FkConstraintsTests(TransactionTestCase):\n             transaction.set_rollback(True)\n \n \n-class ThreadTests(TransactionTestCase):\n+class SQLKeywordsModelTest(TransactionTestCase):\n+    available_apps = ['backends']\n+\n+    def setUp(self):\n+        self.reporter = Reporter.objects.create(first_name='John', last_name='Doe', email='john@example.com')\n+\n+    def test_check_constraints_sql_keywords(self):\n+        with transaction.atomic():\n+            obj = SQLKeywordsModel.objects.create(reporter=self.reporter)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n \n     available_apps = ['backends']\n \n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..d663df1 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,43 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import os\n+import sys\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from django.test import TestCase\n+from django.test.utils import override_settings\n+from io import StringIO\n+import mock  # Assuming mock is available in your environment\n+\n+class RunserverSkipChecksTestCase(TestCase):\n+    def setUp(self):\n+        self.stdout = StringIO()\n+\n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check\")\n+    def test_runserver_with_skip_checks(self, mocked_check, *mocked_objects):\n+        call_command(\n+            \"runserver\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.stdout,\n+        )\n+        self.assertNotIn(\"Performing system checks...\", self.stdout.getvalue())\n+        mocked_check.assert_not_called()\n+\n+        self.stdout.truncate(0)\n+        self.stdout.seek(0)\n+\n+        call_command(\n+            \"runserver\",\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.stdout,\n+        )\n+        self.assertIn(\"Performing system checks...\", self.stdout.getvalue())\n+        mocked_check.assert_called()\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/middleware.py b/tests/middleware_exceptions/middleware.py\nindex 020efe6..1c726e5 100644\n--- a/tests/middleware_exceptions/middleware.py\n+++ b/tests/middleware_exceptions/middleware.py\n@@ -96,6 +96,19 @@ class NotFoundMiddleware(BaseMiddleware):\n         raise Http404('not found')\n \n \n+class DummyMiddleware:\n+    sync_capable = True\n+    async_capable = False\n+\n+    def __init__(self, get_response=None):\n+        if get_response is None:\n+            raise MiddlewareNotUsed('DummyMiddleware is not used')\n+        self.get_response = get_response\n+\n+    def __call__(self, request):\n+        response = self.get_response(request)\n+        return response\n+\n class PaymentMiddleware(BaseMiddleware):\n     def __call__(self, request):\n         response = self.get_response(request)\n@@ -129,4 +142,4 @@ class NotSyncOrAsyncMiddleware(BaseMiddleware):\n     async_capable = False\n \n     def __call__(self, request):\n-        return self.get_response(request)\n+        return self.get_response(request)\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..a4238bf 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -512,8 +513,45 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+from importlib import import_module, reload\n+import pkgutil\n+from unittest.mock import Mock\n+\n+class LoaderFrozenEnvironmentTests(TestCase):\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_file'})\n+    def test_loading_package_without__file__attribute(self):\n+        \"\"\"\n+        Test MigrationLoader can load migrations from packages without a __file__ attribute, ensuring\n+        proper handling in frozen Python environments.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_no_file')\n+        loader = MigrationLoader(connection)\n \n-class PycLoaderTests(MigrationTestBase):\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        original_isinstance = isinstance\n+\n+        try:\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+\n+            # Mock __path__ to simulate a namespace package's behavior\n+            with unittest.mock.patch('builtins.isinstance', side_effect=lambda obj, cls: original_isinstance(obj, cls) if cls is not list else False):\n+                loader.load_disk()\n+                migrations = [\n+                    name for app, name in loader.disk_migrations if app == 'migrations'\n+                ]\n+                self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+\n+        finally:\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n+        reload(test_module)\n \n     def test_valid(self):\n         \"\"\"\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..57e19aa 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -16,6 +16,8 @@ from django.test import (\n )\n from django.test.utils import isolate_apps\n \n+import mock\n+from django.core.exceptions import ImproperlyConfigured\n from ..models import Author, Item, Object, Square\n \n try:\n@@ -36,7 +38,22 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_too_old(self):\n+        \"\"\"Test that an ImproperlyConfigured error is raised for SQLite < 3.9.0.\"\"\"\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_check_sqlite_version_supported(self):\n+        \"\"\"Test that no error is raised for SQLite >= 3.9.0.\"\"\"\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..30fb7e2 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -155,8 +155,27 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                     frozenset(),\n                 )\n \n+from django.utils import autoreload\n+import sys\n+from unittest import mock\n+from .test_module import __main__ as test_main\n \n class TestChildArguments(SimpleTestCase):\n+    \n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_custom_module(self):\n+        expected_output = [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        self.assertEqual(autoreload.get_child_arguments(), expected_output)\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', ['directory', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_from_directory(self):\n+        with mock.patch('sys.modules[__main__].__spec__.parent', new=''):\n+            expected_output = [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+            self.assertEqual(autoreload.get_child_arguments(), expected_output)\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..040c2a1 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -395,6 +395,27 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_inherited_manual_pk_no_warning(self):\n+        class AbstractBase(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ConcreteModel(AbstractBase):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_inherited_manual_pk_with_parent_link_no_warning(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.BigAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -414,4 +435,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..e6923fa 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -273,7 +273,22 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         class SomeForm(Form):\n             field = ModelMultipleChoiceField(ChoiceModel.objects.all())\n \n-        f = SomeForm({'field': ['<script>']})\n+class AssertFormErrorsMixin:\n+    def assertFormErrors(self, expected_errors, callable_obj, *args, **kwargs):\n+        try:\n+            callable_obj(*args, **kwargs)\n+        except Exception as e:\n+            actual_errors = e.error_list if hasattr(e, 'error_list') else [str(e)]\n+            assert list(actual_errors) == expected_errors, f\"Expected errors {expected_errors}, but got {actual_errors}\"\n+        else:\n+            assert False, \"Expected to raise a ValidationError, but no error was raised.\"\n+\n+\n+class SomeForm(forms.Form):\n+    field = forms.CharField()\n+\n+\n+class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertHTMLEqual(\n             t.render(Context({'form': f})),\n             '<ul class=\"errorlist\"><li>field<ul class=\"errorlist\">'\n@@ -289,7 +304,18 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         ChoiceModel.objects.create(pk=2, name='b')\n         ChoiceModel.objects.create(pk=3, name='c')\n \n-        # ModelChoiceField\n+    def test_modelchoicefield_value_placeholder(self):\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': 'INVALID CHOICE',\n@@ -307,4 +333,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..8031800 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,13 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..d4bd3b3 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -176,7 +179,16 @@ class BasicCustomPKTests(TestCase):\n         )\n \n \n-class CustomPKTests(TestCase):\n+class CustomAutoFieldTests(TestCase):\n+    def test_auto_field_subclass_create(self):\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n     def test_custom_pk_create(self):\n         \"\"\"\n         New objects can be created both with pk and the custom name\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..7a3419f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -817,7 +817,27 @@ class BasicExpressionsTests(TestCase):\n         )\n \n \n-class IterableLookupInnerExpressionsTests(TestCase):\n+    def test_commutativity_of_Q_and_Exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test combinations of Q and Exists\n+        tests = [\n+            (Exists(is_ceo) & Q(), [self.max]),\n+            (Q() & Exists(is_ceo), [self.max]),\n+            (Exists(is_ceo) | Q(), [self.example_inc.ceo, self.max]),\n+            (Q() | Exists(is_ceo), [self.example_inc.ceo, self.max]),\n+            (Exists(is_poc) & Q(), [self.max]),\n+            (Q() & Exists(is_poc), [self.max]),\n+            (Exists(is_poc) | Q(), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Q() | Exists(is_poc), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+        ]\n+\n+        for conditions, expected in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..58944ec 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -204,8 +204,28 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('cached', 'css', 'img', 'window.png'), stats['unmodified'])\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n+    \n+    def test_no_duplicate_yields(self):\n+        # Set up the static files storage and collectstatic command\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+\n+        # Collect static files stats\n+        stats = collectstatic_cmd.collect()\n+\n+        # Ensure no file is yielded more than once\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n+    def test_correct_number_of_yields(self):\n+        # Set up the static files storage and collectstatic command\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+\n+        # Collect static files stats\n+        stats = collectstatic_cmd.collect()\n \n-    def test_css_import_case_insensitive(self):\n+        # Check if the count of post-processed files matches the unique set\n+        self.assertEqual(len(stats['post_processed']), len(set(stats['post_processed'])))\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n         with storage.staticfiles_storage.open(relpath) as relfile:\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..4904824 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,10 +1,11 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n \n import copy\n import pickle\n-\n+import collections.abc\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n@@ -14,6 +15,22 @@ from django.utils.datastructures import (\n \n class OrderedSetTests(SimpleTestCase):\n \n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet())\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_mixed_types(self):\n+        s = OrderedSet([1, 'a', (2, 3), None])\n+        reversed_s = reversed(s)\n+        self.assertIsInstance(reversed_s, collections.abc.Iterator)\n+        self.assertEqual(list(reversed_s), [None, (2, 3), 'a', 1])\n+\n     def test_init_with_iterable(self):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..a0203c5 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -5,6 +6,7 @@ from django.db.models import (\n     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n from django.db.models.functions import Upper\n+from django.db.models import Count\n from django.test import TestCase\n \n from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n@@ -41,7 +43,19 @@ class OrderingTests(TestCase):\n         # Getting a single item should work too:\n         self.assertEqual(Article.objects.all()[0], self.a4)\n \n-    def test_default_ordering_override(self):\n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Meta.ordering fields should not affect the GROUP BY clause.\n+        Ensure that Meta.ordering is not included in GROUP BY to avoid incorrect aggregations.\n+        \"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n         \"\"\"\n         Override ordering with order_by, which is in the same format as the\n         ordering attribute in models.\n@@ -483,4 +497,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..c3c5301 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -74,6 +75,26 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n+\n     @isolate_apps('model_options.apps.ModelPKConfig')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..3605c22 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,6 +166,15 @@ class TestIterModulesAndFiles(SimpleTestCase):\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': None})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n         self.assertEqual(\n@@ -175,6 +184,15 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': None})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n@@ -182,6 +200,15 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -190,6 +217,15 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': None})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n@@ -201,6 +237,15 @@ class TestChildArguments(SimpleTestCase):\n                     [exe_path, 'runserver']\n                 )\n \n+    @mock.patch.dict(sys.modules, {'__main__': None})\n+    @mock.patch('sys.argv', ['-m', 'foo.bar.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'foo.bar.baz', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..00c779c 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -214,6 +214,14 @@ TEST_DATA = [\n     (MaxLengthValidator(10), 15 * 'x', ValidationError),\n \n     (MinLengthValidator(10), 15 * 'x', None),\n+\n+    # Newlines and tabs should be rejected\n+    (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\t', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\t', ValidationError),\n     (MinLengthValidator(10), 10 * 'x', None),\n \n     (MinLengthValidator(10), '', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..de37590 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1525,6 +1525,30 @@ class AggregationTests(TestCase):\n             allow_distinct = True\n         DistinctAggregate('foo', distinct=True)\n \n+class QObjectTests(TestCase):\n+    @skipUnlessDBFeature('supports_subqueries_in_group_by')\n+    def test_q_object_or_behavior(self):\n+        # Set up the related PropertyGroup and Agent models for testing.\n+        property_groups = PropertyGroup.objects.agent_groups(management_agent)\n+        qs = MyModel.objects.annotate(Count(\"agent__property_groups\"))\n+\n+        # Test using agent__property_groups__in\n+        queryset1 = qs.filter(\n+            Q(agent__property_groups__in=property_groups) | Q(agent__property_groups__count=0)\n+        ).distinct()\n+\n+        # Test using agent__property_groups__id__in\n+        queryset2 = qs.filter(\n+            Q(agent__property_groups__id__in=property_groups.values_list(\"id\", flat=True)) | Q(agent__property_groups__count=0)\n+        ).distinct()\n+\n+        # Verify that queryset1 results in a subquery error due to multiple columns\n+        with self.assertRaises(ProgrammingError):\n+            list(queryset1)\n+\n+        # Verify that queryset2 runs without issues\n+        self.assertIsNotNone(list(queryset2))\n+\n \n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..360f405 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -68,6 +68,35 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_kwargs_not_used(self):\n+        settings_port = 444\n+        options_port = 555\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..ec0c7ef 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2199,7 +2199,22 @@ class SchemaTests(TransactionTestCase):\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n     @skipUnlessDBFeature('supports_expression_indexes')\n-    def test_func_unique_constraint(self):\n+    def test_create_unique_constraint_with_table_reference(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Create a UNIQUE constraint using a string field, ensuring no table reference is passed\n+        constraint = UniqueConstraint(fields=['name'], name='name_uq')\n+        # Add the constraint\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        # Check if the SQL correctly references the column\n+        self.assertTrue(sql.references_column(table, 'name'))\n+        # Cleanup: Remove the constraint\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n         constraint = UniqueConstraint(Upper('name').desc(), name='func_upper_uq')\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..f983ef1 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -94,6 +94,10 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n     )\n \n \n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+\n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..9b1e96a 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -653,7 +653,33 @@ class ExecutorTests(MigrationTestBase):\n             recorder.applied_migrations(),\n         )\n \n-    # When the feature is False, the operation and the record won't be\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_unapply_squashed_migration_marks_replacements_unapplied(self):\n+        \"\"\"Ensure unapplying a squashed migration marks replacements as unapplied.\"\"\"\n+        executor = MigrationExecutor(connection)\n+        \n+        # Apply the squashed migration\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        self.assertIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n+        # Unapply the squashed migration\n+        executor.migrate([('migrations', None)])\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        # Additionally, check that the original migrations are marked as unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_initial'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            ('migrations', '0002_second'),\n+            executor.recorder.applied_migrations(),\n+        )\n     # performed in a transaction and the test will systematically pass.\n     @skipUnlessDBFeature('can_rollback_ddl')\n     def test_migrations_applied_and_recorded_atomically(self):\n",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..14b398a 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,36 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+    def test_verify_bulk_update_return_value_empty(self):\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+    \n+    def test_verify_bulk_update_return_value_multiple_entries(self):\n+        Note.objects.bulk_create([\n+            Note(note='test', misc='123') for _ in range(2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = 'updated-note'\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+    \n+    def test_verify_bulk_update_return_value_duplicates_in_same_batch(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        note.note = 'updated-note'\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+    \n+    def test_verify_bulk_update_return_value_duplicates_across_batches(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        note.note = 'updated-note'\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n+        \n+    def test_verify_no_change_bulk_update(self):\n+        note = Note.objects.create(note='no-change', misc='test')\n+        rows_updated = Note.objects.bulk_update([note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..7e736e7 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,6 +984,27 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n+    def test_formset_non_form_errors_css_class(self):\n+        \"\"\"\n+        Test that non-form errors in FormSets are rendered with the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3',  # the number of forms rendered\n+            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'choices-MAX_NUM_FORMS': '2',  # max number of forms\n+            'choices-0-choice': 'Choice 1',\n+            'choices-0-votes': '1',\n+            'choices-1-choice': '',\n+            'choices-1-votes': '',\n+            'choices-2-choice': '',\n+            'choices-2-votes': '',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors.as_ul(), '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>')\n+\n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..e4504bd 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,6 +2129,33 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n+    def test_access_via_bound_field_initial(self):\n+        \"\"\"Test that _clean_fields accesses initial value through BoundField.\"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = forms.DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+\n+        # Access BoundField directly\n+        bound_field_initial = form['dt'].initial\n+\n+        # Ensure that cleaned data uses the initial value from BoundField\n+        self.assertEqual(form.cleaned_data['dt'], bound_field_initial)\n+\n+    def test_bound_field_changed_data(self):\n+        \"\"\"Test that changed_data correctly uses BoundField's _did_change method.\"\"\"\n+        initial_time = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = forms.DateTimeField(initial=lambda: initial_time, disabled=False)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:31:45'})\n+        \n+        # Verify changed_data is using BoundField logic\n+        self.assertIn('dt', form.changed_data)\n+\n     def test_help_text(self):\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n",
  "django__django-14672": "",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..77df65f 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,5 +1,40 @@\n+\n import json\n-from contextlib import contextmanager\n+import datetime\n+from django.http import JsonResponse\n+from .models import Question\n+\n+class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+    def serialize_result(self, obj, to_field_name):\n+        return {\n+            **super().serialize_result(obj, to_field_name),\n+            'posted': str(obj.posted),\n+        }\n+\n+def test_autocomplete_with_extra_fields(self):\n+    # Create test data\n+    Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+    Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+    \n+    # Simulate a request to the autocomplete view\n+    request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+    request.user = self.superuser\n+    \n+    # Test the view\n+    response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+    self.assertEqual(response.status_code, 200)\n+    \n+    # Parse response data\n+    data = json.loads(response.content.decode('utf-8'))\n+    \n+    # Verify response\n+    self.assertEqual(data, {\n+        'results': [\n+            {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+            for q in Question.objects.order_by('-posted')\n+        ],\n+        'pagination': {'more': False},\n+    })\n \n from django.contrib import admin\n from django.contrib.admin.tests import AdminSeleniumTestCase\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..0263159 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -915,7 +915,21 @@ class StateTests(SimpleTestCase):\n         with self.assertRaises(ValueError):\n             project_state.apps\n \n-        # If we include the real app it should succeed\n+    def test_real_apps_non_set(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_set(self):\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_none(self):\n+        try:\n+            ProjectState(real_apps=None)\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n         project_state = ProjectState(real_apps={'contenttypes'})\n         project_state.add_model(ModelState.from_model(TestModel))\n         rendered_state = project_state.apps\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..f3da631 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,6 +166,11 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 )\n \n \n+import sys\n+import mock\n+from django.utils import autoreload\n+from unittest import SimpleTestCase\n+\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n@@ -195,6 +200,21 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'test_option': 'test_value'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    def test_xoptions_passed_to_child_process(self):\n+        expected_arguments = [\n+            sys.executable,\n+            '-Xutf8',\n+            '-Xtest_option=test_value',\n+            __file__,\n+            'runserver'\n+        ]\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            expected_arguments\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -235,6 +255,21 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'test_option': 'test_value'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    def test_xoptions_passed_to_child_process(self):\n+        expected_arguments = [\n+            sys.executable,\n+            '-Xutf8',\n+            '-Xtest_option=test_value',\n+            __file__,\n+            'runserver'\n+        ]\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            expected_arguments\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..bbc29e5 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,7 +271,47 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n-    def test_new_attribute(self):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n+    def test_partial_object_handling(self):\n+        \"\"\"Ensure method_decorator handles functools.partial objects.\"\"\"\n+        from functools import partial\n+\n+        def simple_decorator(func):\n+            @wraps(func)\n+            def wrapper(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return wrapper\n+\n+        class Test:\n+            @method_decorator(simple_decorator)\n+            def method(self):\n+                return 'hello'\n+\n+        partial_method = partial(Test().method)\n+        self.assertEqual(partial_method(), 'hello')\n+        self.assertEqual(partial_method.func.__name__, 'method')\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n             func.x = 1\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..208d75f 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5142,8 +5142,47 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         pizza.toppings.add(topping)\n         response = self.client.get(reverse('admin:admin_views_topping_add'))\n         self.assertEqual(response.status_code, 200)\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields on default admin site generate correct URL.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter Default',\n+            content='content',\n+            book=Book.objects.create(name='Default Book'),\n+        )\n+        lang = Language.objects.create(iso='_default', name='Default Lang')\n+        response = self.client.get(reverse('admin:admin_views_language_change', args=(lang.pk,)))\n+        language_url = reverse('admin:admin_views_language_change', args=(quote(lang.pk),))\n+        self.assertContains(\n+            response,\n+            f'<div class=\"readonly\"><a href=\"{language_url}\">_default</a></div>',\n+            html=True,\n+        )\n+        self.assertContains(response, '<div class=\"readonly\">Chapter Default</div>', html=True)\n \n-    def test_readonly_manytomany_forwards_ref(self):\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields on custom admin site generate correct URL.\n+        \"\"\"\n+        custom_site = admin.AdminSite(name='custom_admin')\n+        chapter = Chapter.objects.create(\n+            title='Chapter Custom',\n+            content='content',\n+            book=Book.objects.create(name='Custom Book'),\n+        )\n+        lang = Language.objects.create(iso='_custom', name='Custom Lang')\n+        site2 = admin.AdminSite(name='namespaced_admin')\n+        site2.register(Language)\n+\n+        response = self.client.get(reverse('namespaced_admin:admin_views_language_change', args=(lang.pk,)))\n+        language_url = reverse('namespaced_admin:admin_views_language_change', args=(quote(lang.pk),))\n+        self.assertContains(\n+            response,\n+            f'<div class=\"readonly\"><a href=\"{language_url}\">_custom</a></div>',\n+            html=True,\n+        )\n+        self.assertContains(response, '<div class=\"readonly\">Chapter Custom</div>', html=True)\n         topping = Topping.objects.create(name='Salami')\n         pizza = Pizza.objects.create(name='Americano')\n         pizza.toppings.add(topping)\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..350b8cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..8635584 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,57 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_and_fk_noop(self):\n+        app_label = 'test_rmwdbtn_fk_noop'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Knight', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'knight'}),\n+            migrations.CreateModel('Horse', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('knight', models.ForeignKey('%s.Knight' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        \n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Knight', 'Warrior')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Test database forwards\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Test database backwards\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_sqlite(self):\n+        if connection.vendor != 'sqlite':\n+            self.skipTest(\"This test is specific to SQLite.\")\n+\n+        app_label = 'test_rmwdbtn_sqlite_noop'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Knight', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'knight'}),\n+        ])\n+        \n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Knight', 'Warrior')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Test database forwards\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Test database backwards\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..bce7249 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -152,8 +152,46 @@ class ChangeListTests(TestCase):\n         request.user = self.superuser\n         cl = ia.get_changelist_instance(request)\n         self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n+    \n+    def test_client_search_with_many_terms(self):\n+        \"\"\"\n+        Tests that searching for clients with many terms doesn't cause excessive joins.\n+        \"\"\"\n+        client = Client.objects.create(name='Acme Corporation')\n+        ClientOffice.objects.create(client=client, name='Headquarters')\n+        \n+        m = ClientAdmin(Client, custom_site)\n+        request = self.factory.get('/client/', data={SEARCH_VAR: 'acme corp headquarters ' * 10})\n+        request.user = self.superuser\n+        \n+        cl = m.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            object_count = cl.queryset.count()\n+        self.assertGreater(object_count, 0)  # Assuming there should be at least one result\n+        # Assert that there are no excessive joins\n+        max_joins = len('acme corp headquarters '.split())  # One join per distinct related model\n+        for query in context.captured_queries:\n+            self.assertTrue(query['sql'].count('JOIN') <= max_joins)\n+\n+    def test_client_search_single_term(self):\n+        \"\"\"\n+        Test that a single search term does not lead to multiple joins.\n+        \"\"\"\n+        client = Client.objects.create(name='Global Enterprises')\n+        ClientOffice.objects.create(client=client, name='Main Office')\n+        \n+        m = ClientAdmin(Client, custom_site)\n+        request = self.factory.get('/client/', data={SEARCH_VAR: 'global'})\n+        request.user = self.superuser\n+        \n+        cl = m.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            object_count = cl.queryset.count()\n+        self.assertGreater(object_count, 0)  # Assuming it should return the client\n+        # Assert a minimal number of joins\n+        self.assertTrue(any(query['sql'].count('JOIN') <= 1 for query in context.captured_queries))\n \n-    def test_result_list_empty_changelist_value(self):\n+    def test_related_field_multiple_search_terms(self):\n         \"\"\"\n         Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored\n         for relationship fields\n",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..681c2dc 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -203,8 +203,30 @@ class InspectDBTestCase(TestCase):\n             'people_unique = models.OneToOneField(InspectdbPeople, models.DO_NOTHING)',\n             output,\n         )\n+    from django.core.management import call_command\n+    from django.db import connection\n+    from django.test import TestCase, skipUnlessDBFeature\n+    from io import StringIO\n+\n+    class ForeignKeyToField(models.Model):\n+        to_field_fk = models.ForeignKey(\n+            PeopleMoreData, models.CASCADE, to_field='people_unique',\n+        )\n \n-    def test_digits_column_name_introspection(self):\n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_foreign_key_to_specific_field(self):\n+        \"\"\"\n+        Test that `inspectdb` correctly identifies foreign keys to specific fields.\n+        \"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        output = out.getvalue()\n+        \n+        # Check for correct ForeignKey field generation pointing to specific field in the referred table\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', models.CASCADE, to_field='people_unique')\",\n+            output,\n+        )\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..30cc1b0 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2833,16 +2833,88 @@ class AutodetectorTests(TestCase):\n                     MigrationAutodetector.parse_number(migration_name),\n                     expected_number,\n                 )\n+from django.test import TestCase\n+from django.db import models\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.db.migrations.autodetector import MigrationAutodetector\n \n+class CustomFKField(models.ForeignKey):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['to'] = 'testapp.HardcodedModel'\n+        super().__init__(*args, **kwargs)\n+\n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        del kwargs[\"to\"]\n+        return name, path, args, kwargs\n+\n+class TestCustomForeignKeyMigrationAutodetector(TestCase):\n+    def test_hardcoded_foreign_key(self):\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+        autodetector = MigrationAutodetector(before, after)\n+        changes = autodetector._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n \n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n+from django.test import TestCase\n+from django.db import models\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.db.migrations.autodetector import MigrationAutodetector\n+\n+class CustomFKField(models.ForeignKey):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['to'] = 'testapp.HardcodedModel'\n+        super().__init__(*args, **kwargs)\n \n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        del kwargs[\"to\"]\n+        return name, path, args, kwargs\n+\n+class TestCustomForeignKeyMigrationAutodetector(TestCase):\n+    def test_hardcoded_foreign_key(self):\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+        autodetector = MigrationAutodetector(before, after)\n+        changes = autodetector._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n         migration = Migration('some_migration', 'test_app')\n         self.assertIs(migration.suggest_name().startswith('auto_'), True)\n+from django.test import TestCase\n+from django.db import models\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.db.migrations.autodetector import MigrationAutodetector\n \n+class CustomFKField(models.ForeignKey):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['to'] = 'testapp.HardcodedModel'\n+        super().__init__(*args, **kwargs)\n+\n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        del kwargs[\"to\"]\n+        return name, path, args, kwargs\n+\n+class TestCustomForeignKeyMigrationAutodetector(TestCase):\n+    def test_hardcoded_foreign_key(self):\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+        autodetector = MigrationAutodetector(before, after)\n+        changes = autodetector._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n     def test_no_operations_initial(self):\n         class Migration(migrations.Migration):\n             initial = True\n",
  "django__django-15127": "",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..bdfbf61 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,8 +30,36 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, BaseUser, Task, Annotation\n )\n+from django.test import TestCase\n+from django.db.models import Q\n+\n+class QuerySetAliasTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Setup dummy data to recreate the issue described\n+        cls.tag = Tag.objects.create(name='test-tag')\n+        cls.annotation_1 = Annotation.objects.create(tag=cls.tag)\n+        cls.annotation_2 = Annotation.objects.create(tag=cls.tag)\n+        cls.note = cls.annotation_1.notes.create(tag=cls.tag)\n+        cls.base_user_1 = BaseUser.objects.create(annotation=cls.annotation_1)\n+        cls.base_user_2 = BaseUser.objects.create(annotation=cls.annotation_2)\n+        cls.task = Task.objects.create(\n+            owner=cls.base_user_2, creator=cls.base_user_2, note=cls.note\n+        )\n+\n+    def test_conflicting_aliases_during_combine(self):\n+        qs1 = self.annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=self.annotation_1.notes.all()) |\n+            Q(creator__note__in=self.annotation_1.notes.all())\n+        )\n+        self.assertSequenceEqual(qs1, [self.base_user_1])\n+        self.assertSequenceEqual(qs2, [self.base_user_2])\n+        # This checks the commutative property, and should not raise an AssertionError.\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [self.base_user_1, self.base_user_2])\n \n \n class Queries1Tests(TestCase):\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..d22bd0e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1755,6 +1755,13 @@ class ValueTests(TestCase):\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n \n+    def test_deconstruct_F_expression(self):\n+        f_expr = F('field_name')\n+        path, args, kwargs = f_expr.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, (f_expr.name,))\n+        self.assertEqual(kwargs, {})\n+\n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..4991ece 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,35 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_optimize_alter_foo_together(self):\n+        \"\"\"\n+        Test optimization of AlterFooTogether operations into a single operation.\n+        \"\"\"\n+        before_changes = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+        changes = self.optimize_operations(before_changes, \"otherapp\")\n+        # Ensure the operations have been optimized correctly.\n+        self.assertEqual(len(changes), 2)\n+        self.assertIsInstance(changes[0], migrations.AlterUniqueTogether)\n+        self.assertIsInstance(changes[1], migrations.AlterIndexTogether)\n+        self.assertEqual(changes[0].unique_together, {(\"col\",)})\n+        self.assertEqual(changes[1].index_together, {(\"col\",)})\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..c7aac45 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1842,7 +1842,29 @@ class ValueTests(TestCase):\n             (b'', BinaryField),\n             (uuid.uuid4(), UUIDField),\n         ]\n-        for value, output_field_type in value_types:\n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15, 0, 0),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                field.clean(value, model_instance=None)\n             with self.subTest(type=type(value)):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n",
  "django__django-15278": "",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..dd8891f 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -102,7 +102,49 @@ class BasicFieldTests(SimpleTestCase):\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n-    def test_abstract_inherited_fields(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_field_hash_stability_when_reassigned(self):\n+        \"\"\"\n+        Test to ensure that a field's hash remains the same even when\n+        reassigned to a different model attribute.\n+        \"\"\"\n+        field = models.CharField(max_length=100)\n+        original_hash = hash(field)\n+\n+        class FirstModel(models.Model):\n+            name = field\n+\n+        first_model_hash = hash(field)\n+\n+        class SecondModel(models.Model):\n+            title = field\n+\n+        second_model_hash = hash(field)\n+\n+        self.assertEqual(original_hash, first_model_hash)\n+        self.assertEqual(first_model_hash, second_model_hash)\n+\n+    def test_field_in_dict_before_and_after_assignment(self):\n+        \"\"\"\n+        Test to ensure a field can be used as a dict key before and\n+        after assignment to a model without hash alteration.\n+        \"\"\"\n+        field = models.TextField()\n+        d = {field: 'value'}\n+        self.assertIn(field, d)\n+\n+        class SomeModel(models.Model):\n+            description = field\n+\n+        self.assertIn(field, d)\n         \"\"\"Field instances from abstract models are not equal.\"\"\"\n         class AbstractModel(models.Model):\n             field = models.IntegerField()\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..41cf9aa 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -211,7 +211,21 @@ class BulkUpdateTests(TestCase):\n         Number.objects.bulk_update(numbers, ['num'])\n         self.assertCountEqual(Number.objects.filter(num=1), numbers)\n \n-    def test_booleanfield(self):\n+    def test_f_expression_with_bulk_update(self):\n+        # Create instances of the model with a known 'name' value\n+        instances = [SelfRef.objects.create(c8='', name=f'name_{i}') for i in range(10)]\n+        \n+        # Update 'c8' to be the value of 'name' using an F expression\n+        for instance in instances:\n+            instance.c8 = F('name')\n+        \n+        # Perform bulk update\n+        SelfRef.objects.bulk_update(instances, ['c8'])\n+        \n+        # Check that 'c8' has been updated to the value of 'name'\n+        for instance in instances:\n+            instance.refresh_from_db()\n+            self.assertEqual(instance.c8, instance.name)\n         individuals = [Individual.objects.create(alive=False) for _ in range(10)]\n         for individual in individuals:\n             individual.alive = True\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..6d027bb 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,7 +1049,40 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n-    def test_rename_model(self):\n+    def test_rename_model_and_field_simultaneously(self):\n+        \"\"\"Test renaming a model and a field in one go.\"\"\"\n+        original_state = [\n+            ModelState('testapp', 'MyModel', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        new_state = [\n+            ModelState('testapp', 'MyModelRenamed', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name_renamed', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        changes = self.get_changes(\n+            original_state,\n+            new_state,\n+            MigrationQuestioner({\n+                'ask_rename_model': True,\n+                'ask_rename': True,\n+            }),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0,\n+            old_name='MyModel',\n+            new_name='MyModelRenamed',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1,\n+            old_name='name',\n+            new_name='name_renamed',\n+        )\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n             [self.author_with_book, self.book],\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..c919226 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,6 +1906,41 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import Manager\n+\n+class ExistsExpressionTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.manager1 = Manager.objects.create(name='manager1')\n+        cls.manager2 = Manager.objects.create(name='manager2')\n+\n+    def test_exists_with_non_empty_queryset(self):\n+        # Test Exists with a non-empty queryset.\n+        subquery = Manager.objects.filter(name='manager1')\n+        qs = Manager.objects.filter(Exists(subquery) & Q(name='manager1'))\n+        self.assertSequenceEqual(qs, [self.manager1])\n+\n+    def test_negated_exists_with_non_empty_queryset(self):\n+        # Test negated Exists with a non-empty queryset.\n+        subquery = Manager.objects.filter(name='manager1')\n+        qs = Manager.objects.filter(~Exists(subquery) & Q(name='manager2'))\n+        self.assertSequenceEqual(qs, [self.manager2])\n+\n+    def test_exists_with_empty_queryset(self):\n+        # Test Exists with an empty queryset.\n+        subquery = Manager.objects.none()\n+        qs = Manager.objects.filter(Exists(subquery))\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_negated_exists_with_empty_queryset(self):\n+        # Test negated Exists with an empty queryset.\n+        subquery = Manager.objects.none()\n+        qs = Manager.objects.filter(~Exists(subquery))\n+        # This should return all objects because NOT EXISTS of an empty subquery is always true\n+        self.assertSequenceEqual(qs, [self.manager1, self.manager2])\n+\n class FieldTransformTests(TestCase):\n \n     @classmethod\n",
  "django__django-15467": "",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..d49f693 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,84 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_model_and_alter_managers_with_existing_options(self):\n+        # Test for CreateModel + AlterModelManagers with existing model options \n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    options={\"verbose_name\": \"Bar Model\"},\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"main_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    options={\"verbose_name\": \"Bar Model\"},\n+                    managers=[\n+                        (\"main_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_and_alter_managers_with_no_fields(self):\n+        # Test for CreateModel + AlterModelManagers with no initial fields\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[(\"default_manager\", models.Manager())],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[(\"default_manager\", models.Manager())],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_and_alter_managers_with_multiple_managers(self):\n+        # Test for CreateModel + AlterModelManagers with multiple managers\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[\n+                        (\"manager1\", models.Manager()),\n+                        (\"manager2\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[],\n+                    managers=[\n+                        (\"manager1\", models.Manager()),\n+                        (\"manager2\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n",
  "django__django-15525": "",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..be4d508 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3960,8 +3960,24 @@ class SchemaTests(TransactionTestCase):\n             editor.alter_field(Book, old_field, new_field, strict=True)\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n-\n-    def test_add_textfield_unhashable_default(self):\n+    def test_alter_field_choices_noop_different_field(self):\n+        # Create the table\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Book)\n+        old_field = Book._meta.get_field(\"title\")\n+        new_field = CharField(\n+            choices=((\"Adventure\", \"Adventure\"), (\"Science Fiction\", \"Science Fiction\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"title\")\n+        \n+        # Test altering field choices generates no SQL on SQLite\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, old_field, new_field, strict=True)\n+        \n+        # Revert the field change\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, new_field, old_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..4fb7922 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -312,7 +312,18 @@ class LookupTests(TestCase):\n         with register_lookup(models.Field, Exactly):\n             self.assertIsNone(field.get_lookup(\"exactly\"))\n \n-    def test_lookups_caching(self):\n+    def test_lookup_unregister_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register and confirm lookup is present\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+        \n+        # Unregister the lookup\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        \n+        # Confirm the cache is cleared and the lookup is no longer present\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n         field = Article._meta.get_field(\"author\")\n \n         # clear and re-cache\n",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..01b71f3 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -76,7 +76,43 @@ class TemplateReloadTests(SimpleTestCase):\n             },\n         )\n \n-    @mock.patch(\"django.template.loaders.base.Loader.reset\")\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_path(self):\n+        self.assertEqual(autoreload.get_template_directories(), set())\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", \"/some/valid/path\", None],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_mixed_none_and_empty_path(self):\n+        self.assertSetEqual(\n+            autoreload.get_template_directories(),\n+            {\n+                Path.cwd() / \"/some/valid/path\",\n+            },\n+        )\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", \"//\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_double_slash_path(self):\n+        self.assertEqual(autoreload.get_template_directories(), set())\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n",
  "django__django-15731": "",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..89ce0f9 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,8 +1,10 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n-from django.utils import timezone, translation\n+from django.utils import timezone, translation, formats\n+from django.utils.translation import gettext_lazy\n \n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n@@ -67,6 +69,11 @@ class DateTests(TimezoneTestCase):\n         output = self.engine.render_to_string(\"date08\", {\"t\": time(0, 1)})\n         self.assertEqual(output, \"00:01\")\n \n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n+\n     @setup({\"date09\": '{{ t|date:\"H:i\" }}'})\n     def test_date09(self):\n         output = self.engine.render_to_string(\"date09\", {\"t\": time(0, 0)})\n@@ -77,6 +84,11 @@ class FunctionTests(SimpleTestCase):\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n+    def test_get_format_with_lazy_string(self):\n+        # Ensure `get_format` can handle a lazy translation string for date format.\n+        lazy_date_format = gettext_lazy(\"DATE_FORMAT\")\n+        self.assertEqual(formats.get_format(lazy_date_format), \"N j, Y\")\n+\n     def test_no_args(self):\n         self.assertEqual(date(\"\"), \"\")\n         self.assertEqual(date(None), \"\")\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..f6f24a8 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,7 +399,34 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n+from django.test import TestCase, override_settings\n+from django.db import models\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class QuerySetTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.custom_instance = ProxyCustomModel.objects.create(name=\"Example\")\n+        cls.another_instance = AnotherModel.objects.create(custom=cls.custom_instance)\n+\n+    def test_select_related_only_on_proxy_model(self):\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        objs = list(qs.all())  # Force evaluation of the QuerySet\n+        self.assertEqual(objs[0].custom.name, \"Example\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..a15ed94 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_with_query(self):\n+        # Test that additional parameters (like -c option) are placed before dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+    \n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..b820458 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -74,6 +74,39 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n+    def test_decimal_precision(self):\n+        # Test case to ensure precision is maintained for Decimal numbers.\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\"\n+        )\n+\n+    def test_zero_integer(self):\n+        # Testing if zero integer part is handled correctly with Decimal.\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.12345678901234567890123\"), 23),\n+            \"0.12345678901234567890123\"\n+        )\n+\n+    def test_positive_and_negative(self):\n+        # Testing both positive and negative Decimal numbers.\n+        self.assertEqual(\n+            floatformat(Decimal(\"-123456.123456789012345678901\"), 21),\n+            \"-123456.123456789012345678901\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"123\"), 0),\n+            \"123\"\n+        )\n+\n+    def test_float_conversion(self):\n+        # Ensure normal floats are handled correctly (also tests fallback to float).\n+        self.assertEqual(floatformat(1.234567890123456, 15), \"1.234567890123456\")\n+\n     def test_force_grouping(self):\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..d333aeb 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -415,6 +415,16 @@ class CaseExpressionTests(TestCase):\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n+    def test_annotate_with_negated_empty_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_combined_expression(self):\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..7f90991 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -556,7 +557,27 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_default_fixture_path_as_pathlib(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS cannot contain a default fixtures directory\n+        for application (app/fixtures) in order to avoid repeated fixture loading.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures_1\", Path(_cur_dir) / \"fixtures_2\"])\n+    def test_loaddata_with_valid_fixture_dirs_using_pathlib(self):\n+        management.call_command(\n+            \"loaddata\",\n+            \"absolute.json\",\n+            verbosity=0,\n+        )\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..29638e8 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,30 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..da9d863 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n@@ -2427,6 +2427,7 @@ class CombinedExpressionTests(SimpleTestCase):\n                         connector,\n                         Expression(rhs()),\n                     )\n+                    # Here we would assert the output field is of type combined\n                     self.assertIsInstance(expr.output_field, combined)\n \n     def test_resolve_output_field_with_null(self):\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..f1189c5 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,6 +404,54 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Assumes Swallow is a model with fields origin, load, and speed.\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n     def test_custom_paginator(self):\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..db42e0b 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2379,7 +2379,29 @@ class MakeMigrationsTests(MigrationTestBase):\n             )\n             self.assertIn(\"operations=[]\" if HAS_BLACK else \"operations=[\\n]\", content)\n \n-    def test_makemigrations_with_invalid_custom_name(self):\n+    def test_makemigrations_check_no_dry_run(self):\n+        \"\"\"\n+        makemigrations --check without --dry-run should exit without creating\n+        any migration files and exit with status 1 when there are changes.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            self.assertFalse(os.path.exists(tmpdir))\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Verify that no migration files were created\n+            self.assertFalse(os.listdir(tmpdir))\n+\n+    def test_makemigrations_check_with_dry_run(self):\n+        \"\"\"\n+        makemigrations --check with --dry-run should exit without creating\n+        any migration files and exit with status 1 when there are changes.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            self.assertFalse(os.path.exists(tmpdir))\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\", verbosity=0)\n+            # Verify that no migration files were created\n+            self.assertFalse(os.listdir(tmpdir))\n         msg = \"The migration name must be a valid Python identifier.\"\n         with self.assertRaisesMessage(CommandError, msg):\n             call_command(\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..14a99e7 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,8 +7,8 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import SimpleTestCase, RequestFactory\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n@@ -119,6 +120,48 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n+    def test_http_method_not_allowed_responds_correctly(self):\n+        \"\"\"\n+        Ensure that HttpResponseNotAllowed works correctly \n+        with async and sync view methods.\n+        \"\"\"\n+        class SyncView(View):\n+            def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        class AsyncView(View):\n+            async def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.options(None)\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponse)\n+\n     def test_base_view_class_is_sync(self):\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..fe35069 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,6 +1,8 @@\n+\n import datetime\n import re\n-from unittest import mock\n+import urllib.parse\n+from django.urls import reverse\n \n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm,\n",
  "django__django-16145": "",
  "django__django-16255": "",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..58501af 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -63,6 +63,10 @@ class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class TwoFields(models.Model):\n     f1 = models.IntegerField(unique=True)\n     f2 = models.IntegerField(unique=True)\n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..60c8cd4 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,7 +254,59 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_saves_multiple_many_to_many_fields(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization1, organization2])\n+\n+    def test_custom_form_invalid_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [\"nonexistent-id\"],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), False)\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..d10c213 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -236,7 +237,19 @@ class TimesinceTests(TestCase):\n             with self.subTest():\n                 self.assertEqual(timesince(t, value), expected)\n \n-    def test_depth_invalid(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_awareness(self):\n+        now = timezone.now()\n+        d_aware = now - datetime.timedelta(days=31)\n+        d_naive = datetime.datetime.now() - datetime.timedelta(days=31)\n+\n+        # Ensure there is no TypeError when using aware datetime\n+        self.assertEqual(timesince(d_aware), \"1\\xa0month\")\n+\n+        # Ensure a TypeError is raised when using naive datetime in USE_TZ context\n+        with self.assertRaises(TypeError):\n+            timesince(d_naive)\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             timesince(self.t, self.t, depth=0)\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..27d0c21 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -468,6 +468,49 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), \"Set foo\")\n \n+from django.core.management.base import BaseCommand\n+import argparse\n+\n+class SubparserTests(SimpleTestCase):\n+    def test_missing_subparser_argument(self):\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(parser_class=argparse.ArgumentParser)\n+                parser_create = subparsers.add_parser('create')\n+                parser_create.add_argument('name')\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"cheeses\", \"create\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py cheeses create: error: the following arguments are required: name\",\n+        )\n+\n+    def test_invalid_type_in_subparser_argument(self):\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(parser_class=argparse.ArgumentParser)\n+                parser_add = subparsers.add_parser('add')\n+                parser_add.add_argument('count', type=int)\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"cheeses\", \"add\", \"ten\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py cheeses add: error: argument count: invalid int value: 'ten'\",\n+        )\n \n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..cc245f9 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -112,6 +112,20 @@ class FunctionTests(SimpleTestCase):\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n \n+    def test_zero_decimal_string(self):\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+        self.assertEqual(floatformat(\"0.000\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.000\"), 0), \"0\")\n+\n+    def test_small_decimal_values(self):\n+        self.assertEqual(floatformat(\"0.00001\", 5), \"0.00001\")\n+        self.assertEqual(floatformat(Decimal(\"0.00001\"), 5), \"0.00001\")\n+        self.assertEqual(floatformat(\"0.00009\", 4), \"0.0001\")\n+        self.assertEqual(floatformat(Decimal(\"0.00009\"), 4), \"0.0001\")\n+        self.assertEqual(floatformat(\"0.000004\", 6), \"0.000004\")\n+        self.assertEqual(floatformat(Decimal(\"0.000004\"), 6), \"0.000004\")\n+\n     def test_negative_zero_values(self):\n         tests = [\n             (-0.01, -1, \"0.0\"),\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..f528f21 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -93,6 +93,13 @@ class GetStorageClassTests(SimpleTestCase):\n \n class FileSystemStorageTests(unittest.TestCase):\n     def test_deconstruction(self):\n+        \"\"\"\n+        Deconstructing gives the original callable, not the evaluated value.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n         path, args, kwargs = temp_storage.deconstruct()\n         self.assertEqual(path, \"django.core.files.storage.FileSystemStorage\")\n         self.assertEqual(args, ())\n@@ -1010,6 +1017,13 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         self.assertIsInstance(obj.storage_callable_class.storage, BaseStorage)\n \n     def test_deconstruction(self):\n+        \"\"\"\n+        Deconstructing gives the original callable, not the evaluated value.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n         \"\"\"\n         Deconstructing gives the original callable, not the evaluated value.\n         \"\"\"\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..3d30116 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -8,7 +9,9 @@ from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n+from django.contrib.auth import get_permission_codename\n from .admin import ArticleAdmin, site\n+from .tests import get_perm\n from .models import Article, Question\n from .tests import AdminViewBasicTestCase\n \n@@ -33,7 +36,40 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is only True if the user has both the 'add' and 'change' permissions.\n+        \"\"\"\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16560": "",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..0eb7545 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1470,7 +1470,28 @@ class FormsFormsetTestCase(SimpleTestCase):\n             can_delete_extra=False,\n             extra=2,\n         )\n-        formset = ChoiceFormFormset()\n+from django import forms\n+from django.test import SimpleTestCase\n+\n+class MyForm(forms.Form):\n+    my_field = forms.CharField()\n+\n+class FormsetAddFieldsTest(SimpleTestCase):\n+    def test_add_fields_with_none_index(self):\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        formset = MyFormSet(initial=None)\n+        empty_form = formset.empty_form\n+        self.assertNotIn(\"DELETE\", empty_form.fields)\n+\n+        formset_with_initial = MyFormSet(\n+            initial=[{\"my_field\": \"value\"}]\n+        )\n+        empty_form_with_initial = formset_with_initial.empty_form\n+        self.assertNotIn(\"DELETE\", empty_form_with_initial.fields)\n         self.assertEqual(len(formset), 2)\n         self.assertNotIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..5fc230d 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8455,16 +8455,151 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             password=\"secret\",\n             email=\"staff@example.com\",\n             is_staff=True,\n+        )    \n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1&next=/home\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&next=/home\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_non_staff(self):\n+        user = User.objects.create_user(\n+            username=\"testuser\",\n+            password=\"password\",\n+            email=\"testuser@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/admin/login/?next=/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n         )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(\n             response, known_url, status_code=301, target_status_code=403\n+        )    \n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1&next=/home\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&next=/home\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_non_staff(self):\n+        user = User.objects.create_user(\n+            username=\"testuser\",\n+            password=\"password\",\n+            email=\"testuser@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/admin/login/?next=/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n         )\n \n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_script_name(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )    \n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_multiple_query_params(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8473,12 +8608,93 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1&next=/home\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&next=/home\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_non_staff(self):\n+        user = User.objects.create_user(\n+            username=\"testuser\",\n+            password=\"password\",\n+            email=\"testuser@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/admin/login/?next=/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n         self.assertRedirects(\n             response,\n             \"/prefix\" + known_url,\n             status_code=301,\n             fetch_redirect_response=False,\n+        )    \n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1&next=/home\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&next=/home\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_non_staff(self):\n+        user = User.objects.create_user(\n+            username=\"testuser\",\n+            password=\"password\",\n+            email=\"testuser@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/admin/login/?next=/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n         )\n \n     @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n@@ -8488,6 +8704,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             password=\"secret\",\n             email=\"staff@example.com\",\n             is_staff=True,\n+        )    \n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1&next=/home\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&next=/home\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_non_staff(self):\n+        user = User.objects.create_user(\n+            username=\"testuser\",\n+            password=\"password\",\n+            email=\"testuser@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/admin/login/?next=/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n         )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n@@ -8497,6 +8767,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             \"/prefix\" + known_url,\n             status_code=301,\n             fetch_redirect_response=False,\n+        )    \n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1&next=/home\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&next=/home\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_non_staff(self):\n+        user = User.objects.create_user(\n+            username=\"testuser\",\n+            password=\"password\",\n+            email=\"testuser@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/admin/login/?next=/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n         )\n \n     @override_settings(APPEND_SLASH=True)\n@@ -8506,6 +8830,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             password=\"secret\",\n             email=\"user@example.com\",\n             is_staff=False,\n+        )    \n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1&next=/home\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&next=/home\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_non_staff(self):\n+        user = User.objects.create_user(\n+            username=\"testuser\",\n+            password=\"password\",\n+            email=\"testuser@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/admin/login/?next=/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n         )\n         self.client.force_login(user)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n@@ -8616,6 +8994,33 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n \n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )    \n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_multiple_query_params(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8623,10 +9028,91 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             is_staff=True,\n         )\n         self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1&next=/home\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&next=/home\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_non_staff(self):\n+        user = User.objects.create_user(\n+            username=\"testuser\",\n+            password=\"password\",\n+            email=\"testuser@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/admin/login/?next=/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+        self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(\n             response, known_url, status_code=301, target_status_code=403\n+        )    \n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1&next=/home\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&next=/home\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_non_staff(self):\n+        user = User.objects.create_user(\n+            username=\"testuser\",\n+            password=\"password\",\n+            email=\"testuser@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/admin/login/?next=/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n         )\n \n     @override_settings(APPEND_SLASH=False)\n@@ -8636,6 +9122,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             password=\"secret\",\n             email=\"staff@example.com\",\n             is_staff=True,\n+        )    \n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_redirects_with_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1&next=/home\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1&next=/home\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_non_staff(self):\n+        user = User.objects.create_user(\n+            username=\"testuser\",\n+            password=\"password\",\n+            email=\"testuser@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/admin/login/?next=/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n         )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..2ec7e7e 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,16 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_tuples_additional = [\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        ]\n+        for extension, mimetype in test_tuples_additional:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..1525c31 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,46 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps('modeladmin')\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n+        # Additional test cases covering various lookup paths\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name__icontains\", \"test\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name__startswith\", \"test\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__lte\", \"5\"), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..cec1321 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,68 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_correct_import_ordering(self):\n+        \"\"\"\n+        Test that generated migrations have correctly ordered imports according\n+        to the Django coding style, which aligns with isort defaults.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield1\",\n+                        models.IntegerField(),\n+                    ),\n+                    migrations.RunPython(\n+                        code=lambda x, y: None,\n+                        reverse_code=lambda x, y: None,\n+                    ),\n+                ],\n+                \"dependencies\": [\n+                    (\"myapp\", \"0001_initial\"),\n+                ],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Ensure imports are correctly ordered\n+        self.assertIn(\n+            \"import datetime\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n+\n+    def test_imports_with_multiple_import_statements(self):\n+        \"\"\"\n+        Test that imports from different packages are sorted correctly.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ],\n+                \"dependencies\": [\n+                    (\"myapp\", \"0002_auto\"),\n+                ],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Check that 'import time' comes before 'from django.db import ...'\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..023e860 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1157,4 +1157,66 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n+\n+    def test_add_index_only(self):\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\", \"speed\"], name=\"idx_pony_height_speed\"\n+                    ),\n+                ),\n+            ]\n+        )\n+\n+    def test_remove_index_only(self):\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height_speed\"),\n+            ]\n+        )\n+\n+    def test_add_remove_different_index(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\", \"speed\"], name=\"idx_pony_height_speed\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+            ],\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\", \"speed\"], name=\"idx_pony_height_speed\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+            ],\n+        )\n+\n+    def test_multiple_add_remove_index(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\", \"speed\"], name=\"idx_pony_height_speed\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height_speed\"),\n+            ],\n+            [],\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..6d5379e 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -805,6 +805,21 @@ class SystemChecksTestCase(SimpleTestCase):\n             )\n         ]\n         self.assertEqual(errors, expected)\n+    \n+    def test_readonly_fields_includes_field_name(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = [\"i_dont_exist\"]\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n \n     def test_nonexistent_field_on_inline(self):\n         class CityInline(admin.TabularInline):\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..3b6b25e 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -60,8 +61,17 @@ class XorLookupsTests(TestCase):\n             self.numbers[:2],\n         )\n \n-    def test_empty_in(self):\n+    def test_multiple_xor_conditions(self):\n+        # This test checks if a ^ b ^ c ^ d ^ e returns results where the number\n+        # of true conditions is odd.\n+        qs = Number.objects.filter(\n+            Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7) ^ Q(num__gte=9)\n+        )\n+        expected_numbers = [\n+            i for i in range(10) if (i >= 1) ^ (i >= 3) ^ (i >= 5) ^ (i >= 7) ^ (i >= 9)\n+        ]\n+        self.assertCountEqual(qs.values_list(\"num\", flat=True), expected_numbers)\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..48fb541 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -588,7 +588,25 @@ class MakeMigrationsTests(MigrationTestBase):\n     def test_makemigrations_empty_connections(self):\n         empty_connections = ConnectionHandler({'default': {}})\n         with mock.patch('django.core.management.commands.makemigrations.connections', new=empty_connections):\n-            # with no apps\n+            # Test to ensure makemigrations calls allow_migrate() with the correct app_label and model_name pairs\n+            def test_makemigrations_calls_allow_migrate_correctly(self):\n+                with mock.patch.object(TestRouter, 'allow_migrate', return_value=True) as allow_migrate:\n+                    with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+                        call_command('makemigrations', 'migrations', verbosity=0)\n+\n+                # Check that allow_migrate was called with valid app_label, model_name pairs\n+                invalid_calls = []\n+                for call in allow_migrate.mock_calls:\n+                    args, kwargs = call\n+                    app_label, app_name = args[:2]\n+                    model_name = kwargs['model_name']\n+                    try:\n+                        # This will raise LookupError if the model doesn't exist\n+                        apps.get_app_config(app_label).get_model(model_name)\n+                    except LookupError:\n+                        invalid_calls.append((app_label, model_name))\n+                \n+                self.assertEqual(invalid_calls, [], f\"Invalid allow_migrate calls: {invalid_calls}\")\n             out = six.StringIO()\n             call_command('makemigrations', stdout=out)\n             self.assertIn('No changes detected', out.getvalue())\n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..6b5fe6b 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,6 +297,35 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_full_iteration(self):\n+        paginator = Paginator([1, 2, 3, 4, 5, 6], 2)\n+        expected_pages = [[1, 2], [3, 4], [5, 6]]\n+        actual_pages = [list(page) for page in paginator]\n+        self.assertEqual(expected_pages, actual_pages)\n+\n+    def test_paginator_empty_list_iteration(self):\n+        paginator = Paginator([], 2)\n+        actual_pages = [list(page) for page in paginator]\n+        self.assertEqual([], actual_pages)\n+\n+    def test_paginator_single_page_iteration(self):\n+        paginator = Paginator([1], 5)\n+        expected_pages = [[1]]\n+        actual_pages = [list(page) for page in paginator]\n+        self.assertEqual(expected_pages, actual_pages)\n+\n+    def test_paginator_chunk_bigger_than_list(self):\n+        paginator = Paginator([1, 2], 5)\n+        expected_pages = [[1, 2]]\n+        actual_pages = [list(page) for page in paginator]\n+        self.assertEqual(expected_pages, actual_pages)\n \n class ModelPaginationTests(TestCase):\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..0c39abd 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,26 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n-\n-    data = [1, 2, 3]\n+    def test_hist_range_and_density():\n+        np.random.seed(0)  # For reproducibility\n+        _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+        assert bins[0] == 0\n+        assert bins[-1] == 1\n+\n+        # Test with different range\n+        _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0.2, 0.8), density=True)\n+        assert bins[0] == 0.2\n+        assert bins[-1] == 0.8\n+\n+        # Test with static bin count\n+        _, bins, _ = plt.hist(np.random.rand(10), bins=5, range=(0, 1), density=True)\n+        assert bins[0] == 0\n+        assert bins[-1] == 1\n+\n+        # Test without density, should default to frequency\n+        _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1))\n+        assert bins[0] == 0\n+        assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6386,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..6119004 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,23 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    # Test to verify ax.clear() behavior with shared axes\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without clearing axes\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure with clearing axes\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..9268907 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,18 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_no_warning_on_empty_data():\n+    \"\"\"\n+    Test to ensure no deprecation warning on empty data with category units.\n+    \"\"\"\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        \n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+        \n+        # Check that no warnings were raised\n+        assert not any(item.category == MatplotlibDeprecationWarning for item in w)\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..14c8bf3 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -918,8 +918,41 @@ def test_proportional_colorbars():\n                                      extend=extends[i])\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n \n-def test_negative_boundarynorm():\n+@pytest.mark.parametrize(\"extend, coloroffset, res\", [\n+    ('both', 1, [\n+        np.array([[0., 0.], [0., 1.]]),\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]])\n+    ]),\n+    ('min', 0, [\n+        np.array([[0., 0.], [0., 1.]]),\n+        np.array([[1., 0.], [1., 1.]])\n+    ]),\n+    ('max', 0, [\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]])\n+    ]),\n+    ('neither', -1, [\n+        np.array([[1., 0.], [1., 1.]])\n+    ])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, res):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), res))\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n \n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..c52efd7 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,9 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..e39607e 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -12,7 +12,7 @@ from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n-\n+from matplotlib.testing.decorators import check_figures_equal\n import matplotlib.pyplot as plt\n import numpy as np\n \n@@ -20,8 +20,15 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n-\n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(projection='3d')\n+    ax2 = fig_ref.add_subplot(projection='3d')\n+    ax1.set_visible(False)\n+    ax2.set_visible(False)\n+    # Neither subplot should be visible in their respective figures.\n+    ax1.scatter(1, 1, 1, c='b')\n+    ax2.scatter(1, 1, 1, c='b')\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..4b1f0f1 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -139,7 +139,29 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_ref = Rectangle(loc, width, height, angle=angle)\n     ax_ref.add_patch(rect_ref)\n     assert rect_ref.get_angle() == angle\n+import matplotlib.pyplot as plt\n+import matplotlib.patches as mpatches\n+from matplotlib.testing.decorators import check_figures_equal\n \n+@check_figures_equal(extensions=['png'])\n+def test_patch_dash_offset():\n+    fig_test, fig_ref = plt.figure(), plt.figure()\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+    \n+    # Create rectangles with and without offsets\n+    rect_no_offset = mpatches.Rectangle((0.1, 0.1), 0.6, 0.6, linewidth=3, edgecolor='b', linestyle=(0, (6, 6)))\n+    rect_with_offset = mpatches.Rectangle((0.1, 0.1), 0.6, 0.6, linewidth=3, edgecolor='r', linestyle=(6, (6, 6)))\n+    \n+    assert rect_no_offset.get_linestyle() == (0, (6, 6))\n+    assert rect_with_offset.get_linestyle() == (6, (6, 6))\n+    \n+    ax_test.add_patch(rect_no_offset)\n+    ax_test.add_patch(rect_with_offset)\n+    \n+    # Reference to expected behavior with Line2D\n+    ax_ref.plot(range(10), ls=(0, (6, 6)), color='b', linewidth=3)\n+    ax_ref.plot(range(10), ls=(6, (6, 6)), color='r', linewidth=3)\n     # Check that when the angle is updated after adding to an Axes, that the\n     # patch is marked stale and redrawn in the correct location\n     rect_test = Rectangle(loc, width, height)\n@@ -147,7 +169,29 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     ax_test.add_patch(rect_test)\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n+import matplotlib.pyplot as plt\n+import matplotlib.patches as mpatches\n+from matplotlib.testing.decorators import check_figures_equal\n \n+@check_figures_equal(extensions=['png'])\n+def test_patch_dash_offset():\n+    fig_test, fig_ref = plt.figure(), plt.figure()\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+    \n+    # Create rectangles with and without offsets\n+    rect_no_offset = mpatches.Rectangle((0.1, 0.1), 0.6, 0.6, linewidth=3, edgecolor='b', linestyle=(0, (6, 6)))\n+    rect_with_offset = mpatches.Rectangle((0.1, 0.1), 0.6, 0.6, linewidth=3, edgecolor='r', linestyle=(6, (6, 6)))\n+    \n+    assert rect_no_offset.get_linestyle() == (0, (6, 6))\n+    assert rect_with_offset.get_linestyle() == (6, (6, 6))\n+    \n+    ax_test.add_patch(rect_no_offset)\n+    ax_test.add_patch(rect_with_offset)\n+    \n+    # Reference to expected behavior with Line2D\n+    ax_ref.plot(range(10), ls=(0, (6, 6)), color='b', linewidth=3)\n+    ax_ref.plot(range(10), ls=(6, (6, 6)), color='r', linewidth=3)\n \n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n@@ -155,7 +199,29 @@ def test_negative_rect():\n     pos_vertices = Rectangle((-3, -2), 3, 2).get_verts()[:-1]\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n+import matplotlib.pyplot as plt\n+import matplotlib.patches as mpatches\n+from matplotlib.testing.decorators import check_figures_equal\n \n+@check_figures_equal(extensions=['png'])\n+def test_patch_dash_offset():\n+    fig_test, fig_ref = plt.figure(), plt.figure()\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+    \n+    # Create rectangles with and without offsets\n+    rect_no_offset = mpatches.Rectangle((0.1, 0.1), 0.6, 0.6, linewidth=3, edgecolor='b', linestyle=(0, (6, 6)))\n+    rect_with_offset = mpatches.Rectangle((0.1, 0.1), 0.6, 0.6, linewidth=3, edgecolor='r', linestyle=(6, (6, 6)))\n+    \n+    assert rect_no_offset.get_linestyle() == (0, (6, 6))\n+    assert rect_with_offset.get_linestyle() == (6, (6, 6))\n+    \n+    ax_test.add_patch(rect_no_offset)\n+    ax_test.add_patch(rect_with_offset)\n+    \n+    # Reference to expected behavior with Line2D\n+    ax_ref.plot(range(10), ls=(0, (6, 6)), color='b', linewidth=3)\n+    ax_ref.plot(range(10), ls=(6, (6, 6)), color='r', linewidth=3)\n \n @image_comparison(['clip_to_bbox'])\n def test_clip_to_bbox():\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..84d6b60 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,22 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-\n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+\n+def test_stackplot_does_not_change_axes_cycler():\n+    # Test that stackplot with color cycler 'C' does not throw an error\n+    # and does not change the global Axes cycler.\n+    fig, ax = plt.subplots()\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    initial_cycle = ax._get_lines.prop_cycler\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+    \n+    # Verify no ValueError is raised and the cycler remains unchanged\n+    assert initial_cycle == ax._get_lines.prop_cycler\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..8ee8eba 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,22 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+import matplotlib.colors as mcolors\n+import matplotlib as mpl\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_no_deprecation_warning(dtype):\n+    # Mimic the original issue's scenario using the colormap\n+    cm = plt.get_cmap(\"viridis\")\n+    with pytest.warns(None) as record:\n+        cm(np.empty((0, ), dtype=dtype))\n+    # Ensure no warnings are raised\n+    assert len(record) == 0\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..b6cad4b 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -580,8 +580,38 @@ class TestSpectral:\n         # these should not be almost equal\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n+    def test_psd_window_flattop(self):\n+        # Test the power spectral density with a flattop window\n+        if self.NFFT_density is None:\n+            return\n+        ydata = np.random.randn(self.NFFT_density)\n+        flattop_window = np.ones(self.NFFT_density_real)\n+        flattop_window *= signal.windows.flattop(self.NFFT_density_real) \n+        \n+        # Using PSD with a flattop window\n+        spec, fsp = mlab.psd(x=ydata,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=flattop_window,\n+                             scale_by_freq=True)\n+        \n+        # Calculate expected correction factor\n+        window_correction = (flattop_window**2).sum()\n+\n+        # Now calculate PSD manually and compare\n+        spec_corrected, fsp_corrected = mlab.psd(x=ydata,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=flattop_window,\n+                             scale_by_freq=False)\n+        spec_corrected *= self.Fs / window_correction\n \n-    def test_psd_window_hanning(self):\n+        # Assert that the spectrum with the correction matches the expected result\n+        assert_allclose(spec * window_correction, spec_corrected * self.Fs, atol=1e-08)\n         if self.NFFT_density is None:\n             return\n         ydata = np.arange(self.NFFT_density)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..bd65ae6 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,7 +7801,36 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n-def test_ytickcolor_is_not_yticklabelcolor():\n+def test_xaxis_offsetText_with_labelcolor():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    # Force a scientific notation offset\n+    ax.set_xlim(1.01e9, 1.03e9)\n+    ax.plot([1.02e9])\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.set_xlim(1.01e9, 1.03e9)\n+    ax.plot([1.02e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_with_labelcolor():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    # Force a scientific notation offset\n+    ax.set_ylim(1.01e9, 1.03e9)\n+    ax.plot([1.02e9])\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.set_ylim(1.01e9, 1.03e9)\n+    ax.plot([1.02e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n     ax = plt.axes()\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..5a3cd84 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,26 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_draggable_legend_pickle():\n+    # Create a simple plot with a draggable legend\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 4], label='Test Line')\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+    \n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure that the pickled data does not mention 'FigureCanvasAgg'\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Unpickle and verify the figure\n+    loaded_fig = pickle.loads(pkl)\n+    assert loaded_fig is not None\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..2e7b6ce 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,8 +43,42 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+def test_pickle_figure_with_aligned_labels():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n+\n+    # Create a figure with two subplots\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+\n+    # Plot some data\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    except Exception as e:\n+        assert False, f\"Pickling failed with exception: {e}\"\n+\n+    # Unpickle the figure and ensure it does not raise any errors\n+    try:\n+        loaded_fig = pickle.loads(pickle_data)\n+        loaded_fig.canvas.draw()  # Ensure the canvas can be drawn without issues\n+    except Exception as e:\n+        assert False, f\"Unpickling failed with exception: {e}\"\n \n-def _generate_complete_test_figure(fig_ref):\n+    plt.close('all')\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..9a8ceef 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -998,8 +998,44 @@ def test_hexbin_log_clim():\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n     assert h.get_clim() == (2, 100)\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_inverted_limits():\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # Example data points\n+    datapoints = [\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Hexbin without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # Hexbin with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n     # while still maintaining the inverted direction\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..74db682 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,38 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_with_transform(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    z = np.array([[0, 1], [2, 3]])\n+    cs_test = ax_test.contour(z)\n+    paths = cs_test.get_paths()\n+    \n+    # Apply a trivial transformation: flip the paths\n+    transformed_paths = [Path(p.vertices[::-1]) for p in paths]\n+    cs_ref = ax_ref.contour(z)\n+    cs_ref.set_paths(transformed_paths)\n+    \n+    for p1, p2 in zip(cs_test.get_paths(), transformed_paths):\n+        assert np.array_equal(p1.vertices, p2.vertices[::-1]), \"Paths should be flipped\"\n+\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_identity(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    z = np.array([[0, 1], [2, 3]])\n+    cs_test = ax_test.contour(z)\n+    paths = cs_test.get_paths()\n+    \n+    # Set the same paths back\n+    cs_ref = ax_ref.contour(z)\n+    cs_ref.set_paths(paths)\n+    \n+    for p1, p2 in zip(cs_test.get_paths(), paths):\n+        assert np.array_equal(p1.vertices, p2.vertices), \"Paths should remain unchanged\"\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..68ac7f7 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,7 +244,14 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n-def test_templates_list(test_apps):\n+\n+def test_invalid_none_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(None, __name__)\n+\n+def test_invalid_space_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n     from blueprintapp import app\n \n     templates = sorted(app.jinja_env.list_templates())\n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..b53b6a4 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -12,6 +12,43 @@ This module implements the Requests API.\n \"\"\"\n \n from . import sessions\n+import requests\n+import unittest\n+from requests.exceptions import RequestException\n+\n+class TestUnicodeMethodNames(unittest.TestCase):\n+    \n+    def test_post_method_with_unicode(self):\n+        files = {u'file': open('test_requests.py', 'rb')}\n+        try:\n+            r = requests.request(method=u'POST', url='http://httpbin.org/post', files=files)\n+            self.assertEqual(r.status_code, 200)\n+        except UnicodeDecodeError:\n+            self.fail(\"UnicodeDecodeError was raised for a Unicode method name\")\n+\n+    def test_get_method_with_unicode(self):\n+        try:\n+            r = requests.request(method=u'GET', url='http://httpbin.org/get')\n+            self.assertEqual(r.status_code, 200)\n+        except UnicodeDecodeError:\n+            self.fail(\"UnicodeDecodeError was raised for a Unicode method name\")\n+\n+    def test_put_method_with_unicode(self):\n+        try:\n+            r = requests.request(method=u'PUT', url='http://httpbin.org/put', data={u'key': u'value'})\n+            self.assertEqual(r.status_code, 200)\n+        except UnicodeDecodeError:\n+            self.fail(\"UnicodeDecodeError was raised for a Unicode method name\")\n+\n+    def test_delete_method_with_unicode(self):\n+        try:\n+            r = requests.request(method=u'DELETE', url='http://httpbin.org/delete')\n+            self.assertEqual(r.status_code, 200)\n+        except UnicodeDecodeError:\n+            self.fail(\"UnicodeDecodeError was raised for a Unicode method name\")\n+\n+if __name__ == '__main__':\n+    unittest.main()\n \n \n def request(method, url, **kwargs):\n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..980d1bf 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,10 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),  # Added test case for issue\n+            (InvalidURL, 'http://-example.com'),  # Edge case: invalid hostname\n+            (InvalidURL, 'http://example..com'),  # Edge case: consecutive dots\n+            (InvalidURL, 'http://example.com..'), # Edge case: trailing dot\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..5675b9f 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,22 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_no_coercion_on_values_property():\n+    import xarray as xr\n+    import numpy as np\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])\n+\n+    class HasValues(object):\n+        values = 5\n+\n+    # Assign a set to a DataArray with None, should work without coercion\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    assert isinstance(good_indexed.values[0], set), \"Expected set, got different type.\"\n+\n+    # Assign an object with a 'values' property to a DataArray with None\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+    assert isinstance(bad_indexed.values[0], HasValues), \"Expected HasValues instance, got different type.\"\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..e263bc8 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2069,7 +2069,21 @@ class TestDataset:\n \n             assert data.attrs['Test'] is not copied.attrs['Test']\n \n-    def test_copy_with_data(self):\n+    def test_copy_deep_unicode_index(self):\n+        # Regression test for: copy(deep=True) casts unicode indices to object\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+\n+        # Perform a deep copy and check dtypes of indices\n+        ds_deep_copy = ds.copy(deep=True)\n+        \n+        # Assert dtypes of index variables do not change from '<U*' to 'object'\n+        assert ds.coords['x'].dtype.kind == 'U'\n+        assert ds_deep_copy.coords['x'].dtype.kind == 'U'\n+        assert ds.coords['y'].dtype.kind == 'U'\n+        assert ds_deep_copy.coords['y'].dtype.kind == 'U'\n         orig = create_test_data()\n         new_data = {k: np.random.randn(*v.shape)\n                     for k, v in orig.data_vars.items()}\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..89844d3 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,7 +611,47 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n-    def test_check_for_impossible_ordering(self):\n+    def test_non_monotonic_identical_coords(self):\n+        # Test for the issue where non-monotonic but identical coordinate dimensions raise an error\n+        # when using combine_by_coords.\n+\n+        # Prepare datasets with identical non-monotonic y coordinates\n+        yCoord = ['a', 'c', 'b']\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], data1)\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3],\n+                y=yCoord\n+            )\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], data2)\n+            ),\n+            coords=dict(\n+                x=[4, 5, 6, 7],\n+                y=yCoord\n+            )\n+        )\n+\n+        expected = Dataset(\n+            data_vars=dict(\n+                data=(['x', 'y'], np.concatenate([data1, data2], axis=0))\n+            ),\n+            coords=dict(\n+                x=[1, 2, 3, 4, 5, 6, 7],\n+                y=yCoord\n+            )\n+        )\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n         with raises_regex(ValueError, \"does not have monotonic global indexes\"\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..a2db5bf 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,6 +2310,30 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+        from collections import OrderedDict\n+\n+        # Create a DataArray with attributes\n+        da = xr.DataArray([0, 0, 5, 5], dims=\"x\", attrs={'units': 'K', 'description': 'temperature'})\n+        \n+        # Test quantile with keep_attrs=True\n+        out = da.quantile(0.5, dim='x', keep_attrs=True)\n+        assert out.attrs == da.attrs  # Attributes should be retained\n+\n+        # Test quantile with keep_attrs=False\n+        out_no_attrs = da.quantile(0.5, dim='x', keep_attrs=False)\n+        assert out_no_attrs.attrs == {}  # Attributes should not be retained\n+\n+        # Test multiple quantiles with keep_attrs=True\n+        out_multi = da.quantile([0.25, 0.75], dim='x', keep_attrs=True)\n+        assert out_multi.attrs == da.attrs  # Attributes should be retained\n+\n+        # Check that when keep_attrs is not specified, defaults to False\n+        out_default = da.quantile(0.5, dim='x')\n+        assert out_default.attrs == {}  # Attributes should not be retained by default\n+\n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..277802e 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,15 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray_with_dataset(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Verify if the merge method works equivalently to the xr.merge function\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(expected, actual)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..3df90aa 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -607,14 +607,24 @@ def test_min_count_dataset(func):\n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n-def test_multiple_dims(dtype, dask, func):\n+def test_min_count_multiple_dims(dtype, dask, func):\n     if dask and not has_dask:\n         pytest.skip(\"requires dask\")\n+\n     da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+    min_count = 4\n \n-    actual = getattr(da, func)((\"x\", \"y\"))\n-    expected = getattr(getattr(da, func)(\"x\"), func)(\"y\")\n+    # Test reduction across two dimensions with min_count specified\n+    actual = getattr(da, func)((\"x\", \"y\"), skipna=True, min_count=min_count)\n+    expected = getattr(da, func)(dim=(\"x\", \"y\"), skipna=True, min_count=min_count)\n     assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n+\n+    # Test reduction across all dimensions with min_count specified\n+    actual_all_dims = getattr(da, func)(dim=None, skipna=True, min_count=min_count)\n+    expected_all_dims = getattr(da, func)(dim=..., skipna=True, min_count=min_count)\n+    assert_allclose(actual_all_dims, expected_all_dims)\n+    assert_dask_array(actual_all_dims, dask)\n \n \n def test_docs():\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..f458b7a 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -114,6 +114,22 @@ class TestMergeFunction:\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_no_reference(self):\n+        ds1 = xr.Dataset(attrs={\"key\": \"value1\"})\n+        ds2 = xr.Dataset(attrs={\"key\": \"value2\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"key\"] = \"new_value\"\n+        assert ds1.attrs[\"key\"] == \"value1\"\n+        assert ds3.attrs[\"key\"] == \"new_value\"\n+\n     def test_merge_dicts_dims(self):\n         actual = xr.merge([{\"y\": (\"x\", [13])}, {\"x\": [12]}])\n         expected = xr.Dataset({\"x\": [12], \"y\": (\"x\", [13])})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..3036053 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,8 +1921,19 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 2, 3], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 3], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n \n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+def test_where_dtype_preservation() -> None:\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8), attrs={\"attr_1\": \"test1\"})\n+    result = xr.where(data == 1, 5, 0, keep_attrs=True)\n+    assert result.dtype == np.int8  # Check dtype is preserved\n+    assert result.attrs[\"attr_1\"] == \"test1\"  # Check attributes are preserved\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..bcf4333 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -14,6 +14,32 @@ with suppress(ImportError):\n     import dask.array as da\n \n \n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_from_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == unsigned_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n def test_CFMaskCoder_decode():\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..aca501f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1919,6 +1919,13 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+    # Test case for issue: xr.where with scalar as second argument and keep_attrs=True\n+    # This should not raise an error.\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n \n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n@@ -1928,6 +1935,13 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+    # Test case for issue: xr.where with scalar as second argument and keep_attrs=True\n+    # This should not raise an error.\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..381ab8f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,14 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..1f9fe6d 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -49,7 +49,31 @@ class TestDataArrayRolling:\n                     expected.values[expected.values.nonzero()],\n                 )\n \n-    @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n+    @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    def test_rolling_iter_center(self, da, center) -> None:\n+        size = 3\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        # Expected labels based on centering\n+        if center:\n+            expected_labels = [da[\"time\"].values[max(0, i - size//2)] for i in range(len(da[\"time\"]))]\n+        else:\n+            expected_labels = da[\"time\"].values\n+\n+        for i, (label, window_da) in enumerate(rolling_obj):\n+            assert_array_equal(label, expected_labels[i])\n+\n+            actual = rolling_obj_mean.isel(time=i)\n+            expected = window_da.mean(\"time\")\n+\n+            assert_array_equal(actual.isnull(), expected.isnull())\n+            if (~actual.isnull()).sum() > 0:\n+                np.allclose(\n+                    actual.values[actual.values.nonzero()],\n+                    expected.values[expected.values.nonzero()],\n+                )\n     def test_rolling_repr(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..940d594 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,15 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint import Run\n+from _pytest.capture import CaptureFixture\n+from pathlib import Path\n+\n+EMPTY_MODULE = Path(\"empty_module.py\")\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..612ec56 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,7 +1233,28 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n-    def test_recursive(self):\n+    @pytest.mark.parametrize(\n+        \"ignore_parameter,ignore_parameter_value\",\n+        [\n+            (\"--ignore\", \"ignored_subdirectory\"),\n+            (\"--ignore\", \"failing.py\"),\n+            (\"--ignore-patterns\", \"failing.*\"),\n+            (\"--ignore-patterns\", \"ignored_.*\"),\n+            (\"--ignore-paths\", \".*ignored.*\"),\n+            (\"--ignore-paths\", \".*failing.*\"),\n+        ],\n+    )\n+    def test_recursive_ignore(self, ignore_parameter, ignore_parameter_value):\n+        \"\"\"Tests ignoring files and directories with recursive mode enabled.\"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                ignore_parameter,\n+                ignore_parameter_value,\n+            ],\n+            code=0,\n+        )\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n             code=0,\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..d2cb189 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,38 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_flag(self) -> None:\n+        \"\"\"Test that `--recursive=y` respects `ignore-paths` configuration.\"\"\"\n+        with _test_sys_path():\n+            # Ensure no regrtest_data in sys.path\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                \n+                # Case where ignore-path is declared\n+                self._runtest(\n+                    [\n+                        \".\", \n+                        \"--recursive=y\", \n+                        \"--ignore-paths=^ignored_subdirectory/.*\"\n+                    ],\n+                    code=0,  # Expect no issues since the path should be ignored\n+                )\n+                \n+                # Case where ignore-path does not match\n+                self._runtest(\n+                    [\n+                        \".\", \n+                        \"--recursive=y\", \n+                        \"--ignore-paths=^non_existent_path/.*\"\n+                    ],\n+                    code=32,  # Expect linting issues since the path isn't ignored\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..66d4ab8 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,10 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+from pytest import fixture\n+from _pytest.logging import caplog_records_key\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -172,7 +176,39 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n-def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n+def test_caplog_get_records_after_clear(caplog):\n+    \"\"\"Test to ensure caplog.get_records() updates correctly after caplog.clear().\"\"\"\n+    logger = logging.getLogger(__name__)\n+\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    verify_consistency()  # Initially they should match\n+    logger.warning(\"First log entry\")\n+    verify_consistency()  # They should still match after a log entry\n+    caplog.clear()\n+    verify_consistency()  # They should be empty and match after clear\n+    logger.warning(\"Second log entry\")\n+    verify_consistency()  # They should match after logging again\n+\n+def test_caplog_get_records_with_clear_and_multiple_stages(caplog, logging_during_setup_and_teardown):\n+    \"\"\"Ensure caplog.get_records() behaves correctly across multiple stages and after clear.\"\"\"\n+    logger = logging.getLogger(__name__)\n+\n+    # Log during the call phase\n+    logger.info(\"log in call\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"log in call\"]\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+\n+    # Clear and check consistency\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+\n+    # Log again in the call phase to ensure records update\n+    logger.info(\"another log in call\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"another log in call\"]\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n     pytester.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..8589162 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1262,6 +1262,9 @@ def test_pdb_teardown_skipped(\n                 pytest.test_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n \n             {mark}(\"skipped for reasons\")\n+            def tearDown(self):\n+                print(\"tearDown should not be called\")\n+                \n             def test_1(self):\n                 pass\n \n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..c7c2c1d 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,8 +1051,32 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+import pytest\n+import sys\n+import os\n+import contextlib\n \n-@contextlib.contextmanager\n+def test_capfd_sys_stdout_mode(capfd):\n+    captured = capfd.readouterr()\n+    assert \"b\" not in getattr(captured.out, 'mode', '')\n+\n+def test_encodedfile_byte_write():\n+    from _pytest.capture import EncodedFile\n+    import six\n+    import io\n+\n+    # Create a text stream\n+    buffer = io.StringIO()\n+    ef = EncodedFile(buffer, 'utf-8')\n+\n+    # Try to write bytes, should raise TypeError on Python 3\n+    if not six.PY2:  # Only test if running on Python 3\n+        with pytest.raises(TypeError):\n+            ef.write(b\"some bytes\")\n+\n+    # Write str, should work fine\n+    ef.write(\"some text\")\n+    assert buffer.getvalue() == \"some text\"\n def saved_fd(fd):\n     new_fd = os.dup(fd)\n     try:\n",
  "pytest-dev__pytest-5631": "",
  "pytest-dev__pytest-5809": "",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..a1644b5 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,23 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+\n+    def test_headline_replacement_issue(self, testdir):\n+        # This test checks that '.[' is not replaced with '[' in parameterized test names\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"param\", [\".[\"])\n+            def test_boo(param):\n+                assert 0\n+            \"\"\"\n+        )\n+        items, _ = testdir.inline_genitems(p)\n+        assert len(items) == 1\n+        assert items[0].name == 'test_boo[.[]'\n+        # Ensure getmodpath reflects the correct parameterization\n+        assert items[0].getmodpath() == 'test_boo[.[]'\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..4ddfdf3 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,6 +1,25 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n+import sys\n+\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n \n @pytest.fixture(params=[\"--setup-only\", \"--setup-plan\", \"--setup-show\"], scope=\"module\")\n def mode(request):\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..8364fc7 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -153,7 +154,33 @@ class TestEvaluation:\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n \n+from _pytest.pytester import Testdir\n+\n class TestXFail:\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..8219246 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -512,6 +512,17 @@ class TestCaptureFixture:\n                 capfd.close()\n             \"\"\"\n         )\n+        \n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n+\n+    def test_cafd_includes_carriage_return(self, capfd):\n+        print('Greetings from DOS', end='\\r')\n+        out, err = capfd.readouterr()\n+        assert out.endswith('\\r')\n         reprec.assertoutcome(passed=1)\n \n     def test_capfdbinary(self, testdir):\n@@ -526,6 +537,17 @@ class TestCaptureFixture:\n                 assert err == b''\n             \"\"\"\n         )\n+        \n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n+\n+    def test_cafd_includes_carriage_return(self, capfd):\n+        print('Greetings from DOS', end='\\r')\n+        out, err = capfd.readouterr()\n+        assert out.endswith('\\r')\n         reprec.assertoutcome(passed=1)\n \n     def test_capsysbinary(self, testdir):\n",
  "pytest-dev__pytest-7571": "",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..c3d1df3 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,8 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n+import pytest\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..f3d34a8 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -300,7 +300,42 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     )\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n+import pytest\n+from _pytest.pytester import Pytester\n+\n+def test_unittest_setUpClass_fixture_name_visibility(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class Tests(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n+            def test_1(self):\n+                pass\n+        \"\"\"\n+    )\n+\n+    match_private_fixture_name = \"*unittest_setUpClass_fixture_Tests*\"\n+    match_no_docstring = \"*no docstring available*\"\n+\n+    # Run pytest with --fixtures only\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    # Ensure the fixture name is not present\n+    result.stdout.no_fnmatch_line(match_private_fixture_name)\n+    # Ensure no no-docstring warning is shown for fixture\n+    result.stdout.no_fnmatch_line(match_no_docstring)\n+\n+    # Run pytest with --fixtures and -v for verbose output\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    # Ensure the fixture name appears in verbose mode\n+    result.stdout.fnmatch_lines([match_private_fixture_name])\n+    # Ensure no-docstring warning is shown\n+    result.stdout.fnmatch_lines([match_no_docstring])\n \n def test_setup_class(pytester: Pytester) -> None:\n     testpath = pytester.makepyfile(\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..3a401f5 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,39 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+from sklearn.linear_model import RidgeClassifierCV\n+import numpy as np\n+import pytest\n+from numpy.testing import assert_array_equal\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    # Simple binary classification dataset\n+    X = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples, n_features = X.shape\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Initialize RidgeClassifierCV with store_cv_values=True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True, cv=None)\n+    r.fit(X, y)\n+\n+    # Assert the cv_values_ shape is as expected\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Test with multi-output case\n+    y_multi = np.array([[1, 1, 1, -1, -1],\n+                        [1, -1, 1, -1, 1],\n+                        [-1, -1, 1, -1, -1]]).T\n+    n_targets = y_multi.shape[1]\n \n-def test_ridgecv_store_cv_values():\n+    r.fit(X, y_multi)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..3f7f1ec 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,20 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+from sklearn.metrics import fowlkes_mallows_score\n+import numpy as np\n+from sklearn.utils.testing import assert_all_finite\n+\n+def test_fowlkes_mallows_score_large_numbers():\n+    # Construct two labeling arrays that should lead to large values in pk and qk\n+    labels_true = np.array([i for i in range(100000)] * 2)\n+    labels_pred = np.array([i for i in range(200000)])\n+\n+    # Calculate the score\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+\n+    # Assert the result is finite and no warning is thrown\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..b733169 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -538,8 +538,22 @@ def test_hashing_vectorizer():\n     for i in range(X.shape[0]):\n         assert_almost_equal(np.linalg.norm(X[0].data, 1), 1.0)\n \n-\n-def test_feature_names():\n+from sklearn.feature_extraction.text import CountVectorizer\n+from numpy.testing import assert_array_equal, assert_raises\n+from nose.tools import assert_equal\n+\n+\n+def test_countvectorizer_custom_vocabulary_no_notfittederror():\n+    # Custom vocabulary provided\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer = CountVectorizer(vocabulary=vocab)\n+    \n+    # Ensure get_feature_names does not raise NotFittedError\n+    feature_names = vectorizer.get_feature_names()\n+    expected_feature_names = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    \n+    # Test that feature names match the custom vocabulary\n+    assert_array_equal(feature_names, expected_feature_names)\n     cv = CountVectorizer(max_df=0.5)\n \n     # test for Value error on unfitted/empty vocabulary\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..800f18b 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1156,12 +1156,15 @@ def test_search_cv_timing():\n     X = [[1, ], [2, ], [3, ], [4, ]]\n     y = [0, 1, 1, 0]\n \n-    gs = GridSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0)\n+    gs = GridSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, refit=True)\n     rs = RandomizedSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, n_iter=2)\n \n     for search in (gs, rs):\n         search.fit(X, y)\n-        for key in ['mean_fit_time', 'std_fit_time']:\n+        for key in ['mean_fit_time', 'std_fit_time', 'refit_time_']:\n+            assert_true(hasattr(search, \"refit_time_\"))\n+            assert_true(isinstance(search.refit_time_, float))\n+            assert_greater_equal(search.refit_time_, 0)\n             # NOTE The precision of time.time in windows is not high\n             # enough for the fit/score times to be non-zero for trivial X and y\n             assert_true(np.all(search.cv_results_[key] >= 0))\n@@ -1173,7 +1176,18 @@ def test_search_cv_timing():\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n \n-def test_grid_search_correct_score_results():\n+def test_refit_time_with_multi_metric():\n+    # Test refit_time_ is available and correct for multi-metric scoring\n+    svc = LinearSVC(random_state=0)\n+    X = [[1, ], [2, ], [3, ], [4, ]]\n+    y = [0, 1, 1, 0]\n+\n+    grid_search = GridSearchCV(svc, {'C': [0, 1]}, cv=2, refit='accuracy', scoring=['accuracy', 'precision'])\n+    grid_search.fit(X, y)\n+\n+    assert_true(hasattr(grid_search, \"refit_time_\"))\n+    assert_true(isinstance(grid_search.refit_time_, float))\n+    assert_greater_equal(grid_search.refit_time_, 0)\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..8c9e0ff 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,6 +21,12 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.datasets import make_classification\n+from sklearn.utils import assert_array_almost_equal\n+from sklearn.linear_model import _log_reg_scoring_path\n+from sklearn.preprocessing import LabelEncoder\n+import pytest\n \n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..c54f4c6 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,7 +154,24 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n-def test_clone_sparse_matrices():\n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than\n+    # instances\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n+\n+def test_clone_with_estimator_class():\n+    # Test case specifically designed for the reported issue:\n+    # Ensure cloning works when an estimator class is passed as a parameter.\n+    scaler = StandardScaler(with_mean=StandardScaler)\n+    cloned_scaler = clone(scaler)\n+    \n+    assert cloned_scaler.with_mean is StandardScaler\n     sparse_matrix_classes = [\n         getattr(sp, name)\n         for name in dir(sp) if name.endswith('_matrix')]\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..bb28cad 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,8 +5,30 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+@pytest.mark.parametrize('init_copy_X, fit_copy_X', [(True, None), (False, None), (True, False), (False, True)])\n+def test_lasso_larsic_combined_copyX_behaviour(init_copy_X, fit_copy_X):\n+    \"\"\"\n+    Test that copy_X behavior is correctly handled based on both init and fit parameters.\n+    If fit's copy_X is None, it should respect __init__'s copy_X value.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+\n+    if fit_copy_X is not None:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+        expected_behavior = fit_copy_X\n+    else:\n+        lasso_lars.fit(X, y)\n+        expected_behavior = init_copy_X\n+        \n+    assert expected_behavior == np.array_equal(X, X_copy)\n+\n import pytest\n \n+import numpy as np\n from sklearn.model_selection import train_test_split\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_array_almost_equal\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..bccace5 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -494,7 +494,33 @@ def test_shuffle_stratifiedkfold():\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+def test_stratifiedkfold_shuffle_with_random_state():\n+    # Ensure that shuffle with different random states provides different splits\n+    X = np.arange(20)\n+    y = np.concatenate([np.ones(10), np.zeros(10)])\n+\n+    kf1 = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=10, shuffle=True, random_state=43)\n+\n+    test_sets_1 = [test_idx for _, test_idx in kf1.split(X, y)]\n+    test_sets_2 = [test_idx for _, test_idx in kf2.split(X, y)]\n+\n+    # Check that the test sets are different with different random states\n+    assert any((not np.array_equal(ts1, ts2)) for ts1, ts2 in zip(test_sets_1, test_sets_2))\n+\n+def test_stratifiedkfold_shuffle_with_same_random_state():\n+    # Ensure that shuffle with the same random state provides the same splits\n+    X = np.arange(20)\n+    y = np.concatenate([np.ones(10), np.zeros(10)])\n+\n+    kf1 = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n+\n+    test_sets_1 = [test_idx for _, test_idx in kf1.split(X, y)]\n+    test_sets_2 = [test_idx for _, test_idx in kf2.split(X, y)]\n+\n+    # Check that the test sets are the same with the same random state\n+    assert all(np.array_equal(ts1, ts2) for ts1, ts2 in zip(test_sets_1, test_sets_2))\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..f0e1463 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -203,6 +203,21 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n \n+@pytest.mark.parametrize(\n+    'strategy, expected_5bins',\n+    [('uniform', [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies_5bins(strategy, expected_5bins):\n+    \"\"\"Test KBinsDiscretizer with 5 bins to ensure it handles edge cases.\"\"\"\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n+\n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..1bd5e56 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 4594f40..49a78a4 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -199,6 +199,10 @@ class Pipeline(_BaseComposition):\n             if trans is not None and trans != 'passthrough':\n                 yield idx, name, trans\n \n+    def __len__(self):\n+        \"\"\"Return the number of steps in the Pipeline.\"\"\"\n+        return len(self.steps)\n+\n     def __getitem__(self, ind):\n         \"\"\"Returns a sub-pipeline or a single esimtator in the pipeline\n \n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..81d72f5 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -504,6 +504,36 @@ def test_transform():\n     assert_array_almost_equal(eclf1.transform(X),\n                               eclf2.transform(X))\n     assert_array_almost_equal(\n-            eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n-            eclf2.transform(X)\n-    )\n+        eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n+        eclf2.transform(X)\n+    )\n+\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [\n+        (load_iris(return_X_y=True)[0], load_iris(return_X_y=True)[1], VotingClassifier(\n+            estimators=[('lr', LogisticRegression()), ('rf', RandomForestClassifier(n_estimators=5))]\n+        )),\n+        (make_regression(n_samples=100, n_features=4, noise=0.1, random_state=42)[0],\n+         make_regression(n_samples=100, n_features=4, noise=0.1, random_state=42)[1], VotingRegressor(\n+            estimators=[('lr', LinearRegression()), ('rf', RandomForestRegressor(n_estimators=5))]\n+        ))\n+    ]\n+)\n+def test_none_estimator_with_weights(X, y, voter):\n+    # Check that an estimator can be set to None and passing some weight\n+    # Regression test for the original issue\n+    voter.fit(X, y, sample_weight=np.ones(len(y)))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(len(y)))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape[0] == y.shape[0]\n+\n+\n+def test_all_none_estimators():\n+    # Testing behavior where all estimators are set to None\n+    with pytest.raises(ValueError, match=\"All estimators are None. At least one is required!\"):\n+        X, y = load_iris(return_X_y=True)\n+        voter = VotingClassifier(estimators=[('lr', None), ('rf', None)])\n+        voter.fit(X, y)\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..e078cc7 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -327,8 +327,34 @@ def test_export_text_errors():\n                          \"spacing must be > 0, given 0\",\n                          export_text, clf, spacing=0)\n \n+from sklearn.tree import DecisionTreeRegressor\n \n-def test_export_text():\n+def test_export_text_single_feature():\n+    # Reproduce the issue with a single feature dataset\n+    X, y = [[-2], [-1], [1], [2]], [0, 0, 1, 1]\n+    clf = DecisionTreeClassifier(random_state=0)\n+    clf.fit(X, y)\n+    expected_report = dedent(\"\"\"\n+    |--- feature_0 <= 0.00\n+    |   |--- class: 0\n+    |--- feature_0 >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    assert export_text(clf) == expected_report\n+    assert export_text(clf, feature_names=['single_feature']) == expected_report\n+\n+    # Test for DecisionTreeRegressor with a single feature\n+    X_single = [[-2], [-1], [1], [2]]\n+    y_single = [[-1], [-1], [1], [1]]\n+    reg = DecisionTreeRegressor(random_state=0)\n+    reg.fit(X_single, y_single)\n+    expected_report = dedent(\"\"\"\n+    |--- feature_0 <= 0.00\n+    |   |--- value: [-1.0]\n+    |--- feature_0 >  0.00\n+    |   |--- value: [1.0]\n+    \"\"\").lstrip()\n+    assert export_text(reg, decimals=1) == expected_report\n     clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n     clf.fit(X, y)\n \n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..af23591 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,7 +1532,38 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n+\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_with_various_penalties(penalty, multi_class):\n+    # Test LogisticRegressionCV with different penalties and no refit\n+\n+    n_classes = 3\n+    n_features = 20\n+    X, y = make_classification(n_samples=200, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=0)\n+\n+    Cs = np.logspace(-4, 4, 3)\n+    \n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n+                                l1_ratios=l1_ratios, random_state=0,\n+                                multi_class=multi_class, refit=False)\n+    lrcv.fit(X, y)\n+    if penalty == 'elasticnet':\n+        assert lrcv.C_.shape == (n_classes,)\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    else:\n+        assert lrcv.C_.shape == (n_classes,)\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/_show_versions.py b/sklearn/utils/_show_versions.py\nindex 72f054a..13bf362 100644\n--- a/sklearn/utils/_show_versions.py\n+++ b/sklearn/utils/_show_versions.py\n@@ -48,6 +48,7 @@ def _get_deps_info():\n         \"Cython\",\n         \"pandas\",\n         \"matplotlib\",\n+        \"joblib\",\n     ]\n \n     def get_version(module):\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..cb818c4 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,35 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+from sklearn.cluster import OPTICS\n+import numpy as np\n+from sklearn.utils import shuffle\n+from numpy.testing import assert_array_equal\n+\n+def test_optics_float_min_samples():\n+    # Test case for verifying the fix of the float min_samples issue\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * 5, [1] * 5, [2] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n \n-def test_extract_xi():\n+    # Check float min_samples\n+    clust = OPTICS(min_samples=0.2, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+    # Check float min_samples close to 0\n+    clust = OPTICS(min_samples=0.01, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..6382057 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,28 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for ZeroDivisionError\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_empty_data():\n+    # Test with completely empty sparse data\n+    X_train = sparse.csr_matrix((0, 4))  # 0 samples, 4 features\n+    y_train = np.array([])\n+    model = SVR(kernel='linear')\n+    try:\n+        model.fit(X_train, y_train)\n+        assert not \"ZeroDivisionError occurred\"\n+    except ZeroDivisionError:\n+        assert \"ZeroDivisionError occurred\"\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..5bcc53a 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -83,20 +83,104 @@ def test_strip_accents():\n     expected = 'aaaaaaceeee'\n     assert strip_accents_unicode(a) == expected\n \n+    # Test strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaeresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Additional test cases for the issue with NFKD form\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n+\n     a = '\u00ec\u00ed\u00ee\u00ef\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd'\n     expected = 'iiiinooooouuuuy'\n     assert strip_accents_unicode(a) == expected\n \n+    # Test strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaeresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Additional test cases for the issue with NFKD form\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n+\n     # check some arabic\n     a = '\\u0625'  # alef with a hamza below: \u0625\n     expected = '\\u0627'  # simple alef: \u0627\n     assert strip_accents_unicode(a) == expected\n \n+    # Test strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaeresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Additional test cases for the issue with NFKD form\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n+\n     # mix letters accentuated and not\n     a = \"this is \u00e0 test\"\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+    # Test strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaeresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Additional test cases for the issue with NFKD form\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n+\n \n def test_to_ascii():\n     # check some classical latin accentuated symbols\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..d204353 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n+import pytest\n+import pandas as pd\n+import numpy as np\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..6f68634 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,32 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # Test that KMeans results with n_jobs=1 and n_jobs>1 are consistent\n+    from sklearn.cluster import KMeans\n+    from sklearn.datasets import make_blobs\n+\n+    # Generate synthetic data\n+    X, y = make_blobs(n_samples=1000, centers=3, random_state=42)\n+\n+    # Run KMeans with n_jobs=1\n+    kmeans_1 = KMeans(n_clusters=3, random_state=42, n_jobs=1)\n+    kmeans_1.fit(X)\n+    inertia_1 = kmeans_1.inertia_\n+\n+    # Run KMeans with n_jobs=2\n+    kmeans_2 = KMeans(n_clusters=3, random_state=42, n_jobs=2)\n+    kmeans_2.fit(X)\n+    inertia_2 = kmeans_2.inertia_\n+\n+    # Run KMeans with n_jobs=3\n+    kmeans_3 = KMeans(n_clusters=3, random_state=42, n_jobs=3)\n+    kmeans_3.fit(X)\n+    inertia_3 = kmeans_3.inertia_\n+\n+    # Assert that all inertias are equal\n+    assert_almost_equal(inertia_1, inertia_2)\n+    assert_almost_equal(inertia_1, inertia_3)\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..c0dcc33 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,6 +251,25 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_indent(literal_inc_path):\n+    # dedent: 6, prepend: with correct indentation\n+    options = {\n+        'lines': '14-18',  # Select the lines within the second <plugin>\n+        'dedent': 6,\n+        'prepend': '      <plugin>',  # Correctly indented prepend\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    expected_content = (\"      <plugin>\\n\"\n+                        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                        \"        <version>2.15.0</version>\\n\"\n+                        \"        <configuration>\\n\"\n+                        \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+                        \"        </configuration>\\n\"\n+                        \"      </plugin>\\n\")\n+    assert content == expected_content\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..dfd4125 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,25 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+import pytest\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_no_return_type_for_class(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._ClassWithoutDocstringInit\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints._ClassWithoutDocstringInit(x, y)\\n'\n+            '\\n'\n+            '   __init__(x, y)\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **x** (*int*) --\\n'\n+            '         **y** (*int*) --\\n'\n+            '\\n' == context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..c1e003f 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -8,8 +9,39 @@ from subprocess import PIPE, CalledProcessError\n \n import pytest\n \n+from sphinx.builders.gettext import Catalog, MsgOrigin\n from sphinx.util.osutil import cd\n \n+def test_Catalog_duplicated_message():\n+    catalog = Catalog()\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 2))\n+    catalog.add('hello', MsgOrigin('/path/to/yetanother', 1))\n+    catalog.add('world', MsgOrigin('/path/to/filename', 1))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'hello'\n+    # Check that locations are unique\n+    assert sorted(msg1.locations) == sorted([('/path/to/filename', 1),\n+                                             ('/path/to/filename', 2),\n+                                             ('/path/to/yetanother', 1)])\n+    assert msg2.text == 'world'\n+    assert msg2.locations == [('/path/to/filename', 1)]\n+\n+def test_Catalog_no_duplication_on_same_line():\n+    catalog = Catalog()\n+    catalog.add('duplicate', MsgOrigin('/path/to/file', 3))\n+    catalog.add('duplicate', MsgOrigin('/path/to/file', 3))\n+\n+    assert len(list(catalog)) == 1\n+\n+    msg, = list(catalog)\n+    assert msg.text == 'duplicate'\n+    assert msg.locations == [('/path/to/file', 3)]\n+\n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n def test_build_gettext(app):\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..25c9de2 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -140,6 +140,38 @@ def test_glossary(app):\n     assert_node(doctree[0][0][2][1],\n                 [nodes.definition, nodes.paragraph, \"description\"])\n \n+    # Additional test for case-sensitive glossary terms\n+    text_case_sensitive = (\".. glossary::\\n\"\n+                           \"\\n\"\n+                           \"   MySQL\\n\"\n+                           \"       Description for MySQL\\n\"\n+                           \"\\n\"\n+                           \"   mysql\\n\"\n+                           \"       Description for mysql\\n\")\n+\n+    # doctree for case-sensitive terms\n+    doctree_case_sensitive = restructuredtext.parse(app, text_case_sensitive)\n+    assert_node(doctree_case_sensitive, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree_case_sensitive[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][0][1][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][0][0][2],\n+                [definition, nodes.paragraph, \"Description for MySQL\"])\n+    assert_node(doctree_case_sensitive[0][0][1][1],\n+                [definition, nodes.paragraph, \"Description for mysql\"])\n+\n+    objects_case_sensitive = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects_case_sensitive\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects_case_sensitive\n+\n     # index\n     objects = list(app.env.get_domain(\"std\").get_objects())\n     assert (\"term1\", \"term1\", \"term\", \"index\", \"term-term1\", -1) in objects\n",
  "sphinx-doc__sphinx-7757": "",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..4bc9539 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -52,7 +53,17 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+from typing import TypeVar\n+\n+def test_generic_typed_class_mock():\n+    T = TypeVar('T')\n+\n+    class GenericClass(mock.SomeClass[T]):\n+        \"\"\"docstring of GenericClass\"\"\"\n+\n+    obj = GenericClass()\n+    assert GenericClass.__doc__ == \"docstring of GenericClass\"\n+    assert isinstance(obj, GenericClass)\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 464108d..82383f5 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -1261,6 +1261,21 @@ def test_automethod_for_builtin(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init(app):\n+    actual = do_autodoc(app, 'class', 'target.decorator.DistributedTrainerReplicated')\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: DistributedTrainerReplicated',\n+        '   :module: target.decorator',\n+        '',\n+        '   .. py:method:: __init__(self)',\n+        '      :module: target.decorator',\n+        '',\n+        '      doc',\n+        '',\n+    ]\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_automethod_for_decorated(app):\n@@ -1272,6 +1287,21 @@ def test_automethod_for_decorated(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init(app):\n+    actual = do_autodoc(app, 'class', 'target.decorator.DistributedTrainerReplicated')\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: DistributedTrainerReplicated',\n+        '   :module: target.decorator',\n+        '',\n+        '   .. py:method:: __init__(self)',\n+        '      :module: target.decorator',\n+        '',\n+        '      doc',\n+        '',\n+    ]\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_abstractmethods(app):\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..acb3482 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,8 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import os\n+\n import json\n import re\n from unittest import mock\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..31a8c95 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,28 @@ from test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_private_method_a,_private_method_b\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_method_a(param1)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_method_a is a docstring.',\n+        '',\n+        '',\n+        '.. py:function:: _private_method_b(param2)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_method_b is a docstring.',\n+        '',\n+    ]\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n",
  "sphinx-doc__sphinx-8120": "",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..e07e6fa 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,35 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+import sys\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    srcdir='autodoc_typehints_description_with_aliases',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'JSONObject'}})\n+def test_autodoc_typehints_description_with_type_aliases(app):\n+    (app.srcdir / 'types.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    context = (app.outdir / 'types.txt').read_text()\n+    expected_output = (\n+        'types.sphinx_doc(data)\\n'\n+        '\\n'\n+        '   Does it work.\\n'\n+        '\\n'\n+        '   Parameters:\\n'\n+        '      * **data** (*JSONObject*) --\\n'\n+        '         Does it args.\\n'\n+        '\\n'\n+        '   Returns:\\n'\n+        '      Does it work in return.\\n'\n+        '\\n'\n+        '   Return type:\\n'\n+        '      JSONObject\\n'\n+    )\n+    assert expected_output == context\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..ff7f893 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -48,8 +48,12 @@ def test_viewcode(app, status, warning):\n             '<span>    this is Class1</span>\\n'\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n-\n-@pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    # Build the EPUB output\n+    app.builder.build_all()\n+    # Assert that module pages are not created for EPUB when viewcode_enable_epub is False\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n \n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..8a9a91f 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,6 +515,17 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n+\n+    class MyEnum(enum.Enum):\n+        VALUE_A = 1\n+        VALUE_B = 2\n+\n+    # Test to see if enum members are described without value details\n+    assert inspect.object_description(MyEnum.VALUE_A) == \"MyEnum.VALUE_A\"\n+    assert inspect.object_description(MyEnum.VALUE_B) == \"MyEnum.VALUE_B\"\n+\n \n def test_getslots():\n     class Foo:\n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..c5ba639 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -9,10 +9,14 @@\n \"\"\"\n \n import time\n+import sys\n+from os import path\n from io import StringIO\n \n import pytest\n \n+import pytest\n+\n from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..360d70a 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,58 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_pyproperty_type_cross_reference(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: y\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: width\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: height\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \".. py:class:: Rectangle\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: width\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: height\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    # Check for cross-referencing in Square.end property\n+    assert_node(doctree[1][1][7], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, (\": \",\n+                                                                        [pending_xref, \"Point\"])])],\n+                                   [desc_content, ()]))\n+    \n+    # Check for cross-referencing in Rectangle.end property\n+    assert_node(doctree[1][1][15], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, (\": \",\n+                                                                        [pending_xref, \"Point\"])])],\n+                                   [desc_content, ()]))\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..a695bb3 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,7 +236,35 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n-def test_issue_9214():\n+def test_issue_11617():\n+    # This is the original test case checking the fix for the issue\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_2d_vs_3d_distance():\n+    # Additional test case 1: Check distance between 2D and 3D points\n+    p1 = Point2D(3, 0)\n+    p2 = Point3D(0, 4, 0)\n+    assert p2.distance(p1) == 5\n+\n+def test_3d_to_3d_distance():\n+    # Additional test case 2: Check distance between two 3D points\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 6, 8)\n+    expected_distance = sqrt((4 - 1)**2 + (6 - 2)**2 + (8 - 3)**2)\n+    assert p1.distance(p2) == expected_distance\n+\n+def test_2d_to_2d_distance():\n+    # Additional test case 3: Check distance between two 2D points\n+    p1 = Point2D(1, 1)\n+    p2 = Point2D(4, 5)\n+    assert p1.distance(p2) == 5\n+\n+def test_same_point_distance():\n+    # Additional test case 4: Check distance from a point to itself\n+    p1 = Point3D(1, 2, 3)\n+    assert p1.distance(p1) == 0\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n     p3 = Point3D(7, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..e2bcfc1 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,23 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy.core.numbers import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+    # Test single-level composition\n+    assert f(f(2)).evalf() == Float(16)\n+    # Test two-level composition\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    # Test three-level composition\n+    assert f(g(f(2))).evalf() == Float(64)\n+    # Test with variables\n+    x = f(2)\n+    y = g(3)\n+    assert f(g(x + y)).evalf() == Float(196)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..90f8186 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,21 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Symbol, symbols, Sum\n+from sympy.assumptions.assume import global_assumptions\n+from sympy import Q as Query\n+from sympy.matrices.expressions.matexpr import Identity\n+\n+def test_identity_sum():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+    \n+    # The expected sum of all elements in an Identity matrix of size n is n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n \n-def test_Identity_doit():\n+    # Check with a concrete number\n+    assert Sum(Sum(In[i, j], (i, 0, 2)), (j, 0, 2)).doit() == 3\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..b71dda6 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -344,6 +344,18 @@ def test_args():\n     assert Permutation(3).list(-1) == []\n     assert Permutation(5)(1, 2).list(-1) == [0, 2, 1]\n     assert Permutation(5)(1, 2).list() == [0, 2, 1, 3, 4, 5]\n+\n+    # Test for non-disjoint cycles: should be applied in left-to-right order.\n+    # Given the issue description, `Permutation([[0,1],[0,1]])` should result\n+    # in the identity permutation since applying [0,1] twice results in no change.\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+\n+    # Test additional non-disjoint cycles for correctness.\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[0, 2], [0, 1]]) == Permutation([1, 0, 2])\n+    assert Permutation([[0, 2, 1], [1, 2]]) == Permutation([0, 1, 2])\n+    assert Permutation([[1, 2], [0, 1], [0, 2]]) == Permutation([2, 0, 1])\n+    assert Permutation([[0, 1], [0, 1], [0, 1, 2]]) == Permutation([2, 0, 1])\n     raises(ValueError, lambda: Permutation([1, 2], [0]))\n            # enclosing brackets needed\n     raises(ValueError, lambda: Permutation([[1, 2], 0]))\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..09dfdc9 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -489,6 +489,14 @@ def test_errors():\n     raises(ShapeError,\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n+def test_issue_hstack_vstack():\n+    # Test hstack with 0 x n matrices\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices) == SparseMatrix(0, 6, [])\n+\n+    # Test vstack with n x 0 matrices\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices) == SparseMatrix(6, 0, [])\n \n def test_len():\n     assert not SparseMatrix()\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..e1516f1 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,8 +170,25 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import Max, Mul, NS, x, y\n \n def test_evalf_bugs():\n+    # Issue 13076: Test the evalf with Mul containing Max\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Additional test cases\n+    # Using numeric values to explicitly check numeric evaluation\n+    assert NS(Mul(Max(0, 3), 2, evaluate=False).evalf()) == '6.00000000000000'\n+    assert NS(Mul(2, Max(0, 3), evaluate=False).evalf()) == '6.00000000000000'\n+    assert NS(Mul(Max(0, -2), 3, evaluate=False).evalf()) == '0'\n+    assert NS(Mul(3, Max(0, -2), evaluate=False).evalf()) == '0'\n+\n+    # Check for symbolic evaluation with symbolic names\n+    a = Symbol('a')\n+    b = Symbol('b')\n+    assert NS(Mul(Max(a, b), x, evaluate=False).evalf()) == 'x*Max(a, b)'\n+    assert NS(Mul(x, Max(a, b), evaluate=False).evalf()) == 'x*Max(a, b)'\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n     assert NS(exp(10**10) + sin(1), 10) == NS(exp(10**10), 10)\n     assert NS('log(1+1/10**50)', 20) == '1.0000000000000000000e-50'\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..a2f484e 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,16 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+def test_coth_subs_issue():\n+    from sympy import coth, log, tan, Symbol, I, pi, nan, zoo, oo\n+    x = Symbol('x')\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for value in test_values:\n+        try:\n+            result = coth(log(tan(x))).subs(x, value)\n+            print(f\"coth(log(tan({value}))) = {result}\")\n+        except Exception as e:\n+            assert False, f\"Substitution failed for x = {value} with exception {e}\"\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..5dfe86b 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,6 +165,29 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import Symbol, FiniteSet, Interval, Complement\n+\n+x = Symbol('x')\n+y = Symbol('y')\n+\n+def test_issue_12712():\n+    # Original test case to check the fix\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n+    # Additional test cases to verify the behavior with different data\n+    # Test with only numbers in the FiniteSet\n+    assert Complement(FiniteSet(1, 2, 3), Interval(0, 5)) == FiniteSet(1, 2, 3) - Interval(0, 5)\n+\n+    # Test with only symbols in the FiniteSet\n+    assert Complement(FiniteSet(x, y, z), Interval(-10, 10)) == FiniteSet(x, y, z)\n+\n+    # Test with symbols and multiple numbers\n+    assert Complement(FiniteSet(x, 1, 2, y, 3), Interval(0, 2)) == Complement(FiniteSet(x, y, 1, 3), Interval(0, 2))\n+\n+    # Edge case: Empty set as one of the inputs\n+    assert Complement(FiniteSet(), Interval(-10, 10)) == FiniteSet()\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)).is_empty is False\n+\n def test_Complement():\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..d8385ab 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,21 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..258991b 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,23 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    # Original test case for mul_symbol as thin space\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    # Existing test case for mul_symbol as dot\n+    assert latex(1.5*3**x, mul_symbol='dot') == r\"1.5 \\cdot 3^{x}\"\n+    # New test case: arbitrary string as mul_symbol\n+    assert latex(3*x**2*y, mul_symbol='\\\\;') == r\"3\\;x^{2}\\;y\"\n+    # Test no symbol between numbers and variables if mul_symbol is empty\n+    assert latex(3*x**2*y, mul_symbol='') == r\"3x^{2}y\"\n+    # Test with unusual custom symbol\n+    assert latex(3*x**2*y, mul_symbol='*') == r\"3*x^{2}*y\"\n+    # Test with None for default behavior\n+    assert latex(3*x**2*y, mul_symbol=None) == r\"3 x^{2} y\"\n+    # Test with multiple operations\n+    assert latex((3*x**2*y)**2, mul_symbol='\\\\,') == r\"\\left(3\\,x^{2}\\,y\\right)^{2}\"\n+    assert latex(((3*x**2*y)/7)**2, mul_symbol='\\\\,') == r\"\\left(\\frac{3\\,x^{2}\\,y}{7}\\right)^{2}\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..ad502b4 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -313,8 +313,25 @@ def test_as_mutable():\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n \n+from sympy import symbols, Matrix\n+from sympy.abc import a, x, y, z\n \n def test_determinant():\n+    # issue 13835 test cases\n+    a = symbols('a')\n+    \n+    M = lambda n: Matrix([[i + a * j for i in range(n)] for j in range(n)])\n+    \n+    # Existing test cases from the original patch\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n+\n+    # New test cases based on the given issue\n+    assert M(1).det() == 0  # Expected determinant is 0 for 1x1 matrix\n+    assert M(2).det() == -a  # Det should be -a for 2x2 matrix\n+    assert M(3).det() == 0  # Simplified expected outcome here\n+    assert M(4).det() == 0  # As observed determinant is zero\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert (\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..eb637b8 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -155,9 +155,74 @@ def test_characteristic_function():\n     cf = characteristic_function(Z)\n     assert cf(0) == 1\n     assert simplify(cf(1)) == S(25)/26 + 5*I/26\n-\n-\n-def test_sample():\n+def test_precomputed_cdf_issue():\n+    from sympy import Rational, sqrt, exp, pi, lowergamma, gamma, uppergamma, hyper, Piecewise\n+\n+    x = symbols('x', real=True)\n+    \n+    # Arcsin Distribution\n+    X = Arcsin('x', 0, 3)\n+    expected_cdf_arcsin = Piecewise((0, x < 0), (2*asin(sqrt(x/3))/pi, x <= 3), (1, True))\n+    assert cdf(X)(x) == expected_cdf_arcsin\n+\n+    # Dagum Distribution\n+    X = Dagum(\"x\", Rational(1, 3), Rational(1, 5), 2)\n+    expected_cdf_dagum = Piecewise(((1 + (x/2)**(-Rational(1, 3)))**(-Rational(1, 5)), x >= 0), (0, True))\n+    assert cdf(X)(x) == expected_cdf_dagum\n+\n+    # Erlang Distribution\n+    X = Erlang(\"x\", 1, 1)\n+    assert cdf(X)(1).evalf() == lowergamma(1, 1)/gamma(1)\n+\n+    # Frechet Distribution\n+    X = Frechet(\"x\", Rational(4, 3), 1, 2)\n+    expected_cdf_frechet = Piecewise((exp(-((-2 + x)/1)**(-Rational(4, 3))), x >= 2), (0, True))\n+    assert cdf(X)(x) == expected_cdf_frechet\n+    \n+    # Gamma Distribution\n+    X = Gamma(\"x\", Rational(1, 10), 2)\n+    expected_cdf_gamma = lowergamma(Rational(1, 10), x/2)/gamma(Rational(1, 10))\n+    assert cdf(X)(x) == expected_cdf_gamma\n+\n+    # Inverse Gamma Distribution\n+    X = GammaInverse(\"x\", Rational(5, 7), 2)\n+    expected_cdf_gammainv = Piecewise((uppergamma(Rational(5, 7), 2/x)/gamma(Rational(5, 7)), x > 0), (0, True))\n+    assert cdf(X)(x) == expected_cdf_gammainv\n+\n+    # Kumaraswamy Distribution\n+    X = Kumaraswamy(\"x\", Rational(1, 123), 5)\n+    expected_cdf_kumaraswamy = Piecewise((0, x < 0), (-(-x**Rational(1, 123) + 1)**5 + 1, x <= 1), (1, True))\n+    assert cdf(X)(x) == expected_cdf_kumaraswamy\n+\n+    # Laplace Distribution\n+    X = Laplace(\"x\", 2, 3)\n+    expected_cdf_laplace = Piecewise((exp((x - 2)/3)/2, x < 2), (-exp((2 - x)/3)/2 + 1, x >= 2))\n+    assert cdf(X)(x) == expected_cdf_laplace\n+\n+    # Logistic Distribution\n+    X = Logistic(\"x\", 1, 0.1)\n+    expected_cdf_logistic = 1/(exp((1 - x)/0.1) + 1)\n+    assert cdf(X)(x) == expected_cdf_logistic\n+\n+    # Nakagami Distribution\n+    X = Nakagami(\"x\", Rational(7, 3), 1)\n+    expected_cdf_nakagami = Piecewise(\n+        (lowergamma(Rational(7, 3), Rational(7, 3)*x**2/1)/gamma(Rational(7, 3)), x > 0),\n+        (0, True)\n+    )\n+    assert cdf(X)(x) == expected_cdf_nakagami\n+\n+    # StudentT Distribution\n+    X = StudentT(\"x\", 10)\n+    expected_cdf_studentt = hyper((Rational(1, 2), Rational(11, 2)), (Rational(3, 2),), -x**2/10)/(sqrt(pi)*sqrt(10)*gamma(5))\n+    assert cdf(X)(x) == Piecewise((1/2 + x*gamma(5.5)*expected_cdf_studentt, x >= 0), \n+                                  (1/2 - x*gamma(5.5)*expected_cdf_studentt, x < 0))\n+\n+    # UniformSum Distribution\n+    US = UniformSum(\"x\", 5)\n+    pdf01 = density(US)(x).subs(floor(x), 0).doit()\n+    cdf01 = cdf(US, evaluate=False)(x).subs(floor(x), 0).doit()\n+    assert tn(diff(cdf01, x), pdf01, x, a=0, b=0, c=1, d=0)\n     z = Symbol('z')\n     Z = ContinuousRV(z, exp(-z), set=Interval(0, oo))\n     assert sample(Z) in Z.pspace.domain.set\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..b476cc3 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,26 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+from sympy import Symbol, symbols\n+from sympy.physics.quantum import TensorProduct as TP, tensor_product_simp\n+from sympy.physics.paulialgebra import Pauli\n+\n+def test_tensor_product_powers():\n+    a = Symbol('a', commutative=False)\n+    t1 = TP(1, 1) * TP(1, 1)\n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+\n+    # Check current behavior (should replicate issue)\n+    assert t1.expand(tensorproduct=True) == t1  # Currently gives 1x1**2\n+    assert tensor_product_simp(t1) == t1       # Currently gives 1x1**2\n+    \n+    assert t2.expand(tensorproduct=True) == t2  # Currently gives 1xsigma3**2\n+    assert tensor_product_simp(t2) == t2       # Currently gives 1xsigma3**2\n+\n+    # Check expected correct behavior (after the fix)\n+    assert tensor_product_simp(TP(1, 1)*TP(1, a)).subs(a, 1) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, Pauli(3))*TP(1, a)).subs(a, Pauli(3)) == TP(1, 1)\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 29c7fd2..98f288b 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -493,7 +493,10 @@ def test_Rational():\n     assert sstr(Symbol(\"x\")**Rational(2, 3), sympy_integers=True) == \"x**(S(2)/3)\"\n \n \n-def test_Float():\n+def test_issue_respect_sympy_integers():\n+    x = Symbol('x')\n+    assert sstr(Eq(x, Rational(1, 2)), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, Rational(1, 2)), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n     # NOTE dps is the whole number of decimal digits\n     assert str(Float('1.23', dps=1 + 2)) == '1.23'\n     assert str(Float('1.23456789', dps=1 + 8)) == '1.23456789'\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..c87691b 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -3,12 +3,30 @@ from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n+from sympy.physics.vector import ReferenceFrame\n \n Vector.simp = True\n A = ReferenceFrame('A')\n \n-\n-def test_Vector():\n+def test_zero_vector_addition():\n+    # Original test case as per the patch\n+    assert A.x + 0 == A.x\n+    \n+    # Additional test cases\n+    # Adding zero directly in vector multiplication\n+    assert sum([A.x, 0 * A.x]) == A.x\n+    assert sum([0 * A.x, A.x]) == A.x\n+    \n+    # Adding zero represented by a zero scalar\n+    zero_scalar = 0\n+    assert A.x + zero_scalar * A.x == A.x\n+    \n+    # Adding zero vector explicitly\n+    zero_vector = 0 * A.x\n+    assert A.x + zero_vector == A.x\n+    \n+    # Complex combination involving zero\n+    assert sum([A.x, 0 * A.x, A.y, 0 * A.y]) == A.x + A.y\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..458538b 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -134,6 +135,16 @@ def test_math_lambda():\n \n \n @conserve_mpmath_dps\n+def test_mpmath_rational_precision():\n+    mpmath.mp.dps = 50\n+    x = symbols('x')\n+    eqn = Eq(Rational(1, 3) + x, 1)\n+    f = lambdify(x, eqn.lhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source_code, \"Rational numbers should be wrapped with mpmath.mpf\"\n+    f_evaluated = f(mpmath.mpf('0.66666666666666666666666666666666666666666666666667'))\n+    expected_value = mpmath.mpf('1')\n+    assert mpmath.almosteq(f_evaluated, expected_value, rel_eps=mpmath.mpf('1e-49')), \"The evaluation should match the expected value with high precision\"\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -145,6 +156,16 @@ def test_mpmath_lambda():\n \n \n @conserve_mpmath_dps\n+def test_mpmath_rational_precision():\n+    mpmath.mp.dps = 50\n+    x = symbols('x')\n+    eqn = Eq(Rational(1, 3) + x, 1)\n+    f = lambdify(x, eqn.lhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source_code, \"Rational numbers should be wrapped with mpmath.mpf\"\n+    f_evaluated = f(mpmath.mpf('0.66666666666666666666666666666666666666666666666667'))\n+    expected_value = mpmath.mpf('1')\n+    assert mpmath.almosteq(f_evaluated, expected_value, rel_eps=mpmath.mpf('1e-49')), \"The evaluation should match the expected value with high precision\"\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..bec2bea 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -79,6 +80,19 @@ def test_ndim_array_initiation():\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n+    # Test for the issue: len of rank-0 arrays\n+    scalar_array = ImmutableDenseNDimArray(42)\n+    assert len(scalar_array) == 1, \"Length of scalar array should be 1\"\n+    assert scalar_array.shape == ()\n+    assert scalar_array.rank() == 0\n+    assert scalar_array[()] == 42\n+    raises(ValueError, lambda: scalar_array[0])\n+\n+    # Comparison with numpy behavior\n+    import numpy as np\n+    np_scalar = np.asarray(42)\n+    assert np_scalar.size == len(scalar_array), \"Numpy size comparison for scalar\"\n+\n \n def test_reshape():\n     array = ImmutableDenseNDimArray(range(50), 50)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..51ecdfd 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,13 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    i, j = symbols('i j', integer=True, positive=True)\n+    # issue 15493\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(6*i, 4) != Mod(i, 2)  # checking different divisor\n+    assert Mod(2*i, 2) == 0  # basic check for multiple of the modulus\n+    assert Mod(3*i + 1, 2) == Mod(i + 1, 2)  # adding a constant\n+    assert Mod(3*i - 1, 2) == Mod(i - 1, 2)  # subtracting a constant\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..baf74d1 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,9 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    # Test for zero arguments\n+    assert Min() == S.Infinity\n+    assert Max() == S.NegativeInfinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +158,20 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    # Test with one argument\n+    assert Min(x) == x\n+    assert Max(x) == x\n+    # Test with multiple arguments\n+    assert Min(x, y) == Min(y, x)\n+    assert Max(x, y) == Max(y, x)\n+    # Test with symbolic arguments\n+    assert Min(x, Min(y, z)) == Min(z, y, x)\n+    assert Max(x, Max(y, z)) == Max(z, y, x)\n+    # Test with mathematical assumptions and constants\n+    p = Symbol('p', positive=True)\n+    n = Symbol('n', negative=True)\n+    assert Min(p, oo) == p\n+    assert Max(n, -oo) == n\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..0a1fa61 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1980,9 +1980,30 @@ def test_issue_8247_8354():\n         1566)*((3*sqrt(93) + 29)**(1/3)*(-2**(2/3)*(3*sqrt(93) + 29)**(1/3) -\n         2) - 2*2**(1/3))**2''')\n     assert z.is_positive is False  # it's 0 (and a single _mexpand isn't enough)\n+from sympy import I, simplify\n \n+def test_is_zero_on_complex_numbers():\n+    # Issue 15873\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None  # It should return None, not False\n+    assert simplify(e).is_zero is True  # After simplification, should be True\n \n-def test_Add_is_zero():\n+    # Additional tests for complex zeros\n+    f = (2 + 3*I) - (2 + 3*I)\n+    assert f.is_zero is True  # Direct subtraction to zero\n+\n+    g = -1*I + 1*I\n+    assert g.is_zero is True  # Imaginary parts cancel out exactly\n+\n+    h = (1 + I)**2 - (1 + I)*(1 + I)\n+    assert h.is_zero is True  # Equivalent expressions, should return True\n+\n+    i = (2 + 3*I) + (-2 - 3*I)\n+    assert i.is_zero is True  # Sum to zero\n+\n+    # Check that non-zero expressions are not incorrectly marked as zero\n+    j = (1 + I) + (1 - I)\n+    assert j.is_zero is None  # Should be None since it's not identically zero or non-zero\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n@@ -1993,4 +2014,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..dd293cb 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,8 +477,21 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n-\n-def test_issue_5950():\n+def test_posify_preserves_finite_assumptions():\n+    from sympy import Symbol, posify\n+    \n+    # Create a symbol with the 'finite' assumption\n+    x = Symbol('x', finite=True)\n+\n+    # Apply 'posify' on the symbol\n+    xp, _ = posify(x)\n+    \n+    # Check that the 'finite' assumption is preserved\n+    assert xp.is_finite == True\n+\n+    # Check that other assumptions related to finiteness are correctly set\n+    assert xp._assumptions['finite'] == True\n+    assert xp._assumptions['infinite'] == False\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n     assert logcombine(log(x) - log(y)) == log(x/y)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..ca8f608 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -36,7 +38,16 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n \n-def test_MpmathPrinter():\n+def test_Indexed_PythonCodePrinter():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    # Testing single index\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    # Testing multiple indices\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    # Testing with variable index\n+    i, j = symbols('i j')\n+    assert prntr.doprint(p[i, j]) == 'p[i, j]'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..6ed5c65 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -247,9 +247,24 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='`') == '``'\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n-\n-\n-def test_decode_morse():\n+def test_encode_morse_digits():\n+    # Original test patch\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n+    # Additional test cases for individual digits\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('2') == '..---'\n+    assert encode_morse('3') == '...--'\n+    assert encode_morse('4') == '....-'\n+    assert encode_morse('5') == '.....'\n+    assert encode_morse('6') == '-....'\n+    assert encode_morse('7') == '--...'\n+    assert encode_morse('8') == '---..'\n+    assert encode_morse('9') == '----.'\n+    assert encode_morse('0') == '-----'\n+    # Test with a separator\n+    assert encode_morse('1 2 3 4 5', sep=' ') == '.---- ..--- ...-- ....- .....'\n+    assert encode_morse('67890', sep=':') == '-....:--...:---..:----.:-----'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..5cc80ec 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -808,10 +808,24 @@ def test_issue_15965():\n     bnew = y*Integral(x, x)\n     assert simplify(A + B) == anew + bnew\n     assert simplify(A) == anew\n+\n+def test_issue_17137():\n+    from sympy import Symbol, I, cos, simplify\n+\n+    x = Symbol('x')\n+    # Original test cases from the test patch\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n+    # Additional test cases\n+    assert simplify((cos(x) + I)**I) == (cos(x) + I)**I\n+    assert simplify((cos(x)**2 + I)**(3*I)) == (cos(x)**2 + I)**(3*I)\n+    assert simplify(cos(x)**(-I)) == cos(x)**(-I)\n+    assert simplify(cos(x)**(0 + I)) == cos(x)**I\n     assert simplify(B) == bnew\n \n \n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..15ee8ed 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..b2fd2bd 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -7,6 +8,21 @@ from sympy.utilities.pytest import raises, warns\n \n \n def test_point():\n+    from sympy import sympify  # Import sympify here for use in test cases\n+\n+    # Testing the commutativity of multiplication with Point\n+    # Issue: point1 + sympy.sympify(2.0) * point2 should not raise an exception\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+    assert point1 + point2 * scalar == Point(2.0, 2.0)\n+    assert point1 + scalar * point2 == Point(2.0, 2.0)  # This should work the same as above\n+\n+    # Additional cases to ensure that both orders of multiplication work\n+    assert scalar * point1 == Point(0.0, 0.0)\n+    assert point1 * scalar == Point(0.0, 0.0)\n+    assert scalar * point2 == Point(2.0, 2.0)\n+    assert point2 * scalar == Point(2.0, 2.0)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..07939f5 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -501,7 +501,12 @@ def test_diophantine():\n     assert diophantine(eq, permute=True) == complete_soln\n \n     assert diophantine(x**2 + x*Rational(15, 14) - 3) == set()\n-    # test issue 11049\n+    # test issue 18186\n+    # ensure the solution is order-independent when permute=True\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     eq = 92*x**2 - 99*y**2 - z**2\n     coeff = eq.as_coefficients_dict()\n     assert _diop_ternary_quadratic_normal((x, y, z), coeff) == \\\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..7a1fb1f 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -677,7 +677,31 @@ def test_latex_subs():\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+def test_parenthesized_subs():\n+    from sympy import Subs, latex\n+    from sympy.abc import x, y\n+\n+    # Original problematic test case\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n+    # Test for a different expression with single substitution\n+    assert latex(2*Subs(x**2 - y, (x,), (3,))) == r'2 \\left. \\left(x^{2} - y\\right) \\right|_{\\substack{ x=3 }}'\n+\n+    # Test for a multi-term expression\n+    assert latex(-2*Subs(x - y + 1, (y,), (2,))) == r'-2 \\left. \\left(x - y + 1\\right) \\right|_{\\substack{ y=2 }}'\n+\n+    # Test for expression without any need for parenthesis\n+    assert latex(-Subs(x, (x,), (5,))) == r'- \\left. x \\right|_{\\substack{ x=5 }}'\n+\n+    # Test complex expression with nested functions\n+    from sympy import sin, cos\n+    assert latex(Subs(sin(x) + cos(x), (x,), (0,))) == r'\\left. \\left(\\sin{\\left(x \\right)} + \\cos{\\left(x \\right)}\\right) \\right|_{\\substack{ x=0 }}'\n+\n+    # Test expression with multiple substitutions\n+    assert latex(Subs(x*y + y**2, (x, y), (1, 3))) == r'\\left. \\left(x y + y^{2}\\right) \\right|_{\\substack{ x=1\\\\ y=3 }}'\n+\n+    # Edge test case: Substitution with functions\n+    assert latex(Subs(sin(x) * y, (x, y), (0, 5))) == r'\\left. \\left(\\sin{\\left(x \\right)} y\\right) \\right|_{\\substack{ x=0\\\\ y=5 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..fc3b021 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,6 +1,7 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n-from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n+from sympy import (Symbol, Eq, S, Abs, sin, asin, pi, Interval,\n     And, Mod, oo, Function)\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n \n@@ -126,6 +127,21 @@ def test_subs_CondSet():\n         n, n < x, Interval(0, oo)).subs(x, p) == Interval(0, oo)\n     assert ConditionSet(\n         n, n < x, Interval(-oo, 0)).subs(x, p) == S.EmptySet\n+    # issue 17341\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    assert ConditionSet(x, Contains(y, Interval(-1,1)), img1).subs(y, S.One/3).dummy_eq(img2)\n+\n+    # further tests to verify correct behavior\n+    # subs case: should substitute y and simplify correctly\n+    imgset = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    condset = ConditionSet(x, Contains(y, Interval(-1,1)), imgset)\n+    assert condset.subs(y, Rational(1, 3)) == ConditionSet(x, Contains(Rational(1,3), Interval(-1,1)), imageset(Lambda(k, 2*k*pi + asin(Rational(1,3))), S.Integers))\n+\n+    # Test simultaneous substitution\n+    assert condset.subs({y: Rational(1,3)}, simultaneous=True) == imageset(Lambda(k, 2*k*pi + asin(Rational(1,3))), S.Integers)\n+\n     assert ConditionSet(f(x), f(x) < 1, {w, z}\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..d45f315 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -483,7 +483,43 @@ def test_geometry():\n     assert L == Line((0, 1), (1, 0)) and isinstance(L, Line)\n \n \n+from sympy.core.sympify import kernS\n+from sympy import Symbol, Interval, Add, Mul, exp, sin, cos\n+from sympy.abc import x, y\n+\n def test_kernS():\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+    # Additional test cases to ensure coverage\n+\n+    # Test with simple expressions\n+    assert kernS('x + y') == x + y\n+    assert kernS('2*x + 3*y') == 2*x + 3*y\n+\n+    # Test with more complex expressions\n+    assert kernS('((x+y)**2)/2') == (x + y)**2 / 2\n+    assert kernS('sin(x) + cos(y)') == sin(x) + cos(y)\n+\n+    # Test for correctly handling of spacing and kern\n+    text_with_space = \"2 * ( x + y )\"\n+    assert kernS(text_with_space) == 2*(x + y)\n+\n+    # Test for expressions with negative signs and multiple parentheses\n+    expr = '-(x - y)*(x + y)'\n+    assert kernS(expr) == - (x - y)*(x + y)\n+\n+    # Test with no algebraic expressions, should return the symbol\n+    assert kernS('onlysymbol') == Symbol('onlysymbol')\n+\n+    # Edge Case: Should handle empty input gracefully (return empty)\n+    assert kernS('') == ''\n+\n+    # Edge Case: Parentheses mismatch should raise SympifyError\n+    try:\n+        kernS('(')\n+    except SympifyError:\n+        assert True\n+    else:\n+        assert False\n     s =   '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'\n     # when 1497 is fixed, this no longer should pass: the expression\n     # should be unchanged\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_dagger.py b/sympy/physics/quantum/tests/test_dagger.py\nindex ad97a01..d8f3d90 100644\n--- a/sympy/physics/quantum/tests/test_dagger.py\n+++ b/sympy/physics/quantum/tests/test_dagger.py\n@@ -1,7 +1,9 @@\n+\n from sympy import I, Matrix, symbols, conjugate, Expr, Integer\n \n from sympy.physics.quantum.dagger import adjoint, Dagger\n from sympy.external import import_module\n+from sympy.physics.quantum.operator import Operator, IdentityOperator\n from sympy.testing.pytest import skip\n \n \n@@ -28,8 +30,21 @@ def test_matrix():\n     m = Matrix([[I, x*I], [2, 4]])\n     assert Dagger(m) == m.H\n \n-\n-class Foo(Expr):\n+def test_dagger_identity_operator():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+\n+    D = Dagger(O)\n+    \n+    assert O * I == O\n+    assert D * I == D\n+    assert I * D == D\n+    assert D * I == D\n+    assert I * O == O\n+\n+    # Testing within expressions\n+    assert (D * I * O) == D * O\n+    assert (I * D * O) == D * O\n \n     def _eval_adjoint(self):\n         return I\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..e4fc63c 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,9 +905,34 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n-\n-@slow\n-def test_presentation():\n+def test_issue_sylow_subgroup_indexerror():\n+    from sympy.combinatorics import DihedralGroup\n+\n+    # Test cases to reproduce the original IndexError issue\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4  # Known order for p=2 in DihedralGroup(18)\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4  # Known order for p=2 in DihedralGroup(50)\n+\n+    # Additional test cases for different prime p\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=3)\n+    assert S.order() == 3  # Known order for p=3 in DihedralGroup(18)\n+\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=5)\n+    assert S.order() == 1  # p=5 is not a divisor of the order of DihedralGroup(18)\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=5)\n+    assert S.order() == 5  # Known order for p=5 in DihedralGroup(50)\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=3)\n+    assert S.order() == 1  # p=3 is not a divisor of the order of DihedralGroup(50)\n     def _test(P):\n         G = P.presentation()\n         return G.order() == P.order()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..c2dd555 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -514,6 +514,20 @@ def test_partitions():\n         assert i == RGS_enum(n)\n \n \n+def test_partitions_reused_output():\n+    from sympy.utilities.iterables import partitions\n+\n+    # This test checks whether the function returns new dictionaries for each partition\n+    output = list(partitions(6, k=2))\n+    assert output == [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    output[0][2] = 5  # Modify the first partition\n+    # Ensure other partitions aren't affected\n+    assert output == [{2: 5}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    # Check that the generator produces new outputs\n+    new_output = list(partitions(6, k=2))\n+    assert new_output == [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+\n+\n def test_binary_partitions():\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..603a4f7 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,23 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+def test_zero_not_false_extended():\n+    # Further check with more number comparisons\n+    assert (S(0.0) != S.false) is True\n+    assert (S.false != S(0.0)) is True\n+    assert (S(0.0) == S.true) is False\n+    assert (S.true == S(0.0)) is False\n+    assert (S(0) != S.false) is True\n+    assert (S.false != S(0)) is True\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..9cf1e82 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,13 +1,37 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n     Lambda, atan2, cse, cot, tan, S, Tuple, Basic, Dict,\n     Piecewise, oo, Mul, factor, nsimplify, zoo, Subs, RootOf,\n-    AccumBounds, Matrix, zeros, ZeroMatrix)\n+    AccumBounds, Matrix, zeros, ZeroMatrix, sinh, cosh, tanh)\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n+def test_issue_subs_polynomial_error():\n+    from sympy import clear_cache\n+    \n+    # Test for the unexpected PolynomialError\n+    x, y, z = symbols('x y z')\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) is not None  # Should work without error\n+\n+    # Re-test with real=True for x and y\n+    clear_cache()\n+    x, y, z = symbols('x y z', real=True)\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) is not None  # Should also work without error\n+    \n+    # Verify that similar expressions with cosh and tanh also function correctly\n+    expr_cosh = exp(cosh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr_cosh.subs({1: 1.0}) is not None\n+\n+    expr_tanh = exp(tanh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr_tanh.subs({1: 1.0}) is not None\n+\n+\n def test_subs():\n     n3 = Rational(3)\n     e = x\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..b1b0cf9 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -20,6 +20,41 @@ def test_monomials():\n \n     # total_degree tests\n     assert set(itermonomials([], 0)) == {S.One}\n+\n+    # Test case for the issue with min_degrees being equal to max_degrees\n+    # This is the original issue described in the test patch.\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == \\\n+        {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+\n+    # Additional test cases to ensure a comprehensive fix\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == \\\n+        {x1**3, x2**3, x3**3, x1**2*x2, x1*x2**2, x1*x3**2,\n+         x2*x3**2, x2*x1**2, x3*x1**2, x3*x2**2, x1*x2*x3}\n+\n+    # Test with max_degree greater than min_degree\n+    assert set(itermonomials([x1, x2, x3], 4, 3)) == \\\n+        {x1**3, x2**3, x3**3, x1**2*x2, x1*x2**2, x1*x3**2, x2*x3**2,\n+         x2*x1**2, x3*x1**2, x3*x2**2, x1*x2*x3, x1**4, x2**4, x3**4,\n+         x1**3*x2, x1**3*x3, x2**3*x3, x3**3*x2, x1*x2**3, x1*x3**3,\n+         x2*x3**3, x1**2*x2**2, x2**2*x3**2, x3**2*x1**2, x1**2*x3**2,\n+         x1*x2*x3**2, x2*x1*x3**2, x1*x2**2*x3, x2*x1**2*x3, x3*x2**2*x1}\n+\n+    # Test for non-commutative variables\n+    non_comm_i, non_comm_j, non_comm_k = symbols('i j k', commutative=False)\n+    assert set(itermonomials([non_comm_i, non_comm_j], 2, 2)) == \\\n+        {non_comm_i*non_comm_j, non_comm_j*non_comm_i, non_comm_i**2, non_comm_j**2}\n+    assert set(itermonomials([non_comm_i, non_comm_j, non_comm_k], 3, 2)) == \\\n+        {non_comm_j*non_comm_k**2, non_comm_i*non_comm_k**2, non_comm_k*non_comm_i*non_comm_j, non_comm_k*non_comm_i**2,\n+         non_comm_k**2, non_comm_j*non_comm_k*non_comm_j, non_comm_k*non_comm_j**2, non_comm_i*non_comm_k*non_comm_i,\n+         non_comm_i*non_comm_j, non_comm_j**2*non_comm_k, non_comm_i**2*non_comm_j, non_comm_j*non_comm_i*non_comm_k,\n+         non_comm_j**3, non_comm_i**3, non_comm_k*non_comm_j*non_comm_i, non_comm_j*non_comm_k*non_comm_i,\n+         non_comm_j*non_comm_i, non_comm_k**2*non_comm_j, non_comm_j*non_comm_i**2, non_comm_k*non_comm_j,\n+         non_comm_k*non_comm_j*non_comm_k, non_comm_i*non_comm_j*non_comm_i, non_comm_j*non_comm_i*non_comm_j,\n+         non_comm_i*non_comm_j**2, non_comm_j**2, non_comm_k*non_comm_i*non_comm_k, non_comm_i**2, non_comm_j*non_comm_k,\n+         non_comm_i*non_comm_k, non_comm_i*non_comm_k*non_comm_j, non_comm_k**3, non_comm_i**2*non_comm_k,\n+         non_comm_j**2*non_comm_i, non_comm_k**2*non_comm_i, non_comm_i*non_comm_j*non_comm_k, non_comm_k*non_comm_i}\n     assert set(itermonomials([], 1)) == {S.One}\n     assert set(itermonomials([], 2)) == {S.One}\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..d0c1d0e 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,12 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    # New test case to ensure argument invariance\n+    assert st.func(*st.args) == st\n+\n+    # Additional test with a subclass to ensure the invariance holds for subclasses as well\n+    si = Signifier('foobar')\n+    assert si.func(*si.args) == si\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..6742667 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,6 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..f9d8e6a 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -30,6 +31,18 @@ def test_PythonCodePrinter():\n     assert not prntr.module_imports\n \n     assert prntr.doprint(x**y) == 'x**y'\n+    # Test cases for Min and Max functions\n+    assert prntr.doprint(Min(x, y)) == 'min(x, y)'\n+    assert prntr.doprint(Max(x, y)) == 'max(x, y)'\n+    # Additional test cases for Min and Max with more arguments\n+    assert prntr.doprint(Min(x, y, z)) == 'min(x, y, z)'\n+    assert prntr.doprint(Max(x, z, y)) == 'max(x, z, y)'\n+    # Test with nested Min/Max\n+    assert prntr.doprint(Min(Min(x, y), z)) == 'min(min(x, y), z)'\n+    assert prntr.doprint(Max(Max(x, y), z)) == 'max(max(x, y), z)'\n+    # Test with expressions inside Min/Max\n+    assert prntr.doprint(Min(x + 1, y * 2)) == 'min(x + 1, y*2)'\n+    assert prntr.doprint(Max(y - 1, x**2)) == 'max(y - 1, x**2)'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n     assert prntr.doprint(-Mod(x, y)) == '-(x % y)'\n     assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..1595b34 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,20 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n+def test_lambdify_single_element_tuple():\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,), \"Failed to correctly return a single-element tuple\"\n+\n+    # Ensuring that inspect.getsource is correctly implemented as per issue description\n+    source_code = inspect.getsource(f_single)\n+    assert \"return (1,)\" in source_code, (\n+        \"The lambdify function does not generate the correct code for a single-element tuple, \"\n+        \"expected to see 'return (1,)' in the source code\"\n+    )\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..db6966b 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,13 +1,27 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n-from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.symbol import uniquely_named_symbol, _symbol, Str, symbols\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n-\n-def test_Str():\n+def test_symbols_with_extra_parentheses():\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(u[1]) == UndefinedFunction\n+\n+    # Additional cases to verify the functionality\n+    x, y = symbols(('x:3', 'y:3'), cls=Function)\n+    assert type(x[2]) == UndefinedFunction\n+    assert type(y[0]) == UndefinedFunction\n+\n+    # Ensure that using symbols with no extra parentheses still works\n+    a, b = symbols('a:2 b:2', cls=Function)\n+    assert isinstance(a[0], UndefinedFunction)\n+    assert isinstance(b[1], UndefinedFunction)\n     a1 = Str('a')\n     a2 = Str('a')\n     b = Str('b')\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..96680c0 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -262,6 +262,43 @@ def test_kahane_simplify1():\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Original test cases from the issue\n+\n+    # Case 1: contracted gamma matrices in the middle\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Case 2: contracted gamma matrices at the end\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Additional test cases\n+\n+    # Case 3: Single gamma matrix, should remain the same\n+    t = G(mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(mu))\n+\n+    # Case 4: Multiple uncontracted gamma matrices, should remain the same\n+    t = G(mu)*G(nu)*G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(mu)*G(nu)*G(rho))\n+\n+    # Case 5: More complex combination with contracted and uncontracted\n+    t = G(mu)*G(rho)*G(-mu)*G(sigma)*G(tensor_indices(\"alpha\", LorentzIndex)[0])\n+    r = kahane_simplify(t)\n+    assert r.equals(-2*G(rho)*G(sigma)*G(tensor_indices(\"alpha\", LorentzIndex)[0]))\n+\n+    # Case 6: Check with no contraction at all\n+    t = G(mu)*G(nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(mu)*G(nu))\n+\n def test_gamma_matrix_class():\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..e4baff9 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,8 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Symbol, S, FiniteSet, Reals, Integers, Contains, Eq, Piecewise, raises\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -46,6 +48,28 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    # Original test cases\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n+\n+    # Testing Piecewise to ensure Contains.as_set() no longer causes an AttributeError\n+    expr = Piecewise((6, Contains(x, S.Reals).as_set()), (7, True))\n+    assert expr.subs(x, 0) == 6\n+    assert expr.subs(x, S.ImaginaryUnit) == 7\n+\n+    # Testing with more complex sets\n+    finite_set = FiniteSet(1, 2, 3)\n+    assert Contains(x, finite_set).as_set() == finite_set\n+    \n+    # Testing with empty set\n+    assert Contains(x, S.EmptySet).as_set() == S.EmptySet\n+\n+    # Testing with universal set\n+    assert Contains(x, S.UniversalSet).as_set() == S.UniversalSet\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..1980851 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,30 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy import exp\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second, Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..27e42bd 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,41 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import time, velocity, acceleration, second, meter, Quantity\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_collect_factor_and_dimension_with_equivalent_dimensions():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr1)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..078c665 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -103,6 +104,17 @@ def test_isomorphisms():\n \n \n def test_check_homomorphism():\n+    # Test case for issue with PermutationGroup homomorphism handling\n+    D3 = DihedralGroup(3)\n+    # Attempt to define a homomorphism by mapping each generator to itself\n+    # This should not raise an error if the issue is resolved\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism(), \"The homomorphism should be an isomorphism\"\n+\n+    # Additional test: homomorphism with inverted generator in the images\n+    inv_generators = [gen**-1 for gen in D3.generators]\n+    T_inv = homomorphism(D3, D3, D3.generators, inv_generators)\n+    assert T_inv.is_isomorphism(), \"The homomorphism with inverted generators should be an isomorphism\"\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..89758dd 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -249,7 +249,36 @@ def test_PolyElement_copy():\n     g[(1, 1, 1)] = 7\n     assert f != g\n \n+from sympy import symbols\n+\n def test_PolyElement_as_expr():\n+    # Existing test cases\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    X, Y, Z = R.symbols\n+    g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+\n+    assert f != g\n+    assert f.as_expr() == g\n+\n+    X, Y, Z = symbols(\"x,y,z\")\n+    g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+\n+    assert f != g\n+    assert f.as_expr(X, Y, Z) == g\n+\n+    # Test with different symbols after the fix\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test with mismatched symbol lengths\n+    X = symbols(\"x\")\n+    raises(ValueError, lambda: f.as_expr(X))\n+\n+    R, = ring(\"\", ZZ)\n+    assert R(3).as_expr() == 3\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..66dc9c0 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -273,8 +273,31 @@ def test_convert_equals_signs():\n     assert parse_expr(\"(2*y = x) = False\",\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n-\n-def test_parse_function_issue_3539():\n+from sympy.parsing.sympy_parser import parse_expr\n+from sympy import symbols\n+\n+def test_issue_24288_relationals():\n+    # Define any symbols needed\n+    x, y = symbols('x y')\n+    \n+    # Test for inequalities and equalities with evaluate=False\n+    test_cases = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False),\n+        \"x < y\": Lt(x, y, evaluate=False),\n+        \"x <= y\": Le(x, y, evaluate=False),\n+        \"x > y\": Gt(x, y, evaluate=False),\n+        \"x >= y\": Ge(x, y, evaluate=False),\n+        \"x != y\": Ne(x, y, evaluate=False),\n+        \"x == y\": Eq(x, y, evaluate=False),\n+    }\n+    \n+    for expression, expected in test_cases.items():\n+        assert parse_expr(expression, evaluate=False) == expected\n     x = Symbol('x')\n     f = Function('f')\n     assert parse_expr('f(x)') == f(x)\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..d4da75a 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,10 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        # Test cases from the MRT issue description\n+        # Checking the composite units parsing for `ascii.cds` format\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n     ],\n )\n def test_unit_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..cef80c5 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1889,6 +1889,33 @@ class OperationTests(OperationTestBase):\n         from_state = to_state\n         to_state = from_state.clone()\n         operation.state_forwards(app_label, to_state)\n+        \n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_or_and_constraint_qualification(self):\n+        app_label = 'test_or_and_constraint'\n+        constraint_name = 'or_and_constraint_field_qualification'\n+        from_state = self.set_up_test_model(app_label)\n+        \n+        # Creating a complex check constraint with AND and OR\n+        check = models.Q(field_1__isnull=False, flag=True) | models.Q(flag=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        \n+        # Running the migration operation to add the constraint\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        \n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        \n+        # Validating that the constraint does not use fully qualified field names\n+        # and raises no error during migrations\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+            \n+        TestConstraint.objects.create(field_1=1, flag=True)\n+        TestConstraint.objects.create(field_1=None, flag=False)\n         Author = to_state.apps.get_model(app_label, 'Author')\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, from_state, to_state)\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..6ccf578 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -157,6 +157,11 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/en/account/register/', 'nl'), '/nl/profiel/registreren/')\n             # path() URL pattern\n             self.assertEqual(translate_url('/en/account/register-as-path/', 'nl'), '/nl/profiel/registreren-als-pad/')\n+            # Additional test case for optional named group in the URL\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'), '/nl/with-arguments/regular-argument/')\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'), '/nl/with-arguments/regular-argument/optional.html')\n+            self.assertEqual(translate_url('/en/regex_optional/1/2/', 'nl'), '/nl/regex_optional/1/2/')\n+            self.assertEqual(translate_url('/en/regex_optional/1/', 'nl'), '/nl/regex_optional/1/')\n             self.assertEqual(translation.get_language(), 'en')\n \n         with translation.override('nl'):\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..c39ff7a 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -8,7 +9,9 @@ from unittest import expectedFailure\n from django import forms\n from django.test import TestCase\n \n+import uuid\n from .models import (\n+    Item, Derived,\n     ArticleWithAuthor, BachelorParty, BirthdayParty, BusStation, Child,\n     DerivedM, InternalCertificationAudit, ItalianRestaurant, M2MChild,\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n@@ -18,7 +21,96 @@ from .models import (\n \n \n class ModelInheritanceTest(TestCase):\n-    def test_model_inheritance(self):\n+    def test_create_new_instance_with_pk_equals_none(self):\n+        # Original test case from the patch, verifying resetting PK in multi-table inheritance\n+        p1 = Profile.objects.create(username='john')\n+        p2 = User.objects.get(pk=p1.user_ptr_id).profile\n+        # Create a new profile by setting pk = None.\n+        p2.pk = None\n+        p2.user_ptr_id = None\n+        p2.username = 'bill'\n+        p2.save()\n+        self.assertEqual(Profile.objects.count(), 2)\n+        self.assertEqual(User.objects.get(pk=p1.user_ptr_id).username, 'john')\n+\n+    def test_create_new_instance_with_pk_equals_none_multi_inheritance(self):\n+        # Original test case from the patch\n+        c1 = Congressman.objects.create(state='PA', name='John', title='senator 1')\n+        c2 = Person.objects.get(pk=c1.pk).congressman\n+        # Create a new congressman by setting pk = None.\n+        c2.pk = None\n+        c2.id = None\n+        c2.politician_ptr_id = None\n+        c2.name = 'Bill'\n+        c2.title = 'senator 2'\n+        c2.save()\n+        self.assertEqual(Congressman.objects.count(), 2)\n+        self.assertEqual(Person.objects.get(pk=c1.pk).name, 'John')\n+        self.assertEqual(\n+            Politician.objects.get(pk=c1.politician_ptr_id).title,\n+            'senator 1',\n+        )\n+\n+    def test_reset_primary_key(self):\n+        # New test case to verify the fix for resetting primary keys for an inherited model\n+        derived = Derived.objects.create(f=True)\n+        self.assertTrue(derived.f)\n+        original_pk = derived.pk\n+\n+        # Reset the derived object\n+        derived.reset()\n+        derived.save()\n+\n+        # Ensure a new object was created and the original object is still there\n+        self.assertEqual(Derived.objects.count(), 2)\n+        self.assertTrue(Derived.objects.filter(pk=original_pk).exists())\n+        self.assertFalse(Derived.objects.get(pk=original_pk).f)\n+\n+        # Check the new object is correctly created\n+        new_object = Derived.objects.exclude(pk=original_pk).get()\n+        self.assertIsNone(new_object.f)  # Since f should be reset to False\n+        self.assertIsNotNone(new_object.pk)\n+\n+    def test_reset_primary_key_for_item(self):\n+        # Additional test for the base class Item directly\n+        item = Item.objects.create(f=True)\n+        original_pk = item.pk\n+        item.reset()\n+        item.save()\n+\n+        # Ensure a new object was created\n+        self.assertEqual(Item.objects.count(), 2)\n+        self.assertTrue(Item.objects.filter(pk=original_pk).exists())\n+        self.assertFalse(Item.objects.get(pk=original_pk).f)\n+\n+        # Check the new object is correctly created\n+        new_object = Item.objects.exclude(pk=original_pk).get()\n+        self.assertIsNone(new_object.f)\n+        self.assertIsNotNone(new_object.pk)\n+\n+    def test_inheritance_rest_pk_behavior(self):\n+        # Test to ensure inheritance does not affect reset behavior\n+        base_item = Item.objects.create(f=True)\n+        derived_item = Derived.objects.create(f=True)\n+        \n+        # Save original PKs\n+        base_item_pk = base_item.pk\n+        derived_item_pk = derived_item.pk\n+        \n+        # Reset both objects\n+        base_item.reset()\n+        derived_item.reset()\n+        \n+        base_item.save()\n+        derived_item.save()\n+        \n+        # Verify new objects created\n+        self.assertEqual(Item.objects.count(), 3)\n+        self.assertEqual(Derived.objects.count(), 2)\n+        \n+        # Check existing objects still exist\n+        self.assertTrue(Item.objects.filter(pk=base_item_pk).exists())\n+        self.assertTrue(Derived.objects.filter(pk=derived_item_pk).exists())\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n         # existent child instance, saving the Parent doesn't duplicate the\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..e3314d6 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -606,7 +606,29 @@ class DeletionTests(TestCase):\n \n class FastDeleteTests(TestCase):\n \n-    def test_fast_delete_fk(self):\n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries should be used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n+    def test_delete_with_locked_table(self):\n+        \"\"\"Test DELETE operation with locked table scenario.\"\"\"\n+        # Setup for the test\n+        with connection.cursor() as cursor:\n+            cursor.execute('CREATE TEMPORARY TABLE lock_test (id INT PRIMARY KEY)')\n+            cursor.execute('INSERT INTO lock_test (id) VALUES (1), (2), (3)')\n+            # Lock the table\n+            cursor.execute('LOCK TABLES lock_test WRITE')\n+            try:\n+                with self.assertNumQueries(1) as ctx:\n+                    # Perform delete operation\n+                    cursor.execute('DELETE FROM lock_test')\n+                sql = ctx.captured_queries[0]['sql']\n+                self.assertNotIn('SELECT', sql)\n+            finally:\n+                cursor.execute('UNLOCK TABLES')\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n         )\n@@ -702,4 +724,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..e884bcc 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,7 +6,7 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n \n \n class PickleabilityTestCase(TestCase):\n@@ -260,7 +261,25 @@ class PickleabilityTestCase(TestCase):\n         self.assert_pickles(event.edition_set.order_by('event'))\n \n \n-class InLookupTests(TestCase):\n+class PickleValuesTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+    def test_pickle_values_annotate(self):\n+        from django.db.models import Sum\n+        qs = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertEqual(list(reloaded), list(qs))\n+\n+    def test_pickle_values_list(self):\n+        qs = Toy.objects.values_list('material', flat=True).annotate()\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertEqual(list(reloaded), list(qs))\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..c26c5e0 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,6 +30,16 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n+    def test_unicode_characters(self):\n+        field = JSONField()\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(\n+            field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]),\n+            '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]',\n+        )\n+\n     def test_widget(self):\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..385d303 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,6 +6602,46 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_redirect_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        # Simulate a missing trailing slash in the request\n+        response = self.client.get(known_url[:-1])\n+        # The redirection should respect FORCE_SCRIPT_NAME\n+        self.assertRedirects(\n+            response, \n+            '/prefix' + known_url, \n+            status_code=301, \n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/another_prefix/')\n+    def test_redirect_with_different_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='admin',\n+            password='secret',\n+            email='admin@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        # Simulate a missing trailing slash in the request\n+        response = self.client.get(known_url[:-1])\n+        # The redirection should respect the different FORCE_SCRIPT_NAME\n+        self.assertRedirects(\n+            response,\n+            '/another_prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..cd12150 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,9 +655,50 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_serialize_type_model(self):\n+        self.assertSerializedEqual(models.Model)\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(models.Model),\n+            (\"('models.Model', {'from django.db import models'})\", set()),\n+        )\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n+    def test_issue_missing_import_in_generated_migration(self):\n+        \"\"\"\n+        Test to ensure migrations for models with custom fields and multiple inheritance\n+        generate the correct import statements.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+        \n+        fields = {\n+            'name': MyField(primary_key=True, serialize=False),\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\"MyModel\", tuple(fields.items()), bases=(MyMixin, models.Model)),\n+            ],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        result = self.safe_exec(output)\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"from app.models import MyMixin, MyField\", output)\n+        self.assertIn(\"Migration\", result)\n+\n     def test_simple_migration(self):\n         \"\"\"\n         Tests serializing a simple migration.\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..e0e36a7 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1637,9 +1637,43 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_sum_with_default_after_annotation(self):\n+        # Test case for the issue where aggregate with default crashes after annotate\n+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('id', default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_with_non_zero_default(self):\n+        # Similar test but with a non-zero default\n+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('id', default=100))\n+        # Since default is not used due to the presence of data, expected sum is 4560\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_with_empty_queryset_and_default(self):\n+        # Test aggregation with an empty queryset and a default value\n+        result = Book.objects.none().annotate(idx=F('id')).aggregate(Sum('id', default=100))\n+        # Since queryset is empty, default value should be returned\n+        self.assertEqual(result['id__sum'], 100)\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n+\n+    def test_sum_with_default_after_annotation(self):\n+        # Test case for the issue where aggregate with default crashes after annotate\n+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('id', default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_with_non_zero_default(self):\n+        # Similar test but with a non-zero default\n+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('id', default=100))\n+        # Since default is not used due to the presence of data, expected sum is 4560\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_with_empty_queryset_and_default(self):\n+        # Test aggregation with an empty queryset and a default value\n+        result = Book.objects.none().annotate(idx=F('id')).aggregate(Sum('id', default=100))\n+        # Since queryset is empty, default value should be returned\n+        self.assertEqual(result['id__sum'], 100)\n",
  "django__django-15695": "",
  "django__django-15732": "",
  "django__django-15916": "",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..d54d03e 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,13 +9,48 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.db import models\n+from django.core import serializers\n+from django.test import TestCase\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n+class TestTagManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().select_related(\"master\")\n+\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n \n \n class JsonSerializerTestCase(SerializersTestBase, TestCase):\n+    def test_m2m_serialization_with_custom_manager(self):\n+        # Setup the data as per the use case\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+\n+        # Serialize the Test instance\n+        try:\n+            serialized_data = serializers.serialize(\"json\", [test])\n+            # Ensure serialization does not raise an error\n+            self.assertTrue(serialized_data)\n+        except Exception as e:\n+            self.fail(f\"Serialization raised an exception: {e}\")\n     serializer_name = \"json\"\n     pkless_str = \"\"\"[\n     {\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..bdd53ff 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -222,7 +222,22 @@ def test_mpl_toolkits():\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n \n-def test_standard_norm():\n+@pytest.mark.skipif(platform.system() != \"Darwin\" or not platform.machine().startswith(\"arm\"), reason=\"Test is specific to MacOS on M1 chips\")\n+def test_unpickle_dpi_m1_mac():\n+    initial_dpi = 200\n+    fig = plt.figure(dpi=initial_dpi)\n+    assert fig.dpi == initial_dpi, f\"Initial DPI not set correctly, expected {initial_dpi}, got {fig.dpi}\"\n+    \n+    with open('test_m1_mac.pickle', 'wb') as file:\n+        pickle.dump(fig, file)\n+    \n+    with open('test_m1_mac.pickle', 'rb') as file:\n+        unpickled_fig = pickle.load(file)\n+    \n+    assert unpickled_fig.dpi == initial_dpi, f\"Unpickled DPI not retained, expected {initial_dpi}, got {unpickled_fig.dpi}\"\n+    # Cleanup\n+    import os\n+    os.remove('test_m1_mac.pickle')\n     assert type(pickle.loads(pickle.dumps(mpl.colors.LogNorm()))) \\\n         == mpl.colors.LogNorm\n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..5656fab 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6587,6 +6587,12 @@ def test_integrate(dask):\n \n     # along y\n     actual = da.integrate(\"y\")\n+\n+    # Test for consistency in API for coord arg\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"y\")\n+    actual_with_coord = da.integrate(coord=\"y\")\n+    assert_equal(actual, actual_with_coord)\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..2b42701 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,11 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from typing import Any\n+import pytest\n+import re\n+from pylint.lint import Run\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n@@ -131,6 +136,27 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     assert assertString in output.err\n \n \n+@pytest.mark.parametrize(\"in_string,expected\", [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"])  # This should now work without error\n+])\n+def test_csv_regex_comma_handling(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..2af962f 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1169,6 +1172,13 @@ def test_skip_package(testdir):\n         __init__=\"\"\"\n         import pytest\n         pytestmark = pytest.mark.skip\n+    \"\"\",\n+    testfile=\"\"\"\n+    import pytest\n+    def test_skip1():\n+        assert 0\n+    def test_skip2():\n+        assert 0\n     \"\"\"\n     )\n \n@@ -1179,9 +1189,16 @@ def test_skip_package(testdir):\n             assert 0\n         def test_skip2():\n             assert 0\n+    \"\"\",\n+    testfile=\"\"\"\n+    import pytest\n+    def test_skip1():\n+        assert 0\n+    def test_skip2():\n+        assert 0\n     \"\"\"\n     )\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..ae4c321 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,23 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+import pytest\n+from _pytest.mark.expression import Expression\n+\n+@pytest.mark.parametrize(\n+    \"expression, expected\",\n+    [\n+        (\"False\", False),\n+    ],\n+)\n+def test_compile_false_expression(expression: str, expected: bool) -> None:\n+    expr = Expression.compile(expression)\n+    result = expr.evaluate(lambda x: x != \"False\")\n+    assert result == expected\n+\n+import pytest\n+from _pytest.mark.expression import Expression\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..6b1d20c 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,31 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with a transformer that outputs pandas DataFrame.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X, y=None):\n+            return self\n+\n+        def transform(self, X):\n+            return pd.DataFrame({'sum': X.groupby('date')['value'].sum()})\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    union = FeatureUnion([(\"my_transform\", MyTransformer())])\n+    union.set_output(transform=\"pandas\")\n+    transformed_data = union.fit_transform(data)\n+\n+    # Check if the output is a DataFrame\n+    assert isinstance(transformed_data, pd.DataFrame)\n+    # Ensure that the transformation results are as expected\n+    expected_sums = [240, 240, 240, 240]\n+    assert list(transformed_data['sum']) == expected_sums\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..894a672 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -267,6 +267,25 @@ def test_parse_annotation():\n                           [desc_sig_punctuation, \"]\"]))\n \n \n+def test_autodoc_typehints_none_link(app):\n+    from sphinx.ext.autodoc import _parse_annotation\n+    from sphinx.testing.util import assert_node\n+    from sphinx.addnodes import pending_xref\n+\n+    # Test to ensure 'None' in type hints links correctly in both modes\n+    # Mode 1: 'description'\n+    app.config.autodoc_typehints = 'description'\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n+    # Mode 2: 'signature'\n+    app.config.autodoc_typehints = 'signature'\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n+\n def test_pyfunction_signature(app):\n     text = \".. py:function:: hello(name: str) -> str\"\n     doctree = restructuredtext.parse(app, text)\n@@ -742,4 +761,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..76a823c 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1307,7 +1307,55 @@ class NumpyDocstringTest(BaseDocstringTest):\n                       ).format(admonition)\n             self.assertEqual(expect, actual)\n \n-    def test_docstrings(self):\n+    def test_multiple_parameters(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with optional\n+        docstring_optional = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring_optional, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring_optional), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n         config = Config(\n             napoleon_use_param=False,\n             napoleon_use_rtype=False,\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..1395572 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,9 +773,47 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+import pytest\n+from sphinx.testing import restructuredtext\n+from docutils import nodes\n+from sphinx import addnodes\n+from sphinx.domains.python import PythonDomain\n \n @pytest.mark.sphinx(freshenv=True)\n-def test_module_index(app):\n+def test_info_field_list_with_xref(app):\n+    text = \"\"\"\n+    .. py:module:: mod\n+\n+    .. py:class:: A\n+    .. py:class:: submod.A\n+    \n+    .. py:function:: f()\n+    \n+        :param A a: Should link to `mod.A`\n+        :param submod.A b:\n+        :rtype: A\n+    \"\"\"\n+    # Parse the text\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Assertions to verify each reference\n+    # For :param A a:\n+    param_a_xref = doctree[3][1][0][0][0][2]\n+    assert isinstance(param_a_xref, addnodes.pending_xref)\n+    assert param_a_xref['reftarget'] == 'mod.A'\n+    assert param_a_xref['refspecific']\n+\n+    # For :param submod.A b:\n+    param_b_xref = doctree[3][1][0][0][1][2]\n+    assert isinstance(param_b_xref, addnodes.pending_xref)\n+    assert param_b_xref['reftarget'] == 'submod.A'\n+    assert param_b_xref['refspecific']\n+\n+    # For :rtype: A\n+    rtype_xref = doctree[3][1][1][0]\n+    assert isinstance(rtype_xref, addnodes.pending_xref)\n+    assert rtype_xref['reftarget'] == 'mod.A'\n+    assert rtype_xref['refspecific']\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n             \".. py:module:: sphinx.config\\n\"\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..47d8fdb 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,3 +1,7 @@\n+\n+PRIVATE_CONSTANT = None  #: :meta private:\n+_PUBLIC_CONSTANT = None  #: :meta public:\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n@@ -8,4 +12,4 @@ def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..f3ff314 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -904,6 +904,51 @@ def test_canonical_definition_skip(app, warning):\n     assert domain.objects['_io.StringIO'] == ('index', 'io.StringIO', 'class', False)\n \n \n+import sphinx.addnodes as addnodes\n+import sphinx.domains.python as py_domain\n+from sphinx.util.docutils import new_document\n+\n+def test_param_dict_str_str(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\")\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, ([nodes.list_item, nodes.paragraph])]))\n+    \n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n def test_canonical_duplicated(app, warning):\n     text = (\".. py:class:: mypackage.StringIO\\n\"\n             \"   :canonical: _io.StringIO\\n\"\n",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..21d6e94 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3275,8 +3275,34 @@ def test_factor_terms():\n     assert factor_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n     assert sqf_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n \n-\n-def test_as_list():\n+from sympy import symbols, sqf_list, I\n+from sympy.abc import x, y\n+\n+def test_issue_8695():\n+    # Given test case from the issue\n+    p1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result1 = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p1) == expected_result1\n+\n+    # Additional test cases\n+    p2 = x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2\n+    expected_result2 = (1, [(x - 2, 1), (x**2 - 1, 2)])\n+    assert sqf_list(p2) == expected_result2\n+\n+    # Test case with simple factors\n+    p3 = x**3 - 6*x**2 + 11*x - 6  # (x-1)*(x-2)*(x-3)\n+    expected_result3 = (1, [(x - 1, 1), (x - 2, 1), (x - 3, 1)])\n+    assert sqf_list(p3) == expected_result3\n+\n+    # Test case with multiple multiplicities\n+    p4 = (x - 1)**4 * (x + 2)**2\n+    expected_result4 = (1, [(x - 1, 4), (x + 2, 2)])\n+    assert sqf_list(p4) == expected_result4\n+\n+    # Test case with no factors\n+    p5 = x**2 + 1\n+    expected_result5 = (1, [(x**2 + 1, 1)])\n+    assert sqf_list(p5) == expected_result5\n     # issue 14496\n     assert Poly(x**3 + 2, x, domain='ZZ').as_list() == [1, 0, 0, 2]\n     assert Poly(x**2 + y + 1, x, y, domain='ZZ').as_list() == [[1], [], [1, 1]]\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..51f4192 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3241,8 +3241,19 @@ def test_keep_coeff():\n     assert _keep_coeff(x, 1/x) == 1\n     assert _keep_coeff(x + 1, S(2)) == u\n \n+from sympy import symbols, I, expand, factor\n \n-def test_poly_matching_consistency():\n+def test_factor_with_extension():\n+    x, y = symbols('x y')\n+    z = expand((x - 1)*(y - 1))\n+\n+    # Check factoring without extension\n+    factored = factor(z)\n+    assert factored == (x - 1)*(y - 1), \"Without extension, z should factor to (x - 1)*(y - 1)\"\n+\n+    # Check factoring with complex extension\n+    factored_with_extension = factor(z, extension=[I])\n+    assert factored_with_extension == (x - 1)*(y - 1), \"With extension, z should still factor to (x - 1)*(y - 1)\"\n     # Test for this issue:\n     # https://github.com/sympy/sympy/issues/5514\n     assert I * Poly(x, x) == Poly(I*x, x)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..a97cce8 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,17 @@\n+\n+from sympy import Symbol\n+\n+def test_symbol_no_dict():\n+    # Verify that Symbol instances do not have a __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol instance should not have a __dict__ attribute\"\n+\n+def test_symbol_slots():\n+    # Verify that Symbol instances have __slots__ defined\n+    s = Symbol('s')\n+    assert hasattr(s, '__slots__'), \"Symbol instance should have __slots__ defined\"\n+    assert s.__slots__ == ('name',), \"Symbol __slots__ should be ('name',)\"\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..b0acb3c 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,36 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundfield_subwidget_id_for_label_multiple_choice(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label returns the correct id set by ChoiceWidget.options\n+        when a form is initialized with a custom auto_id prefix.\n+        \"\"\"\n+        class ChoiceForm(Form):\n+            choices_field = MultipleChoiceField(\n+                choices=[('x', 'Choice X'), ('y', 'Choice Y')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = ChoiceForm(auto_id='custom_%s')\n+        subwidgets = form['choices_field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_choices_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_choices_field_1')\n+\n+    def test_boundfield_subwidget_id_for_label_default(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label returns default id without a custom auto_id.\n+        \"\"\"\n+        class DefaultForm(Form):\n+            choices_field = MultipleChoiceField(\n+                choices=[('x', 'Choice X'), ('y', 'Choice Y')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = DefaultForm()\n+        subwidgets = form['choices_field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'id_choices_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'id_choices_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..44d71fe 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,10 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..ae7a859 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,30 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+\n+def test_cross_val_predict_predict_proba_multioutputclassifier():\n+    # Test cross_val_predict with predict_proba method for MultiOutputClassifier\n+    X, Y = make_multilabel_classification()\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # Fit and predict_proba using cross_val_predict\n+    predictions = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+    \n+    # Ensure the result is a list with the same length as the number of outputs\n+    assert isinstance(predictions, list)\n+    assert len(predictions) == Y.shape[1]\n+\n+    # Check each prediction array has the correct shape (n_samples, n_classes)\n+    for pred in predictions:\n+        assert pred.shape[0] == X.shape[0]\n+        assert pred.shape[1] == len(np.unique(Y))\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..88cf9d6 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -158,6 +158,26 @@ def test_restify_pep_585():\n                                                    \"[:py:class:`int`, ...]]\")\n \n \n+from sphinx.ext.autodoc import mock\n+\n+@pytest.mark.parametrize(\"sphinx_version, expected_base\",\n+                         [(\"3.4.2\", \"torch.nn.Module\"),\n+                          (\"4.0.0\", \"torch.nn.Module\")])\n+def test_documentation_bases_section_for_mocked_classes(sphinx_version, expected_base):\n+    \"\"\"\n+    Test that classes inheriting from mocked classes are documented correctly in the \"Bases\" section.\n+    \"\"\"\n+    with mock(['torch']):\n+        import torch\n+        class DeepKernel(torch.nn.Module):\n+            pass\n+\n+        # Here we simulate generating the documentation and checking the output\n+        # In reality, you would invoke sphinx-build and parse the result.\n+        # For this example, we will just check the name directly.\n+        bases_section_output = f\"Bases: {DeepKernel.__bases__[0].__module__}.{DeepKernel.__bases__[0].__name__}\"\n+        assert bases_section_output == f\"Bases: {expected_base}\"\n+        \n @pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n def test_restify_type_union_operator():\n     assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..4d1b068 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,23 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    from sympy import S, Symbol, Product\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Additional test cases\n+    assert p.subs(n, 3).doit() == S(315)/8  # (3 + 1/1) * (3 + 1/2) * (3 + 1/4)\n+    assert p.subs(n, 1).doit() == S(2)  # (1 + 1), simplifying to 2\n+    \n+    # Check symbolic expression for general n\n+    from sympy import simplify\n+    expected_expr = simplify(Product(n + 1 / 2**k, (k, 0, n-1)).rewrite('Q-factorial'))\n+    assert simplify(p - expected_expr) == 0  # Check if rewritten form matches expected form\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +374,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}