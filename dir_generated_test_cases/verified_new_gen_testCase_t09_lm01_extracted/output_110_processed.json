{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..76b99e6 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -52,6 +52,29 @@ compound_models = {\n     'cm7': (map2 | p2 & sh1,\n             (np.array([False, True]),\n              np.array([[True, False], [False, True]]))\n+            ),\n+    'cm_nested1': (m.Pix2Sky_TAN() & cm,\n+            (np.array([False, False, True, True]),\n+             np.array([[True,  True,  False, False],\n+                       [True,  True,  False, False],\n+                       [False, False, True,  True],\n+                       [False, False, True,  True]]))\n+            ),\n+    'cm_nested2': ((m.Pix2Sky_TAN() & m.Linear1D(10)) & m.Linear1D(5),\n+            (np.array([False, False, True, True, True]),\n+             np.array([[True,  True,  False, False, False],\n+                       [True,  True,  False, False, False],\n+                       [False, False, True,  False, False],\n+                       [False, False, False, True,  False],\n+                       [False, False, False, False, True]]))\n+            ),\n+    'cm_nested3': (m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Linear1D(5)),\n+            (np.array([False, False, True, True, True]),\n+             np.array([[True,  True,  False, False, False],\n+                       [True,  True,  False, False, False],\n+                       [False, False, True,  False, False],\n+                       [False, False, False, True,  False],\n+                       [False, False, False, False, True]]))\n             )\n }\n \n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..b9c7b1f 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -136,9 +136,45 @@ class TestHeaderFunctions(FitsTestCase):\n             \"FLOATNUM= -4.6737463674763E+032\"\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n-\n-    def test_complex_value_card(self):\n-        \"\"\"Test Card constructor with complex value\"\"\"\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation.\n+\n+        Regression test for the float representation issue in `io.fits.Card`.\n+        \"\"\"\n+        # Test with the issue from the original description\n+        k = \"HIERARCH ESO IFM CL RADIUS\"\n+        v = 0.009125\n+        com = \"[m] radius arround actuator to avoid\"\n+        card_str = f\"{k} = 0.009125 / {com}\"\n+        c = fits.Card(k, v, com)\n+        assert str(c).strip() == card_str\n+\n+        # Additional cases to thoroughly test the fix\n+        # Smaller float with similar format issue\n+        v = 0.00000091\n+        card_str = f\"{k} = 9.1E-07 / {com}\"\n+        c = fits.Card(k, v, com)\n+        assert str(c).strip() == card_str\n+\n+        # Larger float with minimal decimal places\n+        v = 123456.789\n+        card_str = f\"{k} = 123456.789 / {com}\"\n+        c = fits.Card(k, v, com)\n+        assert str(c).strip() == card_str\n+\n+        # Float that fits exactly without issue\n+        v = 8.95\n+        card_str = f\"{k} = 8.95 / {com}\"\n+        c = fits.Card(k, v, com)\n+        assert str(c).strip() == card_str\n+\n+        # Negative float value\n+        v = -99.9\n+        card_str = f\"{k} = -99.9 / {com}\"\n+        c = fits.Card(k, v, com)\n+        assert str(c).strip() == card_str\n \n         c = fits.Card(\"abc\", (1.2345377437887837487e88 + 6324767364763746367e-33j))\n         f1 = _pad(\"ABC     = (1.23453774378878E+88, 6.32476736476374E-15)\")\n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..e42e0c2 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -419,7 +419,23 @@ class TestDiff(FitsTestCase):\n         assert diff.diff_ratio == 0\n         assert diff.diff_total == 0\n \n-    def test_diff_empty_tables(self):\n+    def test_vla_identical_files(self):\n+        \"\"\"Test identicality of files with Variable-Length Arrays (VLAs).\"\"\"\n+        # Create a VLA column and a table with this column\n+        col = Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = BinTableHDU.from_columns([col])\n+        \n+        # Write the table to a file\n+        hdu.writeto('test_vla_identical.fits', overwrite=True)\n+        \n+        # Use FITSDiff to compare the file to itself\n+        diff = FITSDiff('test_vla_identical.fits', 'test_vla_identical.fits')\n+        \n+        # Assert that the files are identical\n+        assert diff.identical\n+        \n+        # Clean up the test file\n+        os.remove('test_vla_identical.fits')\n         \"\"\"\n         Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/178\n \n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..4584d07 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -89,7 +89,22 @@ def test_inherit_docstrings():\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n \n-def test_set_locale():\n+\n+def test_inherit_docstrings_with_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            pass\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n+\n+    # Check that the Subclass's property docstring is inherited from the Base class.\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..2fa0636 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -196,6 +196,12 @@ def test_unknown_unit3():\n \n     with pytest.raises(TypeError):\n         unit5 = u.Unit(None)\n+        \n+def test_unrecognized_unit_equality_with_none():\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    assert unit != None  # Check that comparison with None is False\n+    assert not (unit == None)  # Explicitly check that equality comparison is False\n+    assert unit not in (None, u.m)  # Check that unit is not in a tuple including None\n \n \n @raises(TypeError)\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..e5fd78f 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -67,9 +67,21 @@ def test_minversion():\n     from types import ModuleType\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n-    good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n+    good_versions = ['0.12', '0.12.1', '0.12.0.dev', '0.12dev']\n     bad_versions = ['1', '1.2rc1']\n-    for version in good_versions:\n+    # Additional test cases to reproduce the described issue\n+    real_versions_to_test = ['1.14.3', '1.14']\n+    problematic_versions = ['1.14dev']\n+\n+    # Test the LooseVersion comparison between real and problematic versions\n+    for real_version in real_versions_to_test:\n+        test_module.__version__ = real_version\n+        for problematic_version in problematic_versions:\n+            try:\n+                result = minversion(test_module, problematic_version)\n+                print(f\"Comparison succeeded: {real_version} >= {problematic_version} => {result}\")\n+            except TypeError as e:\n+                print(f\"TypeError encountered during comparison of {real_version} and {problematic_version}: {str(e)}\")\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..60c7cfe 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -77,7 +77,50 @@ class TestHeaderFunctions(FitsTestCase):\n         assert 'B' in header\n         assert header[0] == 'B'\n         assert header['B'] == 'B'\n-        assert header.comments['B'] == 'C'\n+    def test_card_from_bytes_correctness(self):\n+        \"\"\"\n+        Test that Card.fromstring correctly interprets bytes input as latin-1.\n+        \"\"\"\n+        c = fits.Card.fromstring(b\"TESTKEY = 'some val'\")\n+        assert c.keyword == 'TESTKEY'\n+        assert c.value == 'some val'\n+\n+    def test_header_fromstring_bytes_correctness(self):\n+        \"\"\"\n+        Ensure Header.fromstring correctly reads bytes header strings.\n+        \"\"\"\n+        header_str = (\n+            b\"SIMPLE  =                    T / conforms to FITS standard\\n\"\n+            b\"BITPIX  =                    8 / array data type\\n\"\n+            b\"NAXIS   =                    0 / no data array present\\n\"\n+            b\"END\\n\"\n+        )\n+        header = fits.Header.fromstring(header_str)\n+        assert header['SIMPLE'] is True\n+        assert header['BITPIX'] == 8\n+        assert header['NAXIS'] == 0\n+\n+    def test_header_fromstring_unicode(self):\n+        \"\"\"\n+        Test Header.fromstring with a unicode input.\n+        \"\"\"\n+        header_str = (\n+            \"SIMPLE  =                    T / conforms to FITS standard\\n\"\n+            \"BITPIX  =                    8 / array data type\\n\"\n+            \"NAXIS   =                    0 / no data array present\\n\"\n+            \"END\\n\"\n+        )\n+        header = fits.Header.fromstring(header_str)\n+        assert header['SIMPLE'] is True\n+        assert header['BITPIX'] == 8\n+        assert header['NAXIS'] == 0\n+\n+    def test_card_fromstring_invalid_bytes(self):\n+        \"\"\"\n+        Test Card.fromstring with invalid byte input that cannot be decoded as latin-1.\n+        \"\"\"\n+        with pytest.raises(UnicodeDecodeError):\n+            fits.Card.fromstring(b\"\\xff\\xff\\xff\\xff\")\n \n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n@@ -2330,6 +2373,9 @@ class TestHeaderFunctions(FitsTestCase):\n                 c.verify('exception')\n \n \n+import pytest\n+from astropy.io import fits\n+\n class TestRecordValuedKeywordCards(FitsTestCase):\n     \"\"\"\n     Tests for handling of record-valued keyword cards as used by the\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..3b8f984 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -143,6 +143,10 @@ class TestQuantityCreation:\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n         # items stored as objects by numpy should be converted to float\n+        # but we should preserve any float32 or even float16\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..af55443 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,6 +218,13 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+    # New test cases to validate URL rejection for invalid username/password characters\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),  # unencoded @ in username\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),  # unencoded : in password\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),  # unencoded @ in password\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),  # unencoded / in username\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),  # valid URL query with @\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError)  # invalid host\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..158a1b0 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n import re\n from decimal import Decimal\n \n from django.core.exceptions import FieldError\n+from django.db.models.expressions import Case, When\n from django.db import connection\n from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n@@ -389,7 +391,36 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_expression(self):\n+        \"\"\"\n+        Test for correct behavior of COUNT DISTINCT with a conditional expression.\n+        \"\"\"\n+        # Assuming there are books with pages greater than 300 and different ratings,\n+        # this checks that distinct ratings are counted when the condition is met.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+    \n+    def test_count_distinct_expression_with_no_matches(self):\n+        \"\"\"\n+        Test COUNT DISTINCT with a Case and no matching condition.\n+        This checks that the count is zero if no rows match the Case condition.\n+        \"\"\"\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=10000, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 0)\n+\n+    def test_count_distinct_expression_with_all_match(self):\n+        \"\"\"\n+        Test COUNT DISTINCT with a Case where all rows match the condition.\n+        This checks that all distinct ratings are counted when all match the condition.\n+        \"\"\"\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=0, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], Book.objects.values('rating').distinct().count())\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..0fa417d 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1100,6 +1100,22 @@ class OverrideSettingsTests(SimpleTestCase):\n         django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertIsNone(default_storage.file_permissions_mode)\n+        # Testing the default permission\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o644):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n+        # Ensure a file uploaded has the right permission\n+        with tempfile.NamedTemporaryFile() as temp_file:\n+            temp_file.write(b'This is a test file')\n+            temp_file.seek(0)\n+            uploaded_file_name = default_storage.save('test_upload.txt', temp_file)\n+            file_path = default_storage.path(uploaded_file_name)\n+\n+            # Check if the file's permissions are 0o644\n+            self.assertEqual(oct(os.stat(file_path).st_mode & 0o777), oct(0o644))\n+\n+            # Cleanup\n+            default_storage.delete(uploaded_file_name)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..36333a5 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -101,7 +102,22 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_pgpassword_with_subprocess_run(self):\n+        \"\"\"\n+        Test that subprocess.run is called with PGPASSWORD in the environment.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.assertIn('PGPASSWORD', env)\n+            self.assertEqual(env['PGPASSWORD'], 'somepassword')\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_call(*args):\n             handler = signal.getsignal(signal.SIGINT)\n@@ -113,4 +129,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..b1b8dbf 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,10 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n+from django.core.management import call_command\n+from django.apps import apps\n+from django.db import models\n \n \n @override_settings(\n@@ -55,6 +59,23 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n+    def test_existing_content_type_rename_other_database(self):\n+        class TestRouter:\n+            def db_for_write(self, model, **hints):\n+                return 'other'\n+\n+        with override_settings(DATABASE_ROUTERS=[TestRouter()]):\n+            ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+            other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+            \n+            call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+            self.assertFalse(other_content_types.filter(model='foo').exists())\n+            self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+\n+            call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+            self.assertTrue(other_content_types.filter(model='foo').exists())\n+            self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n+\n     def test_content_type_rename_conflict(self):\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         ContentType.objects.create(app_label='contenttypes_tests', model='renamedfoo')\n@@ -63,4 +84,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..aa9d41a 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,72 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_no_name_attribute(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        request = type('Request', (object,), {})()  # Request with no name attribute\n+        ma = EpisodeAdmin(Episode, self.site)\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+    def test_get_inlines_empty_inlines(self):\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = []\n+\n+            def get_inlines(self, request, obj):\n+                return self.inlines\n+\n+        request = type('Request', (object,), {'name': 'does_not_matter'})()\n+        ma = EpisodeAdmin(Episode, self.site)\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+    def test_get_inlines_custom_request_object(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj):\n+                try:\n+                    attr = request.custom  # Using a custom attribute\n+                    if attr == 'alternate':\n+                        return self.inlines[:1]\n+                    elif attr == 'media':\n+                        return self.inlines[1:2]\n+                except AttributeError:\n+                    return []\n+                return []\n+\n+        Request = type('Request', (object,), {})  # Create custom Request type\n+        request = Request()\n+        \n+        ma = EpisodeAdmin(Episode, self.site)\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        for custom, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+            setattr(request, 'custom', custom)\n+            self.assertEqual(ma.get_inlines(request, None), (inline_class,))\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), inline_class)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..528563b 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,7 +238,32 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n',\n         ]\n+        \n+    def test_unicode_validator_trailing_newline(self):\n+        valid_usernames = ['validuser']\n+        invalid_usernames = [\"invaliduser\\n\"]\n+        v = validators.UnicodeUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        valid_usernames = ['validuser']\n+        invalid_usernames = [\"invaliduser\\n\"]\n+        v = validators.ASCIIUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +283,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..5f5504b 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -5,6 +5,8 @@ from django.template import Context\n from django.template.engine import Engine\n from django.test import SimpleTestCase, override_settings\n \n+import os\n+from django.template import Template, TemplateDoesNotExist\n from .utils import ROOT, TEMPLATE_DIR\n \n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n@@ -22,6 +24,22 @@ class RenderToStringTest(SimpleTestCase):\n         )\n \n \n+class RenderToStringAutoescapeTests(SimpleTestCase):\n+\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n class GetDefaultTests(SimpleTestCase):\n \n     @override_settings(TEMPLATES=[])\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..375b9a7 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -330,7 +330,26 @@ class HttpResponseTests(unittest.TestCase):\n         with self.assertRaises(UnicodeError):\n             r.__setitem__('f\u00f8\u00f8'.encode(), 'bar')\n \n-    def test_long_line(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_with_unicode(self):\n+        # Test with unicode characters in memoryview\n+        r = HttpResponse(memoryview(\"caf\u00e9\".encode('utf-8')))\n+        self.assertEqual(r.content, b'caf\\xc3\\xa9')\n+\n+    def test_empty_memoryview_content(self):\n+        # Test with an empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_composite_memoryview_content(self):\n+        # Test composite content with memoryview\n+        part1 = memoryview(b'Hello ')\n+        part2 = memoryview(b'World')\n+        r = HttpResponse(part1 + part2)\n+        self.assertEqual(r.content, b'Hello World')\n         # Bug #20889: long lines trigger newlines to be added to headers\n         # (which is not allowed due to bug #10188)\n         h = HttpResponse()\n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..2244321 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -603,8 +603,34 @@ class TestInlinePermissions(TestCase):\n \n         cls.holder = Holder2.objects.create(dummy=13)\n         cls.inner2 = Inner2.objects.create(dummy=42, holder=cls.holder)\n+    \n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines should not allow adding items.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(response, '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">', html=True)\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n \n-    def setUp(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines should not allow modifying items.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(response, '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">', html=True)\n+        # The field in the inline is read-only.\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(response, '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">', html=True)\n         self.holder_change_url = reverse('admin:admin_inlines_holder2_change', args=(self.holder.id,))\n         self.client.force_login(self.user)\n \n@@ -809,8 +835,34 @@ class TestInlinePermissions(TestCase):\n class SeleniumTests(AdminSeleniumTestCase):\n \n     available_apps = ['admin_inlines'] + AdminSeleniumTestCase.available_apps\n+    \n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines should not allow adding items.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(response, '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">', html=True)\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n \n-    def setUp(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines should not allow modifying items.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(response, '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">', html=True)\n+        # The field in the inline is read-only.\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(response, '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">', html=True)\n         User.objects.create_superuser(username='super', password='secret', email='super@example.com')\n \n     def test_add_stackeds(self):\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..2b91ce7 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,6 +2900,22 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n+    def test_model_to_dict_with_empty_fields(self):\n+        \"\"\"model_to_dict() should return an empty dict if fields=[] is passed.\"\"\"\n+        # Set up a BetterWriter instance\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+\n+        # Empty fields list should result in an empty dict\n+        self.assertEqual(model_to_dict(bw, fields={}), {})\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+        # Specifying some fields should return those fields only\n+        self.assertEqual(sorted(model_to_dict(bw, fields=['name', 'score'])), ['name', 'score'])\n+        self.assertEqual(model_to_dict(bw, fields=['id']), {'id': bw.id})\n+\n+        # Fields not in the model should not be in the dictionary\n+        self.assertEqual(model_to_dict(bw, fields=['non_existent_field']), {})\n+\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..2585a34 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n",
  "django__django-11206": "",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..daa59a8 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -196,7 +197,17 @@ class Comment(models.Model):\n         ordering = ['id']\n \n \n-# Models for lookup ordering tests\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=20)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class House(models.Model):\n     name = models.CharField(max_length=50)\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..5b835ab 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -81,8 +83,57 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_ssl_certificate(self):\n+        \"\"\"\n+        Test handling of SSL parameters passed to the subprocess environment.\n+        \"\"\"\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {\n+                    'PGSSLCERT': 'client.crt',\n+                    'PGSSLKEY': 'client.key',\n+                    'PGSSLMODE': 'verify-ca',\n+                    'PGSSLROOTCERT': 'root.crt',\n+                },\n+                None,\n+            )\n+        )\n+\n+    def test_ssl_certificate_with_password(self):\n+        \"\"\"\n+        Test SSL parameters along with a password being passed.\n+        \"\"\"\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'require',\n+                'sslrootcert': 'ca.crt',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {\n+                    'PGSSLMODE': 'require',\n+                    'PGSSLROOTCERT': 'ca.crt',\n+                },\n+                'somepassword',\n+            )\n+        )\n+\n     def test_sigint_handler(self):\n-        \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n+        \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n             self.assertEqual(handler, signal.SIG_IGN)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..a91f65a 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,7 +98,37 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n-    def test_with_join_and_complex_condition(self):\n+    def test_with_exclude(self):\n+        # Original test case provided in the test patch\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2]\n+        )\n+\n+    def test_exclude_without_match(self):\n+        # Test case when exclude finds no matching records\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by bob')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author1, self.author2]\n+        )\n+\n+    def test_exclude_with_multiple_conditions(self):\n+        # Test case with multiple conditions in FilteredRelation\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation(\n+                    'book', condition=Q(\n+                        Q(book__title__iexact='poem by alice') |\n+                        Q(book__state=Book.RENTED)\n+                    ),\n+                ),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2]\n+        )\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n                 book_alice=FilteredRelation(\n",
  "django__django-11276": "",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..111cdcb 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,7 +243,30 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n+    def test_skip_checks(self):\n+        \"\"\"\n+        Test the --skip-checks option to ensure system checks are skipped.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        # Run the management command with --skip-checks and ensure no errors are reported.\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_run_checks(self):\n+        \"\"\"\n+        Test that system checks are performed when --skip-checks is not provided.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        # Run the management command without --skip-checks and expect errors.\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn(\"The STATICFILES_DIRS setting is not a tuple or list.\", err)\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n         abbreviated forms of the --setting and --pythonpath options.\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..2109f3b 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,9 +1,34 @@\n+\n from django.test import SimpleTestCase\n from django.urls.resolvers import RegexPattern, RoutePattern\n from django.utils.translation import gettext_lazy as _\n+from django.test.utils import override_settings\n+from django.urls.resolvers import get_resolver\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # Resolver for the default URLconf and settings.ROOT_URLCONF should be the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    def test_resolver_cache_different_urlconfs(self):\n+        with override_settings(ROOT_URLCONF='urlpatterns.path_urls'):\n+            resolver_default = get_resolver()\n+            resolver_specific = get_resolver('urlpatterns.path_urls')\n+            self.assertIs(resolver_default, resolver_specific)\n \n+        with override_settings(ROOT_URLCONF='urlpatterns.path_dynamic_urls'):\n+            resolver_dynamic = get_resolver('urlpatterns.path_dynamic_urls')\n+            self.assertIsNot(resolver_specific, resolver_dynamic)\n+            self.assertIsNot(resolver_default, resolver_dynamic)\n \n-class RegexPatternTests(SimpleTestCase):\n+    @override_settings(ROOT_URLCONF=None)\n+    def test_resolver_cache_none_root_urlconf(self):\n+        # Test with ROOT_URLCONF set to None explicitly\n+        resolver_none = get_resolver()\n+        self.assertIsNotNone(resolver_none)\n+        self.assertIs(resolver_none, get_resolver())\n \n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n@@ -12,4 +37,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..8a8f584 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,8 +226,44 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.contrib.auth import authenticate\n+from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_with_username_only(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        username = getattr(self.user, self.UserModel.USERNAME_FIELD)\n+        with self.assertNumQueries(0):\n+            authenticate(username=username)\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_with_password_only(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            authenticate(password='test')\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    def test_authentication_without_password(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            authenticate(username='no_such_user')\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n     \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..063f731 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,20 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_union_change_list_of_columns(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        reserved_name = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name, (2,))\n+        \n+    def test_union_values_list_with_different_orders(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+        reserved_name = qs1.union(qs1).values_list('order', 'name').get()\n+        self.assertEqual(reserved_name, (2, 'a'))\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..136f445 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -11,6 +11,7 @@ from email import charset, message_from_binary_file, message_from_bytes\n from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n+from unittest import mock\n from io import StringIO\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n@@ -360,6 +361,38 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n \n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        delattr(DNS_NAME, '_fqdn')  # Clear the cached DNS name\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--p8s937b', message['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='domain.com')\n+    def test_ascii_dns_with_encoding(self, mocked_getfqdn):\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@domain.com', message['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='another-\u6f22\u5b57')\n+    def test_mixed_unicode_dns(self, mocked_getfqdn):\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'utf-8'\n+        message = email.message()\n+        self.assertIn('@another-xn--p8s937b', message['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6b63\u5b97.\u6f22\u5b57')\n+    def test_multiple_unicode_segments_dns(self, mocked_getfqdn):\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--fiq228c.xn--p8s937b', message['Message-ID'])\n+\n     def test_none_body(self):\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..1c54857 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n@@ -509,8 +510,60 @@ class ListDisplayTests(CheckTestCase):\n \n         self.assertIsValid(TestModelAdmin, ValidationTestModel)\n \n+    def test_custom_field_accessible_only_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_field_in_class_not_descriptor(self):\n+        class TestModel(Model):\n+            field = models.IntegerField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_field_is_many_to_many(self):\n+        class TestModel(Model):\n+            field = models.ManyToManyField('auth.User')\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n \n-class ListDisplayLinksCheckTests(CheckTestCase):\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display' must not be a ManyToManyField.\",\n+            'admin.E109'\n+        )\n+\n+    def test_non_existent_field(self):\n+        class TestModel(Model):\n+            pass\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'non_existent_field', which is not a callable, \"\n+            \"an attribute of 'TestModelAdmin', or an attribute or method on 'tests.modeladmin.test_checks.TestModel'.\",\n+            'admin.E108'\n+        )\n \n     def test_not_iterable(self):\n         class TestModelAdmin(ModelAdmin):\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..9eb44bc 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,8 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, OrderedByFArticle, Reference, ChildArticle\n+from datetime import datetime\n \n \n class OrderingTests(TestCase):\n@@ -456,6 +457,49 @@ class OrderingTests(TestCase):\n         \"\"\"F expressions can be used in Meta.ordering.\"\"\"\n         articles = OrderedByFArticle.objects.all()\n         articles.filter(headline='Article 2').update(author=self.author_2)\n+\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_ordering_with_f_expression_and_order_by(self):\n+        OrderedByFArticle.objects.create(\n+            headline=\"FArticle 1\", \n+            pub_date=datetime(2005, 7, 26),\n+            author=self.author_1\n+        )\n+        OrderedByFArticle.objects.create(\n+            headline=\"FArticle 2\", \n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2\n+        )\n+        fa_articles = OrderedByFArticle.objects.order_by('article_ptr')\n+        self.assertQuerysetEqual(\n+            fa_articles, ['FArticle 1', 'FArticle 2'],\n+            attrgetter('headline')\n+        )\n+\n+    def test_reference_ordering_with_custom_order_by(self):\n+        r1 = Reference.objects.create(article=self.a1)\n+        r2 = Reference.objects.create(article=self.a2)\n+        references = Reference.objects.order_by('article__pub_date')\n+        self.assertSequenceEqual(references, [r1, r2])\n         articles.filter(headline='Article 3').update(author=self.author_1)\n         self.assertQuerysetEqual(\n             articles, ['Article 1', 'Article 4', 'Article 3', 'Article 2'],\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..ddd00a7 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -403,7 +403,17 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(aggs['distinct_ratings'], 4)\n \n-    def test_non_grouped_annotation_not_in_group_by(self):\n+    def test_distinct_on_aggregate(self):\n+        \"\"\"\n+        Test DISTINCT support for Avg and Sum aggregates.\n+        \"\"\"\n+        for aggregate, expected_result in (\n+            (Avg, 4.125),\n+            (Sum, 16.5),\n+        ):\n+            with self.subTest(aggregate=aggregate.__name__):\n+                books = Book.objects.aggregate(ratings=aggregate('rating', distinct=True))\n+                self.assertEqual(books['ratings'], expected_result)\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n",
  "django__django-11740": "",
  "django__django-11749": "",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..ab3ac5e 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,24 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_max_length_attribute_present(self):\n+        data = {\n+            'username': 'user_with_maxlength',\n+            'password': 'password',\n+        }\n+        CustomEmailField.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_max_length_attribute_defaults_to_254(self):\n+        data = {\n+            'username': 'user_with_default_maxlength',\n+            'password': 'password',\n+        }\n+        IntegerUsernameUser.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..d6611cb 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -269,6 +269,27 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum('a-value')\", {'import migrations.test_writer'})\n         )\n+        \n+        # Test for translated enums\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('b-value')\n+        \n+        # Assert that the serialized result uses the enum name, not the translated value\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.A, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('b-value', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\"migrations.test_writer.BinaryEnum(b'a-value')\", {'import migrations.test_writer'})\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..0ed4fad 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,9 +1,11 @@\n+\n import unittest\n from datetime import datetime\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n+from unittest import mock\n from django.utils.http import (\n     base36_to_int, escape_leading_slashes, http_date, int_to_base36,\n     is_safe_url, is_same_domain, parse_etags, parse_http_date, quote_etag,\n@@ -324,9 +326,26 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_year_less_than_70(self):\n-        parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2037, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_two_digit_year(self, mocked_datetime):\n+        \"\"\"Test parsing of RFC 850 dates with two-digit years according to RFC 7231 guidelines.\"\"\"\n+        mocked_datetime.side_effect = datetime\n+        current_year = datetime.now().year  # Let's base tests around the system's current year.\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Define the current date in different year ranges for testing.\n+        utcnow_cases = [\n+            (datetime(current_year, 1, 1, 0, 0, 0), 'Friday, 31-Dec-49 23:59:59 GMT', datetime(2049, 12, 31, 23, 59, 59)),\n+            (datetime(current_year, 1, 1, 0, 0, 0), 'Saturday, 01-Jan-73 00:00:00 GMT', datetime(1973, 1, 1, 0, 0, 0)),\n+            (datetime(current_year, 1, 1, 0, 0, 0), 'Thursday, 31-Dec-19 12:00:00 GMT', datetime(2019, 12, 31, 12, 0, 0)),\n+            (datetime(current_year, 1, 1, 0, 0, 0), 'Friday, 01-Jan-20 00:00:00 GMT', datetime(2020, 1, 1, 0, 0, 0)),\n+        ]\n+\n+        for utcnow, rfc850str, expected_date in utcnow_cases:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n \n class EscapeLeadingSlashesTests(unittest.TestCase):\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..a65a41c 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,24 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Form custom error message.')\n+        \n+        # Modify the error message in the copied field\n+        field_copy.error_messages['invalid'] = 'Modified error message in copy.'\n+        \n+        # Ensure the original field's error_messages is unchanged\n+        self.assertEqual(field.error_messages['invalid'], 'Form custom error message.')\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Modified error message in copy.')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n@@ -3686,6 +3703,8 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertIsInstance(p.files, MultiValueDict)\n \n \n+import copy\n+\n class CustomRenderer(DjangoTemplates):\n     pass\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..f6a2792 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..afea388 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,25 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+class Suit(models.IntegerChoices):\n+    DIAMOND = 1, 'Diamond'\n+    SPADE = 2, 'Spade'\n+    HEART = 3, 'Heart'\n+    CLUB = 4, 'Club'\n+\n+class YearInSchool(models.TextChoices):\n+    FRESHMAN = 'FR', 'Freshman'\n+    SOPHOMORE = 'SO', 'Sophomore'\n+    JUNIOR = 'JR', 'Junior'\n+    SENIOR = 'SR', 'Senior'\n+    GRADUATE = 'GR', 'Graduate'\n+\n+class Vehicle(models.IntegerChoices):\n+    CAR = 1, 'Carriage'\n+    TRUCK = 2, 'Truck'\n+    JET_SKI = 3, 'Jet Ski'\n+    __empty__ = '(Unknown)'\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..ccdc5e9 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,6 +148,20 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.test import TestCase\n+from django.db import models\n+\n+class OverrideGetFieldDisplayTests(TestCase):\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n     def test_choices_and_field_display(self):\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..773b1d8 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -75,6 +75,50 @@ class SchemaIndexesTests(TestCase):\n         index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList)\n         self.assertEqual(len(index_sql), 1)\n \n+    def test_columns_list_sql(self):\n+        # Test for ascending order field with proper whitespace.\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        # Test for descending order field with proper whitespace.\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        # Test for opclasses without ordering with proper whitespace.\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        # Test for opclasses with descending order with proper whitespace.\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n \n @skipIf(connection.vendor == 'postgresql', 'opclasses are PostgreSQL only')\n class SchemaIndexesNotPostgreSQLTests(TransactionTestCase):\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..d828842 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,6 +8,9 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n+from django.db.models import Q\n+from django.db.models.lookups import Exact\n+from .models import Item\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n@@ -107,7 +111,29 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_iterable_lookup_value(self):\n+        # Test that the list input for the exact lookup is maintained as a list\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_tuple_input_retains_tuple(self):\n+        # Test that tuple input remains unchanged as a tuple\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n+\n+    def test_non_iterable_input(self):\n+        # Test non-iterable input remains unchanged\n+        query = Query(Item)\n+        where = query.build_where(Q(name='a'))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, 'a')\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..9abcf08 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -340,8 +340,35 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntEnum['B'])], \"\n             \"default=migrations.test_writer.IntEnum['A'])\"\n         )\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n \n-    def test_serialize_choices(self):\n+        class ModelWithInnerField(models.Model):\n+            field = Outer.Inner(max_length=100)\n+\n+        field = ModelWithInnerField._meta.get_field('field')\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"tests.migrations.test_writer.Outer.Inner(max_length=100)\"\n+        )\n+\n+    def test_serialize_nested_enum(self):\n+        class TestModel(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+            state = EnumField(State)\n+\n+        field = TestModel._meta.get_field('state')\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"enumfields.fields.EnumField(max_length=3, enum=tests.migrations.test_writer.TestModel.State)\"\n+        )\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n             B = 'B', 'B value'\n@@ -746,4 +773,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..a1d7f01 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -844,6 +844,29 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n+    def test_get_list_editable_queryset_with_special_regex_chars_in_prefix(self):\n+        \"\"\"Test with prefixes containing regex special characters.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow Regex Test', load=5, speed=3)\n+        Swallow.objects.create(origin='Swallow Regex Other', load=3, speed=4)\n+        # Data with special regex character '$' in the prefix\n+        special_prefix = 'form$'\n+        data = {\n+            f'{special_prefix}-TOTAL_FORMS': '2',\n+            f'{special_prefix}-INITIAL_FORMS': '2',\n+            f'{special_prefix}-MIN_NUM_FORMS': '0',\n+            f'{special_prefix}-MAX_NUM_FORMS': '1000',\n+            f'{special_prefix}-0-uuid': str(a.pk),\n+            f'{special_prefix}-0-load': '8',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix=special_prefix)\n+        self.assertEqual(queryset.count(), 1)\n+\n     def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..d86e087 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -94,6 +95,25 @@ class TestUtils(AdminDocsSimpleTestCase):\n         header = 'should be h3...\\n\\nHeader\\n------\\n'\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n+    \n+    def test_trim_docstring_with_first_line_content(self):\n+        docstring = \"\"\"Title\n+        Description line 1\n+        Description line 2\"\"\"\n+        \n+        expected_trimmed = \"Title\\nDescription line 1\\nDescription line 2\"\n+        \n+        self.assertEqual(trim_docstring(docstring), expected_trimmed)\n+\n+    def test_trim_docstring_with_first_line_and_empty_second_line(self):\n+        docstring = \"\"\"Title\n+\n+        Description line 1\n+        Description line 2\"\"\"\n+        \n+        expected_trimmed = \"Title\\n\\nDescription line 1\\nDescription line 2\"\n+        \n+        self.assertEqual(trim_docstring(docstring), expected_trimmed)\n \n     def test_parse_rst(self):\n         \"\"\"\n",
  "django__django-12193": "diff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 5c5e45d..3e4b974 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -88,4 +88,21 @@ class CheckboxInputTest(WidgetTest):\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+\n+    def test_get_context_does_not_mutate_attrs(self):\n+        widget = forms.CheckboxInput()\n+        attrs = {'checked': False}\n+        widget.get_context('name', True, attrs)\n+        self.assertIs(attrs['checked'], False)\n+\n+    def test_checkbox_get_context_attrs(self):\n+        context = forms.SplitArrayWidget(\n+            forms.CheckboxInput(),\n+            size=2,\n+        ).get_context('name', [True, False])\n+        self.assertEqual(context['widget']['value'], '[True, False]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}]\n+        )\n+        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n",
  "django__django-12209": "",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..24f3bce 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,8 +77,42 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37\\n'),\n         ]\n \n+    def test_keyword_only_argument_handling(self):\n+        # Test cases for correct handling of keyword-only arguments in custom template tags\n+        templates = [\n+            ('{% load custom %}{% simple_keyword_only_default %}', \n+                'simple_keyword_only_default - Expected result: 42'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}', \n+                'simple_keyword_only_default - Expected result: 37'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            (\"'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}'),\n+        ]\n+\n+        errors = [\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            (\"'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}'),\n+        ]\n+\n+        # Render templates and check expected output\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(Context()), entry[1])\n+\n+        # Ensure correct exceptions are raised for invalid templates\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -101,8 +135,42 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37\\n'),\n+        ]\n+\n+    def test_keyword_only_argument_handling(self):\n+        # Test cases for correct handling of keyword-only arguments in custom template tags\n+        templates = [\n+            ('{% load custom %}{% simple_keyword_only_default %}', \n+                'simple_keyword_only_default - Expected result: 42'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}', \n+                'simple_keyword_only_default - Expected result: 37'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            (\"'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}'),\n+        ]\n+\n+        errors = [\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            (\"'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}'),\n         ]\n \n+        # Render templates and check expected output\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(Context()), entry[1])\n+\n+        # Ensure correct exceptions are raised for invalid templates\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -190,8 +258,42 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37\\n'),\n+        ]\n+\n+    def test_keyword_only_argument_handling(self):\n+        # Test cases for correct handling of keyword-only arguments in custom template tags\n+        templates = [\n+            ('{% load custom %}{% simple_keyword_only_default %}', \n+                'simple_keyword_only_default - Expected result: 42'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}', \n+                'simple_keyword_only_default - Expected result: 37'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            (\"'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}'),\n         ]\n \n+        errors = [\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            (\"'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}'),\n+        ]\n+\n+        # Render templates and check expected output\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(Context()), entry[1])\n+\n+        # Ensure correct exceptions are raised for invalid templates\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..6ab5366 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2431,6 +2432,14 @@ Password: <input type=\"password\" name=\"password\" required>\n         )\n \n         f = FileForm(data={}, files={}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # New test case: ensure the form doesn't mark the field as required\n+        # if initial data is provided during submission\n+        f = FileForm(data={}, files={}, initial={'file1': 'existing_file.txt'}, auto_id=False)\n         self.assertHTMLEqual(\n             f.as_table(),\n             '<tr><th>File1:</th><td>'\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..e91e6bd 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -6,6 +7,7 @@ import uuid\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -143,7 +145,18 @@ class ChoicesTests(SimpleTestCase):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n-    def test_str(self):\n+    def test_enum_in_templates(self):\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        output = template.render(Context({'Suit': Suit}))\n+        self.assertEqual(output, 'Diamond|1')\n+\n+        template = Template('{% if Suit.DIAMOND == 1 %}True{% endif %}')\n+        output = template.render(Context({'Suit': Suit}))\n+        self.assertEqual(output, 'True')\n+\n+        template = Template('{% if Suit.SPADE == Suit.SPADE %}Equal{% else %}Not Equal{% endif %}')\n+        output = template.render(Context({'Suit': Suit}))\n+        self.assertEqual(output, 'Equal')\n         for test in [Gender, Suit, YearInSchool, Vehicle]:\n             for member in test:\n                 with self.subTest(member=member):\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..3726adb 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1014,8 +1014,24 @@ class OtherModelTests(SimpleTestCase):\n \n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n-\n-    def test_m2m_table_name_clash(self):\n+    \n+    def test_onetoone_multiple_references_order_independence(self):\n+        class Document(models.Model):\n+            pass\n+        \n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+        \n+        # Check that the original setup does not cause configuration error when order is document_ptr, origin\n+        self.assertEqual(Picking.check(), [])\n+\n+        class PickingReverse(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        # Check that even if the fields are reversed, it should still not cause a configuration error\n+        self.assertEqual(PickingReverse.check(), [])\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..be4905b 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -246,7 +246,17 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         for value, expected in tests:\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n-\n+    \n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        Test that the default SECURE_REFERRER_POLICY is 'same-origin'.\n+        \"\"\"\n+        # Simulate default settings without SECURE_REFERRER_POLICY explicitly set\n+        # Assume the default is 'same-origin'\n+        response = self.process_response()\n+        self.assertEqual(response.get('Referrer-Policy'), 'same-origin')\n+  \n     @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n@@ -254,4 +264,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..dfed996 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,6 +13,8 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+from django.contrib.auth.models import User\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n@@ -26,8 +28,50 @@ from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n )\n+class BugTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.jordan = Employee.objects.create(firstname=\"Jordan\", lastname=\"Ephron\")\n+\n+    def test_subquery_filter_with_simplelazyobject(self):\n+        # Setup data for the test involving SimpleLazyObject\n+        user_complex = SimpleLazyObject(lambda: User.objects.create_user(\"complex_user\"))\n+        manager = Manager.objects.create(name=\"Test Manager\")\n+        cls.jordan.manager = manager\n+        cls.jordan.save()\n+\n+        # Create a lazy object for manager\n+        lazy_manager = SimpleLazyObject(lambda: Manager.objects.get(pk=manager.pk))\n+\n+        # Create the queryset\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname')\n+                ).values('manager')\n+            )\n+        ).filter(ceo_manager=lazy_manager)\n+\n+        # Check if we retrieve the proper company\n+        self.assertEqual(qs.count(), 0)  # No company to match with empty setup\n+\n+        # Create a company with matching criteria\n+        Company.objects.create(\n+            name=\"Matching Corp.\", ceo=self.jordan\n+        )\n+\n+        # Now the queryset should yield one company\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname')\n+                ).values('manager')\n+            )\n+        ).filter(ceo_manager=lazy_manager)\n \n+        self.assertEqual(qs.get().ceo, self.jordan)\n \n+    \n class BasicExpressionsTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..11ccab0 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -18,6 +18,7 @@ from django.db.models import CharField, DateField, DateTimeField, UUIDField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n+from django.db.models import ManyToManyField\n \n from .models import (\n     Advisor, Album, Band, Bee, Car, Company, Event, Honeycomb, Individual,\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..58014cb 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,13 +2444,95 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    from django.db import models\n+    from django.test import SimpleTestCase\n+    from django.db.migrations.state import ModelState\n+    from django.db.migrations.autodetector import MigrationAutodetector\n+    from django.db.migrations.graph import MigrationGraph\n+\n+    class MigrationAutodetectorTestCase(SimpleTestCase):\n+        def setUp(self):\n+            self.graph = MigrationGraph()\n+            self.detector = MigrationAutodetector([], self.graph)\n+\n+        def get_changes(self, before, after):\n+            return self.detector.changes(\n+                {\n+                    \"app\": before,\n+                },\n+                {\n+                    \"app\": after,\n+                },\n+            )\n \n+        def assertNumberMigrations(self, changes, app_label, number):\n+            self.assertEqual(len(changes.get(app_label, [])), number)\n+\n+        def assertOperationTypes(self, changes, app_label, migration_index, op_types):\n+            migration = changes[app_label][migration_index]\n+            self.assertEqual([type(op).__name__ for op in migration.operations], op_types)\n+\n+        def assertOperationAttributes(self, changes, app_label, migration_index, op_index, **attributes):\n+            operation = changes[app_label][migration_index].operations[op_index]\n+            for key, value in attributes.items():\n+                self.assertEqual(getattr(operation, key), value)\n+\n+    class ModelMigrationTests(MigrationAutodetectorTestCase):\n+\n+        def test_add_model_with_field_removed_from_base_model(self):\n+            \"\"\"\n+            Removing a base field takes place before adding a new inherited model\n+            that has a field with the same name.\n+            \"\"\"\n+            before = [\n+                ModelState('app', 'readable', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('title', models.CharField(max_length=200)),\n+                ]),\n+            ]\n+            after = [\n+                ModelState('app', 'readable', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                ]),\n+                ModelState('app', 'book', [\n+                    ('title', models.CharField(max_length=200)),\n+                ], bases=('app.readable',)),\n+            ]\n+            changes = self.get_changes(before, after)\n+            self.assertNumberMigrations(changes, 'app', 1)\n+            self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+            self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+            self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n+\n+        def test_reverse_operations_order(self):\n+            \"\"\"\n+            Ensure that if the operations are reversed in order, they should still fail due to field clash.\n+            \"\"\"\n+            before = [\n+                ModelState('app', 'readable', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('title', models.CharField(max_length=200)),\n+                ]),\n+            ]\n+            after = [\n+                ModelState('app', 'readable', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                ]),\n+                ModelState('app', 'book', [\n+                    ('title', models.CharField(max_length=200)),\n+                ], bases=('app.readable',)),\n+            ]\n+            # Reverse the changes to simulate the failure condition\n+            changes = self.get_changes(after, before)\n+            with self.assertRaises(Exception) as cm:\n+                self.detector.arrange_for_graph()\n+            self.assertIn(\"clashes with field of the same name\", str(cm.exception))\n     def test_mti_inheritance_model_removal(self):\n-        Animal = ModelState('app', 'Animal', [\n+        Animal = ModelState(\"app\", \"Animal\", [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n         Dog = ModelState('app', 'Dog', [], bases=('app.Animal',))\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/models.py b/tests/lookup/models.py\nindex 28992d4..73535dc 100644\n--- a/tests/lookup/models.py\n+++ b/tests/lookup/models.py\n@@ -70,8 +70,13 @@ class Season(models.Model):\n     def __str__(self):\n         return str(self.year)\n \n+class Article(models.Model):\n+    slug = models.CharField(max_length=255)\n \n-class Game(models.Model):\n+    class Meta:\n+        constraints = [\n+            models.UniqueConstraint(fields=[\"slug\"], name=\"lookup_article_slug_unq\"),\n+        ]\n     season = models.ForeignKey(Season, models.CASCADE, related_name='games')\n     home = models.CharField(max_length=100)\n     away = models.CharField(max_length=100)\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..8b2a7f6 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -905,6 +905,34 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(Child.check(), [])\n \n+    def test_ordering_invalid_lookup_rasies_error(self):\n+        class Model(models.Model):\n+            test = models.CharField(max_length=100)\n+\n+            class Meta:\n+                ordering = ('test__invalid_lookup',)\n+\n+        errors = Model.check()\n+        self.assertTrue(any(e.id == 'models.E015' for e in errors))\n+\n+    def test_ordering_with_isnull(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n+\n     def test_ordering_pointing_to_foreignkey_field(self):\n         class Parent(models.Model):\n             pass\n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..8aba627 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1820,11 +1820,30 @@ class CombinableTests(SimpleTestCase):\n     def test_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n-\n-    def test_reversed_and(self):\n+    class ExpressionWrapperTests(SimpleTestCase):\n+        def test_empty_group_by(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+        def test_non_empty_group_by(self):\n+            expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+        def test_constant_expression_not_in_group_by(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            queryset = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+            sql, params = queryset.query.sql_with_params()\n+            self.assertNotIn('GROUP BY \"column_a\", 3', sql)\n+            self.assertIn('GROUP BY \"column_a\"', sql)\n+\n+        def test_variable_expression_in_group_by(self):\n+            expr = ExpressionWrapper(Lower(F('column_some')), output_field=IntegerField())\n+            queryset = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+            sql, params = queryset.query.sql_with_params()\n+            self.assertIn('GROUP BY \"expr_res\", \"column_a\"', sql)\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..e492173 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1210,8 +1210,24 @@ class Queries1Tests(TestCase):\n             [],\n         )\n \n-\n-class Queries2Tests(TestCase):\n+class FilterableFieldTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.e2 = ExtraInfo.objects.create(info='e2', note=cls.n2, value=41, filterable=False)\n+        cls.a3 = Author.objects.create(name='a3', num=3003, extra=cls.e2)\n+\n+    def test_filter_with_non_filterable_field(self):\n+        with self.assertRaises(NotSupportedError):\n+            # Attempting to filter with a non-filterable field should raise an error\n+            _ = Author.objects.filter(extra=self.e2)\n+\n+    def test_filter_with_filterable_field(self):\n+        # To ensure the same filtering doesn't raise the error when the field is meant to be filterable\n+        extra_info = ExtraInfo.objects.create(info='e4', note=self.note, value=35, filterable=True)\n+        author = Author.objects.create(name='a5', num=5005, extra=extra_info)\n+        # Should not raise any errors\n+        authors = Author.objects.filter(extra=extra_info)\n+        self.assertIn(author, authors)\n     @classmethod\n     def setUpTestData(cls):\n         Number.objects.create(num=4)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..1090a69 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,30 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referencing_fk(self):\n+        # Setting up the test data\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+\n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article_2 = Article.objects.create(author=author_1, headline=\"Article 2\", pub_date=\"2023-01-02\")\n+        article_3 = Article.objects.create(author=author_2, headline=\"Article 3\", pub_date=\"2023-01-03\")\n+        article_4 = Article.objects.create(author=author_2, headline=\"Article 4\", pub_date=\"2023-01-04\")\n+\n+        # Testing ordering by self-referential foreign key using `_id`\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            [\"Article 1\", \"Article 2\", \"Article 3\", \"Article 4\"],\n+            attrgetter(\"headline\")\n+        )\n+\n+        # Testing ordering and ensuring avoidance of unnecessary joins\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).annotate(editor_id=F('author__editor_id')).order_by('editor_id'),\n+            [\"Article 1\", \"Article 2\", \"Article 3\", \"Article 4\"],\n+            attrgetter(\"headline\")\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +377,30 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_order_by_self_referencing_fk(self):\n+        # Setting up the test data\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+\n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article_2 = Article.objects.create(author=author_1, headline=\"Article 2\", pub_date=\"2023-01-02\")\n+        article_3 = Article.objects.create(author=author_2, headline=\"Article 3\", pub_date=\"2023-01-03\")\n+        article_4 = Article.objects.create(author=author_2, headline=\"Article 4\", pub_date=\"2023-01-04\")\n+\n+        # Testing ordering by self-referential foreign key using `_id`\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            [\"Article 1\", \"Article 2\", \"Article 3\", \"Article 4\"],\n+            attrgetter(\"headline\")\n+        )\n+\n+        # Testing ordering and ensuring avoidance of unnecessary joins\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).annotate(editor_id=F('author__editor_id')).order_by('editor_id'),\n+            [\"Article 1\", \"Article 2\", \"Article 3\", \"Article 4\"],\n+            attrgetter(\"headline\")\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..0553970 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -21,6 +21,8 @@ class Category(models.Model):\n     slug = models.SlugField(max_length=20)\n     url = models.CharField('The URL', max_length=40)\n \n+    archived = models.BooleanField(default=False, editable=False)\n+    \n     def __str__(self):\n         return self.name\n \n@@ -34,6 +36,8 @@ class Writer(models.Model):\n     class Meta:\n         ordering = ('name',)\n \n+    archived = models.BooleanField(default=False, editable=False)\n+    \n     def __str__(self):\n         return self.name\n \n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..f7f1d1a 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,33 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+from django.apps import Apps\n+from django.db import models\n+from django.db.migrations.state import ProjectState, ModelState\n+\n+class TestMixedCaseAppName(TestCase):\n+    def test_reference_mixed_case_app_label(self):\n+        new_apps = Apps()\n+\n+        class Author(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        # Ensure all models are correctly registered within this app\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Author))\n+        project_state.add_model(ModelState.from_model(Book))\n+        \n+        # The test ensures that all added models are available in the mock app registry\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..5653778 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1209,14 +1209,92 @@ class ExpressionOperatorTests(TestCase):\n         Number.objects.filter(pk=self.n.pk).update(integer=F('integer') ** 2, float=F('float') ** 1.5)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n+    from datetime import timedelta\n+    from django.db.models import F\n+    from django.test import TestCase\n+    from .models import Experiment\n+\n+    class DurationFieldTests(TestCase):\n+        @classmethod\n+        def setUpTestData(cls):\n+            cls.deltas = [timedelta(days=1), timedelta(hours=6), timedelta(minutes=30), timedelta(seconds=45)]\n+            cls.experiments = [\n+                Experiment.objects.create(estimated_time=timedelta(days=1)),\n+                Experiment.objects.create(estimated_time=timedelta(hours=5, minutes=30)),\n+                Experiment.objects.create(estimated_time=timedelta(minutes=15)),\n+            ]\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+        def test_duration_expressions(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n+        def test_subtract_duration(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') - delta)\n+                for obj in qs:\n+                    expected = obj.estimated_time - delta\n+                    self.assertEqual(obj.duration, expected)\n+\n+        def test_multiply_duration(self):\n+            for factor in [0, 0.5, 1, 2]:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') * factor)\n+                for obj in qs:\n+                    expected = obj.estimated_time * factor\n+                    self.assertEqual(obj.duration, expected)\n+\n+        def test_divide_duration(self):\n+            for divisor in [1, 2, 4]:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') / divisor)\n+                for obj in qs:\n+                    expected = obj.estimated_time / divisor\n+                    self.assertEqual(obj.duration, expected)\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n+    from datetime import timedelta\n+    from django.db.models import F\n+    from django.test import TestCase\n+    from .models import Experiment\n+\n+    class DurationFieldTests(TestCase):\n+        @classmethod\n+        def setUpTestData(cls):\n+            cls.deltas = [timedelta(days=1), timedelta(hours=6), timedelta(minutes=30), timedelta(seconds=45)]\n+            cls.experiments = [\n+                Experiment.objects.create(estimated_time=timedelta(days=1)),\n+                Experiment.objects.create(estimated_time=timedelta(hours=5, minutes=30)),\n+                Experiment.objects.create(estimated_time=timedelta(minutes=15)),\n+            ]\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+        def test_duration_expressions(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n+        def test_subtract_duration(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') - delta)\n+                for obj in qs:\n+                    expected = obj.estimated_time - delta\n+                    self.assertEqual(obj.duration, expected)\n+\n+        def test_multiply_duration(self):\n+            for factor in [0, 0.5, 1, 2]:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') * factor)\n+                for obj in qs:\n+                    expected = obj.estimated_time * factor\n+                    self.assertEqual(obj.duration, expected)\n+\n+        def test_divide_duration(self):\n+            for divisor in [1, 2, 4]:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') / divisor)\n+                for obj in qs:\n+                    expected = obj.estimated_time / divisor\n+                    self.assertEqual(obj.duration, expected)\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n         Employee.objects.update(salary=F('salary').bitxor(48))\n",
  "django__django-13128": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..d97b642 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -4,7 +4,8 @@ from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n-from .models import Number, ReservedName\n+from django import forms\n+from .models import Number, ReservedName, Publication\n \n \n @skipUnlessDBFeature('supports_select_union')\n@@ -39,7 +40,22 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    @skipUnlessDBFeature('supports_select_difference')\n+    def test_union_with_empty_form_submission(self):\n+        # Simulate the issue in the description with Publication model\n+        class ArticleForm(forms.ModelForm):\n+            publications = forms.ModelMultipleChoiceField(\n+                Publication.objects.filter(id__lt=2).union(\n+                    Publication.objects.filter(id__gt=5)\n+                ),\n+                required=False,\n+            )\n+\n+            class Meta:\n+                model = Number  # Using Number because we lack Article & Publication in this context\n+                fields = [\"publications\"]\n+\n+        form = ArticleForm({'publications': []})  # Simulate empty submission\n+        self.assertFalse(form.is_valid())  # Check if form processing is consistent with expectations.\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n         qs2 = Number.objects.filter(num__lte=4)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..4288496 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,8 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.contrib.sessions.backends.base import SessionBase\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -330,6 +332,15 @@ class SessionTestsMixin:\n         # The failed decode is logged.\n         self.assertIn('corrupted', cm.output[0])\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_sha1(self):\n+        \"\"\"Test decoding of legacy session data with DEFAULT_HASHING_ALGORITHM set to 'sha1'.\"\"\"\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'another test key': 'another test value'}\n+            session = self.backend()\n+            encoded = session.encode(data)\n+            self.assertEqual(session._legacy_decode(encoded), data)\n+\n     def test_actual_expiry(self):\n         # this doesn't work with JSONSerializer (serializing timedelta)\n         with override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer'):\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..96cfd6a 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -2,6 +2,7 @@ import time\n \n from django.core.exceptions import ImproperlyConfigured\n from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n )\n@@ -590,7 +591,24 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        # Test case for issue with SimpleLazyObject in get_context_data kwargs\n+        class OfferView(TemplateView):\n+            template_name = 'offers/offer.html'\n+\n+            def get_context_data(self, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                # Ensure offer_slug is str to avoid SimpleLazyObject issue\n+                offer = get_object_or_404(Artist, name=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        # Assuming 'Artist' is used here for the test scenario\n+        artist = Artist.objects.create(name='Vincent van Gogh')\n+        response = OfferView.as_view()(self.rf.get('/dummy-path/'), offer_slug=artist.name)\n+        self.assertEqual(response.context_data['offer'], artist)\n+        self.assertEqual(response.context_data['offer_slug'], artist.name)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..7ac7009 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -17,6 +17,7 @@ from django.forms.models import (\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n+from django.test.utils import isolate_apps\n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n     Category, Character, Colour, ColourfulItem, CustomErrorMessage, CustomFF,\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..10e7552 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -82,13 +82,17 @@ class FileSystemStorageTests(unittest.TestCase):\n         path, args, kwargs = storage.deconstruct()\n         self.assertEqual(kwargs, kwargs_orig)\n \n-    def test_lazy_base_url_init(self):\n+    def test_deconstruct_filefield_with_callable_storage(self):\n         \"\"\"\n-        FileSystemStorage.__init__() shouldn't evaluate base_url.\n+        Test deconstruction of a FileField with callable storage to ensure\n+        it references the original callable.\n         \"\"\"\n-        storage = FileSystemStorage(base_url=reverse_lazy('app:url'))\n-        with self.assertRaises(NoReverseMatch):\n-            storage.url(storage.base_url)\n+        obj = Storage()\n+        field = obj._meta.get_field('storage_callable')\n+        _, _, kwargs = field.deconstruct()\n+        \n+        # Ensure the 'storage' in kwargs is the callable, not the evaluated storage object\n+        self.assertIs(kwargs['storage'], callable_storage)\n \n \n class FileStorageTests(SimpleTestCase):\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..1dcf973 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,6 +623,18 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n+    def test_key_in(self):\n+        tests = [\n+            ('value__key__in', [0], self.objs[:]),  # Example with an expected result list\n+            ('value__key__in', [1], []),            # Alter according to real data expectation\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n+\n     def test_key_iexact(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..af08140 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -19,6 +19,8 @@ from django.test import (\n )\n from django.utils import timezone\n \n+import pytz\n+from datetime import datetime\n from ..models import Author, DTModel, Fan\n \n \n@@ -1111,7 +1113,45 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n             self.assertEqual(model.day_melb, 16)\n             self.assertEqual(model.day_utc, 15)\n \n-    def test_trunc_timezone_applied_before_truncation(self):\n+    def test_trunc_date_with_tzinfo(self):\n+        # Test setup\n+        start_datetime = datetime(2023, 10, 15, 18, 30, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.UTC)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        # Define timezones\n+        melb = pytz.timezone(\"Australia/Melbourne\")\n+        new_york = pytz.timezone(\"America/New_York\")\n+\n+        # Annotate using TruncDate with tzinfo\n+        model = DTModel.objects.annotate(\n+            date_melb=TruncDate(\"start_datetime\", tzinfo=melb),\n+            date_ny=TruncDate(\"start_datetime\", tzinfo=new_york),\n+        ).get()\n+\n+        # Check if conversion worked as expected\n+        self.assertEqual(model.date_melb, start_datetime.astimezone(melb).date())\n+        self.assertEqual(model.date_ny, start_datetime.astimezone(new_york).date())\n+    \n+    def test_trunc_time_with_tzinfo(self):\n+        # Test setup\n+        start_datetime = datetime(2023, 10, 15, 18, 30, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.UTC)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        # Define timezones\n+        melb = pytz.timezone(\"Australia/Melbourne\")\n+        new_york = pytz.timezone(\"America/New_York\")\n+\n+        # Annotate using TruncTime with tzinfo\n+        model = DTModel.objects.annotate(\n+            time_melb=TruncTime(\"start_datetime\", tzinfo=melb),\n+            time_ny=TruncTime(\"start_datetime\", tzinfo=new_york),\n+        ).get()\n+\n+        # Check if conversion worked as expected\n+        self.assertEqual(model.time_melb, start_datetime.astimezone(melb).time())\n+        self.assertEqual(model.time_ny, start_datetime.astimezone(new_york).time())\n         start_datetime = datetime(2016, 1, 1, 1, 30, 50, 321)\n         end_datetime = datetime(2016, 6, 15, 14, 10, 50, 123)\n         start_datetime = timezone.make_aware(start_datetime, is_dst=False)\n",
  "django__django-13401": "",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..a71f90a 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -6,6 +7,7 @@ import tempfile\n import unittest\n from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n+from django.core.files import locks\n from unittest import mock\n \n from django.core.files import File\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..8db9685 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,26 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Tag.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Tag.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_group_by_default_ordering_with_aggregation(self):\n+        qs = Foo.objects.values('name').annotate(count=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_group_by_with_meta_ordering_and_aggregation(self):\n+        qs = Foo.objects.annotate(count=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..f97ee17 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models.with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,6 +39,36 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_invalid_after_email_change(self):\n+        \"\"\"Updating the user email address should invalidate existing tokens.\"\"\"\n+        # Create a user with an initial email and generate a reset token.\n+        user = User.objects.create_user('changeemailuser', 'test4@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        token_before_change = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, token_before_change), True)\n+\n+        # Change the user's email address.\n+        user.email = 'newemail@example.com'\n+        user.save()\n+\n+        # The original token should now be invalid.\n+        self.assertIs(p0.check_token(user, token_before_change), False)\n+\n+        # Repeat the same test using the CustomEmailField model.\n+\n+        custom_user = CustomEmailField.objects.create_user(\n+            'customchangeemailuser', 'customtest@example.com', 'testpw'\n+        )\n+        token_for_custom_user = p0.make_token(custom_user)\n+        self.assertIs(p0.check_token(custom_user, token_for_custom_user), True)\n+\n+        # Change the CustomEmailField user's email address.\n+        setattr(custom_user, custom_user.get_email_field_name(), 'customnewemail@example.com')\n+        custom_user.save()\n+\n+        # The original token should now be invalid for the CustomEmailField user.\n+        self.assertIs(p0.check_token(custom_user, token_for_custom_user), False)\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..5efdff4 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -10,6 +11,7 @@ from django.test import (\n from django.test.utils import isolate_apps\n \n from .models import CustomUserNonUniqueUsername\n+from django.db.models import Q, UniqueConstraint\n \n \n @isolate_apps('auth_tests', attr_name='apps')\n@@ -138,7 +140,63 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UniqueConstraintNoCondition')\n+    def test_username_unique_constraint_no_condition(self):\n+        \"\"\"\n+        Test when a UniqueConstraint is used for the USERNAME_FIELD without any condition.\n+        This should pass without any error or warning, as the constraint satisfies the need\n+        for uniqueness of USERNAME_FIELD.\n+        \"\"\"\n+        class UniqueConstraintNoCondition(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_no_condition_unique'),\n+                ]\n+\n+        # No error should be raised as the USERNAME_FIELD 'username' is covered by a UniqueConstraint\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UniqueConstraintWithCondition')\n+    def test_username_unique_constraint_with_condition(self):\n+        \"\"\"\n+        Test when a UniqueConstraint is used for the USERNAME_FIELD with a condition.\n+        This should initially report auth.E003 due to partial uniqueness, but only issue\n+        a warning when a custom backend is set.\n+        \"\"\"\n+        class UniqueConstraintWithCondition(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_partially_cond_unique', condition=Q(password__isnull=False)),\n+                ]\n+\n+        # Initially, expect an auth.E003 error because the uniqueness is conditional\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'UniqueConstraintWithCondition.username' must be unique because it is named as the 'USERNAME_FIELD'.\",\n+                obj=UniqueConstraintWithCondition,\n+                id='auth.E003',\n+            ),\n+        ])\n+\n+        # With a custom backend, expect only a warning about non-unique usernames\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [\n+                checks.Warning(\n+                    \"'UniqueConstraintWithCondition.username' is named as the 'USERNAME_FIELD', but it is not unique.\",\n+                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                    obj=UniqueConstraintWithCondition,\n+                    id='auth.W004',\n+                ),\n+            ])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..4307540 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -884,6 +885,28 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_with_namedtuple(self):\n+        # Original test case to verify the fix\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+        \n+        # Additional test case with different values to ensure coverage\n+        EmployeeRange = namedtuple('EmployeeRange', ['min_emp', 'max_emp'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(min_emp=0, max_emp=50),\n+        )\n+        self.assertQuerysetEqual(\n+            qs,\n+            [\n+                '<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>',\n+                '<Company: 5060 Ltd>',\n+            ],\n+            ordered=False\n+        )\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..40463e9 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -16,6 +16,7 @@ from unittest import mock\n \n from django import conf, get_version\n from django.conf import settings\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n@@ -31,8 +32,28 @@ from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+class CommandParserProgNameTests(SimpleTestCase):\n+    def test_prog_name_from_argv(self):\n+        \"\"\"\n+        Verify that CommandParser receives the correct prog name derived from argv.\n+        \"\"\"\n+        args = ['check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['mycustomadmin'] + args)\n+        self.assertIn('usage: mycustomadmin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n \n-custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n+    def test_prog_name_with_main_py(self):\n+        \"\"\"\n+        Test the scenario where prog_name is '__main__.py', ensuring it sets to 'python -m django'.\n+        \"\"\"\n+        args = ['check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['python', '-m', 'django'] + args)\n+        self.assertIn('usage: python -m django check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..b46aea8 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -145,8 +146,21 @@ class DateFormatTests(SimpleTestCase):\n \n         # Ticket #16924 -- We don't need timezone support to test this\n         self.assertEqual(dateformat.format(aware_dt, 'O'), '-0330')\n-\n-    def test_invalid_time_format_specifiers(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (1000, '00'),\n+            (2023, '23'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = date(1984, 8, 7)\n \n         for specifier in ['a', 'A', 'f', 'g', 'G', 'h', 'H', 'i', 'P', 'r', 's', 'u']:\n@@ -164,4 +178,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..60afec5 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,7 +1020,15 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n+    def test_readonly_field_submission(self):\n+        field = ReadOnlyPasswordHashField()\n+        initial_value = \"initial_hash_value\"\n+        data_value = \"tampered_hash_value\"\n+        self.assertEqual(field.bound_data(data_value, initial_value), initial_value)\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..d6f3ed7 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,7 +1,9 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy, lazy\n \n from ..utils import setup\n \n@@ -46,6 +48,43 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_direct_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n+    @setup({'add10': '{{ string|add:lazy_int }}'})\n+    def test_add10(self):\n+        output = self.engine.render_to_string(\n+            'add10',\n+            {'string': 'Result is: ', 'lazy_int': lazy(lambda: 10, int)},\n+        )\n+        self.assertEqual(output, 'Result is: 10')\n+\n+    @setup({'add11': '{{ lazy_str|add:int_value }}'})\n+    def test_add11(self):\n+        output = self.engine.render_to_string(\n+            'add11',\n+            {'lazy_str': gettext_lazy('The answer is: '), 'int_value': 42},\n+        )\n+        self.assertEqual(output, 'The answer is: 42')\n+\n \n class FunctionTests(SimpleTestCase):\n \n",
  "django__django-13807": "",
  "django__django-13809": "",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..b1f097e 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -187,6 +188,39 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n     ROOT_URLCONF='middleware_exceptions.urls',\n )\n class MiddlewareSyncAsyncTests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call_new(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    def test_async_and_sync_middleware_chain_sync_call(self):\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n@@ -194,6 +228,39 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call_new(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    def test_async_and_sync_middleware_chain_sync_call(self):\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.DecoratedPaymentMiddleware',\n     ])\n@@ -201,6 +268,39 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call_new(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    def test_async_and_sync_middleware_chain_sync_call(self):\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n@@ -215,6 +315,39 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call_new(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    def test_async_and_sync_middleware_chain_sync_call(self):\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware',\n     ])\n@@ -227,6 +360,39 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             self.client.get('/middleware_exceptions/view/')\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call_new(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    def test_async_and_sync_middleware_chain_sync_call(self):\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n@@ -240,6 +406,39 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"middleware_exceptions.middleware.PaymentMiddleware adapted.\",\n         )\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call_new(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    def test_async_and_sync_middleware_chain_sync_call(self):\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n@@ -266,6 +465,39 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             self.client.get('/middleware_exceptions/template_response/')\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call_new(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    def test_async_and_sync_middleware_chain_sync_call(self):\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n@@ -274,6 +506,39 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         self.assertEqual(response.content, b'OK')\n         self.assertEqual(response.status_code, 200)\n \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call_new(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    def test_async_and_sync_middleware_chain_sync_call(self):\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n@@ -285,6 +550,39 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n \n @override_settings(ROOT_URLCONF='middleware_exceptions.urls')\n class AsyncMiddlewareTests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_async_and_sync_middleware_chain_async_call_new(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    def test_async_and_sync_middleware_chain_sync_call(self):\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\"\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.AsyncTemplateResponseMiddleware',\n     ])\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..c0871d8 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -5,6 +6,7 @@ from django.db import connection, connections\n from django.db.migrations.exceptions import (\n     AmbiguityError, InconsistentMigrationHistory, NodeNotFoundError,\n )\n+from importlib import import_module\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..f25b789 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -36,7 +36,12 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_min_version(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..df2f7ad 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -445,7 +445,15 @@ class RestartWithReloaderTests(SimpleTestCase):\n     def test_python_m_django(self):\n         main = '/usr/lib/pythonX.Y/site-packages/django/__main__.py'\n         argv = [main, 'runserver']\n-        mock_call = self.patch_autoreload(argv)\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        expected_arguments = [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            expected_arguments\n+        )\n         with mock.patch('django.__main__.__file__', main):\n             autoreload.restart_with_reloader()\n             self.assertEqual(mock_call.call_count, 1)\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..6acb0a4 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -395,6 +395,43 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_explicit_inherited_pk(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_explicit_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_auto_created_inherited_pk_without_override(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            pass\n+\n+        # Check that a warning is raised when no explicit primary key is defined.\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the CheckDefaultPKConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            ),\n+        ])\n+\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.BigAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -414,4 +451,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..ba89218 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,9 +281,14 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel  # Assuming ChoiceModel is defined in the models module\n+from .assert_form_errors import AssertFormErrorsMixin  # Assuming this mixin is available for form error assertions\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n+        # Adding the necessary imports to ensure that everything is in place for testing\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -298,7 +303,29 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n-        # ModelMultipleChoiceField\n+    def test_modelchoicefield_value_placeholder(self):\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n+        # Additional tests to ensure that a valid choice does not raise an error\n+        valid_instance = ChoiceModel.objects.create(pk=4, name='d')\n+        self.assertEqual(f.clean(valid_instance.pk), valid_instance)\n+\n+        # Testing with different invalid values\n+        self.assertFormErrors(\n+            ['\"nonexistent\" is not one of the available choices.'],\n+            f.clean,\n+            'nonexistent',\n+        )\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': '%(value)s IS INVALID CHOICE',\n@@ -307,4 +334,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..9133764 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -549,7 +550,29 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_fails(self):\n+        # Test case for the failure scenario described in the issue\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey()\n+            child = ChildStringPrimaryKeyParent()\n+            child.parent = parent\n+            child.parent.name = 'jeff'\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertNotEqual(child.parent_id, parent.name)\n+            self.assertEqual(child.parent_id, '')\n+\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_succeeds(self):\n+        # Test case for the successful scenario described in the issue\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='jeff')\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..e029e1f 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,10 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, CustomAutoFieldModel, Employee, Foo\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n \n \n class BasicCustomPKTests(TestCase):\n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..8d45521 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,34 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_for_files(self):\n+        \"\"\"\n+        Test that each file is yielded exactly once in post_process,\n+        verifying against issue #24452.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Ensure no file is yielded more than once\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n+        # Check handling of nested references by verifying specific files\n+        self.assertIn('admin/css/base.6b517d0d5813.css', stats['post_processed'])\n+        self.assertIn('admin/css/dashboard.7ac78187c567.css', stats['post_processed'])\n+\n+    def test_post_process_all_files_only_once(self):\n+        \"\"\"\n+        Ensure post_process checks nested references correctly without duplicates.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check stats consistency\n+        self.assertEqual(len(stats['post_processed']), len(set(stats['post_processed'])))\n+\n+        # Example check for a file that does not require nested reference adjustments\n+        self.assertIn('admin/css/dashboard.7ac78187c567.css', stats['post_processed'])\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +242,34 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_for_files(self):\n+        \"\"\"\n+        Test that each file is yielded exactly once in post_process,\n+        verifying against issue #24452.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Ensure no file is yielded more than once\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n+        # Check handling of nested references by verifying specific files\n+        self.assertIn('admin/css/base.6b517d0d5813.css', stats['post_processed'])\n+        self.assertIn('admin/css/dashboard.7ac78187c567.css', stats['post_processed'])\n+\n+    def test_post_process_all_files_only_once(self):\n+        \"\"\"\n+        Ensure post_process checks nested references correctly without duplicates.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check stats consistency\n+        self.assertEqual(len(stats['post_processed']), len(set(stats['post_processed'])))\n+\n+        # Example check for a file that does not require nested reference adjustments\n+        self.assertIn('admin/css/dashboard.7ac78187c567.css', stats['post_processed'])\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..22bf647 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -5,6 +6,7 @@ Tests for stuff in django.utils.datastructures.\n import copy\n import pickle\n \n+import collections.abc\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n@@ -18,6 +20,24 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n+    def test_reversed(self):\n+        # Test that reversed() returns an iterator\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        # Test reversing an empty OrderedSet\n+        s = reversed(OrderedSet())\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        # Test reversing an OrderedSet with a single element\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n     def test_remove(self):\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n",
  "django__django-14122": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex b2ec8af..a6f6110 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import re\n from decimal import Decimal\n \n from django.core.exceptions import FieldError\n from django.db import connection\n+from django.db import connection\n from django.db.models import (\n     Avg, Case, Count, DecimalField, DurationField, Exists, F, FloatField,\n     IntegerField, Max, Min, OuterRef, Subquery, Sum, Value, When,\n@@ -101,6 +103,46 @@ class AggregateTestCase(TestCase):\n         s2.books.add(cls.b1, cls.b3, cls.b5, cls.b6)\n         s3.books.add(cls.b3, cls.b4, cls.b6)\n \n+    def test_meta_ordering_not_in_group_by(self):\n+        \"\"\"\n+        Test that Meta.ordering fields are not added to GROUP BY clause.\n+        \"\"\"\n+        # Setup example where an aggregation with ordering via Meta is used\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"DROP TABLE IF EXISTS sample_table;\")\n+            cursor.execute(\"\"\"\n+                CREATE TABLE sample_table (\n+                    id SERIAL PRIMARY KEY,\n+                    category VARCHAR(255),\n+                    value INT\n+                );\n+            \"\"\")\n+            cursor.execute(\"\"\"\n+                INSERT INTO sample_table (category, value) VALUES\n+                ('cat1', 100),\n+                ('cat1', 200),\n+                ('cat2', 300),\n+                ('cat2', 400);\n+            \"\"\")\n+\n+        class SampleModel(models.Model):\n+            category = models.CharField(max_length=255)\n+            value = models.IntegerField()\n+\n+            class Meta:\n+                ordering = ['category']\n+\n+            class Meta:\n+                managed = False\n+                db_table = 'sample_table'\n+\n+        result = SampleModel.objects.values('category').annotate(total=Sum('value'))\n+        expected_result = [\n+            {'category': 'cat1', 'total': 300},\n+            {'category': 'cat2', 'total': 700},\n+        ]\n+        self.assertCountEqual(list(result), expected_result)\n+\n     def test_empty_aggregate(self):\n         self.assertEqual(Author.objects.all().aggregate(), {})\n \n@@ -1339,4 +1381,4 @@ class AggregateTestCase(TestCase):\n             ('Wesley J. Chun', 1),\n             ('Stuart Russell', 1),\n             ('Peter Norvig', 2),\n-        ], lambda a: (a.name, a.contact_count), ordered=False)\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..0c7075a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -815,14 +815,17 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n             [self.example_inc.ceo, self.max],\n         )\n+        import pickle\n         self.assertCountEqual(\n             Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n             [self.max],\n         )\n+        import pickle\n         self.assertCountEqual(\n             Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n             [self.example_inc.ceo, self.max],\n         )\n+        import pickle\n \n     def test_boolean_expression_combined_with_empty_Q(self):\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n@@ -838,6 +841,14 @@ class BasicExpressionsTests(TestCase):\n             with self.subTest(conditions):\n                 self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n \n+    def test_deconstruct_single_child_q_with_exists(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n+\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..9f7f769 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +103,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..6f1a10b 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -182,6 +182,15 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', ['-m', 'utils_tests.test_module.main_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..9b6ed87 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -224,6 +224,19 @@ TEST_DATA = [\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n     (URLValidator(), None, ValidationError),\n+    # Newlines and tabs in the middle of the URL are not accepted\n+    # Carriage returns in the URL\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    # Tabs in the URL\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n+    # Newlines inside the domain\n+    (URLValidator(), 'http://www.django\\nproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\nwww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n     # Trailing newlines not accepted\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..80d9c3f 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,7 +1526,26 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n-class JoinPromotionTests(TestCase):\n+class QObjectOrTestCases(TestCase):\n+    def test_q_object_or_with_id__in(self):\n+        # Original working case\n+        property_groups = PropertyGroup.objects.agent_groups(management_agent=1)\n+        queryset = ManagerTicketRatingCumulativeMovingAverage.objects.annotate(Count(\"agent__property_groups\"))\n+        result = queryset.filter(\n+            Q(agent__property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n+            | Q(agent__property_groups__count=0)\n+        ).distinct()\n+        self.assertIsNotNone(result)\n+\n+    def test_q_object_or_with_in(self):\n+        # Original failing case\n+        property_groups = PropertyGroup.objects.agent_groups(management_agent=1)\n+        queryset = ManagerTicketRatingCumulativeMovingAverage.objects.annotate(Count(\"agent__property_groups\"))\n+        with self.assertRaises(django.db.utils.ProgrammingError):\n+            result = queryset.filter(\n+                Q(agent__property_groups__in=property_groups)\n+                | Q(agent__property_groups__count=0)\n+            ).distinct()\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..019ad2d 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -157,6 +157,10 @@ class DateFormatTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 dateformat.format(my_birthday, specifier)\n \n+    def test_y_format_year_before_1000(self):\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+\n     def test_r_format_with_non_en_locale(self):\n         # Changing the locale doesn't change the \"r\" format.\n         dt = datetime(1979, 7, 8, 22, 00)\n",
  "django__django-14376": "",
  "django__django-14434": "",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..fe07fe2 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -93,7 +93,9 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n         ),\n     )\n \n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n \n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..5100d3d 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -641,6 +641,44 @@ class ExecutorTests(MigrationTestBase):\n         recorder = MigrationRecorder(connection)\n         # Record all replaced migrations as applied\n         recorder.record_applied(\"migrations\", \"0001_initial\")\n+\n+import unittest\n+from django.test import TestCase\n+from django.test.utils import override_settings\n+from django.db.migrations.executor import MigrationExecutor\n+from django.db import connection\n+\n+class MigrationExecutorTests(TestCase):\n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n+    def test_unapply_squashed_migration_properly(self):\n+        # Set up the migrations\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n+\n+        # Ensure the squashed migration is applied\n+        self.assertIn(\n+            (\"migrations\", \"0001_squashed_0002\"),\n+            executor.recorder.applied_migrations()\n+        )\n+\n+        # Unapply the migration\n+        executor.migrate([(\"migrations\", None)])\n+\n+        # Ensure the squashed migration is unapplied\n+        self.assertNotIn(\n+            (\"migrations\", \"0001_squashed_0002\"),\n+            executor.recorder.applied_migrations()\n+        )\n+\n+        # Reapply the squashed migration and unapply again to check stability\n+        executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n+        executor.migrate([(\"migrations\", None)])\n+\n+        # Verify unapplied state\n+        self.assertNotIn(\n+            (\"migrations\", \"0001_squashed_0002\"),\n+            executor.recorder.applied_migrations()\n+        )\n         recorder.record_applied(\"migrations\", \"0002_second\")\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..db12d1a 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -255,6 +255,26 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Check this: http://example.com/path?arg=val&gt. Amazing!',\n+                'Check this: <a href=\"http://example.com/path?arg=val%3E\">http://example.com/path?arg=val&gt</a>. Amazing!'\n+            ),\n+            (\n+                'Visit https://secure.net/path/to/page.html?key=value&amp;key2=value2.',\n+                'Visit <a href=\"https://secure.net/path/to/page.html?key=value&amp;key2=value2\">https://secure.net/path/to/page.html?key=value&amp;key2=value2</a>.'\n+            ),\n+            (\n+                'Open this link: www.site.com/page?x=10&y=20&gt!',\n+                'Open this link: <a href=\"http://www.site.com/page?x=10&amp;y=20%3E\">www.site.com/page?x=10&amp;y=20&gt</a>!'\n+            ),\n+            (\n+                'Bad url www.exampl\u00e9.com/argh&ltlt! Should handle.',\n+                'Bad url <a href=\"http://www.exampl\u00e9.com/argh%3C\">www.exampl\u00e9.com/argh&lt</a>lt! Should handle.'\n+            ),\n         )\n         for value, output in tests:\n             with self.subTest(value=value):\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..8f2b8ab 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,45 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+from django.test import TestCase\n+from .models import Note, CustomPk, Valid, Detail, Paragraph, Member\n+\n+class BulkUpdateTests(TestCase):\n+    def setUp(self):\n+        # Setup initial data\n+        self.notes = [Note.objects.create(note=f'note-{i}', misc='misc') for i in range(2000)]\n+\n+    def test_bulk_update_empty_queryset(self):\n+        # Test when the bulk_update has no objects\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_all_rows(self):\n+        # Test updating all rows\n+        rows_updated = Note.objects.bulk_update(self.notes, ['note'])\n+        self.assertEqual(rows_updated, len(self.notes))\n+\n+    def test_bulk_update_with_duplicates(self):\n+        # Test with duplicate entries\n+        note = Note.objects.create(note='duplicate-note', misc='misc')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+        # Test with duplicates in different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n+\n+    def test_bulk_update_partial_update(self):\n+        # Test updating a subset of fields\n+        for note in self.notes:\n+            note.misc = 'updated'\n+        rows_updated = Note.objects.bulk_update(self.notes, ['misc'])\n+        self.assertEqual(rows_updated, len(self.notes))\n+\n+    def test_bulk_update_with_no_changes(self):\n+        # Test bulk update with no actual changes\n+        rows_updated = Note.objects.bulk_update(self.notes, ['note'])\n+        self.assertEqual(rows_updated, len(self.notes))\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..165e250 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -338,7 +338,49 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n \n-    def test_formset_validate_min_flag(self):\n+    def test_formset_non_form_errors_have_nonform_class(self):\n+        \"\"\"\n+        Test that non-form errors are rendered with the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',  # the number of forms rendered\n+            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'choices-MIN_NUM_FORMS': '0',  # min number of forms\n+            'choices-MAX_NUM_FORMS': '2',  # max number of forms\n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '0',\n+            'choices-1-choice': 'One',\n+            'choices-1-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n+\n+    def test_formset_non_form_errors_have_nonform_class_min_violation(self):\n+        \"\"\"\n+        Test that non-form errors are rendered with the 'nonform' CSS class when min_num is violated.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',  # the number of forms rendered\n+            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'choices-MIN_NUM_FORMS': '3',  # min number of forms\n+            'choices-MAX_NUM_FORMS': '0',  # max number of forms\n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '0',\n+            'choices-1-choice': 'One',\n+            'choices-1-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n         \"\"\"\n         If validate_min is set and min_num is more than TOTAL_FORMS in the\n         data, a ValidationError is raised. MIN_NUM_FORMS in the data is\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..1453adc 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,6 +2129,35 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n+    def test_access_via_boundfield_clean_fields(self):\n+        \"\"\"\n+        Test that _clean_fields accesses values through BoundField,\n+        ensuring consistency between cleaned_data and bound field's initial.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        form._clean_fields()\n+        cleaned_value = form.cleaned_data['dt']\n+        bound_field_initial = form['dt'].initial\n+        self.assertEqual(cleaned_value, bound_field_initial)\n+\n+    def test_access_via_boundfield_changed_data(self):\n+        \"\"\"\n+        Test that changed_data uses the BoundField to determine change,\n+        ensuring it detects no change if initial and data values are equal.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        self.assertEqual(form.changed_data, [])\n+\n     def test_help_text(self):\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n",
  "django__django-14672": "",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..8a5579a 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -10,6 +11,10 @@ from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n from django.urls import reverse, reverse_lazy\n+from datetime import date\n+from django.test import TestCase\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from .models import Question\n \n from .admin import AnswerAdmin, QuestionAdmin\n from .models import (\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..b8f3b8f 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -916,6 +916,46 @@ class StateTests(SimpleTestCase):\n             project_state.apps\n \n         # If we include the real app it should succeed\n+\n+    def test_real_apps_non_set(self):\n+        \"\"\"\n+        Test that passing real_apps as a list raises an AssertionError.\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_none(self):\n+        \"\"\"\n+        Test that passing real_apps as None does not raise an error.\n+        \"\"\"\n+        try:\n+            project_state = ProjectState(real_apps=None)\n+            # Ensure real_apps is initialized as an empty set\n+            self.assertEqual(project_state.real_apps, set())\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError when real_apps was None\")\n+\n+    def test_real_apps_set(self):\n+        \"\"\"\n+        Test that passing real_apps as a set works correctly.\n+        \"\"\"\n+        try:\n+            project_state = ProjectState(real_apps={'contenttypes'})\n+            # Ensure real_apps is properly assigned\n+            self.assertEqual(project_state.real_apps, {'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError when real_apps was a set\")\n+\n+    def test_real_apps_empty_set(self):\n+        \"\"\"\n+        Test that passing an empty set as real_apps works correctly.\n+        \"\"\"\n+        try:\n+            project_state = ProjectState(real_apps=set())\n+            # Ensure real_apps is still an empty set\n+            self.assertEqual(project_state.real_apps, set())\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError when real_apps was an empty set\")\n         project_state = ProjectState(real_apps={'contenttypes'})\n         project_state.add_model(ModelState.from_model(TestModel))\n         rendered_state = project_state.apps\n",
  "django__django-14771": "",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..4a5875e 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -197,9 +197,32 @@ class ClsDec:\n \n class MethodDecoratorTests(SimpleTestCase):\n     \"\"\"\n-    Tests for method_decorator\n+    import functools\n+    from django.utils.decorators import method_decorator\n+    from django.test import TestCase\n     \"\"\"\n-    def test_preserve_signature(self):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @functools.wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n         class Test:\n             @simple_dec_m\n             def say(self, arg):\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..9077f11 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,37 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to test URLs generated for readonly ForeignKey fields\n+        in both the default and custom admin sites.\n+        \"\"\"\n+        book = Book.objects.create(name='Test Book')\n+        chapter = Chapter.objects.create(\n+            title='Test Chapter',\n+            content='Test Content',\n+            book=book,\n+        )\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_chapter_change', args=(quote(chapter.pk),)))\n+        book_url = reverse(f'{admin_site}:admin_views_book_change', args=(quote(book.pk),))\n+        self.assertContains(\n+            response,\n+            f'<div class=\"readonly\"><a href=\"{book_url}\">{book.name}</a></div>',\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test that readonly ForeignKey fields generate correct admin URLs for the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test that readonly ForeignKey fields generate correct admin URLs for a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin7')\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8bb77cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..b384e08 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,46 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_no_db_table(self):\n+        app_label = 'test_rename_no_db_table'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Car', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Car', 'Vehicle')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(2):  # Expect queries due to actual renaming\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(2):  # Expect queries due to actual renaming\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..d88f17d 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -171,7 +171,30 @@ class ChangeListTests(TestCase):\n         row_html = build_tbody_html(new_child.id, link, '<td class=\"field-parent nowrap\">-</td>')\n         self.assertNotEqual(table_output.find(row_html), -1, 'Failed to find expected row element: %s' % table_output)\n \n-    def test_result_list_set_empty_value_display_on_admin_site(self):\n+    from django.db import connection\n+    from django.contrib.admin.views.main import SEARCH_VAR\n+    from django.test.utils import CaptureQueriesContext\n+\n+    def test_excessive_joins_in_admin_search(self):\n+        \"\"\"\n+        Test to ensure that searching with many terms does not result in excessive JOINs.\n+        \"\"\"\n+        parent = Parent.objects.create(name='TestParent')\n+        Child.objects.create(parent=parent, name='TestChild1', age=10)\n+        Child.objects.create(parent=parent, name='TestChild2', age=12)\n+\n+        admin_instance = ParentAdminTwoSearchFields(Parent, custom_site)\n+        search_query = 'TestChild ' * 10  # Simulating a search with excessive terms\n+\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: search_query})\n+        request.user = self.superuser\n+\n+        with CaptureQueriesContext(connection) as context:\n+            changelist = admin_instance.get_changelist_instance(request)\n+            _ = changelist.queryset.count()\n+\n+        join_count = sum('JOIN' in query['sql'] for query in context.captured_queries)\n+        self.assertLessEqual(join_count, 1, \"Excessive JOINs found in query\")\n         \"\"\"\n         Empty value display can be set on AdminSite.\n         \"\"\"\n",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..22321ca 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -204,7 +204,19 @@ class InspectDBTestCase(TestCase):\n             output,\n         )\n \n-    def test_digits_column_name_introspection(self):\n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_foreign_key_to_specific_field(self):\n+        \"\"\"\n+        Test that inspectdb correctly inspects foreign keys that reference\n+        specific fields, not just primary keys.\n+        \"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreign_key_to_specific_field', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"other_id = models.ForeignKey('InspectdbFoo', models.DO_NOTHING, to_field='other_id')\",\n+            output,\n+        )\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "",
  "django__django-15104": "",
  "django__django-15127": "",
  "django__django-15128": "",
  "django__django-15161": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex ca4c20d..7fc4356 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -607,7 +607,37 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, \"Could not find object EmailValidator2 in django.core.validators.\"):\n             MigrationWriter.serialize(validator)\n \n-    def test_serialize_empty_nonempty_tuple(self):\n+    def test_serialize_F_expression(self):\n+        \"\"\"\n+        Test that the F expression deconstructs to its simplified path.\n+        \"\"\"\n+        f_expression = models.F('test_field')\n+        string, imports = MigrationWriter.serialize(f_expression)\n+        self.assertEqual(string, \"models.F('test_field')\")\n+        self.assertEqual(imports, {'from django.db import models'})\n+\n+    def test_serialize_Value_expression(self):\n+        \"\"\"\n+        Test that the Value expression deconstructs to its simplified path.\n+        \"\"\"\n+        value_expression = models.Value('test_value')\n+        string, imports = MigrationWriter.serialize(value_expression)\n+        self.assertEqual(string, \"models.Value('test_value')\")\n+        self.assertEqual(imports, {'from django.db import models'})\n+\n+    def test_serialize_Case_When_expression(self):\n+        \"\"\"\n+        Test that the Case/When expression deconstructs to its simplified path.\n+        \"\"\"\n+        case_expression = models.Case(\n+            models.When(somefield=1, then=models.Value('A')),\n+            default=models.Value('B'),\n+            output_field=models.CharField(),\n+        )\n+        string, imports = MigrationWriter.serialize(case_expression)\n+        self.assertIn(\"models.Case(models.When(somefield=1, then=models.Value('A')),\", string)\n+        self.assertIn(\"default=models.Value('B'), output_field=models.CharField())\", string)\n+        self.assertEqual(imports, {'from django.db import models'})\n         \"\"\"\n         Ticket #22679: makemigrations generates invalid code for (an empty\n         tuple) default_permissions = ()\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..8a76765 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1627,7 +1627,30 @@ class AutodetectorTests(TestCase):\n             ['CreateModel', 'AddField', 'AlterUniqueTogether', 'AlterIndexTogether']\n         )\n \n-    def test_remove_field_and_foo_together(self):\n+    def test_optimize_alter_foo_together_operations(self):\n+        \"\"\"\n+        Ensure multiple AlterFooTogether operations are optimized into a single operation each.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together],\n+            [self.author_empty, self.book_foo_together_optimized]\n+        )\n+        # Check that only one migration is created.\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        # Check that only one AlterUniqueTogether and one AlterIndexTogether operation is present.\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        # Check that the operations set the correct unique_together and index_together values.\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book',\n+            unique_together={('title', 'author')}\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book',\n+            index_together={('title', 'author')}\n+        )\n         \"\"\"\n         Removed fields will be removed after updating index/unique_together.\n         \"\"\"\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..e58f349 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1852,8 +1852,51 @@ class ValueTests(TestCase):\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                field.clean(value, model_instance=None)\n \n-class ExistsTests(TestCase):\n+    def test_charfield_max_length_validator_not_added_when_none(self):\n+        \"\"\"\n+        Test that CharField does not add a MaxLengthValidator when max_length is None.\n+        \"\"\"\n+        field = Value('string')._resolve_output_field()\n+        self.assertIsInstance(field, fields.CharField)\n+        # Ensure the CharField does not have any validators since max_length is not set\n+        self.assertEqual(field.validators, [])\n+\n+    def test_resolve_output_field_performance(self):\n+        \"\"\"\n+        Verify the performance improvement of the _resolve_output_field method.\n+        \"\"\"\n+        x = Value('test')\n+        # Measuring the time for _resolve_output_field to ensure it's optimized.\n+        start_time = time.perf_counter()\n+        x._resolve_output_field()\n+        end_time = time.perf_counter()\n+        duration = end_time - start_time\n+        # Depending on the environment, the threshold might need adjustment\n+        self.assertLess(duration, 10e-6)  # 10 microseconds as a rough threshold\n     def test_optimizations(self):\n         with CaptureQueriesContext(connection) as context:\n             list(Experiment.objects.values(exists=Exists(\n",
  "django__django-15278": "",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..ce8c0b5 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -97,6 +97,50 @@ class BasicFieldTests(SimpleTestCase):\n         field._get_default\n         pickle.dumps(field)\n \n+    def test_hash_immutability(self):\n+        \"\"\"\n+        Test that the hash of a Field instance remains constant\n+        even after it is assigned to a model.\n+        \"\"\"\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_field_in_dict_before_and_after_assignment(self):\n+        \"\"\"\n+        Test that a field can be used as a dict key before and after\n+        it is assigned to a model without breaking dictionary operations.\n+        \"\"\"\n+        field = models.CharField(max_length=100)\n+        field_dict = {field: 'initial'}\n+\n+        # Verify field is in dict\n+        self.assertIn(field, field_dict)\n+\n+        # Assign field to a class and verify it's still in the dict\n+        class AnotherModel(models.Model):\n+            title = field\n+\n+        self.assertIn(field, field_dict)\n+        self.assertEqual(field_dict[field], 'initial')\n+\n+    def test_field_hash_compliance_in_set(self):\n+        \"\"\"\n+        Test that a field can be added to a set (to test hash uniqueness).\n+        \"\"\"\n+        field = models.DateField()\n+        field_set = {field}\n+\n+        class DateModel(models.Model):\n+            publish_date = field\n+\n+        # Field should still be in set after assignment\n+        self.assertIn(field, field_set)\n+\n     def test_deconstruct_nested_field(self):\n         \"\"\"deconstruct() uses __qualname__ for nested class support.\"\"\"\n         name, path, args, kwargs = Nested.Field().deconstruct()\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..aa15c14 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,7 +204,22 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+    def test_f_expression(self):\n+        notes = [\n+            Note.objects.create(note='test_note', misc='test_misc')\n+            for _ in range(10)\n+        ]\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n+\n+    def test_bulk_update_with_f_expression(self):\n+        obj = SelfRef.objects.create(name='example_name', c8='original_value')\n+        obj.c8 = F('name')\n+        SelfRef.objects.bulk_update([obj], ['c8'])\n+        obj.refresh_from_db()\n+        self.assertEqual(obj.c8, 'example_name')  # Ensure F('name') resolves correctly.\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..2d76f46 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,6 +1049,24 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n+    def test_rename_model_and_field(self):\n+        \"\"\"Test autodetection of renaming a model and a field in one step.\"\"\"\n+        changes = self.get_changes(\n+            [ModelState('testapp', 'Book', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ])],\n+            [ModelState('testapp', 'Volume', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=200)),\n+            ])],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='Book', new_name='Volume')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 1, old_name='title', new_name='name')\n+\n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..7e263c7 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,47 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+from django.db import models\n+from django.db.models import Exists, Q\n+from django.test import TestCase\n+from myapp.models import MyModel  # Adjust this import based on your actual model location\n+\n+class SubqueryTests(TestCase):\n+\n+    def test_negated_empty_exists_with_condition(self):\n+        # Setup\n+        manager = MyModel.objects.create(name='test')\n+        \n+        # Create a queryset with a negated Exists subquery that's empty\n+        qs = MyModel.objects.filter(~Exists(MyModel.objects.none()), name='test')\n+        \n+        # Validate that it returns the manager created above\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_negated_empty_exists_without_condition(self):\n+        # Setup\n+        # Ensure some data exists in the model\n+        MyModel.objects.create(name='test')\n+        MyModel.objects.create(name='other')\n+        \n+        # Create a queryset with a negated Exists subquery that's empty\n+        qs = MyModel.objects.filter(~Exists(MyModel.objects.none()))\n+        \n+        # Validate that it returns all objects, because the negated Exists of an empty set is always true\n+        self.assertEqual(qs.count(), MyModel.objects.count())\n+\n+    def test_exists_with_non_empty_queryset(self):\n+        # Setup\n+        manager = MyModel.objects.create(name='test')\n+        \n+        # Create a subquery with some content\n+        subquery = MyModel.objects.filter(name='test')\n+        \n+        # Query with Exists\n+        qs = MyModel.objects.filter(Exists(subquery))\n+        \n+        # Validate that it does return the manager since the subquery is not empty\n+        self.assertSequenceEqual(qs, [manager])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..31649bd 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -9,6 +9,13 @@ try:\n except ImportError:\n     from backports import zoneinfo\n \n+from django.contrib import admin\n+from django.test import TestCase\n+from django.db.models import ForeignKey\n+from django.utils.translation import gettext_lazy as _\n+\n+from .models import Inventory\n+\n from django import forms\n from django.conf import settings\n from django.contrib import admin\n@@ -132,7 +139,16 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             raw_id_fields=[\"main_band\"],\n         )\n \n-    def test_radio_fields_ForeignKey(self):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n         ff = self.assertFormfield(\n             Event,\n             \"main_band\",\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..7e1e01f 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,57 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_model_with_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[(\"id\", models.AutoField(primary_key=True))],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[(\"id\", models.AutoField(primary_key=True))],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_existing_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[(\"id\", models.AutoField(primary_key=True))],\n+                    managers=[(\"initial_manager\", models.Manager())],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"new_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[(\"id\", models.AutoField(primary_key=True))],\n+                    managers=[\n+                        (\"new_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n@@ -141,6 +192,57 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.CreateModel(\"MyModel\", fields=[])],\n         )\n+\n+    def test_create_model_with_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[(\"id\", models.AutoField(primary_key=True))],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[(\"id\", models.AutoField(primary_key=True))],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_existing_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[(\"id\", models.AutoField(primary_key=True))],\n+                    managers=[(\"initial_manager\", models.Manager())],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"new_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[(\"id\", models.AutoField(primary_key=True))],\n+                    managers=[\n+                        (\"new_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel(\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..b4b8a0b 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,10 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+from django.test import TestCase\n+from django.core import management\n+from .models import Author, Book\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..17f4ecf 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,7 +3961,18 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n-    def test_add_textfield_unhashable_default(self):\n+    def test_alter_field_choices_noop_integerfield(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"rating\")\n+        new_field = IntegerField(\n+            choices=((1, \"One\"), (2, \"Two\")),\n+        )\n+        new_field.set_attributes_from_name(\"rating\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..185f5dd 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -320,6 +320,12 @@ class LookupTests(TestCase):\n         self.assertNotIn(\"exactly\", field.get_lookups())\n \n         # registration should bust the cache\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregistration should bust the cache as well\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n         with register_lookup(models.ForeignObject, Exactly):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..672c4fe 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,48 @@\n+\n+import inspect\n+\n+class ManagerMethodTests(TestCase):\n+    def test_manager_method_attributes(self):\n+        self.assertEqual(Article.objects.get.__doc__, models.QuerySet.get.__doc__)\n+        self.assertEqual(Article.objects.count.__name__, models.QuerySet.count.__name__)\n+\n+    def test_manager_method_signature(self):\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.bulk_create)),\n+            \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, \"\n+            \"update_fields=None, unique_fields=None)\",\n+        )\n+\n+    def test_signature_of_other_methods(self):\n+        # This test ensures that other queryset methods also maintain correct signatures\n+        self.assertEqual(\n+            str(inspect.signature(Person.objects.create)),\n+            \"(**kwargs)\",\n+        )\n+        self.assertEqual(\n+            str(inspect.signature(Person.objects.get)),\n+            \"(*args, **kwargs)\",\n+        )\n+        self.assertEqual(\n+            str(inspect.signature(Person.objects.filter)),\n+            \"(*args, **kwargs)\",\n+        )\n+        self.assertEqual(\n+            str(inspect.signature(Person.objects.update)),\n+            \"(**kwargs)\",\n+        )\n+\n+    def test_signature_with_decorators(self):\n+        # This test ensures that decorated methods maintain their signatures\n+        self.assertEqual(\n+            str(inspect.signature(Person.objects.annotate)),\n+            \"(*args, **kwargs)\",\n+        )\n+        self.assertEqual(\n+            str(inspect.signature(Person.objects.aggregate)),\n+            \"(*args, **kwargs)\",\n+        )\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..cb6d44b 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,4 +1,6 @@\n+\n from datetime import datetime, time\n+from django.utils.translation import gettext_lazy\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n@@ -74,7 +76,16 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy_format(self):\n+        from django.utils.formats import get_format\n+        # Test that a lazy translation can be passed to get_format\n+        self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        # Test that a lazy translation works with the date template filter\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..cfdca6a 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -390,7 +390,19 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-    def test_proxy_load_from_fixture(self):\n+    def test_select_related_only_with_proxy(self):\n+        # Create instances for testing\n+        custom_model = CustomModel.objects.create(name=\"Test Name\")\n+        proxy_custom_model = ProxyCustomModel.objects.get(pk=custom_model.pk)\n+        another_model = AnotherModel.objects.create(custom=proxy_custom_model)\n+\n+        # Query with select_related and only on proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = list(qs)\n+\n+        # Verify the results\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(result[0].custom.name, \"Test Name\")\n         management.call_command(\"loaddata\", \"mypeople.json\", verbosity=0)\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..c6afff6 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,15 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_correct_order(self):\n+        \"\"\"\n+        Ensure that additional parameters are correctly passed before the database name.\n+        \"\"\"\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..9896523 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,9 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+from django.template import Template, Context\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n@@ -74,7 +77,30 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n-    def test_force_grouping(self):\n+    def test_floatformat_decimal_precision(self):\n+        # Test case based on the issue description\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+\n+        # Additional test cases for various precision and Decimal values\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.00000000000000000001\"), 20),\n+            \"1.00000000000000000001\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.00000000000000000001\"), 20),\n+            \"0.00000000000000000001\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456789.123456789123456789\"), 18),\n+            \"123456789.123456789123456789\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.99999999999999999999\"), 20),\n+            \"0.99999999999999999999\",\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..4479ac8 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -405,6 +405,17 @@ class CaseExpressionTests(TestCase):\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n \n+    def test_annotate_with_negated_empty_q(self):\n+        # This test verifies the fix for the issue where ~Q(pk__in=[]) should not crash\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n             selected=Case(\n@@ -412,6 +423,17 @@ class CaseExpressionTests(TestCase):\n                 default=Value(\"not selected\"),\n             )\n         )\n+\n+    def test_annotate_with_negated_empty_q(self):\n+        # This test verifies the fix for the issue where ~Q(pk__in=[]) should not crash\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..ec92704 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -556,7 +557,33 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_default_fixture_path_as_pathlib(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS cannot contain a default fixtures directory\n+        for application (app/fixtures) in order to avoid repeated fixture loading.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            Path(_cur_dir) / \"fixtures_1\",\n+            Path(_cur_dir) / \"fixtures_1\",\n+        ]\n+    )\n+    def test_duplicate_fixture_dirs_with_pathlib(self):\n+        \"\"\"\n+        Test that duplicate fixture directories using pathlib.Path are detected.\n+        \"\"\"\n+        msg = \"Duplicate fixture directory found: %s\" % (Path(_cur_dir) / \"fixtures_1\",)\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "",
  "django__django-16082": "",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..896e3dd 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,54 @@\n+\n+class ChangelistTransactionTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(username=\"admin\", password=\"pass\", email=\"admin@example.com\")\n+        cls.swallow_a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        cls.swallow_b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(self.swallow_a.pk),\n+            \"form-1-uuid\": str(self.swallow_b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Test if transaction is atomic by raising an error in the middle\n+        with mock.patch(\"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Ensure original values are preserved after error\n+        self.swallow_a.refresh_from_db()\n+        self.assertEqual(self.swallow_a.load, 4)\n+        self.assertEqual(self.swallow_a.speed, 1)\n+        self.swallow_b.refresh_from_db()\n+        self.assertEqual(self.swallow_b.load, 2)\n+        self.assertEqual(self.swallow_b.speed, 2)\n+\n+        # Test if transaction rolls back completely on partial update failure\n+        with mock.patch(\"django.contrib.admin.ModelAdmin.log_change\", side_effect=[None, DatabaseError]):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Ensure original values are preserved after partial update failure\n+        self.swallow_a.refresh_from_db()\n+        self.assertEqual(self.swallow_a.load, 4)\n+        self.assertEqual(self.swallow_a.speed, 1)\n+        self.swallow_b.refresh_from_db()\n+        self.assertEqual(self.swallow_b.load, 2)\n+        self.assertEqual(self.swallow_b.speed, 2)\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +72,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..249308a 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,18 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_does_not_create_files(self):\n+        \"\"\"\n+        makemigrations --check should not create migration files when there are pending migrations.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Verify that no migration files are created\n+            self.assertFalse(\n+                any(os.listdir(tmpdir)),\n+                \"makemigrations --check should not create migration files.\"\n+            )\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..6251a62 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory\n+import asyncio\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..333d8f3 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,6 +1,9 @@\n+\n import datetime\n+import urllib.parse\n import re\n from unittest import mock\n+from django.urls import reverse\n \n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm,\n@@ -883,8 +886,45 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         self.assertTrue(form.is_valid())\n         # original hashed password contains $\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n \n-    def test_bug_19349_bound_password_field(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_password_reset_form_link_with_pk_access(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin without to_field (using pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         user = User.objects.get(username=\"testclient\")\n         form = UserChangeForm(data={}, instance=user)\n         # When rendering the bound password field,\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..3014951 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1586,6 +1586,20 @@ class ManageRunserver(SimpleTestCase):\n \n         call_command(self.cmd, addrport=\"7000\")\n         self.assertServerSettings(\"127.0.0.1\", \"7000\")\n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_zero_ip_addr(self, *mocked_objects):\n+        call_command(\n+            \"runserver\",\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n \n     @unittest.skipUnless(socket.has_ipv6, \"platform doesn't support IPv6\")\n     def test_runner_addrport_ipv6(self):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..a26551a 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -505,6 +505,19 @@ class HTTPSitemapTests(SitemapTestsBase):\n             \"</urlset>\"\n         )\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_sitemap_with_no_items(self):\n+        # Scenario: Empty sitemap with callable lastmod should not raise ValueError\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        # Ensure no Last-Modified header when no items exist\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '<sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\\n'\n+            '</sitemapindex>'\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..3883558 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -58,6 +58,15 @@ class Restaurant(Place):\n class Pizzeria(Restaurant):\n     pass\n \n+class ActivityBlackListed(models.Model):\n+    \"\"\"\n+    Originally sourced from Activity_BlackListed in /home/josh/PNDS_Interim_MIS-Data.accdb (13 records)\n+    \"\"\"\n+    class Meta:\n+        db_table = \"Activity_BlackListed\"\n+    blacklistid = models.IntegerField(primary_key=True, db_column=\"BlacklistID\")\n+    sectorid = models.IntegerField(null=True, blank=True, db_column=\"SectorID\")\n+\n \n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n@@ -78,6 +87,15 @@ class UpsertConflict(models.Model):\n class NoFields(models.Model):\n     pass\n \n+class ActivityBlackListed(models.Model):\n+    \"\"\"\n+    Originally sourced from Activity_BlackListed in /home/josh/PNDS_Interim_MIS-Data.accdb (13 records)\n+    \"\"\"\n+    class Meta:\n+        db_table = \"Activity_BlackListed\"\n+    blacklistid = models.IntegerField(primary_key=True, db_column=\"BlacklistID\")\n+    sectorid = models.IntegerField(null=True, blank=True, db_column=\"SectorID\")\n+\n \n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..d2ab898 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,6 +254,43 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n+    def test_custom_user_creation_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization1, organization2])\n+\n+    def test_custom_user_creation_form_with_empty_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n+\n     def test_password_whitespace_not_stripped(self):\n         data = {\n             \"username\": \"testuser\",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..71ad80b 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -7,6 +8,8 @@ from django.utils.timesince import timesince, timeuntil\n from django.utils.translation import npgettext_lazy\n \n \n+from django.test.utils import override_settings, requires_tz_support\n+\n class TimesinceTests(TestCase):\n     def setUp(self):\n         self.t = datetime.datetime(2007, 8, 14, 13, 46, 0)\n@@ -160,7 +163,22 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n-    def test_naive_datetime_with_tzinfo_attribute(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        # Ensure it correctly identifies the interval as 1 month when USE_TZ is True\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_and_explicit_tzinfo(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        d = timezone.make_aware(d, timezone.get_default_timezone())\n+        # Ensure it correctly identifies the interval as 1 month even with tz-aware input\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n                 return None\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..d67dc37 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,6 +469,40 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n+from django.core.management import CommandError\n+from django.test import SimpleTestCase\n+from django.core.management.base import BaseCommand\n+import argparse\n+\n+class CommandTestCase(SimpleTestCase):\n+    def test_subparser_required_argument_error(self):\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(parser_class=argparse.ArgumentParser, required=True)\n+                parser_create = subparsers.add_parser(\"create\")\n+                parser_create.add_argument(\"name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        # Simulate a management command invocation with a missing required subparser argument \"name\".\n+        out, err = self.run_manage([\"cheeses\", \"create\"])\n+        self.assertIn(\"manage.py cheeses create: error: the following arguments are required: name\", err)\n+\n+    def test_subparser_invalid_argument_type(self):\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(parser_class=argparse.ArgumentParser)\n+                parser_foo = subparsers.add_parser(\"foo\")\n+                parser_foo.add_argument(\"bar\", type=int)\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        # Simulate usage with an invalid type for the argument \"bar\" expecting an int.\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"not_an_int\"])\n+        self.assertIn(\"manage.py subparser foo: error: argument bar: invalid int value: 'not_an_int'\", err)\n+\n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..eb0e3b8 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -104,6 +104,8 @@ class FunctionTests(SimpleTestCase):\n             # Invalid suffix.\n             self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n \n+        import decimal  # Ensure Decimal is available for tests\n+\n     def test_zero_values(self):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n@@ -112,7 +114,9 @@ class FunctionTests(SimpleTestCase):\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n \n-    def test_negative_zero_values(self):\n+    def test_zero_string_with_no_decimals(self):\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(decimal.Decimal(\"0.00\"), 0), \"0\")\n         tests = [\n             (-0.01, -1, \"0.0\"),\n             (-0.001, 2, \"0.00\"),\n",
  "django__django-16493": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..1b0b967 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..5dae854 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -216,8 +216,40 @@ class CheckConstraintTests(TestCase):\n     def test_abstract_name(self):\n         constraints = get_constraints(ChildModel._meta.db_table)\n         self.assertIn(\"constraints_childmodel_adult\", constraints)\n+    def test_custom_violation_error_code(self):\n+        # Test for custom violation error code in CheckConstraint\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price_check\",\n+            violation_error_message=\"Price must be greater than discounted price\",\n+            violation_error_code=\"price_violation\",\n+        )\n+        invalid_product = Product(price=10, discounted_price=20)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"price_violation\")\n \n-    def test_validate(self):\n+        # Test for custom violation error code in UniqueConstraint\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\"],\n+            name=\"unique_name\",\n+            violation_error_code=\"unique_violation\",\n+        )\n+        non_unique_product = UniqueConstraintProduct(name=\"duplicate\")\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"unique_violation\")\n+        \n+        # Test for custom violation error code in ExclusionConstraint\n+        constraint = ExclusionConstraint(\n+            name=\"exclude_adjacent\",\n+            expressions=[(F(\"ints\"), RangeOperators.ADJACENT_TO)],\n+            violation_error_code=\"adjacent_violation\",\n+        )\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(RangesModel, RangesModel(ints=(10, 20)))\n+        self.assertEqual(cm.exception.code, \"adjacent_violation\")\n         check = models.Q(price__gt=models.F(\"discounted_price\"))\n         constraint = models.CheckConstraint(check=check, name=\"price\")\n         # Invalid product.\n@@ -653,8 +685,40 @@ class UniqueConstraintTests(TestCase):\n         msg = \"{'name': ['Already exists.']}\"\n         with self.assertRaisesMessage(ValidationError, msg):\n             NoCodeErrorConstraintModel(name=\"test\").validate_constraints()\n+    def test_custom_violation_error_code(self):\n+        # Test for custom violation error code in CheckConstraint\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price_check\",\n+            violation_error_message=\"Price must be greater than discounted price\",\n+            violation_error_code=\"price_violation\",\n+        )\n+        invalid_product = Product(price=10, discounted_price=20)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"price_violation\")\n \n-    def test_validate(self):\n+        # Test for custom violation error code in UniqueConstraint\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\"],\n+            name=\"unique_name\",\n+            violation_error_code=\"unique_violation\",\n+        )\n+        non_unique_product = UniqueConstraintProduct(name=\"duplicate\")\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"unique_violation\")\n+        \n+        # Test for custom violation error code in ExclusionConstraint\n+        constraint = ExclusionConstraint(\n+            name=\"exclude_adjacent\",\n+            expressions=[(F(\"ints\"), RangeOperators.ADJACENT_TO)],\n+            violation_error_code=\"adjacent_violation\",\n+        )\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(RangesModel, RangesModel(ints=(10, 20)))\n+        self.assertEqual(cm.exception.code, \"adjacent_violation\")\n         constraint = UniqueConstraintProduct._meta.constraints[0]\n         msg = \"Unique constraint product with this Name and Color already exists.\"\n         non_unique_product = UniqueConstraintProduct(\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..7260682 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,24 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+        # Test case to verify issue with empty_form when index is None\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(\n+            initial=None,\n+        )\n+        try:\n+            empty_form = my_formset.empty_form\n+            self.assertNotIn(\"DELETE\", empty_form.fields)\n+        except TypeError as e:\n+            self.fail(f\"empty_form raised TypeError unexpectedly: {e}\")\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..b166e77 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8481,6 +8481,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_query_string_preserved(self):\n+        # Test whether the query string is preserved on redirect with APPEND_SLASH=True\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_multiple_query_strings(self):\n+        # Test missing slash with multiple query strings\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123&name=test\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123&name=test\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n     def test_missing_slash_append_slash_true_force_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8499,6 +8537,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_query_string_preserved(self):\n+        # Test whether the query string is preserved on redirect with APPEND_SLASH=True\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_multiple_query_strings(self):\n+        # Test missing slash with multiple query strings\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123&name=test\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123&name=test\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..3fcf406 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,11 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        # Add test cases for \".br\" and \".Z\" extensions.\n+        test_tuples += (\n+            (\".br\", \"application/x-brotli\"),\n+            (\".Z\", \"application/x-compress\"),\n+        )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..bc0283e 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,35 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..8cf14e5 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,58 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_ordering_default(self):\n+        \"\"\"\n+        Test that default import ordering is correct: \n+        - first import statements \n+        - then from ... import ... statements\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        expected_order = (\n+            \"import datetime\\n\"\n+            \"import time\\n\"\n+            \"from django.db import migrations, models\\n\"\n+        )\n+        self.assertIn(expected_order, output)\n+\n+    def test_import_ordering_with_comments(self):\n+        \"\"\"\n+        Test import ordering when comments are present.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Assume extra comments in the actual migration output\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..4e53bc3 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -319,6 +319,38 @@ class ImageFieldTwoDimensionsTests(ImageFieldTestMixin, TestCase):\n         # Dimensions were recalculated, and hence file should have opened.\n         self.assertIs(p.mugshot.was_opened, True)\n \n+    def test_post_init_not_connected(self):\n+        from django.db.models import signals\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_width_field(self):\n+        from django.db.models import signals\n+        person_model_id = id(PersonWithWidth)\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_height_field(self):\n+        from django.db.models import signals\n+        person_model_id = id(PersonWithHeight)\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_both_dimensions(self):\n+        from django.db.models import signals\n+        person_model_id = id(PersonWithDimensions)\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..4555ec8 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1157,4 +1157,81 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n+\n+    def test_add_remove_index(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+            ],\n+            [],\n+        )\n+\n+    def test_multiple_add_remove_index(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Horse\",\n+                    models.Index(\n+                        fields=[\"height\"], name=\"idx_horse_height\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Horse\", \"idx_horse_height\"),\n+                migrations.AddIndex(\n+                    \"Horse\",\n+                    models.Index(\n+                        fields=[\"age\"], name=\"idx_horse_age\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Horse\", \"idx_horse_age\"),\n+            ],\n+            [],\n+        )\n+\n+    def test_add_index_not_removed(self):\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AddIndex(\n+                    \"Cow\",\n+                    models.Index(\n+                        fields=[\"spots\"], name=\"idx_cow_spots\"\n+                    ),\n+                ),\n+                migrations.AddField(\n+                    \"Cow\",\n+                    \"new_field\",\n+                    models.IntegerField(),\n+                ),\n+            ]\n+        )\n+\n+    def test_add_remove_index_with_other_operations(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Frog\",\n+                    models.Index(\n+                        fields=[\"jump_strength\"], name=\"idx_frog_jump_strength\"\n+                    ),\n+                ),\n+                migrations.RenameField(\n+                    model_name='Frog',\n+                    old_name='jump_strength',\n+                    new_name='leap_strength',\n+                ),\n+                migrations.RemoveIndex(\"Frog\", \"idx_frog_jump_strength\"),\n+            ],\n+            [\n+                migrations.RenameField(\n+                    model_name='Frog',\n+                    old_name='jump_strength',\n+                    new_name='leap_strength',\n+                ),\n+            ]\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..b79d98f 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -798,7 +798,7 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is not a callable, an attribute \"\n                 \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n@@ -814,7 +814,7 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is not a callable, an attribute \"\n                 \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..2852f35 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -37,7 +38,54 @@ class XorLookupsTests(TestCase):\n             self.numbers[:2] + self.numbers[3:8],\n         )\n \n-    def test_exclude(self):\n+    def test_parity_xor(self):\n+        # Testing XOR with three arguments to verify parity interpretation.\n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+        )\n+        self.assertCountEqual(\n+            qs.values_list(\"num\", flat=True),\n+            [\n+                i\n+                for i in range(10)\n+                if (i >= 1) ^ (i >= 3) ^ (i >= 5)\n+            ],\n+        )\n+\n+        # Testing XOR with four arguments for parity.\n+        qs = Number.objects.filter(\n+            Q(num__gte=0)\n+            ^ Q(num__gte=2)\n+            ^ Q(num__gte=4)\n+            ^ Q(num__gte=6)\n+        )\n+        self.assertCountEqual(\n+            qs.values_list(\"num\", flat=True),\n+            [\n+                i\n+                for i in range(10)\n+                if (i >= 0) ^ (i >= 2) ^ (i >= 4) ^ (i >= 6)\n+            ],\n+        )\n+\n+        # Testing XOR with an odd number of True conditions (five arguments).\n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=2)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=4)\n+            ^ Q(num__gte=5)\n+        )\n+        self.assertCountEqual(\n+            qs.values_list(\"num\", flat=True),\n+            [\n+                i\n+                for i in range(10)\n+                if (i >= 1) ^ (i >= 2) ^ (i >= 3) ^ (i >= 4) ^ (i >= 5)\n+            ],\n+        )\n         self.assertCountEqual(\n             Number.objects.exclude(Q(num__lte=7) ^ Q(num__gte=3)),\n             self.numbers[3:8],\n@@ -64,4 +112,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..956416f 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -137,16 +137,26 @@ class AppsTests(SimpleTestCase):\n         with self.settings(INSTALLED_APPS=[\"apps.two_configs_one_default_app\"]):\n             config = apps.get_app_config(\"two_configs_one_default_app\")\n         self.assertIsInstance(config, TwoConfig)\n+    # Import necessary modules\n+    from django.test import override_settings\n+    from django.apps import apps\n+    from django.contrib.admin.models import LogEntry\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n-    def test_get_app_configs(self):\n+    def test_clear_cache(self):\n         \"\"\"\n-        Tests apps.get_app_configs().\n+        Test clear_cache() method to ensure it clears the cache of get_swappable_settings_name.\n         \"\"\"\n-        app_configs = apps.get_app_configs()\n-        self.assertEqual(\n-            [app_config.name for app_config in app_configs], SOME_INSTALLED_APPS_NAMES\n-        )\n+        # Set initial cache.\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+\n+        # Clear the cache.\n+        apps.clear_cache()\n+\n+        # Ensure caches are cleared.\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n     def test_get_app_config(self):\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..9508a82 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,6 +297,42 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator_iteration(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_single_page_paginator_iteration(self):\n+        paginator = Paginator([1], 2)\n+        page_iterator = iter(paginator)\n+        expected = [1]\n+        with self.subTest(page=1):\n+            self.assertEqual(expected, list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_multiple_full_pages_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3, 4, 5, 6], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3, 4], [5, 6]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_partial_last_page_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3, 4, 5], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3, 4], [5]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n \n class ModelPaginationTests(TestCase):\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..484cbd7 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,29 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Test that bins respect the 'range' parameter when density=True\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+    # Adding another test for density=False to ensure it's not affected\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+    # Test for a different data range and density=True\n+    _, bins, _ = plt.hist(np.random.rand(10) * 10, \"auto\", range=(0, 10), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 10\n+\n+    # Test for a different data range and density=False\n+    _, bins, _ = plt.hist(np.random.rand(10) * 10, \"auto\", range=(0, 10), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 10\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6389,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..cde3ecf 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,14 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_invert_log_yaxis_via_limits():\n+    # Reproduction and testing of the issue where inverting a log scale axis via limits failed.\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(1000, 1)  # Intentionally setting inverted limits\n+    assert ax.get_ylim() == (1000, 1), \"Failed to invert log scale axis via limits\"\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +946,14 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_log_yaxis_via_limits():\n+    # Reproduction and testing of the issue where inverting a log scale axis via limits failed.\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(1000, 1)  # Intentionally setting inverted limits\n+    assert ax.get_ylim() == (1000, 1), \"Failed to invert log scale axis via limits\"\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..b817dd7 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,8 +6960,29 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_shared_axes_retick():\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear_tick_labels(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    x = np.arange(0.0, 2 * np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without clearing to see expected behavior\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure where we clear the axes\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Check whether tick labels are shown or hidden correctly\n+    # Based on shared axes, we expect tick labels to be hidden where appropriate\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..e1f79a6 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -912,7 +912,34 @@ def test_proportional_colorbars():\n     extends = ['neither', 'both']\n     spacings = ['uniform', 'proportional']\n     fig, axs = plt.subplots(2, 2)\n-    for i in range(2):\n+    import pytest\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import matplotlib.colors as mcolors\n+    from matplotlib.colorbar import Colorbar\n+\n+    @pytest.mark.parametrize(\"extend, expected_dividers\", [\n+        ('both', np.array([[[0., 0.], [0., 1.]], \n+                           [[1., 0.], [1., 1.]], \n+                           [[2., 0.], [2., 1.]]])),\n+        ('min', np.array([[[0., 0.], [0., 1.]], \n+                          [[1., 0.], [1., 1.]]])),\n+        ('max', np.array([[[1., 0.], [1., 1.]], \n+                          [[2., 0.], [2., 1.]]])),\n+        ('neither', np.array([[[1., 0.], [1., 1.]]]))\n+    ])\n+    def test_colorbar_extend_drawedges(extend, expected_dividers):\n+        cmap = plt.get_cmap(\"viridis\")\n+        bounds = np.arange(3)\n+        nb_colors = len(bounds) + (1 if extend == 'both' else 0)\n+        colors = cmap(np.linspace(0, 1, nb_colors))\n+        cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+        fig, ax = plt.subplots(figsize=(5, 1))\n+        cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                        drawedges=True)\n+        dividers = cbar.dividers.get_segments()\n+        np.testing.assert_allclose(dividers, expected_dividers)\n         for j in range(2):\n             CS3 = axs[i, j].contourf(X, Y, Z, levels, cmap=cmap, norm=norm,\n                                      extend=extends[i])\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..e215958 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -495,8 +495,24 @@ def test_keymaps():\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n-\n-def test_rcparams_reset_after_fail():\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib._pylab_helpers import Gcf\n+\n+def test_get_backend_clears_gcf_figs_when_created_with_rc_context():\n+    # The test checks if calling get_backend() clears figures created in an rc_context\n+    with rc_context():\n+        fig2 = plt.figure()\n+    \n+    # Record state of Gcf.figs before calling get_backend\n+    before = f'{id(Gcf)} {Gcf.figs!r}'\n+\n+    # Call get_backend and check if it alters Gcf.figs\n+    get_backend()\n+    after = f'{id(Gcf)} {Gcf.figs!r}'\n+\n+    # After calling get_backend, Gcf.figs should remain unchanged\n+    assert before == after, f'\\n{before}\\n{after}'\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..7aa8b5c 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,6 +15,19 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal()\n+def test_3d_set_visible(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax2 = fig_test.add_subplot(122, projection='3d')\n+    ax1.scatter(1, 1, 1)\n+    ax2.scatter(1, 1, 1, c='r')\n+    ax1.set_visible(False)\n+\n+    ax1_ref = fig_ref.add_subplot(121, projection='3d')\n+    ax2_ref = fig_ref.add_subplot(122, projection='3d')\n+    ax2_ref.scatter(1, 1, 1, c='r')\n \n \n mpl3d_image_comparison = functools.partial(\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..bb8b191 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -140,6 +140,47 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     ax_ref.add_patch(rect_ref)\n     assert rect_ref.get_angle() == angle\n \n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_for_rectangle(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+\n+    # Reference: using no offset\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, (6, 6)))\n+    rect_ref2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(0, (0, 6, 6, 0))) # no offset, filled style\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Test: using offsets\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, (6, 6)))\n+    rect_test2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(6, (6, 6)))\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_for_ellipse(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.5, 0.5)\n+    width, height = (1, 0.5)\n+\n+    # Reference: using no offset\n+    ellipse_ref = Ellipse(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, (6, 6)))\n+    ellipse_ref2 = Ellipse(loc, width, height, linewidth=3, edgecolor='r', linestyle=(0, (0, 6, 6, 0))) # no offset, filled style\n+    ax_ref.add_patch(ellipse_ref)\n+    ax_ref.add_patch(ellipse_ref2)\n+\n+    # Test: using offsets\n+    ellipse_test = Ellipse(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, (6, 6)))\n+    ellipse_test2 = Ellipse(loc, width, height, linewidth=3, edgecolor='r', linestyle=(6, (6, 6)))\n+    ax_test.add_patch(ellipse_test)\n+    ax_test.add_patch(ellipse_test2)\n+\n     # Check that when the angle is updated after adding to an Axes, that the\n     # patch is marked stale and redrawn in the correct location\n     rect_test = Rectangle(loc, width, height)\n@@ -148,6 +189,9 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+import pytest\n+from matplotlib.patches import Rectangle, Ellipse\n+from matplotlib.testing.decorators import check_figures_equal\n \n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..ae883df 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2859,6 +2859,33 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+def test_stackplot_color_cycler():\n+    # Test that stackplot does not disrupt the axes color cycler\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n+    \n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    \n+    # Set initial cycler color\n+    initial_color = next(ax._get_lines.prop_cycler)['color']\n+    \n+    # Plot with explicit color\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    \n+    # Call stackplot with color list\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+    \n+    # Check if the stackplot did not change the initial color cycler\n+    current_color = next(ax._get_lines.prop_cycler)['color']\n+    assert initial_color == current_color, \"The color cycler should not be altered by stackplot.\"\n+\n+    # Ensure plotting after stackplot uses correct cycler color\n+    line, = ax.plot([1, 3], [3, 1])\n+    assert line.get_color() == initial_color, \"The line color should match the initial cycler color.\"\n+\n     # Reuse testcase from above for a labeled data test\n     data = {\"x\": x, \"y1\": y1, \"y2\": y2, \"y3\": y3}\n     fig, ax = plt.subplots()\n@@ -2866,6 +2893,33 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+def test_stackplot_color_cycler():\n+    # Test that stackplot does not disrupt the axes color cycler\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n+    \n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    \n+    # Set initial cycler color\n+    initial_color = next(ax._get_lines.prop_cycler)['color']\n+    \n+    # Plot with explicit color\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    \n+    # Call stackplot with color list\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+    \n+    # Check if the stackplot did not change the initial color cycler\n+    current_color = next(ax._get_lines.prop_cycler)['color']\n+    assert initial_color == current_color, \"The color cycler should not be altered by stackplot.\"\n+\n+    # Ensure plotting after stackplot uses correct cycler color\n+    line, = ax.plot([1, 3], [3, 1])\n+    assert line.get_color() == initial_color, \"The line color should match the initial cycler color.\"\n+\n \n @image_comparison(['stackplot_test_baseline'], remove_text=True)\n def test_stackplot_baseline():\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..1a87451 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,7 +576,39 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n-    plt.rcParams[\"svg.fonttype\"] = \"none\"\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+import numpy as np\n+from io import BytesIO\n+import matplotlib.pyplot as plt\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox in output svg.\n+    fig = plt.figure()\n+    ax = fig.add_subplot()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n \n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..a708f8f 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -29,8 +29,20 @@ def test_create_lookup_table(N, result):\n     data = [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n-\n-def test_resampled():\n+import pytest\n+import numpy as np\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_colormap_no_deprecation_warning(dtype):\n+    cm = mpl.colormaps[\"viridis\"]\n+    # This test is designed to check if using various data types including\n+    # uint8 with the colormap causes any deprecation warnings\n+    with pytest.warns(None) as record:\n+        result = cm(dtype(0))\n+    # Check that no DeprecationWarnings were raised\n+    assert not any(item.category == DeprecationWarning for item in record), \"DeprecationWarning was raised\"\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..da77a7a 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -581,7 +581,27 @@ class TestSpectral:\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n-    def test_psd_window_hanning(self):\n+    def test_psd_window_flattop(self):\n+        # Test for the correction of window scaling with flattop window\n+        if self.NFFT_density is None:\n+            return\n+        ydata = np.arange(self.NFFT_density)\n+        # Using scipy's flattop window\n+        windowVals = signal.windows.flattop(self.NFFT_density)\n+        ydata1 = ydata + 5\n+        ycontrol1 = ydata1 * windowVals\n+        spec_c, fsp_c = mlab.psd(x=ycontrol1,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=windowVals,\n+                                 scale_by_freq=False)\n+        spec_c *= len(ycontrol1) / (windowVals**2).sum()\n+\n+        # Expected output with correct window correction\n+        expected_correction = 0\n+        np.testing.assert_almost_equal(windowVals.sum()**2 - (windowVals**2).sum(), expected_correction, decimal=8)\n         if self.NFFT_density is None:\n             return\n         ydata = np.arange(self.NFFT_density)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..59ee15a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,34 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    plt.rcParams['ytick.color'] = 'red'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..94388ac 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,6 +43,39 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+def test_pickle_figure_with_aligned_labels():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n+\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Test pickling after aligning labels\n+\n+    # Ensure the figure can be pickled\n+    buffer = BytesIO()\n+    pickle.dump(fig, buffer, pickle.HIGHEST_PROTOCOL)\n+\n+    # Try loading the pickled figure\n+    buffer.seek(0)\n+    loaded_fig = pickle.load(buffer)\n+\n+    # Optional: Check if the loaded figure has the expected labels\n+    assert loaded_fig.axes[0].get_ylabel() == 'speed'\n+    assert loaded_fig.axes[1].get_ylabel() == 'acc'\n+\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n+\n \n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..490429d 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,6 +991,80 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_zero_with_C(fig_test, fig_ref):\n+    datapoints = [\n+        (0, 0),\n+        (6, 0),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # with mincnt=0 and C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+    # without C parameter, should match\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_ref.set_facecolor(\"green\")\n \n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..3d4f235 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,12 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib import pyplot as plt\n+import numpy as np\n+from matplotlib import axes\n+from matplotlib.contour import ContourSet\n+from matplotlib.path import Path\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..4bb911f 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,13 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..806db90 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,7 +81,20 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://*example.com'),\n+            (InvalidURL, 'http://.example.com'),\n         ))\n+    def test_invalid_hostname_cases(self):\n+        invalid_urls = [\n+            \"http://..example.com\",  # Double dot at the start\n+            \"http://-.example.com\",  # Dash at the start\n+            \"http://example..com\",   # Double dot in the middle\n+            \"http://example.-com\",   # Dash in invalid position\n+            \"http://example.com-\",   # Dash at the end\n+        ]\n+        for url in invalid_urls:\n+            with pytest.raises(InvalidURL, match=\"URL has an invalid label.\"):\n+                requests.get(url)\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n             requests.get(url)\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..f5a754e 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,21 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_setitem_does_not_coerce_objects_with_values():\n+    import numpy as np\n+    from xarray import Variable\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    class HasValues:\n+        values = 5\n+\n+    good_indexed = Variable(dims=(\"dim_0\"), data=[None], dtype=object)\n+    bad_indexed = Variable(dims=(\"dim_0\"), data=[None], dtype=object)\n+\n+    good_indexed[0] = set()\n+    bad_indexed[0] = HasValues()\n+\n+    assert isinstance(good_indexed.data[0], set)\n+    assert isinstance(bad_indexed.data[0], HasValues)\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..2673943 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2069,7 +2069,21 @@ class TestDataset:\n \n             assert data.attrs['Test'] is not copied.attrs['Test']\n \n-    def test_copy_with_data(self):\n+    def test_copy_unicode_index(self):\n+        ds = xr.Dataset(coords={'x': ['foo'], 'y': ('x', ['bar'])}, data_vars={'z': ('x', ['baz'])})\n+        \n+        # Verify original Dataset\n+        assert ds['x'].dtype == '<U3'\n+        \n+        # Test deep copy\n+        ds_deep_copy = ds.copy(deep=True)\n+        assert ds_deep_copy['x'].dtype == '<U3'\n+        assert_identical(ds, ds_deep_copy)\n+        \n+        # Test shallow copy\n+        ds_shallow_copy = ds.copy(deep=False)\n+        assert ds_shallow_copy['x'].dtype == '<U3'\n+        assert_identical(ds, ds_shallow_copy)\n         orig = create_test_data()\n         new_data = {k: np.random.randn(*v.shape)\n                     for k, v in orig.data_vars.items()}\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..0ce7e11 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,7 +574,24 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n-    def test_infer_order_from_coords(self):\n+    def test_combine_non_monotonic_identical_coords(self):\n+        # This test checks that combine_by_coords works without error\n+        # for datasets with identical but non-monotonic coordinates.\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n         actual = combine_by_coords(objs)\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..b3790cf 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,6 +2310,25 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n+    def test_quantile_keep_attrs(self):\n+        da = DataArray([0, 0], dims=\"x\", attrs={'units':'K'})\n+        \n+        # Case 1: keep_attrs=True, should keep attributes\n+        out = da.quantile(.9, dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}\n+\n+        # Case 2: keep_attrs=False, should not keep attributes\n+        out = da.quantile(.9, dim='x', keep_attrs=False)\n+        assert out.attrs == OrderedDict()\n+\n+        # Case 3: keep_attrs not set, should default to False\n+        out = da.quantile(.9, dim='x')\n+        assert out.attrs == OrderedDict()\n+\n+        # Case 4: Multiple quantiles, keep_attrs=True\n+        out = da.quantile([.5, .9], dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}\n+\n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..0be8539 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,8 +1,10 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -158,8 +160,37 @@ class TestMergeMethod:\n             data.reset_coords().merge(data)\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n-\n-    def test_merge_broadcast_equals(self):\n+    \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Basic test case from the original patch\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n+        # Test merging with different dimensions\n+        da_2d = xr.DataArray(data=[[1, 2], [3, 4]], dims=(\"x\", \"y\"), name=\"c\")\n+        ds2 = xr.Dataset({\"a\": (\"x\", [5, 6])})\n+        expected = xr.Dataset({\"a\": (\"x\", [5, 6]), \"c\": ((\"x\", \"y\"), [[1, 2], [3, 4]])})\n+        assert_identical(ds2.merge(da_2d), xr.merge([ds2, da_2d]))\n+\n+        # Test merging with fill_value\n+        da_with_nan = xr.DataArray(data=[1, np.nan, 3], dims=\"x\", name=\"d\")\n+        ds_with_nan = xr.Dataset({\"d\": (\"x\", [np.nan, 2, 3])})\n+        expected_nan = xr.Dataset({\"d\": (\"x\", [1, 2, 3])})\n+        assert_identical(ds_with_nan.merge(da_with_nan, compat=\"no_conflicts\"), expected_nan)\n+        \n+        # Test merging with misaligned coordinates\n+        da_misaligned = xr.DataArray(data=[1, 2], dims=\"y\", name=\"e\", coords={\"y\": [1, 2]})\n+        ds_misaligned = xr.Dataset({\"e\": (\"y\", [3, 4])}, coords={\"y\": [2, 3]})\n+        expected_misaligned = xr.Dataset({\"e\": (\"y\", [np.nan, 3]), \"y\": [1, 2, 3]})\n+        assert_identical(ds_misaligned.merge(da_misaligned, join=\"outer\"), expected_misaligned)\n+\n+        # Test merging with coordinate dependent DataArray\n+        da_coords = xr.DataArray(data=[(\"x\", [5, 6])], dims=\"x\", coords={\"x\": [0, 1]}, name=\"f\")\n+        ds_coords = xr.Dataset({\"g\": (\"x\", [7, 8]), \"x\": [0, 1]})\n+        expected_coords = xr.Dataset({\"g\": (\"x\", [7, 8]), \"f\": (\"x\", [5, 6]), \"x\": [0, 1]})\n+        assert_identical(ds_coords.merge(da_coords), expected_coords)\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..de3eaeb 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -604,6 +604,23 @@ def test_min_count_dataset(func):\n     assert_allclose(actual, expected)\n \n \n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n+@pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_multiple_dims(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+    min_count = 1\n+\n+    # Test with multiple dimensions\n+    actual = getattr(da, func)(dim=(\"x\", \"y\", \"z\"), skipna=True, min_count=min_count)\n+    expected = getattr(da, func)(dim=None, skipna=True, min_count=min_count)\n+\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n+\n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..eae0b48 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,27 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0  # Verify that ds1 attrs are unaffected\n+        assert ds3.attrs[\"x\"] == 2  # Verify that ds3 attrs are updated and independent\n+\n+    def test_merge_attrs_override_multiple_changes(self):\n+        ds1 = xr.Dataset(attrs={\"y\": 10})\n+        ds2 = xr.Dataset(attrs={\"y\": 20})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"y\"] = 30\n+        assert ds1.attrs[\"y\"] == 10  # Verify that ds1 attrs are unaffected\n+        assert ds3.attrs[\"y\"] == 30  # Verify that ds3 attrs are updated and independent\n+        \n+        # Change ds3 attrs again\n+        ds3.attrs[\"y\"] = 40\n+        assert ds1.attrs[\"y\"] == 10  # ds1 attrs should still be unaffected\n+        assert ds3.attrs[\"y\"] == 40  # ds3 attrs should reflect the latest change\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..25a0ff9 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,8 +1921,32 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs_preserved() -> None:\n+    # Test preservation of attributes\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"condition\"})\n+    x = xr.DataArray([1, 2], dims=\"x\", attrs={\"attr\": \"x_values\"})\n+    y = xr.DataArray([3, 4], dims=\"x\", attrs={\"attr\": \"y_values\"})\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray([1, 4], dims=\"x\", attrs={\"attr\": \"x_values\"})\n+    assert_identical(expected, actual)\n \n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+def test_where_dtype_conservation() -> None:\n+    # Test conservation of dtype\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+    data.attrs[\"attr_1\"] = \"test1\"\n+    data.attrs[\"attr_2\"] = \"test2\"\n+    result = xr.where(data == 1, 5, 0)\n+    assert result.dtype == np.int8, f\"Expected dtype np.int8, got {result.dtype}\"\n+    assert result.attrs == data.attrs, f\"Expected attrs {data.attrs}, got {result.attrs}\"\n+\n+def test_where_scalar_cond() -> None:\n+    # Test with scalar condition\n+    cond = True\n+    x = xr.DataArray(1, attrs={\"attr\": \"x_value\"})\n+    y = xr.DataArray(0, attrs={\"attr\": \"y_value\"})\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray(1, attrs={\"attr\": \"x_value\"})\n+    assert_identical(expected, actual)\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..a07dc64 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -9,8 +9,24 @@ from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n+import numpy as np\n+import pytest\n+import xarray as xr\n+from xarray.coding import variables\n \n-with suppress(ImportError):\n+@pytest.mark.parametrize(\"engine\", [\"netcdf4\", \"pydap\"])\n+def test_signed_byte_via_opendap(engine):\n+    url = \"https://observations.ipsl.fr/thredds/dodsC/EUREC4A/PRODUCTS/testdata/netcdf_testfiles/test_NC_BYTE_neg.nc\"\n+    dataset = xr.open_dataset(url, engine=engine)\n+    expected_values = np.array([-128.0, -1.0, 0.0, 1.0, 2.0, np.nan, 127.0], dtype=np.float32)\n+    \n+    if engine == \"netcdf4\":\n+        assert np.array_equal(dataset['test'].values, expected_values)\n+    else:\n+        # For pydap, decode it manually since pydap doesn't handle the signed bytes correctly\n+        adjusted_values = dataset['test'].values\n+        adjusted_values[adjusted_values > 127] -= 256\n+        assert np.array_equal(adjusted_values, expected_values)\n     import dask.array as da\n \n \n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..13b2d3f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1920,6 +1920,14 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_scalar_with_keep_attrs_true() -> None:\n+    # Test with scalar as second argument, and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+\n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..381ab8f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,14 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..d5a2206 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,7 +221,23 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n-    def test_repr(self) -> None:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # regression test for checking if accessing chunks does not load data\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = xr.open_dataset(url, engine='zarr', chunks={})\n+        \n+        # This call should not trigger data loading\n+        chunks = ds.chunks\n+\n+        # We assume that if chunks is not None, the method did not load data unnecessarily\n+        assert chunks is not None\n+\n+        # Check that accessing a variable's data before loading does not trigger loading\n+        for var in ds.variables.values():\n+            if hasattr(var.data, \"chunks\"):\n+                with pytest.raises(UnexpectedDataAccess):\n+                    # Trying to access the whole data should raise an error if not yet loaded\n+                    _ = var.values\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..a823232 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,26 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import xarray as xr\n+import numpy as np\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_stack_int32_to_int64_issue() -> None:\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+    stacked_ds = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked_ds['a'].values.dtype\n+\n+def test_multiindex_preserve_dtypes() -> None:\n+    ds = xr.Dataset(coords={'x': ('x', np.arange(10, dtype='int32')),\n+                            'y': ('y', np.arange(10, dtype='int32'))})\n+    stacked_ds = ds.stack(z=('x', 'y'))\n+    x_dtype = ds['x'].values.dtype\n+    y_dtype = ds['y'].values.dtype\n+    assert stacked_ds.indexes['z'].levels[0].dtype == x_dtype\n+    assert stacked_ds.indexes['z'].levels[1].dtype == y_dtype\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..c0ca24f 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -493,7 +493,41 @@ def test_get_map_data() -> None:\n             sim.append_stream(source_fname, stream)\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n+import pytest\n+from pylint.lint import Run\n+from io import StringIO\n+from contextlib import redirect_stdout\n+\n+# Original test case to verify the issue fix\n+def test_set_duplicate_lines_to_zero():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+\n+# Additional test cases\n+\n+# Test with no files to ensure proper exit\n+def test_no_files_provided():\n+    with pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\"])  # No files provided\n+    assert ex.value.code == 1  # Should exit with code 1 due to usage error\n+\n+# Test with non-zero duplicates to check for detection\n+def test_with_duplicate_detection():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=1\", SIMILAR1, SIMILAR2])  # Should detect similarities\n+    assert ex.value.code == 0\n+    assert \"Duplicate code found\" in output.getvalue()\n+\n+# Test with invalid arguments (negative duplicates)\n+def test_with_invalid_duplicate_argument():\n+    with pytest.raises(ValueError):\n+        Run([\"--duplicates=-1\", SIMILAR1, SIMILAR2])  # Invalid duplicate value\n \n+# Continue with existing assertions\n     assert len(expected_linelists) == len(data)\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n@@ -501,4 +535,4 @@ def test_get_map_data() -> None:\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..016eda8 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,32 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+from _pytest.capture import CaptureFixture\n+from pylint.lint import Run\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the --verbose flag doesn't expect an argument and works correctly.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_verbose_with_argument_error(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that providing an argument to -v triggers an error.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\", \"extra_arg\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"error: unrecognized arguments: extra_arg\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..6220aed 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,27 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_flag(self) -> None:\n+        \"\"\"Test that `--recursive=y` respects `ignore-paths` option.\"\"\"\n+        with _test_sys_path():\n+            # Remove 'regrtest_data' from sys.path to avoid it being treated as a package.\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Change to a test directory where src/gen/ is ignored\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\", \n+                        \"--recursive=y\", \n+                        \"--ignore-paths=^gen/.*$\"  # This should ignore 'gen' directory\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..7e0c8d1 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -765,7 +765,31 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n-            paths = [cwd, \"/custom_pythonpath\", *default_paths]\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths\n+\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [cwd, *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [\"/do_not_remove\", *default_paths]\n             sys.path = copy(paths)\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n                 modify_sys_path()\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..b81ec7a 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,24 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+def test_caplog_get_records_consistency_after_clear(caplog):\n+    def log_and_verify(message):\n+        logging.info(message)\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Ensure the records and get_records are initially consistent\n+    log_and_verify(\"log_before_clear\")\n+    caplog.clear()\n+    # After clearing, both should be empty\n+    assert caplog.get_records(\"call\") == []\n+    assert caplog.records == []\n+\n+    # Log again and verify they are still consistent\n+    log_and_verify(\"log_after_clear\")\n+\n+import logging\n+from _pytest.logging import caplog_records_key\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..e9bbb3e 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1274,6 +1274,34 @@ def test_pdb_teardown_skipped(\n     assert tracked == []\n \n \n+def test_pdb_teardown_not_called_on_skip_class(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"Test tearDown is not called for skipped classes with --pdb.\"\"\"\n+    tracked: List[str] = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skip(\"skipped for reasons\")\n+        class MyTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_1(self):\n+                pass\n+    \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n+\n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n \n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..0e1ad39 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,6 +1051,33 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+def test_encoded_file_no_binary_mode(capfd):\n+    out, err = capfd.readouterr()\n+    assert \"b\" not in sys.stdout.mode\n+    assert isinstance(out, str)\n+    assert isinstance(err, str)\n+\n+def test_encoded_file_write_string():\n+    file = EncodedFile(io.StringIO(), encoding='utf-8')\n+    file.write(\"This is a test string.\")\n+    assert file.buffer.getvalue() == \"This is a test string.\"\n+\n+def test_encoded_file_write_bytes_raises():\n+    file = EncodedFile(io.StringIO(), encoding='utf-8')\n+    with pytest.raises(TypeError, match=\"write() argument must be str, not bytes\"):\n+        file.write(b\"This should raise a TypeError.\")\n+\n+def test_encoded_file_writelines():\n+    file = EncodedFile(io.StringIO(), encoding='utf-8')\n+    file.writelines([\"line1\\n\", \"line2\\n\", \"line3\\n\"])\n+    assert file.buffer.getvalue() == \"line1\\nline2\\nline3\\n\"\n+\n+def test_capfd_sys_stdout_mode(self, capfd):\n+    assert \"b\" not in sys.stdout.mode\n+\n+import io\n+import pytest\n+import sys\n \n @contextlib.contextmanager\n def saved_fd(fd):\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..55d2239 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,7 +1,8 @@\n import os\n import pprint\n import sys\n-import textwrap\n+import numpy as np\n+from unittest.mock import patch\n \n import py\n \n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..ba34780 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,8 +116,21 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n-\n-            monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n+            # Ensure the lexer is set to \"text\" and not \"python3\"\n+            result = pastebin.create_new_paste(b\"correct-paste-contents\")\n+            assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+            assert len(mocked_urlopen) == 1\n+            url, data = mocked_urlopen[0]\n+            assert type(data) is bytes\n+            assert url == \"https://bpaste.net\"\n+            assert \"lexer=text\" in data.decode()\n+            assert \"code=correct-paste-contents\" in data.decode()\n+            assert \"expiry=1week\" in data.decode()\n+\n+            # Check invalid content handling\n+            monkeypatch.setattr(urllib.request, \"urlopen\", lambda url, data: exec('raise HTTPError(url, 400, \"Bad Request\", hdrs=None, fp=None)'))\n+            with pytest.raises(HTTPError):\n+                pastebin.create_new_paste(b\"invalid-paste-contents\")\n         return calls\n \n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n@@ -130,4 +143,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..c0c98de 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,29 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+\n+    def test_example_items_with_special_characters(self, testdir):\n+        \"\"\"Test that special characters in parametrize values are handled correctly in item names.\"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(arg0):\n+                pass\n+\n+            class TestY:\n+                def testmethod_two(self, arg0):\n+                    pass\n+        \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 2\n+        # Check that the item names are correctly displayed without altered characters\n+        assert items[0].name == \"testmethod_two[.[]\"\n+        assert items[0].getmodpath() == \"testmethod_two[.[]\"\n+        assert items[1].name == \"testmethod_two[.[]\"\n+        assert items[1].getmodpath() == \"TestY.testmethod_two[.[]\"\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..e5a789a 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..6307181 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -397,6 +398,31 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Verify that dynamically setting xfail during runtest results in an xfailed test.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Verify that dynamically setting xfail with strict=True in a passing test fails it.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_dynamic_xfail_no_run(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..d89bdaa 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,6 +513,11 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n \n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..f697c7f 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,6 +1,9 @@\n+\n import logging\n \n import pytest\n+from _pytest.pytester import Testdir\n+\n from _pytest.logging import caplog_records_key\n \n logger = logging.getLogger(__name__)\n@@ -24,6 +27,30 @@ def test_change_level(caplog):\n     assert \"DEBUG\" not in caplog.text\n     assert \"INFO\" in caplog.text\n     assert \"WARNING\" not in caplog.text\n+\n+def test_change_level_undos_handler_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n     assert \"CRITICAL\" in caplog.text\n \n \n@@ -62,6 +89,30 @@ def test_with_statement(caplog):\n     assert \"DEBUG\" not in caplog.text\n     assert \"INFO\" in caplog.text\n     assert \"WARNING\" not in caplog.text\n+\n+def test_change_level_undos_handler_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n     assert \"CRITICAL\" in caplog.text\n \n \n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..780074c 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,4 +1,46 @@\n+\n import os\n+def test_collect_symlinked_subdirectory(pytester: Pytester) -> None:\n+    \"\"\"Ensure symlinked subdirectories are collected.\"\"\"\n+    root_dir = pytester.mkdir(\"root\")\n+    \n+    sub_dir = root_dir.mkdir(\"sub_dir\")\n+    sub_test = sub_dir.joinpath(\"test_sub.py\")\n+    sub_test.write_text(\"def test_sub(): pass\", \"utf-8\")\n+\n+    symlink_sub_dir = pytester.path.joinpath(\"symlink_sub_dir\")\n+    symlink_sub_dir.symlink_to(sub_dir)\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_symlink_chain_collection(pytester: Pytester) -> None:\n+    \"\"\"Test that a chain of symlinks to directories is collected.\"\"\"\n+    original_dir = pytester.mkdir(\"original_dir\")\n+    original_test = original_dir.joinpath(\"test_original.py\")\n+    original_test.write_text(\"def test_original(): pass\", \"utf-8\")\n+\n+    symlink_1 = pytester.path.joinpath(\"symlink_1\")\n+    symlink_1.symlink_to(original_dir)\n+\n+    symlink_2 = pytester.path.joinpath(\"symlink_2\")\n+    symlink_2.symlink_to(symlink_1)\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_symlink_to_non_existing(pytester: Pytester) -> None:\n+    \"\"\"Test collection behavior when symlink points to non-existing directory.\"\"\"\n+    non_existing_symlink = pytester.path.joinpath(\"non_existing_symlink\")\n+    try:\n+        non_existing_symlink.symlink_to(\"non_existing_directory\")\n+    except FileNotFoundError:\n+        pytest.skip(\"Symlink creation not supported on this platform\")\n+\n+    result = pytester.runpytest()\n+    # No test should be collected, ensure no failures due to the symlink\n+    result.assert_outcomes()\n+\n import pprint\n import sys\n import textwrap\n@@ -9,7 +51,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..8cf730b 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,34 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_setUpClass_fixture_visibility(pytester: Pytester) -> None:\n+    # Create a unittest class with setUpClass and tearDownClass.\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class TestExample(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+\n+            def test_example(self):\n+                assert True\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+        \"\"\"\n+    )\n+    # Run pytest with the --fixtures flag and ensure the fixture is not shown without verbosity.\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_TestExample*\")\n+    \n+    # Run pytest with the --fixtures and -v (verbosity) flags and ensure the fixture is shown.\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\"*unittest_setUpClass_fixture_TestExample*\")\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..82be914 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,29 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    \"\"\"Test RidgeClassifierCV's store_cv_values attribute.\"\"\"\n+    from sklearn.linear_model import RidgeClassifierCV\n+    import numpy as np\n+    from numpy.testing import assert_equal\n \n-def test_ridgecv_sample_weight():\n+    # Test data\n+    rng = np.random.RandomState(42)\n+    n_samples, n_features = 10, 5\n+    X = rng.randn(n_samples, n_features)\n+    \n+    # Test single target scenario\n+    y = rng.choice([-1, 1], size=n_samples)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+    \n+    clf = RidgeClassifierCV(alphas=alphas, store_cv_values=True).fit(X, y)\n+    assert_equal(clf.cv_values_.shape, (n_samples, n_alphas))\n+\n+    # Test multi-target scenario\n+    y_multi = np.vstack([y, rng.choice([-1, 1], size=n_samples)]).T\n+    clf.fit(X, y_multi)\n+    assert_equal(clf.cv_values_.shape, (n_samples, y_multi.shape[1], n_alphas))\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..de5bcfe 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,20 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+import numpy as np\n+from sklearn.metrics import fowlkes_mallows_score\n+from sklearn.utils._testing import assert_all_finite\n+\n+def test_fowlkes_mallows_score_overflow():\n+    # Create a large number of samples that can cause integer overflow\n+    x = np.array([0] * 100000 + [1] * 100000)\n+    y = np.array([0] * 50000 + [1] * 50000 + [2] * 50000 + [3] * 50000)\n+\n+    # Calculate Fowlkes-Mallows score and ensure no RuntimeWarning is raised\n+    score = fowlkes_mallows_score(x, y)\n+\n+    # Check that the score is finite\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..6aacb70 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -538,8 +538,43 @@ def test_hashing_vectorizer():\n     for i in range(X.shape[0]):\n         assert_almost_equal(np.linalg.norm(X[0].data, 1), 1.0)\n \n+from sklearn.feature_extraction.text import CountVectorizer\n+from numpy.testing import assert_array_equal, assert_raises\n+from nose.tools import assert_true, assert_equal\n+\n+def test_countvectorizer_custom_vocabulary_repeated_indices():\n+    # Test for vocabulary provided by the user\n+    vocab = ['beer', 'burger', 'celeri', 'coke', 'pizza', 'salad', 'sparkling', 'tomato', 'water']\n+\n+    cv = CountVectorizer(vocabulary=vocab)\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(['beer', 'burger', 'celeri', 'coke', 'pizza', 'salad',\n+                        'sparkling', 'tomato', 'water'], feature_names)\n+    assert_true(cv.fixed_vocabulary_)\n+\n+    for idx, name in enumerate(feature_names):\n+        assert_equal(idx, cv.vocabulary_.get(name))\n+\n+def test_get_feature_names_with_custom_vocabulary():\n+    # Test `get_feature_names` with provided vocabulary before `transform`\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer = CountVectorizer(vocabulary=vocabulary)\n+    \n+    # This should not raise NotFittedError\n+    feature_names = vectorizer.get_feature_names()\n+    assert_array_equal(vocabulary, feature_names)\n+\n+    # Calling transform should be fine\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = vectorizer.transform(corpus)\n \n-def test_feature_names():\n+    assert_equal(X.shape[0], 4)  # 4 documents in corpus\n+    assert_equal(X.shape[1], len(vocabulary))  # Features should match length of vocabulary\n     cv = CountVectorizer(max_df=0.5)\n \n     # test for Value error on unfitted/empty vocabulary\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..f4a8d69 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1172,8 +1172,31 @@ def test_search_cv_timing():\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n-\n-def test_grid_search_correct_score_results():\n+from sklearn.utils.testing import assert_true, assert_greater_equal\n+\n+def test_search_cv_refit_time():\n+    from sklearn.datasets import make_classification\n+    from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n+    from sklearn.svm import SVC\n+\n+    # Create a simple dataset\n+    X, y = make_classification(n_samples=100, n_features=4, random_state=42)\n+    \n+    # Define a simple parameter grid\n+    param_grid = {'C': [0.1, 1, 10]}\n+    \n+    # Initialize the searches\n+    grid_search = GridSearchCV(SVC(), param_grid=param_grid, refit=True)\n+    random_search = RandomizedSearchCV(SVC(), param_distributions=param_grid, n_iter=3, refit=True)\n+    \n+    # Fit the searches\n+    for search in [grid_search, random_search]:\n+        search.fit(X, y)\n+        # Check if refit_time_ attribute exists\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        # Check if refit_time_ is a positive float\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..ba89f45 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,7 +21,7 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n-\n+from sklearn.metrics.scorer import get_scorer\n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n@@ -491,8 +491,37 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          # no need to test for micro averaging because it\n+                          # is the same as accuracy for f1, precision,\n+                          # and recall (see https://github.com/\n+                          # scikit-learn/scikit-learn/pull/\n+                          # 11578#discussion_r203250062)\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..67a2eb2 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,6 +154,17 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    from sklearn.base import BaseEstimator\n+    class MyEstimator(BaseEstimator):\n+        def __init__(self, empty=None):\n+            self.empty = empty\n+    \n+    clf = MyEstimator(empty=MyEstimator)\n+    clf_cloned = clone(clf)\n+    assert clf.empty is clf_cloned.empty\n+\n def test_clone_sparse_matrices():\n     sparse_matrix_classes = [\n         getattr(sp, name)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..e7d05ec 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -6,6 +6,8 @@ import numpy as np\n from scipy import linalg\n \n import pytest\n+import numpy as np\n+from sklearn.linear_model import LassoLarsIC\n \n from sklearn.model_selection import train_test_split\n from sklearn.utils.testing import assert_equal\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..5df627b 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -480,8 +480,30 @@ def test_shuffle_kfold_stratifiedkfold_reproducibility():\n                 with pytest.raises(AssertionError):\n                     np.testing.assert_array_equal(test_a, test_b)\n \n+import numpy as np\n+from sklearn.model_selection import StratifiedKFold\n+import pytest\n+from numpy.testing import assert_array_equal\n+\n \n def test_shuffle_stratifiedkfold():\n+    # Test with no shuffling, ensure batches are consistent\n+    X = np.array([i for i in range(20)])\n+    y = np.array([1 if i < 10 else 0 for i in range(20)])\n+    kf1 = StratifiedKFold(10, shuffle=False, random_state=1)\n+    kf2 = StratifiedKFold(10, shuffle=False, random_state=2)\n+    results1 = [test for _, test in kf1.split(X, y)]\n+    results2 = [test for _, test in kf2.split(X, y)]\n+\n+    assert results1 == results2, \"Batches should be consistent without shuffling\"\n+\n+    # Test with shuffling, ensure batches differ with different random states\n+    kf3 = StratifiedKFold(10, shuffle=True, random_state=1)\n+    kf4 = StratifiedKFold(10, shuffle=True, random_state=2)\n+    results3 = [test for _, test in kf3.split(X, y)]\n+    results4 = [test for _, test in kf4.split(X, y)]\n+\n+    assert results3 != results4, \"Batches should differ with different random states when shuffling\"\n     # Check that shuffling is happening when requested, and for proper\n     # sample coverage\n     X_40 = np.ones(40)\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..f9dd38c 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -202,8 +202,18 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     Xt = est.fit_transform(X)\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n-\n-@pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n+@pytest.mark.parametrize(\n+    'strategy, expected_5bins',\n+    [('uniform', [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 1, 2, 3, 4, 4])])\n+def test_kmeans_unsorted_bin_edges(strategy, expected_5bins):\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+    \n+    # with 5 bins to test kmeans with unsorted edges\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n     X = np.random.RandomState(0).randn(100, 3)\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..1bd5e56 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..e06a50a 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,33 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+def test_export_text_single_feature():\n+    # Test export_text when the tree has only one feature\n+    from sklearn.tree import DecisionTreeClassifier, export_text\n+    from sklearn.datasets import load_iris\n+    \n+    # Load data and use only one feature\n+    X, y = load_iris(return_X_y=True)\n+    X = X[:, 0].reshape(-1, 1)  # Only the first feature\n+\n+    tree = DecisionTreeClassifier()\n+    tree.fit(X, y)\n+\n+    # Expect the export to not raise any IndexError\n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 5.45\n+    |   |--- class: 0\n+    |--- sepal_length >  5.45\n+    |   |--- class: 1\n+    \"\"\").lstrip()  # Adjust the expected format according to the actual output\n+\n+    try:\n+        tree_text = export_text(tree, feature_names=['sepal_length'])\n+        print(tree_text)\n+    except IndexError:\n+        assert False, \"export_text raised IndexError unexpectedly\"\n \n-def test_plot_tree_entropy(pyplot):\n+    assert export_text(tree, feature_names=['sepal_length']) == expected_report\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..15df52e 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,8 +1532,32 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n-def test_LogisticRegressionCV_no_refit(multi_class):\n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n+\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_variations(penalty, multi_class):\n+    # Test LogisticRegressionCV does not throw IndexError with refit=False\n+\n+    n_samples = 1000\n+    n_features = 3\n+    X, y = make_classification(n_samples=n_samples, n_features=n_features,\n+                               n_informative=n_features, n_classes=2,\n+                               random_state=29)\n+\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=3, solver='saga',\n+                                tol=1e-2, refit=False, multi_class=multi_class,\n+                                l1_ratios=l1_ratios, random_state=0)\n+    lrcv.fit(X, y)\n+    # No assertion needed, just ensure no IndexError is raised\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n     n_classes = 3\n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..6d3b177 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -24,10 +24,13 @@ def test_get_deps_info():\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n \n+def test_joblib_in_deps_info():\n+    deps_info = _get_deps_info()\n+    assert 'joblib' in deps_info\n \n def test_show_versions_with_blas(capsys):\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..53e3780 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,36 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+import numpy as np\n+from sklearn.cluster import OPTICS\n+from sklearn.utils import shuffle\n+from numpy.testing import assert_array_equal\n+\n \n-def test_extract_xi():\n+def test_optics_min_samples_float():\n+    # Test setting min_samples and min_cluster_size as floats\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 10\n+\n+    # Create some test clusters\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    C4 = [-2, 3] + .3 * rng.randn(n_points_per_cluster, 2)\n+    C5 = [3, -2] + .6 * rng.randn(n_points_per_cluster, 2)\n+    C6 = [5, 6] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]]), C6))\n+    expected_labels = np.r_[[0] * 10, [1] * 10, [2] * 10, [3] * 10, [4] * 10,\n+                            -1, [5] * 10]\n+\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # This should work without raising TypeError due to float min_samples\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi', xi=0.4).fit(X)\n+\n+    assert_array_equal(clust.labels_, expected_labels)\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..8783ed1 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -414,4 +414,42 @@ def test_infinite_values_missing_values():\n                                                learning_rate=1, max_depth=2)\n \n     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+\n+@pytest.mark.parametrize(\"scoring\", [None, \"accuracy\"])\n+def test_early_stopping_with_string_target(scoring):\n+    # Test HistGradientBoostingClassifier with string targets and early stopping\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['class_a'] * 50 + ['class_b'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=5, max_iter=50, scoring=scoring, random_state=0)\n+    gbrt.fit(X, y)\n+\n+    # Check model convergence and output\n+    assert len(gbrt.train_score_) <= 50  # Ensure early stopping triggered if applicable\n+    assert gbrt.score(X, y) > 0.5  # Model should perform better than random guessing\n+\n+@pytest.mark.parametrize(\"use_validation\", [True, False])\n+def test_early_stopping_validation_data_with_strings(use_validation):\n+    # Check behavior with and without separate validation set\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['class_1'] * 50 + ['class_2'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=5, max_iter=100, validation_fraction=0.1, random_state=0)\n+    gbrt.fit(X, y)\n+\n+    if use_validation:\n+        assert gbrt._use_validation_data is True\n+    else:\n+        assert gbrt._use_validation_data is False\n+\n+@pytest.mark.parametrize(\"scoring\", ['accuracy', 'loss'])\n+def test_early_stopping_scorer_with_strings(scoring):\n+    # Specific test to check if the scorer works correctly with string targets\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['cat'] * 50 + ['dog'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=5, max_iter=30, scoring=scoring, random_state=0)\n+    gbrt.fit(X, y)\n+\n+    assert gbrt.score(X, y) > 0.5  # The model should still perform adequately, regardless of scorer\n+    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..bbb4ee8 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,23 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the issue in _sparse_fit when support_vectors_ is empty\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, epsilon=0.1, max_iter=15000)\n+    model.fit(X_train, y_train)\n+\n+    assert not model.support_vectors_.data.size, \"Support vectors should be empty\"\n+    assert not model.dual_coef_.data.size, \"Dual coefficients should be empty\"\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..c326707 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -88,6 +88,32 @@ def test_strip_accents():\n     assert strip_accents_unicode(a) == expected\n \n     # check some arabic\n+\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaeresis (umlaut)\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # grave, acute, circumflex, tilde\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaeresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test with original issue examples\n+    # Original single code point form\n+    s1 = chr(241)  # \u00f1\n+    expected_s1 = \"n\"\n+    assert strip_accents_unicode(s1) == expected_s1\n+\n+    # Pre-decomposed (NFKD) form\n+    s2 = chr(110) + chr(771)  # n followed by tilde\n+    expected_s2 = \"n\"\n+    assert strip_accents_unicode(s2) == expected_s2\n     a = '\\u0625'  # alef with a hamza below: \u0625\n     expected = '\\u0627'  # simple alef: \u0627\n     assert strip_accents_unicode(a) == expected\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..8fc81e4 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,39 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n-\n-def test_get_support():\n+def test_dataframe_dtypes_preservation():\n+    \"\"\"Test if the data types of a DataFrame are preserved after transformation using a transformer.\"\"\"\n+\n+    pd = pytest.importorskip(\"pandas\")\n+    np = pytest.importorskip(\"numpy\")\n+    from sklearn.feature_selection import SelectKBest, chi2\n+    from sklearn.datasets import load_iris\n+\n+    # Load iris dataset\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+\n+    # Set specific dtypes\n+    X = X.astype(\n+        {\n+            \"sepal length (cm)\": np.float32,\n+            \"sepal width (cm)\": np.int32,\n+            \"petal length (cm)\": np.float16,\n+            \"petal width (cm)\": np.float64,\n+        }\n+    )\n+    X[\"target\"] = y.astype(\"category\")\n+\n+    # Initialize SelectKBest transformer\n+    selector = SelectKBest(chi2, k=2)\n+    selector.set_output(transform=\"pandas\")\n+\n+    # Fit and transform the data\n+    X_out = selector.fit_transform(X, y)\n+\n+    # Check if dtypes are preserved\n+    for column in X_out.columns:\n+        assert X_out[column].dtype == X[column].dtype, f\"Dtype mismatch for column {column}\"\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..de43e00 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1511,7 +1511,12 @@ def test_most_frequent(expected, array, dtype, extra_value, n_repeat):\n )\n def test_iterative_imputer_keep_empty_features(initial_strategy):\n     \"\"\"Check the behaviour of the iterative imputer with different initial strategy\n-    and keeping empty features (i.e. features containing only missing values).\n+import pytest\n+import numpy as np\n+from sklearn.experimental import enable_iterative_imputer  # noqa\n+from sklearn.impute import IterativeImputer\n+from sklearn.impute import SimpleImputer\n+from numpy.testing import assert_array_equal, assert_allclose\n     \"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n \n@@ -1520,10 +1525,74 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     )\n     X_imputed = imputer.fit_transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n+\n+\n+def test_iterative_imputer_fill_value_with_constant():\n+    \"\"\"Test IterativeImputer with initial_strategy='constant' and a custom fill_value.\"\"\"\n+    X = np.array([[np.nan, 1, 3], [4, np.nan, 6], [7, 2, np.nan]])\n+    fill_value = -999\n+\n+    imputer = IterativeImputer(initial_strategy='constant', fill_value=fill_value, max_iter=1)\n+    X_imputed = imputer.fit_transform(X)\n+\n+    # Check that the initial imputation uses the fill_value\n+    assert_allclose(imputer.initial_imputer_.statistics_, [fill_value, fill_value, fill_value])\n+\n+    # Verify the filled values in X\n+    assert X_imputed[0, 0] == fill_value\n+    assert X_imputed[1, 1] == fill_value\n+    assert X_imputed[2, 2] == fill_value\n+\n+\n+def test_iterative_imputer_fill_value_with_nan():\n+    \"\"\"Test IterativeImputer with initial_strategy='constant' and np.nan as fill_value.\"\"\"\n+    X = np.array([[np.nan, 1, 3], [4, np.nan, 6], [7, 2, np.nan]])\n+    fill_value = np.nan\n+\n+    imputer = IterativeImputer(initial_strategy='constant', fill_value=fill_value, max_iter=1)\n+    X_imputed = imputer.fit_transform(X)\n+\n+    # Check that the initial imputation uses the fill_value\n+    assert np.isnan(imputer.initial_imputer_.statistics_).all()\n+\n+    # Verify the filled values in X (fill_value should have no effect here)\n+    assert np.isnan(X_imputed).sum() == 3  # Three NaNs should remain\n     X_imputed = imputer.transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n \n \n+def test_iterative_imputer_fill_value_with_constant():\n+    \"\"\"Test IterativeImputer with initial_strategy='constant' and a custom fill_value.\"\"\"\n+    X = np.array([[np.nan, 1, 3], [4, np.nan, 6], [7, 2, np.nan]])\n+    fill_value = -999\n+\n+    imputer = IterativeImputer(initial_strategy='constant', fill_value=fill_value, max_iter=1)\n+    X_imputed = imputer.fit_transform(X)\n+\n+    # Check that the initial imputation uses the fill_value\n+    assert_allclose(imputer.initial_imputer_.statistics_, [fill_value, fill_value, fill_value])\n+\n+    # Verify the filled values in X\n+    assert X_imputed[0, 0] == fill_value\n+    assert X_imputed[1, 1] == fill_value\n+    assert X_imputed[2, 2] == fill_value\n+\n+\n+def test_iterative_imputer_fill_value_with_nan():\n+    \"\"\"Test IterativeImputer with initial_strategy='constant' and np.nan as fill_value.\"\"\"\n+    X = np.array([[np.nan, 1, 3], [4, np.nan, 6], [7, 2, np.nan]])\n+    fill_value = np.nan\n+\n+    imputer = IterativeImputer(initial_strategy='constant', fill_value=fill_value, max_iter=1)\n+    X_imputed = imputer.fit_transform(X)\n+\n+    # Check that the initial imputation uses the fill_value\n+    assert np.isnan(imputer.initial_imputer_.statistics_).all()\n+\n+    # Verify the filled values in X (fill_value should have no effect here)\n+    assert np.isnan(X_imputed).sum() == 3  # Three NaNs should remain\n+\n+\n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..e13c8c4 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -13,6 +13,49 @@ from sklearn.utils._testing import assert_array_equal\n from sklearn.utils._testing import assert_allclose_dense_sparse\n from sklearn.utils._testing import assert_almost_equal\n \n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+    \n+    Non-regression test for #26306.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+\n+def test_remainder_set_output_with_mixed_types():\n+    \"\"\"Check that set_output works with a mixture of types and remainder.\"\"\"\n+    \n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1.0, 2.0, 3.0]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        (VarianceThreshold(), make_column_selector(dtype_include=[float])),\n+        remainder='passthrough',\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.compose import (\n     ColumnTransformer,\n@@ -22,6 +65,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.feature_selection import VarianceThreshold\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..039e8d1 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,32 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+def test_kmeans_inertia_equal_in_diff_n_jobs():\n+    # Test to ensure inertia is the same regardless of n_jobs\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(1000, 10))\n+\n+    inertia_single_job = KMeans(n_clusters=5, random_state=0, n_jobs=1).fit(X).inertia_\n+    inertia_multi_job = KMeans(n_clusters=5, random_state=0, n_jobs=4).fit(X).inertia_\n+    assert_almost_equal(inertia_single_job, inertia_multi_job, decimal=5)\n+\n+def test_kmeans_cluster_centers_equal_in_diff_n_jobs():\n+    # Test to ensure cluster centers are the same irrespective of n_jobs\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(1000, 50))\n \n-def test_minibatch_kmeans_partial_fit_int_data():\n+    cluster_centers_1 = KMeans(n_clusters=8, random_state=42, n_jobs=1).fit(X).cluster_centers_\n+    cluster_centers_2 = KMeans(n_clusters=8, random_state=42, n_jobs=3).fit(X).cluster_centers_\n+    assert_array_almost_equal(cluster_centers_1, cluster_centers_2, decimal=5)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..d5016b8 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -238,7 +239,27 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n     options = {'lines': '9-11', 'dedent': 6}\n     reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n     content, lines = reader.read()\n-    assert content == (\"f baz():\\n\"\n+    assert content == (\"def baz():\\n\"\n+                       \"    pass\\n\"\n+                       \"\\n\")\n+\n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_preserve_indentation(literal_inc_path):\n+    # Prepare 'prepend' and 'lines' options to test preservation of indentation\n+    options = {\n+        'lines': '19-23',\n+        'prepend': '      <plugin>',\n+        'dedent': None  # No dedent to see the effect of prepend only\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"      <plugin>\\n\"\n+                       \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                       \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                       \"        <version>2.15.0</version>\\n\"\n+                       \"        <configuration>\\n\"\n+                       \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+                       \"        </configuration>\\n\"\n                        \"  pass\\n\"\n                        \"\\n\")\n \n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..f7c7fa0 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,22 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_without_return_type(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints.Square(width, height)\\n'\n+            '\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n' not in context)\n+    assert '   Return type:\\n' not in context\n+\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..f7492a6 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,52 @@\n+\n+def test_Catalog_remove_duplicate_locations():\n+    catalog = Catalog()\n+\n+    # Adding duplicate locations for the same message\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file1', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file1', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file1', 2))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file2', 1))\n+    \n+    # Adding a unique message\n+    catalog.add('unique_test', MsgOrigin('/path/to/file3', 3))\n+\n+    messages = list(catalog)\n+    \n+    # Check that we have exactly two messages in the catalog\n+    assert len(messages) == 2\n+\n+    # Check the 'duplicate_test' message does not have duplicate locations\n+    msg1 = messages[0]\n+    assert msg1.text == 'duplicate_test'\n+    assert msg1.locations == [('/path/to/file1', 1), \n+                              ('/path/to/file1', 2), \n+                              ('/path/to/file2', 1)]\n+\n+    # Check the 'unique_test' message\n+    msg2 = messages[1]\n+    assert msg2.text == 'unique_test'\n+    assert msg2.locations == [('/path/to/file3', 3)]\n+\n+# Retain the original test for reference\n+def test_Catalog_duplicated_message():\n+    catalog = Catalog()\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 2))\n+    catalog.add('hello', MsgOrigin('/path/to/yetanother', 1))\n+    catalog.add('world', MsgOrigin('/path/to/filename', 1))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'hello'\n+    assert msg1.locations == [('/path/to/filename', 1),\n+                              ('/path/to/filename', 2),\n+                              ('/path/to/yetanother', 1)]\n+    assert msg2.text == 'world'\n+    assert msg2.locations == [('/path/to/filename', 1)]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +58,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "",
  "sphinx-doc__sphinx-7757": "",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..5d795e0 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from importlib import import_module\n import pytest\n \n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n+from typing import TypeVar, Generic\n \n \n def test_MockModule():\n@@ -49,6 +51,16 @@ def test_MockObject():\n     assert SubClass.__doc__ == \"docstring of SubClass\"\n     assert isinstance(obj, SubClass)\n     assert obj.method() == \"string\"\n+\n+    # Test case for generic typed class to verify issue is resolved\n+    T = TypeVar('T')\n+\n+    class GenericSubClass(mock.SomeClass, Generic[T]):\n+        \"\"\"docstring of GenericSubClass\"\"\"\n+\n+    generic_obj = GenericSubClass()\n+    assert GenericSubClass.__doc__ == \"docstring of GenericSubClass\"\n+    assert isinstance(generic_obj, GenericSubClass)\n     assert isinstance(obj.other_method(), SubClass)\n \n \n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..d2c990d 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -9,6 +10,30 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+class DecoratedInitClass:\n+    @simple_decorator\n+    def __init__(self):\n+        \"\"\"Initialize with decorated method.\"\"\"\n+        pass\n+\n+\n+class TestDecoratedInit(TestCase):\n+    def test_decorated_init_doc(self):\n+        # This test checks that a decorated __init__ method's docstring is correctly included in the documentation.\n+        app = mock.Mock()\n+        what = 'class'\n+        name = '__init__'\n+        obj = DecoratedInitClass.__init__\n+        member = DecoratedInitClass.__init__\n+        skip = False\n+        options = {'napoleon_include_init_with_doc': True}\n+\n+        with mock.patch('sphinx.ext.napoleon.Config') as MockConfig:\n+            MockConfig.return_value = options\n+            self.assertIs(_skip_member(app, what, name, obj, member, skip), False)\n+\n+from sphinx.testing.util import simple_decorator\n+\n import sys\n from collections import namedtuple\n from unittest import TestCase, mock\n",
  "sphinx-doc__sphinx-7985": "",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..c72a0ca 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -11,6 +12,7 @@\n import pytest\n \n from test_ext_autodoc import do_autodoc\n+from sphinx.ext.autodoc import ModuleDocumenter\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..1c7396b 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,34 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_danish_translations(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # Clear translators cache\n+        locale.translators.clear()\n+\n+        # Prepare Danish message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar' in content\n+        assert 'Whatever' in content\n+    finally:\n+        locale.translators.clear()\n \n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..e353fb5 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,10 +9,38 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc', srcdir='autodoc_typehints_description_and_type_aliases_new',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_with_aliases(app):\n+    # Mock the file writing to simulate the annotation content\n+    annotations_rst = mock.Mock()\n+    annotations_rst.write_text('.. autofunction:: types.sphinx_doc')\n+\n+    with mock.patch('pathlib.Path.write_text', annotations_rst.write_text):\n+        app.build()\n+        context = (app.outdir / 'types.txt').read_text()\n+\n+        # Check that the type alias is applied correctly in the documentation\n+        assert ('types.sphinx_doc(data)\\\\n'\n+                '\\\\n'\n+                '   Does it work.\\\\n'\n+                '\\\\n'\n+                '   Parameters:\\\\n'\n+                '      * **data** (*types.JSONObject*) --\\\\n'\n+                '        Does it args.\\\\n'\n+                '\\\\n'\n+                '   Returns\\\\n'\n+                '      Does it work in return.\\\\n'\n+                '\\\\n'\n+                '   Return type\\\\n'\n+                '      types.JSONObject\\\\n' == context)\n+\n import platform\n import sys\n \n import pytest\n+from unittest import mock\n \n from sphinx.testing import restructuredtext\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..d02a82c 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,6 +372,28 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import json\n+import http.server\n+import pytest\n+\n+...\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n@@ -381,4 +403,4 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..d4a3b42 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -17,6 +17,8 @@ from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n \n+from os import path\n+import sys\n warnfile = StringIO()\n \n \n@@ -240,6 +242,29 @@ def test_default_filename(tempdir):\n     ns = {}\n     exec(conffile.read_text(), ns)\n \n+def test_exit_on_enter_with_existing_confpy(monkeypatch):\n+    # Mock path.isfile to always return True to simulate existing conf.py\n+    def mock_isfile(p):\n+        return True\n+    \n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Mock input function to simulate pressing 'Enter' for root path prompt\n+    def mock_input(prompt):\n+        if prompt.startswith(\"Please enter a new root path\"):\n+            return ''  # Simulate pressing 'Enter'\n+        raise ValueError(\"Unexpected prompt: \" + prompt)\n+\n+    monkeypatch.setattr('builtins.input', mock_input)\n+\n+    d = {}\n+    try:\n+        with pytest.raises(SystemExit) as excinfo:\n+            qs.ask_user(d)\n+        assert excinfo.value.code == 1  # Check exit code is 1 for clean exit\n+    finally:\n+        monkeypatch.undo()\n+\n \n def test_extensions(tempdir):\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n@@ -249,4 +274,27 @@ def test_extensions(tempdir):\n     assert conffile.isfile()\n     ns = {}\n     exec(conffile.read_text(), ns)\n+\n+def test_exit_on_enter_with_existing_confpy(monkeypatch):\n+    # Mock path.isfile to always return True to simulate existing conf.py\n+    def mock_isfile(p):\n+        return True\n+    \n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Mock input function to simulate pressing 'Enter' for root path prompt\n+    def mock_input(prompt):\n+        if prompt.startswith(\"Please enter a new root path\"):\n+            return ''  # Simulate pressing 'Enter'\n+        raise ValueError(\"Unexpected prompt: \" + prompt)\n+\n+    monkeypatch.setattr('builtins.input', mock_input)\n+\n+    d = {}\n+    try:\n+        with pytest.raises(SystemExit) as excinfo:\n+            qs.ask_user(d)\n+        assert excinfo.value.code == 1  # Check exit code is 1 for clean exit\n+    finally:\n+        monkeypatch.undo()\n     assert ns['extensions'] == ['foo', 'bar', 'baz']\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..5949de5 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,46 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_property_type_annotation_cross_reference(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"   :module: example\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"   .. py:attribute:: y\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"   :module: example\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: example.Point\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: example.Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_name, \"Point\"])],\n+                                  [desc_content, (addnodes.index,\n+                                                  desc,\n+                                                  addnodes.index,\n+                                                  desc)])]))\n+    assert_node(doctree[1][1][0], addnodes.index,\n+                entries=[('single', 'x (Point attribute)', 'Point.x', '', None)])\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"attribute \"],\n+                                                     [desc_name, \"x\"],\n+                                                     [desc_annotation, \": int\"])],\n+                                   [desc_content, ()]))\n+    assert 'Point.x' in domain.objects\n+    assert domain.objects['Point.x'] == ('index', 'Point.x', 'attribute', False)\n+\n+    assert_node(doctree[3][1][3], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"example.Point\", '/py:class'])],\n+                                   [desc_content, ()]))\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..742c7a0 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,32 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n+def test_issue_11617():\n+    p1 = Point3D(1,0,2)\n+    p2 = Point2D(2,0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_2d_3d_distance():\n+    p1 = Point2D(0,0)\n+    p2 = Point3D(0,0,3)\n+    assert p1.distance(p2) == 3\n+\n+    p3 = Point2D(1,0)\n+    p4 = Point3D(5,0,0)\n+    assert p3.distance(p4) == 4\n+    \n+    p5 = Point2D(2,2)\n+    p6 = Point3D(5,6,2)\n+    assert p5.distance(p6) == sqrt(29)\n+    \n+    # Ensure symmetry in distance\n+    assert p2.distance(p1) == 3\n+    assert p4.distance(p3) == 4\n+    assert p6.distance(p5) == sqrt(29)\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..485c8d7 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,20 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    assert f(f(2)).evalf() == Float(16)\n+\n+def test_issue_recursive_evalf():\n+    f = implemented_function('f', lambda x: x ** 2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    # Test that f(g(2)) evaluates correctly\n+    assert f(g(2)).evalf() == Float(16)\n+    # Further testing deep nesting\n+    assert f(f(g(2))).evalf() == Float(256)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..32d3471 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,18 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Symbol, Sum, Identity, symbols\n \n-def test_Identity_doit():\n+def test_IdentityElementSum():\n+    n = Symbol('n', integer=True, positive=True)\n+    In = Identity(n)\n+    i, j = symbols('i j', integer=True)\n+\n+    # Test that the sum of all elements in the identity matrix is `n`.\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n+    # Test with specific substitution\n+    assert Sum(Sum(In[i, j], (i, 0, 2)), (j, 0, 2)).doit() == 3\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..1b96cdc 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -335,6 +335,16 @@ def test_args():\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n         Permutation(((0, ), [1]))\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n+    \n+    # Additional test cases for the issue with non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1, 2])\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+    # Overlapping cycles, should still resolve to a permutation\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([0, 2, 1])\n+    # Single cycle repeated, resulting in identity permutation\n+    assert Permutation([[0, 1, 0, 1]]) == Permutation([0, 1, 2])\n+    # More complex overlapping cycles\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([1, 0, 2])\n     assert Permutation([[1], [4, 2]]) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation([[1], [4, 2]], size=1) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation(\n",
  "sympy__sympy-13031": "",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..49ebf4c 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -173,6 +173,27 @@ def test_evalf_ramanujan():\n \n def test_evalf_bugs():\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n+    \n+    # Additional test cases for issue 13076\n+    # Ensure different orderings of Mul arguments with Max are evaluated correctly\n+    \n+    from sympy import Mul, Max, NS, symbols\n+    \n+    # Using symbols for testing\n+    x, y = symbols('x y')\n+\n+    # Original test case ensuring the issue is fixed\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Additional cases with different argument orders\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(Max(0, x), y, evaluate=False).evalf()) == 'y*Max(0, x)'\n+    assert NS(Mul(y, Max(0, x), evaluate=False).evalf()) == 'y*Max(0, x)'\n+\n+    # Ensure that expressions with other operations also resolve without error\n+    z = symbols('z')\n+    assert NS(Mul(Max(0, y), x + z, evaluate=False).evalf()) == '(x + z)*Max(0, y)'\n+    assert NS(Mul(Max(0, y + z), x, evaluate=False).evalf()) == 'x*Max(0, y + z)'\n     assert NS(exp(10**10) + sin(1), 10) == NS(exp(10**10), 10)\n     assert NS('log(1+1/10**50)', 20) == '1.0000000000000000000e-50'\n     assert NS('log(10**100,10)', 10) == '100.0000000'\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..a8c3d42 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -200,8 +200,25 @@ def test_tanh():\n \n     assert tanh(k*pi*I) == 0\n     assert tanh(17*k*pi*I) == 0\n-\n-    assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n+from sympy import Symbol, coth, log, tan\n+\n+def test_coth_subs_issue():\n+    x = Symbol('x')\n+    \n+    # Test cases to verify that substitutions do not raise errors\n+    assert coth(log(tan(2))) == coth(log(tan(2)))\n+    assert coth(log(tan(3))) == coth(log(tan(3)))\n+    assert coth(log(tan(5))) == coth(log(tan(5)))\n+    assert coth(log(tan(6))) == coth(log(tan(6)))\n+    assert coth(log(tan(8))) == coth(log(tan(8)))\n+    assert coth(log(tan(9))) == coth(log(tan(9)))\n+    assert coth(log(tan(11))) == coth(log(tan(11)))\n+    assert coth(log(tan(12))) == coth(log(tan(12)))\n+    assert coth(log(tan(13))) == coth(log(tan(13)))\n+    assert coth(log(tan(15))) == coth(log(tan(15)))\n+    assert coth(log(tan(18))) == coth(log(tan(18)))\n+    \n+    # If there's a specific correct behavior for these values, it should be asserted instead.\n \n \n def test_tanh_series():\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..b98f90e 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,6 +165,35 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import symbols, FiniteSet, Interval, Complement, S\n+\n+def test_complement_mixed_symbols_and_numbers():\n+    # Test case for the reported issue\n+    x, y = symbols('x y')\n+    a = FiniteSet(x, y, 2)\n+    b = Interval(-10, 10)\n+    assert Complement(a, b) == FiniteSet(x, y)\n+\n+    # Additional test cases\n+    z = symbols('z')\n+    c = FiniteSet(x, 5, z, -1)\n+    assert Complement(c, b) == FiniteSet(x, z)\n+\n+    # Test case with no overlap\n+    d = Interval(20, 30)\n+    assert Complement(a, d) == FiniteSet(x, y, 2)\n+\n+    # Test case where all symbols and numbers are in interval\n+    e = FiniteSet(x, y, 2, -5, 8)\n+    assert Complement(e, b) == FiniteSet(x, y)\n+\n+    # Test the combination with an empty interval\n+    f = Interval(0, 0)\n+    assert Complement(a, f) == FiniteSet(x, y, 2)\n+\n+    # Test with Universal Set where no valid complement exists\n+    assert Complement(S.UniversalSet, a) == S.EmptySet\n+\n def test_Complement():\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..0b23459 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -195,6 +195,45 @@ def test_row_insert():\n         assert flatten(eye_Shaping(3).row_insert(i, r4).col(0).tolist()) == l\n \n def test_col_insert():\n+    # issue 13643 test case\n+    M = eye_Shaping(6)\n+    V = Matrix([[2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]])\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected\n+\n+    # additional test cases for thorough testing\n+    # Insert a column into a 2x2 identity matrix\n+    M2 = eye_Shaping(2)\n+    V2 = Matrix([9, 9])\n+    expected2 = Matrix([\n+        [1, 9, 0],\n+        [0, 9, 1]\n+    ])\n+    assert M2.col_insert(1, V2) == expected2\n+\n+    # Insert a zero column vector into a 3x3 zero matrix\n+    M3 = zeros_Shaping(3)\n+    V3 = zeros_Shaping(3, 1)\n+    expected3 = zeros_Shaping(3, 4)\n+    assert M3.col_insert(1, V3) == expected3\n+\n+    # Insert multiple columns into a 4x4 identity matrix at the end\n+    M4 = eye_Shaping(4)\n+    V4 = Matrix([[5, 5], [5, 5], [5, 5], [5, 5]])\n+    expected4 = Matrix([\n+        [1, 0, 0, 0, 5, 5],\n+        [0, 1, 0, 0, 5, 5],\n+        [0, 0, 1, 0, 5, 5],\n+        [0, 0, 0, 1, 5, 5]\n+    ])\n+    assert M4.col_insert(4, V4) == expected4\n     c4 = Matrix([4, 4, 4])\n     for i in range(-4, 5):\n         l = [0, 0, 0]\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..5b58ac5 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -678,7 +678,12 @@ def test_Poly_mul():\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n-def test_Poly_sqr():\n+def test_issue_13079():\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..33bb582 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -64,6 +64,12 @@ def test_latex_basic():\n     assert latex(2*x*y) == \"2 x y\"\n     assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n \n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5\\,3^{x}\"\n+    \n+    # Testing with another arbitrary symbol for mul_symbol\n+    assert latex(x*y, mul_symbol='@') == r\"x@y\"\n+\n     assert latex(1/x) == r\"\\frac{1}{x}\"\n     assert latex(1/x, fold_short_frac=True) == \"1 / x\"\n     assert latex(-S(3)/2) == r\"- \\frac{3}{2}\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..cb04b87 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,30 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n+def test_issue_13835_determinant():\n+    from sympy import symbols, Matrix\n \n-def test_det_LU_decomposition():\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+\n+    # Original test cases from patch\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n+\n+    # Additional test cases for edge sizes\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    assert M(3).det() == 0  # assumed expected result after fix\n+    assert M(4).det() == 0  # assumed expected result after fix\n+\n+    # Verify no errors for larger sizes, just check execution\n+    try:\n+        M(8).det()\n+        M(9).det()\n+        # continue with more sizes if needed\n+    except Exception as e:\n+        assert False, f\"Exception should not be raised: {e}\"\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..07f6adf 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -725,8 +725,67 @@ def test_precomputed_cdf():\n         compdiff = cdf(X)(x) - simplify(X.pspace.density.compute_cdf()(x))\n         compdiff = simplify(compdiff.rewrite(erfc))\n         assert compdiff == 0\n-\n def test_issue_13324():\n+    x = symbols('x')\n+    # Arcsin distribution test for precomputed CDF\n+    arcsin_cdf = cdf(Arcsin(\"A\", 0, 3))(1)\n+    expected_arcsin_cdf = 2*asin(sqrt(1/3))/pi\n+    assert arcsin_cdf == expected_arcsin_cdf\n+\n+    # Dagum distribution test for precomputed CDF\n+    dagum_cdf = cdf(Dagum(\"D\", S(1)/3, S(1)/5, 2))(3)\n+    expected_dagum_cdf = (1 + (3/2)**(-S(1)/3))**(-1/5)\n+    assert dagum_cdf == expected_dagum_cdf\n+\n+    # Erlang distribution test for precomputed CDF\n+    erlang_cdf = cdf(Erlang(\"E\", 1, 1))(1)\n+    expected_erlang_cdf = lowergamma(1, 1)/gamma(1)\n+    assert erlang_cdf == expected_erlang_cdf\n+\n+    # Frechet distribution test for precomputed CDF\n+    frechet_cdf = cdf(Frechet(\"F\", S(4)/3, 1, 2))(3)\n+    expected_frechet_cdf = exp(-(1)**(-4/3))\n+    assert frechet_cdf == expected_frechet_cdf\n+\n+    # Gamma distribution test for precomputed CDF\n+    gamma_cdf = cdf(Gamma(\"G\", 0.1, 2))(3)\n+    expected_gamma_cdf = lowergamma(0.1, 3/2) / gamma(0.1)\n+    assert gamma_cdf == expected_gamma_cdf\n+\n+    # Inverse Gamma distribution test for precomputed CDF\n+    gamma_inv_cdf = cdf(GammaInverse(\"GI\", S(5)/7, 2))(3)\n+    expected_gamma_inv_cdf = uppergamma(S(5)/7, 2/3) / gamma(S(5)/7)\n+    assert gamma_inv_cdf == expected_gamma_inv_cdf\n+\n+    # Kumaraswamy distribution test for precomputed CDF\n+    kumaraswamy_cdf = cdf(Kumaraswamy(\"K\", S(1)/123, 5))(S(1)/3)\n+    expected_kumaraswamy_cdf = 1 - (1 - (S(1)/3)**(1/123))**5\n+    assert kumaraswamy_cdf == expected_kumaraswamy_cdf\n+\n+    # Laplace distribution test for precomputed CDF\n+    laplace_cdf = cdf(Laplace(\"LA\", 2, 3))(5)\n+    expected_laplace_cdf = S.Half + S.Half * (1 - exp(-1))\n+    assert laplace_cdf == expected_laplace_cdf\n+\n+    # Logistic distribution test for precomputed CDF\n+    logistic_cdf = cdf(Logistic(\"L\", 1, 0.1))(2)\n+    expected_logistic_cdf = 1/(1 + exp(-(2 - 1)/0.1))\n+    assert logistic_cdf == expected_logistic_cdf\n+\n+    # Nakagami distribution test for precomputed CDF\n+    nakagami_cdf = cdf(Nakagami(\"N\", S(7)/3, 1))(2)\n+    expected_nakagami_cdf = lowergamma(S(7)/3, 7*2**2 / 3) / gamma(S(7)/3)\n+    assert nakagami_cdf == expected_nakagami_cdf\n+\n+    # Student's T distribution test for precomputed CDF\n+    studentT_cdf = cdf(StudentT(\"S\", 10))(2)\n+    expected_studentT_cdf = S.Half + S.Half * beta_fn(5, S.Half) * hyper((S.Half, 5.5), (1.5,), -2**2/10)\n+    assert studentT_cdf == expected_studentT_cdf\n+\n+    # UniformSum distribution test for precomputed CDF\n+    uniformsum_cdf = cdf(UniformSum(\"US\", 5))(2)\n+    expected_uniformsum_cdf = Piecewise((0, x < 0), (x**4/factorial(4), x <= 1), (1, x > 1))\n+    assert uniformsum_cdf.subs(x, 2) == expected_uniformsum_cdf.subs(x, 2)\n     X = Uniform('X', 0, 1)\n     assert E(X, X > Rational(1,2)) == Rational(3,4)\n     assert E(X, X > 0) == Rational(1,2)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..d394b2d 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,32 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+from sympy import Symbol, symbols\n+from sympy.physics.quantum import TensorProduct as TP, tensor_product_simp\n+from sympy.physics.paulialgebra import Pauli\n+\n+A, B, C, D = symbols('A B C D', commutative=False)\n+\n+def test_tensor_product_powers():\n+    # Test tensor products raised to a power\n+    assert tensor_product_simp(TP(A, B)**2) == TP(A**2, B**2)\n+    assert tensor_product_simp(TP(A, B)**3) == TP(A**3, B**3)\n+    \n+    # Test scalar multiplication and power\n+    x = Symbol('x')\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+    assert tensor_product_simp(x*TP(A, B)**3) == x*TP(A**3, B**3)\n+\n+    # Mixed product example\n+    assert tensor_product_simp(x*(TP(A, B)**2)*TP(C, D)) == x*TP(A**2*C, B**2*D)\n+    assert tensor_product_simp((TP(A, B) - TP(C, D))**2) == TP(A**2, B**2) - 2*TP(A, B)*TP(C, D) + TP(C**2, D**2)\n+\n+    # Test with Pauli matrices\n+    t1 = TP(1, Pauli(1)) * TP(1, Pauli(1))\n+    assert tensor_product_simp(t1) == TP(1**2, Pauli(1)**2)\n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tensor_product_simp(t2) == TP(1**2, Pauli(3)**2)\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..9441f52 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -78,8 +78,19 @@ def test_python_keyword_function_name_escaping():\n     assert python(\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n-\n-def test_python_relational():\n+from sympy import Symbol, Eq, Ne, sstr, Rational, Limit\n+\n+def test_issue_related_cases():\n+    x, y = Symbol('x'), Symbol('y')\n+    # Verifying that sympy_integers=True setting is respected \n+    assert sstr(Eq(x, Rational(1, 2)), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, Rational(1, 2)), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n+    # Testing python code generation to ensure variables are declared as Symbol\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    assert python(Ne(x/(y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"\n+    ]\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..1fb3ad9 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -3,6 +3,7 @@ from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n+from sympy.physics.vector import ReferenceFrame, Vector\n \n Vector.simp = True\n A = ReferenceFrame('A')\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..785c012 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -134,6 +135,17 @@ def test_math_lambda():\n \n \n @conserve_mpmath_dps\n+def test_lambdify_rational_with_mpmath():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source_code, \"Rationals should be wrapped with mpmath.mpf\"\n+    # Test that nsolve gives correct precision\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected_result = mpmath.mpf('77.333333333333333333333333333333333333333333333333333333333333')\n+    assert abs(result - expected_result) < 1e-60, \"Precision loss detected in nsolve\"\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -145,6 +157,17 @@ def test_mpmath_lambda():\n \n \n @conserve_mpmath_dps\n+def test_lambdify_rational_with_mpmath():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source_code, \"Rationals should be wrapped with mpmath.mpf\"\n+    # Test that nsolve gives correct precision\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected_result = mpmath.mpf('77.333333333333333333333333333333333333333333333333333333333333')\n+    assert abs(result - expected_result) < 1e-60, \"Precision loss detected in nsolve\"\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..1d6a403 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,7 +74,8 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    # Fixing the len for rank-0 arrays\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..fc73fce 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,22 @@\n+\n+def test_Max_Min():\n+    # Existing test case\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n+    # New test cases specifically for issue validation\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y)) == \"Max[x, y]\"\n+    assert mcode(Max(2, 3, x)) == \"Max[2, 3, x]\"\n+    assert mcode(Max(x)) == \"Max[x]\"  # Single argument Max\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..d8adbbe 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,26 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_fix():\n+    \"\"\"\n+    Test the Quaternion.to_rotation_matrix() method to ensure the sign\n+    is corrected for 3D rotations about the x-axis as per the issue description.\n+    \"\"\"\n+    from sympy import symbols, cos, sin, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)  # Rotation about x-axis\n+\n+    expected_matrix = Matrix([\n+        [1,      0,       0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+\n+    # Check if the computed rotation matrix matches the expected matrix\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +139,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..b64fcc1 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,8 +1625,11 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n-    n = Symbol('n', integer=True, positive=True)\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n     assert (factorial(n + 4) % (n + 5)).func is Mod\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..6de50c8 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -75,6 +75,22 @@ def test_Min():\n     assert Min(nn, oo) == nn\n     assert Min(oo, nn) == nn\n     assert Min(p, p) == p\n+    from sympy import Min, Max, S, Symbol, oo, raises\n+    \n+    # Test cases for zero-argument Min and Max\n+    assert Min() == S.Infinity\n+    assert Max() == S.NegativeInfinity\n+    \n+    # Ensure original single argument cases still work\n+    x = Symbol('x')\n+    assert Min(x) == x\n+    assert Max(x) == x\n+\n+    # Additional test cases to ensure correct behavior\n+    p = Symbol('p', positive=True)\n+    n = Symbol('n', negative=True)\n+    assert Min(p, -5) == -5\n+    assert Max(n, -3) == -3\n     assert Min(p, oo) == p\n     assert Min(oo, p) == p\n     assert Min(oo, oo) == oo\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..8599d09 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,26 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+def test_issue_15873():\n+    from sympy import I, simplify\n \n-def test_issue_14392():\n+    # This is the issue scenario for is_zero\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True\n+\n+    # Additional test cases\n+    e2 = I - I\n+    assert e2.is_zero is True\n+\n+    e3 = (1 + I)*(1 - I)\n+    assert e3.is_zero is False\n+\n+    e4 = (1 + I)*(1 - I) - 2\n+    assert e4.is_zero is None\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..daa13c5 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,8 +477,40 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n-\n-def test_issue_5950():\n+from sympy import Symbol, posify, symbols\n+\n+def test_issue_posify_preserves_finite():\n+    # Issue 16438\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['infinite'] == False\n+\n+    # Additional cases to check other assumptions like integer, rational, etc.\n+    m = Symbol('m', finite=True, integer=True)\n+    eq, rep = posify(m)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['integer'] == True\n+\n+    n = Symbol('n', finite=True, rational=True)\n+    eq, rep = posify(n)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['rational'] == True\n+\n+    p = Symbol('p', finite=True, prime=True)\n+    eq, rep = posify(p)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['prime'] == True\n+\n+    e = Symbol('e', finite=True, even=True)\n+    eq, rep = posify(e)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['even'] == True\n+\n+    o = Symbol('o', finite=True, odd=True)\n+    eq, rep = posify(o)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['odd'] == True\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n     assert logcombine(log(x) - log(y)) == log(x/y)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..3df2dae 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -11,7 +12,7 @@ from sympy.matrices import SparseMatrix, MatrixSymbol\n from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n-from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +36,14 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test for Indexed in PythonCodePrinter\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[x]) == 'p[x]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+    assert prntr.doprint(p[x**2]) == 'p[x**2]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..d0c3033 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -21,8 +21,9 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n        this wrapper returns the contents of that stream as a string. This\n        auxiliary function is used by many tests below.\n \n-       The header and the empty lines are not generator to facilitate the\n-       testing of the output.\n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+import numpy as np\n     \"\"\"\n     output = StringIO()\n     dump_fn(routines, output, prefix, **kwargs)\n@@ -48,7 +49,14 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n-def test_cython_wrapper_outarg():\n+def test_cython_autowrap_with_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # `x` does not appear in `expr`\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    # Test that the function returns 1.0 without error\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0, f\"Expected 1.0, got {result}\"\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..9ec9096 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,9 +248,20 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n+def test_encode_morse_number_one():\n+    # Test encoding for number \"1\"\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('10') == '.----|-----'\n+    assert encode_morse('0123456789') == '-----|.----|..---|...--|....-|.....|-....|--...|---..|----.'\n \n def test_decode_morse():\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n+    \n+def test_decode_morse_number_one():\n+    # Test decoding for number \"1\"\n+    assert decode_morse('.----') == '1'\n+    assert decode_morse('.----|-----') == '10'\n+    assert decode_morse('-----|.----|..---|...--|....-|.....|-....|--...|---..|----.') == '0123456789'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n \n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..8006103 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n@@ -176,7 +178,29 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    assert _sqrt_match(4 + I) == []\n+    \n+    # Original test case described in the issue\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr\n+\n+    # Additional test cases for robustness\n+    expr_unchanged = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(expr_unchanged) == expr_unchanged\n+\n+    # Test with no nested square roots, should remain unchanged\n+    expr_simple = 5 + 2*I\n+    assert sqrtdenest(expr_simple) == expr_simple\n+\n+    # Test with a complex expression that should remain unchanged\n+    expr_complex = sqrt(2) + sqrt(3) + sqrt(5)\n+    assert sqrtdenest(expr_complex) == expr_complex\n+\n+    # Test with a denestable expression\n+    expr_denestable = sqrt(5 + 2 * sqrt(6))\n+    assert sqrtdenest(expr_denestable) == sqrt(2) + sqrt(3)\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..5c9ae9f 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -5,8 +6,31 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n+from sympy import sympify\n \n def test_point():\n+    # Test multiplication of Point by a number and number by a Point\n+    p0 = Point(0, 0)\n+    p1 = Point(1, 1)\n+\n+    factor = sympify(2.0)\n+    \n+    assert p1 * factor == Point(2, 2)\n+    assert factor * p1 == Point(2, 2)\n+\n+    # Ensure commutative property holds\n+    assert p0 + p1 * factor == Point(2, 2)\n+    assert p0 + factor * p1 == Point(2, 2)\n+\n+    # Test with negative and fractional numbers\n+    factor_neg = sympify(-1.5)\n+    factor_frac = sympify(0.5)\n+\n+    assert p1 * factor_neg == Point(-1.5, -1.5)\n+    assert factor_neg * p1 == Point(-1.5, -1.5)\n+\n+    assert p1 * factor_frac == Point(0.5, 0.5)\n+    assert factor_frac * p1 == Point(0.5, 0.5)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..23e39e2 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,7 +547,11 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n-    # issue 18122\n+    # test diophantine symbol order issue with permute=True\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..3a103f7 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -672,6 +672,23 @@ def test_latex_derivatives():\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n \n+def test_latex_subs_parenthesis_issue():\n+    from sympy import Subs\n+    from sympy.abc import x, y\n+    assert latex(3 * Subs(-x + y, (x,), (1,))) == \\\n+        r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n+    # Additional tests for similar scenarios\n+    assert latex(2 * Subs(x - y, (y,), (2,))) == \\\n+        r'2 \\left. \\left(x - y\\right) \\right|_{\\substack{ y=2 }}'\n+    assert latex(4 * Subs(x**2 - y**2, (x, y), (1, 2))) == \\\n+        r'4 \\left. \\left(x^{2} - y^{2}\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(-5 * Subs(x + y, (x, y), (1, 2))) == \\\n+        r'- 5 \\left. \\left(x + y\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(Subs(x/y, (x,), (y,))) == \\\n+        r'\\left. \\left(\\frac{x}{y}\\right) \\right|_{\\substack{ x=y }}'\n+\n+\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..5e4e965 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,6 +1,7 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n-from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n+from sympy import (Symbol, Eq, S, Abs, sin, asin, pi, Interval,\n     And, Mod, oo, Function)\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n \n@@ -122,8 +123,20 @@ def test_subs_CondSet():\n         x + 1, x < 1, S.Integers))\n     raises(ValueError, lambda: ConditionSet(\n         x + 1, x < 1, s))\n+    # issue related to subs with ConditionSet / ImageSet\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    assert ConditionSet(x, Contains(y, Interval(-1,1)), img1).subs(y, S.One/3).dummy_eq(img2)\n+\n     assert ConditionSet(\n         n, n < x, Interval(0, oo)).subs(x, p) == Interval(0, oo)\n+    # issue related to subs with ConditionSet / ImageSet\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    assert ConditionSet(x, Contains(y, Interval(-1,1)), img1).subs(y, S.One/3).dummy_eq(img2)\n+\n     assert ConditionSet(\n         n, n < x, Interval(-oo, 0)).subs(x, p) == S.EmptySet\n     assert ConditionSet(f(x), f(x) < 1, {w, z}\n",
  "sympy__sympy-19637": "",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_dagger.py b/sympy/physics/quantum/tests/test_dagger.py\nindex ad97a01..30127dc 100644\n--- a/sympy/physics/quantum/tests/test_dagger.py\n+++ b/sympy/physics/quantum/tests/test_dagger.py\n@@ -1,7 +1,9 @@\n+\n from sympy import I, Matrix, symbols, conjugate, Expr, Integer\n \n from sympy.physics.quantum.dagger import adjoint, Dagger\n from sympy.external import import_module\n+from sympy.physics.quantum.operator import Operator, IdentityOperator\n from sympy.testing.pytest import skip\n \n \n@@ -22,6 +24,17 @@ def test_scalars():\n     A = symbols('A', commutative=False)\n     assert Dagger(A).is_commutative is False\n \n+def test_dagger_with_identity_operator():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    \n+    # Dagger of an operator\n+    D = Dagger(O)\n+    \n+    # Ensure that multiplication with IdentityOperator simplifies\n+    assert D * I == D\n+    assert I * D == D\n+\n \n def test_matrix():\n     x = symbols('x')\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..0f4aeb8 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -856,6 +856,15 @@ def test_generator_product():\n \n def test_sylow_subgroup():\n     P = PermutationGroup(Permutation(1, 5)(2, 4), Permutation(0, 1, 2, 3, 4, 5))\n+\n+    # Test for the issue described with sylow_subgroup IndexError\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 6\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 8\n     S = P.sylow_subgroup(2)\n     assert S.order() == 4\n \n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..58bb713 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,7 +471,17 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions, uniq\n+from sympy import S\n+\n def test_partitions():\n+    # Test that dictionaries returned from partitions are unique objects\n+    partition_list = list(partitions(6, k=2))\n+    copied_partition_list = [p.copy() for p in partition_list]\n+    assert partition_list != copied_partition_list\n+    assert all(p is not cp for p, cp in zip(partition_list, copied_partition_list))\n+\n+    # Previous assertions testing correct partitions\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n@@ -513,7 +523,6 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n-\n def test_binary_partitions():\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..53f555d 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -572,6 +572,19 @@ def test_Float():\n     raises(ValueError, lambda: Float(\"1.23\", dps=3, precision=\"\"))\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=\"\"))\n \n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Additional test cases for comprehensive coverage\n+    assert (S(1.0) == S.false) is False\n+    assert (S.false == S(1.0)) is False\n+    assert (S(0.0) != S.false) is True\n+    assert (S.false != S(0.0)) is True\n+\n     # from NumberSymbol\n     assert same_and_same_prec(Float(pi, 32), pi.evalf(32))\n     assert same_and_same_prec(Float(Catalan), Catalan.evalf())\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..1a5904c 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -7,6 +8,9 @@ from sympy import (\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+from sympy.functions.elementary.trigonometric import sinh, cosh, tanh\n+from sympy.functions.elementary.piecewise import Piecewise\n+from sympy.core.cache import clear_cache\n \n def test_subs():\n     n3 = Rational(3)\n@@ -19,8 +23,52 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n-\n-def test_subs_Matrix():\n+def test_issue_21373_subs_polynomial_error():\n+    # Prepare symbols\n+    clear_cache()\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+\n+    # Expression that previously caused PolynomialError\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    # Test that subs does not raise an error\n+    try:\n+        result = expr.subs({1: 1.0})\n+        assert result is not None  # Ensure it returns a result\n+    except Exception as e:\n+        assert False, f\"subs raised an exception: {e}\"\n+\n+    # Test variations with cosh and tanh\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    try:\n+        result_cosh = expr_cosh.subs({1: 1.0})\n+        assert result_cosh is not None\n+    except Exception as e:\n+        assert False, f\"subs with cosh raised an exception: {e}\"\n+\n+    try:\n+        result_tanh = expr_tanh.subs({1: 1.0})\n+        assert result_tanh is not None\n+    except Exception as e:\n+        assert False, f\"subs with tanh raised an exception: {e}\"\n+\n+    # Check behavior with removal of the division\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    try:\n+        result_no_div = expr_no_div.subs({1: 1.0})\n+        assert result_no_div is not None\n+    except Exception as e:\n+        assert False, f\"subs with no division raised an exception: {e}\"\n+\n+    # Check behavior with removal of the exp\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    try:\n+        result_no_exp = expr_no_exp.subs({1: 1.0})\n+        assert result_no_exp is not None\n+    except Exception as e:\n+        assert False, f\"subs with no exp raised an exception: {e}\"\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n     assert (x*y).subs({x:z, y:0}) in [z, z1]\n",
  "sympy__sympy-21847": "",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..5e2c093 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,8 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    # Verify the fix for argument invariance\n+    assert st.func(*st.args) == st\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..11502ac 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -30,7 +31,12 @@ def test_PythonCodePrinter():\n     assert not prntr.module_imports\n \n     assert prntr.doprint(x**y) == 'x**y'\n-    assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(3, 5)) == \"min(3, 5)\"\n+    assert prntr.doprint(Max(S(2), S(10))) == \"max(2, 10)\"\n+    assert prntr.doprint(Min(x, Min(y, z))) == \"min(x, min(y, z))\"\n+    assert prntr.doprint(Max(Max(x, y), z)) == \"max(max(x, y), z)\"\n     assert prntr.doprint(-Mod(x, y)) == '-(x % y)'\n     assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..b804c02 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,17 @@ def test_scipy_polys():\n \n \n \n+def test_lambdify_tuple_with_one_element():\n+    # Test tuple with one element should produce code that returns the tuple, not single element\n+    f_single_element_tuple = lambdify([], (1,))\n+    assert f_single_element_tuple() == (1,)\n+\n+    source_code = inspect.getsource(f_single_element_tuple)\n+    assert 'return (1,)' in source_code, \"The lambdify source did not return a tuple with one element correctly\"\n+\n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..33217d7 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,13 +1,21 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n \n-def test_Str():\n+def test_issue_23532_functions_with_parentheses():\n+    from sympy import symbols\n+\n+    # Test to verify issue 23532 is fixed\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert isinstance(q[0], UndefinedFunction)\n+    assert isinstance(u[1], UndefinedFunction)\n     a1 = Str('a')\n     a2 = Str('a')\n     b = Str('b')\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..4ae6bbf 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -183,6 +183,10 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     assert _is_tensor_eq(st, t)\n \n \n+import sympy\n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, kahane_simplify, LorentzIndex\n+from sympy.tensor.tensor import tensor_indices\n+\n def test_kahane_algorithm():\n     # Wrap this function to convert to and from TIDS:\n \n@@ -262,7 +266,33 @@ def test_kahane_simplify1():\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n-def test_gamma_matrix_class():\n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Test case based on the provided issue\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), \"Leading gamma matrices should not be reordered\"\n+    \n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), \"Leading gamma matrices should not be reordered\"\n+\n+    # Additional test cases\n+    # Test with three gamma matrices: should not reorder the single free gamma matrix\n+    t = G(rho)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)), \"Single leading gamma matrix should remain unchanged\"\n+\n+    # Test with no contractions\n+    t = G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(t), \"Expression with no contractions should remain unchanged\"\n+\n+    # Test with a different order\n+    t = G(mu)*G(nu)*G(-nu)*G(rho)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(2*G(rho)), \"Correct simplification should maintain order of free gamma matrices\"\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..2bd0626 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -46,6 +46,21 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_as_set_original_behavior():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Verify the original incorrect behavior is still present\n+    assert Contains(x, FiniteSet(y)).as_set() == Contains(x, FiniteSet(y))\n+    assert Contains(x, S.Integers).as_set() == Contains(x, S.Integers)\n+    assert Contains(x, S.Reals).as_set() == Contains(x, S.Reals)\n+\n+def test_as_set_corrected_behavior():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # When the method is properly implemented, it should no longer raise an error\n+    # For the purpose of this test, we expect specific sets back\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..ae6cd60 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,30 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..b6a0102 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -548,7 +548,43 @@ def test_issue_24062():\n     R = Quantity('R')\n     C = Quantity('C')\n     T = Quantity('T')\n-    SI.set_quantity_dimension(R, impedance)\n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_collect_factor_and_dimension_with_different_units():\n+    # Test with different scale factors\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 2 * meter / second)\n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, -9.8 * meter / second**2)\n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 5 * second)\n+\n+    expr1 = A2*T2 + V2\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr1)\n+\n+    expr2 = V2 - A2*T2\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr2)\n     SI.set_quantity_dimension(C, capacitance)\n     SI.set_quantity_dimension(T, time)\n     R.set_global_relative_scale_factor(1, ohm)\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..d5e9f67 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -106,4 +107,20 @@ def test_check_homomorphism():\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n-    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+\n+    # Test for DihedralGroup to check for specific issue described\n+    D3 = DihedralGroup(3)\n+    # Test isomorphism for identity homomorphism\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+    \n+    # Additional tests for inverted generators\n+    # Test homomorphism that maps each generator to its inverse\n+    a, b = D3.generators\n+    Ta = homomorphism(D3, D3, [a, b], [a**-1, b**-1])\n+    assert not Ta.is_isomorphism()  # Should not be an isomorphism\n+    \n+    # Test for homomorphism correctness in the codomain\n+    Tb = homomorphism(D3, D3, [a, b], [b, a])\n+    assert Tb.is_homomorphism()  # Should be a valid homomorphism\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..d64028a 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -270,7 +270,35 @@ def test_PolyElement_as_expr():\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n-def test_PolyElement_from_expr():\n+def test_PolyElement_as_expr_with_symbols():\n+    from sympy import ring, ZZ, symbols\n+\n+    # Test case where symbols are correctly given\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+    U, V, W = symbols(\"u,v,w\")\n+    expected_expr_with_new_symbols = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == expected_expr_with_new_symbols\n+\n+    # Test case where number of symbols do not match the number of generators\n+    raises(ValueError, lambda: f.as_expr(U, V))  # Less symbols\n+    raises(ValueError, lambda: f.as_expr(U, V, W, U))  # More symbols\n+\n+    # Test case with no symbols given, should return in terms of ring's symbols\n+    expected_expr_with_original_symbols = 3*x**2*y - x*y*z + 7*z**3 + 1\n+    assert f.as_expr() == expected_expr_with_original_symbols\n+\n+    # Test for single variable ring\n+    R, x = ring(\"x\", ZZ)\n+    f = 2*x**3 + 5\n+    U = symbols(\"u\")\n+    assert f.as_expr(U) == 2*U**3 + 5\n+    assert f.as_expr() == 2*x**3 + 5\n+\n+    # Ensure behavior with zero-poly element\n+    f_zero = R.zero\n+    assert f_zero.as_expr(U) == 0\n+    assert f_zero.as_expr() == 0\n     x, y, z = symbols(\"x,y,z\")\n     R, X, Y, Z = ring((x, y, z), ZZ)\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..2728664 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -274,6 +274,20 @@ def test_convert_equals_signs():\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n \n+def test_parse_expr_evaluate_false_for_relationals():\n+    from sympy.parsing.sympy_parser import parse_expr\n+    test_cases = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False),\n+    }\n+    for expression, expected_result in test_cases.items():\n+        assert parse_expr(expression, evaluate=False) == expected_result\n+\n+\n def test_parse_function_issue_3539():\n     x = Symbol('x')\n     f = Function('f')\n",
  "astropy__astropy-14369": "",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..f3a2362 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1897,8 +1897,52 @@ class OperationTests(OperationTestBase):\n             Author.objects.create(name='Albert', rebate='10$')\n         author = Author.objects.create(name='Albert', rebate='10%')\n         self.assertEqual(Author.objects.get(), author)\n+    from django.test import TestCase, skipUnlessDBFeature\n+    from django.db import transaction, IntegrityError, connection\n+    from django.db.models import Q\n+    from django.db import models\n+    from django.db.migrations import Migration\n+    from django.db.migrations import migrations\n+\n+    class TestCheckConstraintSQLiteOracle(TestCase):\n+        @skipUnlessDBFeature('supports_table_check_constraints')\n+        def test_check_constraint_with_or(self):\n+            app_label = 'app'\n+            constraint_name = 'field_1_has_value_if_flag_set'\n+            # Define a model to simulate the issue\n+            class TestConstraint(models.Model):\n+                field_1 = models.IntegerField(blank=True, null=True)\n+                flag = models.BooleanField(blank=False, null=False)\n+                class Meta:\n+                    app_label = app_label\n+                    constraints = [\n+                        models.CheckConstraint(\n+                            check=Q(field_1__isnull=False, flag__exact=True) |\n+                                  Q(flag__exact=False),\n+                            name=constraint_name,\n+                        ),\n+                    ]\n+\n+            from_state = self.set_up_test_model(app_label)\n+            constraint = models.CheckConstraint(\n+                check=Q(field_1__isnull=False, flag__exact=True) |\n+                      Q(flag__exact=False),\n+                name=constraint_name,\n+            )\n+            operation = migrations.AddConstraint('TestConstraint', constraint)\n+            to_state = from_state.clone()\n+            operation.state_forwards(app_label, to_state)\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+            TestConstraintModel = to_state.apps.get_model(app_label, 'TestConstraint')\n+            with connection.schema_editor() as editor:\n+                operation.database_forwards(app_label, editor, from_state, to_state)\n+\n+            # Testing if the constraint properly triggers on invalid data insertion\n+            with self.assertRaises(IntegrityError), transaction.atomic():\n+                TestConstraintModel.objects.create(field_1=None, flag=True)\n+\n+            TestConstraintModel.objects.create(field_1=None, flag=False)\n+            TestConstraintModel.objects.create(field_1=1, flag=True)\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n             models.CheckConstraint(check=models.Q(pink__gt=2), name=\"test_remove_constraint_pony_pink_gt_2\"),\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..8e055d4 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,6 +163,41 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n+    def test_translate_url_optional_parameters(self):\n+        # Test with optional parameters present\n+        self.assertEqual(\n+            translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+            '/nl/with-arguments/regular-argument/optional.html'\n+        )\n+        # Test with optional parameters missing\n+        self.assertEqual(\n+            translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+            '/nl/with-arguments/regular-argument/'\n+        )\n+\n+        # Test with numeric named groups\n+        self.assertEqual(\n+            translate_url('/en/regex_optional/1/2/', 'nl'),\n+            '/nl/regex_optional/1/2/'\n+        )\n+        self.assertEqual(\n+            translate_url('/en/regex_optional/1/', 'nl'),\n+            '/nl/regex_optional/1/'\n+        )\n+\n+        # Test for paths that should not change\n+        self.assertEqual(\n+            translate_url('/en/not-prefixed/', 'nl'),\n+            '/nl/not-prefixed/'\n+        )\n+        self.assertEqual(\n+            translate_url('/en/not-prefixed-include/', 'nl'),\n+            '/nl/not-prefixed-include/'\n+        )\n+        self.assertEqual(\n+            translate_url('/en/translated/slug/', 'nl'),\n+            '/nl/translated/slug/'\n+        )\n \n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..8cf2432 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -14,8 +15,37 @@ from .models import (\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    Item, Derived\n )\n \n+class ResetPrimaryKeyTestCase(TestCase):\n+    def setUp(self):\n+        self.derived = Derived.objects.create(f=True)  # Create the first object\n+\n+    def test_reset_primary_key_on_derived(self):\n+        # Try to reset the primary key on a derived instance\n+        item = Item.objects.get(pk=self.derived.pk)\n+        obj1 = item.derived\n+        obj1.reset()\n+        obj1.save()  # Attempt to save the obj with a reset PK\n+\n+        # Check that a new object has been created\n+        self.assertEqual(Item.objects.count(), 2)\n+        # Ensure the original object is untouched\n+        self.assertTrue(Item.objects.filter(pk=self.derived.pk, f=True).exists())\n+\n+    def test_reset_primary_key_creates_new_instance(self):\n+        # Directly reset and save\n+        obj1 = self.derived\n+        obj1.reset()\n+        obj1.save()\n+\n+        # Expect two distinct objects\n+        self.assertEqual(Item.objects.count(), 2)\n+        objs = Item.objects.order_by('pk')\n+        self.assertTrue(objs[0].f)\n+        self.assertFalse(objs[1].f)\n+\n \n class ModelInheritanceTest(TestCase):\n     def test_model_inheritance(self):\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..2832bd7 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -606,7 +606,14 @@ class DeletionTests(TestCase):\n \n class FastDeleteTests(TestCase):\n \n-    def test_fast_delete_fk(self):\n+    def test_fast_delete_all(self):\n+        # Test that a full table delete doesn't use subqueries.\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Verify no subqueries are used for a full delete.\n+        self.assertNotIn('SELECT', sql)\n+        self.assertEqual(User.objects.count(), 0)\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n         )\n@@ -702,4 +709,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..1d0e588 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,4 +1,6 @@\n+\n import datetime\n+from django.db.models import Sum\n import pickle\n \n import django\n@@ -268,6 +270,38 @@ class InLookupTests(TestCase):\n             group = Group.objects.create(name='Group {}'.format(i))\n         cls.e1 = Event.objects.create(title='Event 1', group=group)\n \n+class ValueAndAnnotationPickleTests(TestCase):\n+    def setUp(self):\n+        self.toy1 = Toy.objects.create(name='foo', price=10, material='wood')\n+        self.toy2 = Toy.objects.create(name='bar', price=20, material='plastic')\n+        self.toy3 = Toy.objects.create(name='baz', price=100, material='wood')\n+\n+    def test_pickle_values_queryset(self):\n+        prices = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(prices.query))\n+        self.assertIsInstance(reloaded[0], dict)\n+        self.assertEqual(\n+            list(reloaded),\n+            [\n+                {'material': 'wood', 'total_price': 110},\n+                {'material': 'plastic', 'total_price': 20},\n+            ]\n+        )\n+\n+    def test_pickle_values_list_queryset(self):\n+        prices = Toy.objects.values_list('material', 'price')\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(prices.query))\n+        self.assertEqual(\n+            list(reloaded),\n+            [\n+                ('wood', 10),\n+                ('plastic', 20),\n+                ('wood', 100),\n+            ]\n+        )\n+\n     def test_in_lookup_queryset_evaluation(self):\n         \"\"\"\n         Neither pickling nor unpickling a QuerySet.query with an __in=inner_qs\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..ac75283 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -24,7 +24,17 @@ class JSONFieldTest(SimpleTestCase):\n         with self.assertRaisesMessage(ValidationError, 'Enter a valid JSON.'):\n             field.clean('{some badly formed: json}')\n \n-    def test_prepare_value(self):\n+    def test_unicode_prepare_value(self):\n+        field = JSONField()\n+        # Test with Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4e2d\u56fd'}), '{\"a\": \"\u4e2d\u56fd\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        \n+        # Test with emojis\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d\uff0c\u4e16\u754c', '\ud83d\ude00\ud83d\udc31']), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"\ud83d\ude00\ud83d\udc31\"]')\n+\n+        # Existing test cases\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..2bbef63 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,7 +6602,43 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/custom-prefix/')\n+    def test_script_name_included_in_redirect(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        # Assert that the redirect URL includes the script name\n+        self.assertRedirects(\n+            response,\n+            '/custom-prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/foo/')\n+    def test_redirect_with_different_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        # Assert that the redirect URL respects the FORCE_SCRIPT_NAME setting\n+        self.assertRedirects(\n+            response,\n+            '/foo' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6628,7 +6664,43 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertEqual(response.status_code, 404)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/custom-prefix/')\n+    def test_script_name_included_in_redirect(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        # Assert that the redirect URL includes the script name\n+        self.assertRedirects(\n+            response,\n+            '/custom-prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/foo/')\n+    def test_redirect_with_different_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        # Assert that the redirect URL respects the FORCE_SCRIPT_NAME setting\n+        self.assertRedirects(\n+            response,\n+            '/foo' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..8f8bdca 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,6 +691,42 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n+    def test_migration_with_custom_mixin_and_field(self):\n+        \"\"\"\n+        Test migration generation involving custom fields and mixins,\n+        ensuring all necessary imports are included.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        # Mimic the migration for the given model setup\n+        class Migration(migrations.Migration):\n+            operations = [\n+                migrations.CreateModel(\n+                    name='MyModel',\n+                    fields=[\n+                        ('name', MyField(primary_key=True, serialize=False)),\n+                    ],\n+                    options={\n+                        'abstract': False,\n+                    },\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ]\n+\n+        writer = MigrationWriter(Migration)\n+        output = writer.as_string()\n+        result = self.safe_exec(output)\n+        self.assertIn('from django.db import models', output)\n+        self.assertIn('class MyModel', result)\n+\n     def test_migration_path(self):\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..450e240 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,6 +1630,21 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n+    def test_aggregation_default_after_annotation_on_other_field(self):\n+        # Test aggregate with default after annotate with different field.\n+        result = Book.objects.annotate(twice_price=F('price') * 2).aggregate(value=Sum('twice_price', default=0))\n+        self.assertEqual(result['value'], 0)  # Assuming no prices are in the database to sum, just an example.\n+\n+    def test_aggregation_with_multiple_annotate(self):\n+        # Test aggregate with default after multiple annotations.\n+        result = Book.objects.annotate(twice_price=F('price') * 2).annotate(double_twice_price=F('twice_price') * 2).aggregate(value=Sum('double_twice_price', default=0))\n+        self.assertEqual(result['value'], 0)  # Assuming a sum operation, adjust expectation according to your data setup.\n+\n+    def test_aggregation_default_with_filter(self):\n+        # Test aggregate with a filter and a default.\n+        result = Book.objects.filter(rating__gt=3.0).annotate(twice_price=F('price') * 2).aggregate(value=Sum('twice_price', default=0))\n+        self.assertEqual(result['value'], 0)  # Assuming no prices are in the database with rating > 3.0, adjust as needed.\n+\n     def test_exists_none_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n@@ -1642,4 +1657,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..b0d1910 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2984,7 +2984,14 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Reverse is a no-op.\n+        # Re-apply renaming forward and backward to ensure correctness.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"pony_test_idx\")\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..8e0cee0 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,6 +3496,50 @@ class FormFieldCallbackTests(SimpleTestCase):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+    def test_modelform_factory_respects_formfield_callback_in_meta(self):\n+        class MyModel(models.Model):\n+            is_active = models.BooleanField()\n+            description = models.CharField(max_length=256)\n+\n+        def force_required_callback(field, **kwargs):\n+            formfield = field.formfield(**kwargs)\n+            formfield.required = True\n+            return formfield\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = MyModel\n+                fields = ['is_active', 'description']\n+                formfield_callback = force_required_callback\n+\n+        FactoryForm = modelform_factory(MyModel, form=BaseForm)\n+\n+        for field_name, form_field in FactoryForm.base_fields.items():\n+            self.assertTrue(form_field.required)\n+\n+    def test_formfield_callback_none_override(self):\n+        class MyModel(models.Model):\n+            is_active = models.BooleanField()\n+\n+        def empty_callback(field, **kwargs):\n+            return field.formfield(**kwargs)\n+\n+        class CallbackForm(forms.ModelForm):\n+            class Meta:\n+                model = MyModel\n+                fields = ['is_active']\n+                formfield_callback = empty_callback\n+\n+        # Create a factory form without a formfield_callback\n+        NoCallbackFactoryForm = modelform_factory(MyModel, form=CallbackForm, formfield_callback=None)\n+\n+        for field_name, form_field in NoCallbackFactoryForm.base_fields.items():\n+            self.assertFalse(form_field.required)  # Ensure no callback changes were applied\n+            self.assertEqual(\n+                type(InheritedForm.base_fields[name].widget),\n+                type(NewForm.base_fields[name].widget),\n+            )\n+\n \n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..f522a0b 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -7,6 +7,8 @@ from django.core import serializers\n from django.core.serializers.base import DeserializationError\n from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n+from django.core.exceptions import FieldError\n+from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n from django.utils.translation import gettext_lazy, override\n@@ -258,6 +260,32 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n+    def test_m2m_serialization_with_custom_manager(self):\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+\n+        with self.assertRaises(FieldError):\n+            serializers.serialize(\"json\", [test])\n+\n     def test_helpful_error_message_for_many2many_not_iterable(self):\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..f22b8a8 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -207,7 +207,22 @@ def test_cmap(cmap):\n     pickle.dumps(cmap)\n \n \n-def test_unpickle_canvas():\n+@pytest.mark.skipif(platform.system() != 'Darwin' or 'arm' not in platform.machine(),\n+                    reason=\"This test is only for MacOS with M1 (arm64) architecture\")\n+def test_m1_mac_dpi_issue():\n+    fig = plt.figure(dpi=200)\n+    assert fig.dpi == 200\n+    out = BytesIO()\n+    pickle.dump(fig, out)\n+    out.seek(0)\n+    fig2 = pickle.load(out)\n+    assert fig2.dpi == 200, \"DPI should not change after unpickling\"\n+    for _ in range(32):\n+        out.seek(0)\n+        pickle.dump(fig2, out)\n+        out.seek(0)\n+        fig2 = pickle.load(out)\n+        assert fig2.dpi == 200, \"DPI should remain constant after repeated unpickling\"\n     fig = mfigure.Figure()\n     assert fig.canvas is not None\n     out = BytesIO()\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_units.py b/xarray/tests/test_units.py\nindex c680a89..15dc144 100644\n--- a/xarray/tests/test_units.py\n+++ b/xarray/tests/test_units.py\n@@ -3681,7 +3681,8 @@ class TestDataArray:\n         (\n             method(\"diff\", dim=\"x\"),\n             method(\"differentiate\", coord=\"x\"),\n-            method(\"integrate\", dim=\"x\"),\n+            method(\"integrate\", coord=\"x\"),\n+            pytest.param(lambda x: x.integrate(dim=\"x\"), id=\"method_integrate_deprecated\", marks=pytest.mark.xfail(reason=\"Expected deprecation warning for using 'dim'.\")),\n             method(\"quantile\", q=[0.25, 0.75]),\n             method(\"reduce\", func=np.sum, dim=\"x\"),\n             pytest.param(lambda x: x.dot(x), id=\"method_dot\"),\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..37338cd 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3029,6 +3029,13 @@ class TestDataset:\n         y = D.to_stacked_array(\"features\", sample_dims)\n         assert y.indexes[\"features\"].levels[1].dtype == D.y.dtype\n         assert y.dims == (\"x\", \"features\")\n+    def test_single_dimension_to_stacked_and_unstacked(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n \n     def test_to_stacked_array_to_unstacked_dataset(self):\n         # make a two dimensional dataset\n",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..4f89c36 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -116,7 +116,7 @@ def test_unknown_py_version(capsys: CaptureFixture) -> None:\n \n \n def test_regex_error(capsys: CaptureFixture) -> None:\n-    \"\"\"Check that we correctly error when an an option is passed whose value is an invalid regular expression.\"\"\"\n+    \"\"\"Check that we correctly error when an option is passed whose value is an invalid regular expression.\"\"\"\n     with pytest.raises(SystemExit):\n         Run(\n             [str(EMPTY_MODULE), r\"--function-rgx=[\\p{Han}a-z_][\\p{Han}a-z0-9_]{2,30}$\"],\n@@ -131,7 +131,36 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     assert assertString in output.err\n \n \n-def test_csv_regex_error(capsys: CaptureFixture) -> None:\n+from typing import Pattern, Sequence\n+import re\n+import pytest\n+from pylint.lint import Run\n+from pylint.config.arguments_manager import EMPTY_MODULE\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+    (\"(foo{1,3},bar{2,4})\", [\"(foo{1,3}\", \"bar{2,4})\"]),  # Deliberate test for malformed regex handling\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n     \"\"\"\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..2dc1471 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,8 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1186,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..5a46a22 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,32 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas transform output and a custom transformer.\"\"\"\n+\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: None = None) -> pd.DataFrame:\n+            return pd.DataFrame(X[\"value\"].groupby(X[\"date\"]).sum())\n+\n+    # Set output to pandas\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())]).set_output(transform=\"pandas\")\n+    result = union.fit_transform(data)\n+\n+    expected_index = pd.Index([pd.Timestamp(\"2020-01-01\"), pd.Timestamp(\"2020-01-02\"),\n+                               pd.Timestamp(\"2020-01-03\"), pd.Timestamp(\"2020-01-04\")])\n+    assert result.index.equals(expected_index)\n+    assert result.shape == (4, 1)\n+    assert (result.values.flatten() == [240, 240, 240, 240]).all()\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..70122b3 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -266,8 +266,27 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+def test_none_link_signature(app):\n+    # Verify if None generates a proper link in signature mode\n+    app.config.autodoc_typehints = 'signature'\n+    text = \".. py:function:: return_none() -> None\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.desc,\n+                          [desc, ([desc_signature, ([desc_name, \"return_none\"],\n+                                                    desc_parameterlist,\n+                                                    [desc_returns, pending_xref, \"None\"])],\n+                                  desc_content)]))\n \n-def test_pyfunction_signature(app):\n+def test_none_link_description(app):\n+    # Verify if None generates a proper link in description mode\n+    app.config.autodoc_typehints = 'description'\n+    text = \".. py:function:: return_none() -> None\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.desc,\n+                          [desc, ([desc_signature, ([desc_name, \"return_none\"],\n+                                                    desc_parameterlist,\n+                                                    [desc_returns, pending_xref, \"None\"])],\n+                                  desc_content)]))\n     text = \".. py:function:: hello(name: str) -> str\"\n     doctree = restructuredtext.parse(app, text)\n     assert_node(doctree, (addnodes.index,\n@@ -742,4 +761,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..a062731 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,7 +984,48 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n-def test_info_field_list_var(app):\n+def test_dict_param_type_rendering(app):\n+    \"\"\"Test to check correct rendering of :param dict(str, str): in docstring.\"\"\"\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param opc_meta: (optional)\\n\"\n+            \"   :type opc_meta: dict(str, str)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n+\n+    # :param opc_meta: + :type opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..19d4cca 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,6 +1008,60 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_info_field_list_multiple_unions(app):\n+    text = (\".. py:function:: func(param1, param2)\\n\"\n+            \"\\n\"\n+            \"   :param param1: first parameter\\n\"\n+            \"   :type param1: int | str | None\\n\"\n+            \"   :param param2: second parameter\\n\"\n+            \"   :type param2: list | dict | None\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field, nodes.field])]))\n+\n+    fields = doctree[1][1][0][0][1]  # Access the field_list node\n+    assert_node(fields[0], (nodes.field_name, \"param1\"),\n+                         (nodes.field_body, nodes.paragraph,\n+                          [addnodes.literal_strong, \"param1\"],\n+                          \" (\",\n+                          [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                          [addnodes.literal_emphasis, \" | \"],\n+                          [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                          [addnodes.literal_emphasis, \" | \"],\n+                          [pending_xref, addnodes.literal_emphasis, \"None\"],\n+                          \")\",\n+                          \" -- \",\n+                          \"first parameter\"))\n+\n+    assert_node(fields[1], (nodes.field_name, \"param2\"),\n+                         (nodes.field_body, nodes.paragraph,\n+                          [addnodes.literal_strong, \"param2\"],\n+                          \" (\",\n+                          [pending_xref, addnodes.literal_emphasis, \"list\"],\n+                          [addnodes.literal_emphasis, \" | \"],\n+                          [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                          [addnodes.literal_emphasis, \" | \"],\n+                          [pending_xref, addnodes.literal_emphasis, \"None\"],\n+                          \")\",\n+                          \" -- \",\n+                          \"second parameter\"))\n+\n+    assert_node(fields[0][1][1], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\")\n+    assert_node(fields[0][1][5], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\")\n+    assert_node(fields[0][1][9], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"None\")\n+\n+    assert_node(fields[1][1][1], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"list\")\n+    assert_node(fields[1][1][5], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\")\n+    assert_node(fields[1][1][9], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"None\")\n+\n \n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..5402179 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -833,6 +833,33 @@ def test_autodoc_typehints_description(app):\n             '   docstring\\n'\n             in context)\n \n+# Test to verify that autodoc_typehints_description_target=\"documented\" works with Napoleon\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_typehints_description_target': 'documented',\n+                                   'napoleon_numpy_docstring': False})\n+def test_autodoc_typehints_with_napoleon(app):\n+    # Create an index.rst file with a function to document\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.decr\\n'\n+        '\\n'\n+    )\n+    # Generate the documentation\n+    app.build()\n+    # Read the output index.txt to check the content\n+    context = (app.outdir / 'index.txt').read_text()\n+\n+    # Verify the documentation contains the Returns and Return type sections\n+    assert ('target.typehints.decr(a, b=1)\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n+            in context)\n+\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..9a84a26 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1049,9 +1049,21 @@ def test__solveset_multi():\n \n \n def test_conditionset():\n+    from sympy import cos, sin, Eq, ConditionSet, Reals\n+\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n+    # Test case for the reported issue\n+    n = Symbol('n', real=True)\n+    assert solveset(Eq(n*cos(n) - 3*sin(n), 0), n, domain=Reals) == \\\n+        ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)\n+\n+    # Additional test case for coverage\n+    x = Symbol('x', real=True)\n+    assert solveset(Eq(x**2 + sqrt(2)*sqrt(x) + sin(x), 0), x, domain=Reals) == \\\n+        ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n+\n     assert solveset(Eq(x**2 + x*sin(x), 1), x, domain=S.Reals\n         ) == ConditionSet(x, Eq(x**2 + x*sin(x) - 1, 0), S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..762c97a 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,7 +3265,15 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n-def test_to_rational_coeffs():\n+from sympy import Symbol, sqf_list\n+\n+x = Symbol('x')\n+\n+def test_issue_8695():\n+    # Test case based on the issue description\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n \n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..b076d87 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3248,9 +3248,13 @@ def test_poly_matching_consistency():\n     assert I * Poly(x, x) == Poly(I*x, x)\n     assert Poly(x, x) * I == Poly(I*x, x)\n \n+from sympy import symbols, I, expand, factor\n \n-@XFAIL\n-def test_issue_5786():\n+def test_issue_18895():\n+    x, y = symbols('x y')\n+    z = expand((x - 1)*(y - 1))\n+    assert factor(z) == (x - 1)*(y - 1)\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..bee3e8d 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,22 @@\n+\n+def test_symbol_dict():\n+    # Ensure that Symbol instances do not have a __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        s.x = 1\n+\n+    # __slots__ should be defined\n+    assert hasattr(s, '__slots__')\n+    assert s.__slots__ == ('name',)\n+\n+def test_symbol_name_assignment():\n+    # Test symbol creation and attribute access correctness\n+    x = Symbol('x')\n+    assert x.name == 'x'\n+    with raises(AttributeError):\n+        x.name = 'y'  # This should raise since 'name' is part of __slots__\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -6,6 +25,8 @@ import collections\n from sympy.core.basic import (Basic, Atom, preorder_traversal, as_Basic,\n     _atomic, _aresame)\n from sympy.core.singleton import S\n+from sympy.core.symbol import Symbol\n+from sympy.testing.pytest import raises\n from sympy.core.symbol import symbols, Symbol, Dummy\n from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..f436aec 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -365,6 +365,37 @@ def test_Rational_new():\n     assert Rational(PythonRational(2, 6)) == Rational(1, 3)\n \n     assert Rational(2, 4, gcd=1).q == 4\n+\n+def test_rational_calc_value_error():\n+    # The issue specifically mentions a problem with Rational('0.5', '100') producing 1/100100\n+    # and ensuring that Rational(0.5, 100) produces 1/200, which is the correct value.\n+    \n+    # Testing the incorrect behavior mentioned\n+    assert Rational('0.5', '100') == Rational(1, 200)  # Ensure it behaves correctly\n+    \n+    # Additional tests for similar cases:\n+    assert Rational('1.5', '3') == Rational(1.5, 3) == Rational(1, 2)\n+    assert Rational('3.0', '6.0') == Rational(3, 6) == Rational(1, 2)\n+    \n+    # Edge cases\n+    assert Rational('0', '1') == Rational(0, 1) == 0\n+    assert Rational('1', '0.5') == Rational(1, 2) == 2\n+\n+    # Ensure that rational number constructed from different types are equal\n+    assert Rational('3.5') == Rational(3.5)\n+\n+    # Checking for invalid input leading to ValueError or TypeError\n+    try:\n+        Rational('1.5', '1.5/2')\n+        assert False, \"Expected an exception but didn't get one.\"\n+    except TypeError:\n+        pass\n+\n+    try:\n+        Rational('invalid', '1')\n+        assert False, \"Expected an exception but didn't get one.\"\n+    except ValueError:\n+        pass\n     n = Rational(2, -4, gcd=1)\n     assert n.q == 4\n     assert n.p == -2\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..8490d73 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_with_checkbox(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the id provided by ChoiceWidget.options\n+        when rendering CheckboxSelectMultiple subwidgets.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..f39ab39 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,6 +301,35 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+    do_event(tool, 'release', xdata=release_data[0], ydata=release_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n \n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n",
  "scikit-learn__scikit-learn-12682": "",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..30987e5 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,8 +147,23 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n+import pytest\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n \n # Import the data\n+\n+def test_cross_val_predict_multioutputclassifier_predict_proba():\n+    X, Y = make_multilabel_classification()\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    # This should work without raising an AttributeError\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]\n+    for proba in pred_proba:\n+        assert proba.shape[0] == X.shape[0]\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n X = iris.data\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..d085b80 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -291,6 +291,17 @@ def test_stringify_type_union_operator():\n     assert stringify(int | str) == \"int | str\"  # type: ignore\n     assert stringify(int | str | None) == \"int | str | None\"  # type: ignore\n \n-\n-def test_stringify_broken_type_hints():\n+from sphinx.ext.autodoc import mock\n+\n+def test_restify_mock():\n+    # Mock a module and ensure restify handles it correctly\n+    with mock(['mocked_module']):\n+        import mocked_module\n+        assert restify(mocked_module.SomeClass) == ':py:class:`mocked_module.SomeClass`'\n+    \n+def test_stringify_mock():\n+    # Mock a module and ensure stringify handles it correctly\n+    with mock(['mocked_module']):\n+        import mocked_module\n+        assert stringify(mocked_module.SomeClass) == 'mocked_module.SomeClass'\n     assert stringify(BrokenType) == 'tests.test_util_typing.BrokenType'\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..f4a0595 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,6 +347,17 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n+def test_issue_13546():\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Additional test cases for different n\n+    assert p.subs(n, 1).doit() == S(3)  # (1 + 2^0) = 2\n+    assert p.subs(n, 3).doit() == S(105)/8  # (3 + 2^0) * (3 + 2^-1) * (3 + 2^-2) = 105/8\n+    assert p.subs(n, 4).doit() == S(1155)/32  # (4 + 2^0) * (4 + 2^-1) * (4 + 2^-2) * (4 + 2^-3) = 1155/32\n+\n \n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n@@ -357,4 +368,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}