{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..2d45d79 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -128,8 +128,34 @@ def test_arith_oper():\n     with pytest.raises(ModelDefinitionError, match=r\"Unsupported operands for arithmetic operator: .*\"):\n         _arith_oper(sh1, map1)\n \n+from astropy.modeling import models as m\n+from astropy.modeling.separable import separability_matrix\n+import numpy as np\n+import pytest\n \n @pytest.mark.parametrize(('compound_model', 'result'), compound_models.values())\n+\n+def test_nested_compound_models_separability():\n+    # Set up the models\n+    linear_10 = m.Linear1D(10)\n+    linear_5 = m.Linear1D(5)\n+    cm = linear_10 & linear_5\n+    \n+    # Nested Compound Model test\n+    complex_model = m.Pix2Sky_TAN() & cm\n+    computed_matrix = separability_matrix(complex_model)\n+    \n+    # Expected separability matrix for the nested model (questionable behavior)\n+    expected_matrix = np.array([\n+        [True,  True, False, False],\n+        [True,  True, False, False],\n+        [False, False,  True,  True],\n+        [False, False,  True,  True]\n+    ])\n+    \n+    assert np.array_equal(computed_matrix, expected_matrix), (\n+        \"The separability matrix for nested compound models is not computed correctly.\"\n+    )\n def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..1bc9895 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,7 +137,45 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n-    def test_complex_value_card(self):\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding comment truncation\n+        \n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+    def test_floating_point_precision_edge_case(self):\n+        \"\"\"Test precision edge cases where representation could affect comment length\"\"\"\n+        \n+        k = \"HIERARCH X Y Z A B\"\n+        com = \"This is a test comment for precision edge case\"\n+        # Value that commonly causes precision troubles\n+        c = fits.Card(k, 0.1 + 0.2 - 0.3, com)\n+        expected_str = f\"{k} = 0.0 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a boundary floating-point number\n+        c = fits.Card(k, 1.99999999999999, com)\n+        expected_str = f\"{k} = 1.99999999999999 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Large floating-point number representation\n+        c = fits.Card(k, 1.23e+22, com)\n+        expected_str = f\"{k} = 1.23E+22 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n         c = fits.Card(\"abc\", (1.2345377437887837487e88 + 6324767364763746367e-33j))\n",
  "astropy__astropy-14539": "",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..e4a60b3 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -73,6 +73,7 @@ def test_JsonCustomEncoder():\n     tmpd = {\"a\": {\"unit\": \"erg / s\", \"value\": [0., 1.]}}\n     assert newd == tmpd\n \n+import pytest\n \n def test_inherit_docstrings():\n     class Base(metaclass=misc.InheritDocstrings):\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..c4482c4 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -174,6 +174,17 @@ def test_multiple_solidus():\n \n def test_unknown_unit3():\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n+\n+    # Test case for the issue: Unit equality comparison with None should not raise TypeError\n+    unrecognized_unit = u.Unit('asdf', parse_strict='silent')\n+\n+    # Check that comparison with None does not raise an exception and returns False\n+    assert unrecognized_unit != None  # noqa\n+    assert not (unrecognized_unit == None)  # noqa\n+\n+    # Further checks for inclusion in or comparison against a list containing None\n+    assert unrecognized_unit not in (None, u.m)\n+    assert unrecognized_unit not in [None]\n     assert isinstance(unit, u.UnrecognizedUnit)\n     assert unit.name == \"FOO\"\n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..92cf229 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -62,6 +62,9 @@ def test_find_mod_objs():\n     assert 'collections.namedtuple' not in fqns\n     assert namedtuple not in objs\n \n+from astropy.utils import minversion\n+from distutils.version import LooseVersion\n+\n \n def test_minversion():\n     from types import ModuleType\n@@ -72,4 +75,4 @@ def test_minversion():\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..2b42221 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,49 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_card_from_unicode_string(self):\n+        \"\"\"\n+        Test loading a Card from a unicode `str` object.\n+        \"\"\"\n+        c = fits.Card.fromstring(\"XYZ     = 'xyz'\")\n+        assert c.keyword == 'XYZ'\n+        assert c.value == 'xyz'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+        \n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n+    def test_header_fromstring_unicode_string(self):\n+        \"\"\"\n+        Test reading a Header from a unicode `str` string.\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            data = fobj.read().decode('latin-1')\n+            pri_hdr_from_unicode = fits.Header.fromstring(data)\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_unicode['NAXIS']\n+        assert pri_hdr == pri_hdr_from_unicode\n+        assert pri_hdr.tostring() == pri_hdr_from_unicode.tostring()\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..bd58708 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -125,7 +125,9 @@ class TestQuantityCreation:\n             q1.unit = u.cm\n \n     def test_preserve_dtype(self):\n-        \"\"\"Test that if an explicit dtype is given, it is used, while if not,\n+        \"\"\"Test that if an explicit dtype is given, \n+           it is used, while if not, numbers are converted to float \n+           (including decimal.Decimal, which numpy converts to an object; closes #1419)\n         numbers are converted to float (including decimal.Decimal, which\n         numpy converts to an object; closes #1419)\n         \"\"\"\n@@ -138,11 +140,13 @@ class TestQuantityCreation:\n         assert q2.value == float(q1.value)\n         assert q2.unit == q1.unit\n \n-        # but we should preserve float32\n+        # but we should preserve float32 and float16\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n-        # items stored as objects by numpy should be converted to float\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..7724200 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -225,6 +225,17 @@ TEST_DATA = [\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+\n+    (URLValidator(), 'http://valid-user:valid-pass@example.com', None),\n+    (URLValidator(), 'http://user:pass@192.168.0.1:8080', None),\n+\n     (BaseValidator(True), True, None),\n     (BaseValidator(True), False, ValidationError),\n \n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..14f8961 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..0adef96 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1102,8 +1102,16 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertIsNone(default_storage.file_permissions_mode)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n+    \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default FILE_UPLOAD_PERMISSIONS should be 0o644.\n+        Check if default_storage reflects this value correctly.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n \n-    def test_override_file_upload_directory_permissions(self):\n+    def test_override_file_upload_permissions(self):\n         \"\"\"\n         Overriding the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting should be\n         reflected in the directory_permissions_mode attribute of\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..829c976 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -101,7 +102,25 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_pgpassword_via_subprocess_run(self):\n+        \"\"\"Test that PGPASSWORD is set correctly in the subprocess environment using subprocess.run.\"\"\"\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n+        \n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            result = DatabaseClient.runshell_db(dbinfo)\n+\n+        self.assertEqual(self.pgpassword, 'somepassword')\n+        self.assertIsNone(result)  # runshell_db doesn't return anything\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_call(*args):\n             handler = signal.getsignal(signal.SIGINT)\n@@ -113,4 +132,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..8bb6c70 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,7 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -55,7 +56,25 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_content_type_rename_conflict(self):\n+    def test_existing_content_type_rename_other_database(self):\n+        class TestRouter:\n+            def db_for_write(self, model, **hints):\n+                return 'default'\n+\n+        with override_settings(DATABASE_ROUTERS=[TestRouter()]):\n+            # Create content type in 'other' database\n+            ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+            other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+            \n+            # Perform migration on 'other' database\n+            call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+            self.assertFalse(other_content_types.filter(model='foo').exists())\n+            self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+            \n+            # Rollback migration\n+            call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+            self.assertTrue(other_content_types.filter(model='foo').exists())\n+            self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         ContentType.objects.create(app_label='contenttypes_tests', model='renamedfoo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0)\n@@ -63,4 +82,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..f9d7360 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,32 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_with_request_and_instance(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+        request = type('Request', (object,), {})()  # Create a simple mock request\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        for name, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+            request.name = name\n+            self.assertEqual(ma.get_inlines(request, None), (inline_class,))\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), inline_class)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..b8c5458 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -247,6 +247,19 @@ class UsernameValidatorsTests(SimpleTestCase):\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n+    \n+    def test_username_with_newline(self):\n+        # Testing Usernames ending with newline character which should be invalid\n+        invalid_usernames = ['example\\n', 'username_with_newline\\n']\n+        validators_to_test = [\n+            validators.ASCIIUsernameValidator(), \n+            validators.UnicodeUsernameValidator()\n+        ]\n+        for validator in validators_to_test:\n+            for invalid in invalid_usernames:\n+                with self.subTest(validator=validator, invalid=invalid):\n+                    with self.assertRaises(ValidationError):\n+                        validator(invalid)\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n@@ -258,4 +271,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..9c99a3d 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -21,8 +21,16 @@ class RenderToStringTest(SimpleTestCase):\n             'obj:test\\n',\n         )\n \n-\n-class GetDefaultTests(SimpleTestCase):\n+class AutoescapeTests(SimpleTestCase):\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        rendered_content = engine.render_to_string('test_context.html', {'obj': '<script>'})\n+        self.assertEqual(rendered_content, 'obj:<script>\\n')\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        rendered_content = engine.render_to_string('test_context.html', {'obj': '<script>'})\n+        self.assertEqual(rendered_content, 'obj:&lt;script&gt;\\n')\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..110e06e 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,10 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..8b24aef 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -701,8 +701,43 @@ class TestInlinePermissions(TestCase):\n             '<input type=\"hidden\" id=\"id_inner2_set-0-id\" value=\"%i\" name=\"inner2_set-0-id\">' % self.inner2.id,\n             html=True\n         )\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines. Should not have add, change, or delete permissions.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" ' \n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n \n-    def test_inline_change_fk_change_perm(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines. No add, change, or delete permissions.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True\n+        )\n+        # The field in the inline is read-only.\n+        self.assertContains(response, '<p>%s</p>' % 'The inline Book')\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n         permission = Permission.objects.get(codename='change_inner2', content_type=self.inner_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.holder_change_url)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..26c82f1 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1803,6 +1803,17 @@ class ModelOneToOneFieldTests(TestCase):\n                 fields = '__all__'\n \n         self.assertEqual(list(ImprovedArticleForm.base_fields), ['article'])\n+\n+    def test_model_to_dict_empty_fields(self):\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        # Test model_to_dict with an empty fields list\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+        # Test model_to_dict with some fields specified\n+        self.assertEqual(sorted(model_to_dict(bw, fields=['name', 'score'])), ['name', 'score'])\n+        # Test model_to_dict with all fields explicitly included\n+        self.assertEqual(sorted(model_to_dict(bw, fields=['id', 'name', 'score', 'writer_ptr'])), ['id', 'name', 'score', 'writer_ptr'])\n+        # Test model_to_dict with fields being None, should return all fields\n+        self.assertEqual(sorted(model_to_dict(bw, fields=None)), ['id', 'name', 'score', 'writer_ptr'])\n         self.assertEqual(list(ImprovedArticleWithParentLinkForm.base_fields), [])\n \n     def test_modelform_subclassed_model(self):\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..17f05fc 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n@@ -464,6 +466,15 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        # This test is to ensure that deleting an instance with no dependencies sets its PK to None\n+        u = User.objects.create()\n+        # User can be fast-deleted\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_qs(self):\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..3a36849 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,10 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),    # Should not be in scientific notation given decimal_pos\n+            ('1e-200', 2, '0.00'),    # Should be '0.00' when properly fixed\n+            ('1e-300', 5, '0.00000'), # Boundary condition with more zeros, should be zero\n+            ('1e-201', 0, '0'),       # No decimal places, should round to '0'\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..9a1104d 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -81,7 +83,31 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+\n+    def test_ssl_certificate(self):\n+        \"\"\"Test SSL options including client certificate and key.\"\"\"\n+        ssl_dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'host': 'somehost',\n+            'port': '444',\n+            'sslmode': 'verify-ca',\n+            'sslrootcert': 'root.crt',\n+            'sslcert': 'client.crt',\n+            'sslkey': 'client.key',\n+        }\n+        args, _ = self._run_it(ssl_dbinfo)\n+        expected_args = [\n+            'psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'\n+        ]\n+        expected_env = {\n+            'PGSSLCERT': 'client.crt',\n+            'PGSSLKEY': 'client.key',\n+            'PGSSLMODE': 'verify-ca',\n+            'PGSSLROOTCERT': 'root.crt',\n+        }\n+        self.assertEqual(args, expected_args)\n+        self.assertDictContainsSubset(expected_env, os.environ)\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..707320d 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -90,6 +90,32 @@ class FilteredRelationTests(TestCase):\n             [self.author1, self.author2]\n         )\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_exclude_no_match(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_foo=FilteredRelation('book', condition=Q(book__title__iexact='nonexistent title')),\n+            ).exclude(book_foo__isnull=False),\n+            [self.author1, self.author2],\n+        )\n+\n+    def test_exclude_with_complex_condition(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_rented=FilteredRelation(\n+                    'book', condition=Q(book__state=Book.RENTED)\n+                ),\n+            ).exclude(book_rented__isnull=False),\n+            [self.author1, self.author2],  # Assuming both authors' books are in a state other than RENTED\n+        )\n+\n     def test_with_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n@@ -98,6 +124,32 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_exclude_no_match(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_foo=FilteredRelation('book', condition=Q(book__title__iexact='nonexistent title')),\n+            ).exclude(book_foo__isnull=False),\n+            [self.author1, self.author2],\n+        )\n+\n+    def test_exclude_with_complex_condition(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_rented=FilteredRelation(\n+                    'book', condition=Q(book__state=Book.RENTED)\n+                ),\n+            ).exclude(book_rented__isnull=False),\n+            [self.author1, self.author2],  # Assuming both authors' books are in a state other than RENTED\n+        )\n+\n     def test_with_join_and_complex_condition(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..ea76c6e 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -27,7 +27,7 @@ class TestUtilsHtml(SimpleTestCase):\n             ('<', '&lt;'),\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n-            (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),  # Changed output for comparison\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n@@ -35,7 +35,11 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(value=value, output=output):\n                 for pattern in patterns:\n                     with self.subTest(value=value, output=output, pattern=pattern):\n-                        self.check_output(escape, pattern % value, pattern % output)\n+                        expected_output = pattern % output\n+                        # Specifically check for the backward-compatible change for single quotes\n+                        if value == \"'\":\n+                            expected_output = pattern % \"&#x27;\"  # Expected behavior\n+                        self.check_output(escape, pattern % value, expected_output)\n                         self.check_output(escape, lazystr(pattern % value), pattern % output)\n                 # Check repeated values.\n                 self.check_output(escape, value * 2, output * 2)\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..000c87c 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -254,6 +254,9 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), 'Set foo')\n \n \n+from django.core.management import CommandError\n+from django.test import SimpleTestCase\n+\n class UtilsTests(SimpleTestCase):\n \n     def test_no_existent_external_program(self):\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..0cc98e7 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,6 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -12,4 +13,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..425a8f4 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,8 +226,26 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n-\n-class ModelBackendTest(BaseModelBackendTest, TestCase):\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    def test_authenticate_with_none_username_and_password(self):\n+        \"\"\"\n+        ModelBackend.authenticate() should not make a database query\n+        when username and password are None.\n+        \"\"\"\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate(username=None, password=None))\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n     \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..f4ec287 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,25 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_values_list_change_columns(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        ReservedName.objects.create(name='b', order=3)\n+        qs1 = ReservedName.objects.all()\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get(name='a')\n+        self.assertEqual(reserved_name, ('a', 2))\n+        reserved_order = qs1.union(qs1).values_list('order').get(order=3)\n+        self.assertEqual(reserved_order, (3,))\n+\n+    def test_composed_queries_multiple_evaluations(self):\n+        ReservedName.objects.create(name='x', order=5)\n+        qs1 = ReservedName.objects.all()\n+        qs2 = ReservedName.objects.filter(order=5)\n+        # First evaluation\n+        reserved_name_order = qs1.union(qs2).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name_order, ('x', 5))\n+        # Second evaluation with different columns\n+        reserved_order_only = qs1.union(qs2).values_list('order').get()\n+        self.assertEqual(reserved_order_only, (5,))\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..378e0c6 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..f189c0f 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,6 +1,7 @@\n from datetime import datetime\n from operator import attrgetter\n \n+from datetime import datetime\n from django.core.exceptions import FieldError\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n@@ -462,7 +463,40 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        # This test confirms ordering by a parent model's field when using expressions in Meta.\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_ordering_in_parent_model_meta(self):\n+        # Test ordering by expressions in parent model's Meta class.\n+        articles = OrderedByFArticle.objects.all()\n+        self.assertSequenceEqual(articles, [self.a4, self.a1, self.a2, self.a3])\n+\n+    def test_ordering_with_multiple_expressions(self):\n+        # Test a complex ordering scenario using expressions on a proxy model.\n+        Reference.objects.create(article=self.a1)\n+        Reference.objects.create(article=self.a2)\n+        Reference.objects.create(article=self.a3)\n+        Reference.objects.create(article=self.a4)\n+        references = Reference.objects.all().order_by('article__pub_date', F('article__headline').asc())\n+        self.assertEqual([ref.article.headline for ref in references], ['Article 1', 'Article 2', 'Article 3', 'Article 4'])\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..238908e 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -718,7 +718,37 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RemoveField\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"name\")\n \n-    def test_alter_field(self):\n+    def test_alter_field_to_fk_adds_dependency(self):\n+        \"\"\"Test changing a UUIDField to a ForeignKey adds the correct dependency.\"\"\"\n+        before = [\n+            ModelState('testapp1', 'App1', [\n+                ('id', models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                ('text', models.CharField(max_length=100)),\n+                ('another_app', models.UUIDField(null=True, blank=True)),\n+            ]),\n+            ModelState('testapp2', 'App2', [\n+                ('id', models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                ('text', models.CharField(max_length=100)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('testapp1', 'App1', [\n+                ('id', models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                ('text', models.CharField(max_length=100)),\n+                ('another_app', models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)),\n+            ]),\n+            ModelState('testapp2', 'App2', [\n+                ('id', models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                ('text', models.CharField(max_length=100)),\n+            ]),\n+        ]\n+        changes = self.get_changes(before, after)\n+        # Ensure that there is one migration for testapp1.\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        # Ensure the operation type is AlterField.\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        # Ensure that the migration correctly has a dependency on testapp2.\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         \"\"\"Tests autodetection of new fields.\"\"\"\n         changes = self.get_changes([self.author_name], [self.author_name_longer])\n         # Right number/type of migrations?\n@@ -2399,4 +2429,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "",
  "django__django-11790": "",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..0ba6227 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,6 +1,8 @@\n+\n import unittest\n from datetime import datetime\n \n+from unittest import mock\n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -316,7 +318,25 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mock(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        # Assuming current year is between 2000 and 2048\n+        current_year_cases = [\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        ]\n+        \n+        for utcnow, rfc850str, expected_date in current_year_cases:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..0b2eeec 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,34 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.forms import CharField, Form\n+from django.test import SimpleTestCase\n+\n+class FieldDeepcopyTests(SimpleTestCase):\n+\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_field_deep_copy_modifies_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'required': 'This field is required.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        field_copy.error_messages['required'] = 'You must fill out this field.'\n+\n+        self.assertNotEqual(field.error_messages['required'], field_copy.error_messages['required'])\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..8c1a2d2 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,5 +1,7 @@\n+\n from operator import attrgetter\n \n+from math import ceil\n from django.db import IntegrityError, NotSupportedError, connection\n from django.db.models import FileField, Value\n from django.db.models.functions import Lower\n@@ -206,6 +208,19 @@ class BulkCreateTests(TestCase):\n         self.assertEqual(NoFields.objects.count(), 2)\n \n     @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for _ in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        # Verify the number of queries when exceeding max_batch_size\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n+        # Verify that respect is given to batch_size if less than max_batch_size\n+        with self.assertNumQueries(10):  # Arbitrarily chosen to verify lesser batch sizes\n+            Country.objects.bulk_create(objs, batch_size=100)\n+        # Verify behavior when no batch_size is specified\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs)\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n         with self.assertNumQueries(2):\n@@ -215,6 +230,19 @@ class BulkCreateTests(TestCase):\n             TwoFields.objects.bulk_create(objs, len(objs))\n \n     @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for _ in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        # Verify the number of queries when exceeding max_batch_size\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n+        # Verify that respect is given to batch_size if less than max_batch_size\n+        with self.assertNumQueries(10):  # Arbitrarily chosen to verify lesser batch sizes\n+            Country.objects.bulk_create(objs, batch_size=100)\n+        # Verify behavior when no batch_size is specified\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs)\n     def test_bulk_insert_expressions(self):\n         Restaurant.objects.bulk_create([\n             Restaurant(name=\"Sam's Shake Shack\"),\n",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..3f2b502 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,3 +1,4 @@\n+\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n@@ -29,6 +30,21 @@ class TestCharField(TestCase):\n         self.assertEqual(p.title, 'Smile \ud83d\ude00')\n \n     def test_assignment_from_choice_enum(self):\n+        class EventEnum(models.TextChoices):\n+            FIRST = \"first\", \"First Event\"\n+            SECOND = \"second\", \"Second Event\"\n+\n+        class TestModel(models.Model):\n+            event = models.CharField(max_length=10, choices=EventEnum.choices)\n+\n+        instance = TestModel(event=EventEnum.FIRST)\n+        self.assertIsInstance(instance.event, str)\n+        self.assertEqual(instance.event, \"first\")\n+\n+        instance.save()\n+        instance.refresh_from_db()\n+        self.assertIsInstance(instance.event, str)\n+        self.assertEqual(instance.event, \"first\")\n         class Event(models.TextChoices):\n             C = 'Carnival!'\n             F = 'Festival!'\n",
  "django__django-11999": "",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..5aa02c0 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,6 +9,8 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n",
  "django__django-12050": "",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..9ab77e7 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -179,6 +179,42 @@ class OperationWriterTests(SimpleTestCase):\n             '),'\n         )\n \n+    def test_serialize_field_nested_in_class(self):\n+        \"\"\"\n+        Test the serialization of a field that is defined within a nested class structure.\n+        \"\"\"\n+        class OuterFieldClass:\n+            class NestedField(models.CharField):\n+                pass\n+        \n+        field = OuterFieldClass.NestedField(max_length=20)\n+        serialized_value, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            serialized_value, \n+            \"migrations.test_writer.%s.OuterFieldClass.NestedField(max_length=20)\" % self.__class__.__name__,\n+            \"Inner class field should be represented with its full class path.\"\n+        )\n+        self.assertIn(\"from django.db import models\", imports)\n+\n+    def test_serialize_enum_as_inner_class(self):\n+        \"\"\"\n+        Test the serialization of EnumField with an Enum as an inner class in a Django model.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+        \n+        state_field = EnumField(enum=Thing.State)\n+        serialized_value, imports = MigrationWriter.serialize(state_field)\n+        self.assertEqual(\n+            serialized_value, \n+            \"migrations.test_writer.%s.Thing.State\" % self.__class__.__name__\n+        )\n+        self.assertIn(\"from enumfields import EnumField\", imports)\n+        self.assertIn(\"import enum\", imports)\n+\n \n class WriterTests(SimpleTestCase):\n     \"\"\"\n@@ -746,4 +782,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..a92dd44 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -831,6 +831,9 @@ class ChangeListTests(TestCase):\n             'form-0-load': '10',\n             '_save': 'Save',\n         }\n+        import re\n+        from django.urls import reverse\n+        \n         superuser = self._create_superuser('superuser')\n         self.client.force_login(superuser)\n         changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n@@ -844,6 +847,46 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n+    def test_get_list_editable_queryset_with_various_regex_special_chars_in_prefix(self):\n+        \"\"\"\n+        Test _get_list_editable_queryset with formset prefixes containing various regex special characters.\n+        \"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form[1]-TOTAL_FORMS': '2',\n+            'form[1]-INITIAL_FORMS': '2',\n+            'form[1]-MIN_NUM_FORMS': '0',\n+            'form[1]-MAX_NUM_FORMS': '1000',\n+            'form[1]-0-uuid': str(a.pk),\n+            'form[1]-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        import re\n+        from django.urls import reverse\n+        \n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form[1]')\n+        self.assertEqual(queryset.count(), 1)\n+\n+        # Test with other special characters\n+        data = {\n+            'form(2)-TOTAL_FORMS': '2',\n+            'form(2)-INITIAL_FORMS': '2',\n+            'form(2)-MIN_NUM_FORMS': '0',\n+            'form(2)-MAX_NUM_FORMS': '1000',\n+            'form(2)-0-uuid': str(a.pk),\n+            'form(2)-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form(2)')\n+        self.assertEqual(queryset.count(), 1)\n+\n     def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..d3740f6 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -95,13 +96,21 @@ class TestUtils(AdminDocsSimpleTestCase):\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n \n-    def test_parse_rst(self):\n+    def test_parse_docstring_with_no_leading_empty_line(self):\n+        \"\"\"\n+        Test parsing a docstring that does not have a leading empty line.\n+        \"\"\"\n+        title, body, _ = parse_docstring('Title line\\n\\n    Subsequent indented line')\n+        self.assertEqual(title, 'Title line')\n+        self.assertEqual(body, 'Subsequent indented line')\n+\n+    def test_parse_docstring_with_trailing_whitespace(self):\n         \"\"\"\n-        parse_rst() should use `cmsreference` as the default role.\n+        Test parsing a docstring with trailing whitespace on the title.\n         \"\"\"\n-        markup = '<p><a class=\"reference external\" href=\"/admindocs/%s\">title</a></p>\\n'\n-        self.assertEqual(parse_rst('`title`', 'model'), markup % 'models/title/')\n-        self.assertEqual(parse_rst('`title`', 'view'), markup % 'views/title/')\n+        title, body, _ = parse_docstring('Title line with spaces    \\n\\n    Subsequent line')\n+        self.assertEqual(title, 'Title line with spaces')\n+        self.assertEqual(body, 'Subsequent line')\n         self.assertEqual(parse_rst('`title`', 'template'), markup % 'templates/title/')\n         self.assertEqual(parse_rst('`title`', 'filter'), markup % 'filters/#title')\n         self.assertEqual(parse_rst('`title`', 'tag'), markup % 'tags/#title')\n",
  "django__django-12193": "diff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 5c5e45d..9a97349 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -82,10 +82,37 @@ class CheckboxInputTest(WidgetTest):\n         \"\"\"\n         self.assertFalse(self.widget.value_from_datadict({}, {}, 'testing'))\n \n+    def test_splitarrayfield_booleanfield_initial_data(self):\n+        # Test with initial data [True, False, True]\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, False, True])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']], \n+            [{'checked': 'checked'}, {}, {'checked': 'checked'}]\n+        )\n+\n+    def test_splitarrayfield_booleanfield_all_false(self):\n+        # Test with initial data [False, False, False]\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, False, False])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}]\n+        )\n+\n+    def test_splitarrayfield_booleanfield_all_true(self):\n+        # Test with initial data [True, True, True]\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, True, True])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': 'checked'}, {'checked': 'checked'}, {'checked': 'checked'}]\n+        )\n+\n     def test_value_from_datadict_string_int(self):\n         value = self.widget.value_from_datadict({'testing': '0'}, {}, 'testing')\n         self.assertIs(value, True)\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..37947c0 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -257,7 +257,9 @@ class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n \n \n-class FKToUUID(models.Model):\n+class Sample(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+    name = models.CharField(blank=True, max_length=100)\n     data = models.ForeignKey(UUIDData, models.CASCADE)\n \n \n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..2062fd2 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,6 +77,12 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}', 'simple_keyword_only_default - Expected result: 37'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}',\n+             \"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\"),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}', 'inclusion_keyword_only_default - Expected result: 37\\n'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=42 kwarg=37 %}',\n+             \"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\")\n         ]\n \n         for entry in templates:\n@@ -87,7 +93,22 @@ class SimpleTagTests(TagTestCase):\n             t = self.engine.from_string(\"%s as var %%}Result: {{ var }}\" % entry[0][0:-2])\n             self.assertEqual(t.render(c), \"Result: %s\" % entry[1])\n \n-    def test_simple_tag_errors(self):\n+    def test_custom_tag_keyword_only_defaults(self):\n+        # Correctly handle single keyword argument with default\n+        c = Context({})\n+        t = self.engine.from_string(\"{% load custom %}{% simple_keyword_only_default kwarg=37 %}\")\n+        self.assertEqual(t.render(c), \"simple_keyword_only_default - Expected result: 37\")\n+\n+        # Raise error on duplicated keyword arguments\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\"):\n+            self.engine.from_string(\"{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}\")\n+\n+        # Inclusion tag similar test\n+        t = self.engine.from_string(\"{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}\")\n+        self.assertEqual(t.render(c), \"inclusion_keyword_only_default - Expected result: 37\\n\")\n+\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\"):\n+            self.engine.from_string(\"{% load inclusion %}{% inclusion_keyword_only_default kwarg=42 kwarg=37 %}\")\n         errors = [\n             (\"'simple_one_default' received unexpected keyword argument 'three'\",\n                 '{% load custom %}{% simple_one_default 99 two=\"hello\" three=\"foo\" %}'),\n@@ -101,6 +122,12 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}', 'simple_keyword_only_default - Expected result: 37'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}',\n+             \"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\"),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}', 'inclusion_keyword_only_default - Expected result: 37\\n'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=42 kwarg=37 %}',\n+             \"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\")\n         ]\n \n         for entry in errors:\n@@ -190,6 +217,12 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}', 'simple_keyword_only_default - Expected result: 37'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}',\n+             \"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\"),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}', 'inclusion_keyword_only_default - Expected result: 37\\n'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=42 kwarg=37 %}',\n+             \"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\")\n         ]\n \n         for entry in templates:\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..1a3453e 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2430,6 +2431,27 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n         )\n \n+    def test_fileinput_required_attribute_handling(self):\n+        # Ensure that the FileInput does not include the 'required' attribute\n+        # when initial data is provided. It should include 'required' when no initial data exists.\n+\n+        class FileFormWithRequiredField(Form):\n+            file1 = FileField(required=True)\n+\n+        # Case with no initial data - should include 'required'\n+        form_no_initial = FileFormWithRequiredField(auto_id=False)\n+        self.assertHTMLEqual(\n+            form_no_initial.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # Case with initial data - should not include 'required'\n+        form_with_initial = FileFormWithRequiredField(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            form_with_initial.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n         f = FileForm(data={}, files={}, auto_id=False)\n         self.assertHTMLEqual(\n             f.as_table(),\n@@ -2478,6 +2500,27 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n \n+    def test_fileinput_required_attribute_handling(self):\n+        # Ensure that the FileInput does not include the 'required' attribute\n+        # when initial data is provided. It should include 'required' when no initial data exists.\n+\n+        class FileFormWithRequiredField(Form):\n+            file1 = FileField(required=True)\n+\n+        # Case with no initial data - should include 'required'\n+        form_no_initial = FileFormWithRequiredField(auto_id=False)\n+        self.assertHTMLEqual(\n+            form_no_initial.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # Case with initial data - should not include 'required'\n+        form_with_initial = FileFormWithRequiredField(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            form_with_initial.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n     def test_filefield_initial_callable(self):\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..08adcc8 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -138,6 +139,25 @@ class ChoicesTests(SimpleTestCase):\n                 ONE = 1, 'X', 'Invalid'\n \n         msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n+\n+    def test_enum_in_templates(self):\n+        from django.template import Context, Template\n+\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', _('Freshman')\n+            SOPHOMORE = 'SO', _('Sophomore')\n+            JUNIOR = 'JR', _('Junior')\n+            SENIOR = 'SR', _('Senior')\n+\n+        # Ensure YearInSchool enums can be rendered in a template\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Freshman{% endif %}')\n+        context = Context({'YearInSchool': YearInSchool, 'student': {'year_in_school': YearInSchool.FRESHMAN}})\n+        self.assertEqual(template.render(context), 'Freshman')\n+\n+        # Test accessing the label and value directly\n+        template = Template('{{ YearInSchool.FRESHMAN.label }}|{{ YearInSchool.FRESHMAN.value }}')\n+        context = Context({'YearInSchool': YearInSchool})\n+        self.assertEqual(template.render(context), 'Freshman|FR')\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..ec3910c 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -175,8 +175,23 @@ class UtilsTests(SimpleTestCase):\n \n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n-\n-    def test_number_formats_display_for_field(self):\n+    def test_jsonfield_readonly_display(self):\n+        \"\"\"\n+        Test that JSONField values are displayed correctly as JSON strings\n+        when they are readonly in the admin.\n+        \"\"\"\n+        tests = [\n+            ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),  # Valid JSON\n+            ({\"a\": [1, 2, {\"b\": \"c\"}]}, '{\"a\": [1, 2, {\"b\": \"c\"}]}'),  # Nested JSON\n+            ([1, \"two\", 3.0], '[1, \"two\", 3.0]'),  # JSON array\n+            (\"plain_string\", '\"plain_string\"'),  # String value\n+            ({\"invalid\": set([1, 2, 3])}, \"{'invalid': {1, 2, 3}}\"),  # Invalid JSON input as set is not JSON serializable\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                field = models.JSONField()\n+                display = display_for_field(value, field, self.empty_value)\n+                self.assertEqual(display, display_value)\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n \n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..446f685 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,6 +1015,24 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n+    @isolate_apps('invalid_models_tests')\n+    def test_onetoone_order_dependency(self):\n+        class Document(models.Model):\n+            pass\n+\n+        # Test with incorrect order to reproduce the issue\n+        with self.assertRaisesMessage(ImproperlyConfigured, \"Add parent_link=True to invalid_models_tests.Picking.origin.\"):\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # Test with correct order based on provided reference\n+        class PickingCorrectOrder(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        self.assertEqual(PickingCorrectOrder.check(), [])\n+\n     def test_m2m_table_name_clash(self):\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..e1a8636 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,14 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY left unset, the middleware defaults\n+        to adding a \"Referrer-Policy: same-origin\" header to the response.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -254,4 +261,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "",
  "django__django-12708": "",
  "django__django-12713": "",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..fb1d02c 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,8 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        # Test updated execute_sql_flush method signature without using parameter\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +182,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..14718fa 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,6 +2444,30 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Test transitioning a field from a base model to a subclass ensures\n+        RemoveField precedes CreateModel to avoid FieldError.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n \n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n@@ -2453,4 +2477,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..f53c3fa 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,49 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+\n+class ModelWithConstraintTests(TestCase):\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_meta_constraint(self):\n+        class ModelWithConstraint(models.Model):\n+            slug = models.CharField(max_length=100)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['slug'], name='unique_slug'),\n+                ]\n+\n+        model_instance_1 = ModelWithConstraint.objects.create(slug='slug-1')\n+        model_instance_2 = ModelWithConstraint.objects.create(slug='slug-2')\n+        self.assertEqual(\n+            ModelWithConstraint.objects.in_bulk(\n+                [model_instance_1.slug, model_instance_2.slug],\n+                field_name='slug',\n+            ),\n+            {model_instance_1.slug: model_instance_1, model_instance_2.slug: model_instance_2},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_with_uniqueconstraint_not_unique(self):\n+        class ModelWithNonUniqueConstraint(models.Model):\n+            title = models.CharField(max_length=100)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['title'], name='unique_title'),\n+                ]\n+        \n+        instance_1 = ModelWithNonUniqueConstraint.objects.create(title='Not Unique 1')\n+        instance_2 = ModelWithNonUniqueConstraint.objects.create(title='Not Unique 2')\n+        \n+        msg = \"in_bulk()'s field_name must be a unique field but 'title' isn't.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            ModelWithNonUniqueConstraint.objects.in_bulk(\n+                [instance_1.title, instance_2.title],\n+                field_name='title',\n+            )\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..fa7ca0f 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -892,8 +892,23 @@ class OtherModelTests(SimpleTestCase):\n \n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n+    def test_ordering_uses_nested_lookup(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n \n-    def test_ordering_pointing_to_related_model_pk(self):\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..18877c7 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1825,6 +1825,25 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n-    def test_reversed_or(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_not_in_group_by(self):\n+        # Test to ensure constant expressions are not included in GROUP BY\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        group_by_cols = expr.get_group_by_cols(alias=None)\n+        self.assertEqual(group_by_cols, [])\n+        \n+    def test_wrapped_expression_includes_inner_expression(self):\n+        # Tests when wrapping a non-constant expression\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        group_by_cols = expr.get_group_by_cols(alias=None)\n+        self.assertEqual(group_by_cols, [expr.expression])\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..27e17b7 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1200,6 +1200,21 @@ class Queries1Tests(TestCase):\n         )\n         self.assertTrue(qs.first())\n \n+    def test_filter_queryset_with_filterable_false(self):\n+        \"\"\"\n+        Test that filtering behaves correctly when a filterable=False field is involved.\n+        \"\"\"\n+        # Assuming ExtraInfo.filterable attribute can be set and has an effect.\n+        ExtraInfo.objects.filter(info='e2').update(filterable=False)\n+        # Another Author entry with the same 'extra' for a more reliable test.\n+        a5 = Author.objects.create(name='a5', num=5005, extra=self.e2)\n+\n+        # Check if filtering Authors based on ExtraInfo with a specific attribute works as expected.\n+        self.assertSequenceEqual(\n+            Author.objects.filter(extra=self.e2), \n+            [self.a3, self.a4, a5],\n+        )\n+\n     def test_excluded_intermediary_m2m_table_joined(self):\n         self.assertSequenceEqual(\n             Note.objects.filter(~Q(tag__annotation__name=F('note'))),\n",
  "django__django-13033": "",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..ed4d44e 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -618,6 +618,26 @@ class BaseCacheTests:\n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n \n+    def test_cull_handles_empty_fetch(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        old_max_entries = cull_cache._max_entries\n+        old_cull_frequency = cull_cache._cull_frequency\n+\n+        # Setting up the test environment\n+        cull_cache._max_entries = 10\n+        cull_cache._cull_frequency = 2\n+        # Assume empty cache should result in no exception\n+        try:\n+            cull_cache.clear()  # Ensure the cache is empty\n+            cull_cache._cull('default', connection.cursor(), timezone.now())\n+        finally:\n+            # Restore original values\n+            cull_cache._max_entries = old_max_entries\n+            cull_cache._cull_frequency = old_cull_frequency\n+\n     def test_zero_cull(self):\n         self._perform_cull_test('zero_cull', 50, 19)\n \n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..3e220de 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,6 +1645,61 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n+class ArticleManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().filter(archived=False)\n+\n+class Article(models.Model):\n+    title = models.CharField(max_length=100)\n+    archived = models.BooleanField(default=False, editable=False)\n+    objects = ArticleManager()\n+\n+class FavoriteArticle(models.Model):\n+    article = models.ForeignKey(Article, on_delete=models.CASCADE)\n+\n+class FavoriteArticlesForm(forms.ModelForm):\n+    class Meta:\n+        model = FavoriteArticle\n+        fields = '__all__'\n+\n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.fields['article'].queryset = Article._base_manager.all()\n+\n+class ForeignKeyValidationTests(TestCase):\n+\n+    def setUp(self):\n+        # Create an archived article\n+        self.archived_article = Article.objects.create(title='Archived Article', archived=True)\n+        # Create a non-archived article\n+        self.non_archived_article = Article.objects.create(title='Non-Archived Article', archived=False)\n+\n+    def test_foreign_key_validation_with_default_manager(self):\n+        # Form instance uses the default queryset that doesn't include archived articles\n+        class DefaultManagerForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticle\n+                fields = '__all__'\n+\n+        data = {'article': self.archived_article.pk}\n+        form = DefaultManagerForm(data)\n+        self.assertFalse(form.is_valid())\n+        self.assertEqual(form.errors, {'article': ['Select a valid choice. That choice is not one of the available choices.']})\n+\n+    def test_foreign_key_validation_with_base_manager(self):\n+        # Form instance specifically uses _base_manager\n+        data = {'article': self.archived_article.pk}\n+        form = FavoriteArticlesForm(data)\n+        self.assertTrue(form.is_valid())\n+        favorite_article = form.save()\n+        self.assertEqual(favorite_article.article, self.archived_article)\n+\n+import datetime\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from django.db import models\n+from django.test import TestCase\n+\n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..bda9809 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -866,8 +866,27 @@ class StateTests(SimpleTestCase):\n         )\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n+    def test_reference_mixed_case_app_label_with_migrations(self):\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, models.CASCADE)\n \n-    def test_real_apps(self):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n+        self.assertIn(Category, project_state.apps.get_models())\n+        self.assertIn(Content, project_state.apps.get_models())\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..99df64a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1210,13 +1210,75 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+import datetime\n+from django.db.models import F\n+from django.test import TestCase\n+from .models import Experiment\n+\n+class DurationFieldTests(TestCase):\n+    def setUp(self):\n+        self.delta = datetime.timedelta(days=1)\n+        self.exp1 = Experiment.objects.create(estimated_time=datetime.timedelta(days=5))\n+        self.exp2 = Experiment.objects.create(estimated_time=datetime.timedelta(hours=10))\n+        \n+    def test_duration_expressions_addition(self):\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + self.delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time + self.delta)\n+    \n+    def test_duration_expressions_subtraction(self):\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') - self.delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time - self.delta)\n+\n+    def test_duration_expressions_multiplication(self):\n+        multiplier = 2\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') * multiplier)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time * multiplier)\n+\n+    def test_duration_expressions_division(self):\n+        divisor = 2\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') / divisor)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time / divisor)\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+import datetime\n+from django.db.models import F\n+from django.test import TestCase\n+from .models import Experiment\n+\n+class DurationFieldTests(TestCase):\n+    def setUp(self):\n+        self.delta = datetime.timedelta(days=1)\n+        self.exp1 = Experiment.objects.create(estimated_time=datetime.timedelta(days=5))\n+        self.exp2 = Experiment.objects.create(estimated_time=datetime.timedelta(hours=10))\n+        \n+    def test_duration_expressions_addition(self):\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + self.delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time + self.delta)\n+    \n+    def test_duration_expressions_subtraction(self):\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') - self.delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time - self.delta)\n+\n+    def test_duration_expressions_multiplication(self):\n+        multiplier = 2\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') * multiplier)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time * multiplier)\n+\n+    def test_duration_expressions_division(self):\n+        divisor = 2\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') / divisor)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time / divisor)\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n         Employee.objects.update(salary=F('salary').bitxor(48))\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..595532e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1582,6 +1582,25 @@ class FTimeDeltaTests(TestCase):\n             ),\n         ).filter(difference=datetime.timedelta())\n         self.assertTrue(queryset.exists())\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Test subtraction directly using F expressions without ExpressionWrapper\n+        Experiment.objects.update(\n+            start=datetime.datetime(2023, 1, 1, 12, 0, 0),\n+            end=datetime.datetime(2023, 1, 2, 12, 0, 0)\n+        )\n+\n+        # Direct subtraction should generate a DurationField result\n+        queryset = Experiment.objects.annotate(delta=F('end') - F('start'))\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, datetime.timedelta(days=1))\n+\n+        # Mixed field types in arithmetic expressions should be automatically resolved\n+        queryset = Experiment.objects.annotate(\n+            combined_time=F('end') - F('start') + Value(datetime.timedelta(hours=5))\n+        )\n+        for obj in queryset:\n+            self.assertEqual(obj.combined_time, datetime.timedelta(days=1, hours=5))\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n     def test_datetime_subtraction(self):\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..92347a9 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,8 @@\n import operator\n \n+from django.forms import ModelForm, ModelMultipleChoiceField\n+from .models import Number, ReservedName, Publication, Article\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..5c469ef 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,10 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+import base64\n+from django.core.signing import signing\n+from django.utils.crypto import constant_time_compare\n+from django.core.exceptions import SuspiciousSession\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -323,6 +327,25 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n+    def test_legacy_decoder_with_invalid_hash(self):\n+        # Test legacy decoding with mismatched hash\n+        mismatched_hash_encoded = 'invalidhash:eydhIHRlc3Qga2V5JzonYSB0ZXN0IHZhbHVlJ30='\n+        with self.assertRaises(SuspiciousSession):\n+            self.session._legacy_decode(mismatched_hash_encoded)\n+\n+    def test_legacy_decoder_with_valid_hash(self):\n+        # Simulate a legacy-encoded string and test its decoding\n+        valid_hash_encoded = '9e353f5d150c9a1fc82d773a04f2586f04524b64:eyJhIHRlc3Qga2V5IjoiYSB0ZXN0IHZhbHVlIn0='\n+        expected_data = {'a test key': 'a test value'}\n+        self.assertEqual(self.session._legacy_decode(valid_hash_encoded), expected_data)\n+        \n     def test_decode_failure_logged_to_security(self):\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..e520292 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -2,6 +2,8 @@ import time\n \n from django.core.exceptions import ImproperlyConfigured\n from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+from .models import Account\n from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n )\n@@ -590,7 +592,29 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_templateview_with_simplelazyobject_kwarg(self):\n+        \"\"\"\n+        Test TemplateView with SimpleLazyObject as a URL kwarg to ensure it resolves correctly.\n+        \"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return super().get_context_data(offer=offer, offer_slug=offer_slug)\n+\n+        # Create a test account instance\n+        account = Account.objects.create(name='Special Offer', slug='special-offer')\n+\n+        # Use RequestFactory to simulate a request\n+        request = self.client.get('/offers/special-offer/')\n+        \n+        response = OfferView.as_view()(request, offer_slug=account.slug)\n+        \n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.context_data['offer'], account)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..38ccedf 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,8 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n+from .models import StumpJoke\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2819,7 +2821,75 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicate_options_with_Q_object(self):\n+        self.marley = Character.objects.create(username=\"Marley\", last_action=\"2000-01-01\")\n+        self.threepwood = Character.objects.create(username=\"Threepwood\", last_action=\"2000-01-02\")\n+\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..6b74b32 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, temp_storage, temp_storage_location, callable_storage\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -66,7 +66,23 @@ class GetStorageClassTests(SimpleTestCase):\n             get_storage_class('django.core.files.nonexistent_storage.NonexistentStorage')\n \n \n-class FileSystemStorageTests(unittest.TestCase):\n+class CallableStorageTests(TestCase):\n+\n+    def test_callable_storage_field_deconstruction(self):\n+        \"\"\"\n+        Verifies that the deconstruction of a FileField with callable storage\n+        returns the callable, not the evaluated storage instance.\n+        \"\"\"\n+        instance = Storage()\n+        _, _, kwargs = instance._meta.get_field('storage_callable').deconstruct()\n+        self.assertEqual(kwargs['storage'], callable_storage)\n+\n+    def test_direct_callable_storage_use(self):\n+        \"\"\"\n+        Ensures that direct use of the callable storage provides the expected storage instance.\n+        \"\"\"\n+        storage_instance = callable_storage()\n+        self.assertEqual(storage_instance.location, temp_storage_location)\n \n     def test_deconstruction(self):\n         path, args, kwargs = temp_storage.deconstruct()\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..42c7dbc 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,7 +623,21 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n-    def test_key_iexact(self):\n+    def test_key_in_jsonfield(self):\n+        # Test where the `__in` lookup should correctly filter objects based on key transform.\n+        # This addresses the issue where using `__in` on key transforms did not work as expected.\n+        tests = [\n+            ('value__key1__in', [10], [self.objs[0], self.objs[1]]),  # Assuming objs[0] and objs[1] contain key1=10\n+            ('value__key2__in', [20, 30], [self.objs[2]]),  # Assuming obj[2] contains key2=20 or key2=30\n+            ('value__nested__key3__in', ['a'], [self.objs[3]]),  # Assuming obj[3] contains nested key3='a'\n+            ('value__nested__key4__in', ['b', 'c'], [self.objs[4], self.objs[5]]),  # Assuming objs[4] and objs[5] contain nested key4='b' or 'c'\n+        ]\n+        for lookup, values, expected in tests:\n+            with self.subTest(lookup=lookup, values=values):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: values}),\n+                    expected,\n+                )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..cf378b4 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -17,6 +17,8 @@ from django.db.models.functions import (\n from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n+import pytz\n+from datetime import datetime\n from django.utils import timezone\n \n from ..models import Author, DTModel, Fan\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..41f3d4e 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -114,6 +114,56 @@ class ChoicesTests(SimpleTestCase):\n         cls.empty_choices_text = Choiceful._meta.get_field('empty_choices_text')\n         cls.with_choices = Choiceful._meta.get_field('with_choices')\n \n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+    def test_fields_from_different_concrete_models(self):\n+        \"\"\" Fields from different concrete model instances should be unequal despite having the same creation_counter. \"\"\"\n+        class AbstractBaseModel(models.Model):\n+            common_field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class FirstConcreteModel(AbstractBaseModel):\n+            pass\n+\n+        class SecondConcreteModel(AbstractBaseModel):\n+            pass\n+\n+        first_field = FirstConcreteModel._meta.get_field('common_field')\n+        second_field = SecondConcreteModel._meta.get_field('common_field')\n+\n+        self.assertNotEqual(first_field, second_field)\n+        self.assertNotEqual(hash(first_field), hash(second_field))\n+\n     def test_choices(self):\n         self.assertIsNone(self.no_choices.choices)\n         self.assertEqual(self.empty_choices.choices, ())\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..95d90f3 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,56 @@\n+\n+class LocksTestCase(unittest.TestCase):\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write(\"Just some test data\")\n+\n+        with open(file_path) as f1, open(file_path) as f2:\n+            # Acquire an exclusive lock on f1\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+\n+            # Try to acquire an exclusive lock on f2 (should fail)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+\n+            # Try to acquire a shared lock on f2 (should fail since f1 has an exclusive lock)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+\n+            # Release lock on f1\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write(\"Just some test data\")\n+\n+        with open(file_path) as f1, open(file_path) as f2:\n+            # Acquire a shared lock on f1\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+\n+            # Acquire a shared lock on f2\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+\n+            # Release locks\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_flock_exception_handling(self):\n+        \"\"\"Test the exception handling by triggering an OSError\"\"\"\n+        # Using a closed file to induce an OSError\n+        with open(tempfile.NamedTemporaryFile(delete=False).name, 'w') as f:\n+            pass\n+\n+        try:\n+            self.assertRaises(OSError, locks.lock, f, locks.LOCK_EX)\n+        finally:\n+            # No need to release lock as lock would not have succeeded\n+            pass\n+\n+    def test_invalid_fd(self):\n+        \"\"\"Test handling of invalid file descriptor to ensure OSError is raised\"\"\"\n+        fake_file = object()  # not a file object, should raise OSError\n+        self.assertRaises(OSError, locks.lock, fake_file, locks.LOCK_EX)\n+\n import errno\n import gzip\n import os\n@@ -10,6 +63,7 @@ from unittest import mock\n \n from django.core.files import File\n from django.core.files.base import ContentFile\n+from django.core.files import locks\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n from django.core.files.uploadedfile import (\n",
  "django__django-13417": "",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..3a38f62 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,10 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n-from django.test.utils import ignore_warnings\n+from .with_custom_email_field import CustomEmailField\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -37,7 +38,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..3a461d0 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -7,6 +8,7 @@ from django.db import models\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n+from django.db.models import Q, UniqueConstraint\n from django.test.utils import isolate_apps\n \n from .models import CustomUserNonUniqueUsername\n@@ -138,6 +140,24 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithUniqueConstraint')\n+    def test_skip_auth_e003_for_unique_constraint(self):\n+        \"\"\"\n+        Test that when a UniqueConstraint is used on the USERNAME_FIELD,\n+        auth.E003 check is skipped.\n+        \"\"\"\n+        class UserWithUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='unique_username_conditional', condition=Q(is_active=True))\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [], \"auth.E003 should be skipped for models with a UniqueConstraint on the USERNAME_FIELD.\")\n+\n     def test_non_clashing_custom_permissions(self):\n         class Checked(models.Model):\n             class Meta:\n@@ -194,6 +214,24 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithUniqueConstraint')\n+    def test_skip_auth_e003_for_unique_constraint(self):\n+        \"\"\"\n+        Test that when a UniqueConstraint is used on the USERNAME_FIELD,\n+        auth.E003 check is skipped.\n+        \"\"\"\n+        class UserWithUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='unique_username_conditional', condition=Q(is_active=True))\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [], \"auth.E003 should be skipped for models with a UniqueConstraint on the USERNAME_FIELD.\")\n+\n     def test_custom_permission_name_max_length(self):\n         custom_permission_name = 'some ridiculously long verbose name that is out of control' * 5\n \n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..aa636b6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -815,7 +816,34 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    from collections import namedtuple\n+    \n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_with_tuple(self):\n+        qs = Company.objects.filter(\n+            num_employees__range=(51, 100)\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_with_namedtuple_edge_case(self):\n+        BoundaryRange = namedtuple('BoundaryRange', ['min_val', 'max_val'])\n+        qs = Company.objects.filter(\n+            num_employees__range=BoundaryRange(min_val=99, max_val=99),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_with_incorrect_namedtuple(self):\n+        IncorrectRange = namedtuple('IncorrectRange', ['only_min'])\n+        with self.assertRaises(TypeError):\n+            Company.objects.filter(\n+                num_employees__range=IncorrectRange(only_min=51)\n+            )\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..dc0190c 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -10,6 +10,43 @@ import socket\n import subprocess\n import sys\n import tempfile\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_different_argv(self):\n+        \"\"\"\n+        Ensures that execute_from_command_line uses the provided argv's\n+        program name instead of the faulty sys.argv.\n+        \"\"\"\n+        args = ['check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_main_as_prog_name(self):\n+        \"\"\"\n+        Test program name when it's set as __main__.py and should default \n+        to 'python -m django'.\n+        \"\"\"\n+        args = ['makemigrations']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['__main__.py'] + args)\n+        self.assertIn('usage: python -m django makemigrations', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n import unittest\n from io import StringIO\n from unittest import mock\n@@ -28,10 +65,14 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from django.test.utils import captured_stderr, captured_stdout\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n \n+# Import os module if not already imported\n+import os\n+\n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..4c1d634 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,4 +1,6 @@\n+\n from datetime import date, datetime\n+from django.utils import dateformat\n \n from django.test import SimpleTestCase, override_settings\n from django.test.utils import TZ_SUPPORT, requires_tz_support\n@@ -146,7 +148,23 @@ class DateFormatTests(SimpleTestCase):\n         # Ticket #16924 -- We don't need timezone support to test this\n         self.assertEqual(dateformat.format(aware_dt, 'O'), '-0330')\n \n-    def test_invalid_time_format_specifiers(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (123, '23'),\n+            (456, '56'),\n+            (789, '89'),\n+            (99, '99'),  # Edge case for two-digit year\n+            (9, '09'),   # Edge case for single-digit year\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = date(1984, 8, 7)\n \n         for specifier in ['a', 'A', 'f', 'g', 'G', 'h', 'H', 'i', 'P', 'r', 's', 'u']:\n@@ -164,4 +182,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..c063d02 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,16 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_field_disabled_by_default(self):\n+        # Ensure that the ReadOnlyPasswordHashField has disabled set to True by default.\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n+    def test_readonly_field_custom_disabled(self):\n+        # Test for ReadOnlyPasswordHashField with explicitly set disabled=False\n+        field = ReadOnlyPasswordHashField(disabled=False)\n+        self.assertIs(field.disabled, False)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..629a44a 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -109,11 +109,45 @@ class OptimizerTests(SimpleTestCase):\n         )\n \n     def test_create_alter_model_options(self):\n+        self.assertOptimizesTo(\n+        )\n+        \n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'YourModel',\n+                    fields=[],\n+                    options={'unique_together': {('field1', 'field2')}},\n+                ),\n+                migrations.AlterModelOptions('YourModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('YourModel', fields=[]),\n+            ]\n+        )\n+        \n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel('Foo', fields=[]),\n                 migrations.AlterModelOptions(name='Foo', options={'verbose_name_plural': 'Foozes'}),\n             ],\n+        )\n+        \n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'YourModel',\n+                    fields=[],\n+                    options={'unique_together': {('field1', 'field2')}},\n+                ),\n+                migrations.AlterModelOptions('YourModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('YourModel', fields=[]),\n+            ]\n+        )\n+        \n+        self.assertOptimizesTo(\n             [\n                 migrations.CreateModel('Foo', fields=[], options={'verbose_name_plural': 'Foozes'}),\n             ]\n@@ -124,6 +158,23 @@ class OptimizerTests(SimpleTestCase):\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n         AlterOrderWithRespectTo, and DeleteModel should collapse into nothing.\n         \"\"\"\n+        self.assertOptimizesTo(\n+        )\n+        \n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'YourModel',\n+                    fields=[],\n+                    options={'unique_together': {('field1', 'field2')}},\n+                ),\n+                migrations.AlterModelOptions('YourModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('YourModel', fields=[]),\n+            ]\n+        )\n+        \n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel(\"Foo\", [(\"name\", models.CharField(max_length=255))]),\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..489e090 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,8 +1,11 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n+from django.utils.translation import gettext_lazy\n+from django.utils.functional import lazy\n from ..utils import setup\n \n \n@@ -46,6 +49,27 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n \n class FunctionTests(SimpleTestCase):\n \n",
  "django__django-13807": "",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..1bfc412 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,7 +1314,24 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n-class ManageRunserverMigrationWarning(TestCase):\n+class TestRunserverSkipChecksOption(TestCase):\n+    def setUp(self):\n+        self.stdout = StringIO()\n+\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_skip_checks_enabled(self, mocked_check):\n+        # Test --skip-checks enabled\n+        call_command('runserver', use_reloader=False, skip_checks=True, stdout=self.stdout)\n+        self.assertNotIn('Performing system checks...', self.stdout.getvalue())\n+        mocked_check.assert_not_called()\n+\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_skip_checks_disabled(self, mocked_check):\n+        # Test --skip-checks disabled\n+        self.stdout.truncate(0)\n+        call_command('runserver', use_reloader=False, skip_checks=False, stdout=self.stdout)\n+        self.assertIn('Performing system checks...', self.stdout.getvalue())\n+        mocked_check.assert_called()\n \n     def setUp(self):\n         self.stdout = StringIO()\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..fbfbf66 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -218,7 +219,18 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware',\n     ])\n-    def test_not_sync_or_async_middleware(self):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware',\n+    ])\n+    async def test_middleware_chain_with_non_async_capable_middleware(self):\n+        msg = (\n+            'Middleware '\n+            'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware must '\n+            'have at least one of sync_capable/async_capable set to True.'\n+        )\n+        with self.assertRaisesMessage(RuntimeError, msg):\n+            await self.async_client.get('/middleware_exceptions/view/')\n         msg = (\n             'Middleware '\n             'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware must '\n@@ -230,7 +242,23 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n-    async def test_sync_middleware_async(self):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.async_payment_middleware',\n+        'middleware_exceptions.middleware.DecoratedPaymentMiddleware',\n+    ])\n+    async def test_combination_of_sync_and_async_middlewares(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 402)\n+        self.assertIn(\n+            \"Asynchronous middleware middleware_exceptions.middleware.async_payment_middleware adapted.\",\n+            [record.getMessage() for record in cm.records],\n+        )\n+        self.assertIn(\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+            [record.getMessage() for record in cm.records],\n+        )\n         with self.assertLogs('django.request', 'DEBUG') as cm:\n             response = await self.async_client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..851a950 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -8,8 +9,7 @@ from django.db.migrations.exceptions import (\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n-\n-from .test_base import MigrationTestBase\n+from importlib import import_module\n \n \n class RecorderTests(TestCase):\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..5e0e2e1 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -11,6 +11,8 @@ from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n from django.db.utils import ConnectionHandler\n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n )\n@@ -36,7 +38,21 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_at_boundary_fail(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_check_sqlite_version_at_boundary_pass(self):\n+        # Should pass for version 3.9.0\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..341d4dd 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -401,17 +401,28 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             pass\n \n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+    \n+    def test_explicit_inherited_pk(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n \n-    def test_explicit_pk(self):\n-        class Model(models.Model):\n-            id = models.BigAutoField(primary_key=True)\n+        class Child(Parent):\n+            pass\n \n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n+    def test_explicit_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n     @isolate_apps('check_framework.apps.CheckPKConfig', kwarg_name='apps')\n     def test_app_default_auto_field(self, apps):\n         class ModelWithPkViaAppConfig(models.Model):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..3369d18 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -282,7 +282,29 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         )\n \n \n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n+from .models import ChoiceModel\n+\n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Creating test entry in ChoiceModel\n+        ChoiceModel.objects.create(pk=1, name='a')\n+\n+        # Test for invalid choice error message with the wrong value placeholder\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +329,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..76a21d4 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -549,7 +550,28 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_without_initial_pk(self):\n+        \"\"\"Test case where parent is saved after setting a non-initialized foreign key on child, which should fail.\"\"\"\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey()\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            child.parent.name = 'jeff'\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_with_initial_pk(self):\n+        \"\"\"Test case where parent is saved with initialized foreign key on child, which should succeed.\"\"\"\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='jeff')\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..51d7413 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,10 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, Employee, Foo, CustomAutoFieldModel\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n \n \n class BasicCustomPKTests(TestCase):\n@@ -220,6 +223,22 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that MyAutoField returns MyWrapper instance on object creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that MyAutoField returns MyWrapper instance on bulk object creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n     # SQLite lets objects be saved with an empty primary key, even though an\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..73e9f3b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -816,10 +816,23 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n-\n-class IterableLookupInnerExpressionsTests(TestCase):\n-    @classmethod\n-    def setUpTestData(cls):\n+    def test_q_and_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        test_cases = [\n+            (Q(), Exists(is_ceo)),\n+            (Exists(is_ceo), Q()),\n+            (Q(), Exists(is_poc)),\n+            (Exists(is_poc), Q())\n+        ]\n+        \n+        for query1, query2 in test_cases:\n+            with self.subTest(query1=query1, query2=query2):\n+                conditions = query1 & query2\n+                self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n         # MySQL requires that the values calculated for expressions don't pass\n         # outside of the field's range, so it's inconvenient to use the values\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..4dc26de 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,32 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        # Collect static files and verify no duplicate post-processed files\n+        collectstatic_args = {\n+            'link': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'ignore_patterns': [],\n+        }\n+        \n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Assert that no file is yielded multiple times\n+        post_processed_files = stats['post_processed']\n+        self.assertEqual(len(post_processed_files), len(set(post_processed_files)))\n+\n+        # Assert the expected number of files were post-processed\n+        expected_post_processed_files = {\n+            os.path.join('admin', 'css', 'base.css'),\n+            os.path.join('admin', 'css', 'dashboard.css'),\n+            # Add other expected post-processed files here\n+        }\n+        self.assertTrue(expected_post_processed_files.issubset(set(post_processed_files)))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +240,32 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        # Collect static files and verify no duplicate post-processed files\n+        collectstatic_args = {\n+            'link': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'ignore_patterns': [],\n+        }\n+        \n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Assert that no file is yielded multiple times\n+        post_processed_files = stats['post_processed']\n+        self.assertEqual(len(post_processed_files), len(set(post_processed_files)))\n+\n+        # Assert the expected number of files were post-processed\n+        expected_post_processed_files = {\n+            os.path.join('admin', 'css', 'base.css'),\n+            os.path.join('admin', 'css', 'dashboard.css'),\n+            # Add other expected post-processed files here\n+        }\n+        self.assertTrue(expected_post_processed_files.issubset(set(post_processed_files)))\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..55a5859 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -5,6 +6,7 @@ Tests for stuff in django.utils.datastructures.\n import copy\n import pickle\n \n+from collections.abc import Iterator\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n@@ -34,7 +36,31 @@ class OrderedSetTests(SimpleTestCase):\n         s.discard(2)\n         self.assertEqual(len(s), 1)\n \n-    def test_contains(self):\n+    def test_reversed(self):\n+        # Test reversing an OrderedSet with multiple elements\n+        s = OrderedSet([1, 2, 3])\n+        r = reversed(s)\n+        self.assertIsInstance(r, Iterator)\n+        self.assertEqual(list(r), [3, 2, 1])\n+\n+        # Test reversing an empty OrderedSet\n+        s_empty = OrderedSet()\n+        r_empty = reversed(s_empty)\n+        self.assertIsInstance(r_empty, Iterator)\n+        self.assertEqual(list(r_empty), [])\n+\n+        # Test reversing an OrderedSet with a single element\n+        s_single = OrderedSet([42])\n+        r_single = reversed(s_single)\n+        self.assertIsInstance(r_single, Iterator)\n+        self.assertEqual(list(r_single), [42])\n+\n+        # Test reversing an OrderedSet with duplicate elements added as input,\n+        # which should end up as unique because OrderedSet removes duplicates.\n+        s_duplicates = OrderedSet([1, 2, 2, 3, 1])\n+        r_duplicates = reversed(s_duplicates)\n+        self.assertIsInstance(r_duplicates, Iterator)\n+        self.assertEqual(list(r_duplicates), [3, 2, 1])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..a2b6da0 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -311,7 +312,18 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n-    def test_order_by_pk(self):\n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Test that Meta.ordering fields do not affect the GROUP BY clause.\n+        \"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        # Perform a values() query and count the number of articles per author.\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n         \"\"\"\n         'pk' works as an ordering option in Meta.\n         \"\"\"\n@@ -483,4 +495,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..3fa1e63 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -815,16 +815,55 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n             [self.example_inc.ceo, self.max],\n         )\n+        # Test combining Q() with Exists within a filter\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(Exists(is_poc))),\n+            [self.max]\n+        )\n         self.assertCountEqual(\n             Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n             [self.max],\n         )\n+        # Test combining Q() with Exists within a filter\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(Exists(is_poc))),\n+            [self.max]\n+        )\n         self.assertCountEqual(\n             Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n             [self.example_inc.ceo, self.max],\n         )\n \n-    def test_boolean_expression_combined_with_empty_Q(self):\n+    def test_combining_Q_with_boolean_expressions(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Testing direct deconstruction\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n+\n+        # Testing for complex combining and deconstruction\n+        tests = [\n+            (Q(Exists(is_poc)) & Q(), 'AND'),\n+            (Q() & Q(Exists(is_poc)), 'AND'),\n+            (Q(Exists(is_poc)) | Q(), 'OR'),\n+            (Q() | Q(Exists(is_poc)), 'OR'),\n+        ]\n+        for conditions, connector in tests:\n+            with self.subTest(conditions):\n+                _, args, kwargs = conditions.deconstruct()\n+                self.assertEqual(kwargs['_connector'], connector)\n+                self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n         self.gmbh.save()\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..defd1d8 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,10 +1,11 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n \n \n-@isolate_apps('model_options')\n+from django.db import models\n class TestDefaultPK(SimpleTestCase):\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.NonexistentAutoField')\n     def test_default_auto_field_setting_nonexistent(self):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..0496897 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -165,7 +165,25 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n-    @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_dotted(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n         self.assertEqual(\n@@ -175,6 +193,15 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_dotted(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n@@ -190,6 +217,15 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_dotted(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n@@ -201,6 +237,15 @@ class TestChildArguments(SimpleTestCase):\n                     [exe_path, 'runserver']\n                 )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_dotted(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..767c13d 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,7 +226,13 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n-    # Trailing newlines not accepted\n+    # Newlines, carriage returns, and tabs are not accepted at any position.\n+    (URLValidator(), 'http://www.djangoproject.com\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..042e12e 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,7 +1526,35 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.test import TestCase\n+from django.db.models import Q, Count\n+from .models import Author, Book, PropertyGroup, ManagerTicketRatingCumulativeMovingAverage\n+\n class JoinPromotionTests(TestCase):\n+    \n+    def test_q_object_or_with_id_in(self):\n+        # Ensure Q object with \"__id__in\" works as expected\n+        property_groups = PropertyGroup.objects.all()\n+        queryset = ManagerTicketRatingCumulativeMovingAverage.objects.annotate(\n+            Count(\"agent__property_groups\")\n+        )\n+        result = queryset.filter(\n+            Q(agent__property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n+            | Q(agent__property_groups__count=0)\n+        ).distinct()\n+        self.assertIsNotNone(result)\n+\n+    def test_q_object_or_without_id_in(self):\n+        # Ensure Q object with \"__in\" causes ProgrammingError as in the issue\n+        property_groups = PropertyGroup.objects.all()\n+        queryset = ManagerTicketRatingCumulativeMovingAverage.objects.annotate(\n+            Count(\"agent__property_groups\")\n+        )\n+        with self.assertRaises(ProgrammingError):\n+            queryset.filter(\n+                Q(agent__property_groups__in=property_groups)\n+                | Q(agent__property_groups__count=0)\n+            ).distinct()\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..fcd4174 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -68,6 +68,67 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_preferred_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',  # Use non-deprecated 'database'\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',  # Use non-deprecated 'password'\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_options_both_kwargs(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'fallbackoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'fallbackoptionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..aeaf7a6 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2199,6 +2199,22 @@ class SchemaTests(TransactionTestCase):\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n     @skipUnlessDBFeature('supports_expression_indexes')\n+    def test_unique_constraint_references_column(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['email'], name='email_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertIs(sql.references_column(table, 'email'), True)\n+        self.assertIs(sql.references_column(table, 'name'), False)\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n+\n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-14493": "",
  "django__django-14500": "",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..52d25ca 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,38 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+    def test_bulk_update_return_value_empty(self):\n+        # Test with an empty list, should return 0\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_return_value_non_empty(self):\n+        # Prepare a list of notes to update\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        # Update the notes\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_with_duplicates(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        # Duplicates in different batches.\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n+\n+    def test_bulk_update_with_batch_size(self):\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc='misc' + str(i))\n+            for i in range(10)\n+        ])\n+        notes = list(Note.objects.all())\n+        rows_updated = Note.objects.bulk_update(notes, ['note'], batch_size=5)\n+        self.assertEqual(rows_updated, 10)\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..4b50560 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -316,7 +316,26 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(formset.is_valid())\n         self.assertEqual([form.cleaned_data for form in formset.forms], [{'votes': 100, 'choice': 'Calexico'}, {}, {}])\n \n-    def test_formset_validate_max_flag(self):\n+    def test_formset_css_class_for_non_form_errors(self):\n+        \"\"\"\n+        Test that non_form_errors are rendered with the nonform CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',  # the number of forms rendered\n+            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'choices-MIN_NUM_FORMS': '0',  # min number of forms\n+            'choices-MAX_NUM_FORMS': '2',  # max number of forms - should be ignored\n+            'choices-0-choice': 'Pizza',\n+            'choices-0-votes': '10',\n+            'choices-1-choice': 'Pizza',  # Duplicate choice to trigger non-form error\n+            'choices-1-votes': '20',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertIn('<ul class=\"errorlist nonform\">', str(formset.non_form_errors()))\n+        self.assertIn('<li>You may only specify a drink once.</li>', str(formset.non_form_errors()))\n+        self.assertIn('</ul>', str(formset.non_form_errors()))\n         \"\"\"\n         If validate_max is set and max_num is less than TOTAL_FORMS in the\n         data, a ValidationError is raised. MAX_NUM_FORMS in the data is\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..139b2f4 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2112,7 +2112,33 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         self.assertEqual(unbound['hi_without_microsec'].value(), now_no_ms)\n         self.assertEqual(unbound['ti_without_microsec'].value(), now_no_ms)\n \n-    def test_datetime_clean_initial_callable_disabled(self):\n+    # Ensure _clean_fields() uses BoundField correctly by checking cleaned_data corresponds to bf.initial\n+    def test_bound_field_clean_initial_consistency(self):\n+        class DateTimeForm(forms.Form):\n+            dt = forms.DateTimeField(initial=lambda: datetime.datetime(2023, 10, 1, 12, 0, 0), disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned_value = form.cleaned_data['dt']\n+        bf = form['dt']\n+        self.assertEqual(cleaned_value, bf.initial)\n+\n+    def test_bound_field_changed_data_logic(self):\n+        class SimpleForm(forms.Form):\n+            name = forms.CharField(initial='InitialName')\n+        \n+        # Case 1: No data passed, initial should match and not be considered changed.\n+        form = SimpleForm({})\n+        self.assertEqual(form.changed_data, [])\n+        bf = form['name']\n+        self.assertEqual(bf.initial, 'InitialName')\n+\n+        # Case 2: Data passed matches the initial\n+        form = SimpleForm({'name': 'InitialName'})\n+        self.assertEqual(form.changed_data, [])\n+\n+        # Case 3: Data passed that differs from initial\n+        form = SimpleForm({'name': 'ChangedName'})\n+        self.assertIn('name', form.changed_data)\n         now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n \n         class DateTimeForm(forms.Form):\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..528394a 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -4,6 +4,8 @@ from operator import attrgetter\n from django.db import IntegrityError\n from django.test import TestCase\n \n+from django.db import models, transaction\n+from django.core.checks import Error\n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..9a27ccb 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -9,7 +10,9 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n+import datetime\n from django.urls import reverse, reverse_lazy\n+from .models import Question\n \n from .admin import AnswerAdmin, QuestionAdmin\n from .models import (\n@@ -281,7 +284,29 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[:PAGINATOR_SIZE]],\n             'pagination': {'more': True},\n         })\n-        # The second page of results.\n+    def test_serialize_result(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        \n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n         request = self.factory.get(self.url, {'term': '', 'page': '2', **self.opts})\n         request.user = self.superuser\n         with model_admin(Question, PKOrderingQuestionAdmin):\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..24fe361 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,8 +923,33 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n+    def test_real_apps_non_set(self):\n+        \"\"\"\n+        Test that ProjectState raises an AssertionError when real_apps is not provided as a set.\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_empty(self):\n+        \"\"\"\n+        Test that an empty real_apps argument is handled correctly.\n+        \"\"\"\n+        project_state = ProjectState(real_apps=set())\n+        self.assertEqual(project_state.real_apps, set())\n \n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_none(self):\n+        \"\"\"\n+        Test that a None real_apps argument defaults to an empty set.\n+        \"\"\"\n+        project_state = ProjectState(real_apps=None)\n+        self.assertEqual(project_state.real_apps, set())\n+\n+    def test_real_apps_valid_set(self):\n+        \"\"\"\n+        Test that a valid set as real_apps is accepted and stored correctly.\n+        \"\"\"\n+        project_state = ProjectState(real_apps={'contenttypes', 'auth'})\n+        self.assertEqual(project_state.real_apps, {'contenttypes', 'auth'})\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..743cadc 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -199,7 +199,28 @@ class MethodDecoratorTests(SimpleTestCase):\n     \"\"\"\n     Tests for method_decorator\n     \"\"\"\n-    def test_preserve_signature(self):\n+    def test_partial_function_wrapper_attributes(self):\n+        \"\"\"Ensure method_decorator preserves attributes for functools.partial objects.\"\"\"\n+        from functools import partial\n+        from django.utils.decorators import method_decorator\n+\n+        def example_decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class TestClass:\n+            @method_decorator(example_decorator)\n+            def method(self):\n+                return \"original\"\n+\n+        # Partially apply the method\n+        partial_method = partial(TestClass().method)\n+\n+        self.assertEqual(partial_method(), \"original\")\n+        self.assertEqual(partial_method.__name__, \"method\")\n+        self.assertEqual(partial_method.__module__, TestClass.method.__module__)\n         class Test:\n             @simple_dec_m\n             def say(self, arg):\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..592a6c0 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5131,6 +5131,38 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         )\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper method to test ForeignKey readonly fields for different admin sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+\n+        url = reverse(f'{admin_site}:admin_views_chapter_change', args=(quote(chapter.pk),))\n+        response = self.client.get(url)\n+\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields render as links in the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields render as links in the custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom_admin')\n \n     def test_readonly_manytomany_backwards_ref(self):\n         \"\"\"\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8bb77cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..dafeedf 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,38 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop_different_dbs(self):\n+        app_label = 'test_rename_model_with_db_table_noop_varied'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Driver', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'driver'}),\n+            migrations.CreateModel('Car', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('driver', models.ForeignKey('%s.Driver' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Driver', 'Operator')\n+\n+        # Simulate a PostgreSQL connection or use settings to set the connection to PostgreSQL\n+        with connection.settings_dict as settings, self.settings(DATABASES={'default': {'ENGINE': 'django.db.backends.postgresql'}}):\n+            with connection.schema_editor() as editor:\n+                with self.assertNumQueries(0):\n+                    operation.database_forwards(app_label, editor, project_state, new_state)\n+            with connection.schema_editor() as editor:\n+                with self.assertNumQueries(0):\n+                    operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+        # Simulate a SQLite connection or use settings to set the connection to SQLite\n+        with connection.settings_dict as settings, self.settings(DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}}):\n+            with connection.schema_editor() as editor:\n+                with self.assertNumQueries(0):\n+                    operation.database_forwards(app_label, editor, project_state, new_state)\n+            with connection.schema_editor() as editor:\n+                with self.assertNumQueries(0):\n+                    operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/admin.py b/tests/admin_changelist/admin.py\nindex 580e58f..999f93f 100644\n--- a/tests/admin_changelist/admin.py\n+++ b/tests/admin_changelist/admin.py\n@@ -1,9 +1,15 @@\n+\n from django.contrib import admin\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.core.paginator import Paginator\n \n-from .models import Band, Child, Event, Parent, Swallow\n+from .models import Band, Child, Event, Parent, Swallow, Client, ClientOffice\n+\n+class ClientAdmin(admin.ModelAdmin):\n+    search_fields = ('name', 'name2', 'contact_person', 'clientoffice__name', 'clientoffice__name2')\n+\n+site.register(Client, ClientAdmin)\n \n site = admin.AdminSite(name=\"admin\")\n \n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex b862331..0992abf 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -173,6 +173,22 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, 'test_id'), expected)\n \n+    def test_json_script_optional_id(self):\n+        # Test json_script without an ID\n+        self.assertEqual(\n+            json_script({'example': 123}),\n+            '<script type=\"application/json\">{\"example\": 123}</script>'\n+        )\n+\n+        # Test json_script with complex data without an ID\n+        complex_data = {'key': ['value1', 'value2', {'nested_key': 'nested_value'}]}\n+        expected_output = (\n+            '<script type=\"application/json\">'\n+            '{\"key\": [\"value1\", \"value2\", {\"nested_key\": \"nested_value\"}]}'\n+            '</script>'\n+        )\n+        self.assertEqual(json_script(complex_data), expected_output)\n+\n     def test_smart_urlquote(self):\n         items = (\n             ('http://\u00f6\u00e4\u00fc.com/', 'http://xn--4ca9at.com/'),\n@@ -276,4 +292,4 @@ class TestUtilsHtml(SimpleTestCase):\n         )\n         for value in tests:\n             with self.subTest(value=value):\n-                self.assertEqual(urlize(value), value)\n+                self.assertEqual(urlize(value), value)\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..2273b4f 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2827,6 +2827,29 @@ class AutodetectorTests(TestCase):\n             ('0002_custom_name_20380101_1112_squashed_0003_model', 3),\n             ('2_squashed_4', 4),\n         ]\n+\n+    def test_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        author_state = ModelState('testapp', 'Author', [])\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [author_state],\n+            [author_state, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n         for migration_name, expected_number in tests:\n             with self.subTest(migration_name=migration_name):\n                 self.assertEqual(\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..5b1f044 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,4 +1,6 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n+from django.utils.functional import empty\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n from django.contrib.messages.storage import base, default_storage\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..20af758 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -32,6 +32,8 @@ from .models import (\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n     X,\n )\n+from django.db.models import Q\n+from .models import BaseUser, Task, Annotation, Note, Tag\n \n \n class Queries1Tests(TestCase):\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..53dd2ce 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1764,6 +1764,14 @@ class ValueTests(TestCase):\n         value = Value('name')\n         path, args, kwargs = value.deconstruct()\n         self.assertEqual(path, 'django.db.models.expressions.Value')\n+\n+    def test_deconstruct_F(self):\n+        # This test verifies that F expressions deconstruct to the simplified path\n+        f_instance = F('some_field')\n+        path, args, kwargs = f_instance.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('some_field',))\n+        self.assertEqual(kwargs, {})\n         self.assertEqual(args, (value.value,))\n         self.assertEqual(kwargs, {})\n \n@@ -1771,6 +1779,14 @@ class ValueTests(TestCase):\n         value = Value('name', output_field=CharField())\n         path, args, kwargs = value.deconstruct()\n         self.assertEqual(path, 'django.db.models.expressions.Value')\n+\n+    def test_deconstruct_F(self):\n+        # This test verifies that F expressions deconstruct to the simplified path\n+        f_instance = F('some_field')\n+        path, args, kwargs = f_instance.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('some_field',))\n+        self.assertEqual(kwargs, {})\n         self.assertEqual(args, (value.value,))\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..314245f 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,37 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_optimize_foo_together_operations(self):\n+        \"\"\"\n+        Test merging redundant AlterFooTogether operations into one.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={(\"col\",)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={(\"col\",)},\n+            ),\n+        ]\n+        \n+        optimized_operations = self.optimizer.optimize(operations, \"testapp\")\n+        \n+        # Assert that only two operations remain after optimization\n+        self.assertEqual(len(optimized_operations), 2)\n+        self.assertIsInstance(optimized_operations[0], migrations.AlterUniqueTogether)\n+        self.assertIsInstance(optimized_operations[1], migrations.AlterIndexTogether)\n+        self.assertEqual(optimized_operations[0].unique_together, {(\"col\",)})\n+        self.assertEqual(optimized_operations[1].index_together, {(\"col\",)})\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..1b492de 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1842,7 +1842,45 @@ class ValueTests(TestCase):\n             (b'', BinaryField),\n             (uuid.uuid4(), UUIDField),\n         ]\n-        for value, output_field_type in value_types:\n+        from django.db.models import Value\n+        from django.core.exceptions import ValidationError\n+        import datetime\n+        import uuid\n+        from decimal import Decimal\n+\n+        def test_output_field_does_not_create_broken_validators(self):\n+            \"\"\"\n+            The output field for a given Value doesn't get cleaned & validated,\n+            however validators may still be instantiated for a given field type\n+            and this demonstrates that they don't throw an exception.\n+            \"\"\"\n+            value_types = [\n+                'str',\n+                True,\n+                42,\n+                3.14,\n+                datetime.date(2019, 5, 15),\n+                datetime.datetime(2019, 5, 15),\n+                datetime.time(3, 16),\n+                datetime.timedelta(1),\n+                Decimal('3.14'),\n+                b'',\n+                uuid.uuid4(),\n+            ]\n+            for value in value_types:\n+                with self.subTest(type=type(value)):\n+                    field = Value(value)._resolve_output_field()\n+                    field.clean(value, model_instance=None)\n+\n+        def test_charfield_init_with_none_max_length(self):\n+            \"\"\"\n+            Ensure CharField does not append MaxLengthValidator when max_length is None\n+            \"\"\"\n+            char_field = Value('test')._resolve_output_field()\n+            self.assertIsInstance(char_field, fields.CharField)\n+            self.assertEqual(char_field.max_length, None)\n+            # Ensure no MaxLengthValidator if max_length is None\n+            self.assertFalse(any(isinstance(validator, validators.MaxLengthValidator) for validator in char_field.validators))\n             with self.subTest(type=type(value)):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..aad838e 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -637,8 +637,37 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n-        # MySQL annoyingly uses the same backend, so it'll come back as one of\n-        # these two types.\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField to a model on SQLite.\n+        This verifies the fix for the issue where adding a nullable OneToOneField\n+        could result in an OperationalError on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+            \n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        \n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        \n+        columns = self.column_classes(Author)\n+        \n+        # Verify that the new column 'note_id' exists in the Author table\n+        self.assertIn('note_id', columns)\n+        \n+        # Verify that the column allows NULL values\n+        self.assertTrue(columns['note_id'][1][6])\n+        \n+        # Check the UNIQUE constraint on note_id column\n+        table_constraints = connection.introspection.get_constraints(connection.cursor(), Author._meta.db_table)\n+        self.assertTrue(any('note_id' in constraint['columns'] and constraint['unique'] for constraint in table_constraints.values()))\n+\n+        # Verifying that null values are allowed\n+        author_instance = Author.objects.create()\n+        self.assertIsNone(author_instance.note)\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n \n     def test_add_field_durationfield_with_default(self):\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..025c3f1 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -133,7 +133,53 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n \n \n-class ChoicesTests(SimpleTestCase):\n+    def test_hash_immutability_multi_assign(self):\n+        \"\"\"\n+        Test that a field's hash remains the same even when assigned to multiple\n+        model classes.\n+        \"\"\"\n+        field = models.CharField(max_length=100)\n+        field_hash = hash(field)\n+        \n+        class MyModel1(models.Model):\n+            name = field\n+        \n+        class MyModel2(models.Model):\n+            title = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_immutability_with_other_operations(self):\n+        \"\"\"\n+        Test that a field's hash stays constant even after various operations\n+        like deepcopy and pickle.\n+        \"\"\"\n+        field = models.TextField()\n+        field_hash = hash(field)\n+\n+        # Deepcopy operation\n+        field_copy = copy.deepcopy(field)\n+        self.assertEqual(field_hash, hash(field_copy))\n+\n+        # Pickle and unpickle\n+        field_pickled = pickle.dumps(field)\n+        field_unpickled = pickle.loads(field_pickled)\n+        self.assertEqual(field_hash, hash(field_unpickled))\n+\n+    def test_hash_immutability_in_dict(self):\n+        \"\"\"\n+        Test a field's hash immutability by using it as a dictionary key before\n+        and after assigning to a model.\n+        \"\"\"\n+        field = models.DateField()\n+        field_dict = {field: \"value\"}\n+        field_hash = hash(field)\n+\n+        class Event(models.Model):\n+            event_date = field\n+\n+        self.assertIn(field, field_dict)\n+        self.assertEqual(field_hash, hash(field))\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..26bffc1 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,6 +204,27 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n+from django.db.models import F\n+from tests.models import Note  # Assuming 'Note' model is defined in `tests.models`\n+\n+class BulkUpdateFExpressionTests(TestCase):\n+    def test_f_expression_character_field(self):\n+        notes = [\n+            Note.objects.create(note='test_note', misc='test_misc')\n+            for _ in range(10)\n+        ]\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n+\n+    def test_f_expression_integer_field(self):\n+        numbers = [Number.objects.create(num=0) for _ in range(10)]\n+        for number in numbers:\n+            number.num = F('num') + 1\n+        Number.objects.bulk_update(numbers, ['num'])\n+        self.assertCountEqual(Number.objects.filter(num=1), numbers)\n+\n     def test_field_references(self):\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..bca30c8 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,6 +1049,29 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n+    def test_rename_field_with_renamed_model(self):\n+        changes = self.get_changes(\n+            [ModelState('testapp', 'Author', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=200)),\n+            ])],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+\n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..bc56fb8 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,36 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+    def test_negated_empty_exists_with_nonempty_queryset(self):\n+        # Create a test instance\n+        experiment = Experiment.objects.create(name='Test Experiment')\n+        \n+        # Test filter with negated Exists on non-empty queryset\n+        qs = Experiment.objects.filter(~Exists(Experiment.objects.filter(pk=experiment.pk)), name='Test Experiment')\n+        \n+        # Since there is a matching experiment, the negated exists should exclude it\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_negated_empty_exists_with_conditional(self):\n+        # Create a test instance\n+        experiment = Experiment.objects.create(name='Test Experiment')\n+        \n+        # Test filter with negated Exists and additional condition\n+        qs = Experiment.objects.filter(~Exists(Experiment.objects.none()) & Q(name='Test Experiment'))\n+        \n+        # The query should not be empty since the condition is true\n+        self.assertSequenceEqual(qs, [experiment])\n+        \n+    def test_exists_with_nonempty_queryset(self):\n+        # Create multiple test instances\n+        experiment1 = Experiment.objects.create(name='Experiment 1')\n+        experiment2 = Experiment.objects.create(name='Experiment 2')\n+        \n+        # Test filter with Exists on a non-empty queryset\n+        qs = Experiment.objects.filter(Exists(Experiment.objects.filter(name='Experiment 1')))\n+        \n+        # Both experiments should be included since at least one matches the condition\n+        self.assertSequenceEqual(qs, [experiment1, experiment2])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..7e97671 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -141,7 +141,18 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n         self.assertIsNone(ff.empty_label)\n \n-    def test_many_to_many(self):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"main_band\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == \"main_band\":\n+                    kwargs[\"empty_label\"] = \"I WANT TO SET MY OWN EMPTY LABEL\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        admin_instance = MyModelAdmin(Event, admin.site)\n+        form_field = admin_instance.formfield_for_dbfield(Event._meta.get_field(\"main_band\"), request=None)\n+        self.assertEqual(form_field.empty_label, \"I WANT TO SET MY OWN EMPTY LABEL\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..01c2f36 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,44 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+from django.test import TestCase\n+from django.core import management\n+from .models import Author, Book\n+\n+class NaturalKeyWithFKDependencyTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        # Ensure both databases are set up with the necessary tables\n+        Author.objects.using(\"default\").bulk_create([\n+            Author(name=\"J.R.R. Tolkien\"),\n+        ])\n+        Author.objects.using(\"other\").bulk_create([\n+            Author(name=\"J.R.R. Tolkien\"),\n+        ])\n+\n+    def test_natural_key_dependency_on_default_database(self):\n+        management.call_command(\n+            \"loaddata\",\n+            \"books.json\",\n+            database=\"default\",\n+            verbosity=0,\n+        )\n+        obj = Book.objects.using(\"default\").get(title=\"The Ring\")\n+        self.assertEqual(obj.title, \"The Ring\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n+    def test_natural_key_dependency_on_other_database(self):\n+        management.call_command(\n+            \"loaddata\",\n+            \"books.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        obj = Book.objects.using(\"other\").get(title=\"The Ring\")\n+        self.assertEqual(obj.title, \"The Ring\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..652d6b9 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,6 +3961,43 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n+    def test_alter_field_choices_noop_with_different_data_types(self):\n+        # Setup the Author model table\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+\n+        # Define the original field and a field with choices\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+\n+        # Test no SQL is generated when altering the field with choices\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+\n+        # Test back to original field from choices\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_to_different_type_noop(self):\n+        # Setup the Author model table\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+\n+        # Define the original field and change to a ForeignKey\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = models.ForeignKey(Author, on_delete=models.CASCADE)\n+        new_field.set_attributes_from_name(\"name\")\n+\n+        # Test that altering a field to a different type does generate SQL\n+        with connection.schema_editor() as editor:\n+            with self.assertRaises(AssertionError):\n+                with self.assertNumQueries(0):\n+                    editor.alter_field(Author, old_field, new_field, strict=True)\n+\n     def test_add_textfield_unhashable_default(self):\n         # Create the table\n         with connection.schema_editor() as editor:\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..1ba9f47 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -324,6 +324,18 @@ class LookupTests(TestCase):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n \n+    def test_unregister_lookup_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register and check that the cache is updated\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+            # Unregister the lookup and verify the cache is cleared\n+            models.ForeignObject._unregister_lookup(Exactly)\n+            self.assertNotIn(\"exactly\", field.get_lookups())\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n \n class BilateralTransformTests(TestCase):\n     def test_bilateral_upper(self):\n",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..74822e6 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -93,6 +93,20 @@ class TemplateReloadTests(SimpleTestCase):\n             }\n         ]\n     )\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", \"/valid/path\"],  # Including both empty and valid paths\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_empty_and_valid_path(self):\n+        self.assertSetEqual(\n+            autoreload.get_template_directories(),\n+            {Path(\"/valid/path\")}\n+        )\n     def test_template_dirs_normalized_to_paths(self):\n         self.assertSetEqual(\n             autoreload.get_template_directories(),\n",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..76389ac 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -724,7 +725,32 @@ class ManagerTest(SimpleTestCase):\n \n     def test_manager_methods(self):\n         \"\"\"\n-        This test ensures that the correct set of methods from `QuerySet`\n+import inspect\n+from django.test import TestCase\n+from django.db import models\n+\n+class Article(models.Model):\n+    title = models.CharField(max_length=100)\n+    content = models.TextField()\n+\n+class ManagerMethodSignatureTests(TestCase):\n+    def test_bulk_create_signature(self):\n+        # Test the signature of 'bulk_create' method\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        actual_signature = str(inspect.signature(Article.objects.bulk_create))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_get_signature(self):\n+        # Test the signature of 'get' method\n+        expected_signature = \"(*args, **kwargs)\"\n+        actual_signature = str(inspect.signature(Article.objects.get))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_count_signature(self):\n+        # Test the signature of 'count' method\n+        expected_signature = \"()\"\n+        actual_signature = str(inspect.signature(Article.objects.count))\n+        self.assertEqual(actual_signature, expected_signature)\n         are copied onto `Manager`.\n \n         It's particularly useful to prevent accidentally leaking new methods\n",
  "django__django-15741": "",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..2dc157a 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,7 +399,40 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n+from django.test import TestCase\n+from django.db import models\n+from django.core.management import call_command\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class IssueTests(TestCase):\n+    def test_select_related_only_proxy_model(self):\n+        # Setup test data\n+        custom_obj = ProxyCustomModel.objects.create(name=\"Proxy Name\")\n+        another_obj = AnotherModel.objects.create(custom=custom_obj)\n+\n+        # Test select_related with only on proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+\n+        # Fetch the object to trigger the evaluation\n+        result = qs.get()\n+\n+        # Assert that the fetched object is the expected one\n+        self.assertEqual(result, another_obj)\n+        self.assertEqual(result.custom.name, \"Proxy Name\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..1087d86 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,48 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_with_command(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n+    def test_parameters_with_multiple_options(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-U\", \"username\", \"-h\", \"localhost\", \"-p\", \"5432\"]),\n+            ([\"psql\", \"-U\", \"username\", \"-h\", \"localhost\", \"-p\", \"5432\", \"dbname\"], None),\n+        )\n+\n+    def test_parameters_with_no_options(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_with_command(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n+    def test_parameters_with_multiple_options(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-U\", \"username\", \"-h\", \"localhost\", \"-p\", \"5432\"]),\n+            ([\"psql\", \"-U\", \"username\", \"-h\", \"localhost\", \"-p\", \"5432\", \"dbname\"], None),\n+        )\n+\n+    def test_parameters_with_no_options(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..9f6e131 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,8 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n@@ -74,7 +76,25 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n-    def test_force_grouping(self):\n+    def test_decimal_precision(self):\n+        # Verify that precision is maintained for Decimal values\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\"\n+        )\n+        # Edge cases\n+        self.assertEqual(\n+            floatformat(Decimal(\"0\"), 5),\n+            \"0.00000\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.00000000000000000001\"), 20),\n+            \"1.00000000000000000001\"\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..83940ee 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -405,6 +405,16 @@ class CaseExpressionTests(TestCase):\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n \n+    def test_annotate_with_full_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n             selected=Case(\n",
  "django__django-15987": "",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..29638e8 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,30 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..be71807 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..83ca98b 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,30 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_dry_run(self):\n+        \"\"\"\n+        makemigrations --check should exit with a non-zero status when\n+        there are changes and no --dry-run is provided, ensuring that no\n+        migrations are created.\n+        \"\"\"\n+        with self.temporary_migration_module() as migration_dir:\n+            self.assertFalse(os.path.exists(migration_dir))\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertEqual(cm.exception.code, 1)\n+            self.assertFalse(os.path.exists(migration_dir))\n+\n+    def test_makemigrations_check_and_dry_run(self):\n+        \"\"\"\n+        makemigrations --check --dry-run should not create any migration\n+        files and should exit with a non-zero status when there are changes.\n+        \"\"\"\n+        with self.temporary_migration_module() as migration_dir:\n+            self.assertFalse(os.path.exists(migration_dir))\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\", verbosity=0)\n+            self.assertEqual(cm.exception.code, 1)\n+            self.assertFalse(os.path.exists(migration_dir))\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..2e7bd16 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,10 +7,30 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n-from django.utils.asyncio import async_unsafe\n-from django.views.generic.base import View\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory, SimpleTestCase\n+import asyncio\n+from django.views import View\n+from django.http import HttpResponseNotAllowed\n+from django.test import RequestFactory\n+\n+class AsyncHttpMethodNotAllowedTest(SimpleTestCase):\n+    def test_async_http_method_not_allowed(self):\n+        factory = RequestFactory()\n+        request = factory.get('/')\n+\n+        class TestView(View):\n+            async def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        view_instance = TestView.as_view()\n+        \n+        # Simulate a GET request which should not be allowed\n+        response = view_instance(request)\n+        if asyncio.iscoroutine(response):\n+            response = asyncio.run(response)\n+        \n+        self.assertIsInstance(response, HttpResponseNotAllowed)\n \n from .models import SimpleModel\n \n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..189a4b9 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,9 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..64eac46 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,6 +1600,23 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n+    def test_zero_ip_addr(self):\n+        # Mock objects that are required by the command.\n+        with mock.patch(\"django.core.management.commands.runserver.run\") as mock_run, \\\n+             mock.patch(\"django.core.management.base.BaseCommand.check_migrations\"):\n+            output = io.StringIO()\n+            call_command(\n+                self.cmd,\n+                addrport=\"0:8000\",\n+                use_reloader=False,\n+                skip_checks=True,\n+                stdout=output,\n+            )\n+            self.assertIn(\n+                \"Starting development server at http://0.0.0.0:8000/\",\n+                output.getvalue(),\n+            )\n+\n     def test_runner_hostname(self):\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n",
  "django__django-16255": "",
  "django__django-16315": "",
  "django__django-16333": "",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..9d73170 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,7 +1,8 @@\n+\n import datetime\n \n from django.test import TestCase\n-from django.test.utils import requires_tz_support\n+from django.test.utils import override_settings, requires_tz_support\n from django.utils import timezone, translation\n from django.utils.timesince import timesince, timeuntil\n from django.utils.translation import npgettext_lazy\n@@ -175,7 +176,25 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t, self.t), \"1000\\xa0years\")\n         self.assertEqual(timeuntil(self.t, t), \"1000\\xa0years\")\n \n-    def test_depth(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        # Make sure d is timezone-aware\n+        d = timezone.make_aware(d, timezone.get_default_timezone())\n+        self.assertEqual(timesince(d, now), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_various_offsets(self):\n+        now = timezone.now()\n+        # Test several cases with different numbers of months\n+        for months in range(1, 13):\n+            d = now - datetime.timedelta(days=30 * months)\n+            d = timezone.make_aware(d, timezone.get_default_timezone())\n+            expected_result = f\"{months}\\xa0month{'s' if months > 1 else ''}\"\n+            self.assertEqual(timesince(d, now), expected_result)\n         t = (\n             self.t\n             + self.oneyear\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..9844990 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -475,6 +475,22 @@ class UtilsTests(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, msg):\n             popen_wrapper([\"a_42_command_that_doesnt_exist_42\"])\n \n+    def test_subparser_missing_required_argument(self):\n+        class CommandWithSubcommand(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command = CommandWithSubcommand()\n+        with self.assertRaises(CommandError) as cm:\n+            command.run_from_argv(['manage.py', 'command_with_subcommand', 'create'])\n+        \n+        self.assertIn(\"the following arguments are required: name\", str(cm.exception))\n+\n     def test_get_random_secret_key(self):\n         key = get_random_secret_key()\n         self.assertEqual(len(key), 50)\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..9ee3d18 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -108,6 +108,23 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n         self.assertEqual(floatformat(0, 10), \"0.0000000000\")\n+\n+    def test_floatformat_issue(self):\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+\n+    def test_floatformat_various(self):\n+        # Additional cases to verify the fix\n+        self.assertEqual(floatformat(\"0.50\", 0), \"1\")\n+        self.assertEqual(floatformat(Decimal(\"0.50\"), 0), \"1\")\n+        self.assertEqual(floatformat(\"0.49\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.49\"), 0), \"0\")\n+        self.assertEqual(floatformat(\"-0.50\", 0), \"-1\")\n+        self.assertEqual(floatformat(Decimal(\"-0.50\"), 0), \"-1\")\n+        self.assertEqual(floatformat(\"1.25\", 1), \"1.2\")\n+        self.assertEqual(floatformat(Decimal(\"1.25\"), 1), \"1.2\")\n+        self.assertEqual(floatformat(\"1.25\", 2), \"1.25\")\n+        self.assertEqual(floatformat(Decimal(\"1.25\"), 2), \"1.25\")\n         self.assertEqual(\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n",
  "django__django-16493": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..01286c0 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n+from django.contrib.auth import get_permission_codename\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..68ac871 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -217,7 +217,35 @@ class CheckConstraintTests(TestCase):\n         constraints = get_constraints(ChildModel._meta.db_table)\n         self.assertIn(\"constraints_childmodel_adult\", constraints)\n \n-    def test_validate(self):\n+    def test_custom_violation_error_code_checkconstraint(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price must be greater than discounted price\",\n+            violation_error_code=\"price_gt_discount\",\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"Price must be greater than discounted price\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"price_gt_discount\")\n+\n+    def test_custom_violation_error_code_uniqueconstraint(self):\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\"],\n+            name=\"unique_name\",\n+            violation_error_message=\"Name must be unique\",\n+            violation_error_code=\"unique_name_error\",\n+        )\n+        # Create a product with a duplicate name.\n+        Product.objects.create(name=\"duplicate\")\n+        duplicate_product = Product(name=\"duplicate\")\n+        msg = \"Name must be unique\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, duplicate_product)\n+        self.assertEqual(cm.exception.code, \"unique_name_error\")\n         check = models.Q(price__gt=models.F(\"discounted_price\"))\n         constraint = models.CheckConstraint(check=check, name=\"price\")\n         # Invalid product.\n@@ -654,7 +682,35 @@ class UniqueConstraintTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             NoCodeErrorConstraintModel(name=\"test\").validate_constraints()\n \n-    def test_validate(self):\n+    def test_custom_violation_error_code_checkconstraint(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price must be greater than discounted price\",\n+            violation_error_code=\"price_gt_discount\",\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"Price must be greater than discounted price\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"price_gt_discount\")\n+\n+    def test_custom_violation_error_code_uniqueconstraint(self):\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\"],\n+            name=\"unique_name\",\n+            violation_error_message=\"Name must be unique\",\n+            violation_error_code=\"unique_name_error\",\n+        )\n+        # Create a product with a duplicate name.\n+        Product.objects.create(name=\"duplicate\")\n+        duplicate_product = Product(name=\"duplicate\")\n+        msg = \"Name must be unique\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, duplicate_product)\n+        self.assertEqual(cm.exception.code, \"unique_name_error\")\n         constraint = UniqueConstraintProduct._meta.constraints[0]\n         msg = \"Unique constraint product with this Name and Color already exists.\"\n         non_unique_product = UniqueConstraintProduct(\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..2545ce4 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,19 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+    def test_formset_add_fields_with_none_index(self):\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(initial=None)\n+        empty_form = my_formset.empty_form\n+        self.assertNotIn(\"DELETE\", empty_form.fields)\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..2108a57 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8456,6 +8456,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            f\"{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_with_script_name_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\", SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response, \n+            f\"/prefix{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_non_staff_user_retains_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D123\",\n+            status_code=302, \n+            fetch_redirect_response=False\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8463,6 +8517,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            f\"{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_with_script_name_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\", SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response, \n+            f\"/prefix{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_non_staff_user_retains_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D123\",\n+            status_code=302, \n+            fetch_redirect_response=False\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8471,6 +8579,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            f\"{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_with_script_name_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\", SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response, \n+            f\"/prefix{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_non_staff_user_retains_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D123\",\n+            status_code=302, \n+            fetch_redirect_response=False\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n@@ -8481,6 +8643,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            f\"{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_with_script_name_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\", SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response, \n+            f\"/prefix{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_non_staff_user_retains_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D123\",\n+            status_code=302, \n+            fetch_redirect_response=False\n+        )\n+\n     @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n     def test_missing_slash_append_slash_true_force_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8489,6 +8705,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            f\"{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_with_script_name_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\", SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response, \n+            f\"/prefix{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_non_staff_user_retains_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D123\",\n+            status_code=302, \n+            fetch_redirect_response=False\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8499,6 +8769,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            f\"{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_with_script_name_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\", SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response, \n+            f\"/prefix{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_non_staff_user_retains_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D123\",\n+            status_code=302, \n+            fetch_redirect_response=False\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n@@ -8507,6 +8831,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"user@example.com\",\n             is_staff=False,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            f\"{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_with_script_name_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\", SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response, \n+            f\"/prefix{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_non_staff_user_retains_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D123\",\n+            status_code=302, \n+            fetch_redirect_response=False\n+        )\n         self.client.force_login(user)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8622,6 +9000,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            f\"{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_with_script_name_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\", SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response, \n+            f\"/prefix{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_non_staff_user_retains_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D123\",\n+            status_code=302, \n+            fetch_redirect_response=False\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8629,6 +9061,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            f\"{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_with_script_name_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\", SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response, \n+            f\"/prefix{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_non_staff_user_retains_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D123\",\n+            status_code=302, \n+            fetch_redirect_response=False\n+        )\n+\n     @override_settings(APPEND_SLASH=False)\n     def test_missing_slash_append_slash_false_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n@@ -8637,6 +9123,60 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            f\"{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_with_script_name_retains_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\", SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response, \n+            f\"/prefix{known_url}?id=123\", \n+            status_code=301, \n+            fetch_redirect_response=False\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_non_staff_user_retains_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n+        self.assertRedirects(\n+            response, \n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D123\",\n+            status_code=302, \n+            fetch_redirect_response=False\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..b74ca4d 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,17 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        # Add test cases for .tar.br and .tar.Z extensions\n+        test_tuples = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..5e19c67 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,38 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps('modeladmin')\n+    def test_lookup_allowed_foreign_primary_extended(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+        ma = WaiterAdmin(Waiter, self.site)\n+\n+        # Original test cases\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n+        # Additional test cases\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name__exact\", \"test_value\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name__iexact\", \"test_value\"), True)\n+        self.assertRaises(DisallowedModelAdminLookup, ma.lookup_allowed, \"restaurant__country\", \"1\")\n+        self.assertRaises(DisallowedModelAdminLookup, ma.lookup_allowed, \"restaurant__place__city\", \"1\")\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..15a61a2 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,40 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_ordering_in_migration(self):\n+        \"\"\"\n+        Test that imports in migrations are ordered correctly:\n+        - First `import` statements\n+        - Then `from ... import ...` statements\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield1\",\n+                        models.IntegerField(default=models.F('other_field')),\n+                    ),\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Correct order should be:\n+        # import datetime\n+        # import time\n+        # from django.db import migrations, models\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..ee26bd5 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -328,6 +328,23 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = Person\n \n+    def test_post_init_not_connected(self):\n+        # Verify that post_init signal is not connected for models without width_field and height_field\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n+\n+@skipIf(Image is None, \"Pillow is required to test ImageField\")\n+class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n+    def test_post_init_connected(self):\n+        # Verify that post_init signal is connected for models with at least one dimension field\n+        person_model_id = id(self.PersonModel)\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..350d323 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -784,6 +784,39 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n \n+    def test_readonly_field_displayed_name_in_error(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = [\"nonexistent_field\"]\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent_field', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_field_displayed_name_in_error_inline(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"unknown_field\"]\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'unknown_field', \"\n+                \"which is not a callable, an attribute of 'CityInline', or an attribute \"\n+                \"of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n     def test_readonly_method_on_model(self):\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"readonly_method_on_model\",)\n@@ -791,6 +824,39 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n \n+    def test_readonly_field_displayed_name_in_error(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = [\"nonexistent_field\"]\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent_field', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_field_displayed_name_in_error_inline(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"unknown_field\"]\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'unknown_field', \"\n+                \"which is not a callable, an attribute of 'CityInline', or an attribute \"\n+                \"of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n     def test_nonexistent_field(self):\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"title\", \"nonexistent\")\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..6d74f53 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -19,7 +20,24 @@ class XorLookupsTests(TestCase):\n             self.numbers[:3] + self.numbers[8:],\n         )\n \n-    def test_filter_negated(self):\n+    def test_parity_behavior(self):\n+        # Test cases should reflect that an odd number of True conditions results in True outcome.\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5)),\n+            self.numbers[1:3] + self.numbers[5:],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7)),\n+            self.numbers[1:3] + self.numbers[5:7],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7) ^ Q(num__gte=9)),\n+            self.numbers[1:3] + self.numbers[5:7] + self.numbers[9:],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(~Q(num__lt=1) ^ ~Q(num__lt=3) ^ ~Q(num__lt=5)),\n+            self.numbers[3:5],\n+        )\n         self.assertCountEqual(\n             Number.objects.filter(Q(num__lte=7) ^ ~Q(num__lt=3)),\n             self.numbers[:3] + self.numbers[8:],\n@@ -64,4 +82,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..26b938d 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -243,7 +243,28 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(value.null, new_value.null)\n         self.assertEqual(value.unique, new_value.unique)\n \n-    def test_serialize_numbers(self):\n+    def test_serialize_nested_class_method_field_default(self):\n+        \"\"\"\n+        Test if the serialization of a nested class method used as a Field default\n+        is correctly handled.\n+        \"\"\"\n+        class TestModel(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.BASIC]\n+\n+            capabilities = models.JSONField(default=Capability.default)\n+\n+        field = TestModel._meta.get_field('capabilities')\n+        serialized_field = MigrationWriter.serialize(field)[0]\n+        self.assertIn(\n+            \"default=migrations.test_writer.WriterTests.test_serialize_nested_class_method_field_default.<locals>.TestModel.Capability.default\",\n+            serialized_field\n+        )\n         self.assertSerializedEqual(1)\n         self.assertSerializedEqual(1.2)\n         self.assertTrue(math.isinf(self.serialize_round_trip(float(\"inf\"))))\n@@ -1032,4 +1053,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..8160936 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,6 +641,21 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n+    def test_makemigrations_allow_migrate_consistency(self):\n+        \"\"\"\n+        Test that makemigrations correctly calls router.allow_migrate() \n+        with the app's own models and not all models in the project.\n+        \"\"\"\n+        with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+            with mock.patch.object(TestRouter, 'allow_migrate', return_value=True) as allow_migrate:\n+                call_command('makemigrations', 'migrations', verbosity=0)\n+                # Ensure allow_migrate is not called with unrelated app/models\n+                for mock_call in allow_migrate.mock_calls:\n+                    _, call_args, call_kwargs = mock_call\n+                    connection_alias, app_name = call_args\n+                    self.assertIn(app_name, ['migrations', 'migrations2'])  # Should only be called with valid app names\n+                    apps.get_app_config(app_name).get_model(call_kwargs['model_name'])\n+\n     def test_failing_migration(self):\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..5271acd 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -290,6 +290,12 @@ class PaginationTests(SimpleTestCase):\n \n     def test_get_page_empty_object_list_and_allow_empty_first_page_false(self):\n         \"\"\"\n+from django.test import TestCase\n+from django.core.paginator import Paginator, EmptyPage\n+from datetime import datetime\n+from .models import Article\n+\n+...\n         Paginator.get_page() raises EmptyPage if allow_empty_first_page=False\n         and object_list is empty.\n         \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..f2f83f3 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,36 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_large_data():\n+    data = np.random.uniform(0, 1, 1000)\n+    _, bins, _ = plt.hist(data, bins=50, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_non_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_partial_overlap():\n+    data = np.random.uniform(-0.5, 1.5, 1000)\n+    _, bins, _ = plt.hist(data, bins=50, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_no_overlap():\n+    data = np.random.normal(0, 1, 1000)\n+    _, bins, _ = plt.hist(data, bins=50, range=(10, 20), density=True)\n+    assert bins[0] == 10\n+    assert bins[-1] == 20\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6396,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..fef37bc 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -939,7 +939,28 @@ def test_inverted_limits():\n     plt.close()\n \n \n-@image_comparison(baseline_images=['nonfinite_limits'])\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+def test_invert_log_yaxis_limits():\n+    # Create a plot with a logarithmic y-axis\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    \n+    # Invert the y-axis by setting the limits\n+    ax.set_ylim(1000, 1)\n+    \n+    # Check if the inversion has taken effect\n+    assert ax.get_ylim() == (1000, 1), \"YAxis should be inverted with log scale\"\n+    \n+    # Test plotting to ensure the inversion is correct\n+    y = np.linspace(1, 1000, 100)\n+    x = np.linspace(1, 10, 100)\n+    ax.plot(x, y)\n+    \n+    # Ensure that the limits remain correct after plotting\n+    assert ax.get_ylim() == (1000, 1), \"YAxis inversion should persist after plotting\"\n+    plt.close(fig)\n def test_nonfinite_limits():\n     x = np.arange(0., np.e, 0.01)\n     # silence divide by zero warning from log(0)\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..88e5723 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,6 +6961,37 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear_issue(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    x = np.arange(0.0, 2 * np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure - should re-produce the same plot after clearing\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Make assertions about the shared axis tick labels\n+    for col in range(2):\n+        for row in range(2):\n+            ax_test = axs_test[row, col]\n+            ax_ref = axs_ref[row, col]\n+            assert ax_test.get_xticklabels() == ax_ref.get_xticklabels()\n+            assert ax_test.get_yticklabels() == ax_ref.get_yticklabels()\n+            # Ensure no extra ticks are present\n+            assert ax_test.xaxis.get_ticklocs().all() == ax_ref.xaxis.get_ticklocs().all()\n+            assert ax_test.yaxis.get_ticklocs().all() == ax_ref.yaxis.get_ticklocs().all()\n+\n+\n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..e6193a7 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -306,9 +306,28 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert x_units is ax.xaxis.units\n         assert y_units is ax.yaxis.units\n \n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted when\n+    empty data is passed to an axis with category units.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with plt.rc_context({'error': 'raise'}):\n+        ax.plot([], [])\n \n-def test_hist():\n+def test_no_error_on_empty_data_conversion():\n+    \"\"\"\n+    Test to check that converting empty data does not raise an error.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    # Test direct conversion\n+    converted = ax.xaxis.convert_units([])\n+    assert len(converted) == 0\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..2a971ac 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -927,12 +927,76 @@ def test_negative_boundarynorm():\n     norm = BoundaryNorm(clevs, cmap.N)\n     cb = fig.colorbar(cm.ScalarMappable(cmap=cmap, norm=norm), cax=ax)\n     np.testing.assert_allclose(cb.ax.get_ylim(), [clevs[0], clevs[-1]])\n+\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, expected_segments\", [\n+    ('both', 1, [\n+        np.array([[0., 0.], [0., 1.]]),\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]])\n+    ]),\n+    ('min', 0, [\n+        np.array([[0., 0.], [0., 1.]]),\n+        np.array([[1., 0.], [1., 1.]])\n+    ]),\n+    ('max', 0, [\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]])\n+    ]),\n+    ('neither', -1, [\n+        np.array([[1., 0.], [1., 1.]])\n+    ])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, expected_segments):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = mpl.colorbar.ColorbarBase(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+\n+    assert np.all(np.equal(cbar.dividers.get_segments(), expected_segments))\n     np.testing.assert_allclose(cb.ax.get_yticks(), clevs)\n \n     clevs = np.arange(85, 94)\n     norm = BoundaryNorm(clevs, cmap.N)\n     cb = fig.colorbar(cm.ScalarMappable(cmap=cmap, norm=norm), cax=ax)\n     np.testing.assert_allclose(cb.ax.get_ylim(), [clevs[0], clevs[-1]])\n+\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, expected_segments\", [\n+    ('both', 1, [\n+        np.array([[0., 0.], [0., 1.]]),\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]])\n+    ]),\n+    ('min', 0, [\n+        np.array([[0., 0.], [0., 1.]]),\n+        np.array([[1., 0.], [1., 1.]])\n+    ]),\n+    ('max', 0, [\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]])\n+    ]),\n+    ('neither', -1, [\n+        np.array([[1., 0.], [1., 1.]])\n+    ])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, expected_segments):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = mpl.colorbar.ColorbarBase(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+\n+    assert np.all(np.equal(cbar.dividers.get_segments(), expected_segments))\n     np.testing.assert_allclose(cb.ax.get_yticks(), clevs)\n \n     clevs = np.arange(-3, 3)\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..d19d071 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,30 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n+def test_get_backend_rc_context_figure_preservation():\n+    \"\"\"Test that figures created in an rc_context are preserved after get_backend().\"\"\"\n+    # Create a figure within rc_context\n+    with rc_context():\n+        fig1 = plt.figure()\n+    # Check that Gcf has the figure\n+    assert len(plt._pylab_helpers.Gcf.figs) == 1\n+\n+    # Call get_backend and verify the figure is still there\n+    get_backend()\n+    assert len(plt._pylab_helpers.Gcf.figs) == 1\n+\n+    # Clean up\n+    plt.close(fig1)\n+\n+def test_no_backend_reset_rccontext():\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..cfce313 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -14,6 +14,7 @@ from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n import numpy as np\n \n \n@@ -21,6 +22,14 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible_false(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(projection='3d')\n+    ax2 = fig_ref.add_subplot(projection='3d')\n+    ax1.scatter(1, 1, 1)\n+    ax1.set_visible(False)\n+    ax2.scatter(1, 1, 1)  # No changes, reference should have it visible\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23412": "",
  "matplotlib__matplotlib-24026": "",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..c13f0aa 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,26 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_colormap_no_deprecation_warnings(dtype):\n+    cm = plt.get_cmap(\"viridis\")\n+    # These indices are based on the issue provided with conversions that might cause deprecation warnings.\n+    with pytest.warns(None) as record:\n+        cm(dtype(-1))  # Test negative index\n+        cm(dtype(257)) # Test index greater than 256 for uint8\n+        cm(dtype(256)) # Test upper boundary condition\n+        cm(dtype(0))   # Test lower boundary condition\n+\n+    # Ensure no deprecation warnings were raised\n+    for warning in record:\n+        assert not issubclass(warning.category, DeprecationWarning)\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..1f87800 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -581,6 +581,34 @@ class TestSpectral:\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n+    def test_psd_window_flattop(self):\n+        if self.NFFT_density is None:\n+            return\n+        import numpy as np\n+        import matplotlib.mlab as mlab\n+        from scipy import signal\n+        from numpy.testing import assert_allclose\n+\n+        # Generate a flattop window\n+        window = signal.windows.flattop(self.NFFT_density_real)\n+\n+        # Prepare dummy data input\n+        ydata = np.random.randn(1024)\n+\n+        # Perform spectral analysis using mlab.psd\n+        spec, freqs = mlab.psd(x=ydata,\n+                               NFFT=self.NFFT_density,\n+                               Fs=self.Fs,\n+                               noverlap=0,\n+                               window=window,\n+                               sides=self.sides)\n+\n+        # Compute window power correction factor\n+        correction_factor = (window.sum() ** 2) / (window**2).sum()\n+\n+        # Verify that the correction factor brings the results in line with expectations\n+        assert_allclose(spec * window.sum() ** 2, spec * self.Fs * (window**2).sum(), atol=1e-08)\n+\n     def test_psd_window_hanning(self):\n         if self.NFFT_density is None:\n             return\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..e1a1498 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,33 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+    \n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+    \n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..9888bc6 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,10 +90,30 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n-\n-@mpl.style.context(\"default\")\n-@check_figures_equal(extensions=[\"png\"])\n-def test_complete(fig_test, fig_ref):\n+def test_pickle_draggable_legend():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    import pickletools\n+    \n+    fig, ax = plt.subplots()\n+    \n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    \n+    ax.plot(time, speed, label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+    \n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Ensure the FigureCanvasAgg object is not in the pickle\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Try loading the pickled figure\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw()\n+    plt.close(loaded_fig)\n     _generate_complete_test_figure(fig_ref)\n     # plotting is done, now test its pickle-ability\n     pkl = BytesIO()\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..4e55749 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,32 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pickle\n+from io import BytesIO\n \n-@mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    # Setup plot according to issue description\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Test the specific issue with align_labels\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+        assert pickle_data is not None, \"Pickle should not return None\"\n+    except Exception as e:\n+        assert False, f\"Pickle raised an exception: {e}\"\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..f63d586 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -999,6 +999,45 @@ def test_hexbin_log_clim():\n     assert h.get_clim() == (2, 100)\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+\n def test_inverted_limits():\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..748c092 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,48 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    # Create a contour plot and get its paths\n+    z1 = np.array([[0, 1], [1, 2]])\n+    z2 = np.array([[1, 0], [2, 1]])\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    cs_test = ax_test.contour(z1)\n+    cs_ref = ax_ref.contour(z2)\n+\n+    # Set paths from the reference contour set to the test contour set\n+    cs_test.set_paths(cs_ref.get_paths())\n+    \n+    # This ensures both contour sets appear identical\n+    assert cs_test.get_paths() == cs_ref.get_paths()\n+\n+@check_figures_equal(extensions=['png'])\n+def test_set_paths_effect_on_drawing(fig_test, fig_ref):\n+    x, y = np.meshgrid(np.arange(0, 3), np.arange(0, 3))\n+    z = np.array([[0, 1, 1], [1, 2, 1], [1, 1, 0]])\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    cs_test = ax_test.contour(x, y, z)\n+    cs_ref = ax_ref.contour(x, y, z)\n+    \n+    # Transform the paths in cs_ref to ensure they are not the same initially.\n+    paths = cs_ref.get_paths()\n+    transformed_paths = [path.transformed(plt.gca().transAxes) for path in paths]\n+    cs_ref.set_paths(transformed_paths)\n+\n+    # Set paths of cs_test to match cs_ref's transformed paths\n+    cs_test.set_paths(cs_ref.get_paths())\n+    \n+    # This test ensures both visuals are identical after setting the new paths\n+    assert cs_test.get_paths() == cs_ref.get_paths()\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..25bf83b 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,18 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_none_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(None, __name__)\n+\n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..5904a41 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,7 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),  # Test for issue: UnicodeError with empty label\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..0be1248 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,26 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+import numpy as np\n+import pytest\n+import xarray as xr\n+from xarray import Variable\n+\n+def test_setitem_custom_object_with_values():\n+    class HasValues:\n+        def __init__(self, value):\n+            self.values = value\n+\n+    # Create a DataArray with dtype=object\n+    data_array = xr.DataArray([None], dims=[\"dim_0\"], dtype=object)\n+\n+    # Assign an instance of HasValues to the DataArray\n+    obj = HasValues(value=5)\n+    data_array.loc[{'dim_0': 0}] = obj\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    # Assert that the object is stored correctly without coercing values\n+    assert isinstance(data_array.values[0], HasValues)\n+    assert data_array.values[0].values == 5\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..7dd4c97 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2107,7 +2107,18 @@ class TestDataset:\n \n         assert_identical(ds.coords['a'], expected_orig)\n \n-    def test_copy_with_data_errors(self):\n+    def test_copy_unicode_index(self):\n+        # Test to check if unicode indices are preserved with copy(deep=True)\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+        \n+        copied_ds = ds.copy(deep=True)\n+        \n+        # Check that the dtype of the IndexVariable for x is still <U3\n+        assert ds.coords['x'].dtype.kind == copied_ds.coords['x'].dtype.kind\n+        assert ds.coords['x'].dtype.str == copied_ds.coords['x'].dtype.str\n         orig = create_test_data()\n         new_var1 = np.arange(orig['var1'].size).reshape(orig['var1'].shape)\n         with raises_regex(ValueError, 'Data must be dict-like'):\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..9308dd0 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,6 +574,25 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n+    def test_combine_leaving_bystander_dimensions(self):\n+        # Check non-monotonic bystander dimension coord doesn't raise\n+        # ValueError on combine (https://github.com/pydata/xarray/issues/3150)\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n     def test_infer_order_from_coords(self):\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..ac6e02c 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,6 +2310,22 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n+    def test_quantile_keep_attrs(self):\n+        # Test with a single quantile value\n+        da = DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        out = da.quantile(0.9, dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}\n+        \n+        # Test with multiple quantile values\n+        da = DataArray([0, 0, 0], dims=\"x\", attrs={'description': 'testing'})\n+        out = da.quantile([0.1, 0.9], dim='x', keep_attrs=True)\n+        assert out.attrs == {'description': 'testing'}\n+        \n+        # Test without keep_attrs (default behavior)\n+        da = DataArray([1, 2, 3], dims=\"x\", attrs={'units': 'meters'})\n+        out = da.quantile(0.5, dim='x')\n+        assert out.attrs == OrderedDict()\n+\n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..f20c3e2 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,15 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Check if the merge of a Dataset and DataArray works as expected\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(actual, expected)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..bd3e6ba 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -604,6 +604,29 @@ def test_min_count_dataset(func):\n     assert_allclose(actual, expected)\n \n \n+import pytest\n+import numpy as np\n+from xarray import DataArray\n+from xarray.tests.test_duck_array_ops import assert_allclose, construct_dataarray, series_reduce, assert_dask_array, has_dask\n+\n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n+@pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_multidim(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+    min_count = 2\n+\n+    # New test for multiple dimensions\n+    actual = getattr(da, func)(dim=[\"x\", \"y\"], skipna=True, min_count=min_count)\n+    # Calculate expected by manually reducing dimensions one by one\n+    intermediate = getattr(da, func)(\"x\", skipna=True, min_count=min_count)\n+    expected = getattr(intermediate, func)(\"y\", skipna=True, min_count=min_count)\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n+\n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..7b95e1b 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,32 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy_complex(self):\n+        ds1 = xr.Dataset(attrs={\"a\": 5, \"b\": 10})\n+        ds2 = xr.Dataset(attrs={\"a\": 15, \"b\": 20})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"a\"] = 25\n+        assert ds1.attrs == {\"a\": 5, \"b\": 10}\n+        assert ds2.attrs == {\"a\": 15, \"b\": 20}\n+        assert ds3.attrs == {\"a\": 25, \"b\": 10}\n+\n+    def test_merge_attrs_override_with_missing_attrs(self):\n+        ds1 = xr.Dataset(attrs={\"a\": 1})\n+        ds2 = xr.Dataset()\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"a\"] = 10\n+        assert ds1.attrs == {\"a\": 1}\n+        assert ds2.attrs == {}\n+        assert ds3.attrs == {\"a\": 10}\n+\n+    def test_merge_attrs_override_no_attrs(self):\n+        ds1 = xr.Dataset()\n+        ds2 = xr.Dataset()\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"new_attr\"] = \"new_value\"\n+        assert ds1.attrs == {}\n+        assert ds2.attrs == {}\n+        assert ds3.attrs == {\"new_attr\": \"new_value\"}\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..6054c23 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,33 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    # Test whether attributes are preserved when using `xr.where` with keep_attrs=True\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test when keep_attrs=False, attributes should not be preserved\n+    actual_no_attrs = xr.where(cond, x, y, keep_attrs=False)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\", attrs={})\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n+    # Test when attributes are present on y and keep_attrs=True\n+    actual_y_attrs = xr.where(cond, x, y, keep_attrs=True)\n+    expected_y_attrs = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected_y_attrs, actual_y_attrs)\n+\n+    # Test dtype preservation\n+    data = xr.DataArray(np.ones([10,10], dtype=np.int8))\n+    data.attrs[\"attr_1\"] = \"test1\"\n+    data.attrs[\"attr_2\"] = \"test2\"\n+    result = xr.where(data == 1, 5, 0, keep_attrs=True)\n+    assert result.dtype == np.int8\n+    assert result.attrs == data.attrs\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..57ac0bd 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -6,6 +6,31 @@ import pytest\n \n import xarray as xr\n from xarray.coding import variables\n+import numpy as np\n+\n+def test_decode_signed_byte_with_pydap():\n+    signed_dtype = np.dtype(\"i1\")\n+    unsigned_dtype = np.dtype(\"u1\")\n+    original_values_signed = np.array([-128, -1, 0, 1, 127], dtype=signed_dtype)\n+    encoded_signed = xr.Variable(\n+        (\"x\",), original_values_signed.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded_signed = coder.decode(encoded_signed)\n+    assert decoded_signed.dtype == signed_dtype\n+    assert (decoded_signed.values == original_values_signed).all()\n+\n+def test_decode_unsigned_byte_with_pydap():\n+    unsigned_dtype = np.dtype(\"u1\")\n+    signed_dtype = np.dtype(\"i1\")\n+    original_values_unsigned = np.array([0, 1, 2, 255], dtype=unsigned_dtype)\n+    encoded_unsigned = xr.Variable(\n+        (\"x\",), original_values_unsigned.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded_unsigned = coder.decode(encoded_unsigned)\n+    assert decoded_unsigned.dtype == unsigned_dtype\n+    assert (decoded_unsigned.values == original_values_unsigned).all()\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..0e57159 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1928,6 +1928,25 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+def test_where_scalar_keep_attrs() -> None:\n+    # Test where with scalar values and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")  # Scalars have no attrs, expect empty\n+    assert_identical(expected, actual)\n+\n+    # Test with scalar `y` and `keep_attrs=True`\n+    y = xr.DataArray(0, attrs={\"attr\": \"y_attr\"})\n+    actual = xr.where(cond, 1, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"y_attr\"})\n+    assert_identical(expected, actual)\n+\n+    # Test with scalar `x` and `keep_attrs=True`\n+    x = xr.DataArray(1, attrs={\"attr\": \"x_attr\"})\n+    actual = xr.where(cond, x, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"x_attr\"})\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..5a80e5a 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,6 +221,23 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # regression test for the reported issue\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = xr.open_dataset(url, engine=\"zarr\", chunks={})\n+\n+        with pytest.raises(KeyError, match=r\"URL not found.*\"):\n+            # Ensure that accessing chunks does not load data into memory\n+            # ds.chunks should only inspect the `encoding` attribute\n+            ds.chunks\n+\n+        # Accessing chunks of dataset should not raise if chunks are already set\n+        ds = ds.chunk({\"time\": 1})\n+        assert ds.chunks\n+\n+        with pytest.raises(UnexpectedDataAccess):\n+            ds.load()\n+\n     def test_repr(self) -> None:\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..be895b4 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -27,6 +27,22 @@ pytestmark = [\n \n class TestDataArrayRolling:\n     @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    def test_rolling_iter_with_center(self, da, center) -> None:\n+        size = 3\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        expected_means = da.rolling(time=size, center=center).mean().values\n+        \n+        for i, (label, window_da) in enumerate(rolling_obj):\n+            actual = window_da.mean(\"time\").values\n+            expected = expected_means[i]\n+            \n+            if np.isnan(expected):\n+                assert np.isnan(actual)\n+            else:\n+                np.testing.assert_allclose(actual, expected, rtol=1e-5)\n     def test_rolling_iter(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         rolling_obj_mean = rolling_obj.mean()\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..80d29a5 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -493,12 +493,30 @@ def test_get_map_data() -> None:\n             sim.append_stream(source_fname, stream)\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from some_package import similar  # Assuming similar is imported from the correct package\n+\n+def test_set_duplicate_lines_to_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=0\", \"file1.py\", \"file2.py\"])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n \n-    assert len(expected_linelists) == len(data)\n+def test_set_duplicate_lines_to_non_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=5\", \"file1.py\", \"file2.py\"])\n+    assert ex.value.code == 0\n+    # Here we expect some output or no output based on actual duplicate code detection.\n+    # Since no duplicate lines are expected, add the respective check:\n+    assert \"No duplicate code found\" in output.getvalue() or output.getvalue() == \"\"\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..0e8fa14 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,14 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint import Run\n+from pytest import CaptureFixture\n+import pytest\n+from tests.fixtures import EMPTY_MODULE\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex d5ccd91..f1ebccb 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -864,9 +864,39 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         assert module_stats[\"statement\"] == linter2.stats.statement\n \n \n-def test_import_sibling_module_from_namespace(initialized_linter: PyLinter) -> None:\n-    \"\"\"If the parent directory above `namespace` is on sys.path, ensure that\n-    modules under `namespace` can import each other without raising `import-error`.\"\"\"\n+from pylint.lint import Run\n+import os\n+from os.path import join, abspath\n+\n+@pytest.mark.parametrize(\n+    \"ignore_parameter,ignore_pattern\",\n+    [\n+        (\"--ignore\", \".hidden\"),\n+        (\"--ignore-paths\", \".*\\.hidden\"),\n+        (\"--ignore-patterns\", \"\\.hidden\"),\n+    ],\n+)\n+def test_ignore_hidden_files_recursive(ignore_parameter, ignore_pattern):\n+    run = Run(\n+        [\n+            \"--recursive=y\",\n+            ignore_parameter,\n+            ignore_pattern,\n+            join(HERE, \"regrtest_data\"),\n+        ],\n+        exit=False,\n+    )\n+\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([join(HERE, \"regrtest_data\")]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n+\n+    hidden_file = abspath(join(HERE, \"regrtest_data\", \".hidden\", \"failing.py\"))\n+    assert hidden_file not in linted_file_paths\n+\n+    non_hidden_file = abspath(join(HERE, \"regrtest_data\", \"subdirectory\", \"module.py\"))\n+    assert non_hidden_file in linted_file_paths\n     linter = initialized_linter\n     with tempdir() as tmpdir:\n         create_files([\"namespace/submodule1.py\", \"namespace/submodule2.py\"])\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..1f2a059 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1329,6 +1329,26 @@ class TestRunTC:\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n                 )\n+    \n+    def test_ignore_paths_with_recursive(self) -> None:\n+        \"\"\"Test that --recursive=y respects ignore-paths directive.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Assuming \"ignored_subdirectory\" exists in \"directory\" and is meant to be ignored\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n \n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..65afda9 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,9 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+from _pytest.logging import caplog_records_key\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -172,7 +175,48 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n-def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n+def test_clear_and_get_records_integrity(caplog):\n+    \"\"\"Test to verify caplog object integrity and behavior after clearing.\"\"\"\n+\n+    # Step 1: Verify initial state\n+    assert not caplog.records\n+    assert not caplog.get_records(\"call\")\n+    \n+    # Step 2: Log during the call stage\n+    logging.info(\"call_stage_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"call_stage_log\"]\n+\n+    # Step 3: Clear the caplog\n+    caplog.clear()\n+\n+    # Step 4: Verify that records are cleared\n+    assert not caplog.get_records(\"call\")\n+\n+    # Step 5: Log again and verify\n+    logging.info(\"new_call_stage_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"new_call_stage_log\"]\n+\n+def test_clear_does_not_affect_setup_or_teardown(caplog, logging_during_setup_and_teardown):\n+    \"\"\"Test to ensure clear only affects 'call' stage logs.\"\"\"\n+\n+    # Step 1: Verify the initial setup logs\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+\n+    # Step 2: Log in call stage and verify\n+    logging.info(\"call_stage_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"call_stage_log\"]\n+\n+    # Step 3: Clear the caplog and verify\n+    caplog.clear()\n+    assert not caplog.get_records(\"call\")\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+\n+    # Step 4: Ensure new logs in call stage are captured\n+    logging.info(\"new_call_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"new_call_log\"]\n+\n+    # Step 5: Ensure setup logs are unaffected\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n     pytester.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..1e8a9bd 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1274,6 +1274,36 @@ def test_pdb_teardown_skipped(\n     assert tracked == []\n \n \n+def test_teardown_not_called_for_skipped_classes(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"Test that setUp and tearDown are not called for skipped unittest classes when using --pdb.\"\"\"\n+    tracked: List[str] = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        @unittest.skip(\"skip class\")\n+        class SkippedTestCase(unittest.TestCase):\n+        \n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+            \n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+            \n+            def test_method(self):\n+                pass\n+        \"\"\"\n+    )\n+    \n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n+\n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n \n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..951ce1b 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,9 +1051,13 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+    def test_capfd_sys_stdout_mode_and_write_bytes(self, capfd):\n+        import sys\n+        assert \"b\" not in sys.stdout.mode\n \n-@contextlib.contextmanager\n-def saved_fd(fd):\n+        captured = capfd.readouterr()\n+        with pytest.raises(TypeError):\n+            sys.stdout.write(b\"this should fail\")\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..189c776 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -100,8 +100,25 @@ class TestCollector:\n         result = testdir.runpytest()\n         result.stdout.fnmatch_lines([\"collected 0 items\", \"*no tests ran in*\"])\n \n+import numpy as np\n+from unittest.mock import patch\n \n class TestCollectFS:\n+    def test_patch_with_numpy_array(self, testdir):\n+        \"\"\"Test patching a target with a numpy array to check for ValueError.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+\n+            class Test:\n+                @patch(target='dummy.FOO', new=np.array([-5.5, 3.0]))\n+                def test_with_numpy(self):\n+                    pass\n+            \"\"\"\n+        )\n+        result = testdir.runpytest()\n+        result.assert_outcomes(passed=1)\n     def test_ignored_certain_directories(self, testdir):\n         tmpdir = testdir.tmpdir\n         tmpdir.ensure(\"build\", \"test_notfound.py\")\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..8385be0 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -119,8 +119,18 @@ class TestPaste(object):\n \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n-\n-    def test_create_new_paste(self, pastebin, mocked_urlopen):\n+    \n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        # Test to check if the lexer is set to \"text\"\n+        result = pastebin.create_new_paste(b\"example-paste-content\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=example-paste-content\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n@@ -130,4 +140,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..b2e581e 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,44 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+        \n+    def test_parametrize_square_bracket_issue(self, testdir):\n+        p = testdir.makepyfile(\n+            '''\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(arg0):\n+                assert arg0 == \".[\"\n+\n+            @pytest.mark.parametrize(\"arg0\", [\"..[\"])\n+            def testmethod_three(arg0):\n+                assert arg0 == \"..[\"\n+            '''\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 2\n+        assert items[0].name == 'testmethod_two[.[]'\n+        assert items[1].name == 'testmethod_three[..[]'\n+\n+        # Let's ensure getmodpath returns the correct paths including parameterized parts\n+        assert items[0].getmodpath() == 'testmethod_two[.[]'\n+        assert items[1].getmodpath() == 'testmethod_three[..[]'\n+        \n+        # Additional parameterized test case to ensure no replacement happens incorrectly\n+        p2 = testdir.makepyfile(\n+            '''\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\"[\"])\n+            def test_single_bracket(arg0):\n+                assert arg0 == \"[\"\n+            '''\n+        )\n+        items2, reprec2 = testdir.inline_genitems(p2)\n+        assert len(items2) == 1\n+        assert items2[0].name == 'test_single_bracket[[]'\n+        assert items2[0].getmodpath() == 'test_single_bracket[[]'\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..4912bfb 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,26 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue related to BytesWarning when using --setup-show with bytes parameter\n+    import sys\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\n+        \"*SETUP    F data?Hello World*\",\n+        \"*TEARDOWN F data?Hello World*\"\n+    ])\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..084e4c2 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -397,6 +398,33 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(\n+        self, testdir: Testdir\n+    ) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_dynamic_xfail_no_run(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..d89bdaa 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,6 +513,11 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n \n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..96bb874 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -49,6 +50,23 @@ def test_change_level_undo(testdir):\n     result.stdout.fnmatch_lines([\"*log from test1*\", \"*2 failed in *\"])\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n+def test_handler_level_restoration(testdir):\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(42)\n+            assert caplog.handler.level == 42\n+\n+        def test2(caplog):\n+            # Ensure handler level is restored to 0 (NOTSET)\n+            assert caplog.handler.level == 0\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n \n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..cf78b1a 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1178,7 +1179,33 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n-def test_collectignore_via_conftest(testdir):\n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_symlink_dir_nested(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory inside another directory is collected.\"\"\"\n+    parent_dir = pytester.mkdir(\"parent_dir\")\n+    dir = parent_dir.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it_nested(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_nested\").symlink_to(parent_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_symlink_dir_with_conftest(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory with a conftest file is collected and conftest is applied.\"\"\"\n+    dir = pytester.mkdir(\"dir_with_conftest\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    dir.joinpath(\"conftest.py\").write_text('def pytest_configure(config): config.test_configure = True', 'utf-8')\n+    pytester.path.joinpath(\"symlink_dir_with_conftest\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+    # Verify that the conftest configuration was applied\n+    assert hasattr(result.getfirstnode().config, \"test_configure\")\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n     tests.ensure(\"conftest.py\").write(\"collect_ignore = ['ignore_me']\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..8e9f315 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,30 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_setUpClass_fixture_privacy(pytester: Pytester) -> None:\n+    test_module = pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n \n-def test_setup_class(pytester: Pytester) -> None:\n+        class TestExample(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+\n+            def test_sample(self):\n+                pass\n+        \"\"\"\n+    )\n+\n+    # Run pytest with the --fixtures option and check that _unittest_setUpClass_fixture is not listed\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"unittest_setUpClass_fixture_TestExample\")\n+\n+    # Run with verbosity to check that the fixture appears\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\"*unittest_setUpClass_fixture_TestExample*\")\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..8ab9241 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,35 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    from sklearn.linear_model import RidgeClassifierCV\n+    import numpy as np\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # with len(y.shape) == 2\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..b240d90 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -183,8 +183,19 @@ def test_int_overflow_mutual_info_score():\n \n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n-\n-def test_entropy():\n+import numpy as np\n+from sklearn.metrics import fowlkes_mallows_score\n+from sklearn.utils.testing import assert_all_finite\n+\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Test overflow in fowlkes_mallows_score\n+    x = np.array([1] * (2**16) + [2] * (2**15) + [3] * (2**14))\n+    y = np.array([1] * (2**15) + [2] * (2**16) + [3] * (2**14))\n+    \n+    score = fowlkes_mallows_score(x, y)\n+    assert_all_finite(score)\n+    assert score >= 0.0\n+    assert score <= 1.0\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..a8c2cbe 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,26 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+def test_countvectorizer_custom_vocabulary_get_feature_names():\n+    # Define a custom vocabulary\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    \n+    # Initialize CountVectorizer with the custom vocabulary\n+    vectorizer = CountVectorizer(vocabulary=vocabulary)\n+    \n+    # Ensure that get_feature_names works without fitting and does not raise NotFittedError\n+    feature_names = vectorizer.get_feature_names()\n+    assert_array_equal(feature_names, vocabulary)\n+    \n+    # Ensure vocabulary_ is set after calling transform\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    vectorizer.transform(corpus)\n+    assert_true(hasattr(vectorizer, \"vocabulary_\"))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..e173b35 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1156,10 +1156,21 @@ def test_search_cv_timing():\n     X = [[1, ], [2, ], [3, ], [4, ]]\n     y = [0, 1, 1, 0]\n \n-    gs = GridSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0)\n+    gs = GridSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, refit=True)\n     rs = RandomizedSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, n_iter=2)\n \n     for search in (gs, rs):\n+        start_time = time.time()\n+        search.fit(X, y)\n+        end_time = time.time()\n+        # Check if there is a refit_time_ attribute and that it's a float\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        # Check that refit_time_ is non-negative\n+        assert_greater_equal(search.refit_time_, 0)\n+        # Check that refit_time_ does not exceed the total fit time\n+        total_time = end_time - start_time\n+        assert_greater_equal(total_time, search.refit_time_)\n         search.fit(X, y)\n         for key in ['mean_fit_time', 'std_fit_time']:\n             # NOTE The precision of time.time in windows is not high\n@@ -1173,7 +1184,40 @@ def test_search_cv_timing():\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n \n-def test_grid_search_correct_score_results():\n+def test_refit_time_with_grid_search():\n+    X, y = load_iris(return_X_y=True)\n+    param_grid = {'n_estimators': [2, 3, 4, 5]}\n+    clf = RandomForestClassifier()\n+\n+    search = GridSearchCV(clf, param_grid, refit=True)\n+    start_time = time.time()\n+    search.fit(X, y)\n+    end_time = time.time()\n+    \n+    # Validate refit_time_\n+    assert_true(hasattr(search, \"refit_time_\"))\n+    assert_true(isinstance(search.refit_time_, float))\n+    assert_greater_equal(search.refit_time_, 0)\n+    total_time = end_time - start_time\n+    assert_greater_equal(total_time, search.refit_time_)\n+\n+\n+def test_refit_time_with_randomized_search():\n+    X, y = load_iris(return_X_y=True)\n+    param_distributions = {'n_estimators': [2, 3, 4, 5]}\n+    clf = RandomForestClassifier()\n+\n+    search = RandomizedSearchCV(clf, param_distributions, n_iter=2, refit=True)\n+    start_time = time.time()\n+    search.fit(X, y)\n+    end_time = time.time()\n+    \n+    # Validate refit_time_\n+    assert_true(hasattr(search, \"refit_time_\"))\n+    assert_true(isinstance(search.refit_time_, float))\n+    assert_greater_equal(search.refit_time_, 0)\n+    total_time = end_time - start_time\n+    assert_greater_equal(total_time, search.refit_time_)\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..57371c0 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -491,8 +491,37 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.utils._testing import assert_array_almost_equal\n+import pytest\n \n-def test_multinomial_logistic_regression_string_inputs():\n+def test_logistic_cv_multinomial_score():\n+    # Test that LogisticRegressionCV uses the correct score when using multinomial scoring\n+    from sklearn.datasets import make_classification\n+    from sklearn.linear_model import LogisticRegression\n+    from sklearn.linear_model.logistic import _log_reg_scoring_path\n+    \n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3, n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    params = lr.get_params()\n+    \n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    \n+    lr.fit(X[train], y[train])\n+    \n+    scorers = [\n+        'accuracy',\n+        'neg_log_loss'\n+    ]\n+    \n+    for scoring in scorers:\n+        scorer = get_scorer(scoring)\n+        score_path = _log_reg_scoring_path(X, y, train, test, Cs=[1.], scoring=scorer, **params)[2][0]\n+        score_direct = scorer(lr, X[test], y[test])\n+        \n+        assert_array_almost_equal(score_path, score_direct)\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..9165d53 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,7 +154,39 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n-def test_clone_sparse_matrices():\n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.utils.estimator_checks import check_estimator\n+\n+class MyEstimator:\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+\n+    def get_params(self, deep=True):\n+        return {\"empty\": self.empty}\n+\n+    def set_params(self, **params):\n+        self.empty = params.get(\"empty\", self.empty)\n+        return self\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances.\n+    # Specifically, store an estimator class as a parameter.\n+    clf = MyEstimator(empty=StandardScaler)\n+    clf2 = clone(clf)\n+\n+    # Verify that the class stored is the same class after cloning\n+    assert clf.empty is clf2.empty\n+    assert isinstance(clf2.empty(), StandardScaler)\n+\n+def test_clone_estimator_with_instance():\n+    # Check that clone works for parameters that are estimator instances.\n+    clf_instance = MyEstimator(empty=StandardScaler())\n+    clf_instance_cloned = clone(clf_instance)\n+\n+    # Verify that the cloned object has the same type and parameters\n+    assert isinstance(clf_instance_cloned.empty, StandardScaler)\n+    assert clf_instance_cloned.empty.get_params() == clf_instance.empty.get_params()\n     sparse_matrix_classes = [\n         getattr(sp, name)\n         for name in dir(sp) if name.endswith('_matrix')]\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..5c31cf2 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -18,12 +18,40 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n+import pytest\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n \n-# TODO: use another dataset that has multiple drops\n+@pytest.mark.parametrize('copy_X', [True, False])\n+def test_lasso_lars_copyX_behaviour(copy_X):\n+    \"\"\"\n+    Test that user input regarding copy_X is not being overridden (it was until\n+    at least version 0.21)\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    lasso_lars.fit(X, y)\n+    assert copy_X == np.array_equal(X, X_copy)\n+\n+\n+@pytest.mark.parametrize('copy_X', [True, False])\n+def test_lasso_lars_fit_copyX_behaviour(copy_X):\n+    \"\"\"\n+    Test that user input to .fit for copy_X overrides default __init__ value\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    lasso_lars.fit(X, y, copy_X=copy_X)\n+    assert copy_X == np.array_equal(X, X_copy)\n \n \n def test_simple():\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..df718e3 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -494,14 +494,30 @@ def test_shuffle_stratifiedkfold():\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n-    # The digits samples are dependent: they are apparently grouped by authors\n-    # although we don't have any information on the groups segment locations\n-    # for this data. We can highlight this fact by computing k-fold cross-\n-    # validation with and without shuffling: we observe that the shuffling case\n-    # wrongly makes the IID assumption and is therefore too optimistic: it\n-    # estimates a much higher accuracy (around 0.93) than that the non\n-    # shuffling variant (around 0.81).\n+def test_stratified_kfold_shuffle_behavior():\n+    # Ensure StratifiedKFold correctly shuffles samples within each class\n+    X = np.arange(20)\n+    y = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n+\n+    # Test shuffle=True with different random states\n+    skf_1 = StratifiedKFold(n_splits=10, shuffle=True, random_state=1)\n+    skf_2 = StratifiedKFold(n_splits=10, shuffle=True, random_state=2)\n+\n+    splits_1 = [test_idx for _, test_idx in skf_1.split(X, y)]\n+    splits_2 = [test_idx for _, test_idx in skf_2.split(X, y)]\n+\n+    # Shuffle with different random states should yield different splits\n+    assert splits_1 != splits_2, \"Splits should differ with different random states\"\n+\n+    # Test shuffle=False, should always yield the same split\n+    skf_no_shuffle_1 = StratifiedKFold(n_splits=10, shuffle=False)\n+    skf_no_shuffle_2 = StratifiedKFold(n_splits=10, shuffle=False)\n+\n+    no_shuffle_splits_1 = [test_idx for _, test_idx in skf_no_shuffle_1.split(X, y)]\n+    no_shuffle_splits_2 = [test_idx for _, test_idx in skf_no_shuffle_2.split(X, y)]\n+\n+    # No shuffle should result in identical splits\n+    assert no_shuffle_splits_1 == no_shuffle_splits_2, \"No shuffle splits should be identical\"\n \n     X, y = digits.data[:600], digits.target[:600]\n     model = SVC(C=10, gamma=0.005)\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..c5bff48 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,7 +598,17 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n-def test_gaussian_mixture_fit():\n+import numpy as np\n+from sklearn.mixture import GaussianMixture\n+from numpy.testing import assert_array_equal\n+\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..b0f970a 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,8 +1057,28 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n-\n-def test_make_pipeline_memory():\n+def test_pipeline_len():\n+    from sklearn import svm\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SelectKBest, f_regression\n+    from sklearn.pipeline import Pipeline\n+\n+    # generate some data to play with\n+    X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = svm.SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    \n+    # Test that the length of the pipeline is correct\n+    assert len(pipe) == 2\n+\n+    # Test with a different number of steps\n+    pipe_single = Pipeline([('svc', clf)])\n+    assert len(pipe_single) == 1\n+\n+    pipe_empty = Pipeline([])\n+    assert len(pipe_empty) == 0\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1090,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..a91f874 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,6 +396,35 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+def test_export_text_single_feature():\n+    # Test export_text for a tree with a single feature.\n+    X_single = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_mo = [-1, -1, -1, 1, 1, 1]\n+    \n+    reg = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    reg.fit(X_single, y_mo)\n+\n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 0.00\n+    |   |--- class: -1\n+    |--- sepal_length >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    assert export_text(reg, feature_names=['sepal_length']) == expected_report\n+\n+    reg = DecisionTreeRegressor(max_depth=2, random_state=0)\n+    reg.fit(X_single, y_mo)\n+\n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 0.0\n+    |   |--- value: -1.0\n+    |--- sepal_length >  0.0\n+    |   |--- value: 1.0\n+    \"\"\").lstrip()\n+\n+    assert export_text(reg, feature_names=['sepal_length'], decimals=1) == expected_report\n+\n \n def test_plot_tree_entropy(pyplot):\n     # mostly smoke tests\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..99cbb82 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,6 +1532,35 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_additional(penalty, multi_class):\n+    # Additional test for LogisticRegressionCV when refit is False\n+    n_samples = 1000\n+    n_features = 3\n+    X = np.random.normal(size=(n_samples, n_features))\n+    beta = np.random.normal(size=n_features)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(\n+        penalty=penalty, solver='saga', Cs=3, tol=1e-2, refit=False,\n+        l1_ratios=l1_ratios, multi_class=multi_class, random_state=0\n+    )\n+    lrcv.fit(X, y)\n+    assert lrcv.C_.shape == (1,)\n+    if penalty == 'elasticnet':\n+        assert hasattr(lrcv, 'l1_ratio_')\n+        assert lrcv.l1_ratio_.shape == (1,)\n+    else:\n+        assert not hasattr(lrcv, 'l1_ratio_')\n+\n+\n @pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..727c3cb 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -23,6 +23,17 @@ def test_get_deps_info():\n     assert 'Cython' in deps_info\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n+    assert 'joblib' in deps_info  # New assertion for joblib\n+    deps_info = _get_deps_info()\n+\n+    assert 'pip' in deps_info\n+    assert 'setuptools' in deps_info\n+    assert 'sklearn' in deps_info\n+    assert 'numpy' in deps_info\n+    assert 'scipy' in deps_info\n+    assert 'Cython' in deps_info\n+    assert 'pandas' in deps_info\n+    assert 'matplotlib' in deps_info\n \n \n def test_show_versions_with_blas(capsys):\n@@ -30,4 +41,10 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n+    assert 'joblib' in out  # New assertion for joblib\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'python' in out\n+    assert 'numpy' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..45e9d78 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -101,6 +101,24 @@ def test_extract_xi():\n                    xi=0.4).fit(X)\n     assert_array_equal(clust.labels_, expected_labels)\n \n+    # Test float min_samples and ensure it converts correctly to an integer\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+    # Test edge case where min_samples is set to a float slightly greater than 0\n+    clust = OPTICS(min_samples=0.01, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+    # Test min_samples with a float value exactly equal to 1, should default to max(2, n_samples)\n+    clust = OPTICS(min_samples=1.0, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n     X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]] * 2), C6))\n     expected_labels = np.r_[[1] * 5, [3] * 5, [2] * 5, [0] * 5, [2] * 5,\n                             -1, -1, [4] * 5]\n@@ -112,6 +130,24 @@ def test_extract_xi():\n     # this may fail if the predecessor correction is not at work!\n     assert_array_equal(clust.labels_, expected_labels)\n \n+    # Test float min_samples and ensure it converts correctly to an integer\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+    # Test edge case where min_samples is set to a float slightly greater than 0\n+    clust = OPTICS(min_samples=0.01, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+    # Test min_samples with a float value exactly equal to 1, should default to max(2, n_samples)\n+    clust = OPTICS(min_samples=1.0, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n     C1 = [[0, 0], [0, 0.1], [0, -.1], [0.1, 0]]\n     C2 = [[10, 10], [10, 9], [10, 11], [9, 10]]\n     C3 = [[100, 100], [100, 90], [100, 110], [90, 100]]\n@@ -124,6 +160,24 @@ def test_extract_xi():\n                    xi=0.04).fit(X)\n     assert_array_equal(clust.labels_, expected_labels)\n \n+    # Test float min_samples and ensure it converts correctly to an integer\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+    # Test edge case where min_samples is set to a float slightly greater than 0\n+    clust = OPTICS(min_samples=0.01, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+    # Test min_samples with a float value exactly equal to 1, should default to max(2, n_samples)\n+    clust = OPTICS(min_samples=1.0, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n \n def test_cluster_hierarchy_():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..4c04e63 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,40 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents_precomposed_vs_decomposed():\n+    from sklearn.feature_extraction.text import strip_accents_unicode\n+\n+    # original single code point character\n+    s1 = chr(241)  # \u00f1\n+    # decomposed form with separate combining character\n+    s2 = chr(110) + chr(771)  # n\u0303\n+\n+    # both should be stripped to the same result\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n+\n+    # testing additional cases\n+    # already decomposed, combining diaeresis\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # various combining marks\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n \n-def test_to_ascii():\n+    # more composed vs decomposed examples\n+    a_composed = \"\\u00C5\"  # \u00c5\n+    a_decomposed = \"A\\u030A\"  # A\u030a\n+    expected = \"A\"\n+    assert strip_accents_unicode(a_composed) == expected\n+    assert strip_accents_unicode(a_decomposed) == expected\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..aecb684 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1523,8 +1523,56 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     X_imputed = imputer.transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n \n+import pytest\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+from sklearn.experimental import enable_iterative_imputer  # noqa\n+from sklearn.impute import IterativeImputer\n \n-@pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n+def test_iterative_imputer_constant_fill_value():\n+    \"\"\"Check that we propagate properly the parameter `fill_value`.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+\n+    fill_value = 100\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [fill_value, fill_value, fill_value, fill_value])\n+\n+def test_iterative_imputer_np_nan_fill_value():\n+    \"\"\"Check that fill_value=np.nan works when initial_strategy='constant'.\"\"\"\n+    X = np.array([[-1.0, 2.0, 3.0, -1.0], [4.0, -1.0, 5.0, -1.0], [6.0, 7.0, -1.0, -1.0], [8.0, 9.0, 0.0, -1.0]])\n+    \n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_transformed = imputer.fit_transform(X)\n+    assert np.all(np.isnan(imputer.initial_imputer_.statistics_))\n+\n+    # Check if transformed values are np.nan where originally missing\n+    assert np.all(np.isnan(X_transformed[:, [0, 3]]))\n+\n+def test_iterative_imputer_different_fill_values():\n+    \"\"\"Check different fill_values for different data types.\"\"\"\n+    X = np.array([['?', 'b', 'c'], ['a', '?', 'c'], ['a', 'b', '?']], dtype=object)\n+    \n+    fill_value = 'missing'\n+    imputer = IterativeImputer(\n+        missing_values='?',\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_transformed = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [fill_value, fill_value, fill_value])\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..d204353 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n+import pytest\n+import pandas as pd\n+import numpy as np\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..5f3c5b6 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,28 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    from sklearn.cluster import KMeans\n+    import numpy as np\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert np.array_equal(result_1, result_2)\n+\n+    inertia_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).inertia_\n+    assert np.isclose(inertia_1, inertia_2), f\"Inertia mismatch: {inertia_1} vs {inertia_2}\"\n+\n+    # Test with more jobs\n+    result_3 = KMeans(n_clusters=3, random_state=0, n_jobs=-1).fit(X).labels_\n+    assert np.array_equal(result_1, result_3)\n+\n+    inertia_3 = KMeans(n_clusters=3, random_state=0, n_jobs=-1).fit(X).inertia_\n+    assert np.isclose(inertia_1, inertia_3), f\"Inertia mismatch: {inertia_1} vs {inertia_3}\"\n+\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..e5592f5 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1054,6 +1054,16 @@ def test_autodoc_typehints_description_with_documented_init(app):\n             '      Return type:\\n'\n             '         None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_no_return_type_for_class(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.sample_package.Square\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert 'Return type:' not in context\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..6b09204 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,41 @@\n+\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n+\n+def test_Catalog_duplicated_message():\n+    catalog = Catalog()\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 2))\n+    catalog.add('hello', MsgOrigin('/path/to/yetanother', 1))\n+    catalog.add('world', MsgOrigin('/path/to/filename', 1))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'hello'\n+    assert msg1.locations == [('/path/to/filename', 1),\n+                              ('/path/to/filename', 2),\n+                              ('/path/to/yetanother', 1)]\n+    assert msg2.text == 'world'\n+    assert msg2.locations == [('/path/to/filename', 1)]\n+\n+def test_Catalog_no_duplicates():\n+    catalog = Catalog()\n+    catalog.add('foo', MsgOrigin('/path/to/file', 3))\n+    catalog.add('foo', MsgOrigin('/path/to/file', 3))\n+    catalog.add('foo', MsgOrigin('/path/to/file', 4))\n+    catalog.add('bar', MsgOrigin('/path/to/another', 1))\n+    catalog.add('bar', MsgOrigin('/path/to/another', 1))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'foo'\n+    assert msg1.locations == [('/path/to/file', 3),\n+                              ('/path/to/file', 4)]\n+    assert msg2.text == 'bar'\n+    assert msg2.locations == [('/path/to/another', 1)]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..4e8074e 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -140,7 +140,29 @@ def test_glossary(app):\n     assert_node(doctree[0][0][2][1],\n                 [nodes.definition, nodes.paragraph, \"description\"])\n \n-    # index\n+    # Case sensitivity in glossary terms\n+    case_sensitive_text = (\".. glossary::\\n\"\n+                           \"\\n\"\n+                           \"   MySQL\\n\"\n+                           \"       A popular open-source database management system.\\n\"\n+                           \"\\n\"\n+                           \"   mysql\\n\"\n+                           \"       Refers to the command-line client for MySQL.\\n\")\n+\n+    # Test that terms with differing cases are treated as separate entries\n+    case_sensitive_doctree = restructuredtext.parse(app, case_sensitive_text)\n+    assert_node(case_sensitive_doctree, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                      index)],\n+                                                              definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                      index)],\n+                                                              definition)])],\n+    ))\n+    \n+    case_sensitive_objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in case_sensitive_objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in case_sensitive_objects\n     objects = list(app.env.get_domain(\"std\").get_objects())\n     assert (\"term1\", \"term1\", \"term\", \"index\", \"term-term1\", -1) in objects\n     assert (\"term2\", \"term2\", \"term\", \"index\", \"term-term2\", -1) in objects\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..e111e2e 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,23 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_from_str_positional_only_with_defaults():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+    assert list(sig.parameters.keys()) == ['a', 'b']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n+    assert sig.parameters['b'].default == Parameter.empty\n+\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..0fcd586 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -13,6 +14,7 @@ import sys\n from importlib import import_module\n \n import pytest\n+from typing import TypeVar\n \n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n \n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..b7ce874 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -14,6 +15,7 @@ from collections import namedtuple\n from unittest import TestCase, mock\n \n from sphinx.application import Sphinx\n+from sphinx.testing.util import simple_decorator\n from sphinx.ext.napoleon import _process_docstring, _skip_member, Config, setup\n \n \n@@ -164,11 +166,33 @@ class SkipMemberTest(TestCase):\n         self.assertSkip('class', '__special_doc__',\n                         SampleClass.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n+                        \n+    def test_class_decorated_init_doc(self):\n+        class DecoratedInitClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"DecoratedInitClass.__init__.DOCSTRING\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        DecoratedInitClass.__init__, False,\n+                        'napoleon_include_init_with_doc')\n \n     def test_class_special_undoc(self):\n         self.assertSkip('class', '__special_undoc__',\n                         SampleClass.__special_undoc__, True,\n                         'napoleon_include_special_with_doc')\n+                        \n+    def test_class_decorated_init_doc(self):\n+        class DecoratedInitClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"DecoratedInitClass.__init__.DOCSTRING\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        DecoratedInitClass.__init__, False,\n+                        'napoleon_include_init_with_doc')\n \n     def test_exception_private_doc(self):\n         self.assertSkip('exception', '_private_doc',\n@@ -184,6 +208,17 @@ class SkipMemberTest(TestCase):\n         self.assertSkip('exception', '__special_doc__',\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n+                        \n+    def test_class_decorated_init_doc(self):\n+        class DecoratedInitClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"DecoratedInitClass.__init__.DOCSTRING\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        DecoratedInitClass.__init__, False,\n+                        'napoleon_include_init_with_doc')\n \n     def test_exception_special_undoc(self):\n         self.assertSkip('exception', '__special_undoc__',\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..1fd567f 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,36 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # Check if there's a broken local link issue in the output\n+    assert \"doesntexist\" in content\n+    assert \"[broken] doesntexist\" in content\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links_json(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.json').exists()\n+    content = (app.outdir / 'output.json').read_text()\n+    print(content)\n+\n+    rows = [json.loads(x) for x in content.splitlines()]\n+    rowsby = {row[\"uri\"]: row for row in rows}\n+\n+    # Check for broken local link in JSON output\n+    assert \"doesntexist\" in rowsby\n+    assert rowsby['doesntexist']['status'] == 'broken'\n+    assert rowsby['doesntexist']['info'] == \"\"\n+\n+import os\n+\n import json\n import re\n from unittest import mock\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..b29dac4 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,27 @@ from test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": \"_private_func1,_another_private_func\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_func1(name)',\n+        '   :module: target.private',\n+        '',\n+        '   private_func1 is a docstring.',\n+        '',\n+        '',\n+        '.. py:function:: _another_private_func(name)',\n+        '   :module: target.private',\n+        '',\n+        '   another_private_func is a docstring.',\n+        '',\n+    ]\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..6d31a9f 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,35 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+from babel.messages import pofile\n+from sphinx import locale\n+from babel.messages.catalog import Catalog\n+import pytest\n \n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_locale_override(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # Clear translators cache\n+        locale.translators.clear()\n+\n+        # Prepare message catalog (.po) for the test\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        \n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..8ceb685 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,36 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_with_aliases(app: SphinxTestApp):\n+    (app.srcdir / 'annotations.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    context = (app.outdir / 'annotations.txt').read_text()\n+    expected = (\n+        \"types.sphinx_doc(data)\\n\"\n+        \"\\n\"\n+        \"   Does it work.\\n\"\n+        \"\\n\"\n+        \"   Parameters:\\n\"\n+        \"      * **data** (*types.JSONObject*) --\\n\"\n+        \"         Does it args.\\n\"\n+        \"\\n\"\n+        \"   Returns:\\n\"\n+        \"      Does it work in return.\\n\"\n+        \"\\n\"\n+        \"   Return type:\\n\"\n+        \"      types.JSONObject\\n\"\n+    )\n+    assert expected in context\n+\n+from sphinx.testing.util import SphinxTestApp\n+import sys\n+import pytest\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..962457f 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,6 +372,86 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import pytest\n+import json\n+from http.server import BaseHTTPRequestHandler\n+from sphinx.testing.fixtures import app\n+from sphinx.util import requests\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+    assert content == {\n+        \"code\": 0,\n+        \"status\": \"working\",\n+        \"filename\": \"index.rst\",\n+        \"lineno\": 1,\n+        \"uri\": \"http://localhost:7777/\",\n+        \"info\": \"\",\n+    }\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_redirect_followed_by_successful_GET(app):\n+    class RedirectToResourceHandler(BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302)\n+            self.send_header('Location', '/final')\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            if self.path == '/final':\n+                self.send_response(200, \"OK\")\n+                self.end_headers()\n+                self.wfile.write(b'Final resource content.\\n')\n+            else:\n+                self.send_response(302)\n+                self.send_header('Location', '/final')\n+                self.end_headers()\n+\n+    with http_server(RedirectToResourceHandler):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+    assert content == {\n+        \"code\": 0,\n+        \"status\": \"working\",\n+        \"filename\": \"index.rst\",\n+        \"lineno\": 1,\n+        \"uri\": \"http://localhost:7777/\",\n+        \"info\": \"\",\n+    }\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_no_redirect_with_GET(app):\n+    class NoRedirectHandler(BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"Direct access without redirect.\\n\")\n+\n+    with http_server(NoRedirectHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n@@ -381,4 +461,4 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..0fc1706 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,8 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..06488b7 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,6 +515,16 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n+    \n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Test if the Enum is described correctly\n+    description = inspect.object_description(MyEnum.ValueA)\n+    assert description == \"MyEnum.ValueA\"\n \n def test_getslots():\n     class Foo:\n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..4b52e78 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -17,8 +17,45 @@ from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n \n+import sys\n warnfile = StringIO()\n \n+def test_exits_when_existing_confpy(monkeypatch):\n+    # Mock path.isfile to return True, simulating the presence of a conf.py\n+    def mock_isfile(path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Mock input to simulate pressing Enter when prompted\n+    qs.term_input = lambda _: ''\n+    \n+    d = {}\n+    \n+    # Check if SystemExit is raised, which means the script attempts to exit\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n+\n+def test_does_not_exit_when_no_confpy(monkeypatch):\n+    # Mock path.isfile to return False, simulating the absence of a conf.py\n+    def mock_isfile(path):\n+        return False\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Mock input to simulate providing input for other questions\n+    inputs = iter(['project_name', 'author', '0.1', ''])\n+\n+    qs.term_input = lambda _: next(inputs)\n+\n+    d = {}\n+\n+    # Check that SystemExit is not raised, indicating normal processing\n+    try:\n+        qs.ask_user(d)\n+    except SystemExit:\n+        pytest.fail(\"ask_user raised SystemExit unexpectedly!\")\n+\n \n def setup_module():\n     nocolor()\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..9dd0900 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,40 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_type_annotation_cross_reference(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"   :module: example\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: y\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"   :module: example\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: width\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: height\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\")\n+\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Test that Point is correctly cross-referenced in the 'start' attribute\n+    assert_node(doctree[1][1][1][0][1][1], pending_xref, **{\"py:class\": \"Point\"})\n+  \n+    # Test that Point is correctly cross-referenced in the 'end' property\n+    assert_node(doctree[1][1][5][0][1][1], pending_xref, **{\"py:class\": \"Point\"})\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..34d28b0 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -755,8 +755,9 @@ def test_pymethod_options(app):\n     assert domain.objects['Class.meth4'] == ('index', 'Class.meth4', 'method', False)\n \n     # :property:\n+    # The index entry should not contain parentheses for a property\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..e6c2e5c 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -751,8 +751,19 @@ def test_issue_2790():\n     assert lambdify((x, (y, (w, z))), w + x + y + z)(1, (2, (3, 4))) == 10\n     assert lambdify(x, x + 1, dummify=False)(1) == 2\n \n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n \n-def test_ITE():\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+    # Original test case\n+    assert f(f(2)).evalf() == Float(16)\n+    # New test cases\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    assert f(g(f(2))).evalf() == Float(64)\n+    assert g(f(g(2))).evalf() == Float(32)\n     assert lambdify((x, y, z), ITE(x, y, z))(True, 5, 3) == 5\n     assert lambdify((x, y, z), ITE(x, y, z))(False, 5, 3) == 3\n \n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..9cfd0a1 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,13 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n-\n-def test_Identity_doit():\n+    # Test for the total sum of elements in an identity matrix\n+    assert Sum(In[i, j], (i, 0, n-1), (j, 0, n-1)).subs(n, 3).doit() == 3\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).subs(n, 3).doit() == 3\n+    assert Sum(In[i, j], (i, 0, n-1), (j, 0, n-1)).subs(n, 5).doit() == 5\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).subs(n, 5).doit() == 5\n+    assert Sum(In[i, j], (i, 0, n-1), (j, 0, n-1)).subs(n, 1).doit() == 1\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).subs(n, 1).doit() == 1\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..ab5961d 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,22 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # Test non-disjoint cycles: [[0, 1], [0, 1]] should return the identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    \n+    # Additional test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])  # 1 -> 2 and 2 -> 1\n+    assert Permutation([[1, 2], [2, 3]]) == Permutation([0, 1, 3, 2])\n+\n+    # Test with identity cycles explicitly given\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])\n+\n+    # Test more complex cycle interactions\n+    assert Permutation([[0, 2], [2, 3], [3, 1]]) == Permutation([0, 3, 1, 2])\n+\n+    # Ensure that the original test patch is kept intact\n+    assert Permutation([[0, 1], [0, 2]]) == Permutation(0, 1, 2)\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..680e7be 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -489,8 +489,22 @@ def test_errors():\n     raises(ShapeError,\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n-\n-def test_len():\n+def test_zero_dimension_stacking():\n+    # Test horizontal stacking with zero rows but different columns\n+    sparse_matrices_h = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_h).shape == (0, 6)\n+\n+    # Test vertical stacking with zero columns but different rows\n+    sparse_matrices_v = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_v).shape == (6, 0)\n+\n+    # Test horizontal stacking with one row matrices\n+    sparse_matrices_h_one_row = [SparseMatrix.zeros(1, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_h_one_row).shape == (1, 6)\n+\n+    # Test vertical stacking with one column matrices\n+    sparse_matrices_v_one_col = [SparseMatrix.zeros(n, 1) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_v_one_col).shape == (6, 1)\n     assert not SparseMatrix()\n     assert SparseMatrix() == SparseMatrix([])\n     assert SparseMatrix() == SparseMatrix([[]])\n",
  "sympy__sympy-13372": "",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..9ed0828 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -203,6 +203,17 @@ def test_tanh():\n \n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n+def test_coth_log_tan_substitution():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # These are problematic values mentioned in the issue\n+    problematic_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+\n+    for val in problematic_values:\n+        result = e.subs(x, val)\n+        assert result.is_real or result.is_imaginary or result.is_complex or result.is_number\n+\n \n def test_tanh_series():\n     x = Symbol('x')\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..e00171a 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -155,7 +155,23 @@ def test_difference():\n         Union(Interval(0, 1, False, True), Interval(1, 2, True, False))\n \n     assert FiniteSet(1, 2, 3) - FiniteSet(2) == FiniteSet(1, 3)\n-    assert FiniteSet('ham', 'eggs') - FiniteSet('eggs') == FiniteSet('ham')\n+from sympy import FiniteSet, Interval, Symbol, Complement\n+\n+def test_issue_12712():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Original test case for the reported issue\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n+    # Additional test cases\n+    z = Symbol('z')\n+    assert Complement(FiniteSet(x, y, z, 5), Interval(0, 10)) == \\\n+           Complement(FiniteSet(x, y, z), Interval(0, 10))\n+    assert Complement(FiniteSet(x, y, 2, 3, 4), Interval(-10, 0)) == \\\n+           FiniteSet(x, y, 2, 3, 4)\n+    assert Complement(FiniteSet(x, y, 2, -5), Interval(-10, -1)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, -1))\n     assert FiniteSet(1, 2, 3, 4) - Interval(2, 10, True, False) == \\\n         FiniteSet(1, 2)\n     assert FiniteSet(1, 2, 3, 4) - S.EmptySet == FiniteSet(1, 2, 3, 4)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..34d7240 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,20 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643():\n+    import sympy as sm\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..4db5560 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -665,8 +665,18 @@ def test_Poly_sub():\n def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n-\n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+from sympy import Symbol, S\n+from sympy.polys.polytools import Poly\n+\n+x = Symbol('x')\n+\n+def test_issue_13079():\n+    # Verifying the issue and its fix\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..9c00277 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,23 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    # Existing test cases from the original test patch\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+    \n+    # Additional test cases\n+    assert latex(2*x*y, mul_symbol='\\\\cdot') == r\"2 \\cdot x \\cdot y\"\n+    assert latex(3*x**2*y, mul_symbol='times') == r\"3 \\times x^{2} \\times y\"\n+    assert latex(2*x*y, mul_symbol='ldot') == r\"2 \\,. x \\,. y\"\n+    assert latex(4*x**3*y**2, mul_symbol='custom') == r\"4 custom x^{3} custom y^{2}\"  # Hypothetical custom usage\n+\n+    # Test with empty string as mul_symbol\n+    assert latex(5*x*y*z, mul_symbol='') == r\"5xyz\"\n+\n+    # Confirm default behavior with None\n+    assert latex(2*x*y, mul_symbol=None) == \"2 x y\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..572229d 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -306,9 +306,17 @@ def test_tolist():\n     lst = [[S.One, S.Half, x*y, S.Zero], [x, y, z, x**2], [y, -S.One, z*x, 3]]\n     m = Matrix(lst)\n     assert m.tolist() == lst\n-\n-\n-def test_as_mutable():\n+def test_issue_13835():\n+    from sympy import Matrix, symbols\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    assert M(3).det() == 0  # Simplified result\n+    assert M(4).det() == 0\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n     assert zeros(0, 3).as_mutable() == zeros(0, 3)\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..68c6623 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -711,6 +711,25 @@ def test_issue_10003():\n \n def test_precomputed_cdf():\n     x = symbols(\"x\", real=True, finite=True)\n+    distribs_with_issues = [\n+            Arcsin('X1', 0, 3),\n+            Dagum('X2', S(1)/3, S(1)/5, 2),\n+            Erlang('X3', 1, 1),\n+            Frechet('X4', S(4)/3, 1, 2),\n+            Gamma('X5', 0.1, 2),\n+            GammaInverse('X6', S(5)/7, 2),\n+            Kumaraswamy('X7', S(1)/123, 5),\n+            Laplace('X8', 2, 3),\n+            Logistic('X9', 1, 0.1),\n+            Nakagami('X10', S(7)/3, 1),\n+            StudentT('X11', 10),\n+            UniformSum('X12', 5),\n+    ]\n+    \n+    # numerically verify if differentiation of computed CDF equals PDF\n+    for X in distribs_with_issues:\n+        assert tn(diff(cdf(X)(x), x), density(X)(x), x, a=0, b=0, c=1, d=0), f\"CDF differentiation failed for {X}\"\n+    x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n     n = symbols(\"n\", integer=True, positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..8aa4889 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -46,6 +46,27 @@ def test_tensor_product_commutator():\n \n \n def test_tensor_product_simp():\n+    # Test expressions involving powers of TensorProduct\n+    A, B, C, D = symbols('A B C D', commutative=False)\n+    a = Symbol('a', commutative=False)\n+    assert tensor_product_simp(TP(1, 1) * TP(1, 1)) == TP(1, 1**2)\n+    assert tensor_product_simp(TP(1, a) * TP(1, 1)).subs(a, 1) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, Pauli(3)) * TP(1, Pauli(3))) == TP(1, Pauli(3)**2)\n+    assert tensor_product_simp(TP(1, Pauli(3)) * TP(1, a)).subs(a, Pauli(3)) == TP(1, Pauli(3))\n+    assert tensor_product_simp((TP(A, B))**2) == TP(A**2, B**2)\n+    assert tensor_product_simp((TP(A, B))**3) == TP(A**3, B**3)\n+    assert tensor_product_simp((TP(A, B) * TP(C, D))**2) == TP(A**2 * C**2, B**2 * D**2)\n+    assert (TP(A, B) * TP(A, C) * TP(B, B)).expand(tensorproduct=True) == TP(A**2*B, B*C)\n+\n+    # Extend with some more complex combinations\n+    expr1 = TP(A, B) * TP(C, D)\n+    assert tensor_product_simp(expr1**2) == TP(A**2*C**2, B**2*D**2)\n+\n+    expr2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert expr2.expand(tensorproduct=True) == TP(1, Pauli(3)**2)\n+\n+    expr3 = TP(1, 1) * TP(1, a)\n+    assert expr3.subs(a, 1).expand(tensorproduct=True) == TP(1, 1)\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n \n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 29c7fd2..b9be2ce 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -440,7 +440,14 @@ def test_sqrt():\n     assert str(1/x**(1/2)) == \"x**(-0.5)\"\n \n \n-def test_Rational():\n+from sympy import Symbol, Rational, Eq, Limit, S\n+\n+def test_str_respects_sympy_integers():\n+    x = Symbol('x')\n+    # Test sstr with Eq and sympy_integers=True\n+    assert sstr(Eq(x, S(1)/2), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    # Test sstr with Limit and sympy_integers=True\n+    assert sstr(Limit(x, x, S(1)/2), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n     n1 = Rational(1, 4)\n     n2 = Rational(1, 3)\n     n3 = Rational(2, 4)\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..5db9b1d 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,34 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n+def test_zero_vector_addition():\n+    N = ReferenceFrame('N')\n+    # Test adding a vector and a zero-multiplied vector\n+    assert sum([N.x, (0 * N.x)]) == N.x\n+    \n+    # Test adding zero to a vector in a different way\n+    assert A.x + 0 == A.x\n+    assert 0 + A.x == A.x\n+    assert N.x + 0 * N.x == N.x\n+    assert 0 * N.x + N.x == N.x\n+\n+    # Ensure that zero alone is not considered a vector\n+    try:\n+        result = N.x + 0\n+    except TypeError:\n+        assert False, \"TypeError should not be raised when adding vector with zero\"\n+    \n+    try:\n+        result = 0 + N.x\n+    except TypeError:\n+        assert False, \"TypeError should not be raised when adding zero with vector\"\n+\n+    # Test with another non-zero vector\n+    assert (N.x + N.y) + (0 * N.x) == N.x + N.y\n+    assert sum([N.x, (0 * N.z), N.y]) == N.x + N.y\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/solvers/tests/test_numeric.py b/sympy/solvers/tests/test_numeric.py\nindex 6a82251..19665f3 100644\n--- a/sympy/solvers/tests/test_numeric.py\n+++ b/sympy/solvers/tests/test_numeric.py\n@@ -1,12 +1,24 @@\n-from sympy import (Eq, Matrix, pi, sin, sqrt, Symbol, Integral, Piecewise,\n+\n+from sympy import (Eq, Matrix, pi, sin, sqrt, Symbol, Integral, Piecewise, Rational,\n     symbols, Float, I)\n from mpmath import mnorm, mpf\n from sympy.solvers import nsolve\n from sympy.utilities.lambdify import lambdify\n+from mpmath import mpf\n from sympy.utilities.pytest import raises, XFAIL\n from sympy.utilities.decorator import conserve_mpmath_dps\n+def test_nsolve_rational_with_lambdify():\n+    x = symbols('x')\n+    eqn = Eq(x**2, 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source = inspect.getsource(f)\n \n-@XFAIL\n+    # Verify if the lambdified function correctly involves mpmath conversion\n+    assert 'mpmath.mpf' in source, \"Rational should be wrapped into mpmath.mpf\"\n+\n+    # Solving the equation numerically\n+    x0 = nsolve(eqn, mpf('8.8'), prec=64)\n+    assert abs(f(x0)) < 1e-50, \"The solved x should satisfy the equation closely\"\n def test_nsolve_fail():\n     x = symbols('x')\n     # Sometimes it is better to use the numerator (issue 4829)\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..c52629b 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,7 +74,20 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1\n+    assert rank_zero_array.shape == ()\n+    assert rank_zero_array.rank() == 0\n+    assert rank_zero_array[()] == x\n+    raises(ValueError, lambda: rank_zero_array[0])\n+\n+    # Additional test case to verify issue resolution\n+    # Test for length of rank-0 array\n+    rank_zero_array = ImmutableDenseNDimArray(42)\n+    assert len(rank_zero_array) == 1\n+    assert rank_zero_array.shape == ()\n+    assert rank_zero_array.rank() == 0\n+    assert rank_zero_array[()] == 42\n+    raises(ValueError, lambda: rank_zero_array[0])\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7325d97 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,23 @@\n+\n+def test_Max():\n+    # Test the specific case reported in the issue\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    \n+    # Additional test cases to ensure functionality\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(2, 3)) == \"Max[2, 3]\"\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    assert mcode(Max(x + y, z)) == \"Max[x + y, z]\"\n+    assert mcode(Max(x, y) + Min(x, y)) == \"Max[x, y] + Min[x, y]\"\n+    \n+    # Original test case\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..d7be823 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,39 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix():\n+    from sympy import symbols, cos, sin, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    x = symbols('x')\n+    \n+    # Test for pure rotation around the x-axis\n+    q_x = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix_x = Matrix([\n+        [1,      0,       0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q_x.to_rotation_matrix()) == expected_matrix_x\n+\n+    # Test for pure rotation around the y-axis\n+    q_y = Quaternion(cos(x/2), 0, sin(x/2), 0)\n+    expected_matrix_y = Matrix([\n+        [cos(x),  0, sin(x)],\n+        [     0,  1,      0],\n+        [-sin(x), 0, cos(x)]\n+    ])\n+    assert trigsimp(q_y.to_rotation_matrix()) == expected_matrix_y\n+\n+    # Test for pure rotation around the z-axis\n+    q_z = Quaternion(cos(x/2), 0, 0, sin(x/2))\n+    expected_matrix_z = Matrix([\n+        [cos(x), -sin(x), 0],\n+        [sin(x),  cos(x), 0],\n+        [     0,       0, 1]\n+    ])\n+    assert trigsimp(q_z.to_rotation_matrix()) == expected_matrix_z\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +152,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..dfb3562 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,16 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+    # edge cases related to issue 15493\n+    assert Mod(6*i, 3) == 0\n+    assert Mod(9*i, 3) == 0\n+    assert Mod(15*i, 5) == 0\n+    assert Mod(12*i, 4) == 0\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..6f399f5 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -75,6 +75,7 @@ def test_Min():\n     assert Min(nn, oo) == nn\n     assert Min(oo, nn) == nn\n     assert Min(p, p) == p\n+    assert Min() == S.Infinity\n     assert Min(p, oo) == p\n     assert Min(oo, p) == p\n     assert Min(oo, oo) == oo\n@@ -86,6 +87,7 @@ def test_Min():\n \n     # lists\n     raises(ValueError, lambda: Min())\n+    assert Min(x) == x\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -152,11 +154,13 @@ def test_Max():\n     np_ = Symbol('np_', nonpositive=True)\n     r = Symbol('r', real=True)\n \n+    assert Max() == S.NegativeInfinity\n     assert Max(5, 4) == 5\n \n     # lists\n \n     raises(ValueError, lambda: Max())\n+    assert Max(x) == x\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..c6c067c 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,31 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n-\n-def test_issue_14392():\n+def test_issue_15873():\n+    # Ensure that is_zero is None for undecidable zero status\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True  # Simplified expression should be zero\n+\n+def test_Add_is_zero_edge_cases():\n+    from sympy import I\n+    # Test cases to check if complex expressions properly return None\n+    e1 = I + (-I - 1) + 1\n+    assert e1.is_zero is None  # Cannot determine if zero without simplification\n+\n+    e2 = I*(1 + I) + (-I)*(1 + I)  # This should be determinable to be zero\n+    assert e2.is_zero is True\n+\n+    e3 = I**2 + 1  # This should simplify to zero\n+    assert e3.is_zero is None\n+    assert simplify(e3).is_zero is True\n+\n+    # Test with addition having real and imaginary components\n+    e4 = I + 1 + (-I - 1)\n+    assert e4.is_zero is True\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..19ea6ff 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,8 +477,41 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n-\n-def test_issue_5950():\n+from sympy import Symbol, posify, symbols\n+\n+def test_issue_posify_finite_assumption():\n+    # Original test for finite assumption preservation\n+    # issue 16438\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq._assumptions == {\n+        'positive': True, 'zero': False, 'imaginary': False,\n+        'nonpositive': False, 'commutative': True, 'hermitian': True,\n+        'real': True, 'nonzero': True, 'nonnegative': True,\n+        'negative': False, 'complex': True, 'finite': True,\n+        'infinite': False\n+    }\n+    \n+    # Additional tests for other assumptions\n+    i = Symbol('i', integer=True)\n+    eq_i, _ = posify(i)\n+    assert eq_i.is_integer is True\n+\n+    r = Symbol('r', rational=True)\n+    eq_r, _ = posify(r)\n+    assert eq_r.is_rational is True\n+\n+    p = Symbol('p', prime=True)\n+    eq_p, _ = posify(p)\n+    assert eq_p.is_prime is True\n+\n+    e = Symbol('e', even=True)\n+    eq_e, _ = posify(e)\n+    assert eq_e.is_even is True\n+\n+    o = Symbol('o', odd=True)\n+    eq_o, _ = posify(o)\n+    assert eq_o.is_odd is True\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n     assert logcombine(log(x) - log(y)) == log(x/y)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..93732ac 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase, Idx\n \n x, y, z = symbols('x y z')\n \n@@ -34,6 +36,18 @@ def test_PythonCodePrinter():\n                         (3, Gt(x, 0)), evaluate=False)) == '((2) if (x <= 0) else'\\\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n+    \n+    # Test cases for Indexed support\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[x, y]) == 'p[x, y]'\n+    i, j = symbols('i j')\n+    assert prntr.doprint(p[i, j]) == 'p[i, j]'\n+    \n+    # Complex indices\n+    index1 = Idx('i')\n+    index2 = Idx('j', range=(0, 10))\n+    assert prntr.doprint(p[index1, index2]) == 'p[i, j]'\n \n \n def test_MpmathPrinter():\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..b18d71a 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -31,7 +31,16 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     return source\n \n \n-def test_cython_wrapper_scalar_function():\n+from sympy import MatrixSymbol\n+import numpy as np\n+from sympy.utilities.autowrap import autowrap\n+\n+def test_cython_autowrap_with_unused_array_argument():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # Expression does not involve 'x'\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0, \"Expected output of 1.0 when expression does not depend on 'x'\"\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..40fb472 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,8 +248,11 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n-\n-def test_decode_morse():\n+def test_encode_morse_numeric():\n+    # Verify the Morse encoding for numbers, specifically checking the fix for '1'\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('10') == '.----|-----'\n+    assert encode_morse('0123456789') == '-----|.----|..---|...--|....-|.....|-....|--...|---..|----.'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..0ff3032 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -814,4 +814,20 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n+\n+def test_issue_17137():\n+    from sympy import I, cos, simplify, Symbol\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    # Additional test cases to verify fix:\n+    assert simplify(cos(x)**(I + I)) == cos(x)**(2*I)\n+    assert simplify(cos(x)**0) == 1  # cos(x)**0 should simplify to 1\n+    assert simplify(cos(x)**2) == cos(x)**2  # Identity simplification\n+\n+    # Testing more subtle cases with complex exponents\n+    expr = cos(x)**(I/2 + 1)\n+    assert simplify(expr).expand() == expr.expand()\n+    expr = cos(x)**(-I)\n+    assert simplify(expr).expand() == expr.expand()\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..7a5454f 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n@@ -176,7 +178,16 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    assert _sqrt_match(4 + I) == []\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I) / 2\n+    assert sqrtdenest(expr) == expr\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n+    # Additional test cases\n+    assert sqrtdenest(sqrt(1 + I) + sqrt(1 - I)) == sqrt(1 + I) + sqrt(1 - I)\n+    assert sqrtdenest((sqrt(2 + sqrt(3)) + I)**2) == (sqrt(2 + sqrt(3)) + I)**2\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..d6aeb5a 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -95,7 +96,14 @@ def test_point():\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n-    # Point differences should be simplified\n+    # Verify multiplication order with Points\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympy.sympify(2.0)\n+    \n+    # These should result in the same Point and not raise exceptions\n+    assert point1 + point2 * scalar == point1 + scalar * point2\n+    assert point1 + scalar * point2 == Point(2, 2)\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n     a, b = S.Half, Rational(1, 3)\n@@ -172,7 +180,14 @@ def test_point3D():\n \n     raises(ValueError, lambda: Point3D(0, 0, 0) + 10)\n \n-    # Point differences should be simplified\n+    # Verify multiplication order with Points\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympy.sympify(2.0)\n+    \n+    # These should result in the same Point and not raise exceptions\n+    assert point1 + point2 * scalar == point1 + scalar * point2\n+    assert point1 + scalar * point2 == Point(2, 2)\n     assert Point3D(x*(x - 1), y, 2) - Point3D(x**2 - x, y + 1, 1) == \\\n         Point3D(0, -1, 1)\n \n",
  "sympy__sympy-18189": "",
  "sympy__sympy-18763": "",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..4e3a306 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -88,6 +89,18 @@ def test_free_symbols():\n \n \n def test_subs_CondSet():\n+    # Test for issue with ConditionSet / ImageSet substitution\n+    k = Symbol('k')\n+    # Create an ImageSet\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    # Substitute y with 1/3\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    # Create a ConditionSet with the ImageSet\n+    condset = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+    # Perform substitution in the ConditionSet\n+    result = condset.subs(y, S.One/3)\n+    # Check if substituted result is equal to expected ImageSet after substitution\n+    assert result.dummy_eq(img2)\n     s = FiniteSet(z, y)\n     c = ConditionSet(x, x < 2, s)\n     # you can only replace sym with a symbol that is not in\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..b49e6aa 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -483,7 +483,49 @@ def test_geometry():\n     assert L == Line((0, 1), (1, 0)) and isinstance(L, Line)\n \n \n+from sympy import symbols, Rational, Interval, Add, Mul, exp, sin, cos\n+\n+x, y = symbols('x y')\n+\n def test_kernS():\n+    # Original test case\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+\n+    # Test with parentheses balancing issues\n+    try:\n+        kernS(\"2*(x+1\")  # This should raise an error due to unmatched parentheses\n+        assert False, \"Expected a SympifyError due to unmatched parentheses\"\n+    except SympifyError:\n+        pass\n+\n+    # Test the prevention of 2-arg mul from being distributed\n+    assert kernS('2*(x + y)') == 2*(x + y)\n+    assert kernS('-(x + 1)') == -(x + 1)\n+\n+    # Test with nested expressions\n+    expr = '(1 - x - (y/(x+1)))'\n+    assert kernS(expr) == 1 - x - (y/(x + 1))\n+\n+    # Test expressions that should not affect structure dramatically\n+    expr = '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'\n+    ss = kernS(expr)\n+    assert ss != -1 and ss.simplify() == -1\n+\n+    # Test with variables included in expressions\n+    assert kernS('Interval(-1,-2 - 4*(-3))') == Interval(-1, Add(-2, Mul(12, 1, evaluate=False), evaluate=False))\n+    assert kernS('_kern') == Symbol('_kern')\n+    assert kernS('E**-(x)') == exp(-x)\n+    e = 2*(x + y)*y\n+    assert kernS(['2*(x + y)*y', ('2*(x + y)*y',)]) == [e, (e,)]\n+    assert kernS('-(2*sin(x)**2 + 2*sin(x)*cos(x))*y/2') == -y*(2*sin(x)**2 + 2*sin(x)*cos(x))/2\n+\n+    # Valid and invalid balance cases\n+    assert kernS('(1 - x)/(1 - x*(1-y))') == kernS('(1-x)/(1-(1-y)*x)')\n+    assert kernS('(1-2**-(4+1)*(1-y)*x)') == (1 - x*(1 - y)/32)\n+    assert kernS('(1-2**(4+1)*(1-y)*x)') == (1 - 32*x*(1 - y))\n+    assert kernS('(1-2.*(1-y)*x)') == 1 - 2.*x*(1 - y)\n+    one = kernS('x - (x - 1)')\n+    assert one != 1 and one.expand() == 1\n     s =   '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'\n     # when 1497 is fixed, this no longer should pass: the expression\n     # should be unchanged\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..5258179 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -93,6 +94,7 @@ def test_identity():\n     assert isinstance(I, Operator)\n \n     assert I * O == O\n+    assert Dagger(O) * I == Dagger(O)  # Ensure Dagger(A) * Identity results in Dagger(A)\n     assert O * I == O\n     assert isinstance(I * I, IdentityOperator)\n     assert isinstance(3 * I, Mul)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..e3b9820 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -906,7 +906,14 @@ def test_sylow_subgroup():\n     assert G.order()/S.order() % 2 > 0\n \n \n-@slow\n+def test_dihedral_sylow_subgroup_issue():\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n def test_presentation():\n     def _test(P):\n         G = P.presentation()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..32bbc41 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,8 +513,37 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n+from sympy.utilities.iterables import partitions\n \n-def test_binary_partitions():\n+def test_partitions_copy():\n+    # Test to ensure partitions do not reuse dictionary objects\n+    p_iter = partitions(6, k=2)\n+\n+    first_partition = next(p_iter)\n+    second_partition = next(p_iter)\n+\n+    # Modifying first partition should not affect second partition\n+    first_partition_copy = first_partition.copy()\n+    first_partition_copy[2] = 1\n+\n+    assert first_partition != second_partition, \"Partitions share the same dictionary object\"\n+\n+    # Test that list of partitions returns correct partitions\n+    partition_list = list(partitions(6, k=2))\n+    expected_partitions = [\n+        {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}\n+    ]\n+\n+    assert partition_list == expected_partitions, \"List of partitions contains incorrect partitions\"\n+\n+    # Test with size=True\n+    partition_list_with_size = list(partitions(6, k=2, size=True))\n+    expected_partitions_with_size = [\n+        (3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})\n+    ]\n+\n+    for (m, part), (em, epart) in zip(partition_list_with_size, expected_partitions_with_size):\n+        assert m == em and part == epart, \"Partitions with size=True are incorrect\"\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..fd80027 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,24 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test comparisons between S(0.0) and S.false\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    \n+    # Test comparisons between S(0) and S.false, which should not be equal\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+    \n+    # Additional checks to ensure consistency of behavior with close values\n+    assert (S(0.0000001) == S.false) is False\n+    assert (S.false == S(0.0000001)) is False\n+    \n+    # Testing against other logical values\n+    assert (S.false == S.false) is True\n+    assert (S.true == S.false) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..864c370 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -6,7 +7,8 @@ from sympy import (\n     AccumBounds, Matrix, zeros, ZeroMatrix)\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n-from sympy.abc import a, x, y, z, t\n+from sympy.functions.elementary.trigonometric import sinh\n+from sympy.functions.elementary.piecewise import Piecewise\n \n def test_subs():\n     n3 = Rational(3)\n@@ -20,7 +22,30 @@ def test_subs():\n     assert e == Rational(6)\n \n \n-def test_subs_Matrix():\n+def test_issue_21373():\n+    # Replicate the conditions from the issue\n+    clear_cache()\n+    \n+    # Symbols without real assumptions\n+    x, y, z = symbols('x y z')\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr  # Should not raise PolynomialError\n+\n+    # Symbols with real assumptions\n+    clear_cache()\n+    x_r, y_r, z = symbols('x_r y_r z', real=True) \n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr  # Should not raise PolynomialError\n+\n+    # Additional checks for related cases\n+    expr = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) * z ** -1.0)\n+    assert expr.is_zero in [True, False]  # Checking evaluation does not trigger errors\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr.subs({1: 1.0}) == expr  # Should not raise PolynomialError\n+    expr = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr  # Should not raise PolynomialError\n+\n+# Keeping original test cases\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n     assert (x*y).subs({x:z, y:0}) in [z, z1]\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..0c5ff56 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -14,6 +14,8 @@ from sympy.polys.polyerrors import ExactQuotientFailed\n from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n \n \n def test_monomials():\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..789a9fd 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -264,6 +264,14 @@ def test_none():\n def test_String():\n     st = String('foobar')\n     assert st.is_Atom\n+    # Testing argument invariance for String\n+    assert st.func(*st.args) == st\n+\n+    # Verify similar behavior in subclass\n+    qs = QuotedString('quoted text')\n+    assert qs.is_Atom\n+    assert qs == QuotedString('quoted text')\n+    assert qs.func(*qs.args) == qs\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..be2e573 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,10 +10,32 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        Point(1, 2)\n+\n+    # Additional test cases to ensure no imaginary coordinates are allowed\n+    raises(ValueError, lambda: Point(1, 2*I))\n+\n+    # Test case without evaluate=False, should work fine\n+    assert Point(1, 2) == Point2D(1, 2)\n+\n+    # Test case directly constructing Point2D\n+    with evaluate(False):\n+        assert Point2D(1, 2) == Point2D(1, 2)\n+\n+    # Ensure proper behavior with evaluate explicitly set to True\n+    with evaluate(True):\n+        assert Point2D(1.0, 2.0) == Point2D(Rational(1), Rational(2))\n \n-def test_point():\n+    # Edge case: Singular coordinate, should raise ValueError\n+    with raises(ValueError):\n+        with evaluate(False):\n+            Point(1)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..e2b6979 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..ede940f 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1198,7 +1201,12 @@ def test_issue_14941():\n     assert f3(2, 3) == [3, 2]\n \n \n-def test_lambdify_Derivative_arg_issue_16468():\n+def test_lambdify_single_element_tuple():\n+    f2b = lambdify([], (1,))  # Test single-element tuple\n+    assert f2b() == (1,)\n+    # Verify the generated source code respects the tuple\n+    source_code = inspect.getsource(f2b)\n+    assert 'return (1,)' in source_code\n     f = Function('f')(x)\n     fx = f.diff()\n     assert lambdify((f, fx), f + fx)(10, 5) == 15\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..6620305 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,6 +1,16 @@\n+\n+def test_symbols_with_cls_function():\n+    # Test for issue 23532\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(q[1]) == UndefinedFunction\n+    assert type(u[0]) == UndefinedFunction\n+    assert type(u[1]) == UndefinedFunction\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..f923252 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -262,7 +262,38 @@ def test_kahane_simplify1():\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n-def test_gamma_matrix_class():\n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Test cases from the issue\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Failed for: {t}, got: {r}\"\n+    \n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Failed for: {t}, got: {r}\"\n+    \n+    # Additional test cases to verify the fix\n+    t = G(sigma)*G(rho)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(sigma)*G(rho)), f\"Failed for: {t}, got: {r}\"\n+    \n+    t = G(mu)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(sigma)), f\"Failed for: {t}, got: {r}\"\n+    \n+    t = G(mu)*G(-mu)*G(sigma)*G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(sigma)*G(rho)), f\"Failed for: {t}, got: {r}\"\n+\n+    t = G(rho)*G(mu)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Failed for: {t}, got: {r}\"\n+\n+    t = G(mu)*G(rho)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(-2*G(sigma)*G(rho)), f\"Failed for: {t}, got: {r}\"\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..eb8482b 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,8 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Symbol, FiniteSet, S, Contains, Piecewise, Reals, Integers, raises, TypeError\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -46,6 +48,18 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_piecewise_issue():\n+    x = Symbol('x')\n+    # The following test is to ensure that Contains(x, Reals) when used in Piecewise does not raise an AttributeError.\n+    # This tests the integration of Contains with Piecewise and ensures Contains.as_set() produces a set.\n+    pw = Piecewise((6, Contains(x, Reals).as_set()), (7, True))\n+    assert pw.subs(x, 0) == 6  # 0 is in Reals\n+\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..78aa2df 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy import exp\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+    from sympy.core.numbers import E\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..2f37af3 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,44 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, velocity, acceleration, time, meter, second\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_collect_factor_and_dimension_with_negative_scale():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1*t1 + v1\n+    try:\n+        scale_factor, dimension = SI._collect_factor_and_dimension(expr1)\n+        assert dimension == SI.get_quantity_dimension(v1)\n+    except ValueError as e:\n+        assert False, f\"Test failed due to unexpected ValueError: {e}\"\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..857c626 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -43,6 +44,30 @@ def test_homomorphism():\n     assert T.invert(a**-1*b**-1*a**2) == a*b**-1\n \n     # PermutationGroup -> PermutationGroup\n+\n+    # Test case for DihedralGroup(3) with its generators\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Additional tests\n+    a = Permutation(1, 2, 3, 4)\n+    b = Permutation(1, 3)\n+    G = PermutationGroup([a, b])\n+    # Creating homomorphism with inverted generators\n+    T = homomorphism(G, G, G.generators, [a, b**-1])\n+    assert not T.is_isomorphism()\n+    assert not T.is_trivial()\n+\n+    # Test with identity permutation\n+    identity = Permutation([0, 1, 2, 3, 4])\n+    T_identity = homomorphism(G, G, G.generators, [identity, identity])\n+    assert T_identity.is_trivial()\n+\n+    # Another test with non-standard permutations\n+    d = Permutation(0, 2, 1)\n+    T_non_standard = homomorphism(G, PermutationGroup([d]), G.generators, [d, d])\n+    assert not T_non_standard.is_isomorphism()\n     D = DihedralGroup(8)\n     p = Permutation(0, 1, 2, 3, 4, 5, 6, 7)\n     P = PermutationGroup(p)\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..684b190 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -270,7 +270,29 @@ def test_PolyElement_as_expr():\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n-def test_PolyElement_from_expr():\n+def test_PolyElement_as_expr_symbols():\n+    from sympy import ring, ZZ, symbols\n+\n+    # Create a ring with symbols x, y, z\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    # Define a polynomial in terms of these symbols\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    # Define a new set of symbols u, v, w\n+    U, V, W = symbols(\"u,v,w\")\n+    # Define what the polynomial should look like when expressed with these new symbols\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+\n+    # Assert that converting the polynomial to an expression with the new symbols works correctly\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test with mismatched number of symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+    raises(ValueError, lambda: f.as_expr(U))\n+\n+    # Test with no symbols, should return in terms of original symbols\n+    g_original = 3*x**2*y - x*y*z + 7*z**3 + 1\n+    assert f.as_expr() == g_original\n     x, y, z = symbols(\"x,y,z\")\n     R, X, Y, Z = ring((x, y, z), ZZ)\n \n",
  "sympy__sympy-24661": "",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..3f83a6b 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -61,6 +61,8 @@ def test_unit_grammar_fail(string):\n         ([\"mW/(m2)\"], u.Unit(u.erg / u.cm**2 / u.s)),\n         ([\"km/s\", \"km.s-1\"], u.km / u.s),\n         ([\"10pix/nm\"], u.Unit(10 * u.pix / u.nm)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.W / (u.kpc**2 * u.s))),\n         ([\"1.5x10+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"1.5\u00d710+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"m2\"], u.m**2),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..d20a43f 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1908,8 +1908,29 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(\n             gt_operation.describe(), \"Remove constraint test_remove_constraint_pony_pink_gt_2 from model Pony\"\n         )\n-        # Test state alteration\n-        new_state = project_state.clone()\n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_validator_with_or_and_combination(self):\n+        \"\"\"\n+        Test CheckConstraint with OR and AND combination in a migration.\n+        \"\"\"\n+        app_label = 'test_combination_constraint'\n+        constraint_name = 'combination_constraint'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        \n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        # Ensure constraints enforce the data correctly\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=1, flag=False)\n+        TestConstraint.objects.create(field_1=1, flag=True)\n         gt_operation.state_forwards(\"test_removeconstraint\", new_state)\n         self.assertEqual(len(new_state.models[\"test_removeconstraint\", \"pony\"].options['constraints']), 1)\n         Pony = new_state.apps.get_model(\"test_removeconstraint\", \"Pony\")\n",
  "django__django-11477": "",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..f1dfc0a 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -14,10 +15,26 @@ from .models import (\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    Item, Derived\n )\n \n \n class ModelInheritanceTest(TestCase):\n+    def test_reset_primary_key_for_derived_model(self):\n+        # Create a Derived instance\n+        derived_instance = Derived.objects.create(f=True)\n+\n+        # Retrieve the instance and reset it\n+        item_instance = Item.objects.get(pk=derived_instance.pk)\n+        derived_reset = item_instance.derived\n+        derived_reset.reset()\n+        derived_reset.save()\n+\n+        # Assert that a new object was created\n+        self.assertNotEqual(derived_instance.pk, derived_reset.pk)\n+        self.assertEqual(Item.objects.count(), 2)\n+        self.assertFalse(derived_reset.f)\n+\n     def test_model_inheritance(self):\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..d012405 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -617,7 +617,23 @@ class FastDeleteTests(TestCase):\n         self.assertFalse(User.objects.exists())\n         self.assertFalse(Avatar.objects.exists())\n \n-    def test_fast_delete_m2m(self):\n+    def test_fast_delete_all_no_subquery(self):\n+        \"\"\"\n+        Test that Model.objects.all().delete() does not generate SQL with subquery.\n+        This checks the issue in Django 3.1 where a subquery was used causing performance regression.\n+        \"\"\"\n+        # Create a batch of users to ensure a larger delete operation\n+        User.objects.bulk_create(User() for _ in range(1000))\n+        \n+        # Ensure no subqueries are used during a full delete\n+        with CaptureQueriesContext(connection) as ctx:\n+            User.objects.all().delete()\n+        \n+        # Verify the SQL executed is a simple DELETE without a subquery\n+        executed_sql = ctx.captured_queries[0]['sql']\n+        self.assertIn(\"DELETE\", executed_sql)\n+        self.assertNotIn(\"SELECT\", executed_sql)\n+        self.assertNotIn(\"IN\", executed_sql)\n         t = M2MTo.objects.create()\n         f = M2MFrom.objects.create()\n         f.m2m.add(t)\n@@ -702,4 +718,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..f1db51b 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,7 +6,7 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n \n \n class PickleabilityTestCase(TestCase):\n",
  "django__django-13449": "diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\nindex fb67168..d0a204a 100644\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from unittest import mock, skipIf\n \n@@ -13,12 +14,42 @@ from django.db.models.functions import (\n )\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n+from decimal import Decimal\n from .models import Employee\n \n \n @skipUnlessDBFeature('supports_over_clause')\n class WindowFunctionTests(TestCase):\n-    @classmethod\n+    def test_lag_decimalfield_with_sqlite(self):\n+        # Adding additional data with a DecimalField to test Lag with SQLite.\n+        Employee.objects.create(name='Moore', salary=34000, department='IT', hire_date=datetime.date(2012, 5, 1), age=25, bonus=Decimal('85.00'))\n+        Employee.objects.create(name='Wilkinson', salary=60000, department='IT', hire_date=datetime.date(2015, 9, 1), age=32, bonus=Decimal('150.00'))\n+        Employee.objects.create(name='Johnson', salary=80000, department='Management', hire_date=datetime.date(2010, 6, 1), age=45, bonus=Decimal('200.00'))\n+        Employee.objects.create(name='Miller', salary=100000, department='Management', hire_date=datetime.date(2018, 8, 1), age=50, bonus=Decimal('250.00'))\n+        \n+        # Annotate using LAG function with a DecimalField.\n+        qs = Employee.objects.annotate(lag_bonus=Window(\n+            expression=Lag('bonus', offset=1, output_field=DecimalField()),\n+            partition_by=F('department'),\n+            order_by=[F('bonus').asc(), F('name').asc()],\n+        )).order_by('department', F('bonus').asc(), F('name').asc())\n+        \n+        expected = [\n+            ('Williams', 92.5, 'Accounting', None),\n+            ('Jenson', 112.5, 'Accounting', 92.5),\n+            ('Jones', 112.5, 'Accounting', 112.5),\n+            ('Adams', 125, 'Accounting', 112.5),\n+            ('Moore', 85, 'IT', None),\n+            ('Wilkinson', 150, 'IT', 85),\n+            ('Johnson', 200, 'Management', None),\n+            ('Miller', 250, 'Management', 200),\n+            ('Smith', 95, 'Marketing', None),\n+            ('Johnson', 100, 'Marketing', 95),\n+            ('Brown', 132.5, 'Sales', None),\n+            ('Smith', 137.5, 'Sales', 132.5),\n+        ]\n+        \n+        self.assertQuerysetEqual(qs, expected, transform=lambda row: (row.name, float(row.bonus), row.department, float(row.lag_bonus) if row.lag_bonus else None))\n     def setUpTestData(cls):\n         Employee.objects.bulk_create([\n             Employee(name=e[0], salary=e[1], department=e[2], hire_date=e[3], age=e[4])\n",
  "django__django-13512": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex a61da37..94f559e 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -195,6 +195,19 @@ class UtilsTests(SimpleTestCase):\n                     display_value,\n                 )\n \n+    def test_json_unicode_display_for_field(self):\n+        tests = [\n+            ({'a': '\u4f60\u597d\uff0c\u4e16\u754c'}, '{\"a\": \"\u4f60\u597d\uff0c\u4e16\u754c\"}'),\n+            ({'emoji': '\ud83d\ude00\ud83d\udc31'}, '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}'),\n+            ({'text': 'ja\u017a\u0144'}, '{\"text\": \"ja\u017a\u0144\"}'),\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n+\n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n",
  "django__django-14404": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..2eff7ba 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,6 +691,41 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n+    def test_migration_with_custom_field_and_bases(self):\n+        \"\"\"\n+        Test that migrations for models with custom fields and multiple inheritance \n+        have the correct imports.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        fields = {\n+            'name': MyField(primary_key=True),\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\", \n+                    fields=tuple(fields.items()), \n+                    options={'abstract': False}, \n+                    bases=(MyMixin, MyBaseModel)\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"from app.models import MyField, MyMixin\", output)\n+\n     def test_migration_path(self):\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..d2b3d22 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1624,6 +1624,31 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal.from_float(math.pi), places=6)\n \n+    def test_aggregate_default_after_annotate_with_sum(self):\n+        # Test the case as described in the issue\n+        result = Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_default_in_annotation_then_aggregation(self):\n+        # Verify interaction of the default in the annotation phase\n+        # followed by a regular aggregate call\n+        result = Book.objects.annotate(\n+            default_in_annotation=Coalesce(Sum(\"id\"), 0)\n+        ).aggregate(Sum(\"id\"))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_coalesce_function_in_aggregation(self):\n+        # Further verify that Coalesce works within aggregate as expected\n+        result = Book.objects.annotate(idx=F(\"id\")).aggregate(\n+            default_in_agg=Coalesce(Sum(\"id\"), 0)\n+        )\n+        self.assertEqual(result['default_in_agg'], 4560)\n+\n+    def test_simple_aggregate_with_default(self):\n+        # A simple direct aggregation with a default\n+        result = Book.objects.aggregate(Sum(\"pages\", default=0))\n+        self.assertGreaterEqual(result['pages__sum'], 0)\n+\n     def test_aggregation_default_passed_another_aggregate(self):\n         result = Book.objects.aggregate(\n             value=Sum('price', filter=Q(rating__lt=3.0), default=Avg('pages') / 10.0),\n@@ -1642,4 +1667,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..73ca1b2 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -595,6 +595,77 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         )\n \n \n+import unittest\n+from django.db import connection, models\n+from django.db.migrations.state import ProjectState\n+from django.db import migrations\n+\n+class TestConstraintOperations(unittest.TestCase):\n+\n+    @unittest.skipUnless(connection.features.allows_multiple_constraints_on_same_fields, \"Database backend does not support multiple constraints on same fields.\")\n+    def test_remove_unique_together_on_pk_field_error(self):\n+        \"\"\"Test case for removing unique_together on a primary key field.\"\"\"\n+        app_label = \"test_rutopkf\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[(\"id\", models.AutoField(primary_key=True))],\n+                    options={\"unique_together\": {(\"id\",)}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        pk_constraint_name = f\"{table_name}_pkey\"\n+        unique_together_constraint_name = f\"{table_name}_id_error_uniq\"\n+\n+        self.assertConstraintExists(table_name, pk_constraint_name, value=False)\n+        self.assertConstraintExists(table_name, unique_together_constraint_name, value=False)\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        self.assertConstraintExists(table_name, pk_constraint_name, value=False)\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n+    @unittest.skipUnless(connection.features.allows_multiple_constraints_on_same_fields, \"Database backend does not support multiple constraints on same fields.\")\n+    def test_remove_unique_together_on_non_unique_field(self):\n+        \"\"\"Test case for removing unique_together on a non-uniquely constrained field.\"\"\"\n+        app_label = \"test_ruto_nonunique\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Horse\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"name\", models.CharField(max_length=30)),\n+                    ],\n+                    options={\"unique_together\": {(\"name\",)}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_horse\"\n+        unique_together_constraint_name = f\"{table_name}_name_non_uniq\"\n+\n+        self.assertConstraintExists(table_name, unique_together_constraint_name, value=False)\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Horse\", set())\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n",
  "django__django-15916": "",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..6a20a2b 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,8 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.db import models\n+from django.core import serializers\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_backend_macosx.py b/lib/matplotlib/tests/test_backend_macosx.py\nindex 06d044f..f9276b1 100644\n--- a/lib/matplotlib/tests/test_backend_macosx.py\n+++ b/lib/matplotlib/tests/test_backend_macosx.py\n@@ -1,6 +1,8 @@\n import os\n \n-import pytest\n+import pickle\n+import matplotlib.figure as mfigure\n+import platform\n \n import matplotlib as mpl\n import matplotlib.pyplot as plt\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..61ff31b 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6603,6 +6603,29 @@ def test_integrate(dask):\n     with pytest.raises(ValueError):\n         da.integrate(\"x2d\")\n \n+    # Test using `coord` instead of `dim` for consistency\n+    actual = da.integrate(coord=\"y\")\n+    assert_equal(actual, ds.integrate(coord=\"y\")[\"var\"])\n+\n+    # Ensure deprecation warning is raised using `dim` with DataArray\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"y\")\n+    expected_y = xr.DataArray(\n+        np.trapz(da, da[\"y\"], axis=1),\n+        dims=[\"x\"],\n+        coords={k: v for k, v in da.coords.items() if \"y\" not in v.dims},\n+    )\n+    assert_allclose(expected_y, actual.compute())\n+    assert_equal(actual, ds.integrate(\"y\")[\"var\"])\n+    assert_equal(ds[\"var\"].integrate(\"y\"), ds.integrate(\"y\")[\"var\"])\n+\n+    # along x and y\n+    actual = da.integrate((\"y\", \"x\"))\n+    assert actual.ndim == 0\n+\n+    with pytest.raises(ValueError):\n+        da.integrate(\"x2d\")\n+\n \n @pytest.mark.parametrize(\"dask\", [True, False])\n @pytest.mark.parametrize(\"which_datetime\", [\"np\", \"cftime\"])\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..4163930 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -130,8 +130,35 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     )\n     assert assertString in output.err\n \n+from typing import Any\n+import re\n+import pytest\n+from pylint.lint import Run\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"foo{1,3}, bar\", [\"foo{1,3}\", \"bar\"]),\n+    (\"foo{1,3}, bar{2,5}\", [\"foo{1,3}\", \"bar{2,5}\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n \n-def test_csv_regex_error(capsys: CaptureFixture) -> None:\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n     \"\"\"\n",
  "pytest-dev__pytest-6197": "",
  "pytest-dev__pytest-7324": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..cd053ab 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,32 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_pandas_transform_output():\n+    \"\"\"Test FeatureUnion with pandas output and custom transformer.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+\n+    # Sample data\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Custom transformer\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().to_frame()\n+\n+    # Create a FeatureUnion and set_output to pandas\n+    union = FeatureUnion([(\"my_trans\", MyTransformer())])\n+    union.set_output(transform=\"pandas\")\n+\n+    # Transform data and check output\n+    transformed_data = union.fit_transform(data)\n+    assert isinstance(transformed_data, pd.DataFrame)\n+    assert transformed_data.shape[0] == len(data[\"date\"].unique())\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..4570e4f 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -266,8 +266,23 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n-\n-def test_pyfunction_signature(app):\n+def test_autodoc_typehints_none_link(app):\n+    # Test with 'description' mode\n+    app.config.autodoc_typehints = 'description'\n+    text = \".. py:function:: return_none() -> None\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, addnodes.desc)\n+    assert isinstance(doctree[0][1], nodes.field_list)\n+    assert_node(doctree[0][1][0][0][0], nodes.field_name, 'Returns')\n+    assert_node(doctree[0][1][0][1][0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n+    # Test with 'signature' mode\n+    app.config.autodoc_typehints = 'signature'\n+    text = \".. py:function:: return_none() -> None\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, addnodes.desc)\n+    assert_node(doctree[0][0][2], desc_returns, 'None')\n+    # In 'signature' mode, 'None' is not a reference\n     text = \".. py:function:: hello(name: str) -> str\"\n     doctree = restructuredtext.parse(app, text)\n     assert_node(doctree, (addnodes.index,\n@@ -742,4 +757,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..f11947e 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1363,6 +1363,61 @@ param1 : MyClass instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        # Test case for multiple parameter rendering in Numpy-style docstring\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2, x3 : array_like\n+            Input arrays, description of `x1`, `x2`, `x3`.\n+\n+        \"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2, x3** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``, ``x3``.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``, ``x3``.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of ``x1``, ``x2``, ``x3``.\n+        :type x2: :class:`array_like`\n+        :param x3: Input arrays, description of ``x1``, ``x2``, ``x3``.\n+        :type x3: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test case when parameters are optional\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2, x3 : array_like, optional\n+            Input arrays, description of `x1`, `x2`, `x3`.\n+\n+        \"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2, x3** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``, ``x3``.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``, ``x3``.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of ``x1``, ``x2``, ``x3``.\n+        :type x2: :class:`array_like`, *optional*\n+        :param x3: Input arrays, description of ``x1``, ``x2``, ``x3``.\n+        :type x3: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_see_also_refs(self):\n         docstring = \"\"\"\\\n numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..00e01f5 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,9 +773,68 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+import pytest\n+from sphinx.testing import restructuredtext\n+from docutils import nodes\n+from sphinx import addnodes\n+from sphinx_testing_util_assert_node import assert_node\n \n @pytest.mark.sphinx(freshenv=True)\n-def test_module_index(app):\n+def test_type_rtype_cross_reference_resolution(app):\n+    text = \"\"\"\n+    .. py:class:: mod.A\n+    .. py:class:: mod.submod.A\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param mod.A a:\n+        :param mod.submod.A b:\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`A`\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod.submod\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`A`\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \"\"\"\n+    # Parse the text and generate the doctree\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Verify that no warnings were generated about ambiguous class lookups\n+    assert 'WARNING' not in app._warning.getvalue()\n+\n+    # Verify that references to 'A' in :param: and :rtype: resolve correctly\n+    # within mod and mod.submod\n+    assert_node(doctree[8][1][0][1][1][0], pending_xref, reftarget='mod.submod.A')\n+    assert_node(doctree[8][1][0][1][2][0], pending_xref, reftarget='mod.submod.A')\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n             \".. py:module:: sphinx.config\\n\"\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..ec4b94e 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,3 +1,6 @@\n+\n+_foo = None  #: :meta public:\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n@@ -8,4 +11,4 @@ def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..6d2972b 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -904,6 +904,12 @@ def test_canonical_definition_skip(app, warning):\n     assert domain.objects['_io.StringIO'] == ('index', 'io.StringIO', 'class', False)\n \n \n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx.util.docutils import docutils_namespace\n+import docutils.nodes as nodes\n+from sphinx.util import docutils\n+\n def test_canonical_duplicated(app, warning):\n     text = (\".. py:class:: mypackage.StringIO\\n\"\n             \"   :canonical: _io.StringIO\\n\"\n@@ -984,7 +990,46 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n-def test_info_field_list_var(app):\n+def test_dict_param_rendering(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..b7c9791 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1049,6 +1049,15 @@ def test__solveset_multi():\n \n \n def test_conditionset():\n+    # Test case for issue: solveset should return ConditionSet instead of NotImplementedError\n+    from sympy import Eq, cos, sin\n+    from sympy.sets.conditionset import ConditionSet\n+    from sympy.abc import n\n+\n+    # Test the specific equation from the issue\n+    eq = Eq(n*cos(n) - 3*sin(n), 0)\n+    expected = ConditionSet(n, eq, S.Reals)\n+    assert solveset(eq, n, S.Reals) == expected\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..767b367 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,6 +3265,10 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n+from sympy import symbols, sqf_list\n+\n+x, y = symbols('x y')\n+\n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n@@ -3275,8 +3279,25 @@ def test_factor_terms():\n     assert factor_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n     assert sqf_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n \n-\n-def test_as_list():\n+def test_issue_8695():\n+    # Test for the specific issue described\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == expected_result\n+\n+    # Test for another case to verify consistent factorization\n+    p2 = x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2\n+    expected_result2 = (1, [(x - 2, 1), (x**2 - 1, 2)])\n+    assert sqf_list(p2) == expected_result2\n+\n+    # Adding additional test cases for coverage\n+    p3 = (x - 1)**6 * (x + 2)**2 * (x**2 + x + 1)\n+    expected_result3 = (1, [(x - 1, 6), (x + 2, 2), (x**2 + x + 1, 1)])\n+    assert sqf_list(p3) == expected_result3\n+\n+    p4 = (x**2 - 4)**3 * (x - 1) * (x + 1)\n+    expected_result4 = (1, [(x - 2, 3), (x + 2, 3), (x - 1, 1), (x + 1, 1)])\n+    assert sqf_list(p4) == expected_result4\n     # issue 14496\n     assert Poly(x**3 + 2, x, domain='ZZ').as_list() == [1, 0, 0, 2]\n     assert Poly(x**2 + y + 1, x, y, domain='ZZ').as_list() == [[1], [], [1, 1]]\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..144669d 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3254,15 +3254,14 @@ def test_issue_5786():\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n-\n-def test_noncommutative():\n-    class foo(Expr):\n-        is_commutative=False\n-    e = x/(x + x*y)\n-    c = 1/( 1 + y)\n-    assert cancel(foo(e)) == foo(c)\n-    assert cancel(e + foo(e)) == c + foo(c)\n-    assert cancel(e*foo(c)) == c*foo(c)\n+from sympy import symbols, expand, I\n+from sympy.polys.polytools import factor\n+\n+def test_issue_factor_with_extension():\n+    x, y = symbols('x y')\n+    z = expand((x-1)*(y-1))\n+    factored = factor(z, extension=[I])\n+    assert factored == (x - 1)*(y - 1), f\"Factoring failed: {factored}\"\n \n \n def test_to_rational_coeffs():\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..c484a39 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,16 @@\n+\n+def test_symbol_no_dict():\n+    # Test to ensure that Symbol instances do not have a __dict__ attribute\n+    s = Symbol('s')\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n+def test_symbol_slots():\n+    # Verify that Symbol instances use __slots__ and have no __dict__\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    assert s.__slots__ == ('name',)\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -8,6 +21,7 @@ from sympy.core.basic import (Basic, Atom, preorder_traversal, as_Basic,\n from sympy.core.singleton import S\n from sympy.core.symbol import symbols, Symbol, Dummy\n from sympy.core.sympify import SympifyError\n+from sympy.core.symbol import Symbol\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..4396c1a 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,25 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_respects_options_id(self):\n+        \"\"\"\n+        BoundWidget.id_for_label should respect the ID specified in ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple(\n+                    options=[\n+                        {'value': 'a', 'label': 'Option A', 'attrs': {'id': 'custom_id_a'}},\n+                        {'value': 'b', 'label': 'Option B', 'attrs': {'id': 'custom_id_b'}}\n+                    ]\n+                ),\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_a')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_b')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..cceff43 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,65 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+def test_sparse_coder_max_iter_exposure():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                                        n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n+    # Additional check with larger max_iter to ensure no warning\n+    with pytest.warns(None) as record_long:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=5000)\n+        model.fit_transform(X)\n+    assert not record_long.list\n+\n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..12d93c0 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,8 +147,30 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n-\n-# Import the data\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from numpy.testing import assert_array_almost_equal\n+\n+def test_cross_val_predict_with_multi_output_classifier_predict_proba():\n+    # Create a multilabel dataset\n+    X, Y = make_multilabel_classification(random_state=0)\n+    \n+    # Initialize a MultiOutputClassifier\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # Generate cross-validated predictions\n+    pred = cross_val_predict(mo_lda, X, Y, cv=5)  # Works fine\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')  # Shouldn't raise error\n+\n+    # Expected shape of pred_proba: list of arrays, one for each output\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]  # Number of outputs\n+    for i in range(Y.shape[1]):\n+        assert pred_proba[i].shape[0] == X.shape[0]  # Number of samples\n+        assert pred_proba[i].shape[1] == len(set(Y[:, i]))  # Number of classes for each output\n+        assert_array_almost_equal(pred_proba[i].sum(axis=1), 1)  # Probabilities sum to 1 for each sample\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n X = iris.data\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..3b6792e 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,17 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    # Additional test cases for different values of n\n+    assert p.subs(n, 3).doit() == S(105)/8\n+    assert p.subs(n, 4).doit() == S(945)/16\n+    assert p.subs(n, 1).doit() == S(2)\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +368,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}