{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..f4542e5 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -129,13 +129,43 @@ def test_arith_oper():\n         _arith_oper(sh1, map1)\n \n \n-@pytest.mark.parametrize(('compound_model', 'result'), compound_models.values())\n+import pytest\n+import numpy as np\n+from astropy.modeling import models as m\n+from astropy.modeling.separable import separability_matrix, is_separable\n+\n+@pytest.mark.parametrize(('compound_model', 'result'), list(compound_models.values()))\n def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n \n-def test_custom_model_separable():\n+# Test case for the issue described with nested CompoundModels\n+def test_separability_matrix_nested_compound_models():\n+    # Create a nested compound model\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    nested_model = m.Pix2Sky_TAN() & cm\n+\n+    # Expected separability matrix for the nested model as given in the issue\n+    expected_matrix = np.array([\n+        [True,  True, False, False],\n+        [True,  True, False, False],\n+        [False, False, True,  True],\n+        [False, False, True,  True]\n+    ])\n+\n+    # Assert the computed separability matrix matches the expected matrix\n+    assert np.array_equal(separability_matrix(nested_model), expected_matrix)\n+\n+    # Simple model without nesting to check the current correct behavior\n+    simple_model = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\n+    simple_expected_matrix = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, False],\n+        [False, False, False, True]\n+    ])\n+    assert np.array_equal(separability_matrix(simple_model), simple_expected_matrix)\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..35868f0 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,52 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+    def test_floating_point_edge_cases_card(self):\n+        \"\"\"\n+        Test edge cases for floating point number conversions in io.fits.Card.\n+        \"\"\"\n+\n+        # Changing to smaller precision examples\n+        k = \"FLOATEPS\"\n+        com = \"Edge case for float precision\"\n+        small_number = 1.2345678901234567e-10\n+        c = fits.Card(k, small_number, com)\n+        expected_str = f\"{k} = {small_number} / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Validating zero value handling\n+        zero_value = 0.0\n+        c = fits.Card(k, zero_value, com)\n+        expected_str = f\"{k} = 0.0 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Validating negative small precision numbers\n+        neg_small_number = -1.2345678901234567e-10\n+        c = fits.Card(k, neg_small_number, com)\n+        expected_str = f\"{k} = {neg_small_number} / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..53dbcea 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,31 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_fitsdiff_with_vla(self):\n+        \"\"\"Test FITSDiff handling with variable-length arrays (VLAs).\"\"\"\n+\n+        from astropy.io import fits\n+        import os\n+\n+        # Create a table with a VLA column\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        filename = 'diffbug_vla_test.fits'\n+        \n+        try:\n+            # Write the FITS file and perform the FITSDiff test\n+            hdu.writeto(filename, overwrite=True)\n+            \n+            # Compare the file to itself to check for false positives in differences\n+            diff = fits.FITSDiff(filename, filename)\n+            identical = diff.identical\n+            \n+            assert identical, \"FITSDiff reported differences for identical files with VLA.\"\n+        \n+        finally:\n+            # Clean up the created file\n+            if os.path.exists(filename):\n+                os.remove(filename)\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..20e3632 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -68,11 +68,41 @@ def test_JsonCustomEncoder():\n     newd = json.loads(tmp2)\n     tmpd = {\"a\": {\"unit\": \"cm\", \"value\": [0., 1.]}}\n     assert newd == tmpd\n+\n+def test_inherit_docstrings_with_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            pass\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n+\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     tmp3 = json.dumps({'a': np.arange(2)*u.erg/u.s}, cls=misc.JsonCustomEncoder)\n     newd = json.loads(tmp3)\n     tmpd = {\"a\": {\"unit\": \"erg / s\", \"value\": [0., 1.]}}\n     assert newd == tmpd\n \n+def test_inherit_docstrings_with_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            pass\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n+\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n+\n \n def test_inherit_docstrings():\n     class Base(metaclass=misc.InheritDocstrings):\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..5c741f2 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -194,8 +194,10 @@ def test_unknown_unit3():\n     with pytest.raises(ValueError):\n         unit4 = u.Unit(\"BAR\", parse_strict='strict')\n \n-    with pytest.raises(TypeError):\n-        unit5 = u.Unit(None)\n+    # Test that comparing an UnrecognizedUnit with None returns False,\n+    # rather than raising a TypeError (related to gh-7603).\n+    assert unit != None  # noqa\n+    assert not (unit == None)  # Should be False\n \n \n @raises(TypeError)\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..d15cb0d 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -61,15 +61,20 @@ def test_find_mod_objs():\n     assert 'namedtuple' not in lnms\n     assert 'collections.namedtuple' not in fqns\n     assert namedtuple not in objs\n-\n-\n-def test_minversion():\n+from distutils.version import LooseVersion\n+from pkg_resources import parse_version\n+\n+def test_minversion_issue_compatibility():\n+    # Verify the fix resolves the inability to compare '1.14.3' and '1.14dev'\n+    assert LooseVersion('1.14.3') >= LooseVersion('1.14dev') is False\n+    # However, using parse_version should resolve it correctly if allowed by changes:\n+    assert parse_version('1.14.3') >= parse_version('1.14dev')\n     from types import ModuleType\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    bad_versions = ['1', '1.2rc1', '1.14dev', '1.14.3']\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..978f4eb 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,42 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_header_fromstring_unicode(self):\n+        \"\"\"\n+        Test reading a Header from a unicode string.\n+        \"\"\"\n+\n+        header_str = (\n+            \"SIMPLE  =                    T / conforms to FITS standard\\n\"\n+            \"BITPIX  =                   16 / array data type\\n\"\n+            \"NAXIS   =                    0 / number of array dimensions\\n\"\n+            \"EXTEND  =                    T\\n\"\n+            \"END\"\n+        )\n+\n+        pri_hdr_from_unicode = fits.Header.fromstring(header_str)\n+        pri_hdr_expected = {\n+            'SIMPLE': True,\n+            'BITPIX': 16,\n+            'NAXIS': 0,\n+            'EXTEND': True\n+        }\n+\n+        for key, value in pri_hdr_expected.items():\n+            assert key in pri_hdr_from_unicode\n+            assert pri_hdr_from_unicode[key] == value\n+\n+    def test_card_fromstring_unicode(self):\n+        \"\"\"\n+        Test constructing a Card from a unicode string.\n+        \"\"\"\n+\n+        card_str = \"KEYWORD = 'value'\"\n+        card = fits.Card.fromstring(card_str)\n+\n+        assert card.keyword == 'KEYWORD'\n+        assert card.value == 'value'\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..674b412 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -25,7 +25,9 @@ try:\n     import matplotlib\n     matplotlib.use('Agg')\n     import matplotlib.pyplot as plt\n-    from distutils.version import LooseVersion\n+    import numpy as np\n+    import astropy.units as u\n+    import pytest\n     MATPLOTLIB_LT_15 = LooseVersion(matplotlib.__version__) < LooseVersion(\"1.5\")\n     HAS_MATPLOTLIB = True\n except ImportError:\n@@ -149,6 +151,15 @@ class TestQuantityCreation:\n \n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n+    def test_preserve_float16_dtype(self):\n+        \"\"\"Test that np.float16 within a Quantity retains its dtype, rather than being cast to float64.\"\"\"\n+        a_float16 = np.float16(1.0)\n+        q_float16 = u.Quantity(a_float16, u.m)\n+        assert q_float16.dtype == np.float16\n+\n+        array_float16 = np.array([1.0, 2.0], dtype=np.float16)\n+        q_array_float16 = u.Quantity(array_float16, u.km)\n+        assert q_array_float16.dtype == np.float16\n \n     def test_copy(self):\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..09c1862 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -214,6 +214,15 @@ TEST_DATA = [\n     (MinLengthValidator(10), '', ValidationError),\n \n     (URLValidator(EXTENDED_SCHEMES), 'file://localhost/path', None),\n+\n+    # Test cases for invalid URLs due to non-encoded characters in the username and password part\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), 'http://-.~_!$&\\'()*+,;=%40:80%2f@example.com', ValidationError),\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..8cd8c50 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -395,6 +397,21 @@ class AggregateTestCase(TestCase):\n         sql = ctx.captured_queries[0]['sql']\n         self.assertIn('SELECT COUNT(*) ', sql)\n \n+    def test_count_distinct_with_case_expression_varied_conditions(self):\n+        # Test case for distinct count combined with Case having a different condition\n+        aggs = Book.objects.aggregate(\n+            high_page_ratings=Count(Case(When(pages__lte=200, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['high_page_ratings'], 2)\n+\n+    def test_distinct_count_on_another_field_with_case(self):\n+        # Ensure count on distinct field other than 'rating' still works with Case\n+        aggs = Author.objects.aggregate(\n+            distinct_awards=Count(Case(When(age__gte=40, then='awards')), distinct=True),\n+        )\n+        # Assuming that we expect certain distinct awards count for authors aged over 40\n+        self.assertEqual(aggs['distinct_awards'], expected_count)\n+\n     def test_non_grouped_annotation_not_in_group_by(self):\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..3e557f0 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1093,7 +1093,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n-    def test_override_file_upload_permissions(self):\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        In absence of FILE_UPLOAD_PERMISSIONS setting, the default\n+        should be 0o644.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n         the file_permissions_mode attribute of\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..5bc5b9c 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -8,7 +10,23 @@ from django.test import SimpleTestCase\n \n class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n \n-    def _run_it(self, dbinfo):\n+    def _run_it_with_env(self, dbinfo):\n+        \"\"\"\n+        New function to test subprocess.run with setting the PGPASSWORD in the environment.\n+        Returns a 2-tuple with:\n+        - The command line list\n+        - The value of the PGPASSWORD environment variable, or None.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.subprocess_args = list(*args)\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(self.subprocess_args, 0)\n+\n+        self.subprocess_args = None\n+        self.pgpassword = None\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+        return self.subprocess_args, self.pgpassword\n         \"\"\"\n         That function invokes the runshell command, while mocking\n         subprocess.call. It returns a 2-tuple with:\n@@ -113,4 +131,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..b38ab4e 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,8 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n+from django.core.management import call_command\n \n \n @override_settings(\n@@ -63,4 +65,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..6047f9a 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\", \"newlineinmiddle\\nname\",\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +258,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..d69bc62 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -15,7 +15,29 @@ class RenderToStringTest(SimpleTestCase):\n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n-    def test_basic_context(self):\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        # In this case, the <script> tag should be escaped to &lt;script&gt;\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+        \n+    def test_no_autoescape_attribute_defaults_to_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR])\n+        # This tests the default behavior when autoescape is not explicitly set. \n+        # It should default to True, thus escaping <script> to &lt;script&gt;.\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..d4606f4 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -287,8 +287,21 @@ class QueryDictTests(SimpleTestCase):\n \n \n class HttpResponseTests(unittest.TestCase):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n \n-    def test_headers_type(self):\n+    def test_memoryview_empty(self):\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_with_mixed_content(self):\n+        r = HttpResponse(memoryview(b'mixed123'))\n+        self.assertEqual(r.content, b'mixed123')\n+\n+    def test_memoryview_binary_data(self):\n+        r = HttpResponse(memoryview(bytes([0, 255, 127, 65])))\n+        self.assertEqual(r.content, b'\\x00\\xff\\x7fA')\n         r = HttpResponse()\n \n         # ASCII strings or bytes values are converted to strings.\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..f3cf8ab 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -509,6 +509,53 @@ class LoaderTests(TestCase):\n         self.assertEqual(migrations, ['0001_initial'])\n \n \n+from django.test import override_settings\n+from django.db import connection\n+import os\n+import compileall\n+from .test_base import MigrationTestBase\n+from django.db.migrations.loader import MigrationLoader\n+\n+class NamespacePackageTestCase(MigrationTestBase):\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_empty_namespace_package'},\n+    )\n+    def test_empty_namespace_package(self):\n+        \"\"\"Empty namespace packages should not cause any issues.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertFalse(\n+            migration_loader.graph.nodes,\n+            \"No migrations should be loaded from an empty namespace package.\"\n+        )\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_multiple_versions'},\n+    )\n+    def test_multiple_versions_in_namespace(self):\n+        \"\"\"Ensure that multiple migrations in a namespace package are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        expected_plan = [\n+            ('migrations', '0001_initial'),\n+            ('migrations', '0002_auto'),\n+        ]\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0002_auto')),\n+            expected_plan,\n+            \"All migrations should be loaded from a namespace package with multiple versions.\"\n+        )\n+\n class PycLoaderTests(MigrationTestBase):\n \n     def test_valid(self):\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..45c3f80 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -635,8 +635,43 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, '<h2>Inner2s</h2>')\n         self.assertNotContains(response, 'Add another Inner2')\n         self.assertNotContains(response, 'id=\"id_inner2_set-TOTAL_FORMS\"')\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # Check for view-only permissions on inlines.\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n \n-    def test_inline_add_m2m_add_perm(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # Check for view-only permissions on inlines.\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n         permission = Permission.objects.get(codename='add_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(reverse('admin:admin_inlines_author_add'))\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..3acb3a5 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,6 +2900,16 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n+    def test_empty_fields(self):\n+        \"\"\"Test that model_to_dict returns an empty dict for empty fields list.\"\"\"\n+        bw = BetterWriter.objects.create(name='John Doe', score=5)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+        self.assertEqual(model_to_dict(bw, fields=None), {\n+            'id': bw.id, 'name': 'John Doe', 'score': 5, 'writer_ptr': bw.writer_ptr_id\n+        })\n+        # Verify behavior with exclude list combined with fields being empty\n+        self.assertEqual(model_to_dict(bw, fields=[], exclude=['id', 'score']), {})\n+\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..62f1a9f 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,5 +1,7 @@\n+\n from math import ceil\n \n+from django.db.models.deletion import Collector\n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -471,7 +473,33 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n-    def test_fast_delete_joined_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        # After deletion, u's pk should be set to None.\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_with_dependencies(self):\n+        a = Avatar.objects.create(desc='test_avatar')\n+        u = User.objects.create(avatar=a)\n+        # User should not be fast-deleted since it has dependencies.\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(u))\n+        u.delete()\n+        # After deletion, u's pk should still be set to None.\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_not_inherited_model(self):\n+        base_instance = Base.objects.create()\n+        # Base instance can be fast-deleted (no dependencies).\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(base_instance))\n+        base_instance.delete()\n+        # After deletion, base_instance's pk should be set to None.\n+        self.assertIsNone(base_instance.pk)\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n         u2 = User.objects.create()\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..8bf0ff9 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,17 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('0.{}1234'.format('0' * 299), 3, '0.000'),\n+\n+            # Additional test cases to verify the fix for small decimals:\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-250', 5, '0.00000'),\n+            ('5e-300', 10, '0.0000000000'),\n+            ('9e-201', 2, '0.00'),\n+            ('0.{}1'.format('0' * 298), 3, '0.000'),\n+            ('9.99e-10', 9, '0.000000001'),\n+            ('9.99e-10', 10, '0.0000000010'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..27fe16a 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -81,7 +83,22 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,\n+            )\n+        )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..e083345 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -97,8 +97,13 @@ class FilteredRelationTests(TestCase):\n             ).filter(book_alice__isnull=False),\n             [self.author1]\n         )\n-\n-    def test_with_join_and_complex_condition(self):\n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n                 book_alice=FilteredRelation(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..4771491 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -27,7 +27,7 @@ class TestUtilsHtml(SimpleTestCase):\n             ('<', '&lt;'),\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n-            (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n",
  "django__django-11292": "",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..f12e602 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,9 +1,30 @@\n+\n from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+from django.urls.resolvers import get_resolver\n from django.urls.resolvers import RegexPattern, RoutePattern\n from django.utils.translation import gettext_lazy as _\n \n \n-class RegexPatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # Test whether the resolver with no argument and with settings.ROOT_URLCONF is the same cached instance.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_different_urlconf(self):\n+        # Test that resolvers with different URLConfs are not the same instance.\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_after_first_request(self):\n+        # Test that after calling get_resolver with None initially and settings.ROOT_URLCONF later, the cached object remains the same.\n+        initial_resolver = get_resolver()\n+        # Mimic a request handling which sets the URL conf\n+        resolver_after_request = get_resolver(settings.ROOT_URLCONF)\n+        self.assertIs(initial_resolver, resolver_after_request)\n \n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n@@ -12,4 +33,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..21f537c 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -241,6 +241,22 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             email='test2@example.com',\n             password='test',\n         )\n+    def test_authenticate_no_username_or_password(self):\n+        \"\"\"\n+        authenticate() shouldn't query the database when username or password is None.\n+        \"\"\"\n+        # Ensure no calls to the database or password hasher.\n+        CountingMD5PasswordHasher.calls = 0\n+\n+        # Test with no username\n+        with self.assertNumQueries(0):\n+            authenticate(password='test')\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+        # Test with no password\n+        with self.assertNumQueries(0):\n+            authenticate(username='test')\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n \n     def test_authenticate_inactive(self):\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..e20cc9b 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,26 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_column_reordering_with_values_list(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+\n+        # Existing test case\n+        reserved_name = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name, (2,))\n+\n+        # New test case: changing the order of fields\n+        reserved_name_diff_order = qs1.union(qs1).values_list('order', 'name').get()\n+        self.assertEqual(reserved_name_diff_order, (2, 'a'))\n+\n+        # New test case: single field retrieval\n+        reserved_name_name_only = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name_name_only, ('a',))\n+\n+        # New test case: more than two fields, varying the order\n+        reserved_name_all_fields = qs1.union(qs1).values_list('order', 'name', 'id').first()\n+        self.assertEqual(reserved_name_all_fields[0], 2)\n+        self.assertEqual(reserved_name_all_fields[1], 'a')\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "",
  "django__django-11551": "",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..e18326c 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -2,6 +2,7 @@ from datetime import datetime\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from django.db import models\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n@@ -462,7 +463,38 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_expression_in_meta_ordering(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+\n+        # This is the original test case for context\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_order_by_expression_field_inheritance(self):\n+        # Testing if ordering with an expression in a parent model causes any issues\n+        # with a child class that doesn't declare its own Meta.ordering.\n+        articles = OrderedByFArticle.objects.order_by('headline')\n+        self.assertQuerysetEqual(\n+            articles,\n+            [self.a1, self.a2, self.a3, self.a4],\n+            transform=lambda x: x,\n+            ordered=True,\n+        )\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..0b86722 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -661,7 +661,32 @@ class AutodetectorTests(TestCase):\n         self.assertEqual([name for name, mgr in changes['otherapp'][0].operations[0].managers],\n                          ['food_qs', 'food_mgr', 'food_mgr_kwargs'])\n \n-    def test_old_model(self):\n+    def test_uuidfield_to_foreignkey(self):\n+        \"\"\"\n+        Test changing a UUIDField to a ForeignKey correctly adds the dependency\n+        between the related apps.\n+        \"\"\"\n+        app1_initial = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        app1_updated = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        app2 = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+\n+        changes = self.get_changes([app1_initial, app2], [app1_updated, app2])\n+        # Right number/type of migrations?\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        # Should have a dependency on testapp2\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         \"\"\"Tests deletion of old models.\"\"\"\n         changes = self.get_changes([self.author_empty], [])\n         # Right number/type of migrations?\n@@ -2399,4 +2424,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..ccb0ccc 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -219,11 +219,37 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options_kwargs(self):\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_id=2, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        management.call_command('mutually_exclusive_required', foo_name='bar', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+    def test_mutually_exclusive_group_no_argument(self):\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_args(self):\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options_kwargs(self):\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_id=2, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        management.call_command('mutually_exclusive_required', foo_name='bar', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+    def test_mutually_exclusive_group_no_argument(self):\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..34699d0 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,18 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_renders_maxlength(self):\n+        # Test case for ensuring the maxlength HTML attribute is set correctly\n+        form = AuthenticationForm()\n+        self.assertIn('maxlength', form.fields['username'].widget.attrs)\n+        self.assertEqual(form.fields['username'].widget.attrs['maxlength'], 255)\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_default_maxlength_attribute(self):\n+        # Test case for ensuring the default maxlength is set when the user model doesn't specify it\n+        form = AuthenticationForm()\n+        self.assertIn('maxlength', form.fields['username'].widget.attrs)\n+        self.assertEqual(form.fields['username'].widget.attrs['maxlength'], 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..747814e 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -247,7 +247,21 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n-    def test_serialize_lazy_objects(self):\n+    def test_serialize_enum_with_translation(self):\n+        from django.utils.translation import gettext_lazy as _\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.value, m.name) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('Good', 'GOOD'), \"\n+            \"('Bad', 'BAD')], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..636e554 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -306,8 +307,40 @@ class ETagProcessingTests(unittest.TestCase):\n         self.assertEqual(quote_etag('\"etag\"'), '\"etag\"')  # quoted\n         self.assertEqual(quote_etag('W/\"etag\"'), 'W/\"etag\"')  # quoted, weak\n \n+from unittest import mock\n \n class HttpDateProcessingTests(unittest.TestCase):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mock(self, mocked_datetime):\n+        # Mock the datetime to ensure we test the behavior around two-digit year resolution.\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Define various utcnow points to test against different two-digit year resolve scenarios\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+\n+        tests = (\n+            # For utcnow in 2019, years > current year + 50 should resolve to 19xx\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+\n+            # For utcnow in 2020, years > 2070 should resolve to 19xx\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+\n+            # For utcnow in 2048, years > 2098 should resolve to 20xx\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n     def test_http_date(self):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n",
  "django__django-11880": "",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..d960c59 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -205,6 +207,31 @@ class BulkCreateTests(TestCase):\n         NoFields.objects.bulk_create([NoFields() for i in range(2)])\n         self.assertEqual(NoFields.objects.count(), 2)\n \n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        # Verify that max_batch_size is used instead of batch_size+1\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_implicit_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = connection.ops.bulk_batch_size(fields, objs)\n+        # While we won't assert the exact number of queries, implicit batch sizes should be handled correctly\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_low_explicit_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        # Setting a very low batch size explicitly\n+        with self.assertNumQueries(ceil(len(objs) / 10)):\n+            Country.objects.bulk_create(objs, batch_size=10)\n+\n     @skipUnlessDBFeature('has_bulk_insert')\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..78a3601 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -40,7 +40,33 @@ class Gender(models.TextChoices):\n     __empty__ = '(Undeclared)'\n \n \n-class ChoicesTests(SimpleTestCase):\n+class EnumChoiceModelTests(TestCase):\n+    class MyChoice(models.TextChoices):\n+        FIRST_CHOICE = \"first\", \"The first choice, it is\"\n+        SECOND_CHOICE = \"second\", \"The second choice, it is\"\n+\n+    class MyEnumObject(models.Model):\n+        my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+    def setUp(self):\n+        self.my_object = self.MyEnumObject.objects.create(my_str_value=self.MyChoice.FIRST_CHOICE)\n+\n+    def test_enum_assignment_type(self):\n+        \"\"\"Test that assigned enum value retains str type in the model.\"\"\"\n+        self.assertIsInstance(self.my_object.my_str_value, str)\n+        self.assertEqual(self.my_object.my_str_value, 'first')\n+\n+    def test_enum_retrieval_type(self):\n+        \"\"\"Test that retrieved enum value retains str type.\"\"\"\n+        obj = self.MyEnumObject.objects.get(id=self.my_object.id)\n+        self.assertIsInstance(obj.my_str_value, str)\n+        self.assertEqual(obj.my_str_value, 'first')\n+\n+    def test_enum_str_conversion_preserved(self):\n+        \"\"\"Test to ensure __str__ conversion doesn't change underlying value type.\"\"\"\n+        self.assertEqual(str(self.my_object.my_str_value), \"first\")\n+        obj = self.MyEnumObject.objects.get(id=self.my_object.id)\n+        self.assertEqual(str(obj.my_str_value), \"first\")\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..9aaf274 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -138,7 +138,24 @@ class ChoicesTests(SimpleTestCase):\n \n     def test_formfield(self):\n         no_choices_formfield = self.no_choices.formfield()\n-        self.assertIsInstance(no_choices_formfield, forms.IntegerField)\n+import unittest\n+from django.db import models\n+\n+class OverrideGetFieldDisplayTests(unittest.TestCase):\n+\n+    def test_overriding_get_FOO_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(_(\"foo\"), choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+            def __str__(self):\n+                return self.get_foo_bar_display()\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+        self.assertEqual(str(f), 'something')\n         fields = (\n             self.empty_choices, self.with_choices, self.empty_choices_bool,\n             self.empty_choices_text,\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..c6b83b3 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db.models import Index\n+from django.db import connection\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db.models import Index\n+from django.db import connection\n \n \n class SchemaIndexesTests(TestCase):\n@@ -75,8 +79,45 @@ class SchemaIndexesTests(TestCase):\n         index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList)\n         self.assertEqual(len(index_sql), 1)\n \n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n \n-@skipIf(connection.vendor == 'postgresql', 'opclasses are PostgreSQL only')\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n class SchemaIndexesNotPostgreSQLTests(TransactionTestCase):\n     available_apps = ['indexes']\n \n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..e9a1de1 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,6 +8,7 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n+from django.db.models.lookups import Exact\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n@@ -107,6 +109,46 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n+    def test_iterable_lookup_value(self):\n+        # Original test, ensures the lookup works for list inputs\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_iterable_as_tuple(self):\n+        # Ensures the lookup correctly handles tuple inputs and does not coerce them\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('x', 'y')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('x', 'y'))\n+\n+    def test_single_value_lookup(self):\n+        # Tests lookup when a single value is provided\n+        query = Query(Item)\n+        where = query.build_where(Q(name='z'))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, 'z')\n+\n+    def test_empty_list_lookup(self):\n+        # Tests lookup when an empty iterable list is provided\n+        query = Query(Item)\n+        where = query.build_where(Q(name=[]))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, [])\n+\n+    def test_empty_tuple_lookup(self):\n+        # Tests lookup when an empty iterable tuple is provided\n+        query = Query(Item)\n+        where = query.build_where(Q(name=()))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ())\n+\n     def test_clone_select_related(self):\n         query = Query(Item)\n         query.add_select_related(['creator'])\n",
  "django__django-12125": "",
  "django__django-12143": "",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..bea1770 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -90,7 +91,25 @@ class TestUtils(AdminDocsSimpleTestCase):\n         )\n         self.assertHTMLEqual(description_output, description_rendered)\n \n-    def test_initial_header_level(self):\n+    def test_trim_docstring_with_first_line_content(self):\n+        \"\"\"\n+        Test that trim_docstring handles first line content correctly.\n+        \"\"\"\n+        docstring = 'First line\\n\\n    Second line\\n        Third line'\n+        expected = 'First line\\n\\nSecond line\\n    Third line'\n+        result = trim_docstring(docstring)\n+        self.assertEqual(result, expected)\n+\n+    def test_parse_docstring_with_first_line_content(self):\n+        \"\"\"\n+        Test that parse_docstring handles first line content correctly.\n+        \"\"\"\n+        docstring = 'First line\\n\\n    Second line\\n        Third line'\n+        expected_title = 'First line'\n+        expected_body = 'Second line\\n    Third line'\n+        title, body, _ = parse_docstring(docstring)\n+        self.assertEqual(title, expected_title)\n+        self.assertEqual(body, expected_body)\n         header = 'should be h3...\\n\\nHeader\\n------\\n'\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..1ff8f6e 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,27 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_splitarrayfield_with_booleanfield_initial_data(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        # Initial data where the first 'True' value appears at index 1\n+        initial_data = [False, True, False, False]\n+        context = widget.get_context('name', initial_data)\n+        \n+        # Extracting the 'checked' attribute from each subwidget's attributes\n+        checked_statuses = [subwidget['attrs'].get('checked', False) for subwidget in context['widget']['subwidgets']]\n+        \n+        self.assertEqual(checked_statuses, [False, True, False, False], \"The 'checked' attributes should match the initial data.\")\n+\n+    def test_splitarrayfield_with_all_false(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        # Initial data where all values are False\n+        initial_data = [False, False, False]\n+        context = widget.get_context('name', initial_data)\n+        \n+        checked_statuses = [subwidget['attrs'].get('checked', False) for subwidget in context['widget']['subwidgets']]\n+        \n+        self.assertEqual(checked_statuses, [False, False, False], \"All 'checked' attributes should be False.\")\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "diff --git a/tests/serializers/test_data.py b/tests/serializers/test_data.py\nindex abbb3ab..5c4e202 100644\n--- a/tests/serializers/test_data.py\n+++ b/tests/serializers/test_data.py\n@@ -14,6 +14,7 @@ from django.core import serializers\n from django.db import connection, models\n from django.test import TestCase\n \n+import uuid\n from .models import (\n     Anchor, AutoNowDateTimeData, BigIntegerData, BinaryData, BooleanData,\n     BooleanPKData, CharData, CharPKData, DateData, DatePKData, DateTimeData,\n@@ -26,7 +27,7 @@ from .models import (\n     ModifyingSaveData, NullBooleanData, O2OData, PositiveBigIntegerData,\n     PositiveIntegerData, PositiveIntegerPKData, PositiveSmallIntegerData,\n     PositiveSmallIntegerPKData, SlugData, SlugPKData, SmallData, SmallPKData,\n-    Tag, TextData, TimeData, UniqueAnchor, UUIDData,\n+    Tag, TextData, TimeData, UniqueAnchor, UUIDData, UUIDDefaultData,\n )\n from .tests import register_tests\n \n@@ -350,6 +351,7 @@ The end.\"\"\"),\n     # (pk_obj, 770, TimePKData, datetime.time(10, 42, 37)),\n     # (pk_obj, 790, XMLPKData, \"<foo></foo>\"),\n     (pk_obj, 791, UUIDData, uuid_obj),\n+    (pk_obj, 793, UUIDDefaultData, uuid_obj),\n     (fk_obj, 792, FKToUUID, uuid_obj),\n \n     (data_obj, 800, AutoNowDateTimeData, datetime.datetime(2006, 6, 16, 10, 42, 37)),\n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..52a0a25 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -101,6 +101,10 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            (\"'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}')\n         ]\n \n         for entry in errors:\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..c84d1bf 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2478,7 +2479,31 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n \n-    def test_filefield_initial_callable(self):\n+    def test_filefield_with_fileinput_required(self):\n+        class FileForm(Form):\n+            file1 = forms.FileField(widget=FileInput)\n+\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # A required file field with initial data doesn't contain the required\n+        # HTML attribute. The file input is left blank by the user to keep the\n+        # existing, initial value.\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_fileinput_use_required_attribute(self):\n+        # False when initial data exists. The file input is left blank by the\n+        # user to keep the existing, initial value.\n+        widget = FileInput()\n+        self.assertIs(widget.use_required_attribute(None), True)\n+        self.assertIs(widget.use_required_attribute('resume.txt'), False)\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n \n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..adb14ea 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -143,7 +144,13 @@ class ChoicesTests(SimpleTestCase):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n-    def test_str(self):\n+    def test_enum_in_templates(self):\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}FRESHMAN{% else %}NOT FRESHMAN{% endif %}')\n+        output = template.render(Context({'student': {'year_in_school': YearInSchool.FRESHMAN}}))\n+        self.assertEqual(output, 'FRESHMAN')\n+\n+        output = template.render(Context({'student': {'year_in_school': YearInSchool.SOPHOMORE}}))\n+        self.assertEqual(output, 'NOT FRESHMAN')\n         for test in [Gender, Suit, YearInSchool, Vehicle]:\n             for member in test:\n                 with self.subTest(member=member):\n",
  "django__django-12308": "",
  "django__django-12325": "",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..8842a71 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -223,6 +223,25 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         ret = self.process_request(\"get\", \"/some/url\")\n         self.assertIsNone(ret)\n \n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        When SECURE_REFERRER_POLICY is set to 'same-origin', \n+        the middleware adds a \"Referrer-Policy: same-origin\" header to the response.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertIn('Referrer-Policy', response)\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n+\n+    @override_settings(SECURE_REFERRER_POLICY='')\n+    def test_empty_referrer_policy(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY set to an empty string, the middleware \n+        does not add a \"Referrer-Policy\" header to the response.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertNotIn('Referrer-Policy', response)\n+\n     @override_settings(SECURE_REFERRER_POLICY=None)\n     def test_referrer_policy_off(self):\n         \"\"\"\n@@ -254,4 +273,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..0215338 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -14,6 +14,7 @@ from django.db.models import (\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n )\n@@ -35,6 +36,10 @@ class BasicExpressionsTests(TestCase):\n             name=\"Example Inc.\", num_employees=2300, num_chairs=5,\n             ceo=Employee.objects.create(firstname=\"Joe\", lastname=\"Smith\", salary=10)\n         )\n+        cls.manager_john = Employee.objects.create(firstname=\"John\", lastname=\"Doe\", salary=20)\n+        cls.manager_jane = Employee.objects.create(firstname=\"Jane\", lastname=\"Roe\", salary=25)\n+        cls.max = Employee.objects.create(firstname=\"Max\", lastname=\"Planck\", salary=30)\n+        \n         cls.foobar_ltd = Company.objects.create(\n             name=\"Foobar Ltd.\", num_employees=3, num_chairs=4, based_in_eu=True,\n             ceo=Employee.objects.create(firstname=\"Frank\", lastname=\"Meyer\", salary=20)\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..54d883f 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,7 +1759,39 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together_refactored(self):\n+        \"\"\"\n+        Test for removing index_together when unique_together is present.\n+        Ensures that the migration handles this situation correctly and\n+        does not attempt to delete the unique constraint.\n+        \"\"\"\n+        app_label = 'test_alternate_index_and_unique_constraints'\n+        table_name = '%s_pony' % app_label\n+        \n+        # Setup initial model state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..f4e6ac3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..8396955 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -14,6 +14,7 @@ from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n )\n \n+from datetime import datetime\n \n class LookupTests(TestCase):\n \n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..a9fc938 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -893,7 +893,27 @@ class OtherModelTests(SimpleTestCase):\n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n \n-    def test_ordering_pointing_to_related_model_pk(self):\n+    def test_ordering_pointing_to_lookup_not_transform_with_fk_path(self):\n+        \"\"\"\n+        Test ordering using a path through ForeignKey fields with a lookup that isn't\n+        a part of a transform, specifically `isnull`.\n+        \"\"\"\n+        class Parent(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..5d93205 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,29 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        from django.db.models.functions import Lower\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_group_by_with_integer_constant(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        sql, params = expr.as_sql(compiler=None, connection=None, template=None)  # mock or pass actual connection\n+        self.assertNotIn(\"GROUP BY\", sql.upper())\n+        \n+    def test_group_by_with_nested_expression(self):\n+        from django.db.models import F\n+        expr = ExpressionWrapper(F('some_field') + Value(1), output_field=IntegerField())\n+        group_by_cols = expr.get_group_by_cols(alias=None)\n+        self.assertIn(expr.expression, group_by_cols)\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..60ce1c4 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1211,6 +1211,24 @@ class Queries1Tests(TestCase):\n         )\n \n \n+class ProductMetaDataTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.product_type = ProductMetaDataType.objects.create(label=\"Sample Type\", filterable=False)\n+        cls.product_data = ProductMetaData.objects.create(value=\"Dark Vador\", metadata_type=cls.product_type)\n+\n+    def test_filter_with_non_filterable_field(self):\n+        # Test that filtering using the non-filterable field does not raise an error\n+        try:\n+            results = ProductMetaData.objects.filter(metadata_type=self.product_type, value=\"Dark Vador\")\n+            self.assertEqual(len(results), 1)\n+            self.assertEqual(results.first(), self.product_data)\n+        except NotSupportedError as e:\n+            self.fail(f\"NotSupportedError raised unexpectedly: {e}\")\n+\n+from django.test import TestCase\n+from .models import ProductMetaDataType, ProductMetaData\n+\n class Queries2Tests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13033": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\nindex ec1f9e4..93798a1 100644\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -12,8 +12,8 @@ The special-case field name ``\"?\"`` specifies random order.\n The ordering attribute is not required. If you leave it off, ordering will be\n undefined -- not random, just undefined.\n \"\"\"\n-\n from django.db import models\n+from django.utils import timezone\n \n \n class Author(models.Model):\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..8c121ef 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -617,8 +617,53 @@ class BaseCacheTests:\n \n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n+        \n+    def test_cull_no_records(self):\n+        \"\"\"Test _cull behavior when no records exist to cull.\"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        \n+        old_max_entries = cull_cache._max_entries\n+        cull_cache.clear()  # Clear cache to ensure it's empty\n+        \n+        # Force _cull to execute with no entries.\n+        cull_cache._max_entries = 1\n+        try:\n+            cull_cache._cull('default', cull_cache._get_connection().cursor(), now=cull_cache.default_timeout)\n+            # If no exception is raised, the issue is fixed.\n+            self.assertTrue(True)\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n \n-    def test_zero_cull(self):\n+    def test_cull_no_results_from_query(self):\n+        \"\"\"Test if the cursor fetchone returns no result gracefully.\"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        \n+        old_max_entries = cull_cache._max_entries\n+        cull_cache.clear()\n+        \n+        # Force situations with large entries but none that match the cull condition\n+        cull_cache._max_entries = 1\n+        try:\n+            # Insert only items with high cache_key values\n+            for i in range(100):\n+                key = f'key{i:07d}'\n+                cull_cache.set(key, 'value', 1000)\n+            \n+            with cull_cache._get_connection().cursor() as cursor:\n+                cursor.execute(\"DELETE FROM %s WHERE cache_key < %%s\" % cull_cache._table, [9999999])\n+                self.assertIsNone(cursor.fetchone())\n+            \n+            cull_cache._cull('default', cull_cache._get_connection().cursor(), now=cull_cache.default_timeout)\n+            # If no exception is raised, the issue is fixed.\n+            self.assertTrue(True)\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n         self._perform_cull_test('zero_cull', 50, 19)\n \n     def _perform_invalid_key_test(self, key, expected_warning):\n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..fe62df9 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,6 +1645,59 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n+from django.test import TestCase\n+from django import forms\n+from .models import Writer, Article\n+import datetime\n+\n+\n+class ForeignKeyValidationTests(TestCase):\n+    def setUp(self):\n+        # Create a Writer with archived True\n+        self.archived_writer = Writer.objects.create(name='Archived Writer')\n+\n+    def test_validate_foreign_key_uses_base_manager_for_allowance(self):\n+        class ArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                # Ensure using the base manager to allow archived writers\n+                self.fields['writer'].queryset = Writer._base_manager.all()\n+\n+        form = ArticleForm({\n+            'title': 'Test Article',\n+            'writer': self.archived_writer.pk,\n+        })\n+\n+        # Test that the form is valid using the base manager\n+        self.assertTrue(form.is_valid())\n+\n+        # Save the article and verify the writer\n+        article = form.save()\n+        self.assertEqual(article.writer, self.archived_writer)\n+\n+    def test_validate_foreign_key_fails_with_default_manager(self):\n+        class ArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+        form = ArticleForm({\n+            'title': 'Test Article',\n+            'writer': self.archived_writer.pk,\n+        })\n+\n+        # Test that the form is not valid using the default manager\n+        self.assertFalse(form.is_valid())\n+\n+        # Ensure the specific error message\n+        self.assertIn('writer', form.errors)\n+        self.assertEqual(form.errors['writer'], [\"Select a valid choice. That choice is not one of the available choices.\"])\n+\n+\n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13112": "",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..e0ed152 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1209,6 +1209,24 @@ class ExpressionOperatorTests(TestCase):\n         Number.objects.filter(pk=self.n.pk).update(integer=F('integer') ** 2, float=F('float') ** 1.5)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n+    def test_duration_expressions_with_invalid(self):\n+        invalid_value = None\n+        with self.assertRaises(TypeError):\n+            Experiment.objects.annotate(duration=F('estimated_time') + invalid_value).get()\n+\n+    def test_duration_expressions_with_zero(self):\n+        delta = datetime.timedelta(0)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+        expected_duration = lambda obj: obj.estimated_time + delta\n+        for obj in qs:\n+            self.assertEqual(obj.duration, expected_duration(obj))\n+    \n+    def test_duration_expressions_with_negative(self):\n+        delta = datetime.timedelta(days=-1)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+        expected_duration = lambda obj: obj.estimated_time + delta\n+        for obj in qs:\n+            self.assertEqual(obj.duration, expected_duration(obj))\n \n     @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n     def test_lefthand_bitwise_xor(self):\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..65fb8e5 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1491,6 +1491,22 @@ class FTimeDeltaTests(TestCase):\n                 self.assertEqual(obj.duration, obj.estimated_time + delta)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Testing temporal subtraction directly (issue fix)\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n+\n+        # Additional check for edge cases\n+        queryset = Experiment.objects.annotate(\n+            delta=F('start') - F('end')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.start - experiment.end\n+            self.assertEqual(experiment.delta, expected_delta)\n     def test_date_subtraction(self):\n         queryset = Experiment.objects.annotate(\n             completion_duration=ExpressionWrapper(\n@@ -1520,6 +1536,23 @@ class FTimeDeltaTests(TestCase):\n         self.assertIsNone(queryset.first().shifted)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Testing temporal subtraction directly (issue fix)\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n+\n+        # Additional check for edge cases\n+        queryset = Experiment.objects.annotate(\n+            delta=F('start') - F('end')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.start - experiment.end\n+            self.assertEqual(experiment.delta, expected_delta)\n+    \n     def test_date_subquery_subtraction(self):\n         subquery = Experiment.objects.filter(pk=OuterRef('pk')).values('completed')\n         queryset = Experiment.objects.annotate(\n@@ -1530,6 +1563,22 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Testing temporal subtraction directly (issue fix)\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n+\n+        # Additional check for edge cases\n+        queryset = Experiment.objects.annotate(\n+            delta=F('start') - F('end')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.start - experiment.end\n+            self.assertEqual(experiment.delta, expected_delta)\n     def test_date_case_subtraction(self):\n         queryset = Experiment.objects.annotate(\n             date_case=Case(\n@@ -1547,6 +1596,22 @@ class FTimeDeltaTests(TestCase):\n         self.assertEqual(queryset.get(), self.e0)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Testing temporal subtraction directly (issue fix)\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n+\n+        # Additional check for edge cases\n+        queryset = Experiment.objects.annotate(\n+            delta=F('start') - F('end')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.start - experiment.end\n+            self.assertEqual(experiment.delta, expected_delta)\n     def test_time_subtraction(self):\n         Time.objects.create(time=datetime.time(12, 30, 15, 2345))\n         queryset = Time.objects.annotate(\n@@ -1573,6 +1638,22 @@ class FTimeDeltaTests(TestCase):\n         self.assertIsNone(queryset.first().shifted)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Testing temporal subtraction directly (issue fix)\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n+\n+        # Additional check for edge cases\n+        queryset = Experiment.objects.annotate(\n+            delta=F('start') - F('end')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.start - experiment.end\n+            self.assertEqual(experiment.delta, expected_delta)\n     def test_time_subquery_subtraction(self):\n         Time.objects.create(time=datetime.time(12, 30, 15, 2345))\n         subquery = Time.objects.filter(pk=OuterRef('pk')).values('time')\n@@ -1584,6 +1665,22 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Testing temporal subtraction directly (issue fix)\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n+\n+        # Additional check for edge cases\n+        queryset = Experiment.objects.annotate(\n+            delta=F('start') - F('end')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.start - experiment.end\n+            self.assertEqual(experiment.delta, expected_delta)\n     def test_datetime_subtraction(self):\n         under_estimate = [\n             e.name for e in Experiment.objects.filter(estimated_time__gt=F('end') - F('start'))\n@@ -1608,6 +1705,22 @@ class FTimeDeltaTests(TestCase):\n         self.assertIsNone(queryset.first().shifted)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Testing temporal subtraction directly (issue fix)\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n+\n+        # Additional check for edge cases\n+        queryset = Experiment.objects.annotate(\n+            delta=F('start') - F('end')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.start - experiment.end\n+            self.assertEqual(experiment.delta, expected_delta)\n     def test_datetime_subquery_subtraction(self):\n         subquery = Experiment.objects.filter(pk=OuterRef('pk')).values('start')\n         queryset = Experiment.objects.annotate(\n@@ -1618,6 +1731,22 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Testing temporal subtraction directly (issue fix)\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n+\n+        # Additional check for edge cases\n+        queryset = Experiment.objects.annotate(\n+            delta=F('start') - F('end')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.start - experiment.end\n+            self.assertEqual(experiment.delta, expected_delta)\n     def test_datetime_subtraction_microseconds(self):\n         delta = datetime.timedelta(microseconds=8999999999999999)\n         Experiment.objects.update(end=F('start') + delta)\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..9e8d1f0 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,45 @@\n import operator\n \n+from django.forms import ModelForm\n+from .models import Article, Publication\n+\n+class ArticleForm(ModelForm):\n+    class Meta:\n+        model = Article\n+        fields = ['publications']\n+\n+    publications = forms.ModelMultipleChoiceField(\n+        queryset=None,\n+        required=False,\n+    )\n+\n+class QuerySetIssueTests(TestCase):\n+    def test_union_none_in_form(self):\n+        # Create some publications\n+        pub1 = Publication.objects.create(id=1)\n+        pub2 = Publication.objects.create(id=2)\n+        pub3 = Publication.objects.create(id=6)\n+        pub4 = Publication.objects.create(id=8)\n+\n+        # Form with union query\n+        form = ArticleForm(data={'publications': []})\n+        form.fields['publications'].queryset = Publication.objects.filter(id__lt=2).union(\n+            Publication.objects.filter(id__gt=5)\n+        )\n+        \n+        # Ensure the form shows the correct queryset\n+        self.assertCountEqual(\n+            form.fields['publications'].queryset,\n+            [pub1, pub3, pub4]\n+        )\n+\n+        # Submit the form without selecting any publications\n+        form.save()\n+\n+        # Check no publications are added to the article\n+        article = Article.objects.create()\n+        self.assertCountEqual(article.publications.all(), [])\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..86c882f 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -31,9 +31,10 @@ from django.core.cache.backends.base import InvalidCacheBackendError\n from django.core.exceptions import ImproperlyConfigured, SuspiciousOperation\n from django.http import HttpResponse\n from django.test import (\n-    RequestFactory, TestCase, ignore_warnings, override_settings,\n+    RequestFactory, TestCase, ignore_warnings, override_settings, SimpleTestCase\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -323,6 +324,14 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorith_legacy_decode(self):\n+        # Test legacy session decoding when the hashing algorithm is set to 'sha1'\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n     def test_decode_failure_logged_to_security(self):\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..16be472 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -9,8 +9,10 @@ from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n-\n-from . import views\n+from django.test import TestCase\n+from django.shortcuts import get_object_or_404\n+from django.urls import path\n+from .models import Account, Artist\n \n \n class SimpleView(View):\n@@ -590,7 +592,21 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        account = Account.objects.create(slug='special-offer')\n+        rf = RequestFactory()\n+        response = OfferView.as_view()(rf.get('/offers/special-offer/'), offer_slug=account.slug)\n+        self.assertEqual(response.context_data['offer'], account)\n+        self.assertEqual(response.context_data['offer_slug'], 'special-offer')\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..3e1f208 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,8 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n+from django.forms import ModelForm\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2830,6 +2832,71 @@ class LimitChoicesToTests(TestCase):\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n \n+class ForeignKeyLimitChoicesTests(TestCase):\n+    def setUp(self):\n+        # Create Characters\n+        self.marley = Character.objects.create(username=\"Marley\", last_action=\"2022-10-01\")\n+        self.threepwood = Character.objects.create(username=\"Threepwood\", last_action=\"2022-10-01\")\n+\n+        # Create StumpJokes\n+        self.joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        self.joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        self.joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+\n+        self.joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        self.joke2.has_fooled_today.add(self.marley)\n+        self.joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+\n class FormFieldCallbackTests(SimpleTestCase):\n \n     def test_baseform_with_widgets_in_meta(self):\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..5cccda0 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -66,8 +66,26 @@ class GetStorageClassTests(SimpleTestCase):\n             get_storage_class('django.core.files.nonexistent_storage.NonexistentStorage')\n \n \n+from unittest import mock\n+\n class FileSystemStorageTests(unittest.TestCase):\n \n+    def test_file_field_callable_storage_deconstruction(self):\n+        \"\"\"Test that a FileField with callable storage correctly deconstructs to reference the callable without evaluation.\"\"\"\n+        obj = Storage()\n+        _, _, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        self.assertIn('storage', kwargs)\n+        self.assertIs(kwargs['storage'], callable_storage)\n+\n+    def test_deconstruct_with_mock_storage(self):\n+        \"\"\"Test deconstruction with a mocked callable storage to ensure it returns the callable.\"\"\"\n+        mock_storage_callable = mock.Mock(return_value=temp_storage)\n+        field = FileField(storage=mock_storage_callable)\n+        _, _, kwargs = field.deconstruct()\n+        self.assertIn('storage', kwargs)\n+        # The original callable should be returned, not the evaluated storage.\n+        self.assertIs(kwargs['storage'], mock_storage_callable)\n+\n     def test_deconstruction(self):\n         path, args, kwargs = temp_storage.deconstruct()\n         self.assertEqual(path, \"django.core.files.storage.FileSystemStorage\")\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..ec0b45e 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,7 +623,19 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n-    def test_key_iexact(self):\n+    def test_key_in(self):\n+        tests = [\n+            ('value__key__in', [0], self.objs[3:5]),  # Assuming objs[3:5] have value=0 for key\n+            ('value__key__in', [0, 1], self.objs[3:6]),  # Assuming objs[5:6] have value=1 for key\n+            ('value__key__in', [1], [self.objs[5]]),  # Assuming objs[5] has value=1 for key\n+            ('value__key__in', [2, 3], [self.objs[6]]),  # Assuming objs[6] has value=2 for key\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..3f324fb 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -19,6 +19,8 @@ from django.test import (\n )\n from django.utils import timezone\n \n+import pytz\n+from datetime import datetime\n from ..models import Author, DTModel, Fan\n \n \n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..1b21a06 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,7 +103,39 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n-class ChoicesTests(SimpleTestCase):\n+class FieldEqualityTests(TestCase):\n+    def test_inherited_fields_equality_and_ordering(self):\n+        \"\"\"\n+        Test that fields from inherited abstract models are compared correctly.\n+        \"\"\"\n+\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        # Get field instances\n+        field1 = InheritAbstractModel1._meta.get_field('field')\n+        field2 = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Test equality\n+        self.assertNotEqual(field1, field2, \"Fields from different models should not be equal.\")\n+\n+        # Test hash inequality\n+        self.assertNotEqual(hash(field1), hash(field2), \"Hashes for fields from different models should not be equal.\")\n+\n+        # Test ordering; assume creation_counter could be the same without distinguishing by model.\n+        self.assertFalse(field1 < field2 and field2 < field1, \n+                         \"Fields from different models should not reverse if ordered based solely on model.\")\n+\n+        # Add more assertions if necessary to cover additional edge cases.\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..028b19a 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -8,7 +9,7 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n@@ -181,6 +182,47 @@ class NoNameFileTestCase(unittest.TestCase):\n     def test_noname_file_get_size(self):\n         self.assertEqual(File(BytesIO(b'A file with no name')).size, 19)\n \n+class FileLockTestCase(unittest.TestCase):\n+\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'wb') as f:\n+            f.write(b'Test image data')\n+\n+        with open(file_path, 'rb') as f1, open(file_path, 'rb') as f2:\n+            # Acquire an exclusive lock on f1\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            # Try to acquire an exclusive lock on f2 non-blocking (should fail)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            # Try to acquire a shared lock on f2 non-blocking (should fail)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            # Unlock f1\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        \n+        with open(file_path, 'wb') as f:\n+            f.write(b'Test image data')\n+        \n+        with open(file_path, 'rb') as f1, open(file_path, 'rb') as f2:\n+            # Acquire a shared lock on f1\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            # Acquire another shared lock on f2 non-blocking (should succeed)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            # Unlock both f1 and f2\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_unlocked_file(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        \n+        with open(file_path, 'wb') as f:\n+            f.write(b'Test image data')\n+\n+        with open(file_path, 'rb') as f:\n+            # Try to unlock a file that hasn't been locked\n+            self.assertIs(locks.unlock(f), True)\n \n class ContentFileTestCase(unittest.TestCase):\n     def test_content_file_default_name(self):\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..f8c2386 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,28 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotate_without_ordering(self):\n+        # Annotate without additional ordering\n+        qs = Annotation.objects.annotate(note_count=Count('notes'))\n+        self.assertIs(qs.ordered, False)  # No ORDER BY clause expected in SQL\n+\n+    def test_annotate_with_meta_ordering(self):\n+        # Annotate query with model's Meta ordering present\n+        qs = Annotation.objects.annotate(note_count=Count('notes'))\n+        self.assertFalse(qs.ordered, \"Annotate shouldn't cause ordering if GROUP BY is present\")\n+\n+    def test_annotate_then_order_by(self):\n+        # Annotate and then manually specify order\n+        qs = Annotation.objects.annotate(note_count=Count('notes')).order_by('note_count')\n+        self.assertIs(qs.ordered, True)\n+\n+    def test_order_by_after_values_and_annotate(self):\n+        # Values followed by annotate should not retain default ordering\n+        qs = Annotation.objects.values('name').annotate(note_count=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+        qs = qs.order_by('name')\n+        self.assertIs(qs.ordered, True)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..d8e55a4 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -345,6 +345,13 @@ class CommandTests(SimpleTestCase):\n class CommandRunTests(AdminScriptTestCase):\n     \"\"\"\n     Tests that need to run by simulating the command line, not by call_command.\n+\n+class MigrationFlushTests(TestCase):\n+    def test_flush_during_migration(self):\n+        out = StringIO()\n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            management.call_command('migrate', stdout=out)\n+        self.assertIs(mocked_flush.called, True, \"flush() should be called during migration\")\n     \"\"\"\n     def test_script_prefix_set_in_commands(self):\n         self.write_settings('settings.py', apps=['user_commands'], sdict={\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..b4e9622 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +39,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..a9c95b6 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,7 +1,9 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n+from django.db.models import Q, UniqueConstraint\n from django.core import checks\n from django.db import models\n from django.test import (\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..8e0f058 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,24 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_random_ordering_does_not_affect_group_by(self):\n+        \"\"\"Test that using Random() for ordering doesn't alter GROUP BY for aggregates.\"\"\"\n+        things = Thing.objects.annotate(rc=Count('related')).order_by('?')\n+        self.assertQuerysetEqual(\n+            things,\n+            [\n+                (t.id, 2) for t in Thing.objects.all()\n+            ],\n+            lambda t: (t.id, t.rc),\n+            ordered=False\n+        )\n+\n+    def test_stable_aggregation_result_with_random_order(self):\n+        \"\"\"Ensure aggregates are stable even with Random() ordering applied.\"\"\"\n+        t = Thing.objects.create()\n+        [Related.objects.create(thing=t) for _ in range(2)]\n+        queryset = Thing.objects.annotate(related_count=Count('related')).order_by('?')\n+        values = list(queryset.values('id', 'related_count'))\n+        self.assertTrue(all(item['related_count'] == 2 for item in values))\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..55ff980 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,18 +19,22 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n-    LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n+    LiveServerTestCase, SimpleTestCase, TestCase, override_settings, captured_stderr, captured_stdout\n )\n+from django.test.utils import captured_stderr, captured_stdout\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n@@ -1866,8 +1870,34 @@ class ArgumentOrder(AdminScriptTestCase):\n             \"('verbosity', 1)]\" % option_b\n         )\n \n+class ExecuteFromCommandLine(AdminScriptTestCase):\n \n-@override_settings(ROOT_URLCONF='admin_scripts.urls')\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+# Additional test case to check alternative argv handling\n+class TestAlternativeArgvHandling(AdminScriptTestCase):\n+\n+    def test_program_name_with_none_sys_argv(self):\n+        \"\"\"\n+        Test with sys.argv[0] as None and ensure that execute_from_command_line\n+        uses provided argv for program name.\n+        \"\"\"\n+        args = ['help', 'check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['my-custom-admin'] + args)\n+        self.assertIn('usage: my-custom-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n     available_apps = [\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..6d29611 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -18,8 +19,23 @@ class DateFormatTests(SimpleTestCase):\n \n     def tearDown(self):\n         translation.activate(self._orig_lang)\n-\n-    def test_date(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (123, '23'),\n+            (0, '00'),  # Year \"0\" edge case\n+            (9, '09'),  # Additional test for single digit year\n+            (99, '99'), # Edge case for two-digit year\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         d = date(2009, 5, 16)\n         self.assertEqual(date.fromtimestamp(int(format(d, 'U'))), d)\n \n@@ -164,4 +180,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..5f8d183 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,11 +1020,18 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_password_hash_field_disabled(self):\n+        # Test to ensure the disabled attribute is set to True by default.\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n \n+from django.contrib.auth.forms import ReadOnlyPasswordHashField\n+from django.test import TestCase\n+from unittest import mock\n+\n class AdminPasswordChangeFormTest(TestDataMixin, TestCase):\n \n     @mock.patch('django.contrib.auth.password_validation.password_changed')\n",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..77e4450 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,7 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n \n from ..utils import setup\n \n",
  "django__django-13807": "",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..c50fdf9 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1342,14 +1342,40 @@ class ManageRunserverMigrationWarning(TestCase):\n             'app_waiting_migration.', output\n         )\n \n+import mock\n+from django.core.management import call_command\n+from django.test import TestCase\n+from django.utils.six import StringIO\n \n-class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n+class ManageRunserverSkipChecks(TestCase):\n     def setUp(self):\n-        super().setUp()\n-        self.write_settings('settings.py', sdict={\n-            'ALLOWED_HOSTS': [],\n-            'DEBUG': False,\n-        })\n+        self.output = StringIO()\n+\n+    @mock.patch('django.core.management.commands.runserver.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check_migrations')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_checks_option_enabled(self, mocked_check, *mocked_objects):\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+    @mock.patch('django.core.management.commands.runserver.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check_migrations')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_checks_option_disabled(self, mocked_check, *mocked_objects):\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.output,\n+        )\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n \n     def test_empty_allowed_hosts_error(self):\n         out, err = self.run_manage(['runserver'])\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..06d7793 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -512,8 +513,44 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+from importlib import import_module\n+\n+class MigrationLoaderTests(MigrationTestBase):\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_file'})\n+    def test_loading_package_without_file_attribute(self):\n+        \"\"\"\n+        To support frozen environments, MigrationLoader should load migrations\n+        from regular packages that omit the __file__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_no_file')\n+        loader = MigrationLoader(connection)\n \n-class PycLoaderTests(MigrationTestBase):\n+        # Save original state\n+        module_file = getattr(test_module, '__file__', None)\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+\n+        try:\n+            # Simulate a package without __file__\n+            if hasattr(test_module, '__file__'):\n+                del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        \n+        finally:\n+            # Restore original state\n+            if module_file is not None:\n+                test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n \n     def test_valid(self):\n         \"\"\"\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..b93d56e 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -10,6 +10,9 @@ from unittest import mock\n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db.backends.sqlite3.base import check_sqlite_version\n from django.db.utils import ConnectionHandler\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n@@ -36,7 +39,22 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_older(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_check_sqlite_version_supported(self):\n+        # Should pass without exception for SQLite 3.9.0 or newer.\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            check_sqlite_version()\n+\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 11, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.11.0'):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..be448bc 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -165,7 +165,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'django', 'runserver']\n         )\n \n-    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch.dict('sys.modules', {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..96ada83 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,31 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel  # Assuming ChoiceModel is in models.py of the same app\n+from .utils import AssertFormErrorsMixin  # Let's assume AssertFormErrorsMixin is defined in utils.py\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_with_value_placeholder(self):\n+        # Create choices for the model choice field tests below.\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+\n+        # Test ModelChoiceField with modified error message including value\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +330,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..3cf03ad 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -5,6 +6,7 @@ from django.core.exceptions import FieldError, MultipleObjectsReturned\n from django.db import IntegrityError, models, transaction\n from django.test import TestCase\n from django.utils.translation import gettext_lazy\n+from .models import ParentStringPrimaryKey, ChildStringPrimaryKeyParent\n \n from .models import (\n     Article, Category, Child, ChildNullableParent, City, Country, District,\n@@ -549,7 +551,24 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'jeff'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_before_parent_with_non_numeric_pk_set_on_child(self):\n+        parent = ParentStringPrimaryKey(name='jeff')\n+        parent.save()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..62246b9 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,11 @@\n+\n from django.db import IntegrityError, transaction\n+from .fields import MyAutoField, MyWrapperField, MyWrapper\n+from .models import Bar, Business, CustomAutoFieldModel, Employee, Foo\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+# Ensure all necessary models and classes are imported\n \n \n class BasicCustomPKTests(TestCase):\n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..24fd79b 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,29 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_post_process_does_not_yield_duplicates(self):\n+        # Setup: Simulate paths for testing.\n+        paths = {\n+            \"admin/css/base.css\": \"hashed/admin/css/base.1234.css\",\n+            \"admin/css/dashboard.css\": \"hashed/admin/css/dashboard.5678.css\"\n+        }\n+\n+        # Simulated command execution\n+        collectstatic_cmd = CollectstaticCommand()\n+\n+        # Normally, collect would interact with the filesystem,\n+        # here we're using the result directly for verification.\n+        stats = collectstatic_cmd.collect()\n+\n+        # Extract only the filenames (ignoring the hashed part)\n+        post_processed_filenames = [name for name, _, _ in stats['post_processed']]\n+\n+        # Check no duplicates in the filenames post-processed\n+        self.assertCountEqual(post_processed_filenames, set(post_processed_filenames))\n+\n+        # Optionally, print the filenames for debugging purposes\n+        print(\"Post-processed filenames (no duplicates expected):\", post_processed_filenames)\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +237,29 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_post_process_does_not_yield_duplicates(self):\n+        # Setup: Simulate paths for testing.\n+        paths = {\n+            \"admin/css/base.css\": \"hashed/admin/css/base.1234.css\",\n+            \"admin/css/dashboard.css\": \"hashed/admin/css/dashboard.5678.css\"\n+        }\n+\n+        # Simulated command execution\n+        collectstatic_cmd = CollectstaticCommand()\n+\n+        # Normally, collect would interact with the filesystem,\n+        # here we're using the result directly for verification.\n+        stats = collectstatic_cmd.collect()\n+\n+        # Extract only the filenames (ignoring the hashed part)\n+        post_processed_filenames = [name for name, _, _ in stats['post_processed']]\n+\n+        # Check no duplicates in the filenames post-processed\n+        self.assertCountEqual(post_processed_filenames, set(post_processed_filenames))\n+\n+        # Optionally, print the filenames for debugging purposes\n+        print(\"Post-processed filenames (no duplicates expected):\", post_processed_filenames)\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..18af6aa 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,8 +1,10 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n \n import copy\n+import collections.abc\n import pickle\n \n from django.test import SimpleTestCase\n@@ -18,7 +20,23 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        s = OrderedSet([1, 2, 3, 4])\n+        reversed_s = reversed(s)\n+        self.assertIsInstance(reversed_s, collections.abc.Iterator)\n+        self.assertEqual(list(reversed_s), [4, 3, 2, 1])\n+        \n+    def test_reverse_empty(self):\n+        s = OrderedSet()\n+        reversed_s = reversed(s)\n+        self.assertIsInstance(reversed_s, collections.abc.Iterator)\n+        self.assertEqual(list(reversed_s), [])\n+\n+    def test_reverse_single_element(self):\n+        s = OrderedSet([42])\n+        reversed_s = reversed(s)\n+        self.assertIsInstance(reversed_s, collections.abc.Iterator)\n+        self.assertEqual(list(reversed_s), [42])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..e30e0b5 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -838,8 +838,30 @@ class BasicExpressionsTests(TestCase):\n             with self.subTest(conditions):\n                 self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n \n+    def test_exists_deconstruct(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_exists_reconstruct(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        reconstructed_q = Q(*args, **kwargs)\n+        self.assertEqual(q, reconstructed_q)\n \n-class IterableLookupInnerExpressionsTests(TestCase):\n+    def test_exists_combined(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc)) & Q(id=1)\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, (\n+            (Exists(is_poc),),\n+            ('id', 1),\n+        ))\n+        self.assertEqual(kwargs, {'_connector': 'AND'})\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..3392189 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -74,6 +75,32 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n+\n+\n+class MyBigAutoField(models.BigAutoField):\n+    pass\n+\n+\n+class MySmallAutoField(models.SmallAutoField):\n+    pass\n+\n     @isolate_apps('model_options.apps.ModelPKConfig')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n@@ -82,6 +109,32 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n+\n+\n+class MyBigAutoField(models.BigAutoField):\n+    pass\n+\n+\n+class MySmallAutoField(models.SmallAutoField):\n+    pass\n+\n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n",
  "django__django-14311": "",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..cff3d4d 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,9 +226,19 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n-    # Trailing newlines not accepted\n+    # Newlines, carriage returns, and tabs are not accepted in URLs\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\t', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\t', ValidationError),\n+    (URLValidator(), 'http://\\nwww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\rwww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://www.django\\nproject.com/', ValidationError),\n+    (URLValidator(), 'http://www.django\\tproject.com/', ValidationError),\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n",
  "django__django-14351": "",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..9cb47f5 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -37,6 +37,66 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             }),\n             (expected_args, expected_env),\n         )\n+        \n+    def test_preferred_new_database_password_params(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',  # Testing preferred new key\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',  # Testing preferred new key\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_fallback_to_deprecated_db_passwd(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',  # Should be overridden\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n \n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n@@ -67,6 +127,66 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             }),\n             (expected_args, expected_env),\n         )\n+        \n+    def test_preferred_new_database_password_params(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',  # Testing preferred new key\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',  # Testing preferred new key\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_fallback_to_deprecated_db_passwd(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',  # Should be overridden\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n \n     def test_options_password(self):\n         expected_args = [\n@@ -88,6 +208,66 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             }),\n             (expected_args, expected_env),\n         )\n+        \n+    def test_preferred_new_database_password_params(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',  # Testing preferred new key\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',  # Testing preferred new key\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_fallback_to_deprecated_db_passwd(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',  # Should be overridden\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n \n     def test_options_charset(self):\n         expected_args = [\n",
  "django__django-14434": "",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..fe07fe2 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -93,7 +93,9 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n         ),\n     )\n \n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n \n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..d047e8e 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -653,7 +653,36 @@ class ExecutorTests(MigrationTestBase):\n             recorder.applied_migrations(),\n         )\n \n-    # When the feature is False, the operation and the record won't be\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_unapply_squashed_migration_with_replacements(self):\n+        \"\"\"Test unapplying a squashed migration marks it unapplied along with its replacements.\"\"\"\n+        executor = MigrationExecutor(connection)\n+        # Apply the squashed migration\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        try:\n+            # Ensure the squashed migration is recorded as applied\n+            self.assertIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+        finally:\n+            # Simulate unapplying both the squashed migration and the original migrations it replaces\n+            executor.loader.build_graph()\n+            executor.migrate([('migrations', None)])\n+            # Ensure squashed migration is marked as unapplied\n+            self.assertNotIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            # Additionally, assert that the individual replaced migrations are unapplied\n+            self.assertNotIn(\n+                ('migrations', '0001_initial'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            self.assertNotIn(\n+                ('migrations', '0002_second'),\n+                executor.recorder.applied_migrations(),\n+            )\n     # performed in a transaction and the test will systematically pass.\n     @skipUnlessDBFeature('can_rollback_ddl')\n     def test_migrations_applied_and_recorded_atomically(self):\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..7631ccf 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -256,6 +256,43 @@ class TestUtilsHtml(SimpleTestCase):\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n         )\n+        # Test case from the original test patch to verify the reported issue\n+        original_test_patch = [\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+        ]\n+        for value, output in original_test_patch:\n+            with self.subTest(value=value):\n+                self.assertEqual(urlize(value), output)\n+\n+    def test_urlize_with_html_escaped_strings(self):\n+        tests = (\n+            # HTML escaped string with trailing punctuation\n+            (\n+                'Check out example.com/?param=1&gt;!',\n+                'Check out <a href=\"http://example.com/?param=1%3E\">example.com/?param=1&gt</a>!',\n+            ),\n+            # URLs with multiple entities and trailing punctuation\n+            (\n+                'Test this url: google.com/?a=1&lt;b&gt;c&lt;d&gt;e.',\n+                'Test this url: <a href=\"http://google.com/?a=1%3C\">google.com/?a=1&lt</a>b&gt;c&lt;d&gt;e.',\n+            ),\n+            # URLs with no special HTML entities\n+            (\n+                'Open this link: example.com/ and enjoy.',\n+                'Open this link: <a href=\"http://example.com/\">example.com/</a> and enjoy.',\n+            ),\n+            # URLs that should remain unchanged because they are not valid\n+            (\n+                'Not a valid URL: google.com/<test>. Just text.',\n+                'Not a valid URL: google.com/&lt;test&gt;. Just text.',\n+            ),\n+        )\n+        for value, output in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(urlize(value), output)\n         for value, output in tests:\n             with self.subTest(value=value):\n                 self.assertEqual(urlize(value), output)\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..e2aa82f 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -127,7 +127,30 @@ class BulkUpdateTests(TestCase):\n         with self.assertNumQueries(0):\n             Note.objects.bulk_update([], ['note'])\n \n-    def test_large_batch(self):\n+    def test_return_value_for_no_objects(self):\n+        # Test that bulk_update returns 0 when no objects are provided.\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_return_value_for_large_batch(self):\n+        # Create 2000 notes for testing\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        # Update all notes and check the return value\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_return_value_with_duplicates(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        # When duplicates are in the same batch\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        # When duplicates are in different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         Note.objects.bulk_create([\n             Note(note=str(i), misc=str(i))\n             for i in range(0, 2000)\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..3c36d6a 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -971,6 +971,48 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(initial={})\n         self.assertEqual(formset.management_form.prefix, 'form')\n \n+    def test_formset_nonform_css_class(self):\n+        \"\"\"\n+        Test if the nonform CSS class is added to non-form errors in formsets.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '0',\n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '0',\n+            'choices-1-choice': 'One',\n+            'choices-1-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(\n+            str(non_form_errors),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n+\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '2',\n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '0',\n+            'choices-1-choice': 'One',\n+            'choices-1-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(\n+            str(non_form_errors),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n+\n     def test_non_form_errors(self):\n         data = {\n             'drinks-TOTAL_FORMS': '2',  # the number of forms rendered\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..ee344ff 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,48 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_datetime_clean_initial_callable_disabled_boundfield(self):\n+        \"\"\"\n+        Ensure the cleaned value matches the BoundField's initial value for\n+        a disabled DateTimeField with callable initial.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned = form.cleaned_data['dt']\n+        bf = form['dt']\n+        self.assertEqual(cleaned, bf.initial)\n+\n+    def test_field_did_change(self):\n+        \"\"\"\n+        Test for the modified method on BoundField to check if the field has changed.\n+        \"\"\"\n+        class SimpleForm(forms.Form):\n+            field = forms.CharField(initial='initial_value')\n+\n+        form = SimpleForm({'field': 'new_value'})\n+        bf = form['field']\n+        self.assertTrue(bf._did_change())\n+\n+        form = SimpleForm({'field': 'initial_value'})\n+        bf = form['field']\n+        self.assertFalse(bf._did_change())\n+\n+    def test_cleaned_data_consistent_with_bound_field_initial(self):\n+        \"\"\"\n+        Test that cleaned_data is consistent with BoundField initial.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        bf = form['dt']\n+        self.assertEqual(form.cleaned_data['dt'], bf.initial)\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..855c212 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,7 +1,8 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n-from django.db import IntegrityError\n+from django.db import IntegrityError, models\n+from django.core.checks import Error\n from django.test import TestCase\n \n from .models import (\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..418fb9b 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,5 +1,46 @@\n+\n+class AutocompleteJsonSerializeResultViewTest(TestCase):\n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        self.factory = RequestFactory()\n+        self.url = '/admin/autocomplete/'\n+        self.opts = {'app_label': 'app_label', 'model_name': 'question', 'field_name': 'field_name'}\n+        self.as_view_args = {'admin_site': admin.site}\n+\n+    def test_serialize_result_extension(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n+import json\n+import datetime\n import json\n from contextlib import contextmanager\n+from django.http import JsonResponse\n+from django.test import RequestFactory, TestCase\n+from django.utils.module_loading import import_string\n+\n+from .models import Question\n \n from django.contrib import admin\n from django.contrib.admin.tests import AdminSeleniumTestCase\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..95c1191 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -916,6 +916,29 @@ class StateTests(SimpleTestCase):\n             project_state.apps\n \n         # If we include the real app it should succeed\n+\n+    def test_real_apps_non_set(self):\n+        \"\"\"\n+        Test that passing a non-set real_apps raises an AssertionError.\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_set(self):\n+        \"\"\"\n+        Test that passing a set to real_apps does not raise an error.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_none(self):\n+        \"\"\"\n+        Test that passing None to real_apps defaults to an empty set.\n+        \"\"\"\n+        state = ProjectState(real_apps=None)\n+        self.assertEqual(state.real_apps, set())\n         project_state = ProjectState(real_apps={'contenttypes'})\n         project_state.add_model(ModelState.from_model(TestModel))\n         rendered_state = project_state.apps\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..604e7ec 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -235,16 +235,35 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('__main__.__spec__', None)\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n-    def test_module_no_spec(self):\n-        module = types.ModuleType('test_module')\n-        del module.__spec__\n-        with mock.patch.dict(sys.modules, {'__main__': module}):\n-            self.assertEqual(\n-                autoreload.get_child_arguments(),\n-                [sys.executable, __file__, 'runserver']\n-            )\n+    @mock.patch('sys._xoptions', {'utf8': True})\n+    def test_xoptions_utf8(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {'foo': 'bar', 'baz': None})\n+    def test_xoptions_multiple(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xfoo=bar', '-Xbaz', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {})\n+    def test_xoptions_empty(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, __file__, 'runserver']\n+        )\n \n \n class TestUtilities(SimpleTestCase):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..6adc2ff 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,7 +271,46 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n-    def test_new_attribute(self):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n+    def test_partial_object_with_method_decorator(self):\n+        \"\"\"Test that method_decorator works with partial objects.\"\"\"\n+        def logger(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                result = func(*args, **kwargs)\n+                return result\n+            return inner\n+\n+        class Test:\n+            @method_decorator(logger)\n+            def hello_world(self):\n+                return \"hello\"\n+\n+        obj = Test()\n+        self.assertEqual(obj.hello_world(), \"hello\")\n+        self.assertEqual(obj.hello_world.__name__, \"hello_world\")\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n             func.x = 1\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..a618df0 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5092,8 +5092,36 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         choice = Choice.objects.create(choice=None)\n         response = self.client.get(reverse('admin:admin_views_choice_change', args=(choice.pk,)))\n         self.assertContains(response, '<div class=\"readonly\">No opinion</div>', html=True)\n+    from django.urls import reverse, NoReverseMatch\n+    from django.contrib.auth.models import User\n+    from admin_views.models import ReadOnlyRelatedField, Language\n+    from admin_views.admin import site2\n \n-    def test_readonly_foreignkey_links(self):\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to test readonly ForeignKey fields for a given admin site.\n+        \"\"\"\n+        obj = ReadOnlyRelatedField.objects.create(language=Language.objects.create(iso='EN', name='English'))\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,)))\n+        # Ensure that the link for the ForeignKey field uses the correct admin site prefix\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(obj.language.pk,))\n+        self.assertContains(\n+            response,\n+            f'<div class=\"readonly\"><a href=\"{language_url}\">EN</a></div>',\n+            html=True,\n+        )\n+    \n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links for the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links for a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin7')\n         \"\"\"\n         ForeignKey readonly fields render as links if the target model is\n         registered in admin.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..c2f18b4 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -278,8 +279,24 @@ class ModelChoiceFieldTests(TestCase):\n \n         field = CustomModelChoiceField(Category.objects.all())\n         self.assertIsInstance(field.choices, CustomModelChoiceIterator)\n-\n-    def test_choice_iterator_passes_model_to_widget(self):\n+    \n+    def test_choice_value_hashability(self):\n+        # Create instances of ModelChoiceIteratorValue\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Test that these instances can be hashed\n+        try:\n+            hash_1 = hash(value_1)\n+            hash_2 = hash(value_2)\n+        except TypeError:\n+            self.fail(\"ModelChoiceIteratorValue should be hashable.\")\n+\n+        # Test that different instances have different hashes\n+        self.assertNotEqual(hash_1, hash_2)\n+\n+        # Test that the hash is consistent with equal values\n+        self.assertEqual(hash_1, hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n         class CustomCheckboxSelectMultiple(CheckboxSelectMultiple):\n             def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n                 option = super().create_option(name, value, label, selected, index, subindex, attrs)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..b07af45 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -784,6 +784,34 @@ class OperationTests(OperationTestBase):\n         project_state = self.apply_operations(app_label, project_state, operations=[\n             migrations.RenameModel(\"Pony\", \"Pony2\"),\n         ], atomic=connection.features.supports_atomic_references_rename)\n+\n+    def test_rename_model_with_db_table_noop_forward_backward(self):\n+        app_label = 'test_rmwdbtn'\n+        initial_state = ProjectState()\n+        project_state = self.apply_operations(app_label, initial_state, operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+\n+        # RenameModel operation with db_table should be a noop\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Check that no queries are executed during the forward operation\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Check that no queries are executed during the backward operation\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         Pony = project_state.apps.get_model(app_label, \"Pony2\")\n         Rider = project_state.apps.get_model(app_label, \"Rider\")\n         pony = Pony.objects.create()\n",
  "django__django-15022": "",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..00ed17a 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,4 +1,7 @@\n+\n from django.test import SimpleTestCase\n+from django.utils.html import json_script\n+from django.utils.safestring import mark_safe\n \n from ..utils import setup\n \n@@ -16,4 +19,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..b0b8115 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,6 @@\n+\n+from django.test import SimpleTestCase, override_settings\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -361,6 +364,37 @@ class BaseTests:\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n \n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: '',\n+        constants.WARNING: '',\n+        constants.ERROR: 'bad',\n+        constants.SUCCESS: '',\n+        12: 'custom',\n+    })\n+    def test_override_settings_level_tags_extended(self):\n+        \"\"\"Test level tags with different configuration.\"\"\"\n+        self.assertEqual(base.LEVEL_TAGS[constants.INFO], 'info')\n+        self.assertEqual(base.LEVEL_TAGS[constants.DEBUG], '')\n+        self.assertEqual(base.LEVEL_TAGS[constants.WARNING], '')\n+        self.assertEqual(base.LEVEL_TAGS[constants.ERROR], 'bad')\n+        self.assertEqual(base.LEVEL_TAGS[constants.SUCCESS], '')\n+        self.assertEqual(base.LEVEL_TAGS[12], 'custom')\n+\n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: '',\n+        constants.WARNING: '',\n+        constants.ERROR: 'bad',\n+        constants.SUCCESS: '',\n+    })\n+    def test_no_custom_tag(self):\n+        \"\"\"Test when there's no custom tag.\"\"\"\n+        self.assertEqual(base.LEVEL_TAGS[constants.INFO], 'info')\n+        self.assertEqual(base.LEVEL_TAGS[constants.ERROR], 'bad')\n+        self.assertNotIn(12, base.LEVEL_TAGS)\n+        self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n+\n     def test_level_tag(self):\n         storage = self.get_storage()\n         storage.level = 0\n",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..ae09a72 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -613,7 +613,17 @@ class OrderItem(models.Model):\n \n \n class BaseUser(models.Model):\n-    pass\n+    annotation = models.ForeignKey('Annotation', models.CASCADE, null=True, blank=True)\n+\n+class Annotation(models.Model):\n+    notes = models.ManyToManyField('Note', related_name='annotations')\n+    tag = models.ForeignKey('Tag', models.CASCADE, null=True, blank=True)\n+\n+class Note(models.Model):\n+    tag = models.ForeignKey('Tag', models.CASCADE, null=True, blank=True)\n+\n+class Tag(models.Model):\n+    name = models.CharField(max_length=30)\n \n \n class Task(models.Model):\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..5d9a76a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1760,6 +1760,14 @@ class ValueTests(TestCase):\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n         self.assertEqual(UUID.objects.get().uuid, uuid.UUID('12345678901234567890123456789012'))\n \n+    def test_f_expression_deconstruct(self):\n+        \"\"\"Test the deconstruct method of F expression for simplified path.\"\"\"\n+        f_expression = F('field_name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n     def test_deconstruct(self):\n         value = Value('name')\n         path, args, kwargs = value.deconstruct()\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..cadb624 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1590,8 +1590,31 @@ class AutodetectorTests(TestCase):\n             changes, 'otherapp', 0, 3, name='book',\n             index_together={('title', 'author')},\n         )\n+    def test_optimize_foo_together_operations(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are optimized into a single operation.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together],\n+            [self.author_empty, self.book_foo_together_5]\n+        )\n \n-    def test_add_field_and_foo_together(self):\n+        # Check that only one migration is generated\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        \n+        # Check that the operations have been optimized to only two operations\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        \n+        # Check that the optimized operations have the correct attributes\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book', unique_together={('new_col',)},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book', index_together={('new_col',)},\n+        )\n         \"\"\"\n         Added fields will be created before using them in index/unique_together.\n         \"\"\"\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..2e7860a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,6 +1847,43 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                field.clean(value, model_instance=None)\n+\n+    def test_char_field_max_length_validator(self):\n+        \"\"\"\n+        Verify that CharField does not add a MaxLengthValidator if\n+        max_length is None.\n+        \"\"\"\n+        class CustomCharField(CharField):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['max_length'] = None\n+                super().__init__(*args, **kwargs)\n+\n+        field = CustomCharField()\n+        self.assertEqual(field.validators, [])\n+\n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..7683971 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -624,6 +624,22 @@ class SchemaTests(TransactionTestCase):\n         # Make sure the values were transformed correctly\n         self.assertEqual(Author.objects.extra(where=[\"thing = 1\"]).count(), 2)\n \n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test that adding a nullable OneToOneField does not crash on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Check that the column allows NULLs\n+        self.assertTrue(columns['note_id'][1][6])\n+\n     def test_add_field_binary(self):\n         \"\"\"\n         Tests binary fields get a sane default (#22851)\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..a650e79 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -61,7 +61,41 @@ class BasicFieldTests(SimpleTestCase):\n \n         self.assertEqual(m._meta.get_field('id').verbose_name, 'verbose pk')\n \n-    def test_choices_form_class(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_field_in_dict_before_and_after_assignment(self):\n+        \"\"\"\n+        Test to ensure a Field can be added to a dictionary before and after \n+        being assigned to a model, without its hash changing.\n+        \"\"\"\n+        field1 = models.CharField(max_length=100)\n+        field2 = models.CharField(max_length=200)\n+\n+        # Verify hash is initially consistent\n+        initial_hash1 = hash(field1)\n+        initial_hash2 = hash(field2)\n+\n+        my_dict = {field1: 'field1', field2: 'field2'}\n+        self.assertIn(field1, my_dict)\n+        self.assertIn(field2, my_dict)\n+\n+        # Assign fields to a model\n+        class TestModel(models.Model):\n+            first = field1\n+            second = field2\n+        \n+        # Verify field is still accessible in dictionary using the same hash\n+        self.assertEqual(initial_hash1, hash(field1))\n+        self.assertEqual(initial_hash2, hash(field2))\n+        self.assertIn(field1, my_dict)\n+        self.assertIn(field2, my_dict)\n         \"\"\"Can supply a custom choices form class to Field.formfield()\"\"\"\n         choices = [('a', 'a')]\n         field = models.CharField(choices=choices)\n",
  "django__django-15368": "",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..4afb758 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,8 +1049,55 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n-    def test_rename_model(self):\n-        \"\"\"Tests autodetection of renamed models.\"\"\"\n+    def test_rename_field_with_renamed_model_and_additional_changes(self):\n+        \"\"\"Test renaming a field and model with additional field changes.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                    ('new_field', models.CharField(max_length=100, null=True)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField', 'AddField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 2, name='new_field',\n+        )\n+\n+    def test_consecutive_rename_with_deletion_and_addition(self):\n+        \"\"\"Test renaming model and field with deletion and new field addition.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'FinalName', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('final_renamed_name', models.CharField(max_length=200)),\n+                    ('another_field', models.IntegerField(default=0)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField', 'AddField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='FinalName',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='final_renamed_name',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 2, name='another_field',\n+        )\n         changes = self.get_changes(\n             [self.author_with_book, self.book],\n             [self.author_renamed_with_book, self.book_with_author_renamed],\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..2a3bf92 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,6 +1906,30 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n+class EmptyQuerysetExistsTests(TestCase):\n+\n+    def test_negated_empty_exists_removes_where(self):\n+        \"\"\"Test that negated empty Exists does not remove the WHERE clause.\"\"\"\n+        # Create a manager object that we will ensure is still filtered correctly when negated Exists is used.\n+        manager = Manager.objects.create(name='test_manager')\n+        \n+        # Queryset to test: negating an Exists on an empty queryset combined with another condition\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()), name='test_manager')\n+        \n+        # Ensure that the manager object is returned, meaning the filter on name is still applied\n+        self.assertSequenceEqual(qs, [manager])\n+\n+        # Capture the executed SQL to verify the WHERE clause\n+        with CaptureQueriesContext(connection) as captured_queries:\n+            list(qs)\n+        \n+        self.assertEqual(len(captured_queries), 1)\n+        captured_sql = captured_queries[0]['sql']\n+\n+        # Check that the SQL query has a WHERE clause.\n+        self.assertIn('WHERE', captured_sql)\n+\n+\n class FieldTransformTests(TestCase):\n \n     @classmethod\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..e5473df 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -23,6 +23,7 @@ from django.db.models import (\n     DateTimeField,\n     ManyToManyField,\n     UUIDField,\n+    ForeignKey,\n )\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n@@ -132,6 +133,19 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             raw_id_fields=[\"main_band\"],\n         )\n \n+    def test_radio_fields_foreignkey_custom_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"main_band\": admin.VERTICAL}\n+\n+            def formfield_for_dbfield(self, db_field, request, **kwargs):\n+                if db_field.name == \"main_band\":\n+                    kwargs['empty_label'] = \"Custom empty label\"\n+                return super().formfield_for_dbfield(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Event, admin.site)\n+        ff = ma.formfield_for_dbfield(Event._meta.get_field(\"main_band\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n     def test_radio_fields_ForeignKey(self):\n         ff = self.assertFormfield(\n             Event,\n@@ -139,6 +153,19 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             widgets.AdminRadioSelect,\n             radio_fields={\"main_band\": admin.VERTICAL},\n         )\n+\n+    def test_radio_fields_foreignkey_custom_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"main_band\": admin.VERTICAL}\n+\n+            def formfield_for_dbfield(self, db_field, request, **kwargs):\n+                if db_field.name == \"main_band\":\n+                    kwargs['empty_label'] = \"Custom empty label\"\n+                return super().formfield_for_dbfield(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Event, admin.site)\n+        ff = ma.formfield_for_dbfield(Event._meta.get_field(\"main_band\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n         self.assertIsNone(ff.empty_label)\n \n     def test_many_to_many(self):\n@@ -149,6 +176,19 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             Band, \"members\", widgets.ManyToManyRawIdWidget, raw_id_fields=[\"members\"]\n         )\n \n+    def test_radio_fields_foreignkey_custom_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"main_band\": admin.VERTICAL}\n+\n+            def formfield_for_dbfield(self, db_field, request, **kwargs):\n+                if db_field.name == \"main_band\":\n+                    kwargs['empty_label'] = \"Custom empty label\"\n+                return super().formfield_for_dbfield(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Event, admin.site)\n+        ff = ma.formfield_for_dbfield(Event._meta.get_field(\"main_band\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n     def test_filtered_many_to_many(self):\n         self.assertFormfield(\n             Band, \"members\", widgets.FilteredSelectMultiple, filter_vertical=[\"members\"]\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..7f2d9c4 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,80 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_alter_model_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Foo\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_default_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_multiple_manager_alterations(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Baz\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"first_manager\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"second_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"second_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..e86252b 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -789,7 +789,34 @@ class NaturalKeyFixtureTests(TestCase):\n             ],\n             transform=repr,\n         )\n+        \n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n \n+    def setUp(self):\n+        # Set up data in the 'other' database\n+        Person.objects.using('other').create(name=\"J.R.R. Tolkien\")\n+\n+    def test_natural_key_dependencies(self):\n+        \"\"\"\n+        Natural keys with foreign keys in dependencies should work in a multiple\n+        database setup.\n+        \"\"\"\n+        # Load the fixture using the 'other' database\n+        management.call_command(\n+            \"loaddata\",\n+            \"nk_with_foreign_key.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        # Verify that the Book object is loaded correctly in the 'other' database\n+        obj = NaturalKeyWithFKDependency.objects.using(\"other\").get()\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n+\n+from django.core import management\n+from .models import Person, NaturalKeyWithFKDependency\n \n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n@@ -805,6 +832,30 @@ class M2MNaturalKeyFixtureTests(TestCase):\n         sorted_deps = serializers.sort_dependencies(\n             [(\"fixtures_regress\", [M2MSimpleA, M2MSimpleB])]\n         )\n+        \n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def setUp(self):\n+        # Set up data in the 'other' database\n+        Person.objects.using('other').create(name=\"J.R.R. Tolkien\")\n+\n+    def test_natural_key_dependencies(self):\n+        \"\"\"\n+        Natural keys with foreign keys in dependencies should work in a multiple\n+        database setup.\n+        \"\"\"\n+        # Load the fixture using the 'other' database\n+        management.call_command(\n+            \"loaddata\",\n+            \"nk_with_foreign_key.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        # Verify that the Book object is loaded correctly in the 'other' database\n+        obj = NaturalKeyWithFKDependency.objects.using(\"other\").get()\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n         self.assertEqual(sorted_deps, [M2MSimpleB, M2MSimpleA])\n \n     def test_dependency_sorting_m2m_simple_circular(self):\n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..ad1ba0b 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,6 +3961,24 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n+    def test_alter_field_choices_noop(self):\n+        # Create the table\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Get the original field\n+        old_field = Author._meta.get_field(\"name\")\n+        # Create a new field with choices\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        # Alter the field and assert no SQL is executed\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n     def test_add_textfield_unhashable_default(self):\n         # Create the table\n         with connection.schema_editor() as editor:\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..3270901 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -312,6 +312,17 @@ class LookupTests(TestCase):\n         with register_lookup(models.Field, Exactly):\n             self.assertIsNone(field.get_lookup(\"exactly\"))\n \n+    def test_unregistration_busts_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register a lookup and ensure it is cached\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+        \n+        # Unregister the lookup and ensure the cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+        \n     def test_lookups_caching(self):\n         field = Article._meta.get_field(\"author\")\n \n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..ebd7365 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,9 +1,11 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n \n from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n+import inspect\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n from django.test import (\n@@ -736,8 +738,35 @@ class ManagerTest(SimpleTestCase):\n             sorted(self.QUERYSET_PROXY_METHODS),\n         )\n \n+class ManagerSignatureTests(TestCase):\n+    def test_manager_method_attributes(self):\n+        self.assertEqual(Article.objects.get.__doc__, models.QuerySet.get.__doc__)\n+        self.assertEqual(Article.objects.count.__name__, models.QuerySet.count.__name__)\n+\n+    def test_manager_method_signature(self):\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.bulk_create)),\n+            \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, \"\n+            \"update_fields=None, unique_fields=None)\",\n+        )\n \n-class SelectOnSaveTests(TestCase):\n+    def test_signature_for_various_methods(self):\n+        # Test other queryset methods to ensure they are correct as well\n+\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.get)),\n+            \"(pk)\"\n+        )\n+\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.filter)),\n+            \"(*args, **kwargs)\"\n+        )\n+\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.update)),\n+            \"(*args, **kwargs)\"\n+        )\n     def test_select_on_save(self):\n         a1 = Article.objects.create(pub_date=datetime.now())\n         with self.assertNumQueries(1):\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..ca90d40 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,8 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.translation import gettext_lazy\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -77,6 +79,14 @@ class FunctionTests(SimpleTestCase):\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n+    def test_get_format_lazy_date_format(self):\n+        # Test with a lazy string for DATE_FORMAT\n+        self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+    \n+    def test_get_format_lazy_time_format(self):\n+        # Test with a lazy string for TIME_FORMAT\n+        self.assertEqual(get_format(gettext_lazy(\"TIME_FORMAT\")), \"P\")\n+    \n     def test_no_args(self):\n         self.assertEqual(date(\"\"), \"\")\n         self.assertEqual(date(None), \"\")\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..37df07a 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,6 +399,41 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from django.db import models\n+\n+# Assuming the models are defined in the same test module \n+# for simplicity in this example test addition.\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class ProxyModelTests(TestCase):\n+    def test_select_related_only_on_proxy(self):\n+        # Create a Custom model through the Proxy\n+        custom_model_instance = ProxyCustomModel.objects.create(name=\"Proxy Custom\")\n+        # Attach it to AnotherModel\n+        another_model_instance = AnotherModel.objects.create(custom=custom_model_instance)\n+        \n+        # Use select_related and only, simulating the issue scenario\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+        \n+        # Check if the query returns the expected result without crashing\n+        self.assertEqual(result.custom, custom_model_instance)\n+        self.assertEqual(result.custom.name, \"Proxy Custom\")\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..905858d 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_additional_parameters_before_dbname(self):\n+        # Test that additional parameters are correctly placed before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select 1;\"]),\n+            ([\"psql\", \"-c\", \"select 1;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_additional_parameters_before_dbname(self):\n+        # Test that additional parameters are correctly placed before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select 1;\"]),\n+            ([\"psql\", \"-c\", \"select 1;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..f0f58e3 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -74,7 +74,12 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n-    def test_force_grouping(self):\n+    def test_decimal_precision(self):\n+        # This test case is aimed at verifying that the floatformat does not drop precision for Decimal numbers.\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..9a2081e 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -10,6 +11,7 @@ from django.core.exceptions import ImproperlyConfigured\n from django.core.serializers.base import DeserializationError\n from django.db import IntegrityError, transaction\n from django.db.models import signals\n+from django.core.management.base import CommandError\n from django.test import (\n     TestCase,\n     TransactionTestCase,\n@@ -575,7 +577,37 @@ class TestFixtures(TestCase):\n             os.path.join(_cur_dir, \"fixtures_2\"),\n         ]\n     )\n-    def test_loaddata_with_valid_fixture_dirs(self):\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_pathlib_instance(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS should detect duplicates even with Path instances.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+\n+    @override_settings(FIXTURE_DIRS=[\n+        Path(_cur_dir) / \"fixtures_1\",\n+        Path(_cur_dir) / \"fixtures_2\"\n+    ])\n+    def test_loaddata_with_pathlib_valid_fixture_dirs(self):\n+        output = StringIO()\n+        try:\n+            management.call_command(\n+                \"loaddata\",\n+                \"absolute.json\",\n+                verbosity=1,\n+                stdout=output\n+            )\n+        except CommandError:\n+            self.fail(\"loaddata raised CommandError unexpectedly!\")\n+\n+        # Check if the output contains expected success message\n+        self.assertIn(\"Installed\", output.getvalue())\n         management.call_command(\n             \"loaddata\",\n             \"absolute.json\",\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..0288443 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,27 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_alias_filter_in_subquery_issue(self):\n+        # Test case based on issue description\n+        long_books_qs = (\n+            Book.objects.filter(pages__gt=400)\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(book__in=long_books_qs)\n+            .values(\"name\")\n+        )\n+        expected_publisher_names = [\n+            {\"name\": \"Apress\"},\n+            {\"name\": \"Sams\"},\n+            {\"name\": \"Prentice Hall\"},\n+            {\"name\": \"Morgan Kaufmann\"},\n+        ]\n+        self.assertCountEqual(\n+            publisher_books_qs, expected_publisher_names\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..7c8293c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2406,6 +2406,30 @@ class CombinableTests(SimpleTestCase):\n             object() ^ Combinable()\n \n \n+from django.db.models import DecimalField, IntegerField, FloatField, AutoField, Expression\n+from django.db.models.expressions import CombinedExpression\n+from django.test import SimpleTestCase\n+from django.db.models.expressions import Combinable\n+\n+class CombinedExpressionModTests(SimpleTestCase):\n+    def test_mod_operator_numeric_resolution(self):\n+        tests = [\n+            (IntegerField, IntegerField, IntegerField),\n+            (IntegerField, DecimalField, DecimalField),\n+            (DecimalField, IntegerField, DecimalField),\n+            (FloatField, IntegerField, FloatField),\n+            (IntegerField, FloatField, FloatField),\n+        ]\n+        connector = Combinable.MOD\n+        for lhs, rhs, combined in tests:\n+            with self.subTest(lhs=lhs, connector=connector, rhs=rhs, combined=combined):\n+                expr = CombinedExpression(\n+                    Expression(lhs()),\n+                    connector,\n+                    Expression(rhs()),\n+                )\n+                self.assertIsInstance(expr.output_field, combined)\n+\n class CombinedExpressionTests(SimpleTestCase):\n     def test_resolve_output_field_number(self):\n         tests = [\n@@ -2416,7 +2440,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..fe50279 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +404,46 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity_with_multiple_errors(self):\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+        c = Swallow.objects.create(origin=\"Swallow C\", load=3, speed=3)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"3\",\n+            \"form-INITIAL_FORMS\": \"3\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-2-uuid\": str(c.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"form-2-load\": \"6.0\",\n+            \"form-2-speed\": \"2.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=[None, DatabaseError, None]\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+            \n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+        c.refresh_from_db()\n+        self.assertEqual(c.load, 3)\n+        self.assertEqual(c.speed, 3)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..b5c4cb7 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,29 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with a zero status when\n+        there are no changes to an app.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            try:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            except SystemExit as e:\n+                self.assertEqual(e.code, 0)\n+\n+    def test_makemigrations_check_no_files_created(self):\n+        \"\"\"\n+        makemigrations --check should not create any migration files when run.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            initial_files = set(os.listdir(tmpdir))\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            new_files = set(os.listdir(tmpdir))\n+            self.assertEqual(initial_files, new_files)\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..499dcad 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -8,7 +9,8 @@ from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n from django.http import HttpResponse\n from django.test import SimpleTestCase\n-from django.utils.asyncio import async_unsafe\n+from django.http import HttpResponseNotAllowed\n+from django.test import RequestFactory\n from django.views.generic.base import View\n \n from .models import SimpleModel\n@@ -119,7 +121,24 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.get(\"/demo\"))  # Using GET to trigger 405\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..5f45bd6 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -22,6 +23,7 @@ from django.core.mail import EmailMultiAlternatives\n from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n+from django.urls import reverse\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..3a97493 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1586,6 +1586,20 @@ class ManageRunserver(SimpleTestCase):\n \n         call_command(self.cmd, addrport=\"7000\")\n         self.assertServerSettings(\"127.0.0.1\", \"7000\")\n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_runner_zero_ip_addr(self, *mocked_objects):\n+        call_command(\n+            self.cmd,\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n \n     @unittest.skipUnless(socket.has_ipv6, \"platform doesn't support IPv6\")\n     def test_runner_addrport_ipv6(self):\n",
  "django__django-16255": "",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..851b0c7 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -75,6 +75,11 @@ class UpsertConflict(models.Model):\n     name = models.CharField(max_length=15)\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class NoFields(models.Model):\n     pass\n \n",
  "django__django-16333": "",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..5e4b34a 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,7 +161,29 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n-    def test_naive_datetime_with_tzinfo_attribute(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_timezone_aware_datetimes(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        # Making the datetime object timezone aware explicitly\n+        d = timezone.make_aware(d, timezone.get_default_timezone())\n+        self.assertEqual(timesince(d, now), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_mixed_naive_and_aware_datetimes(self):\n+        now = timezone.now()\n+        naive_past = datetime.datetime(2007, 8, 14, 13, 46, 0)\n+        aware_past = timezone.make_aware(datetime.datetime(2007, 8, 14, 13, 46, 0), timezone.get_default_timezone())\n+\n+        # Check behavior when the past is naive and now is aware\n+        with self.assertRaises(TypeError):\n+            timesince(naive_past, now)\n+\n+        # Check behavior when the past is aware and now is naive\n+        with self.assertRaises(TypeError):\n+            timesince(aware_past, datetime.datetime.now())\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n                 return None\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..d560258 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -468,6 +468,42 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), \"Set foo\")\n \n+# New test cases start here\n+class SubparserTests(SimpleTestCase):\n+    def test_subparser_required_argument_missing(self):\n+        \"\"\"\n+        Test that missing a required argument in a subparser results in a clear error message.\n+        \"\"\"\n+        out, err = self.run_manage([\"cheeses\", \"create\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertIn(\"manage.py cheeses create: error:\", err_lines[1])\n+        self.assertIn(\"the following arguments are required: name\", err_lines[1])\n+\n+    def test_subparser_invalid_argument(self):\n+        \"\"\"\n+        Test that providing an invalid type for a subparser argument results in a clear error message.\n+        \"\"\"\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"not_an_int\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'not_an_int'\",\n+        )\n+\n+    def test_subparser_non_django_error_formatting(self):\n+        out, err = self.run_manage([\"subparser_vanilla\", \"foo\", \"seven\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser_vanilla foo: error: argument bar: invalid int value: 'seven'\",\n+        )\n+\n \n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..56f701d 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -104,7 +104,9 @@ class FunctionTests(SimpleTestCase):\n             # Invalid suffix.\n             self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n \n-    def test_zero_values(self):\n+    def test_floatformat_issue_with_zero_decimal(self):\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n         self.assertEqual(floatformat(0, 10), \"0.0000000000\")\n",
  "django__django-16493": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..63f96f9 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -33,7 +36,36 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_permissions(self):\n+        # User with change permission but no add permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user_only\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with both add and change permissions\n+        add_change_user = User.objects.create_user(\n+            username=\"add_change_user\", password=\"secret\", is_staff=True\n+        )\n+        add_change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = add_change_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16560": "",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..ac95825 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1471,6 +1471,22 @@ class FormsFormsetTestCase(SimpleTestCase):\n             extra=2,\n         )\n         formset = ChoiceFormFormset()\n+\n+    def test_formset_add_fields_with_none_index(self):\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+        \n+        # Create a FormSet with the specified attributes\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+\n+        # Check `empty_form` to ensure the exception is not raised\n+        formset = MyFormSet(initial=None)\n+        empty_form = formset.empty_form\n+        self.assertNotIn(\"DELETE\", empty_form.fields)\n         self.assertEqual(len(formset), 2)\n         self.assertNotIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..294873f 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8463,7 +8463,81 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    from django.test import override_settings\n+    from django.urls import reverse\n+    from django.contrib.auth.models import User\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_script_name(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n@@ -8499,7 +8573,81 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    from django.test import override_settings\n+    from django.urls import reverse\n+    from django.contrib.auth.models import User\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article%3Fid%3D1\",\n+            status_code=302,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_without_final_catch_all_view(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin10:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username=\"user\",\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..c9284dd 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,16 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_new_mimetypes = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_new_mimetypes:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..6be5888 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -153,6 +153,50 @@ class ModelAdminTests(TestCase):\n         self.assertIs(\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n+    \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary_extended(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+\n+        # Test with exact match on primary key\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        \n+        # Test with additional fields filtered\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+        \n+        # New assertions to ensure the fix is robust\n+        # Test with a non-existing complex lookup\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__nonexistent\", \"test_value\"), False\n+        )\n+\n+        # Test with complex lookup involving multiple fields\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name__exact\", \"test_value\"), True\n+        )\n \n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..5a86839 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -921,8 +921,32 @@ class WriterTests(SimpleTestCase):\n             \"import datetime\\nfrom django.db import migrations, models\\n\",\n             output,\n         )\n-\n-    def test_migration_file_header_comments(self):\n+    def test_custom_import_order(self):\n+        \"\"\"\n+        Test custom import ordering to ensure isort compliance.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ],\n+                \"dependencies\": [\n+                    (\"myapp\", \"0001_initial\"),\n+                ],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..820e315 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -805,6 +805,39 @@ class SystemChecksTestCase(SimpleTestCase):\n             )\n         ]\n         self.assertEqual(errors, expected)\n+    \n+    def test_readonly_field_with_valid_attribute(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"title\",)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        self.assertEqual(errors, [])\n+\n+    def test_readonly_field_as_callable(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            def readonly_title(self, obj):\n+                return \"Read-only Title\"\n+\n+            readonly_fields = (\"readonly_title\",)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        self.assertEqual(errors, [])\n+\n+    def test_readonly_field_name_in_error_message(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"nonexistent_field\",)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent_field', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an attribute \"\n+                \"of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n \n     def test_nonexistent_field_on_inline(self):\n         class CityInline(admin.TabularInline):\n",
  "django__django-16901": "",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..09e845c 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -32,7 +32,38 @@ SOME_INSTALLED_APPS_NAMES = [\n HERE = os.path.dirname(__file__)\n \n \n+from django.test import override_settings, SimpleTestCase\n+from django.apps import apps\n+import functools\n+\n class AppsTests(SimpleTestCase):\n+\n+    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        # Set cache.\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+\n+        apps.clear_cache()\n+\n+        # Ensure cache for get_swappable_settings_name is cleared.\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        # Ensure cache for get_models is cleared.\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n+\n+    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_swappable(self):\n+        # Filling cache.\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        \n+        # Check cache size is 1 before clearing\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 1)\n+\n+        # Clear cache\n+        apps.clear_cache()\n+\n+        # Check that cache size is 0 after clearing\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n     def test_singleton_main(self):\n         \"\"\"\n         Only one main registry can exist.\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..3875817 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,6 +641,24 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n+    def test_makemigrations_model_restriction_respects_routers(self):\n+        \"\"\"\n+        Ensure makemigrations only checks 'allow_migrate' for models belonging to the current app.\n+        \"\"\"\n+        with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+            with mock.patch('migrations.routers.TestRouter.allow_migrate', return_value=True) as allow_migrate:\n+                call_command('makemigrations', 'migrations', verbosity=0)\n+                # Check that allow_migrate is only called with models from 'migrations' app.\n+                for call in allow_migrate.mock_calls:\n+                    _, call_args, call_kwargs = call\n+                    connection_alias, app_name = call_args\n+                    model_name = call_kwargs['model_name']\n+                    if app_name == 'migrations':\n+                        self.assertIn(model_name, ['UnicodeModel', 'UnserializableModel'])\n+                    else:\n+                        self.fail(f\"allow_migrate called with model {model_name} from app {app_name}\")\n+                self.assertGreater(len(allow_migrate.mock_calls), 0)\n+\n     def test_failing_migration(self):\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..13eabb5 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,8 +297,36 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+class PaginationIterationTests(TestCase):\n \n-class ModelPaginationTests(TestCase):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator_iteration(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_single_item_paginator(self):\n+        paginator = Paginator([1], 2)\n+        page_iterator = iter(paginator)\n+        self.assertEqual([1], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_multi_page_paginator(self):\n+        paginator = Paginator(range(5), 2)  # Pages: [0, 1], [2, 3], [4]\n+        page_iterator = iter(paginator)\n+        self.assertEqual([0, 1], list(next(page_iterator)))\n+        self.assertEqual([2, 3], list(next(page_iterator)))\n+        self.assertEqual([4], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n     \"\"\"\n     Test pagination with Django model instances\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..a6e1f47 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,38 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_density_false():\n+    # Test case when density=False to ensure the range is respected as expected\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_different_range():\n+    # Test with a different specified range\n+    test_range = (-1, 1)\n+    _, bins, _ = plt.hist(np.random.randn(100), bins=10, range=test_range, density=True)\n+    assert bins[0] == test_range[0]\n+    assert bins[-1] == test_range[1]\n+\n+def test_hist_with_weights_and_density():\n+    # Verifying with both density=True and custom weights\n+    data = np.random.rand(100)\n+    weights = np.ones_like(data) * 0.5\n+    _, bins, _ = plt.hist(data, bins=10, range=(0, 1), density=True, weights=weights)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+    # Check normalization\n+    hist, _ = np.histogram(data, bins=bins, density=True, weights=weights)\n+    assert np.isclose(np.sum(hist * np.diff(bins)), 1.0, atol=0.01)\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6398,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..57528d3 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -917,8 +917,16 @@ def test_hexbin_log():\n     h = ax.hexbin(x, y, yscale='log', bins='log')\n     plt.colorbar(h)\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-def test_inverted_limits():\n+def test_invert_log_axis_with_limits():\n+    # Test inverting log axis using limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n     # while still maintaining the inverted direction\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..0c2377c 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,6 +6961,26 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference plot without calling ax.clear()\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    # Test plot with ax.clear() called\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..9bbfa4e 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,27 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted when \n+    plotting empty data on axes with updated units. See #22640.\n+    \"\"\"\n+    import matplotlib.pyplot as plt  # Ensure matplotlib is imported\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    # Check that plotting empty data does not raise a deprecation warning\n+    ax.plot([], [])\n+\n+def test_convert_units_with_empty_data():\n+    \"\"\"\n+    Test that Axis.convert_units does not raise an error when converting\n+    empty data with category units.\n+    \"\"\"\n+    import matplotlib.pyplot as plt  # Ensure matplotlib is imported\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    # Ensure no exceptions occur when converting empty data\n+    converted_data = ax.xaxis.convert_units([])\n+    assert len(converted_data) == 0  # Check that converted data is still empty\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..97c6fad 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -919,7 +919,36 @@ def test_proportional_colorbars():\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n \n-def test_negative_boundarynorm():\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, res\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges_with_extremities(extend, coloroffset, res):\n+    \"\"\"Test that edges are drawn correctly for colorbar with drawedges=True.\"\"\"\n+    cmap = plt.get_cmap(\"viridis\")\n+    # Define color levels\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+    # Assert the correct segments are drawn\n+    assert np.all(np.equal(cbar.dividers.get_segments(), res))\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n \n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..8c6a993 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,23 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+import pytest\n+\n+def test_get_backend_does_not_clear_figures_in_rc_context():\n+    # Test to ensure get_backend() does not clear figures created in an rc_context\n+    with rc_context():\n+        fig2 = plt.figure()\n+    # Capture the initial state of Gcf.figs\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()  # Call get_backend, which previously caused issues\n+    # Capture the state of Gcf.figs after calling get_backend\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    # Assert that the figures remain the same before and after calling get_backend\n+    assert before == after, f'\\nFigures changed!\\nBefore: {before}\\nAfter: {after}'\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..0f030f5 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,6 +148,33 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib.patches import Rectangle\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_draw(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+\n+    # Reference plot with two rectangles\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                        linestyle=(0, [6, 6]))\n+    rect_ref2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                        linestyle=(0, [0, 6, 6, 0]))\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Test plot with offset dashes\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                        linestyle=(0, [6, 6]))\n+    rect_test2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                        linestyle=(6, [6, 6]))\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n \n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..e0d8b2a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,6 +2866,36 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import matplotlib.cycler as cycler\n+import numpy as np\n+\n+def test_stackplot_does_not_change_cycler():\n+    x = np.array([1, 2, 3])\n+    y1 = np.array([1, 2, 3])\n+    y2 = np.array([3, 2, 1])\n+    data = np.array([y1, y2])\n+\n+    fig, ax = plt.subplots()\n+    initial_cycler = ax._get_lines.prop_cycler\n+    ax.stackplot(x, data, colors=['C0', 'C1'])\n+    # Check if cycler was not changed\n+    assert initial_cycler == ax._get_lines.prop_cycler\n+\n+def test_stackplot_with_CN_aliases():\n+    x = np.array([1, 2, 3])\n+    y1 = np.array([1, 2, 3])\n+    y2 = np.array([3, 2, 1])\n+    data = np.array([y1, y2])\n+\n+    fig, ax = plt.subplots()\n+    try:\n+        ax.stackplot(x, data, colors=['C0', 'C1'])\n+        success = True\n+    except ValueError:\n+        success = False\n+\n+    assert success, \"stackplot with CN aliases should not raise ValueError\"\n \n @image_comparison(['stackplot_test_baseline'], remove_text=True)\n def test_stackplot_baseline():\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 35bc6ec..018cb41 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -8363,7 +8363,32 @@ def test_extent_units():\n                           cmap=mpl.colormaps[\"plasma\"])\n     im.set_extent([date_last, date_first, date_last, date_first])\n     axs[1, 1].xaxis.set_major_formatter(mdates.DateFormatter('%d'))\n-    axs[1, 1].set(xlabel='Day of Jan 2020')\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_cla_clears_children_axes_and_fig():\n+    fig, ax = plt.subplots()\n+    lines = ax.plot([], [])\n+    img = ax.imshow([[1]])\n+    for art in lines + [img]:\n+        assert art.axes is ax\n+        assert art.figure is fig\n+    ax.clear()\n+    for art in lines + [img]:\n+        assert art.axes is None\n+        assert art.figure is None\n+\n+def test_clf_clears_children_axes_and_fig():\n+    fig, ax = plt.subplots()\n+    lines = ax.plot([], [])\n+    img = ax.imshow([[1]])\n+    for art in lines + [img]:\n+        assert art.axes is ax\n+        assert art.figure is fig\n+    fig.clf()\n+    for art in lines + [img]:\n+        assert art.axes is None\n+        assert art.figure is None\n \n     with pytest.raises(ValueError,\n                        match=\"set_extent did not consume all of the kwargs\"):\n",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..813e918 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,7 +576,67 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n-    plt.rcParams[\"svg.fonttype\"] = \"none\"\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox\n+    # in output svg.\n+    fig = plt.figure()\n+    ax = fig.add_subplot()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n+\n+def test_multiple_annotationbbox_gids():\n+    # Test multiple AnnotationBbox objects with unique gids\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+\n+    positions = [(0.1, 0.2), (0.4, 0.6), (0.8, 0.9)]\n+    gids = ['gid1', 'gid2', 'gid3']\n+\n+    for pos, gid in zip(positions, gids):\n+        imagebox = OffsetImage(arr_img, zoom=0.1)\n+        imagebox.image.axes = ax\n+\n+        ab = AnnotationBbox(imagebox, pos,\n+                            xybox=(120., -80.),\n+                            xycoords='data',\n+                            boxcoords=\"offset points\",\n+                            pad=0.5,\n+                            arrowprops=dict(\n+                                arrowstyle=\"->\",\n+                                connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                            )\n+        ab.set_gid(gid)\n+        ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    for gid in gids:\n+        expected = f'<g id=\"{gid}\">'\n+        assert expected in buf\n \n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..c960964 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -30,7 +30,17 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n-def test_resampled():\n+@pytest.mark.parametrize('dtype', [np.uint8, int, np.float16, float])\n+def test_no_deprecation_warning(dtype):\n+    # Test against the deprecation warning mentioned in the issue\n+    cm = plt.get_cmap('viridis')\n+    with np.testing.suppress_warnings() as sup:\n+        sup.filter(DeprecationWarning,\n+                   \"NumPy will stop allowing conversion of out-of-bound \"\n+                   \"Python integers to integer arrays\")\n+        result = cm(np.empty((0,), dtype=dtype))\n+    assert result.size == 0\n+    assert result.shape == (0, 4)\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..74cbaa9 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,33 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.set_xlim(1.01e9, 1.03e9)  # Force a scientific notation offset\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.set_xlim(1.01e9, 1.03e9)\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.set_ylim(1.01e9, 1.03e9)  # Force a scientific notation offset\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.set_ylim(1.01e9, 1.03e9)\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..eb3226b 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,21 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_draggable_legend_pickle():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1], [0, 1], label='line')\n+    leg = ax.legend(draggable=True)\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure the pickle does not contain FigureCanvasAgg\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw()\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..983e809 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -44,6 +44,37 @@ def test_simple():\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n \n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n+from io import BytesIO\n+\n+...\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pkl = BytesIO()\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+        print(\"Pickling succeeded\")\n+    except Exception as e:\n+        assert False, f\"Pickling failed: {e}\"\n+\n+    plt.close(fig)\n+\n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..580a41e 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,47 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n \n-def test_hexbin_log_clim():\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..d163540 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,11 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..d21f4dd 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -646,6 +646,11 @@ class TestScaling:\n             p.plot()\n \n \n+import pytest\n+import matplotlib.pyplot as plt\n+from seaborn._core.plot import Plot\n+from seaborn._core.scales import Nominal\n+\n class TestPlotting:\n \n     def test_matplotlib_object_creation(self):\n@@ -661,7 +666,17 @@ class TestPlotting:\n         Plot().plot()\n         assert m.n_splits == 0\n \n-    def test_single_split_single_layer(self, long_df):\n+    def test_nominal_x_axis_grid(self):\n+        \"\"\"Test that gridlines are not shown for nominal x-axis, even if enabled in theme.\"\"\"\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3]).theme(grid=True)\n+        ax = p.plot()._figure.axes[0]\n+        assert not any(line.get_visible() for line in ax.xaxis.get_gridlines())\n+\n+    def test_nominal_y_axis_grid(self):\n+        \"\"\"Test that gridlines are not shown for nominal y-axis, even if enabled in theme.\"\"\"\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"]).theme(grid=True)\n+        ax = p.plot()._figure.axes[0]\n+        assert not any(line.get_visible() for line in ax.yaxis.get_gridlines())\n \n         m = MockMark()\n         p = Plot(long_df, x=\"f\", y=\"z\").add(m).plot()\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..5ad47a9 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,9 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n@@ -251,7 +254,9 @@ def test_templates_list(test_apps):\n     assert templates == [\"admin/index.html\", \"frontend/index.html\"]\n \n \n-def test_dotted_name_not_allowed(app, client):\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n     with pytest.raises(ValueError):\n         flask.Blueprint(\"app.ui\", __name__)\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..3d5bac0 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,10 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://*.example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://-example.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..fa34d96 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,24 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_setitem_preserves_objects_with_values():\n+    import numpy as np\n+    from xarray import Variable\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    # Define a custom class with a `values` attribute\n+    class HasValues:\n+        values = 5\n+\n+    # Create a DataArray with object dtype\n+    variable = Variable(dims=('dim_0',), data=np.array([None], dtype=object))\n+\n+    # Assign a set to one location - should assign correctly\n+    variable[{'dim_0': 0}] = set()\n+    assert type(variable.values[0]) is set\n+\n+    # Assign an instance of HasValues - should not coerce to array\n+    variable[{'dim_0': 0}] = HasValues()\n+    assert isinstance(variable.values[0], HasValues)\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..d5d3994 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2107,7 +2107,18 @@ class TestDataset:\n \n         assert_identical(ds.coords['a'], expected_orig)\n \n-    def test_copy_with_data_errors(self):\n+    def test_copy_unicode_index(self):\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+        shallow_copy = ds.copy(deep=False)\n+        assert shallow_copy.coords['x'].dtype.str.startswith('<U')\n+        assert shallow_copy.coords['y'].dtype.str.startswith('<U')\n+        \n+        deep_copy = ds.copy(deep=True)\n+        assert deep_copy.coords['x'].dtype.str.startswith('<U')\n+        assert deep_copy.coords['y'].dtype.str.startswith('<U')\n         orig = create_test_data()\n         new_var1 = np.arange(orig['var1'].size).reshape(orig['var1'].shape)\n         with raises_regex(ValueError, 'Data must be dict-like'):\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..7de01ff 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,6 +611,25 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n+    def test_combine_leaving_bystander_dimensions(self):\n+        # Check non-monotonic bystander dimension coord doesn't raise\n+        # ValueError on combine (https://github.com/pydata/xarray/issues/3150)\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n     def test_check_for_impossible_ordering(self):\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..2eb5539 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,28 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n-\n-    def test_reduce_keep_attrs(self):\n+    \n+    def test_quantile_keep_attrs(self):\n+        # Create a DataArray with attributes\n+        da = DataArray([0, 0, 0], dims=\"x\", attrs={'units': 'K', 'description': 'test array'})\n+        \n+        # Compute quantile with keep_attrs set to True\n+        result = da.quantile(0.5, dim='x', keep_attrs=True)\n+        \n+        # Ensure the attributes are preserved\n+        assert result.attrs == da.attrs\n+        \n+        # Compute quantile with keep_attrs set to False\n+        result_no_attrs = da.quantile(0.5, dim='x', keep_attrs=False)\n+        \n+        # Ensure the attributes are not preserved\n+        assert result_no_attrs.attrs == {}\n+        \n+        # Test when multiple quantiles are requested\n+        result_multiple = da.quantile([0.25, 0.75], dim='x', keep_attrs=True)\n+        \n+        # Ensure attributes are preserved\n+        assert result_multiple.attrs == da.attrs\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..d687106 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,8 +1,10 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -159,7 +161,37 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n-    def test_merge_broadcast_equals(self):\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Testing if the Dataset method merge works properly with DataArray\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n+    def test_merge_dataarray_with_dims(self):\n+        ds = xr.Dataset({\"a\": (\"x\", [0, 0, 0])}, coords={\"x\": [0, 1, 2]})\n+        da = xr.DataArray(data=[1, 2, 3], dims=[\"x\"], name=\"b\")\n+\n+        # Test merging with dimensions\n+        expected = xr.Dataset({\"a\": (\"x\", [0, 0, 0]), \"b\": (\"x\", [1, 2, 3])})\n+        assert_identical(ds.merge(da), expected)\n+\n+    def test_merge_conflicting_dataarray(self):\n+        ds = xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"x\": [0, 1, 2]})\n+        da = xr.DataArray(data=[4, 5, 6], dims=[\"x\"], name=\"a\")\n+\n+        # Expecting a MergeError due to conflicting data\n+        with pytest.raises(xr.MergeError):\n+            ds.merge(da)\n+\n+    def test_merge_dataarray_with_fill_value(self):\n+        ds = xr.Dataset({\"a\": (\"x\", [1, 2]), \"x\": [0, 1]})\n+        da = xr.DataArray(data=[3, 4], dims=[\"x\"], name=\"b\")\n+        fill_value = -1\n+        expected = xr.Dataset({\"a\": (\"x\", [1, 2, fill_value]), \"b\": (\"x\", [fill_value, 3, 4])}, {\"x\": [0, 1, 2]})\n+\n+        # Test with fill_value specified\n+        assert_identical(ds.merge(da, fill_value=fill_value), expected)\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..b2e7dec 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -595,7 +595,30 @@ def test_min_count(dim_num, dtype, dask, func, aggdim):\n     assert_dask_array(actual, dask)\n \n \n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_multiple_dimensions(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    # Create a 2D DataArray with NaN values\n+    da = construct_dataarray(2, dtype, contains_nan=True, dask=dask)\n+    min_count = 3\n+\n+    # Test using sum/prod over both dimensions with min_count\n+    actual = getattr(da, func)(dim=[\"x\", \"y\"], skipna=True, min_count=min_count)\n+    # Modify the expected logic to manually handle min_count across multiple dimensions\n+    \n+    # Manually compute expected values\n+    mask = np.isnan(da.values)\n+    valid_counts = (~mask).sum(axis=(0, 1))\n+    expected_values = np.where(valid_counts >= min_count, getattr(da.values, func)(axis=(0, 1)), np.nan)\n+\n+    expected = DataArray(expected_values, dims=())\n+\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n def test_min_count_dataset(func):\n     da = construct_dataarray(2, dtype=float, contains_nan=True, dask=False)\n     ds = Dataset({\"var1\": da}, coords={\"scalar\": 0})\n@@ -604,9 +627,32 @@ def test_min_count_dataset(func):\n     assert_allclose(actual, expected)\n \n \n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_multiple_dimensions(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    # Create a 2D DataArray with NaN values\n+    da = construct_dataarray(2, dtype, contains_nan=True, dask=dask)\n+    min_count = 3\n+\n+    # Test using sum/prod over both dimensions with min_count\n+    actual = getattr(da, func)(dim=[\"x\", \"y\"], skipna=True, min_count=min_count)\n+    # Modify the expected logic to manually handle min_count across multiple dimensions\n+    \n+    # Manually compute expected values\n+    mask = np.isnan(da.values)\n+    valid_counts = (~mask).sum(axis=(0, 1))\n+    expected_values = np.where(valid_counts >= min_count, getattr(da.values, func)(axis=(0, 1)), np.nan)\n+\n+    expected = DataArray(expected_values, dims=())\n+\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n def test_multiple_dims(dtype, dask, func):\n     if dask and not has_dask:\n         pytest.skip(\"requires dask\")\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..c8f9425 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,37 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_no_change_in_sources(self):\n+        ds1 = xr.Dataset(attrs={\"shared\": \"value1\", \"unique1\": \"value2\"})\n+        ds2 = xr.Dataset(attrs={\"shared\": \"value0\", \"unique2\": \"value3\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"shared\"] = \"changed\"\n+        ds3.attrs[\"unique1\"] = \"changed1\"\n+        ds3.attrs[\"unique2\"] = \"changed2\"\n+        assert ds1.attrs[\"shared\"] == \"value1\"\n+        assert ds1.attrs[\"unique1\"] == \"value2\"\n+        assert \"unique2\" not in ds1.attrs\n+        assert ds2.attrs[\"shared\"] == \"value0\"\n+        assert \"unique1\" not in ds2.attrs\n+        assert ds2.attrs[\"unique2\"] == \"value3\"\n+\n+    def test_merge_attrs_override_with_empty_attrs(self):\n+        ds1 = xr.Dataset()\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 3\n+        assert \"x\" not in ds1.attrs\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 3\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..c5cfd1f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,25 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    # Test if attributes are preserved when keep_attrs=True\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray([1, 0], dims=\"x\")  # No attributes expected by default\n+    assert_identical(expected, actual)\n+\n+    # Assuming future functionality or modification to include 'keep_attrs' argument\n+    actual_keep_attrs = xr.where(cond, x, y, keep_attrs=True)\n+    expected_keep_attrs = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected_keep_attrs, actual_keep_attrs)\n+\n+    # Test if attributes are not preserved when not specified\n+    actual_no_attrs = xr.where(cond, x, y, keep_attrs=False)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\")  # Ensure no attributes\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..4d4124a 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,8 +13,34 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+import numpy as np\n \n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_from_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == unsigned_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..69366ec 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1928,6 +1928,25 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+def test_where_scalar_with_keep_attrs() -> None:\n+    # Test with scalar value for `x`, `y`, and `keep_attrs=True`\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    # Test with scalar value for `x`, DataArray for `y`, and `keep_attrs=True`\n+    y = xr.DataArray([0, 0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, 1, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"y\"})\n+    assert_identical(expected, actual)\n+\n+    # Test with DataArray for `x`, scalar for `y`, and `keep_attrs=True`\n+    x = xr.DataArray([1, 1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    actual = xr.where(cond, x, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..be28224 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,43 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta_basic\",\n+        ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([0, 10, 20, 30, 40, 50], dtype=\"timedelta64[s]\"), dims=\"x\"\n+            ),\n+            xr.DataArray(\n+                [\n+                    [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+                    [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+                    [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+                    [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+                    [4.44739216e6, 1.45053974e6, 5.29960857e6],\n+                ],\n+                dims=(\"degree\", \"axis\"),\n+                coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+            ),\n+            xr.DataArray(\n+                [\n+                    [4447392.16, 1450539.74, 5299608.57],\n+                    [4505537.25588366, 1448882.82238152, 5250846.359196],\n+                    [4563174.92026797, 1446979.12250014, 5201491.44401733],\n+                    [4620298.31815291, 1444829.59596699, 5151549.377964],\n+                    [4676900.67053846, 1442435.23739315, 5101025.78153601],\n+                    [4732975.25442459, 1439797.08038974, 5049926.34223336],\n+                ],\n+                dims=(\"x\", \"axis\"),\n+                coords={\"axis\": [0, 1, 2]},\n+            ),\n+            id=\"timedelta_polyfit\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..4e5c815 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,7 +221,18 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n-    def test_repr(self) -> None:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # regression test for verifying that accessing chunks does not load all data into memory\n+        # Mock a dataset to simulate inaccessibility behavior\n+        store = InaccessibleVariableDataStore()\n+        create_test_data().dump_to_store(store)\n+        ds = open_dataset(store)\n+\n+        with mock.patch('xarray.core.variable.Variable.values', side_effect=RuntimeError(\"Data should not be loaded\")):\n+            chunks = ds.chunks  # should not raise an error, meaning data was not accessed\n+            assert isinstance(chunks, dict)\n+        # Check that the returned chunks are empty because the data arrays are not chunked\n+        assert chunks == {}\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..fbe1bc0 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,31 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import xarray as xr\n+import numpy as np\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    ds = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    stacked_ds = ds.stack(baz=(\"bar\",))\n+    assert str(stacked_ds[\"bar\"].values.dtype) == dtype\n+\n+def test_int32_coordinates_preserved_after_stack():\n+    ds = xr.Dataset(coords={\"a\": np.array([0, 1, 2], dtype='int32')})\n+    stacked_ds = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked_ds['a'].values.dtype\n+\n+def test_float32_coordinates_preserved_after_stack():\n+    ds = xr.Dataset(coords={\"a\": np.array([0.1, 0.2, 0.3], dtype='float32')})\n+    stacked_ds = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked_ds['a'].values.dtype\n+\n+def test_stack_with_multiple_dtypes():\n+    ds = xr.Dataset(coords={\n+        \"int_coord\": np.array([1, 2, 3], dtype='int32'),\n+        \"float_coord\": np.array([0.1, 0.2, 0.3], dtype='float32')\n+    })\n+    stacked_ds = ds.stack(new_dim=('int_coord', 'float_coord'))\n+    assert ds['int_coord'].values.dtype == stacked_ds['int_coord'].values.dtype\n+    assert ds['float_coord'].values.dtype == stacked_ds['float_coord'].values.dtype\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..1adb346 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -494,11 +494,34 @@ def test_get_map_data() -> None:\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n \n-    assert len(expected_linelists) == len(data)\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers.similar import Run\n+\n+def test_set_duplicate_lines_to_zero():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", \"dummy_file1.py\", \"dummy_file2.py\"])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+\n+def test_set_duplicate_lines_non_zero():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=5\", \"dummy_file1.py\", \"dummy_file2.py\"])\n+    assert ex.value.code == 0\n+    # Assuming 'dummy_file1.py' and 'dummy_file2.py' have similar lines more than 5\n+    assert \"Duplicate code found\" in output.getvalue()\n+\n+def test_no_files_provided():\n+    with pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\"])\n+    assert ex.value.code == 1\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..a81718f 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,31 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n-def test_unknown_py_version(capsys: CaptureFixture) -> None:\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_verbose_error_on_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we error when an argument is provided to -v or --verbose.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\", \"extra\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"argument --verbose/-v: expected one argument\" in output.err\n+\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"--verbose\", \"extra\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"argument --verbose/-v: expected one argument\" in output.err\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..2236ac3 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,40 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    def test_recursive_ignore(self):\n+        \"\"\"Tests if `--ignore`, `--ignore-patterns`, and `--ignore-paths` are respected in recursive mode.\"\"\"\n+        # Test ignoring a specific file\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore=failing.py\"],\n+            code=0,\n+        )\n+\n+        # Test ignoring a specific directory\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore=ignored_subdirectory\"],\n+            code=0,\n+        )\n+\n+        # Test ignoring with patterns\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore-patterns=failing.*\"],\n+            code=0,\n+        )\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore-patterns=ignored_.*\"],\n+            code=0,\n+        )\n+\n+        # Test ignoring with paths\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore-paths=.*ignored.*\"],\n+            code=0,\n+        )\n+        self._runtest(\n+            [join(HERE, \"regrtest_data\", \"directory\"), \"--recursive=y\", \"--ignore-paths=.*failing.*\"],\n+            code=0,\n+        )\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..f8b4436 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,26 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_path_recursive_with_ignore_paths(self) -> None:\n+        \"\"\"Tests that --recursive=y respects ignore-paths option\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^directory/ignored_subdirectory/.*\",\n+                    ],\n+                    [\".\", \"--recursive=y\"],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..40543d9 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -172,6 +172,21 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n+def test_clear_get_records_consistency(caplog):\n+    \"\"\"Verify that caplog.get_records is consistent after caplog.clear()\"\"\"\n+    import logging\n+\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    verify_consistency()  # Initial consistency check\n+    logging.warning(\"test\")\n+    verify_consistency()  # Post log consistency check\n+    caplog.clear()\n+    verify_consistency()  # Post clear consistency; should fail if not fixed\n+    logging.error(\"another test\")\n+    verify_consistency()  # Post new log consistency\n+\n def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..d12a461 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1273,8 +1273,33 @@ def test_pdb_teardown_skipped(\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+def test_pdb_teardown_skipped_for_classes_with_unittest_skip(\n+    pytester: Pytester, monkeypatch: MonkeyPatch\n+) -> None:\n+    \"\"\"Test that tearDown is not called for tests skipped via unittest.skip decorator on the class when --pdb is used.\"\"\"\n+    tracked = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        @unittest.skip(\"skipped for unittest reasons\")\n+        class MyTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n \n-def test_async_support(pytester: Pytester) -> None:\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_1(self):\n+                pass\n+    \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n     pytest.importorskip(\"unittest.async_case\")\n \n     pytester.copy_example(\"unittest/test_unittest_asyncio.py\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..8c84062 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1042,6 +1042,33 @@ class TestFDCapture(object):\n             os.write(1, b\"world\")\n             sys.stdout.write(\"qlwkej\")\n             assert not cap.snap()\n+\n+    def test_capfd_sys_stdout_mode(self, capfd):\n+        import sys\n+        out, err = capfd.readouterr()\n+        assert \"b\" not in sys.stdout.mode\n+\n+    def test_encoded_file_write(self):\n+        from _pytest.capture import EncodedFile\n+        import io\n+        buffer = io.StringIO()\n+        enc_file = EncodedFile(buffer, encoding='utf-8')\n+\n+        # Test writing a string\n+        enc_file.write(\"This is a test string\")\n+        assert buffer.getvalue() == \"This is a test string\"\n+\n+        # Reset buffer\n+        buffer.seek(0)\n+        buffer.truncate()\n+\n+        # Test writing bytes should raise an error\n+        try:\n+            enc_file.write(b\"This should raise an error\")\n+        except TypeError as e:\n+            assert str(e) == \"write() argument must be str, not bytes\"\n+        else:\n+            assert False, \"Expected TypeError not raised\"\n             cap.resume()\n             os.write(1, b\"but now\")\n             sys.stdout.write(\" yes\\n\")\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..e212de5 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,6 +178,23 @@ class TestMockDecoration:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n+    def test_mock_patch_with_numpy_array(self, testdir):\n+        pytest.importorskip(\"numpy\")\n+        testdir.makepyfile(\n+            \"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+\n+            class TestNumpyPatch:\n+                @patch('builtins.len', new=np.array([5, 10]))\n+                def test_patch_numpy_array(self):\n+                    assert len([1, 2, 3]) == 3  # len is patched, but we don't use it to avoid issues\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        # It's expected to pass if the issue is resolved\n+        reprec.assertoutcome(passed=1)\n+\n     def test_mock(self, testdir):\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..dacc390 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,8 +116,18 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n-\n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n+\n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        result = pastebin.create_new_paste(b\"new-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=new-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n         return calls\n \n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n@@ -130,4 +140,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..2f7d5eb 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,33 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+\n+        # Test for issue with parameterized inputs containing \".[\"\n+        import pytest\n+\n+        @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+        def testmethod_two(arg0):\n+            pass\n+\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(arg0):\n+                pass\n+\n+            class TestY:\n+                def testmethod_two(self, arg0):\n+                    pass\n+            \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 3\n+        assert items[0].name == \"testmethod_two[.[]\"\n+        assert items[0].getmodpath() == \"testmethod_two[.[]\"\n+        assert items[1].name == \"testmethod_two\"  # This comes from the class method\n+        assert items[1].getmodpath() == \"TestY.testmethod_two\"\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..e5a789a 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..673489b 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,6 +607,18 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n+    def test_skip_with_runxfail_does_not_affect_location(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skipif(True, reason=\"conditional skip\")\n+            def test_conditional_skip():\n+                pass\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"*conditional skip*\", \"*1 skipped*\"])\n+\n     def test_skip_with_reason(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..994c326 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..d89bdaa 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,6 +513,11 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n \n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..61b48c0 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -49,6 +50,27 @@ def test_change_level_undo(testdir):\n     result.stdout.fnmatch_lines([\"*log from test1*\", \"*2 failed in *\"])\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n+def test_caplog_restores_logger_level(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test for logger level.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            logger = logging.getLogger(\"testlogger\")\n+            caplog.set_level(logging.WARNING, logger=\"testlogger\")\n+            logger.warning('Warning in test1')\n+            assert logger.level == logging.WARNING\n+\n+        def test2(caplog):\n+            logger = logging.getLogger(\"testlogger\")\n+            logger.info('Checking level in test2')\n+            assert logger.level != logging.WARNING\n+            assert caplog.handler.level == logging.NOTSET\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n \n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..3dcf626 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1177,6 +1178,22 @@ def test_collect_symlink_out_of_tree(testdir):\n     )\n     assert result.ret == 0\n \n+def test_collect_symlink_dir_with_multiple_test_files(pytester: Pytester) -> None:\n+    \"\"\"Test that a symlinked directory with multiple test files is collected.\"\"\"\n+    # Create a directory with multiple test files\n+    dir = pytester.mkdir(\"multi_test_dir\")\n+    dir.joinpath(\"test_one.py\").write_text(\"def test_one(): pass\", \"utf-8\")\n+    dir.joinpath(\"test_two.py\").write_text(\"def test_two(): pass\", \"utf-8\")\n+\n+    # Create a symlink to the directory\n+    pytester.path.joinpath(\"symlink_multi_test_dir\").symlink_to(dir)\n+\n+    # Run pytest\n+    result = pytester.runpytest()\n+\n+    # Assert that both test files have been collected and passed\n+    result.assert_outcomes(passed=2)\n+\n \n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..c0afe69 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,31 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_setUpClass_fixture_visibility(pytester: Pytester) -> None:\n+    # Create a unittest TestCase with setUpClass\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            def test_func1(self):\n+                pass\n+        \"\"\"\n+    )\n+    \n+    # Run pytest without verbose flag and ensure fixture is not shown\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n+\n+    # Run pytest with verbose flag and ensure fixture is shown\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\"*unittest_setUpClass_fixture_MyTestCase*\")\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..b15ff4f 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -598,6 +598,36 @@ def test_ridgecv_store_cv_values():\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    import numpy as np\n+    from numpy.testing import assert_equal\n+    from sklearn.linear_model import RidgeClassifierCV\n+\n+    # Simple dataset\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Initialize with store_cv_values=True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # Fit with single target\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Test with multi-target\n+    y_multi = np.array([[1, 1, 1, -1, -1],\n+                        [1, -1, 1, -1, 1],\n+                        [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y_multi.shape[1]\n+    r.fit(x, y_multi)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n def test_ridgecv_sample_weight():\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..53b8542 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,17 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+from sklearn.metrics import fowlkes_mallows_score\n+import numpy as np\n+from numpy.testing import assert_all_finite\n+\n+def test_fowlkes_mallows_score_overflow():\n+    # Generate cluster labels to cause overflow in integer calculations\n+    labels_true = np.array([i // 10 for i in range(100000)])\n+    labels_pred = np.array([i // 8 for i in range(100000)])\n+\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..4aaeb5f 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,13 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+def test_get_feature_names_with_custom_vocabulary():\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocab)\n+    \n+    # Check that get_feature_names does not raise an error and returns the correct features\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(feature_names, vocab)\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..04d56a9 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1161,19 +1161,23 @@ def test_search_cv_timing():\n \n     for search in (gs, rs):\n         search.fit(X, y)\n+        # Check timing for fit and score during cross-validation\n         for key in ['mean_fit_time', 'std_fit_time']:\n-            # NOTE The precision of time.time in windows is not high\n-            # enough for the fit/score times to be non-zero for trivial X and y\n+            # NOTE The precision of time.time in windows is not high enough \n+            # for the fit/score times to be non-zero for trivial X and y\n             assert_true(np.all(search.cv_results_[key] >= 0))\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+        # Check timing for scoring process during cross-validation\n         for key in ['mean_score_time', 'std_score_time']:\n             assert_true(search.cv_results_[key][1] >= 0)\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n-\n-def test_grid_search_correct_score_results():\n+        # Verify the refit_time_ attribute\n+        assert_true(hasattr(search, 'refit_time_'))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..9ae9b4b 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,8 +21,8 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n-\n-from sklearn.exceptions import ConvergenceWarning\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.linear_model.logistic import _log_reg_scoring_path\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n     LogisticRegression,\n@@ -490,9 +490,37 @@ def test_logistic_cv():\n     assert_array_equal(lr_cv.Cs_.shape, (1,))\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n-\n-\n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          # no need to test for micro averaging because it\n+                          # is the same as accuracy for f1, precision,\n+                          # and recall (see https://github.com/\n+                          # scikit-learn/scikit-learn/pull/\n+                          # 11578#discussion_r203250062)\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..7c788d0 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,7 +5,27 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n-import pytest\n+# New test cases to verify the behavior of the copy_X parameter in LassoLarsIC\n+@pytest.mark.parametrize('init_copy_X, fit_copy_X_explicit', [(True, None), (False, None), (True, False), (False, True)])\n+def test_lasso_lars_ic_copyX_combined_behaviour(init_copy_X, fit_copy_X_explicit):\n+    \"\"\"\n+    Test the combined behavior of copy_X set during initialization and potentially overridden during fit.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+\n+    # If fit_copy_X_explicit is None, we test fit without the copy_X arg\n+    if fit_copy_X_explicit is None:\n+        lasso_lars.fit(X, y)\n+        expected_copy_X = init_copy_X\n+    else:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X_explicit)\n+        expected_copy_X = fit_copy_X_explicit\n+\n+    assert expected_copy_X == np.array_equal(X, X_copy)\n \n from sklearn.model_selection import train_test_split\n from sklearn.utils.testing import assert_equal\n@@ -18,7 +38,9 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n+import pytest\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..3ee09c7 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,8 +493,27 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+def test_stratifiedkfold_different_random_state():\n+    # Ensure that we shuffle each class's samples differently for different\n+    # random_state values in StratifiedKFold\n+    # Reference to https://github.com/scikit-learn/scikit-learn/pull/13124\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n \n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+    # Using two different random states\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=43)\n+\n+    test_set1 = [test_idx for _, test_idx in kf1.split(X, y)]\n+    test_set2 = [test_idx for _, test_idx in kf2.split(X, y)]\n+\n+    assert test_set1 != test_set2, \"Test sets should differ for different random_states\"\n+\n+    # Adding additional checks for consistency within the same random_state\n+    kf_same = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    test_set_same = [test_idx for _, test_idx in kf_same.split(X, y)]\n+\n+    assert test_set1 == test_set_same, \"Test sets should be the same for the same random_state\"\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..de20a94 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -203,6 +203,29 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n \n+@pytest.mark.parametrize(\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # with 2 bins\n+    est = KBinsDiscretizer(n_bins=2, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_2bins, Xt.ravel())\n+\n+    # with 3 bins\n+    est = KBinsDiscretizer(n_bins=3, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_3bins, Xt.ravel())\n+\n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..3f3a0c6 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,6 +597,14 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n \n def test_gaussian_mixture_fit():\n     # recover the ground truth\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..90bb9a3 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,8 +1057,27 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n-\n-def test_make_pipeline_memory():\n+def test_pipeline_len():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.preprocessing import StandardScaler\n+    from sklearn.decomposition import PCA\n+    from sklearn.svm import SVC\n+\n+    # Test with a pipeline of two steps\n+    pipe_1 = Pipeline([('scaler', StandardScaler()), ('svc', SVC())])\n+    assert len(pipe_1) == 2, f\"Expected 2, got {len(pipe_1)}\"\n+\n+    # Test with a single step (no transformation)\n+    pipe_2 = Pipeline([('svc', SVC())])\n+    assert len(pipe_2) == 1, f\"Expected 1, got {len(pipe_2)}\"\n+\n+    # Test with multiple (three) steps\n+    pipe_3 = Pipeline([('scaler', StandardScaler()), ('pca', PCA()), ('svc', SVC())])\n+    assert len(pipe_3) == 3, f\"Expected 3, got {len(pipe_3)}\"\n+\n+    # Test empty pipeline\n+    pipe_4 = Pipeline([])\n+    assert len(pipe_4) == 0, f\"Expected 0, got {len(pipe_4)}\"\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1089,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..a691c03 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..fce9d9e 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,7 +1532,33 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_issue_no_refit(penalty, multi_class):\n+    # Test case based on the issue to ensure that no IndexError is thrown\n+    # when using refit=False with LogisticRegressionCV\n+\n+    np.random.seed(29)\n+    X = np.random.normal(size=(1000, 3))\n+    beta = np.random.normal(size=3)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(\n+        penalty=penalty, \n+        solver='saga', \n+        tol=1e-2, \n+        refit=False,\n+        multi_class=multi_class,\n+        l1_ratios=l1_ratios,\n+        random_state=0\n+    )\n+    lrcv.fit(X, y)\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..d6c3858 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -14,6 +14,15 @@ def test_get_sys_info():\n \n def test_get_deps_info():\n     deps_info = _get_deps_info()\n+    \n+    # Check if 'joblib' is present if sklearn version is > 0.20\n+    # Assume we can check the version by a simple version check (pseudo-code for context)\n+    import sklearn\n+    from packaging import version\n+\n+    if version.parse(sklearn.__version__) > version.parse(\"0.20\"):\n+        assert 'joblib' in deps_info\n+    deps_info = _get_deps_info()\n \n     assert 'pip' in deps_info\n     assert 'setuptools' in deps_info\n@@ -30,4 +39,4 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..c25acc0 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,22 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for a scenario where support_vectors_ could be empty\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    # Ensure support_vectors_ and dual_coef_ are empty as expected\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..21a154d 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -76,8 +76,31 @@ def split_tokenize(s):\n def lazy_analyze(s):\n     return ['the_ultimate_feature']\n \n+from sklearn.feature_extraction.text import strip_accents_unicode\n \n def test_strip_accents():\n+    # Test case for strings in NFKD form\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+\n+    # Ensure both decompose to the same base character \"n\"\n+    assert strip_accents_unicode(s1) == 'n'\n+    assert strip_accents_unicode(s2) == 'n'\n+\n+    # Test original cases for strings already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..9bfb5de 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -333,9 +333,32 @@ def test_base_estimator_property_deprecated():\n     model = IsolationForest()\n     model.fit(X, y)\n \n+def test_iforest_preserve_feature_names_with_dataframes():\n+    \"\"\"Test that feature names are preserved when contamination != \"auto\" using DataFrame.\"\"\"\n+    import pandas as pd\n+    from sklearn.ensemble import IsolationForest\n+    import numpy as np\n+    import warnings\n+    import pytest\n+    \n+    # Create a DataFrame with random data\n+    rng = np.random.RandomState(42)\n+    X = pd.DataFrame(rng.randn(100, 5), columns=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n+    \n+    # Fit IsolationForest with contamination set to a specific value\n+    model = IsolationForest(random_state=42, contamination=0.05)\n+    \n+    # Catch warnings and ensure no warnings are raised\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        model.fit(X)\n+        \n+        # Verify no warnings are raised\n+        assert len(w) == 0, \"Warnings were raised when they should not have been\"\n+\n     warn_msg = (\n         \"Attribute `base_estimator_` was deprecated in version 1.2 and \"\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..41a7f5c 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -21,10 +21,30 @@ from sklearn.compose import (\n )\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n-from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n+import pandas as pd\n \n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n \n-class Trans(TransformerMixin, BaseEstimator):\n+    Non-regression test for the issue with remainder being an estimator.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    # Test case where `remainder` is an estimator and `set_output` is used\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n     def fit(self, X, y=None):\n         return self\n \n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..a39020e 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,20 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(100, 5))\n+\n+    # Test for single run (n_init=1) to ensure consistency\n+    inertia_1 = KMeans(n_clusters=5, random_state=0, n_jobs=1, n_init=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=5, random_state=0, n_jobs=2, n_init=1).fit(X).inertia_\n+    assert_almost_equal(inertia_1, inertia_2, decimal=5)\n+\n+    # Test for multiple runs (n_init>1) to ensure consistency\n+    inertia_1_multi = KMeans(n_clusters=5, random_state=0, n_jobs=1, n_init=10).fit(X).inertia_\n+    inertia_2_multi = KMeans(n_clusters=5, random_state=0, n_jobs=2, n_init=10).fit(X).inertia_\n+    assert_almost_equal(inertia_1_multi, inertia_2_multi, decimal=5)\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..02c449a 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,9 +251,39 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n-\n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n-def test_LiteralIncludeReader_tabwidth(testroot):\n+def test_LiteralIncludeReader_dedent_prepend_indent():\n+    # Setup a scenario where we want to prepend with indentation\n+    literal_inc_content = [\n+        '      <groupId>com.github.ekryd.sortpom</groupId>\\n',\n+        '      <artifactId>sortpom-maven-plugin</artifactId>\\n',\n+        '      <version>2.15.0</version>\\n',\n+        '      <configuration>\\n',\n+        '        <verifyFailOn>strict</verifyFailOn>\\n',\n+        '      </configuration>\\n'\n+    ]\n+    \n+    # Mocking file reading\n+    def mock_read(*args, **kwargs):\n+        return literal_inc_content, [1, 2, 3, 4, 5, 6]\n+\n+    LiteralIncludeReader.read = mock_read\n+\n+    # Test: prepend with indentation\n+    options = {'prepend': '      <plugin>', 'dedent': 0}\n+    reader = LiteralIncludeReader('mock_file.xml', options, DUMMY_CONFIG)\n+    content, _ = reader.read()\n+\n+    expected_content = (\n+        \"      <plugin>\\n\"\n+        \"      <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+        \"      <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+        \"      <version>2.15.0</version>\\n\"\n+        \"      <configuration>\\n\"\n+        \"        <verifyFailOn>strict</verifyFailOn>\\n\"\n+        \"      </configuration>\\n\"\n+    )\n+    assert content == expected_content\n     # tab-width: 4\n     options = {'tab-width': 4, 'pyobject': 'Qux'}\n     reader = LiteralIncludeReader(testroot / 'target.py', options, DUMMY_CONFIG)\n",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..e7c0da6 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,17 @@\n+\n+def test_Catalog_message_locations_deduplication():\n+    # Create a catalog and add duplicate message origins\n+    catalog = Catalog()\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file', 2))\n+    catalog.add('duplicate_test', MsgOrigin('/path/unique_file', 1))\n+\n+    # Ensure deduplication of message locations\n+    message = list(catalog)[0]\n+    assert message.text == 'duplicate_test'\n+    assert message.locations == [('/path/to/file', 1), ('/path/to/file', 2), ('/path/unique_file', 1)]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +23,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..abfee3b 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,10 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+import pytest\n+import sys\n+from sphinx.util.inspect import signature_from_str\n+from inspect import Parameter\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n@@ -341,7 +345,15 @@ def test_signature_from_str_positionaly_only_args():\n     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n \n \n-def test_signature_from_str_invalid():\n+def test_signature_from_str_with_positional_only_defaults():\n+    sig = signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n     with pytest.raises(SyntaxError):\n         inspect.signature_from_str('')\n \n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..4122773 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -11,6 +12,7 @@\n import abc\n import sys\n from importlib import import_module\n+from typing import Generic, TypeVar\n \n import pytest\n \n@@ -46,6 +48,24 @@ def test_MockObject():\n             return \"string\"\n \n     obj = SubClass()\n+\n+    # Test for generic-typed class\n+    T = TypeVar('T')\n+\n+    class GenericSubClass(Generic[T], mock.SomeClass):\n+        \"\"\"docstring of GenericSubClass\"\"\"\n+\n+        def __init__(self, value: T):\n+            self.value = value\n+\n+        def get_value(self) -> T:\n+            return self.value\n+\n+    generic_obj = GenericSubClass[int](123)\n+    assert GenericSubClass.__doc__ == \"docstring of GenericSubClass\"\n+    assert isinstance(generic_obj, GenericSubClass)\n+    assert generic_obj.get_value() == 123\n+    assert isinstance(generic_obj.get_value(), int)\n     assert SubClass.__doc__ == \"docstring of SubClass\"\n     assert isinstance(obj, SubClass)\n     assert obj.method() == \"string\"\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 464108d..d40fa91 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -1263,6 +1263,20 @@ def test_automethod_for_builtin(app):\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_method(app):\n+    options = {\"members\": None, \"undoc-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.decorator.Foo', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Foo',\n+        '   :module: target.decorator',\n+        '',\n+        '   .. py:method:: Foo.__init__(self)',\n+        '      :module: target.decorator',\n+        '',\n+        '      docstring for init method',\n+        '',\n+    ]\n def test_automethod_for_decorated(app):\n     actual = do_autodoc(app, 'method', 'target.decorator.Bar.meth')\n     assert list(actual) == [\n@@ -1274,6 +1288,20 @@ def test_automethod_for_decorated(app):\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_method(app):\n+    options = {\"members\": None, \"undoc-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.decorator.Foo', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Foo',\n+        '   :module: target.decorator',\n+        '',\n+        '   .. py:method:: Foo.__init__(self)',\n+        '      :module: target.decorator',\n+        '',\n+        '      docstring for init method',\n+        '',\n+    ]\n def test_abstractmethods(app):\n     options = {\"members\": None,\n                \"undoc-members\": None}\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..84b5c49 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -14,6 +14,17 @@ from unittest import mock\n import pytest\n \n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    # Check local links\n+    assert \"local-file\" in content  # Expected local file link to report correctly\n+    assert \"invalid-local-file\" in content  # Expected broken local file link to be found\n+\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n def test_defaults(app, status, warning):\n     app.builder.build_all()\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..875037b 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -12,6 +13,35 @@ import pytest\n \n from test_ext_autodoc import do_autodoc\n \n+import pytest\n+\n+from test_ext_autodoc import do_autodoc\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\n+        \"members\": None,\n+        \"private-members\": \"_specific_private_method,_another_private_method\"\n+    }\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _specific_private_method(name)',\n+        '   :module: target.private',\n+        '',\n+        '   specific private method docstring.',\n+        '',\n+        '.. py:function:: _another_private_method(name)',\n+        '   :module: target.private',\n+        '',\n+        '   another private method docstring.',\n+        '',\n+    ]\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_private_field(app):\n",
  "sphinx-doc__sphinx-8120": "",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..a8d3feb 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,38 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import sys\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='Python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    srcdir='autodoc_typehints_description_and_type_aliases_issue',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_description_and_type_aliases_issue(app: SphinxTestApp):\n+    (app.srcdir / 'types.py').write_text(\n+        \"from typing import Any, Dict\\n\"\n+        \"JSONObject = Dict[str, Any]\\n\"\n+        \"\\n\"\n+        \"def sphinx_doc(data: JSONObject) -> JSONObject:\\n\"\n+        \"    '''Does it work.\\n\"\n+        \"\\n\"\n+        \"    Args:\\n\"\n+        \"        data: Does it args.\\n\"\n+        \"\\n\"\n+        \"    Returns:\\n\"\n+        \"        Does it work in return.\\n\"\n+        \"    '''\\n\"\n+        \"    return {}\\n\"\n+    )\n+    (app.srcdir / 'index.rst').write_text('.. autofunction:: types.sphinx_doc\\n')\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    \n+    assert 'types.sphinx_doc(data: types.JSONObject) -> types.JSONObject' in context\n+    assert 'data (types.JSONObject)' in context\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..ac52f5e 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -29,6 +29,51 @@ try:\n except ImportError:\n     pyximport = None\n \n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_init(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    expected = [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+    assert list(actual) == expected\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_ignore_module_all(app):\n+    options = {'members': True, 'ignore-module-all': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    expected = [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+        '.. py:function:: bar()',\n+        '   :module: target.empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: baz()',\n+        '   :module: target.empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+    assert list(actual) == expected\n+\n \n def do_autodoc(app, objtype, name, options=None):\n     if options is None:\n",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..27810a8 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,24 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+import enum\n \n-def test_getslots():\n+def test_object_description_enum():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Testing object description for an enum member\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+\n+    # Ensure the default value representation in a function signature\n+    def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+        pass\n+\n+    # Simulate the signature rendering\n+    func_signature = inspect.signature(ugly_enum_func)\n+    param = func_signature.parameters['e']\n+    assert str(param.default) == \"MyEnum.ValueA\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..5acbf70 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -10,6 +10,8 @@\n \n import time\n from io import StringIO\n+from os import path\n+import sys\n \n import pytest\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..0aedeb6 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,9 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n+    (\"(1, 2,)\", \"(1, 2,)\"),                       # Tuple (two elements with trailing comma)\n+    (\"(1, 2, 3,)\", \"(1, 2, 3,)\"),                 # Tuple (multiple elements with trailing comma)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..31bee64 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,27 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_property_type_annotation_cross_reference(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Check that the property end has the correct type annotation with cross reference\n+    assert_node(doctree[1][1][0], addnodes.index,\n+                entries=[('single', 'start (Square attribute)', 'Square.start', '', None)])\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, (\": \",\n+                                                                        [pending_xref, \"Point\"])])],\n+                                   [desc_content, ()]))\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..984f759 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -754,9 +754,10 @@ def test_pymethod_options(app):\n     assert 'Class.meth4' in domain.objects\n     assert domain.objects['Class.meth4'] == ('index', 'Class.meth4', 'method', False)\n \n+    # :property:\n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..36b8f61 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,9 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..5861e2a 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,24 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    \n+    # Test that evalf works correctly with a single function\n+    assert f(2).evalf() == Float(4)\n+    assert g(2).evalf() == Float(4)\n+    \n+    # Test that evalf works correctly with nested functions\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+\n+    # Additional test for three layers of nesting\n+    assert f(f(g(2))).evalf() == Float(256)\n+    assert f(g(f(2))).evalf() == Float(64)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..0de99d9 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -80,6 +80,19 @@ def test_Identity():\n     assert A*Im == A\n     assert In*A == A\n \n+    # Test case for the sum of elements of an identity matrix\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).subs(n, 3).doit() == 3\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).subs(n, 5).doit() == 5\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).subs(n, 10).doit() == 10\n+\n+    # Additional test cases for different properties of In\n+    assert ask(Query.diagonal(In))  # Identity matrix is diagonal\n+    assert In.trace() == n  # The trace of the identity matrix should be n\n+    assert In.doit()[0, 0] == 1  # Asserting specific element for sanity check\n+    assert In.doit()[1, 1] == 1\n+    assert In.doit()[0, 1] == 0\n+    assert In.doit()[1, 0] == 0\n+\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..fadf26e 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,22 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # Test for non-disjoint cycles resulting in an identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+\n+    # Test for non-disjoint cycles as described in the issue\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[0, 2], [0, 1]]) == Permutation([1, 0, 2])\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([1, 2, 0])\n+    assert Permutation([[2, 0], [0, 1]]) == Permutation([2, 0, 1])\n+\n+    # Ensure that an empty list of cycles gives the identity permutation\n+    assert Permutation([]) == Permutation([0])\n+    assert Permutation([[]]) == Permutation([0])\n+\n+    # Test where single element cycles are interleaved with longer ones\n+    assert Permutation([[0, 1], [2], [1, 2]]) == Permutation([2, 0, 1])\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex fa86bc3..621c99d 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -1273,8 +1273,35 @@ def test_zeros_ones_fill():\n     assert zeros(2, 3) == Matrix(2, 3, [0]*6)\n     assert ones(2, 3) == Matrix(2, 3, [1]*6)\n \n-\n-def test_empty_zeros():\n+def test_matrix_hstack_vstack():\n+    # Test the behavior of hstack with zero-row matrices\n+    from sympy import Matrix\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1)\n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+    \n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+    \n+    M1 = Matrix.zeros(1, 0)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(1, 2)\n+    M4 = Matrix.zeros(1, 3)\n+    \n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+    # Test the behavior of vstack with zero-column matrices\n+    M1 = Matrix.zeros(0, 1)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(2, 1)\n+    \n+    assert Matrix.vstack(M1, M2, M3).shape == (3, 1)\n+\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(2, 0)\n+    M3 = Matrix.zeros(3, 0)\n+\n+    assert Matrix.vstack(M1, M2, M3).shape == (5, 0)\n     a = zeros(0)\n     assert a == Matrix()\n     a = zeros(0, 2)\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..8a59e81 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,6 +170,21 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import Mul, Max, NS\n+from sympy.abc import x, y\n+\n+def test_evalf_issue_13076():\n+    # Original test case\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Additional test cases to verify robustness\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(Max(0, x), y, evaluate=False).evalf()) == 'y*Max(0, x)'\n+    assert NS(Mul(y, Max(x, 0), evaluate=False).evalf()) == 'y*Max(x, 0)'\n+\n+    # Test with concrete numbers\n+    assert NS(Mul(Max(0, 5), 3, evaluate=False).evalf()) == '3*Max(0, 5)'\n+    assert NS(Mul(Max(-1, 0), 5, evaluate=False).evalf()) == '5*Max(0, -1)'\n \n def test_evalf_bugs():\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n",
  "sympy__sympy-13480": "",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..ee4f13b 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -167,6 +167,23 @@ def test_difference():\n \n def test_Complement():\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n+\n+    # Test case for issue where Complement doesn't work with mixture of Symbols and numbers\n+    from sympy import FiniteSet, Interval, Symbol\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # Existing test case reflecting the original issue\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n+    # Additional test cases\n+    a = FiniteSet(x, 3, 5)\n+    b = Interval(1, 4)\n+    assert Complement(a, b) == Complement(FiniteSet(x, 5), Interval(1, 4))\n+\n+    a = FiniteSet(1, 2, 3, x, y)\n+    b = Interval(2, 3)\n+    assert Complement(a, b) == FiniteSet(1) + Complement(FiniteSet(x, y), b)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n                             FiniteSet(2, 3, 4)), Interval(1, 3)) == \\\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..89e7054 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,19 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_col_insert_issue_13643():\n+    M = Matrix.eye(6)\n+    V = Matrix.ones(6, 2) * 2\n+    expected_result = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected_result\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..77ab6cd 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -673,8 +673,29 @@ def test_Poly_mul():\n \n     assert Poly(1, x) * x == Poly(x, x)\n     assert Poly(1, x) * sin(x) == sin(x)\n-\n     assert Poly(x, x) * 2 == Poly(2*x, x)\n+\n+def test_issue_multiplying_Poly():\n+    from sympy import Poly, S, symbols\n+\n+    x = symbols('x')\n+\n+    # Original test cases from the issue description\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n+    # Additional test cases to ensure thorough testing\n+    assert Poly(2*x, x)*x == Poly(2*x**2, x, domain='ZZ')\n+    assert x*Poly(2*x, x) == Poly(2*x**2, x, domain='ZZ')\n+    assert Poly(-x, x)*x == Poly(-x**2, x, domain='ZZ')\n+    assert x*Poly(-x, x) == Poly(-x**2, x, domain='ZZ')\n+    assert Poly(x)*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert Poly(x)*Poly(-x) == Poly(-x**2, x, domain='ZZ')\n+    assert Poly(-x)*Poly(x) == Poly(-x**2, x, domain='ZZ')\n+    assert Poly(-x)*Poly(-x) == Poly(x**2, x, domain='ZZ')\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..15c805e 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,8 +54,19 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+from sympy import symbols, Rational, latex, Integral\n \n-def test_latex_basic():\n+x, y = symbols('x y')\n+\n+def test_mul_symbol_arbitrary():\n+    # Test case to check if user-defined mul_symbol is accepted\n+    assert latex(3*x**2*y, mul_symbol='\\\\\\\\,') == r\"3\\\\,x^{2}\\\\,y\"\n+\n+    # Ensure numbers still use default dot symbol\n+    assert latex(1.5*3**x, mul_symbol='\\\\\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+\n+    # Test case with an integral to verify thin space separation\n+    assert latex(Integral(2*x**2*y, x)) == r\"\\int 2 x^{2} y\\, dx\"\n     assert latex(1 + x) == \"x + 1\"\n     assert latex(x**2) == \"x^{2}\"\n     assert latex(x**(1 + x)) == \"x^{x + 1}\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..64a1574 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -400,6 +400,17 @@ def test_determinant():\n                  (y, z, x) ))\n \n     assert M.det(method=\"bareiss\") == z**2 - x*y\n+\n+    # Test cases for issue 13835\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    assert M(3).det() == simplify(2*a*(a + 2) + 2*a*(2*a + 1) - 3*a*(2*a + 2))\n+    assert M(4).det() == 0\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n \n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..b20eb65 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -709,7 +709,69 @@ def test_issue_10003():\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n \n-def test_precomputed_cdf():\n+def test_issue_precomputed_cdf():\n+    from sympy import diff, simplify, Piecewise, symbols, sqrt, exp, gamma, pi\n+    from sympy.stats import density, cdf\n+    from sympy.stats import Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum\n+    x = symbols(\"x\", real=True, finite=True)\n+    \n+    # Test cases with expected CDFs\n+    arcsin_cdf = Piecewise(\n+        (0, x < 0),\n+        (2 * sqrt(x / 3) / pi, x <= 3),\n+        (1, True)\n+    )\n+    assert simplify(cdf(Arcsin(\"x\", 0, 3))(x) - arcsin_cdf) == 0\n+\n+    dagum_cdf = Piecewise(\n+        ((1 + (x / 2)**(-1/3))**(-1/5), x >= 0),\n+        (0, True)\n+    )\n+    assert simplify(cdf(Dagum(\"x\", S(1)/3, S(1)/5, 2))(x) - dagum_cdf) == 0\n+\n+    erlang_cdf = Piecewise(\n+        (gamma(1, x) / gamma(1), x > 0),\n+        (0, True)\n+    )\n+    assert simplify(cdf(Erlang(\"x\", 1, 1))(x) - erlang_cdf) == 0\n+\n+    frechet_cdf = Piecewise(\n+        (exp(-((x - 2) / 1)**(-4/3)), x >= 2),\n+        (0, True)\n+    )\n+    assert simplify(cdf(Frechet(\"x\", S(4)/3, 1, 2))(x) - frechet_cdf) == 0\n+\n+    gamma_cdf = gamma(0.1, x/2) / gamma(0.1)\n+    assert simplify(cdf(Gamma(\"x\", 0.1, 2))(x) - gamma_cdf) == 0\n+\n+    gamma_inverse_cdf = gamma(5/7, 2/x) / gamma(5/7)\n+    assert simplify(cdf(GammaInverse(\"x\", S(5)/7, 2))(x) - gamma_inverse_cdf) == 0\n+\n+    kumaraswamy_cdf = Piecewise(\n+        (1 - (1 - x**(1/123))**5, x <= 1),\n+        (0, True)\n+    )\n+    assert simplify(cdf(Kumaraswamy(\"x\", S(1)/123, 5))(x) - kumaraswamy_cdf) == 0\n+\n+    laplace_cdf = Piecewise(\n+        (exp((x - 2)/3) / 2, x < 2),\n+        (1 - exp(-(x - 2)/3) / 2, True)\n+    )\n+    assert simplify(cdf(Laplace(\"x\", 2, 3))(x) - laplace_cdf) == 0\n+\n+    logistic_cdf = 1 / (1 + exp(-(x - 1)/0.1))\n+    assert simplify(cdf(Logistic(\"x\", 1, 0.1))(x) - logistic_cdf) == 0\n+\n+    nakagami_cdf = gamma(7/3, 7*x**2) / gamma(7/3)\n+    assert simplify(cdf(Nakagami(\"x\", S(7)/3, 1))(x) - nakagami_cdf) == 0\n+\n+    student_t_cdf = 1/2 + x*gamma(11/2)*hyper([1/2, 11/2], [3/2], -x**2/10)/(sqrt(pi)*sqrt(10)*gamma(5))\n+    assert simplify(cdf(StudentT(\"x\", 10))(x) - student_t_cdf) == 0\n+\n+    uniform_sum_cdf = sum([(gamma(5, x - i)) for i in range(5)])\n+    assert simplify(cdf(UniformSum(\"x\", 5))(x) - uniform_sum_cdf) == 0\n+    \n+    assert True  # Placeholder to ensure the function runs\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..664b1df 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -46,6 +46,33 @@ def test_tensor_product_commutator():\n \n \n def test_tensor_product_simp():\n+    from sympy.physics.quantum import TensorProduct as TP\n+    from sympy.physics.quantum import tensor_product_simp\n+    from sympy import symbols, Symbol\n+    from sympy.physics.paulialgebra import Pauli\n+\n+    A, B, C, D = symbols('A B C D', commutative=False)\n+    x = Symbol('x')\n+\n+    # Test basic simplification and combinations\n+    assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n+    \n+    # Additional test cases for tensor product powers\n+    t1 = TP(1, 1)*TP(1, 1)\n+    assert tensor_product_simp(t1) == TP(1, 1)\n+\n+    t2 = TP(1, Pauli(3))*TP(1, Pauli(3))\n+    assert tensor_product_simp(t2) == TP(1, Pauli(3)**2)\n+\n+    # Test with symbolic exponentiation\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+    assert tensor_product_simp(x*(TP(A, B)**2)*TP(C, D)) == x*TP(A**2*C, B**2*D)\n+    assert tensor_product_simp(TP(A,B) - TP(C,D)**x) == TP(A,B) - TP(C**x, D**x)\n+\n+    # Special handling for substitution in tensor products\n+    assert tensor_product_simp(TP(1, 1)*TP(1, A)).subs(A, 1) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, Pauli(3))*TP(1, A)).subs(A, Pauli(3)) == TP(1, 1)\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n \n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..14db4dc 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,7 +79,16 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n-def test_python_relational():\n+from sympy import S, Symbol, Eq, Ne, python\n+from sympy.printing.str import sstr\n+\n+def test_python_respects_sympy_integers():\n+    x = Symbol(\"x\")\n+    y = Symbol(\"y\")\n+    # Test if sympy_integers setting is respected in relational expressions\n+    assert sstr(Eq(x, S(1)/2), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Ne(x, S(1)/2), sympy_integers=True) == \"Ne(x, S(1)/2)\"\n+    assert sstr(Eq(x, y) + S(1)/2, sympy_integers=True) == \"Eq(x, y) + S(1)/2\"\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..c6fb1ec 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -5,6 +6,9 @@ import inspect\n \n import mpmath\n from sympy.utilities.pytest import XFAIL, raises\n+import inspect\n+from sympy import rf\n+from sympy.solvers import nsolve\n from sympy import (\n     symbols, lambdify, sqrt, sin, cos, tan, pi, acos, acosh, Rational,\n     Float, Matrix, Lambda, Piecewise, exp, Integral, oo, I, Abs, Function,\n@@ -133,7 +137,22 @@ def test_math_lambda():\n            # if this succeeds, it can't be a python math function\n \n \n-@conserve_mpmath_dps\n+def test_lambdify_rational_with_mpmath():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Verify source code to ensure mpmath.mpf wrappers are used\n+    source = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source\n+    \n+    # Test to verify proper high-precision solution with nsolve\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected_result = (77 + Rational(1, 3)).evalf(64)\n+    \n+    # Assert nearly equal (considering precision issues)\n+    assert abs(result - expected_result) < 1e-60\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -144,7 +163,22 @@ def test_mpmath_lambda():\n            # if this succeeds, it can't be a mpmath function\n \n \n-@conserve_mpmath_dps\n+def test_lambdify_rational_with_mpmath():\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Verify source code to ensure mpmath.mpf wrappers are used\n+    source = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source\n+    \n+    # Test to verify proper high-precision solution with nsolve\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected_result = (77 + Rational(1, 3)).evalf(64)\n+    \n+    # Assert nearly equal (considering precision issues)\n+    assert abs(result - expected_result) < 1e-60\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..869bda0 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -79,8 +80,36 @@ def test_ndim_array_initiation():\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n+def test_len_rank_zero_array():\n+    from sympy import Array\n+    from sympy.abc import x\n+\n+    # Test len for rank-0 array with a scalar\n+    scalar_array = Array(3)\n+    assert len(scalar_array) == 1  # Should return 1, as it contains one element\n+\n+    # Ensure consistent behavior for other cases\n+    rank_zero_array = ImmutableDenseNDimArray(x)\n+    assert len(rank_zero_array) == 1, \"Rank zero array should have length 1\"\n+    assert len(list(rank_zero_array)) == 1, \"Iterator should return 1 element\"\n+    assert rank_zero_array[()] == x\n \n-def test_reshape():\n+    # Test with different data types\n+    float_array = Array(3.14)\n+    assert len(float_array) == 1\n+    assert float_array[()] == 3.14\n+\n+    string_array = Array(\"test\")\n+    assert len(string_array) == 1\n+    assert string_array[()] == \"test\"\n+\n+    # Verify exception for invalid indexing\n+    try:\n+        rank_zero_array[0]\n+    except ValueError:\n+        pass\n+    else:\n+        raise AssertionError(\"Indexing a rank-0 array with an integer should raise ValueError\")\n     array = ImmutableDenseNDimArray(range(50), 50)\n     assert array.shape == (50,)\n     assert array.rank() == 1\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..c8b324b 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,57 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_iss1593():\n+    \"\"\"\n+    There was a sign mistake in the definition,\n+    of the rotation matrix. This tests that particular sign mistake.\n+    See issue 1593 for reference.\n+    See wikipedia\n+    https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\n+    for the correct definition\n+    \"\"\"\n+    from sympy import symbols, cos, sin, Matrix, trigsimp\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    assert(trigsimp(q.to_rotation_matrix()) == Matrix([\n+                [1,      0,      0],\n+                [0, cos(x), -sin(x)],\n+                [0, sin(x), cos(x)]]))\n+\n+def test_quaternion_rotation_additional():\n+    \"\"\"\n+    Additional test cases to verify the correctness of Quaternion.to_rotation_matrix().\n+    \"\"\"\n+    from sympy import symbols, cos, sin, Matrix, trigsimp\n+\n+    # Test case with 90-degree rotation around the x-axis\n+    theta = symbols('theta')\n+    q_x = Quaternion(cos(theta/2), sin(theta/2), 0, 0)\n+    expected_matrix_x = Matrix([\n+        [1,       0,        0],\n+        [0, cos(theta), -sin(theta)],\n+        [0, sin(theta),  cos(theta)]\n+    ])\n+    assert trigsimp(q_x.to_rotation_matrix()) == expected_matrix_x\n+\n+    # Test case with 90-degree rotation around the y-axis\n+    q_y = Quaternion(cos(theta/2), 0, sin(theta/2), 0)\n+    expected_matrix_y = Matrix([\n+        [cos(theta), 0, sin(theta)],\n+        [0,          1,       0   ],\n+        [-sin(theta), 0, cos(theta)]\n+    ])\n+    assert trigsimp(q_y.to_rotation_matrix()) == expected_matrix_y\n+\n+    # Test case with 90-degree rotation around the z-axis\n+    q_z = Quaternion(cos(theta/2), 0, 0, sin(theta/2))\n+    expected_matrix_z = Matrix([\n+        [cos(theta), -sin(theta), 0],\n+        [sin(theta),  cos(theta), 0],\n+        [0,                   0,  1]\n+    ])\n+    assert trigsimp(q_z.to_rotation_matrix()) == expected_matrix_z\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +170,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..f44309a 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1622,6 +1622,23 @@ def test_Mod():\n     assert (x*(x + 1)) % (x + 1) == (x + 1)*Mod(x, 1)\n     assert Mod(5.0*x, 0.1*y) == 0.1*Mod(50*x, y)\n     i = Symbol('i', integer=True)\n+    j = Symbol('j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+    # Additional cases\n+    # Test with different coefficients\n+    assert Mod(6*i, 4) == 2*Mod(i, 2)\n+    assert Mod(9*i, 3) == 0\n+    assert Mod(12*i, 5) == 2*Mod(i, 5)\n+    # Test with a negative coefficient\n+    assert Mod(-3*i, 2) == -Mod(i, 2)\n+    # Test with a mix of positive and negative\n+    assert Mod(3*i - 5*i, 2) == Mod(-2*i, 2)\n+    # Test with symbolic expression\n+    assert Mod(3*i + 5*j, 2) == Mod(i + j, 2)\n+    # Test with no simplification possible\n+    assert Mod(7*i, 3) == Mod(7*i, 3)\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..fcf534d 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -75,6 +75,11 @@ def test_Min():\n     assert Min(nn, oo) == nn\n     assert Min(oo, nn) == nn\n     assert Min(p, p) == p\n+    from sympy import oo, S, Min, Max\n+    p = Symbol('p', positive=True)\n+\n+    assert Min() == S.Infinity\n+    assert Max() == S.NegativeInfinity\n     assert Min(p, oo) == p\n     assert Min(oo, p) == p\n     assert Min(oo, oo) == oo\n@@ -85,7 +90,6 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +160,6 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..ec5875f 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,6 +1986,11 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+def test_issue_15873():\n+    # Test case derived from Issue 15873\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True\n \n def test_issue_14392():\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n@@ -1993,4 +1998,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..fb0a750 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,8 +477,21 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n-\n-def test_issue_5950():\n+def test_posify_keeps_finite_assumption():\n+    # Test to ensure posify preserves 'finite' assumption and other related assumptions.\n+    k = Symbol('k', finite=True)\n+    eq, _ = posify(k)\n+    assert 'finite' in eq.assumptions0 and eq.is_finite is True\n+    assert 'infinite' in eq.assumptions0 and eq.is_infinite is False\n+\n+    # Check additional assumptions like integer, rational, prime, even, odd\n+    m = Symbol('m', integer=True, rational=True, prime=True, even=False, odd=True)\n+    eq, _ = posify(m)\n+    assert eq.is_integer is True\n+    assert eq.is_rational is True\n+    assert eq.is_prime is True\n+    assert eq.is_even is False\n+    assert eq.is_odd is True\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n     assert logcombine(log(x) - log(y)) == log(x/y)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..5857af6 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -34,6 +36,14 @@ def test_PythonCodePrinter():\n                         (3, Gt(x, 0)), evaluate=False)) == '((2) if (x <= 0) else'\\\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n+    \n+    # Test for the PythonCodePrinter handling of Indexed\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y]) == 'p[x, y]'\n+    # Test with single index\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[x]) == 'p[x]'\n \n \n def test_MpmathPrinter():\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..c90be72 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -30,8 +30,19 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     output.close()\n     return source\n \n+def test_autowrap_cython_unused_array_argument():\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+    from sympy.utilities.autowrap import autowrap\n \n-def test_cython_wrapper_scalar_function():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in the expression\n+    try:\n+        f = autowrap(expr, args=(x,), backend='cython')\n+        result = f(np.array([[1.0], [2.0]]))\n+        assert result == 1.0\n+    except TypeError as e:\n+        assert False, f\"autowrap failed with an unexpected TypeError: {e}\"\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..b1f6ab6 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -238,6 +238,8 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n \n+from sympy.crypto.crypto import encode_morse  # Make sure the encode_morse function is imported\n+\n def test_encode_morse():\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n@@ -248,8 +250,16 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n-\n-def test_decode_morse():\n+def test_morse_digit_encoding():\n+    # Test for correct Morse encoding of '1'\n+    assert encode_morse('1') == '.----'\n+    # Test for some more digits to ensure they are correctly encoded\n+    assert encode_morse('0') == '-----'\n+    assert encode_morse('9') == '----.'\n+    assert encode_morse('5') == '.....'\n+    # Original test case verifying the encoding of a sequence of digits\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..7485f99 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -175,8 +178,14 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n+def test_issue_12420():\n+    assert _sqrt_match(4 + I) == []\n+\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr\n \n-def test_issue_5653():\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..b1f8a62 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,6 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n+from sympy import sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -28,6 +30,11 @@ def test_point():\n     assert (p2 - p1) == Point(y1 - x1, y2 - x2)\n     assert p4*5 == Point(5, 5)\n     assert -p2 == Point(-y1, -y2)\n+    \n+    # Verify multiplication with sympify-ed number works from the right side\n+    assert p3 + p4 * sympify(2.0) == Point(2, 2)\n+    assert p3 + sympify(2.0) * p4 == Point(2, 2)\n+\n     raises(ValueError, lambda: Point(3, I))\n     raises(ValueError, lambda: Point(2*I, I))\n     raises(ValueError, lambda: Point(3 + I, I))\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..ccce0eb 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -473,8 +473,15 @@ def test_descent():\n     # supposed to be square-free\n     raises(TypeError, lambda: descent(4, 3))\n \n+from sympy.abc import x, y, n, m\n+from sympy.solvers.diophantine import diophantine\n \n def test_diophantine():\n+    # Test case for issue 18186\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n     assert check_solutions((x - y)*(y - z)*(z - x))\n     assert check_solutions((x - y)*(x**2 + y**2 - z**2))\n     assert check_solutions((x - 3*y + 7*z)*(x**2 + y**2 - z**2))\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..dc9fff6 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -672,6 +672,21 @@ def test_latex_derivatives():\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n \n+from sympy import Subs, latex\n+from sympy.abc import x, y, z\n+\n+def test_latex_subs_with_mul():\n+    # Original test case in the patch for verification\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n+    # Additional test cases to ensure thorough testing\n+    assert latex(4*Subs(x-y, (x,), (2,))) == r'4 \\left. \\left(x - y\\right) \\right|_{\\substack{ x=2 }}'\n+    assert latex(-5*Subs(y*x, (x,), (z,))) == r'- 5 \\left. \\left(y x\\right) \\right|_{\\substack{ x=z }}'\n+    assert latex(Subs(x+y, (x,), (1,))) == r'\\left. \\left(x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(2*x*Subs(x-y, (x,), (1,))) == r'2 x \\left. \\left(x - y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(x*Subs(x+y, (x,), (1,))) == r'x \\left. \\left(x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(3*x + Subs(x-y, (x,), (1,))) == r'3 x + \\left. \\left(x - y\\right) \\right|_{\\substack{ x=1 }}'\n+\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..91843e2 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -484,6 +484,35 @@ def test_geometry():\n \n \n def test_kernS():\n+    from sympy.abc import x, y\n+    \n+    # Original test case\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+    \n+    # Additional test cases\n+    # Testing with nested parentheses\n+    assert kernS(\"((x + 1)*(x - 1))\") == (x + 1)*(x - 1)\n+    \n+    # Testing with multiple levels of nested parentheses\n+    assert kernS(\"((x + (2*y))/(1 - y))\") == (x + 2*y)/(1 - y)\n+    \n+    # Testing with negated expressions\n+    assert kernS(\"-(x + y)\") == -(x + y)\n+    \n+    # Testing with more complex expressions\n+    assert kernS(\"(-((x + 1)*(x - 1)))\") == -((x + 1)*(x - 1))\n+    assert kernS(\"-(x + 1)*(x + 2)\") == -(x + 1)*(x + 2)\n+    \n+    # Testing with implied multiplication\n+    assert kernS(\"x(x + 1)\") == x*(x + 1)\n+    assert kernS(\"y(x + y)(x - y)\") == y*(x + y)*(x - y)\n+    \n+    # Ensure invalid expression strings raise the expected error\n+    try:\n+        kernS(\"(x + 1\")\n+        assert False, \"Expected SympifyError due to unmatched parenthesis\"\n+    except SympifyError:\n+        pass\n     s =   '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'\n     # when 1497 is fixed, this no longer should pass: the expression\n     # should be unchanged\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..40889e2 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -11,6 +12,7 @@ from sympy.physics.quantum.state import Ket, Bra, Wavefunction\n from sympy.physics.quantum.qapply import qapply\n from sympy.physics.quantum.represent import represent\n from sympy.core.trace import Tr\n+from sympy.testing.pytest import raises\n from sympy.physics.quantum.spin import JzKet, JzBra\n from sympy.matrices import eye\n \n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..5b19150 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,9 +905,16 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n-\n-@slow\n-def test_presentation():\n+def test_issue_sylow_subgroup_indexerror():\n+    # DihedralGroup(18) should not raise IndexError and should return a subgroup of correct order\n+    G = DihedralGroup(18)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 6  # 18 is 2 * 3^2, the Sylow 2-subgroup has order 2^1 = 2\n+\n+    # DihedralGroup(50) should not raise IndexError and should return a subgroup of correct order\n+    G = DihedralGroup(50)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 10  # 50 is 2 * 5^2, the Sylow 2-subgroup has order 2^1 * 2 = 10\n     def _test(P):\n         G = P.presentation()\n         return G.order() == P.order()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..1a0fd07 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,7 +470,17 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n-\n+from sympy.utilities.iterables import partitions\n+import pytest\n+\n+def test_partitions_reuse():\n+    # Ensure that partitions are not reused by checking their identity\n+    results = list(partitions(5))\n+    for i, p1 in enumerate(results):\n+        for j, p2 in enumerate(results):\n+            if i != j:\n+                assert p1 is not p2, \"Partitions should not be reused: they must have different identities\"\n+        \n def test_partitions():\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..3d96520 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,25 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Additional tests for thoroughness\n+    assert (S(1.0) == S.false) is False\n+    assert (S.false == S(1.0)) is False\n+    assert (S(-1.0) == S.false) is False\n+    assert (S.false == S(-1.0)) is False\n+\n+    assert (S(0.0) != S.false) is True\n+    assert (S.false != S(0.0)) is True\n+    assert (S(1.0) != S.false) is True\n+    assert (S.false != S(1.0)) is True\n+    assert (S(-1.0) != S.false) is True\n+    assert (S.false != S(-1.0)) is True\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..770a49d 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -7,6 +8,8 @@ from sympy import (\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+from sympy.core.cache import clear_cache\n+from sympy.functions.elementary.trigonometric import sinh, cosh, tanh\n \n def test_subs():\n     n3 = Rational(3)\n@@ -19,6 +22,32 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+def test_issue_21373():\n+    x_r, y_r = symbols('x_r y_r', real=True)\n+    \n+    # Clear cache and evaluate the expression\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr.subs({1: 1.0}) is not None\n+\n+    # Variation with cosh\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_cosh.subs({1: 1.0}) is not None\n+\n+    # Variation with tanh\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_tanh.subs({1: 1.0}) is not None\n+\n+    # Test removing division by z\n+    clear_cache()\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_div.subs({1: 1.0}) is not None\n+\n+    # Test removing exp\n+    clear_cache()\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    assert expr_no_exp.subs({1: 1.0}) is not None\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..7e2f409 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -12,11 +12,37 @@ from sympy.polys.monomials import (\n from sympy.polys.polyerrors import ExactQuotientFailed\n \n from sympy.abc import a, b, c, x, y, z\n+from sympy import symbols\n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n-\n-def test_monomials():\n+def test_itermonomials_min_degrees():\n+    # Test case based on the reported issue\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+    monomials = sorted(itermonomials(states, max_degrees, min_degrees=min_degrees), \n+                       key=monomial_key('grlex', states))\n+    expected_monomials = {x1**3, x2**3, x3**3, x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3, \n+                          x3**2*x1, x3**2*x2, x1*x2**2, x1*x3**2, x2*x3**2, x2*x1**2, x3*x1**2}\n+    assert set(monomials) == expected_monomials\n+\n+    # Ensure the max and min degrees work as intended\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+    \n+    i, j, k = symbols('i j k', commutative=False)\n+    assert set(itermonomials([i, j, k], 2, 2)) == \\\n+           {k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k}\n+    assert set(itermonomials([i, j, k], 3, 2)) == \\\n+           {j*k**2, i*k**2, k*i*j, k*i**2, k**2, j*k*j, k*j**2, i*k*i, i*j,\n+            j**2*k, i**2*j, j*i*k, j**3, i**3, k*j*i, j*k*i, j*i,\n+            k**2*j, j*i**2, k*j, k*j*k, i*j*i, j*i*j, i*j**2, j**2,\n+            k*i*k, i**2, j*k, i*k, i*k*j, k**3, i**2*k, j**2*i, k**2*i,\n+            i*j*k, k*i}\n \n     # total_degree tests\n     assert set(itermonomials([], 0)) == {S.One}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..5a9def5 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..f1994b9 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -7,6 +8,7 @@ from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n+from sympy.core.parameters import evaluate\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n@@ -440,7 +442,18 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Originally caused a crash, checking if it works now\n+    with evaluate(False):\n+        p = Point(1, 2)\n+        assert isinstance(p, Point2D)\n+        assert p.x == 1\n+        assert p.y == 2\n+    # Ensure Point works without evaluate=False\n+    p2 = Point(1, 2)\n+    assert isinstance(p2, Point2D)\n+    assert p2.x == 1\n+    assert p2.y == 2\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..fb0e632 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -53,7 +54,24 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n     assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n-    assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n+    assert prntr.doprint(KroneckerDelta(x, y)) == '(1 if x == y else 0)'\n+\n+    # Test PythonCodePrinter for Min and Max functions\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+\n+    # Additional tests for varying arguments\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+\n+    # Test with numeric constants\n+    assert prntr.doprint(Min(x, 2, 3)) == \"min(x, 2, 3)\"\n+    assert prntr.doprint(Max(x, 2, 3)) == \"max(x, 2, 3)\"\n+\n+    # Test with symbolic expressions\n+    a, b = symbols(\"a b\")\n+    assert prntr.doprint(Min(a + b, b - x)) == \"min(a + b, b - x)\"\n+    assert prntr.doprint(Max(a + b, b - x)) == \"max(a + b, b - x)\"\n \n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..58879e6 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1198,7 +1198,9 @@ def test_issue_14941():\n     assert f3(2, 3) == [3, 2]\n \n \n-def test_lambdify_Derivative_arg_issue_16468():\n+def test_single_element_tuple():\n+    f2b = lambdify([], (1,))  # Test for single element tuple\n+    assert f2b() == (1,), \"The lambdified function should return a tuple with one element, (1,)\"\n     f = Function('f')(x)\n     fx = f.diff()\n     assert lambdify((f, fx), f + fx)(10, 5) == 15\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..530c406 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,11 +1,13 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n-from sympy.core.symbol import disambiguate\n+from sympy.core.symbol import disambiguate, symbols\n \n def test_Str():\n     a1 = Str('a')\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..56de7e8 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -261,8 +261,35 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n+def test_kahane_leading_gamma_matrix_fixed():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    t1 = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r1 = kahane_simplify(t1)\n+    assert r1.equals(4*G(rho)*G(sigma))\n+\n+    t2 = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r2 = kahane_simplify(t2)\n+    assert r2.equals(4*G(rho)*G(sigma))\n+\n+    # Additional test cases for thorough coverage:\n+    # Check if random orderings are preserved when no contractions are involved\n+    t3 = G(rho)*G(sigma)\n+    r3 = kahane_simplify(t3)\n+    assert r3.equals(G(rho)*G(sigma))\n+\n+    t4 = G(sigma)*G(rho)\n+    r4 = kahane_simplify(t4)\n+    assert r4.equals(G(sigma)*G(rho))\n+\n+    # Check multiple permutations\n+    t5 = G(mu)*G(nu)*G(rho)*G(sigma)\n+    r5 = kahane_simplify(t5)\n+    assert r5.equals(G(mu)*G(nu)*G(rho)*G(sigma))\n \n-def test_gamma_matrix_class():\n+    t6 = G(sigma)*G(rho)*G(nu)*G(mu)\n+    r6 = kahane_simplify(t6)\n+    assert r6.equals(G(sigma)*G(rho)*G(nu)*G(mu))\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..c6dfb61 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,26 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import S, Piecewise, Symbol, Reals, Integers, FiniteSet, Contains, Eq, raises\n+\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # Original tests provided to ensure functionality without the fix\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n+    \n+    # Verification for the issue. The following should raise an error due to the absence of as_set method.\n+    raises(NotImplementedError, lambda: Contains(x, Reals).as_set())\n+\n+    # Additional test cases to confirm failure in specific scenarios as per issue\n+    raises(AttributeError, lambda: Piecewise((6, Contains(x, Reals)), (7, True)))\n+\n+    # Ensuring that a TypeError is raised when non-set is passed (for coverage)\n+    raises(TypeError, lambda: Contains(2, None))\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -48,4 +68,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..8d66028 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,12 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+from sympy.core.numbers import E\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+from sympy.physics.units import Quantity\n+from sympy.physics.units.systems.si import SI\n+from sympy import exp\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n@@ -541,7 +547,22 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..8663a4d 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,68 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24211():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter, Quantity\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1 * T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_with_different_scale_factors():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter, Quantity\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    expr = A1 * T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_with_zero_acceleration():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter, Quantity\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 3 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    # Zero acceleration\n+    SI.set_quantity_scale_factor(A1, 0 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 2 * second)\n+\n+    expr = A1 * T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..8b8590a 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -106,4 +107,20 @@ def test_check_homomorphism():\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n-    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+\n+    # Test if the homomorphism for `DihedralGroup(3)` works as expected\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Additional test cases for `PermutationGroup` with inverses\n+    c = Permutation(0, 1, 2)\n+    G = PermutationGroup([c, c**-1])\n+    H = PermutationGroup([c])\n+    # Valid homomorphism with inverse\n+    T2 = homomorphism(G, H, [c, c**-1], [c, c])\n+    assert T2.is_homomorphism()\n+\n+    # Invalid homomorphism due to incorrect mapping\n+    raises(ValueError, lambda: homomorphism(G, H, [c, c**-1], [c, c**-1]))\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..133293d 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -266,6 +266,23 @@ def test_PolyElement_as_expr():\n     assert f.as_expr(X, Y, Z) == g\n \n     raises(ValueError, lambda: f.as_expr(X))\n+        \n+    # New test cases\n+    # Test as_expr with different symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test as_expr with more symbols than necessary\n+    U, V, W, T = symbols(\"u,v,w,t\")\n+    raises(ValueError, lambda: f.as_expr(U, V, W, T))\n+\n+    # Test as_expr with fewer symbols than necessary\n+    U, V = symbols(\"u,v\")\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test as_expr with no symbols (should use default ring symbols)\n+    assert f.as_expr() == g\n \n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..d528938 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -274,6 +274,34 @@ def test_convert_equals_signs():\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n \n+from sympy.parsing.sympy_parser import parse_expr\n+from sympy.core import Eq, Lt, Le, Gt, Ge, Ne\n+\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+# Additional test cases to cover more scenarios\n+def test_parse_expr_with_evaluate_false_on_relationals():\n+    exprs = {\n+        \"3 < 4\": Lt(3, 4, evaluate=False),\n+        \"5 <= 6\": Le(5, 6, evaluate=False),\n+        \"7 > 8\": Gt(7, 8, evaluate=False),\n+        \"9 >= 10\": Ge(9, 10, evaluate=False),\n+        \"-1 != 0\": Ne(-1, 0, evaluate=False),\n+        \"-3 == -3\": Eq(-3, -3, evaluate=False)\n+    }\n+    for expr, expected in exprs.items():\n+        assert parse_expr(expr, evaluate=False) == expected\n+\n def test_parse_function_issue_3539():\n     x = Symbol('x')\n     f = Function('f')\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..ba1a96e 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -63,6 +63,8 @@ def test_unit_grammar_fail(string):\n         ([\"10pix/nm\"], u.Unit(10 * u.pix / u.nm)),\n         ([\"1.5x10+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"1.5\u00d710+11m\"], u.Unit(1.5e11 * u.m)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),  # Added test case for the unit in issue\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),  # Added test case for the unit in issue\n         ([\"m2\"], u.m**2),\n         ([\"10+21m\"], u.Unit(u.m * 1e21)),\n         ([\"2.54cm\"], u.Unit(u.cm * 2.54)),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..7bf6c13 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1890,9 +1890,33 @@ class OperationTests(OperationTestBase):\n         to_state = from_state.clone()\n         operation.state_forwards(app_label, to_state)\n         Author = to_state.apps.get_model(app_label, 'Author')\n+        # Test CheckConstraint with OR operator on SQLite and Oracle\n+        constraint = models.CheckConstraint(\n+            check=models.Q(field_1__isnull=False, flag=True) | models.Q(flag=False),\n+            name='field_1_has_value_if_flag_set'\n+        )\n+        with connection.schema_editor() as editor:\n+            operation = migrations.AddConstraint('TestConstraint', constraint)\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        TestConstraint.objects.create(field_1=1, flag=True)\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, from_state, to_state)\n         Author = to_state.apps.get_model(app_label, 'Author')\n+        # Test CheckConstraint with OR operator on SQLite and Oracle\n+        constraint = models.CheckConstraint(\n+            check=models.Q(field_1__isnull=False, flag=True) | models.Q(flag=False),\n+            name='field_1_has_value_if_flag_set'\n+        )\n+        with connection.schema_editor() as editor:\n+            operation = migrations.AddConstraint('TestConstraint', constraint)\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        TestConstraint.objects.create(field_1=1, flag=True)\n         with self.assertRaises(IntegrityError), transaction.atomic():\n             Author.objects.create(name='Albert', rebate='10$')\n         author = Author.objects.create(name='Albert', rebate='10%')\n",
  "django__django-11477": "",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..186a3c3 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -14,11 +15,37 @@ from .models import (\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    Item, Derived\n )\n \n \n class ModelInheritanceTest(TestCase):\n-    def test_model_inheritance(self):\n+    def test_reset_primary_key_creates_new_instance(self):\n+        # Create a derived object\n+        derived_instance = Derived.objects.create(f=True)\n+        initial_count = Derived.objects.count()\n+        \n+        # Reset primary key and save\n+        derived_instance.reset()\n+        derived_instance.save()\n+        \n+        # Fetch all instances and check the count\n+        self.assertEqual(Derived.objects.count(), initial_count + 1)\n+\n+    def test_reset_primary_key_does_not_overwrite(self):\n+        # Create a derived object\n+        derived_instance = Derived.objects.create(f=True)\n+        \n+        # Capture the original primary key\n+        original_pk = derived_instance.pk\n+        \n+        # Reset primary key and save\n+        derived_instance.reset()\n+        derived_instance.save()\n+        \n+        # Ensure the original instance is not overwritten\n+        original_instance = Derived.objects.get(pk=original_pk)\n+        self.assertTrue(original_instance.f)\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n         # existent child instance, saving the Parent doesn't duplicate the\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..fc7ab69 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -603,9 +603,19 @@ class DeletionTests(TestCase):\n                 )\n                 signal.disconnect(receiver, sender=Referrer)\n \n+from django.test import TestCase\n+from .models import User, Avatar, M2MTo, M2MFrom, Child, Parent, Origin, Referrer\n \n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all(self):\n+        '''Test to ensure Model.objects.all().delete() does not use a subquery.'''\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure no subquery is used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +712,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..d3ea6a4 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,23 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            {},  # Testing dictionary value\n+            (),  # Testing tuple\n+            [],  # Testing list\n+            set(),  # Testing set\n+            object(),  # Testing generic object\n+            complex(1, 1),  # Testing complex number\n+            'non-numeric string',  # Testing a non-numeric string\n+            b'non-numeric byte-string',  # Testing bytes\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..f3ad7a6 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,7 +6,8 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n+from django.db.models import Sum\n \n \n class PickleabilityTestCase(TestCase):\n@@ -260,6 +262,51 @@ class PickleabilityTestCase(TestCase):\n         self.assert_pickles(event.edition_set.order_by('event'))\n \n \n+class ValuesAnnotationPickleTests(TestCase):\n+    def test_values_annotation_pickle(self):\n+        # Set up test data\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+        # Create a QuerySet using values and annotate\n+        prices = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        self.assertEqual(list(prices), [\n+            {'material': 'wood', 'total_price': 110},\n+            {'material': 'plastic', 'total_price': 20}\n+        ])\n+        # Pickle and unpickle the query\n+        prices2 = Toy.objects.all()\n+        prices2.query = pickle.loads(pickle.dumps(prices.query))\n+\n+        # Check that the result after unpickling is still a list of dicts\n+        self.assertEqual(list(prices2), [\n+            {'material': 'wood', 'total_price': 110},\n+            {'material': 'plastic', 'total_price': 20}\n+        ])\n+\n+    def test_values_list_annotation_pickle(self):\n+        # Set up test data\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+        # Create a QuerySet using values_list and annotate\n+        prices = Toy.objects.values_list('material', 'total_price').annotate(total_price=Sum('price'))\n+        self.assertEqual(list(prices), [\n+            ('wood', 110),\n+            ('plastic', 20)\n+        ])\n+        # Pickle and unpickle the query\n+        prices2 = Toy.objects.all()\n+        prices2.query = pickle.loads(pickle.dumps(prices.query))\n+\n+        # Check that the result after unpickling is still correct\n+        self.assertEqual(list(prices2), [\n+            ('wood', 110),\n+            ('plastic', 20)\n+        ])\n+\n class InLookupTests(TestCase):\n \n     @classmethod\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..a907184 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -19,6 +19,16 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertIsNone(field.clean(''))\n         self.assertIsNone(field.clean(None))\n \n+    def test_unicode_serialization(self):\n+        field = JSONField()\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        self.assertEqual(field.prepare_value({'emoji': '\ud83d\ude00\ud83d\udc31'}), '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(\n+            field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]),\n+            '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]',\n+        )\n+\n     def test_invalid(self):\n         field = JSONField()\n         with self.assertRaisesMessage(ValidationError, 'Enter a valid JSON.'):\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..4e6e2fc 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6603,6 +6603,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_script_name_preserved_on_redirect(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        \n+        # Test with SCRIPT_NAME set\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix/')\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_script_name_force_setting(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        \n+        # Test with FORCE_SCRIPT_NAME in settings\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6629,6 +6667,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_script_name_preserved_on_redirect(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        \n+        # Test with SCRIPT_NAME set\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix/')\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_script_name_force_setting(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        \n+        # Test with FORCE_SCRIPT_NAME in settings\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..35e49bd 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,46 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Test that a migration with a custom field and mixin includes necessary imports.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+        \n+        class MyMixin:\n+            pass\n+        \n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+        \n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+        \n+        # Creating a migration simulation\n+        fields = {\n+            'name': MyField(primary_key=True),\n+        }\n+        \n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=list(fields.items()),\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        \n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        # Ensure the 'models' module is imported correctly\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"class MyField(app.models.MyField)\", output)\n+        self.assertIn(\"bases=(app.models.MyMixin, models.Model)\", output)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..191f853 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,7 +2988,19 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Deconstruction.\n+        # Test renaming an unnamed index and reverting\n+        with connection.schema_editor() as editor:\n+            # Rename index forward\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+            self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+            \n+            # Rename index backward\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+            self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+            \n+            # Re-apply renaming forward again\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+            self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n         self.assertEqual(definition[1], [])\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..9acc9ed 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -607,7 +607,87 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n-class AlterIndexTogether(AlterTogetherOptionOperation):\n+# Assuming imports and setup are done somewhere in the surrounding test file\n+# Here are only the additional test functions\n+\n+class TestRemoveUniqueTogether(TestCase):\n+    \n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_remove_unique_together_on_field_with_unique_and_composite(self):\n+        app_label = \"test_rutofwc\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"name\", models.CharField(max_length=30, unique=True)),\n+                        (\"code\", models.CharField(max_length=20)),\n+                    ],\n+                    options={\"unique_together\": {(\"name\", \"code\")}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        unique_constraint_name = f\"{table_name}_name_key\"\n+        composite_unique_together_constraint_name = f\"{table_name}_name_code_uniq\"\n+\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintExists(\n+            table_name, composite_unique_together_constraint_name, value=False\n+        )\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintNotExists(table_name, composite_unique_together_constraint_name)\n+\n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_re_add_unique_together_after_removal(self):\n+        app_label = \"test_re_add_ut\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"code\", models.CharField(max_length=20, unique=True)),\n+                    ],\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        unique_constraint_name = f\"{table_name}_code_key\"\n+\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+\n+        # Add unique_together\n+        new_state = project_state.clone()\n+        operation_add_ut = migrations.AlterUniqueTogether(\"Pony\", {(\"code\",)})\n+        operation_add_ut.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation_add_ut.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        composite_unique_together_constraint_name = f\"{table_name}_code_uniq\"\n+        self.assertConstraintExists(table_name, composite_unique_together_constraint_name, value=False)\n+\n+        # Now remove it again\n+        newest_state = new_state.clone()\n+        operation_remove_ut = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation_remove_ut.state_forwards(app_label, newest_state)\n+        with connection.schema_editor() as editor:\n+            operation_remove_ut.database_forwards(app_label, editor, new_state, newest_state)\n+        \n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintNotExists(table_name, composite_unique_together_constraint_name)\n     \"\"\"\n     Change the value of index_together to the target one.\n     Input value of index_together must be a set of tuples.\n",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..a12b694 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,8 +3496,59 @@ class FormFieldCallbackTests(SimpleTestCase):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+from django.test import TestCase\n+from django import forms\n+from django.forms.models import modelform_factory\n+from .models import Person  # Ensure the 'Person' model is correctly imported\n+\n+class ModelFormCallbackTest(TestCase):\n+    def test_meta_formfield_callback(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class MyModelForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = '__all__'\n+                formfield_callback = callback\n+\n+        MyModelFormGenerated = modelform_factory(Person, form=MyModelForm)\n+        \n+        for field_name, field in MyModelFormGenerated.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea, f\"Field {field_name} does not use Textarea widget.\")\n+\n+    def test_no_callback_override(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class MyModelForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = '__all__'\n+                formfield_callback = callback\n+\n+        MyModelFormGenerated = modelform_factory(Person, form=MyModelForm, formfield_callback=None)\n+        \n+        for field_name, field in MyModelFormGenerated.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea, f\"Field {field_name} should still use Textarea widget.\")\n+\n+    def test_directly_passed_callback(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        def direct_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.PasswordInput)\n+\n+        class MyModelForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = '__all__'\n+                formfield_callback = callback\n \n-class LocalizedModelFormTest(TestCase):\n+        MyModelFormGenerated = modelform_factory(Person, form=MyModelForm, formfield_callback=direct_callback)\n+        \n+        for field_name, field in MyModelFormGenerated.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.PasswordInput, f\"Field {field_name} does not use PasswordInput widget.\")\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..d24c291 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,9 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.contrib.contenttypes.models import ContentType\n+from django.db import models\n+from django.core import serializers\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n@@ -258,7 +260,39 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_not_iterable(self):\n+    def test_m2m_serialization_with_custom_manager(self):\n+        \"\"\"\n+        Test serialization of a model with a many-to-many relationship using a custom manager with select_related.\n+        \"\"\"\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        # Create test data\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = Test.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+        test_instance.save()\n+\n+        # Serialize and capture output\n+        try:\n+            serialized_data = serializers.serialize(\"json\", [test_instance])\n+            self.assertTrue(serialized_data)\n+        except Exception as e:\n+            self.fail(f\"Serialization raised an exception: {e}\")\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..58a88e1 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -201,9 +201,22 @@ def test_inset_and_secondary():\n     ax.secondary_xaxis(\"top\", functions=(np.square, np.sqrt))\n     pickle.loads(pickle.dumps(fig))\n \n-\n-@pytest.mark.parametrize(\"cmap\", cm._colormaps.values())\n-def test_cmap(cmap):\n+import matplotlib.pyplot as plt\n+import platform\n+\n+@pytest.mark.skipif(platform.system() != \"Darwin\" or \"arm\" not in platform.platform(),\n+                    reason=\"Test specific to M1 Mac\")\n+def test_dpi_unpickling_on_m1_mac():\n+    initial_dpi = 200\n+    num_iterations = 5\n+    \n+    fig = plt.figure(dpi=initial_dpi)\n+    for _ in range(num_iterations):\n+        out = BytesIO()\n+        pickle.dump(fig, out)\n+        out.seek(0)\n+        fig = pickle.load(out)\n+        assert fig.dpi == initial_dpi\n     pickle.dumps(cmap)\n \n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..66194e1 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,7 +6586,22 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n-    actual = da.integrate(\"y\")\n+    # Test using the new 'coord' argument\n+    actual_coord = da.integrate(coord=\"y\")\n+    expected_y_coord = xr.DataArray(\n+        np.trapz(da, da[\"y\"], axis=1),\n+        dims=[\"x\"],\n+        coords={k: v for k, v in da.coords.items() if \"y\" not in v.dims},\n+    )\n+    assert_allclose(expected_y_coord, actual_coord.compute())\n+\n+    # Test with original 'dim' argument and assert future warning\n+    with pytest.warns(FutureWarning, match=\"dim argument is deprecated\"):\n+        actual_dim = da.integrate(dim=\"y\")\n+        assert_allclose(expected_y_coord, actual_dim.compute())\n+\n+    assert_equal(actual_coord, ds.integrate(coord=\"y\")[\"var\"])\n+    assert_equal(ds[\"var\"].integrate(coord=\"y\"), ds.integrate(coord=\"y\")[\"var\"])\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..f150f42 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_unstacked_dataset_single_dim_variable(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..f83dcd8 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,10 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import re\n+from typing import Any\n+import pytest\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n@@ -131,7 +135,29 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     assert assertString in output.err\n \n \n-def test_csv_regex_error(capsys: CaptureFixture) -> None:\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),  # test case for issue\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n     \"\"\"\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..30119ad 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -138,6 +138,14 @@ def test_syntax_errors(expr: str, column: int, message: str) -> None:\n def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n+def test_compile_false_expression() -> None:\n+    \"\"\"Test the compilation of the 'False' expression.\"\"\"\n+    expr = Expression.compile(\"False\")\n+    assert expr.evaluate(lambda x: {\"False\": False}[x]) is False\n+\n+\n+import pytest\n+from _pytest.mark.expression import Expression\n \n @pytest.mark.parametrize(\n     \"ident\",\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..f0f908e 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,33 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with transformers outputting pandas DataFrames.\"\"\"\n+\n+    import pandas as pd\n+    from sklearn.pipeline import make_union\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index()\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    union = make_union(MyTransformer()).set_output(transform=\"pandas\")\n+\n+    # Assert no errors occur when transforming with pandas output\n+    result = union.fit_transform(data)\n+    expected_dates = pd.Series([\"2020-01-01\", \"2020-01-02\", \"2020-01-03\", \"2020-01-04\"], dtype='object')\n+    expected_values = pd.Series([240, 240, 240, 240], dtype='int64')\n+\n+    pd.testing.assert_series_equal(result[\"date\"], expected_dates, check_names=False)\n+    pd.testing.assert_series_equal(result[\"value\"], expected_values, check_names=False)\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..aac8e71 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -235,8 +235,10 @@ def test_get_full_qualified_name():\n     node = nodes.reference(reftarget='func', **kwargs)\n     assert domain.get_full_qualified_name(node) == 'module1.Class.func'\n \n-\n def test_parse_annotation():\n+    # Test for None in signature mode\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n     doctree = _parse_annotation(\"int\")\n     assert_node(doctree, ([pending_xref, \"int\"],))\n \n@@ -742,4 +744,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..a69564b 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1093,6 +1093,56 @@ Do as you please\n \n :keyword gotham_is_yours: shall interfere.\n :kwtype gotham_is_yours: None\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1329,6 +1379,56 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n :Parameters: **param1** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1337,6 +1437,56 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1352,6 +1502,56 @@ param1 : MyClass instance\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n :Parameters: **param1** (:class:`MyClass instance`)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1360,6 +1560,56 @@ param1 : MyClass instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass instance`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1388,6 +1638,56 @@ numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n         docstring = \"\"\"\\\n numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n \n@@ -1411,6 +1711,56 @@ numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n    \\n\\\n    :meth:`otherfunc`\n        relationship\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1437,6 +1787,56 @@ Summary\n \n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_underscore_in_attribute(self):\n         docstring = \"\"\"\n Attributes\n@@ -1457,6 +1857,56 @@ arg_ : type\n \n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_underscore_in_attribute_strip_signature_backslash(self):\n         docstring = \"\"\"\n Attributes\n@@ -1478,6 +1928,56 @@ arg_ : type\n \n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_raises_types(self):\n         docstrings = [(\"\"\"\n Example Function\n@@ -1681,6 +2181,56 @@ Example Function\n         actual = str(NumpyDocstring(docstring, config, app, \"method\"))\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_section_header_underline_length(self):\n         docstrings = [(\"\"\"\n Summary line\n@@ -1927,6 +2477,56 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n         expected = \"\"\"One line summary.\n \n :Parameters: * **no_list** (:class:`int`)\n@@ -2019,6 +2619,56 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_token_type(self):\n         tokens = (\n             (\"1\", \"literal\"),\n@@ -2201,6 +2851,56 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_same_line(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n \n @contextmanager\n def warns(warning, match):\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..c39650d 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,6 +773,43 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+@pytest.mark.sphinx(freshenv=True)\n+def test_unqualified_names_cross_reference(app):\n+    text = (\n+        \".. py:class:: mod.A\\n\"\n+        \".. py:class:: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"   :param mod.A a:\\n\"\n+        \"   :param mod.submod.A b:\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:currentmodule:: mod\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"   :param A a:\\n\"\n+        \"   :param mod.A b:\\n\"\n+        \"   :param mod.submod.A c:\\n\"\n+        \"   :rtype: A\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:currentmodule:: mod.submod\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"   :param A a:\\n\"\n+        \"   :param mod.A b:\\n\"\n+        \"   :param mod.submod.A c:\\n\"\n+        \"   :rtype: A\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+    )\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Verify that there are no warnings about ambiguous cross-references\n+    assert 'more than one target found for cross-reference' not in app._warning.getvalue()\n+\n \n @pytest.mark.sphinx(freshenv=True)\n def test_module_index(app):\n",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..3bcd272 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -983,8 +983,48 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_param_dict_rendering(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    \n+    doctree = restructuredtext.parse(app, text)\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    \n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n \n-def test_info_field_list_var(app):\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..e4a5dde 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -832,7 +832,48 @@ def test_autodoc_typehints_description(app):\n             '\\n'\n             '   docstring\\n'\n             in context)\n+import pytest\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_typehints_description_target': 'documented',\n+                                   'napoleon_numpy_docstring': False})\n+def test_autodoc_typehints_with_napoleon(app):\n+    # Test case to ensure autodoc_typehints_description_target works with Napoleon\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.decr\\n'\n+        '\\n'\n+        '.. autofunction:: target.typehints.increment\\n'\n+        '\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+\n+    expected_decr_output = (\n+        'target.typehints.decr(a, b=1)\\n'\n+        '\\n'\n+        '   Returns:\\n'\n+        '      decremented number\\n'\n+        '\\n'\n+        '   Return type:\\n'\n+        '      int\\n'\n+    )\n+\n+    expected_increment_output = (\n+        'target.typehints.increment(x)\\n'\n+        '\\n'\n+        '   Parameters:\\n'\n+        '      **x** (*int*) -- number to be incremented\\n'\n+        '\\n'\n+        '   Returns:\\n'\n+        '      incremented number\\n'\n+        '\\n'\n+        '   Return type:\\n'\n+        '      int\\n'\n+    )\n \n+    assert expected_decr_output in context\n+    assert expected_increment_output in context\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sympy__sympy-18211": "",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..94be4e5 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3330,6 +3330,36 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+from sympy import symbols, sqf_list\n+\n+x, y = symbols('x y')\n+\n+def test_issue_8695():\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n+\n+def test_issue_8695_extended():\n+    # Extended test cases for comprehensive verification\n+    \n+    # Additional case with a single factor of multiplicity 3\n+    q1 = (x - 2)**3\n+    result1 = (1, [(x - 2, 3)])\n+    assert sqf_list(q1) == result1\n+\n+    # Case where the multiplicities are mixed\n+    q2 = (x**2 + 1) * (x - 1) * (x - 2)**2 * (x - 3)**3\n+    result2 = (1, [(x**2 + 1, 1), (x - 1, 1), (x - 2, 2), (x - 3, 3)])\n+    assert sqf_list(q2) == result2\n+\n+    # Case with nested multiplicities\n+    q3 = (x - 1)**4 * (x - 2)**2\n+    result3 = (1, [(x - 1, 4), (x - 2, 2)])\n+    assert sqf_list(q3) == result3\n+\n+    # Ensure a polynomial without multiple roots is handled correctly\n+    q4 = x**5 + 2*x**3 + x + 1\n+    result4 = (1, [(Poly(x**5 + 2*x**3 + x + 1, x), 1)])\n+    assert sqf_list(q4) == result4\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..ec2a2d9 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -249,6 +249,15 @@ def test_Poly_from_poly():\n         h, gens=(x, y), field=True).rep == DMP([[QQ(1)], [QQ(1), QQ(0)]], QQ)\n \n \n+from sympy import symbols, I, expand, factor\n+\n+x, y = symbols('x y')\n+\n+def test_issue_18895():\n+    z = expand((x-1)*(y-1))\n+    assert factor(z) == (x - 1)*(y - 1)\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n+\n def test_Poly_from_expr():\n     raises(GeneratorsNeeded, lambda: Poly.from_expr(S.Zero))\n     raises(GeneratorsNeeded, lambda: Poly.from_expr(S(7)))\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..295155d 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -28,6 +29,12 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+def test_symbol_no_dict():\n+    from sympy import Symbol\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol instances should not have a __dict__ attribute\"\n+    assert s.__slots__ == ('name',), \"Symbol should only have 'name' in __slots__\"\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-24562": "",
  "django__django-14534": "",
  "matplotlib__matplotlib-20676": "",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..5127f54 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+import pytest\n+\n+def test_sparse_coder_with_varied_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..ecdf706 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,8 +147,29 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n-\n-# Import the data\n+import pytest\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.model_selection import cross_val_predict\n+\n+def test_cross_val_predict_multioutput_classifier_predict_proba():\n+    # Create a multilabel dataset\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=42)\n+    \n+    # Instantiate a MultiOutputClassifier with a base estimator that supports predict_proba\n+    mo_clf = MultiOutputClassifier(LogisticRegression())\n+    \n+    # Run cross_val_predict with method='predict_proba'\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+    \n+    # Check shape and type of the result\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]  # Should be one list element per output\n+    for predictions in pred_proba:\n+        assert isinstance(predictions, np.ndarray)\n+        assert predictions.shape == (X.shape[0], 2)  # Binary classification: 2 classes\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n X = iris.data\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..35edfeb 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,23 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Additional test cases\n+    # Verify for n=3: (3 + 1) * (3 + 1/2) * (3 + 1/4) = 91/8\n+    assert p.subs(n, 3).doit() == S(91)/8\n+    \n+    # Verify for n=0: empty product is conventionally 1\n+    assert p.subs(n, 0).doit() == S(1)\n+\n+    # Verify for n=1: (1 + 1) = 2\n+    assert p.subs(n, 1).doit() == S(2)\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +374,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}