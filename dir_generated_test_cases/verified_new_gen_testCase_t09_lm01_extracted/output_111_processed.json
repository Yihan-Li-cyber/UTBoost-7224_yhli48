{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..8488398 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -128,8 +128,27 @@ def test_arith_oper():\n     with pytest.raises(ModelDefinitionError, match=r\"Unsupported operands for arithmetic operator: .*\"):\n         _arith_oper(sh1, map1)\n \n+# Required imports\n+from astropy.modeling import models as m\n+from astropy.modeling.separable import separability_matrix\n+import numpy as np\n+import pytest\n+from numpy.testing import assert_allclose\n+\n \n-@pytest.mark.parametrize(('compound_model', 'result'), compound_models.values())\n+def test_separable_issue_nested_compound_model():\n+    cm = m.Linear1D(10) & m.Linear1D(5)  # Nested compound model\n+    nested_model = m.Pix2Sky_TAN() & cm\n+    \n+    expected_separability_matrix = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, False],\n+        [False, False, False, True]\n+    ])\n+    \n+    calculated_separability_matrix = separability_matrix(nested_model)\n+    assert_allclose(calculated_separability_matrix, expected_separability_matrix)\n def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..ba528aa 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,7 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..6fa5946 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -127,6 +127,40 @@ class TestHeaderFunctions(FitsTestCase):\n         c = fits.Card(\"long_int\", -467374636747637647347374734737437)\n         assert str(c) == _pad(\"LONG_INT= -467374636747637647347374734737437\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for incorrect float string representation.\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional test cases for different float values\n+        c = fits.Card(k, 1.23456789, com)\n+        expected_str = f\"{k} = 1.23456789 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 123456789.0, com)\n+        expected_str = f\"{k} = 123456789.0 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 0.000000000123456789, com)\n+        expected_str = f\"{k} = 1.23456789E-10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_floating_point_value_card(self):\n         \"\"\"Test Card constructor with floating point value\"\"\"\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..c475263 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,6 +601,21 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n+    def test_vla_identical_files(self):\n+        \"\"\"\n+        Test if FITSDiff reports no differences when comparing \n+        a file with VLA columns to itself.\n+        \"\"\"\n+\n+        # Create a VLA column\n+        col = fits.Column(name='a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        hdu.writeto('test_vla_identical.fits', overwrite=True)\n+\n+        # Use FITSDiff to compare the file to itself\n+        diff = fits.FITSDiff('test_vla_identical.fits', 'test_vla_identical.fits')\n+        assert diff.identical, \"FITSDiff incorrectly reported differences in identical VLA files.\"\n+\n     def test_identical_files_basic(self):\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..9169a4d 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -73,8 +73,21 @@ def test_JsonCustomEncoder():\n     tmpd = {\"a\": {\"unit\": \"erg / s\", \"value\": [0., 1.]}}\n     assert newd == tmpd\n \n-\n def test_inherit_docstrings():\n+    # Test for properties\n+    class BaseWithProperty(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 0\n+\n+    class SubclassWithProperty(BaseWithProperty):\n+        @property\n+        def bar(self):\n+            return 42\n+\n+    if BaseWithProperty.bar.__doc__ is not None:\n+        assert SubclassWithProperty.bar.__doc__ == \"BAR\"\n     class Base(metaclass=misc.InheritDocstrings):\n         def __call__(self, *args):\n             \"FOO\"\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..7d062cb 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -171,6 +171,20 @@ def test_multiple_solidus():\n     with pytest.raises(ValueError):\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n+def test_unrecognized_unit_equality_with_none():\n+    # Create an unrecognized unit\n+    unit = u.Unit(\"asdf\", parse_strict='silent')\n+    \n+    # Test equality with None should be False, not raising a TypeError\n+    assert unit != None        # noqa\n+    # Test 'not in' comparison with a tuple containing None\n+    assert unit not in (None, u.m)\n+\n+    # Test unit compared to another unrecognized unit is handled properly\n+    # Should create another unit to compare equality\n+    another_unit = u.Unit(\"qwer\", parse_strict='silent')\n+    assert unit != another_unit\n+\n \n def test_unknown_unit3():\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..a2b008a 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -62,8 +62,17 @@ def test_find_mod_objs():\n     assert 'collections.namedtuple' not in fqns\n     assert namedtuple not in objs\n \n+from distutils.version import LooseVersion\n+import pytest\n+\n+def test_looseversion_with_dev_version():\n+    # Test to reproduce the TypeError with LooseVersion when using versions with \"dev\"\n+    with pytest.raises(TypeError):\n+        assert LooseVersion('1.14.3') >= LooseVersion('1.14dev')\n \n-def test_minversion():\n+def test_looseversion_without_minor_version():\n+    # Test LooseVersion with no minor version against a dev version, should not fail\n+    assert LooseVersion('1.14') < LooseVersion('1.14dev')\n     from types import ModuleType\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n@@ -72,4 +81,4 @@ def test_minversion():\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..ed4ee86 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -2329,6 +2329,36 @@ class TestHeaderFunctions(FitsTestCase):\n             else:\n                 c.verify('exception')\n \n+    def test_card_from_bytes_encoding(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object with different encodings.\n+        \"\"\"\n+\n+        c = fits.Card.fromstring(b\"KEYWORD = 'value'\")\n+        assert c.keyword == 'KEYWORD'\n+        assert c.value == 'value'\n+\n+        # Assuming UTF-8 encoding\n+        c_utf8 = fits.Card.fromstring('KEYWORD = \"v\u00e4lue\"'.encode('utf-8'))\n+        assert c_utf8.keyword == 'KEYWORD'\n+        assert c_utf8.value == 'v\u00e4lue'\n+        \n+        # Assuming latin-1 encoding\n+        c_latin1 = fits.Card.fromstring('KEYWORD = \"v\u00e4lue\"'.encode('latin-1'))\n+        assert c_latin1.keyword == 'KEYWORD'\n+        assert c_latin1.value == 'v\u00e4lue'\n+\n+    def test_header_from_bytes(self):\n+        \"\"\"\n+        Test loading a Header from a `bytes` object.\n+        \"\"\"\n+        header_data = b\"SIMPLE  =                    T / file does conform to FITS standard\\n\" + \\\n+                      b\"BITPIX  =                   8 / number of bits per data pixel\\n\" + \\\n+                      b\"END\" + b\" \" * 77\n+\n+        header = fits.Header.fromstring(header_data)\n+        assert header[0] == ('SIMPLE', True, 'file does conform to FITS standard')\n+        assert header[1] == ('BITPIX', 8, 'number of bits per data pixel')\n \n class TestRecordValuedKeywordCards(FitsTestCase):\n     \"\"\"\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..15f706d 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -142,7 +142,10 @@ class TestQuantityCreation:\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n-        # items stored as objects by numpy should be converted to float\n+        # make sure float16 is preserved\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..6d90c82 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,6 +218,15 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+    \n+    # Invalid URLs with unencoded characters in username/password fields.\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..3a9c05c 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n import re\n from decimal import Decimal\n \n from django.core.exceptions import FieldError\n+from django.db.models.expressions import Case, When\n from django.db import connection\n from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n@@ -382,6 +384,52 @@ class AggregateTestCase(TestCase):\n             lambda a: (a.name, a.friends__age__avg)\n         )\n \n+    def test_count_distinct_with_case(self):\n+        \"\"\"\n+        Test Count annotation using both Case condition and distinct=True.\n+        This is to verify that the query executes without syntax errors\n+        caused by missing spaces and returns the expected result.\n+        \"\"\"\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(When(pages__gt=300, then='rating')),\n+                distinct=True\n+            ),\n+        )\n+        # Assuming there are 4 distinct ratings for books with more than 300 pages\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_with_case_false_condition(self):\n+        \"\"\"\n+        Test Count with Case condition where the condition is not met, \n+        ensuring it returns 0 distinct elements.\n+        \"\"\"\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(When(pages__gt=10000, then='rating')),\n+                distinct=True\n+            ),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 0)\n+\n+    def test_count_distinct_with_case_multiple_conditions(self):\n+        \"\"\"\n+        Test Count with multiple Case conditions and distinct=True to \n+        verify no syntax error occurs under complex scenarios.\n+        \"\"\"\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(\n+                    When(pages__gt=300, then='rating'),\n+                    When(price__lt=20, then='rating'),\n+                    default=None\n+                ),\n+                distinct=True\n+            ),\n+        )\n+        # Assuming there are 5 distinct ratings for books matching the conditions\n+        self.assertEqual(aggs['distinct_ratings'], 5)\n+\n     def test_count(self):\n         vals = Book.objects.aggregate(Count(\"rating\"))\n         self.assertEqual(vals, {\"rating__count\": 6})\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..906cdba 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1092,6 +1092,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertEqual(default_storage.base_location, '')\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default file_permissions_mode should be 0o644 when FILE_UPLOAD_PERMISSIONS\n+        is not set in the settings.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n \n     def test_override_file_upload_permissions(self):\n         \"\"\"\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..5b96c69 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -15,19 +16,16 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         - The command line list\n         - The content of the file pointed by environment PGPASSFILE, or None.\n         \"\"\"\n-        def _mock_subprocess_call(*args):\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n             self.subprocess_args = list(*args)\n-            if 'PGPASSFILE' in os.environ:\n-                with open(os.environ['PGPASSFILE']) as f:\n-                    self.pgpass = f.read().strip()  # ignore line endings\n-            else:\n-                self.pgpass = None\n-            return 0\n+            self.pgpassword = env.get('PGPASSWORD') if env else None\n+            return subprocess.CompletedProcess(self.subprocess_args, 0)\n+\n         self.subprocess_args = None\n-        self.pgpass = None\n-        with mock.patch('subprocess.call', new=_mock_subprocess_call):\n+        self.pgpassword = None\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n             DatabaseClient.runshell_db(dbinfo)\n-        return self.subprocess_args, self.pgpass\n+        return self.subprocess_args, self.pgpassword\n \n     def test_basic(self):\n         self.assertEqual(\n@@ -55,8 +53,20 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n                 None,\n             )\n         )\n-\n-    def test_column(self):\n+    \n+    def test_pgpassword_direct(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'testdb',\n+                'user': 'admin',\n+                'password': 'adminpassword',\n+                'host': '',\n+                'port': '',\n+            }), (\n+                ['psql', '-U', 'admin', 'testdb'],\n+                'adminpassword',\n+            )\n+        )\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +123,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..fbf9bfd 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -2,6 +2,7 @@ from django.apps.registry import apps\n from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n+from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n@@ -47,7 +48,16 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_missing_content_type_rename_ignore(self):\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n@@ -63,4 +73,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..3d61d40 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,41 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_with_different_conditions(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+        \n+        request = type('Request', (object,), {})()  # Create a simple object to mock a request\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+        \n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, None), (AlternateInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), AlternateInline)\n+        \n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, None), (MediaInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), MediaInline)\n+        \n+        # Test when request has a name that does not match any conditions\n+        request.name = 'unknown'\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..b0f2880 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,7 +238,12 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n',  # Test case for a newline character\n+            'trailingnewline\\u000A',  # Unicode representation of newline\n+            'trailingnewline\\r\\n',  # Test case for a Windows-style newline\n         ]\n+        \n+        invalid_usernames.append('newlinemid\\nend')  # Test new line not at the end\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +263,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..5f9a954 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -12,6 +12,15 @@ OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n class RenderToStringTest(SimpleTestCase):\n \n+    def test_autoescape_on(self):\n+        # Create an engine with autoescape set to True\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        # Expect the '<script>' to be autoescaped to '&lt;script&gt;'\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..18eb790 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -286,8 +286,24 @@ class QueryDictTests(SimpleTestCase):\n             QueryDict.fromkeys(0)\n \n \n+import unittest\n+from django.http import HttpResponse\n+\n class HttpResponseTests(unittest.TestCase):\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_empty(self):\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_large_content(self):\n+        large_content = b'a' * 10**6  # 1 MB of 'a'\n+        r = HttpResponse(memoryview(large_content))\n+        self.assertEqual(r.content, large_content)\n+\n     def test_headers_type(self):\n         r = HttpResponse()\n \n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..9eea238 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -563,6 +563,48 @@ class TestInlineProtectedOnDelete(TestDataMixin, TestCase):\n                             \"the following protected related objects: foot note %s\"\n                             % (chapter, foot_note))\n \n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # The field in the inline is read-only.\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n+\n \n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class TestInlinePermissions(TestCase):\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..2ddca77 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,6 +2900,20 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n+    def test_model_to_dict_with_empty_fields(self):\n+        \"\"\"\n+        Test that model_to_dict with empty fields list returns an empty dict.\n+        \"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_model_to_dict_with_none_fields(self):\n+        \"\"\"\n+        Test that model_to_dict with fields=None returns all fields.\n+        \"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(sorted(model_to_dict(bw, fields=None).keys()), ['id', 'name', 'score', 'writer_ptr'])\n+\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..0376938 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,5 +1,7 @@\n+\n from math import ceil\n \n+from django.db.models.deletion import Collector\n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -464,6 +466,28 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Test for User model\n+        u = User.objects.create()\n+        # User can be fast-deleted (verified by Collector)\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+        # Additional test for Avatar model\n+        a = Avatar.objects.create(desc='b')\n+        self.assertTrue(collector.can_fast_delete(a))\n+        a.delete()\n+        self.assertIsNone(a.pk)\n+\n+        # Additional test for MR model (has ForeignKey)\n+        r = R.objects.create()\n+        mr = MR.objects.create(r=r)\n+        # While MR has a ForeignKey, it's not joined queries that affect delete\n+        mr.delete()\n+        self.assertIsNone(mr.pk)\n+\n     def test_fast_delete_qs(self):\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..ceb34d3 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,9 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Newly added test cases for very small numbers:\n+            ('1e-199', 2, '0.00'), # Test with a small exponent not displayed in scientific notation.\n+            ('1e-200', 2, '0.00')  # Test with an exponent that was previously problematic.\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..e132ac3 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -188,7 +189,9 @@ class Comment(models.Model):\n     comment = models.TextField()\n \n     # Content-object field\n-    content_type = models.ForeignKey(ContentType, models.CASCADE)\n+    content_type_uuid = models.ForeignKey(ContentType, models.CASCADE, related_name='comments', null=True)\n+    object_pk_uuid = models.TextField()\n+    content_object_uuid = GenericForeignKey(ct_field='content_type_uuid', fk_field='object_pk_uuid')\n     object_pk = models.TextField()\n     content_object = GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_pk\")\n \n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..7049c1b 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -23,6 +25,41 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.run', new=_mock_subprocess_run):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpassword\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,\n+            )\n+        )\n+\n+    def test_ssl_env_variables(self):\n+        with mock.patch.dict(os.environ, {\n+                'PGSSLMODE': 'verify-ca',\n+                'PGSSLROOTCERT': 'root.crt',\n+                'PGSSLCERT': 'client.crt',\n+                'PGSSLKEY': 'client.key',\n+            }, clear=True):\n+            self.assertEqual(\n+                self._run_it({\n+                    'database': 'dbname',\n+                    'user': 'someuser',\n+                    'host': 'somehost',\n+                    'port': '444',\n+                }), (\n+                    ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                    None,\n+                )\n+            )\n \n     def test_basic(self):\n         self.assertEqual(\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..bc85912 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,6 +98,30 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n+    def test_with_exclude_filter_on_filtered_relation(self):\n+        \"\"\"\n+        Test the use of exclude on a queryset with an annotated FilteredRelation.\n+        This should not raise a FieldError.\n+        \"\"\"\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_exclude_with_multiple_conditions(self):\n+        \"\"\"\n+        Test exclude with multiple conditions on a queryset with an annotated FilteredRelation.\n+        \"\"\"\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+                book_reserved=FilteredRelation('book', condition=Q(book__state=Book.RESERVED)),\n+            ).exclude(Q(book_alice__isnull=False) | Q(book_reserved__isnull=False)),\n+            [self.author2],\n+        )\n+\n     def test_with_join_and_complex_condition(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..f6c9dce 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -28,6 +28,8 @@ class TestUtilsHtml(SimpleTestCase):\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n+            (\"'>\", \"&#x27;&gt;\"),\n+            (\"'test'\", \"&#x27;test&#x27;\"),\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n@@ -37,7 +39,10 @@ class TestUtilsHtml(SimpleTestCase):\n                     with self.subTest(value=value, output=output, pattern=pattern):\n                         self.check_output(escape, pattern % value, pattern % output)\n                         self.check_output(escape, lazystr(pattern % value), pattern % output)\n-                # Check repeated values.\n+                # Test specific to ensure compatibility with html.escape behavior\n+                self.check_output(escape, \"'\", \"&#x27;\")\n+                self.check_output(escape, \"'test'\", \"&#x27;test&#x27;\")\n+                self.check_output(escape, \"O'Reilly\", \"O&#x27;Reilly\")\n                 self.check_output(escape, value * 2, output * 2)\n         # Verify it doesn't double replace &.\n         self.check_output(escape, '<&', '&lt;&amp;')\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..fbb7aa4 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,7 +243,24 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n+    def test_skip_checks(self):\n+        \"\"\"\n+        Test that the --skip-checks option can skip system checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['user_commands'])\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+        \n+    def test_skip_checks_without_actual_option(self):\n+        \"\"\"\n+        Test that not passing --skip-checks runs the default behavior with checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['user_commands'])\n+        \n+        # Assuming there is some check that will fail, we simulate a failed check.\n+        with self.assertRaises(SystemCheckError):\n+            self.run_manage(['set_option', '--set', 'foo'])\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n         abbreviated forms of the --setting and --pythonpath options.\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..cd6f87d 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,4 +1,7 @@\n+\n from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+from django.urls.resolvers import get_resolver\n from django.urls.resolvers import RegexPattern, RoutePattern\n from django.utils.translation import gettext_lazy as _\n \n@@ -9,7 +12,37 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n-class RoutePatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # Resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_caching_with_multiple_calls(self):\n+        # Call get_resolver multiple times with ROOT_URLCONF\n+        resolver1 = get_resolver()\n+        resolver2 = get_resolver()\n+        self.assertIs(resolver1, resolver2)  # Ensure the resolver is cached and reused\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_caching_with_different_urlconfs(self):\n+        # Test caching behavior with different URLconfs\n+        resolver_default = get_resolver()\n+        resolver_specific = get_resolver('urlpatterns.path_dynamic_urls')\n+        self.assertIsNot(resolver_default, resolver_specific)\n+        resolver_specific_again = get_resolver('urlpatterns.path_dynamic_urls')\n+        self.assertIs(resolver_specific, resolver_specific_again)  # Should be the same due to cache\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_initial_call_with_none_uses_root_urlconf(self):\n+        # Test that initial call with None uses ROOT_URLCONF\n+        resolver_with_none = get_resolver(None)\n+        resolver_with_root = get_resolver('urlpatterns.path_urls')\n+        self.assertIs(resolver_with_none, resolver_with_root)\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..40ddae1 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,8 +226,32 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.contrib.auth import authenticate\n+from django.test import TestCase, override_settings\n+from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n+from django.contrib.auth.models import User\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_no_query_and_no_hash_if_username_none(self):\n+        \"\"\"\n+        Test that no database query or password hashing occurs when the username is None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate(username=None, password='test'))\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_no_query_and_no_hash_if_password_none(self):\n+        \"\"\"\n+        Test that no database query or password hashing occurs when the password is None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate(username='test', password=None))\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n     \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..1fd7cb9 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,16 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_composed_queries_with_values_and_values_list(self):\n+        # Verify changing columns with values().\n+        ReservedName.objects.create(name='b', order=3)\n+        qs1 = ReservedName.objects.all()\n+        values_result = qs1.union(qs1).values('order').get()\n+        self.assertEqual(values_result['order'], 3)\n+\n+        # Verify changing columns with values_list().\n+        values_list_result = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(values_list_result, (3,))\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..228957e 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -8,6 +8,7 @@ import sys\n import tempfile\n import threading\n from email import charset, message_from_binary_file, message_from_bytes\n+from unittest import mock\n from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n@@ -365,7 +366,19 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n \n-    def test_encoding(self):\n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test handling of non-ASCII DNS with non-Unicode email encoding.\n+        \"\"\"\n+        from django.core.mail.utils import DNS_NAME\n+        # Clear any previously cached hostname\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        # Check if the domain is correctly encoded to Punycode\n+        self.assertIn('@xn--p8s937b', message['Message-ID'])\n         \"\"\"\n         Regression for #12791 - Encode body correctly with other encodings\n         than utf-8\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..b4de5f9 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n@@ -509,8 +510,62 @@ class ListDisplayTests(CheckTestCase):\n \n         self.assertIsValid(TestModelAdmin, ValidationTestModel)\n \n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+        \n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_nonexistent_get_field(self):\n+        class OtherField(Field):\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+                \n+        class TestModel(Model):\n+            field = OtherField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'non_existent_field', \"\n+            \"which is not a callable, an attribute of 'ModelAdmin', or \"\n+            \"an attribute or method on 'test_app.TestModel'.\",\n+            'admin.E108'\n+        )\n+\n+    def test_many_to_many_field_in_list_display(self):\n+        from django.db import models\n+\n+        class TestModel(Model):\n+            many_to_many_field = models.ManyToManyField(User)\n \n-class ListDisplayLinksCheckTests(CheckTestCase):\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('many_to_many_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display' must not be a ManyToManyField.\",\n+            'admin.E109'\n+        )\n \n     def test_not_iterable(self):\n         class TestModelAdmin(ModelAdmin):\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..030d13f 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -2,6 +2,8 @@ from datetime import datetime\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from datetime import datetime\n+from .models import ChildArticle # Ensure import of ChildArticle for test cases\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n@@ -462,7 +464,42 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(\n+            headline='h1',\n+            pub_date=datetime(2005, 7, 28)\n+        )\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_order_by_with_expression_in_meta_ordering(self):\n+        ca1 = OrderedByFArticle.objects.create(\n+            headline=\"Head 1\",\n+            pub_date=datetime(2005, 1, 1),\n+            author=self.author_2\n+        )\n+        ca2 = OrderedByFArticle.objects.create(\n+            headline=\"Head 2\",\n+            pub_date=datetime(2005, 1, 2),\n+            author=self.author_1\n+        )\n+        articles = list(OrderedByFArticle.objects.all())\n+        self.assertEqual(articles, [ca2, ca1])\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "",
  "django__django-11740": "",
  "django__django-11749": "",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..bf88c49 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -413,6 +413,21 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.non_field_errors(), [])\n \n     @override_settings(AUTH_USER_MODEL='auth_tests.CustomEmailField')\n+    def test_username_field_has_maxlength_attribute(self):\n+        # Setting up a user data with a username of length 255.\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'password123',\n+        }\n+        # Creating a user with the data.\n+        User.objects.create_user(**data)\n+\n+        # Creating a form with the user data.\n+        form = AuthenticationForm(None, data)\n+\n+        # Verifying that the 'maxlength' attribute is set on the username field's widget.\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n     def test_username_field_max_length_matches_user_model(self):\n         self.assertEqual(CustomEmailField._meta.get_field('username').max_length, 255)\n         data = {\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..9343b9b 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -252,7 +252,29 @@ class WriterTests(SimpleTestCase):\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n-    def test_serialize_enums(self):\n+    def test_serialize_enum_with_translation(self):\n+        from django.utils.translation import gettext_lazy as _\n+\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        # Ensure serialization uses the Enum's name, not the translated value\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.GOOD,\n+            (\"migrations.test_writer.TranslatedEnum['GOOD']\", {'import migrations.test_writer'})\n+        )\n+\n+        # Test a model field default value using this Enum\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.value, m.name) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"(gettext_lazy('Good'), 'GOOD'), \"\n+            \"(gettext_lazy('Bad'), 'BAD')], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..119ea21 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,4 +1,38 @@\n+\n+class RFC850DateTests(unittest.TestCase):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_two_digit_year(self, mocked_datetime):\n+        # Mocking datetime to control the current time\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        utcnow_2019 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2020 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_2048 = datetime(2048, 11, 6, 8, 49, 37)\n+\n+        tests = [\n+            # When current year is 2019\n+            (utcnow_2019, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(1969, 12, 31, 8, 49, 37)), # 69 < 70 so year 1969\n+            (utcnow_2019, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)), # 70 >= 70 so year 1970\n+            (utcnow_2019, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),  # Regular year 1994\n+\n+            # When current year is 2020\n+            (utcnow_2020, 'Wednesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)), # 69 < 70 so year 2069\n+            (utcnow_2020, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),   # 71 >= 70 so year 1971\n+\n+            # When current year is 2048\n+            (utcnow_2048, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),  # 00 < 70 so year 2000\n+            (utcnow_2048, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),  # Regular year 1999\n+        ]\n+\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n+\n import unittest\n+from unittest import mock\n from datetime import datetime\n \n from django.test import SimpleTestCase, ignore_warnings\n",
  "django__django-11880": "",
  "django__django-11951": "",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..02f2aa6 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,3 +1,4 @@\n+\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n@@ -5,6 +6,7 @@ from django.db import connection, models\n from django.test import SimpleTestCase, TestCase\n \n from .models import Post\n+from django.utils.translation import gettext_lazy as _\n \n \n class TestCharField(TestCase):\n@@ -29,6 +31,21 @@ class TestCharField(TestCase):\n         self.assertEqual(p.title, 'Smile \ud83d\ude00')\n \n     def test_assignment_from_choice_enum(self):\n+        class MyChoice(models.TextChoices):\n+            FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+            SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+        class MyObject(models.Model):\n+            my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+        my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+        my_object.refresh_from_db()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, 'first')\n+\n+        my_object_retrieved = MyObject.objects.get(pk=my_object.pk)\n+        self.assertIsInstance(my_object_retrieved.my_str_value, str)\n+        self.assertEqual(my_object_retrieved.my_str_value, 'first')\n         class Event(models.TextChoices):\n             C = 'Carnival!'\n             F = 'Festival!'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..526f1b1 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -162,6 +162,19 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(Whiz(c='').get_c_display(), '')        # Empty value\n         self.assertEqual(WhizDelayed(c=0).get_c_display(), 'Other')  # Delayed choices\n \n+    def test_overriding_get_FIELD_display(self):\n+        \"\"\"\n+        Test that overriding get_FIELD_display returns the overridden value.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        instance = FooBar(foo_bar=1)\n+        self.assertEqual(instance.get_foo_bar_display(), 'something')\n+\n     def test_get_FIELD_display_translated(self):\n         \"\"\"A translated display value is coerced to str.\"\"\"\n         val = Whiz(c=5).get_c_display()\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..5a93912 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -11,6 +11,8 @@ from django.test import (\n )\n from django.test.utils import override_settings\n from django.utils import timezone\n+from django.db.models import Index\n+from django.db import connection\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n@@ -22,7 +24,45 @@ class SchemaIndexesTests(TestCase):\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n \n-    def test_index_name_hash(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_list_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names should be deterministic.\n         \"\"\"\n",
  "django__django-12050": "",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..3a60b16 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -179,8 +179,41 @@ class OperationWriterTests(SimpleTestCase):\n             '),'\n         )\n \n+from django.db import models\n+from django.test import SimpleTestCase\n \n class WriterTests(SimpleTestCase):\n+    class Outer:\n+        class Inner(models.CharField):\n+            pass\n+\n+    class SampleModel(models.Model):\n+        inner_field = Outer.Inner(max_length=20)\n+\n+    def test_nested_class_field_serialization(self):\n+        \"\"\"\n+        Test to ensure makemigrations serializes fields of an inner class\n+        correctly.\n+        \"\"\"\n+        field = self.SampleModel._meta.get_field('inner_field')\n+        serialized_field = MigrationWriter.serialize(field)[0]\n+        self.assertIn(\"migrations.test_writer.WriterTests.Outer.Inner\", serialized_field)\n+\n+    def test_enum_field_serialization(self):\n+        \"\"\"\n+        Test to ensure makemigrations serializes EnumFields in an inner class\n+        correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                on = \"on\"\n+                off = \"off\"\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        serialized_field = MigrationWriter.serialize(field)[0]\n+        self.assertIn(\"migrations.test_writer.WriterTests.Thing.State\", serialized_field)\n     \"\"\"\n     Tests the migration writer (makes migration files from Migration instances)\n     \"\"\"\n@@ -746,4 +779,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..7b9456d 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,9 +1,11 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n     docutils_is_available, parse_docstring, parse_rst, trim_docstring,\n )\n \n+from django.test.utils import captured_stderr\n from .tests import AdminDocsSimpleTestCase\n \n \n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..8a45fd2 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1102,6 +1102,18 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n                 }\n             }\n         )\n+    \n+    def test_split_array_field_with_boolean_field(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, False, False])\n+        subwidget_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        \n+        # Ensure the first checkbox is checked\n+        self.assertEqual(subwidget_attrs[0], {'checked': True})\n+        \n+        # Subsequent checkboxes should not be checked\n+        self.assertEqual(subwidget_attrs[1], {})\n+        self.assertEqual(subwidget_attrs[2], {})\n \n     def test_render(self):\n         self.check_html(\n",
  "django__django-12209": "",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..85e97f1 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -79,6 +79,16 @@ class SimpleTagTests(TagTestCase):\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n         ]\n \n+        # Additional test cases for keyword-only arguments with defaults and error assertions\n+        templates.extend([\n+            ('{% load custom %}{% hello %}', 'hello world'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hi world'),\n+        ])\n+\n+        for entry in templates[-2:]:  # Only test the newly added templates\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -101,8 +111,22 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            (\"'simple_keyword_only_default' received unexpected keyword argument 'greeting'\",\n+                '{% load custom %}{% simple_keyword_only_default greeting=\"hi\" %}'),\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n         ]\n \n+        # Additional test cases for keyword-only arguments with defaults and error assertions\n+        templates.extend([\n+            ('{% load custom %}{% hello %}', 'hello world'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hi world'),\n+        ])\n+\n+        for entry in templates[-2:]:  # Only test the newly added templates\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -192,6 +216,16 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n         ]\n \n+        # Additional test cases for keyword-only arguments with defaults and error assertions\n+        templates.extend([\n+            ('{% load custom %}{% hello %}', 'hello world'),\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hi world'),\n+        ])\n+\n+        for entry in templates[-2:]:  # Only test the newly added templates\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..d876388 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2430,6 +2431,24 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n         )\n \n+    def test_filefield_with_fileinput_required(self):\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput)\n+\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+        # A required file field with initial data doesn't contain the required\n+        # HTML attribute. The file input is left blank by the user to keep the\n+        # existing, initial value.\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n         f = FileForm(data={}, files={}, auto_id=False)\n         self.assertHTMLEqual(\n             f.as_table(),\n@@ -2478,6 +2497,24 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n \n+    def test_filefield_with_fileinput_required(self):\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput)\n+\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+        # A required file field with initial data doesn't contain the required\n+        # HTML attribute. The file input is left blank by the user to keep the\n+        # existing, initial value.\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n     def test_filefield_initial_callable(self):\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..2130b1b 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -143,7 +144,20 @@ class ChoicesTests(SimpleTestCase):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n-    def test_str(self):\n+    def test_enum_usability_in_template(self):\n+        from django.template import Context, Template\n+\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', _('Freshman')\n+            SOPHOMORE = 'SO', _('Sophomore')\n+\n+        student = {'year_in_school': YearInSchool.FRESHMAN}\n+\n+        template = Template(\"{% if student.year_in_school == YearInSchool.FRESHMAN %}Yes{% else %}No{% endif %}\")\n+        context = Context({'student': student, 'YearInSchool': YearInSchool})\n+        rendered = template.render(context)\n+\n+        self.assertEqual(rendered.strip(), 'Yes')\n         for test in [Gender, Suit, YearInSchool, Vehicle]:\n             for member in test:\n                 with self.subTest(member=member):\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..5a95245 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -138,8 +138,23 @@ class UtilsTests(SimpleTestCase):\n                 resolved_value = display_for_field(resolved_value, field, self.empty_value)\n \n             self.assertEqual(value, resolved_value)\n-\n-    def test_null_display_for_field(self):\n+    \n+    def test_jsonfield_readonly_display_for_field(self):\n+        \"\"\"\n+        Test JSONField display in admin when it is read-only.\n+        \"\"\"\n+        tests = [\n+            ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),\n+            ([1, 2, 3], '[1, 2, 3]'),\n+            ('string', '\"string\"'),\n+            ({\"key\": [\"a\", \"b\", {\"c\": \"d\"}]}, '{\"key\": [\"a\", \"b\", {\"c\": \"d\"}]}'),\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(null=True, blank=True), self.empty_value),\n+                    display_value,\n+                )\n         \"\"\"\n         Regression test for #12550: display_for_field should handle None\n         value.\n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..1debf5d 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1006,6 +1006,24 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(ShippingMethod.check(), [])\n \n+    def test_onetoone_order_with_parent_link(self):\n+        class Document(models.Model):\n+            pass\n+\n+        # Test the incorrect order case leading to ImproperlyConfigured error\n+        with self.assertRaisesMessage(ImproperlyConfigured, \"Add parent_link=True to invalid_models_tests.Picking.origin.\"):\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # Test the correct order of field definition\n+        class Picking(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        # Ensure no configuration errors\n+        self.assertEqual(Picking.check(), [])\n+\n     def test_missing_parent_link(self):\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..8fe1814 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,13 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        When SECURE_REFERRER_POLICY is set to its default, the middleware adds a\n+        'Referrer-Policy: same-origin' header to the response as a secure default.\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -242,6 +248,7 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             ('strict-origin, origin', 'strict-origin,origin'),\n             (['strict-origin', 'origin'], 'strict-origin,origin'),\n             (('strict-origin', 'origin'), 'strict-origin,origin'),\n+            ('same-origin', 'same-origin'),  # Test case for the secure default value\n         )\n         for value, expected in tests:\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n@@ -254,4 +261,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..f8cfbbd 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -22,6 +22,8 @@ from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n+from django.utils.functional import SimpleLazyObject\n+from django.contrib.auth.models import User\n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..6406340 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,8 +1759,55 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n-    def test_add_constraint(self):\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together(self):\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+    def test_alter_index_together_remove_and_re_add(self):\n+        app_label = 'test_alter_readd_index'\n+        table_name = '%s_pony' % app_label\n+        # Initial setup with both unique_together and index_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True, index_together=True)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Remove index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Re-add index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n         gt_constraint = models.CheckConstraint(check=gt_check, name=\"test_add_constraint_pony_pink_gt_2\")\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..4b09901 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,9 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n+from django.contrib import admin\n+from django import forms\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -116,6 +118,20 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n     def test_filtered_many_to_many(self):\n         self.assertFormfield(Band, 'members', widgets.FilteredSelectMultiple,\n                              filter_vertical=['members'])\n+    def test_formfield_overrides_m2m_filter_widget(self):\n+        \"\"\"\n+        The autocomplete_fields, raw_id_fields, filter_vertical, and\n+        filter_horizontal widgets for ManyToManyFields may be overridden by\n+        specifying a widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget.widget, forms.CheckboxSelectMultiple)\n \n     def test_formfield_overrides(self):\n         self.assertFormfield(Event, 'start_date', forms.TextInput,\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..6a4e408 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -165,7 +165,32 @@ class SqlFlushTests(TransactionTestCase):\n             Book.objects.create(author=author)\n             self.assertIs(Author.objects.exists(), True)\n             self.assertIs(Book.objects.exists(), True)\n+    def test_execute_sql_flush_without_using(self):\n+        \"\"\"\n+        Test the execute_sql_flush method to ensure it operates correctly without\n+        the 'using' argument, by relying on 'self.connection.alias'.\n+        \"\"\"\n+        # Assuming Author and Book models are available\n+        Author.objects.create(name='Author 1')\n+        Book.objects.create(title='Book 1')\n+        \n+        self.assertTrue(Author.objects.exists())\n+        self.assertTrue(Book.objects.exists())\n+\n+        # Generate SQL flush list\n+        sql_list = connection.ops.sql_flush(\n+            no_style(),\n+            [Author._meta.db_table, Book._meta.db_table],\n+            reset_sequences=True,\n+            allow_cascade=True,\n+        )\n+        \n+        # Execute the flush operation\n+        connection.ops.execute_sql_flush(sql_list)\n \n+        # Verify that the tables have been flushed\n+        self.assertFalse(Author.objects.exists())\n+        self.assertFalse(Book.objects.exists())\n         sql_list = connection.ops.sql_flush(\n             no_style(),\n             [Author._meta.db_table, Book._meta.db_table],\n@@ -173,7 +198,32 @@ class SqlFlushTests(TransactionTestCase):\n             allow_cascade=True,\n         )\n         connection.ops.execute_sql_flush(connection.alias, sql_list)\n+    def test_execute_sql_flush_without_using(self):\n+        \"\"\"\n+        Test the execute_sql_flush method to ensure it operates correctly without\n+        the 'using' argument, by relying on 'self.connection.alias'.\n+        \"\"\"\n+        # Assuming Author and Book models are available\n+        Author.objects.create(name='Author 1')\n+        Book.objects.create(title='Book 1')\n+        \n+        self.assertTrue(Author.objects.exists())\n+        self.assertTrue(Book.objects.exists())\n+\n+        # Generate SQL flush list\n+        sql_list = connection.ops.sql_flush(\n+            no_style(),\n+            [Author._meta.db_table, Book._meta.db_table],\n+            reset_sequences=True,\n+            allow_cascade=True,\n+        )\n+        \n+        # Execute the flush operation\n+        connection.ops.execute_sql_flush(sql_list)\n \n+        # Verify that the tables have been flushed\n+        self.assertFalse(Author.objects.exists())\n+        self.assertFalse(Book.objects.exists())\n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n             self.assertIs(Book.objects.exists(), False)\n@@ -181,4 +231,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..3724f05 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,8 +2444,30 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n-\n-    def test_mti_inheritance_model_removal(self):\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n@@ -2453,4 +2475,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..411f8bb 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,8 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test import TestCase, isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -189,6 +191,44 @@ class LookupTests(TestCase):\n             }\n         )\n \n+    def test_in_bulk_meta_constraint(self):\n+        article1 = Article.objects.create(slug='article-1')\n+        article2 = Article.objects.create(slug='article-2')\n+        article3 = Article.objects.create(slug='article-3')\n+        self.assertEqual(\n+            Article.objects.in_bulk(\n+                ['article-1', 'article-2'],\n+                field_name='slug',\n+            ),\n+            {article1.slug: article1, article2.slug: article2},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n+\n     def test_in_bulk_non_unique_field(self):\n         msg = \"in_bulk()'s field_name must be a unique field but 'author' isn't.\"\n         with self.assertRaisesMessage(ValueError, msg):\n",
  "django__django-12858": "",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..ba03696 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,25 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_group_by_constant_expression(self):\n+        # This test ensures that a constant expression wrapped is not included in GROUP BY.\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b')).query\n+        self.assertNotIn('GROUP BY \"model\".\"column_a\", 3', str(query))\n+        # Ensure correct GROUP BY present\n+        self.assertIn('GROUP BY \"model\".\"column_a\"', str(query))\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a43cfb4..adbf7ae 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -77,6 +77,7 @@ class ExtraInfo(models.Model):\n \n \n class Author(models.Model):\n+    filterable = models.BooleanField(default=True)\n     name = models.CharField(max_length=10)\n     num = models.IntegerField(unique=True)\n     extra = models.ForeignKey(ExtraInfo, models.CASCADE)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..06bbc41 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -342,8 +342,49 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n-\n-    def test_order_by_f_expression(self):\n+    from django.test import TestCase\n+    from .models import Author, Article\n+    from operator import attrgetter\n+    from django.db.models import F\n+    \n+    class SelfReferentialForeignKeyOrderingTests(TestCase):\n+        def setUp(self):\n+            self.author_1 = Author.objects.create(name=\"Author 1\")\n+            self.author_2 = Author.objects.create(name=\"Author 2\")\n+            self.article_1 = Article.objects.create(author=self.author_1, headline=\"Article 1\", pub_date=\"2023-10-10\")\n+            self.article_2 = Article.objects.create(author=self.author_2, headline=\"Article 2\", pub_date=\"2023-10-11\")\n+\n+        def test_order_by_self_referential_fk(self):\n+            self.author_1.editor = Author.objects.create(name=\"Editor 1\", editor=self.author_1)\n+            self.author_1.save()\n+            self.author_2.editor = Author.objects.create(name=\"Editor 2\", editor=self.author_2)\n+            self.author_2.save()\n+\n+            # Test ordering by editor's id through self-referential foreign key\n+            self.assertQuerysetEqual(\n+                Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+                ['Article 2', 'Article 1'],\n+                attrgetter('headline'),\n+            )\n+\n+            self.assertQuerysetEqual(\n+                Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+                ['Article 1', 'Article 2'],\n+                attrgetter('headline'),\n+            )\n+\n+        def test_order_by_inverted_self_referential_fk(self):\n+            self.author_1.editor = Author.objects.create(name=\"Editor 1\", editor=self.author_1)\n+            self.author_1.save()\n+            self.author_2.editor = Author.objects.create(name=\"Editor 2\", editor=self.author_2)\n+            self.author_2.save()\n+            \n+            # Test ordering by inverted editor's id through self-referential foreign key\n+            self.assertQuerysetEqual(\n+                Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+                ['Article 2', 'Article 1'],\n+                attrgetter('headline'),\n+            )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n                 \"Article 1\",\n",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..83c3025 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,6 +1645,49 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n+class ForeignKeyValidationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.archived_article = Article.objects.create(title='Archived Article', archived=True)\n+        cls.active_article = Article.objects.create(title='Active Article', archived=False)\n+\n+    def test_foreign_key_validation_archived_article(self):\n+        \"\"\" Test that a form with a ForeignKey to an archived article is valid when base manager is used. \"\"\"\n+        class FavoriteArticlesForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticles\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                self.fields['article'].queryset = Article._base_manager.all()\n+\n+        form = FavoriteArticlesForm({'article': self.archived_article.pk})\n+        self.assertTrue(form.is_valid())  # Form should be valid as it includes all articles via base manager.\n+\n+    def test_foreign_key_validation_active_article(self):\n+        \"\"\" Test that a form with a ForeignKey to an active article is valid. \"\"\"\n+        form = FavoriteArticlesForm({'article': self.active_article.pk})\n+        self.assertTrue(form.is_valid())  # Form should be valid as it includes active articles via default manager.\n+\n+    def test_foreign_key_invalid_choice(self):\n+        \"\"\" Test the case where an invalid article id is provided. \"\"\"\n+        class FavoriteArticlesForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticles\n+                fields = '__all__'\n+\n+        form = FavoriteArticlesForm({'article': 9999})  # Assuming 9999 is a non-existent article ID.\n+        self.assertFalse(form.is_valid())\n+        self.assertIn('article', form.errors)\n+        self.assertEqual(\n+            form.errors['article'],\n+            ['Select a valid choice. That choice is not one of the available choices.']\n+        )\n+\n+import datetime\n+from django.core.exceptions import ValidationError\n+\n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13112": "",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..7f90989 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,7 +1627,15 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n-    def test_duration_with_datetime(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_simple_datetime_subtraction(self):\n+        # This tests that we can subtract datetime fields without using ExpressionWrapper.\n+        # It directly addresses the issue statement where it should not raise a FieldError.\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..28ba8cb 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,44 @@\n import operator\n \n+from .models import Publication, Article\n+from django import forms\n+\n+class ArticleForm(forms.ModelForm):\n+    publications = forms.ModelMultipleChoiceField(\n+        Publication.objects.filter(id__lt=2).union(\n+            Publication.objects.filter(id__gt=5)\n+        ),\n+        required=False,\n+    )\n+    class Meta:\n+        model = Article\n+        fields = [\"publications\"]\n+\n+class QuerySetUnionNoneTests(TestCase):\n+    def setUp(self):\n+        # Setup test data for Publication and Article models.\n+        self.pub1 = Publication.objects.create()\n+        self.pub2 = Publication.objects.create()\n+        self.pub3 = Publication.objects.create()\n+        self.pub4 = Publication.objects.create()\n+        self.article = Article.objects.create()\n+\n+    def test_union_none_on_empty_submission(self):\n+        form = ArticleForm(data={'publications': []})\n+        self.assertTrue(form.is_valid())\n+        form.save()\n+        self.assertQuerysetEqual(self.article.publications.all(), [])\n+\n+    def test_union_none_with_data(self):\n+        form = ArticleForm(data={'publications': [self.pub1.id, self.pub4.id]})\n+        self.assertTrue(form.is_valid())\n+        form.save()\n+        self.assertQuerysetEqual(\n+            self.article.publications.all(),\n+            [self.pub1, self.pub4],\n+            transform=lambda x: x\n+        )\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..dff8364 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,7 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -312,7 +313,31 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n-    def test_decode_legacy(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_default_hashing_algorithm_sha1(self):\n+        data = {'a test key': 'a test value'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session._legacy_decode(encoded), data)\n+        # Test that base64 legacy data is correctly decoded using legacy mechanisms.\n+        # This tests the fallback when the new hashing doesn't apply due to old data format.\n+        legacy_encoded = (\n+            'OWUzNTNmNWQxNTBjOWExZmM4MmQ3NzNhMDRmMjU4NmYwNDUyNGI2NDp7ImEgdGVzd'\n+            'C BrZXkiOiJhIHRlc3QgdmFsdWUifQ=='\n+        )\n+        data = {'a test key': 'a test value'}\n+        self.assertEqual(self.session.decode(legacy_encoded), data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_invalid_legacy_data(self):\n+        # Test invalid legacy data to ensure it results in an empty session and a log entry.\n+        invalid_legacy_encoded = (\n+            'zzzZZZmNWQxNTBjOOWXXXExZmM4MmQ3NzNhMDRmMjU4NmYwNDUyNGI2NDp7InZhbG'\n+            'lkX2tleSI6InZhbGlkX3ZhbHVlIn0=='\n+        )\n+        with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n+            self.assertEqual({}, self.session.decode(invalid_legacy_encoded))\n+        self.assertIn('corrupted', cm.output[0])\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n             'OWUzNTNmNWQxNTBjOWExZmM4MmQ3NzNhMDRmMjU4NmYwNDUyNGI2NDp7ImEgdGVzd'\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..0c6db6f 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -580,6 +580,23 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['foo'], 'bar')\n         self.assertIsInstance(response.context['view'], View)\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_view_with_simplelazyobject_in_kwargs(self):\n+        \"\"\"A TemplateView correctly resolves SimpleLazyObject in URL kwargs.\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'offers/offer.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        # Assuming an Account object exists with slug 'test-offer'\n+        account = Account.objects.create(slug='test-offer')\n+        response = OfferView.as_view()(self.client.get('/offers/test-offer/'))\n+        self.assertEqual(response.context_data['offer'], account)\n+        self.assertEqual(response.context_data['offer_slug'], 'test-offer')\n+\n     @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_extra_template_params(self):\n         \"\"\"A template view can be customized to return extra context.\"\"\"\n@@ -590,6 +607,23 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_view_with_simplelazyobject_in_kwargs(self):\n+        \"\"\"A TemplateView correctly resolves SimpleLazyObject in URL kwargs.\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'offers/offer.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        # Assuming an Account object exists with slug 'test-offer'\n+        account = Account.objects.create(slug='test-offer')\n+        response = OfferView.as_view()(self.client.get('/offers/test-offer/'))\n+        self.assertEqual(response.context_data['offer'], account)\n+        self.assertEqual(response.context_data['offer_slug'], 'test-offer')\n+\n     def test_template_params_warning(self):\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n@@ -602,4 +636,21 @@ class DeprecationTests(SimpleTestCase):\n         with self.assertRaisesMessage(RemovedInDjango40Warning, msg % 'foo2'):\n             str(response.context['foo2'])\n         self.assertEqual(response.context['key'], 'value')\n-        self.assertIsInstance(response.context['view'], View)\n+        self.assertIsInstance(response.context['view'], View)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_view_with_simplelazyobject_in_kwargs(self):\n+        \"\"\"A TemplateView correctly resolves SimpleLazyObject in URL kwargs.\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = 'offers/offer.html'\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        # Assuming an Account object exists with slug 'test-offer'\n+        account = Account.objects.create(slug='test-offer')\n+        response = OfferView.as_view()(self.client.get('/offers/test-offer/'))\n+        self.assertEqual(response.context_data['offer'], account)\n+        self.assertEqual(response.context_data['offer_slug'], 'test-offer')\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..1ba0a0d 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -4,6 +4,10 @@ from decimal import Decimal\n from unittest import mock, skipUnless\n \n from django import forms\n+from django.db import models\n+from django.test import TestCase\n+from django.test.utils import isolate_apps\n+from .models import Character, StumpJoke\n from django.core.exceptions import (\n     NON_FIELD_ERRORS, FieldError, ImproperlyConfigured, ValidationError,\n )\n@@ -2830,7 +2834,54 @@ class LimitChoicesToTests(TestCase):\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n \n-class FormFieldCallbackTests(SimpleTestCase):\n+class DuplicateOptionsTests(TestCase):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        self.threepwood = Character.objects.create(username=\"Threepwood\", last_action=\"2021-07-01T00:00:00Z\")\n+        self.marley = Character.objects.create(username=\"Marley\", last_action=\"2021-07-01T00:00:00Z\")\n+        \n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(jokes__funny=True, jokes_today__funny=True),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(jokes__funny=True, jokes_today__funny=True),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(form.fields['character1'].queryset, [self.marley, self.threepwood])\n+        self.assertCountEqual(form.fields['character2'].queryset, [self.marley, self.threepwood])\n+        self.assertCountEqual(form.fields['character3'].queryset, [self.marley, self.threepwood])\n+\n+    # Ensure this test is not affected by any changes\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13343": "",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..cc8f2fd 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,7 +632,27 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n-    def test_key_icontains(self):\n+    def test_key_in(self):\n+        # Testing the __in operator for JSONField key transforms\n+        tests = [\n+            ('value__c__in', [14], self.objs[3:5]),\n+            ('value__c__in', [14, 15], self.objs[3:5]),\n+            ('value__0__in', [1], [self.objs[5]]),\n+            ('value__0__in', [1, 3], [self.objs[5]]),\n+            ('value__foo__in', ['bar'], [self.objs[7]]),\n+            ('value__foo__in', ['bar', 'baz'], [self.objs[7]]),\n+            ('value__bar__in', [['foo', 'bar'], ['a']], [self.objs[7]]),\n+            ('value__bax__in', [{'foo': 'bar'}, {'a': 'b'}], [self.objs[7]]),\n+            # Additional test cases per issue description:\n+            ('our_field__key__in', [0], list(NullableJSONModel.objects.filter(our_field__key=0))),\n+            ('our_field__key__in', [0, 1], list(NullableJSONModel.objects.filter(our_field__key__in=[0, 1]))),\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n     def test_key_startswith(self):\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..494d96b 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -19,6 +19,8 @@ from django.test import (\n )\n from django.utils import timezone\n \n+from datetime import datetime\n+import pytz\n from ..models import Author, DTModel, Fan\n \n \n@@ -1133,7 +1135,45 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_with_tzinfo(self):\n+        # Set up initial datetime object\n+        start_datetime = datetime(2023, 3, 25, 22, 30, 0)\n+        start_datetime_aware = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime_aware, None)\n+\n+        # Define timezones\n+        melbourne_tz = pytz.timezone(\"Australia/Melbourne\")\n+        new_york_tz = pytz.timezone(\"America/New_York\")\n+\n+        # Annotate using TruncDate with different tzinfo\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melbourne_tz),\n+            ny_date=TruncDate('start_datetime', tzinfo=new_york_tz),\n+        ).get()\n+\n+        # Check if dates are correctly adjusted\n+        melb_start_datetime = start_datetime_aware.astimezone(melbourne_tz)\n+        ny_start_datetime = start_datetime_aware.astimezone(new_york_tz)\n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.ny_date, ny_start_datetime.date())\n+\n+    def test_trunctime_with_tzinfo(self):\n+        start_datetime = datetime(2023, 3, 25, 22, 30, 0)\n+        start_datetime_aware = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime_aware, None)\n+\n+        melbourne_tz = pytz.timezone(\"Australia/Melbourne\")\n+        new_york_tz = pytz.timezone(\"America/New_York\")\n+\n+        model = DTModel.objects.annotate(\n+            melb_time=TruncTime('start_datetime', tzinfo=melbourne_tz),\n+            ny_time=TruncTime('start_datetime', tzinfo=new_york_tz),\n+        ).get()\n+\n+        melb_start_datetime = start_datetime_aware.astimezone(melbourne_tz)\n+        ny_start_datetime = start_datetime_aware.astimezone(new_york_tz)\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.ny_time, ny_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..1687837 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,6 +103,57 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n+import unittest\n+\n+class AbstractModelFieldEqualityTests(unittest.TestCase):\n+\n+    def test_abstract_inherited_fields_not_equal_different_models(self):\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+            \n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        # Get field instances from the models\n+        field_abstract = AbstractModel._meta.get_field('field')\n+        field_inherit1 = InheritAbstractModel1._meta.get_field('field')\n+        field_inherit2 = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Ensure that fields from different models are not considered equal\n+        self.assertNotEqual(field_abstract, field_inherit1)\n+        self.assertNotEqual(field_abstract, field_inherit2)\n+        self.assertNotEqual(field_inherit1, field_inherit2)\n+\n+        # Check that hash values are also unique\n+        self.assertNotEqual(hash(field_abstract), hash(field_inherit1))\n+        self.assertNotEqual(hash(field_abstract), hash(field_inherit2))\n+        self.assertNotEqual(hash(field_inherit1), hash(field_inherit2))\n+\n+    def test_field_comparison(self):\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+            \n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        field_inherit1 = InheritAbstractModel1._meta.get_field('field')\n+        field_inherit2 = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Check ordering, should be by model if creation_counter is same\n+        self.assertLess(field_inherit1.creation_counter, field_inherit2.creation_counter)\n+\n class ChoicesTests(SimpleTestCase):\n \n     @classmethod\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..7fba569 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,46 @@\n+\n+class LocksTestCase(unittest.TestCase):\n+    def setUp(self):\n+        # Create a temporary file path for testing\n+        self.temp_file = tempfile.NamedTemporaryFile(delete=False)\n+        self.temp_file.close()  # Close file so locks can be tested\n+\n+    def tearDown(self):\n+        # Ensure temporary file is removed after tests\n+        try:\n+            os.unlink(self.temp_file.name)\n+        except OSError:\n+            pass\n+\n+    def test_exclusive_lock(self):\n+        with open(self.temp_file.name) as f1, open(self.temp_file.name) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        with open(self.temp_file.name) as f1, open(self.temp_file.name) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_invalid_file_descriptor(self):\n+        # Test with an invalid file descriptor\n+        try:\n+            with open(self.temp_file.name) as f:\n+                fd = f.fileno()\n+            os.close(fd)  # Close file descriptor to make it invalid\n+            self.assertIs(locks.lock(fd, locks.LOCK_EX), False)\n+        except ValueError:  # File descriptor is already closed\n+            pass\n+\n+    def test_unlock_when_not_locked(self):\n+        # Test unlocking a file that was not locked\n+        with open(self.temp_file.name) as f:\n+            self.assertIs(locks.unlock(f), True)  # Should be able to \"unlock\" without error even if not locked\n+\n import errno\n import gzip\n import os\n@@ -8,7 +51,7 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..bcd2d10 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,32 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotate_without_order_by(self):\n+        # Test for when annotate is used and results in a GROUP BY without ORDER BY.\n+        # This should not return ordered=True despite having a default ordering in Meta.\n+\n+        # Assuming the model Annotation has Meta.ordering set\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        sql = str(qs.query)\n+        self.assertIn(\"GROUP BY\", sql)  # Ensure it's a GROUP BY query\n+        self.assertNotIn(\"ORDER BY\", sql)  # Ensure there's no ORDER BY\n+        self.assertIs(qs.ordered, False)\n+        \n+        # Also test with .all() for completeness\n+        qs = Annotation.objects.annotate(num_notes=Count('notes')).all()\n+        sql = str(qs.query)\n+        self.assertIn(\"GROUP BY\", sql)  # Confirm GROUP BY is still present\n+        self.assertNotIn(\"ORDER BY\", sql)  # Confirm no ORDER BY appears\n+        self.assertIs(qs.ordered, False)\n+\n+    def test_annotate_values_without_order_by(self):\n+        # Test where annotate and values lead to a GROUP BY without ORDER BY.\n+        qs = Annotation.objects.values('notes').annotate(num_notes=Count('notes'))\n+        sql = str(qs.query)\n+        self.assertIn(\"GROUP BY\", sql)\n+        self.assertNotIn(\"ORDER BY\", sql)\n+        self.assertIs(qs.ordered, False)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..476508f 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +39,25 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email_custom_user(self):\n+        \"\"\"Updating the custom user email address invalidates the token.\"\"\"\n+        user = CustomEmailField.objects.create_user(\n+            'changeemailuser', \n+            email='test4@example.com', \n+            password='testpw'\n+        )\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        \n+        # Initially, token should be valid\n+        self.assertIs(p0.check_token(user, tk1), True)\n+\n+        # Change email\n+        setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+        user.save()\n+\n+        # After email update, token should be invalid\n+        self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..0c8b74a 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,9 +1,11 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n from django.db import models\n+from django.db.models import UniqueConstraint, Q\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n@@ -84,8 +86,25 @@ class UserModelChecksTests(SimpleTestCase):\n                     id='auth.W004',\n                 ),\n             ])\n+    \n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithCompleteUniqueConstraint')\n+    def test_username_complete_unique_constraint(self):\n+        \"\"\"\n+        Test with a complete UniqueConstraint for USERNAME_FIELD.\n+        \"\"\"\n+        class CustomUserWithCompleteUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = \"username\"\n+\n+            class Meta:\n+                constraints = [UniqueConstraint(fields=['username'], name='username_complete_unique')]\n \n-    @override_settings(AUTH_USER_MODEL='auth_tests.BadUser')\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [])\n     def test_is_anonymous_authenticated_methods(self):\n         \"\"\"\n         <User Model>.is_anonymous/is_authenticated must not be methods.\n",
  "django__django-13569": "",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..20df8c3 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -14,6 +14,7 @@ import unittest\n from io import StringIO\n from unittest import mock\n \n+import os\n from django import conf, get_version\n from django.conf import settings\n from django.core.management import (\n@@ -28,6 +29,7 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from django.test.utils import captured_stderr, captured_stdout\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n",
  "django__django-13670": "",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..5d6aff3 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,10 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_password_hash_field_is_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..4e07940 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -111,10 +111,46 @@ class OptimizerTests(SimpleTestCase):\n     def test_create_alter_model_options(self):\n         self.assertOptimizesTo(\n             [\n+                migrations.CreateModel('MyModel', fields=[], options={'verbose_name': 'My Model'}),\n+                migrations.AlterModelOptions(name='MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ]\n+        )\n+\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel('MyModel', fields=[], options={\n+                    'verbose_name': 'My Model',\n+                    'verbose_name_plural': 'My Model plural',\n+                }),\n+                migrations.AlterModelOptions('MyModel', options={'verbose_name': 'My Model'}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[], options={'verbose_name': 'My Model'}),\n                 migrations.CreateModel('Foo', fields=[]),\n                 migrations.AlterModelOptions(name='Foo', options={'verbose_name_plural': 'Foozes'}),\n             ],\n             [\n+                migrations.CreateModel('MyModel', fields=[], options={'verbose_name': 'My Model'}),\n+                migrations.AlterModelOptions(name='MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ]\n+        )\n+\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel('MyModel', fields=[], options={\n+                    'verbose_name': 'My Model',\n+                    'verbose_name_plural': 'My Model plural',\n+                }),\n+                migrations.AlterModelOptions('MyModel', options={'verbose_name': 'My Model'}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[], options={'verbose_name': 'My Model'}),\n                 migrations.CreateModel('Foo', fields=[], options={'verbose_name_plural': 'Foozes'}),\n             ]\n         )\n@@ -126,6 +162,24 @@ class OptimizerTests(SimpleTestCase):\n         \"\"\"\n         self.assertOptimizesTo(\n             [\n+                migrations.CreateModel('MyModel', fields=[], options={'verbose_name': 'My Model'}),\n+                migrations.AlterModelOptions(name='MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ]\n+        )\n+\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel('MyModel', fields=[], options={\n+                    'verbose_name': 'My Model',\n+                    'verbose_name_plural': 'My Model plural',\n+                }),\n+                migrations.AlterModelOptions('MyModel', options={'verbose_name': 'My Model'}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[], options={'verbose_name': 'My Model'}),\n                 migrations.CreateModel(\"Foo\", [(\"name\", models.CharField(max_length=255))]),\n                 migrations.AlterModelTable(\"Foo\", \"woohoo\"),\n                 alter_foo,\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..fbebd8d 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,9 +1,11 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n from ..utils import setup\n+from django.utils.translation import gettext_lazy, lazy\n \n \n class AddTests(SimpleTestCase):\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..c22a7e3 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -18,6 +18,7 @@ from django.test import (\n     skipUnlessDBFeature,\n )\n \n+from django.db import IntegrityError, transaction, connection\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n@@ -625,8 +626,32 @@ class FkConstraintsTests(TransactionTestCase):\n                     connection.check_constraints()\n             transaction.set_rollback(True)\n \n+class SQLReservedKeywordsTest(TransactionTestCase):\n \n-class ThreadTests(TransactionTestCase):\n+    available_apps = ['backends']\n+\n+    def test_check_constraints_sql_keywords(self):\n+        \"\"\"\n+        Test that loading data for a model with a table name that is a SQL \n+        reserved keyword does not crash.\n+        \"\"\"\n+        class SQLKeywordsModel(models.Model):\n+            id = models.AutoField(primary_key=True, db_column='select')\n+            reporter = models.ForeignKey(Reporter, models.CASCADE, db_column='where')\n+\n+            class Meta:\n+                db_table = 'order'\n+\n+        with transaction.atomic():\n+            reporter = Reporter.objects.create(last_name='Doe')\n+            obj = SQLKeywordsModel.objects.create(reporter=reporter)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n \n     available_apps = ['backends']\n \n",
  "django__django-13809": "",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..b548f24 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,7 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n@@ -511,7 +513,45 @@ class LoaderTests(TestCase):\n         loader.load_disk()\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n+    \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_file'})\n+    def test_loading_package_with_no_file(self):\n+        \"\"\"\n+        Verify that MigrationLoader loads migrations from regular packages with\n+        no __file__ attribute, to support frozen environments.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_no_file')\n+        loader = MigrationLoader(connection)\n+\n+        # Preserve the original state of __file__ and spec attributes.\n+        module_file = getattr(test_module, '__file__', None)\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+\n+        try:\n+            # Simulate a frozen environment by deleting __file__ and updating spec.\n+            if module_file is not None:\n+                del test_module.__file__\n+\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+\n+            loader.load_disk()\n+\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+\n+        finally:\n+            # Restore original module attributes.\n+            if module_file is not None:\n+                test_module.__file__ = module_file\n \n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..61d8773 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -36,7 +36,12 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_for_3_8_11_1(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..0e2c1fc 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -158,7 +158,14 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict('sys.modules', {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,7 +180,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict('sys.modules', {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..d009628 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -289,7 +289,19 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         ChoiceModel.objects.create(pk=2, name='b')\n         ChoiceModel.objects.create(pk=3, name='c')\n \n-        # ModelChoiceField\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Creating test cases for ModelChoiceField to verify invalid choice value is included\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': 'INVALID CHOICE',\n@@ -307,4 +319,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..a1a804e 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,4 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n+from django.test import skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n from django.test import TestCase, skipIfDBFeature\n \n from .models import Bar, Business, Employee, Foo\n@@ -220,6 +224,16 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n+    def test_auto_field_subclass_create(self):\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n     # SQLite lets objects be saved with an empty primary key, even though an\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..d247d79 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -816,8 +816,23 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n-\n-class IterableLookupInnerExpressionsTests(TestCase):\n+    def test_q_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        # Test combined Q and Exists in different orders\n+        filters = [\n+            (Exists(is_ceo) & Q(), [self.max]),\n+            (Q() & Exists(is_ceo), [self.max]),\n+            (Exists(is_poc) & Q(), [self.max]),\n+            (Q() & Exists(is_poc), [self.max]),\n+        ]\n+        \n+        for conditions, expected in filters:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..a01d632 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,27 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_post_process_yields_unique_files(self):\n+        # Set up the collectstatic command with the necessary arguments\n+        collectstatic_args = {\n+            'interactive': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': [],\n+        }\n+\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Extract the filenames from the post-processed stats\n+        post_processed_files = [file[0] for file in stats['post_processed']]\n+        \n+        # Ensure no file is yielded more than once\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +235,27 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_post_process_yields_unique_files(self):\n+        # Set up the collectstatic command with the necessary arguments\n+        collectstatic_args = {\n+            'interactive': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': [],\n+        }\n+\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Extract the filenames from the post-processed stats\n+        post_processed_files = [file[0] for file in stats['post_processed']]\n+        \n+        # Ensure no file is yielded more than once\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..61afab7 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -5,6 +6,7 @@ Tests for stuff in django.utils.datastructures.\n import copy\n import pickle\n \n+import collections.abc\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n@@ -34,6 +36,21 @@ class OrderedSetTests(SimpleTestCase):\n         s.discard(2)\n         self.assertEqual(len(s), 1)\n \n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n     def test_contains(self):\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n",
  "django__django-14122": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex b2ec8af..8596ec6 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -1144,6 +1145,40 @@ class AggregateTestCase(TestCase):\n         with self.assertNumQueries(1) as ctx:\n             list(publisher_qs)\n         self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_ordering_fields_not_in_group_by(self):\n+        # Ensure that ordering fields are not included in the GROUP BY clause.\n+        # Create authors with books\n+        a1 = Author.objects.create(name='Author A', age=40)\n+        a2 = Author.objects.create(name='Author B', age=35)\n+        p1 = Publisher.objects.create(name='Publisher A', num_awards=1)\n+        p2 = Publisher.objects.create(name='Publisher B', num_awards=2)\n+        b1 = Book.objects.create(\n+            isbn='1234567890', name='Book 1', pages=100, rating=4.0,\n+            price=Decimal('10.00'), contact=a1, publisher=p1,\n+            pubdate=datetime.date(2023, 1, 1)\n+        )\n+        b2 = Book.objects.create(\n+            isbn='0987654321', name='Book 2', pages=200, rating=3.0,\n+            price=Decimal('20.00'), contact=a2, publisher=p2,\n+            pubdate=datetime.date(2023, 2, 2)\n+        )\n+        \n+        # Annotate without including ordering fields explicitly in the values\n+        books = Book.objects.annotate(author_age=F('contact__age')).values('publisher__name').annotate(total_price=Sum('price'))\n+        \n+        # Ensure the result matches expectations and does not include ordering fields in the GROUP BY clause\n+        self.assertEqual(\n+            list(books),\n+            [{'publisher__name': 'Publisher A', 'total_price': Decimal('10.00')},\n+             {'publisher__name': 'Publisher B', 'total_price': Decimal('20.00')}]\n+        )\n+        \n+        # Print the SQL to verify no ordering fields in GROUP BY\n+        with CaptureQueriesContext(connection) as captured_queries:\n+            list(books)\n+        sql = captured_queries[0]['sql'].lower()\n+        self.assertNotIn('contact_age', sql)  # Ensure 'contact__age' is not in GROUP BY\n         # The GROUP BY should not be by alias either.\n         self.assertEqual(ctx[0]['sql'].lower().count('latest_book_pubdate'), 1)\n \n@@ -1339,4 +1374,4 @@ class AggregateTestCase(TestCase):\n             ('Wesley J. Chun', 1),\n             ('Stuart Russell', 1),\n             ('Peter Norvig', 2),\n-        ], lambda a: (a.name, a.contact_count), ordered=False)\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..bfbc820 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -93,7 +94,15 @@ class QTests(SimpleTestCase):\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(Q(*args, **kwargs), q)\n \n-    def test_reconstruct_negated(self):\n+    def test_deconstruct_single_non_subscriptable_child(self):\n+        from django.contrib.auth import get_user_model\n+        User = get_user_model()\n+\n+        is_jim = User.objects.filter(username=OuterRef('pk'))\n+        q = Q(Exists(is_jim))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, (Exists(is_jim),))\n+        self.assertEqual(kwargs, {})\n         q = ~Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(Q(*args, **kwargs), q)\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..c9076c2 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,7 +1,11 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n+from django.db import models\n+from django.test import SimpleTestCase, override_settings\n+from django.test.utils import isolate_apps\n \n \n @isolate_apps('model_options')\n@@ -82,6 +86,28 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+        \n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+        \n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n+\n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..6a76d1d 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -182,6 +182,15 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..21935ea 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -233,6 +233,21 @@ TEST_DATA = [\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n+    (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\t', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\t', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://user:pass@www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://user:pass@www.django\\tproject.com/', ValidationError),\n+    (URLValidator(), 'http://user:pass@www.django\\nproject.com/', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\npath', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\tpath', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\rpath', ValidationError),\n+    (URLValidator(), 'schema://host/\\npath', ValidationError),\n+    (URLValidator(), 'schema://host/\\tpath', ValidationError),\n+    (URLValidator(), 'schema://host/\\rpath', ValidationError),\n     (BaseValidator(True), True, None),\n     (BaseValidator(True), False, ValidationError),\n \n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..c1633f8 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,7 +1526,31 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.test import TestCase\n+from django.db.models import Q, Count\n+from .models import Author, Book, PropertyGroup  # Assuming these are the correct models\n+\n class JoinPromotionTests(TestCase):\n+    def test_q_object_or_issue(self):\n+        # Setup test data\n+        management_agent = self.create_management_agent()  # This function should create a management agent\n+        property_groups = PropertyGroup.objects.agent_groups(management_agent)  # Replace with actual method\n+\n+        # Create the queryset similar to the issue description\n+        queryset = self.annotate(Count(\"agent__property_groups\")).filter(\n+            Q(agent__property_groups__in=property_groups) | Q(agent__property_groups__count=0)\n+        ).distinct()\n+\n+        # Verify that the issue is resolved and this no longer raises an error\n+        try:\n+            list(queryset)  # Force evaluation of the queryset\n+        except Exception as e:\n+            self.fail(f\"Query failed with exception: {str(e)}\")\n+\n+    def create_management_agent(self):\n+        # Placeholder for creating a management agent for the tests\n+        # Implement the actual logic to create and return a management agent\n+        pass\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..72ebb3b 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -157,14 +157,26 @@ class DateFormatTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 dateformat.format(my_birthday, specifier)\n \n-    def test_r_format_with_non_en_locale(self):\n-        # Changing the locale doesn't change the \"r\" format.\n-        dt = datetime(1979, 7, 8, 22, 00)\n-        with translation.override('fr'):\n-            self.assertEqual(\n-                dateformat.format(dt, 'r'),\n-                'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+    def test_y_format_year_before_1000(self):\n+        # Added this test case to verify 'y' format handling\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n+\n+    def test_Y_format_year_before_1000(self):\n+        # Test cases to verify Y format with years < 1000\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+        self.assertEqual(dateformat.format(datetime(999, 12, 31), 'Y'), '0999')\n+        self.assertEqual(dateformat.format(datetime(145, 6, 15), 'Y'), '0145')\n \n     def test_year_before_1000(self):\n         tests = [\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..a4ed195 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,6 +38,66 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_new_keys_preferred(self):\n+        settings_port = 444\n+        options_port = 555\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                    'db': 'deprecateddbname',\n+                    'passwd': 'deprecatedpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_options_fallback_to_deprecated_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecateddbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecateddbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n         options_port = 555\n@@ -68,6 +128,66 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_new_keys_preferred(self):\n+        settings_port = 444\n+        options_port = 555\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                    'db': 'deprecateddbname',\n+                    'passwd': 'deprecatedpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_options_fallback_to_deprecated_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecateddbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecateddbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n@@ -89,6 +209,66 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_new_keys_preferred(self):\n+        settings_port = 444\n+        options_port = 555\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                    'db': 'deprecateddbname',\n+                    'passwd': 'deprecatedpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_options_fallback_to_deprecated_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecateddbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecateddbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..5162dbb 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2194,6 +2194,24 @@ class SchemaTests(TransactionTestCase):\n         ]\n         self.assertEqual(len(other_constraints), 1)\n         # Drop the unique constraint\n+\n+    def test_unique_constraint_references_check(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='test_name_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        # This checks if the SQL references the correct table.\n+        self.assertIs(sql.references_table(table), True)\n+        # This checks if the SQL references the correct column, which reflects the issue fix.\n+        self.assertIs(sql.references_column(table, 'name'), True)\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n         with connection.schema_editor() as editor:\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..59ebefd 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -454,6 +454,26 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n         )\n \n \n+from django.test import override_settings\n+from django.core.management import call_command\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from io import StringIO\n+\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoPostProcessReplacedPathStorage')\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n+\n+    def test_collectstatic_no_post_process_replaced_paths(self):\n+        stdout = StringIO()\n+        try:\n+            call_command('collectstatic', verbosity=1, interactive=False, stdout=stdout)\n+            self.assertIn('post-processed', stdout.getvalue())\n+        except UnboundLocalError as e:\n+            self.fail(f'collectstatic raised an UnboundLocalError: {e}')\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n class TestCollectionNoneHashStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..77cae07 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -645,6 +645,26 @@ class ExecutorTests(MigrationTestBase):\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n \n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n+    def test_squashed_migration_unapplied_correctly(self):\n+        \"\"\"Ensure squashed migration is marked unapplied when unapplied.\"\"\"\n+        executor = MigrationExecutor(connection)\n+        # Apply the squashed migration\n+        executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n+        try:\n+            self.assertIn(\n+                (\"migrations\", \"0001_squashed_0002\"),\n+                executor.recorder.applied_migrations(),\n+            )\n+        finally:\n+            # Unapply the squashed migration\n+            executor.loader.build_graph()\n+            executor.migrate([(\"migrations\", None)])\n+            self.assertNotIn(\n+                (\"migrations\", \"0001_squashed_0002\"),\n+                executor.recorder.applied_migrations(),\n+            )\n+\n         # Because 0001 and 0002 are both applied, even though this migrate run\n         # didn't apply anything new, their squashed replacement should be\n         # marked as applied.\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..a7b8087 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -255,6 +255,18 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Check this out: example.com/path?<param>&gt;.',\n+                'Check this out: <a href=\"http://example.com/path?%3Cparam%3E\">example.com/path?&lt;param&gt;</a>.'\n+            ),\n+            (\n+                'Find github.com/ with trailing punctuations?.',\n+                'Find <a href=\"http://github.com/\">github.com/</a> with trailing punctuations?.'\n+            ),\n         )\n         for value, output in tests:\n             with self.subTest(value=value):\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..e07a109 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -123,6 +123,36 @@ class BulkUpdateTests(TestCase):\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             CustomPk.objects.bulk_update([], ['name'])\n \n+    def test_bulk_update_return_value_empty(self):\n+        \"\"\"\n+        Test that bulk_update returns 0 when no objects are updated.\n+        \"\"\"\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_return_value_large_batch(self):\n+        \"\"\"\n+        Test that bulk_update returns the correct number of rows updated for a large batch.\n+        \"\"\"\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_return_value_with_duplicates(self):\n+        \"\"\"\n+        Test that bulk_update returns the correct number of rows updated when there are duplicates.\n+        \"\"\"\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        # Duplicates in different batches.\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n+\n     def test_empty_objects(self):\n         with self.assertNumQueries(0):\n             Note.objects.bulk_update([], ['note'])\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..994671b 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -983,8 +983,26 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n-\n-    def test_formset_iteration(self):\n+    \n+    def test_formset_non_form_errors_with_css_class(self):\n+        \"\"\"\n+        Test that non-form errors in FormSets have the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',  # the number of forms rendered\n+            'drinks-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'drinks-MIN_NUM_FORMS': '0',  # min number of forms\n+            'drinks-MAX_NUM_FORMS': '0',  # max number of forms\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(\n+            str(non_form_errors),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n         formset = ChoiceFormset()\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..ff57ac1 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,6 +2129,39 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n+    def test_datetime_bound_field_initial_value(self):\n+        \"\"\"\n+        Tests if the BoundField's initial value matches the cleaned_data\n+        when the form is disabled.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned = form.cleaned_data['dt']\n+        bf = form['dt']\n+        self.assertEqual(cleaned, bf.initial)\n+\n+    def test_changed_data_with_bound_field(self):\n+        \"\"\"\n+        Ensures changed_data accesses values through BoundField and validates\n+        change detection when initial values are callable.\n+        \"\"\"\n+        initial_datetime = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: initial_datetime, disabled=False)\n+\n+        # Test no change\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45.123456'})\n+        self.assertEqual(form.changed_data, [])\n+\n+        # Test change\n+        form = DateTimeForm({'dt': '2006-10-26 14:30:45.123456'})\n+        self.assertEqual(form.changed_data, ['dt'])\n+\n     def test_help_text(self):\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..19b4e5c 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -2,6 +2,8 @@ from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n from django.db import IntegrityError\n+from django.db import models\n+from django.core.checks import Error\n from django.test import TestCase\n \n from .models import (\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..5c5ddd9 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -10,6 +11,7 @@ from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n from django.urls import reverse, reverse_lazy\n+from django.test import TestCase\n \n from .admin import AnswerAdmin, QuestionAdmin\n from .models import (\n@@ -294,7 +296,64 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n-@override_settings(ROOT_URLCONF='admin_views.urls')\n+class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+    def serialize_result(self, obj, to_field_name):\n+        return {\n+            **super().serialize_result(obj, to_field_name),\n+            'posted': str(obj.posted),\n+            'additional_info': 'extra details',\n+        }\n+\n+class AutocompleteJsonViewTests(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        self.url = reverse('autocomplete')\n+        self.opts = {\n+            'app_label': 'admin_views',\n+            'model_name': 'question',\n+            'field_name': 'question',\n+        }\n+        self.as_view_args = {\n+            'admin_site': admin.site,\n+        }\n+    \n+    def test_serialize_result_with_additional_info(self):\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted), 'additional_info': 'extra details'}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n+    def test_empty_results(self):\n+        request = self.factory.get(self.url, {'term': 'nonexistent', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [],\n+            'pagination': {'more': False},\n+        })\n+\n+    def test_no_permission(self):\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        regular_user = User.objects.create_user(username='regular', password='secret')\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = regular_user\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 403)\n class SeleniumTests(AdminSeleniumTestCase):\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n \n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..a08450c 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,8 +923,32 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n+    def test_real_apps_set(self):\n+        \"\"\"\n+        Test that ProjectState accepts a set for real_apps without raising an error.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n \n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_empty_set(self):\n+        \"\"\"\n+        Test that ProjectState accepts an empty set for real_apps without raising an error.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps=set())\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_none(self):\n+        \"\"\"\n+        Test that ProjectState handles None for real_apps without raising an error.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps=None)\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..62cb652 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,6 +166,15 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 )\n \n \n+from django.utils import autoreload\n+import sys\n+import mock\n+from unittest import SimpleTestCase\n+from pathlib import Path\n+import tempfile\n+import types\n+from subprocess import CompletedProcess\n+\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..c161f21 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5132,6 +5132,37 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Test that the URL for read-only ForeignKey fields uses the correct admin site.\n+        \"\"\"\n+        # Create a language instance to test URL generation\n+        language = Language.objects.create(iso='_41', name='Test Language')\n+        # Create a ReadOnlyRelatedField instance that links to the language\n+        obj = ReadOnlyRelatedField.objects.create(language=language)\n+\n+        # Generate URLs using the given admin_site namespace\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(obj.language.pk,))\n+        obj_url = reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+\n+        # Client requests object change form\n+        response = self.client.get(obj_url)\n+\n+        # Verify that the correct admin site is used in the URL links\n+        self.assertContains(response, f'<div class=\"readonly\"><a href=\"{language_url}\">_41</a></div>', html=True)\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test read-only ForeignKey links with the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test read-only ForeignKey links with a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('namespaced_admin')\n+\n     def test_readonly_manytomany_backwards_ref(self):\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..a635434 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,16 +1,41 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n \n from .models import Article, Author, Book, Category, Writer\n \n-\n class ModelChoiceFieldTests(TestCase):\n+    \n+    def test_model_choice_iterator_value_hashable(self):\n+        # Create instances of ModelChoiceIteratorValue with mock data\n+        obj_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        obj_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        obj_1_duplicate = ModelChoiceIteratorValue(self.c1.pk, None)\n+\n+        # Assert that the same object with same value hash the same\n+        self.assertEqual(hash(obj_1), hash(obj_1_duplicate))\n+        self.assertNotEqual(hash(obj_1), hash(obj_2))\n+\n+        # Test that it can work as keys in a dictionary\n+        test_dict = {obj_1: \"object 1\", obj_2: \"object 2\"}\n+        self.assertEqual(test_dict[obj_1], \"object 1\")\n+        self.assertEqual(test_dict[obj_2], \"object 2\")\n+        # Check the behavior when using the duplicate key\n+        self.assertEqual(test_dict[obj_1_duplicate], \"object 1\")\n+\n+    def test_model_choice_iterator_value_in_dict(self):\n+        # Check if ModelChoiceIteratorValue can be used in 'in' operation in a dictionary\n+        obj_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        test_dict = {obj_1: \"test\"}\n+        \n+        self.assertIn(obj_1, test_dict)\n+        self.assertNotIn(self.c2.pk, test_dict)\n     @classmethod\n     def setUpTestData(cls):\n         cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..d2906ab 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,73 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_idempotency(self):\n+        \"\"\"\n+        Test that multiple RenameModel operations with `db_table` defined result in no schema changes.\n+        \"\"\"\n+        app_label = 'test_rmwdbtn_idempotency'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Car', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'car'}),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Car', 'Vehicle')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Apply the operation twice\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, new_state, new_state)\n+\n+    def test_rename_model_with_db_table_noop_rollback(self):\n+        \"\"\"\n+        Test that rollback of RenameModel with db_table does not alter the schema.\n+        \"\"\"\n+        app_label = 'test_rmwdbtn_rollback'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Plane', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'plane'}),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Plane', 'Jet')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Apply the operation\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Rollback the operation\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/admin.py b/tests/admin_changelist/admin.py\nindex 580e58f..2eadde2 100644\n--- a/tests/admin_changelist/admin.py\n+++ b/tests/admin_changelist/admin.py\n@@ -1,9 +1,10 @@\n+\n from django.contrib import admin\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.core.paginator import Paginator\n \n-from .models import Band, Child, Event, Parent, Swallow\n+from .models import Band, Child, Event, Parent, Swallow, Client, ClientOffice\n \n site = admin.AdminSite(name=\"admin\")\n \n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..8284508 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n \n+from django.utils.html import json_script\n from ..utils import setup\n \n \n@@ -16,4 +18,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..4ae7f25 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,4 +1,5 @@\n-from django.contrib.messages import constants, get_level, set_level, utils\n+\n+from django.contrib.messages import constants, get_level, set_level, utils, override_settings\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n from django.contrib.messages.storage import base, default_storage\n@@ -368,6 +369,20 @@ class BaseTests:\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n+    def test_default_level_tags(self):\n+        # Test that LEVEL_TAGS is default when no override is applied\n+        self.assertEqual(base.LEVEL_TAGS, {\n+            constants.DEBUG: 'debug',\n+            constants.INFO: 'info',\n+            constants.SUCCESS: 'success',\n+            constants.WARNING: 'warning',\n+            constants.ERROR: 'error',\n+        })\n+\n+    def test_custom_level_without_override(self):\n+        # Test that custom levels are not present without override\n+        self.assertNotIn(29, base.LEVEL_TAGS)\n+        \n     @override_settings_tags(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n@@ -375,6 +390,15 @@ class BaseTests:\n         constants.ERROR: 'bad',\n         29: 'custom',\n     })\n+    def test_custom_and_default_tags(self):\n+        # Verify both custom and default tags exist when override is applied\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        # Assuming add_level_messages adds messages for constants.INFO, etc.\n+        self.assertIn('custom', tags)  # Check if custom tag is handled\n+        self.assertIn('info', tags)    # Check if default tag is still present\n     def test_custom_tags(self):\n         storage = self.get_storage()\n         storage.level = 0\n",
  "django__django-15128": "",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..c478849 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1774,8 +1774,12 @@ class ValueTests(TestCase):\n         self.assertEqual(args, (value.value,))\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n-\n-    def test_repr(self):\n+    def test_deconstruct_F_expression(self):\n+        f_expression = F('name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, (f_expression.name,))\n+        self.assertEqual(kwargs, {})\n         tests = [\n             (None, 'Value(None)'),\n             ('str', \"Value('str')\"),\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..2fd2da0 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1561,7 +1561,46 @@ class AutodetectorTests(TestCase):\n         # Right number of migrations?\n         self.assertEqual(len(changes), 0)\n \n-    def test_foo_together_ordering(self):\n+    def test_optimize_alter_foo_together(self):\n+        \"\"\"\n+        Test optimizing consecutive AlterUniqueTogether and AlterIndexTogether operations.\n+        \"\"\"\n+        before_operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={('col',)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={('col',)},\n+            ),\n+        ]\n+\n+        after_operations = [\n+            migrations.AlterUniqueTogether(\n+                name='mymodel',\n+                unique_together={('col',)},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='mymodel',\n+                index_together={('col',)},\n+            ),\n+        ]\n+\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together],\n+            [self.author_empty, self.book_foo_together_2]\n+        )\n+        operations = self.optimizer.optimize(before_operations, \"testapp\")\n+        self.assertEqual(operations, after_operations)\n         \"\"\"\n         index/unique_together also triggers on ordering changes.\n         \"\"\"\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..887825b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,6 +1847,36 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                self.assertTrue(all(isinstance(validator, validators.MaxLengthValidator) \n+                               and validator.limit_value is not None \n+                               for validator in field.validators))\n+                field.clean(value, model_instance=None)\n+            with self.subTest(type=type(value)):\n+                expr = Value(value)\n+                self.assertIsInstance(expr.output_field, output_field_type)\n+\n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..df32387 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -638,6 +638,52 @@ class SchemaTests(TransactionTestCase):\n             editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n+\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])\n+\n+    def test_add_field_o2o_non_nullable(self):\n+        \"\"\"\n+        Test adding a non-nullable OneToOneField on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=False)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertFalse(columns['note_id'][1][6])\n+\n+    def test_remove_field_o2o(self):\n+        \"\"\"\n+        Test removing a OneToOneField.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        with connection.schema_editor() as editor:\n+            editor.remove_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertNotIn('note_id', columns)\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n \n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..203939f 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -80,7 +80,48 @@ class BasicFieldTests(SimpleTestCase):\n         f = Foo._meta.get_field('a')\n         self.assertEqual(str(f), 'model_fields.Foo.a')\n \n-    def test_field_ordering(self):\n+    def test_hash_immutability_for_char_field(self):\n+        # Test hash consistency for CharField before and after assignment to a model class.\n+        char_field = models.CharField(max_length=100)\n+        char_field_hash = hash(char_field)\n+\n+        class TextBook(models.Model):\n+            content = char_field\n+\n+        self.assertEqual(char_field_hash, hash(char_field))\n+\n+    def test_hash_immutability_for_integer_field(self):\n+        # Test hash consistency for IntegerField before and after assignment to a model class.\n+        integer_field = models.IntegerField()\n+        integer_field_hash = hash(integer_field)\n+\n+        class RankModel(models.Model):\n+            rank = integer_field\n+\n+        self.assertEqual(integer_field_hash, hash(integer_field))\n+\n+    def test_hash_immutability_for_date_field(self):\n+        # Test hash consistency for DateField before and after assignment to a model class.\n+        date_field = models.DateField()\n+        date_field_hash = hash(date_field)\n+\n+        class Event(models.Model):\n+            event_date = date_field\n+\n+        self.assertEqual(date_field_hash, hash(date_field))\n+\n+    def test_hash_immutability_for_foreign_key(self):\n+        # Test hash consistency for ForeignKey before and after assignment to a model class.\n+        class Author(models.Model):\n+            name = models.CharField(max_length=50)\n+\n+        foreign_key_field = models.ForeignKey(Author, on_delete=models.CASCADE)\n+        foreign_key_hash = hash(foreign_key_field)\n+\n+        class Book(models.Model):\n+            author = foreign_key_field\n+\n+        self.assertEqual(foreign_key_hash, hash(foreign_key_field))\n         \"\"\"Fields are ordered based on their creation.\"\"\"\n         f1 = models.Field()\n         f2 = models.Field(auto_created=True)\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..55891ca 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -211,6 +211,22 @@ class BulkUpdateTests(TestCase):\n         Number.objects.bulk_update(numbers, ['num'])\n         self.assertCountEqual(Number.objects.filter(num=1), numbers)\n \n+    def test_f_expression_on_field(self):\n+        # Create several SelfRef objects\n+        objects = [SelfRef.objects.create(name=f'name_{i}', c8=f'c8_{i}') for i in range(5)]\n+\n+        # Assign F('name') to the 'c8' field for each object\n+        for obj in objects:\n+            obj.c8 = F('name')\n+\n+        # Use bulk_update to update the 'c8' field\n+        SelfRef.objects.bulk_update(objects, ['c8'])\n+\n+        # Assert that each object's 'c8' field is updated to match its 'name' field\n+        for obj in objects:\n+            obj.refresh_from_db()\n+            self.assertEqual(obj.c8, obj.name)\n+\n     def test_booleanfield(self):\n         individuals = [Individual.objects.create(alive=False) for _ in range(10)]\n         for individual in individuals:\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..0a4ffbb 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1048,8 +1048,50 @@ class AutodetectorTests(TestCase):\n             changes, 'app', 0, 1, model_name='bar', old_name='foo',\n             new_name='renamed_foo',\n         )\n+    def test_rename_model_field_order(self):\n+        \"\"\"Ensure no crash when renaming a model and a field in order.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n \n-    def test_rename_model(self):\n+    def test_rename_model_field_single_step(self):\n+        \"\"\"Ensure no crash when renaming a model and a field in a single step.\"\"\"\n+        original_state = ModelState('testapp', 'Author', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('name', models.CharField(max_length=200)),\n+        ])\n+        new_state = ModelState('testapp', 'RenamedAuthor', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('renamed_name', models.CharField(max_length=200)),\n+        ])\n+        changes = self.get_changes(\n+            [original_state],\n+            [new_state],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n             [self.author_with_book, self.book],\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..2baefa6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,31 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import Manager  # Adjust the import path to match the actual model location\n+\n+class ExistsSubqueryTests(TestCase):\n+    def setUp(self):\n+        self.manager = Manager.objects.create(name='manager_test')\n+\n+    def test_negated_empty_exists(self):\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()), pk=self.manager.pk)\n+        self.assertSequenceEqual(qs, [self.manager])\n+\n+    def test_non_negated_empty_exists(self):\n+        qs = Manager.objects.filter(Exists(Manager.objects.none()), pk=self.manager.pk)\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_negated_non_empty_exists(self):\n+        another_manager = Manager.objects.create(name='another_manager')\n+        qs = Manager.objects.filter(~Exists(Manager.objects.filter(pk=another_manager.pk)), pk=self.manager.pk)\n+        self.assertSequenceEqual(qs, [self.manager])\n+\n+    def test_non_negated_non_empty_exists(self):\n+        another_manager = Manager.objects.create(name='another_manager')\n+        qs = Manager.objects.filter(Exists(Manager.objects.filter(pk=another_manager.pk)), pk=self.manager.pk)\n+        self.assertSequenceEqual(qs, [])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..6f882af 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -122,6 +122,36 @@ class OptimizerTests(SimpleTestCase):\n                     name=\"Foo\", options={\"verbose_name_plural\": \"Foozes\"}\n                 ),\n             ],\n+        )\n+\n+    def test_create_model_with_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                        (\"another_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                        (\"another_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n             [\n                 migrations.CreateModel(\n                     \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n@@ -129,6 +159,36 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_model_with_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                        (\"another_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                        (\"another_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..7a3ebc3 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,81 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+from django.test import TestCase\n+from django.core import management\n+from django.db import models\n+\n+class Person(models.Model):\n+    name = models.CharField(max_length=255)\n+\n+    def natural_key(self):\n+        return (self.name,)\n+\n+    class Meta:\n+        app_label = 'fixtures_regress'\n+\n+\n+class NaturalKeyWithFKDependencyManager(models.Manager):\n+    def get_by_natural_key(self, name, author):\n+        return self.get(name=name, author__name=author)\n+\n+\n+class NaturalKeyWithFKDependency(models.Model):\n+    name = models.CharField(max_length=255)\n+    author = models.ForeignKey(Person, models.CASCADE)\n+\n+    objects = NaturalKeyWithFKDependencyManager()\n+\n+    class Meta:\n+        unique_together = [\"name\", \"author\"]\n+        app_label = 'fixtures_regress'\n+\n+    def natural_key(self):\n+        return (self.name,) + self.author.natural_key()\n+\n+    natural_key.dependencies = [\"fixtures_regress.Person\"]\n+\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def test_natural_key_dependencies(self):\n+        \"\"\"\n+        Natural keys with foreign keys in dependencies work in a multiple\n+        database setup.\n+        \"\"\"\n+        management.call_command(\n+            \"loaddata\",\n+            \"nk_with_foreign_key.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        obj = NaturalKeyWithFKDependency.objects.using(\"other\").get()\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n+\n+class LoadDataWithNaturalKeysTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def test_loaddata_on_non_default_database(self):\n+        \"\"\"\n+        Verify that loaddata works correctly on a non-default database\n+        when natural keys with foreign keys are used.\n+        \"\"\"\n+        management.call_command(\n+            \"loaddata\",\n+            \"nk_with_foreign_key.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        book = NaturalKeyWithFKDependency.objects.using(\"other\").get(name=\"The Lord of the Rings\")\n+        author = Person.objects.using(\"other\").get(name=\"J.R.R. Tolkien\")\n+        \n+        self.assertEqual(book.name, \"The Lord of the Rings\")\n+        self.assertEqual(book.author, author)\n+        self.assertEqual(author.name, \"J.R.R. Tolkien\")\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..8713e98 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -320,6 +320,13 @@ class LookupTests(TestCase):\n         self.assertNotIn(\"exactly\", field.get_lookups())\n \n         # registration should bust the cache\n+        with register_lookup(models.ForeignObject, Exactly):\n+            # Cache should now include \"exactly\" after registration\n+            self.assertIn(\"exactly\", field.get_lookups())\n+        \n+        # Unregistration should clear the cache\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n         with register_lookup(models.ForeignObject, Exactly):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..c03dbb4 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,8 +1,10 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n \n from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n+import inspect\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..22cd40b 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,10 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n+from django.utils.formats import get_format\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -72,6 +76,13 @@ class DateTests(TimezoneTestCase):\n         output = self.engine.render_to_string(\"date09\", {\"t\": time(0, 0)})\n         self.assertEqual(output, \"00:00\")\n \n+    def test_get_format_lazy_number_format(self):\n+        # This test case checks if get_format correctly handles lazy strings for NUMBER format\n+        self.assertEqual(get_format(gettext_lazy(\"NUMBER_GROUPING\")), 3)\n+\n+    def test_get_format_lazy_decimal_separator(self):\n+        # This test case checks if get_format correctly handles lazy strings for DECIMAL_SEPARATOR format\n+        self.assertEqual(get_format(gettext_lazy(\"DECIMAL_SEPARATOR\")), \".\")\n \n class FunctionTests(SimpleTestCase):\n     def test_date(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..7985aeb 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -395,6 +395,19 @@ class ProxyModelTests(TestCase):\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n+    def test_select_related_only_on_proxy_model(self):\n+        # Create a ProxyCustomModel instance\n+        custom_proxy = ProxyCustomModel.objects.create(name=\"Test Proxy\")\n+\n+        # Create an AnotherModel instance referencing the ProxyCustomModel instance\n+        another_instance = AnotherModel.objects.create(custom=custom_proxy)\n+\n+        # Create a queryset using select_related() and only() on proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+\n+        # Assert that the queryset returns the correct instance of AnotherModel with the related proxy model\n+        self.assertEqual(qs.get(), another_instance)\n+\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..4c9ffd2 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,30 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_psql_args_order(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\"NAME\": \"dbname\"},\n+                [\"-c\", \"select * from some_table;\"]\n+            ),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_psql_args_order(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\"NAME\": \"dbname\"},\n+                [\"-c\", \"select * from some_table;\"]\n+            ),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..62a8b0c 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -34,6 +34,32 @@ class FloatformatTests(SimpleTestCase):\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n+        # Test to verify precision is maintained for Decimal numbers using floatformat\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        # Additional test cases for decimal numbers with different precision levels\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.00000000000000000001\"), 20),\n+            \"1.00000000000000000001\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.00000000000000000000123\"), 24),\n+            \"0.000000000000000000001230\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"12345678901234567890.12345678901234567890\"), 40),\n+            \"12345678901234567890.12345678901234567890000000000000000000\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"-9876543210.012345678901234567890\"), 30),\n+            \"-9876543210.012345678901234567890000000000000\",\n+        )\n         self.assertEqual(floatformat(7.0), \"7\")\n         self.assertEqual(floatformat(0.7), \"0.7\")\n         self.assertEqual(floatformat(-0.7), \"-0.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..e3be47b 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -404,6 +404,28 @@ class CaseExpressionTests(TestCase):\n             ),\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n+    \n+    def test_annotate_with_full_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+    \n+    def test_combined_expression_with_negated_empty_q(self):\n+        # This test checks the behavior of using ~Q(pk__in=[]) with a more complex query.\n+        objects = CaseTestModel.objects.annotate(\n+            test=Case(\n+                When(~Q(pk__in=[]), then=Value(\"has pk\")),\n+                default=Value(\"no pk\"),\n+                output_field=CharField(),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.test == \"has pk\" for obj in objects))\n \n     def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n",
  "django__django-15987": "",
  "django__django-16032": "",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c7ae7e1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,13 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [\n+            Combinable.ADD,\n+            Combinable.SUB,\n+            Combinable.MUL,\n+            Combinable.DIV,\n+            Combinable.MOD,  # Add the MOD operator to the list of connectors.\n+        ]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..72841c7 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +403,52 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Assuming Swallow model and necessary admin setup is present\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        with mock.patch(\"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+\n+        # Ensure original values are preserved after failed transaction\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+        \n+        # Test with a different failure point to ensure rollback\n+        with mock.patch(\"django.contrib.admin.ModelAdmin.log_change\", side_effect=[None, DatabaseError]):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+\n+        # Ensure original values are preserved after the second failed transaction\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..8f244ce 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2379,7 +2379,28 @@ class MakeMigrationsTests(MigrationTestBase):\n             )\n             self.assertIn(\"operations=[]\" if HAS_BLACK else \"operations=[\\n]\", content)\n \n-    def test_makemigrations_with_invalid_custom_name(self):\n+    def test_makemigrations_check_consistency(self):\n+        \"\"\"\n+        Test makemigrations --check to ensure it exits without creating migrations.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            # Ensure the directory does not exist before running the command.\n+            self.assertFalse(os.path.exists(tmpdir))\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", verbosity=0)\n+            # Verify the exit code indicates a failure since there are changes.\n+            self.assertNotEqual(cm.exception.code, 0)\n+            # Ensure the directory still does not exist as no migrations should be created.\n+            self.assertFalse(os.path.exists(tmpdir))\n+\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            # If there are no changes, it should not raise an exception for non-zero exit\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", verbosity=0)\n+            # Verify the exit code indicates a success since there are no changes.\n+            self.assertEqual(cm.exception.code, 0)\n         msg = \"The migration name must be a valid Python identifier.\"\n         with self.assertRaisesMessage(CommandError, msg):\n             call_command(\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..8b18f32 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,8 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+import asyncio\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n@@ -119,7 +121,24 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..acf1476 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,5 +1,8 @@\n+\n import datetime\n import re\n+import urllib.parse\n+from django.urls import reverse\n from unittest import mock\n \n from django.contrib.auth.forms import (\n@@ -892,6 +895,46 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_password_reset_link_correctness(self):\n+        user = User.objects.create_user(username=\"newuser\", password=\"testpassword\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (UUID instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..8a69ebb 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,7 +1600,23 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n-    def test_runner_hostname(self):\n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_runserver_zero_ip(self, *mocked_objects):\n+        \"\"\"\n+        Test that `python manage.py runserver 0:8000` outputs the correct address.\n+        \"\"\"\n+        call_command(\n+            \"runserver\",\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            self.output.getvalue(),\n+        )\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n \n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..b0970a8 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,8 +508,29 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapTestsBase(TestCase):\n+    urls = 'tests.sitemaps_tests.urls.http'\n+\n+@override_settings(ROOT_URLCONF='tests.sitemaps_tests.urls.http')\n+class SitemapNoItemsTests(SitemapTestsBase):\n+    def test_callable_lastmod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/callable-lastmod-no-items/sitemap.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..0e49913 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,11 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class MixedCaseDbColumns(models.Model):\n+    colid = models.IntegerField(primary_key=True, db_column=\"ColID\")\n+    colname = models.CharField(max_length=15, db_column=\"ColName\")\n+\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n@@ -79,6 +84,11 @@ class NoFields(models.Model):\n     pass\n \n \n+class MixedCaseDbColumns(models.Model):\n+    colid = models.IntegerField(primary_key=True, db_column=\"ColID\")\n+    colname = models.CharField(max_length=15, db_column=\"ColName\")\n+\n+\n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..0981253 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,79 @@\n+\n+class UserCreationFormManyToManyTests(TestCase):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_without_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n+\n+    def test_custom_form_invalid_data(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        # Invalid orgs id\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"password\",\n+            \"password2\": \"password\",\n+            \"orgs\": [\"999\"],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), False)\n+\n+    def test_commit_false_saves_no_many_to_many(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=False)\n+        # Commit=False should not save m2m yet\n+        self.assertSequenceEqual(user.orgs.all(), [])\n+        user.save()\n+        form.save_m2m()  # Manually save m2m data\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n import datetime\n import re\n import urllib.parse\n@@ -15,6 +91,7 @@ from django.contrib.auth.forms import (\n     UserCreationForm,\n )\n from django.contrib.auth.models import User\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from django.contrib.auth.signals import user_login_failed\n from django.contrib.sites.models import Site\n from django.core import mail\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..09785bc 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,28 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+@requires_tz_support\n+@override_settings(USE_TZ=True)\n+class TZAwareTimesinceTests(TimesinceTests):\n+    def setUp(self):\n+        super().setUp()\n+        self.t = timezone.make_aware(self.t, timezone.get_default_timezone())\n+        \n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n+    def test_longer_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=62)  # Two months\n+        self.assertEqual(timesince(d), \"2\\xa0months\")\n+\n+    def test_year_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=365)  # One year\n+        self.assertEqual(timesince(d), \"1\\xa0year\")\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..eaeba3c 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -481,6 +481,16 @@ class UtilsTests(SimpleTestCase):\n         for char in key:\n             self.assertIn(char, \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)\")\n \n+    def test_subparser_error_formatting_with_missing_arguments(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        # Simulate missing 'name' argument for 'create' subparser\n+        out, err = self.run_manage([\"subparser\", \"create\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        # The expected error should be a clean error message, not a traceback\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertIn(\"manage.py subparser create: error: the following arguments are required: name\", err_lines[1])\n+\n     def test_is_ignored_path_true(self):\n         patterns = (\n             [\"foo/bar/baz\"],\n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..fe32c6e 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -93,6 +93,13 @@ class GetStorageClassTests(SimpleTestCase):\n \n class FileSystemStorageTests(unittest.TestCase):\n     def test_deconstruction(self):\n+        \"\"\"\n+        Deconstructing a storage callable that returns default_storage doesn't omit it.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n         path, args, kwargs = temp_storage.deconstruct()\n         self.assertEqual(path, \"django.core.files.storage.FileSystemStorage\")\n         self.assertEqual(args, ())\n@@ -1010,6 +1017,13 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         self.assertIsInstance(obj.storage_callable_class.storage, BaseStorage)\n \n     def test_deconstruction(self):\n+        \"\"\"\n+        Deconstructing a storage callable that returns default_storage doesn't omit it.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n         \"\"\"\n         Deconstructing gives the original callable, not the evaluated value.\n         \"\"\"\n",
  "django__django-16527": "",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..3b674b3 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -108,6 +108,25 @@ class BaseConstraintTests(SimpleTestCase):\n         self.assertEqual(c.get_violation_error_message(), \"custom name message\")\n \n \n+class BaseConstraintTests(TestCase):\n+    def test_custom_violation_code_assignment(self):\n+        constraint = BaseConstraint(\n+            name=\"test_constraint\",\n+            violation_error_message=\"custom %(name)s message\",\n+        )\n+        self.assertIsNone(constraint.violation_error_code)\n+        constraint.violation_error_code = \"custom_code\"\n+        self.assertEqual(constraint.violation_error_code, \"custom_code\")\n+\n+    def test_violation_error_code_in_clone(self):\n+        constraint = BaseConstraint(\n+            name=\"test_constraint\",\n+            violation_error_message=\"custom %(name)s message\",\n+            # Assuming the feature is added allowing direct assignment in constructor:\n+            violation_error_code=\"clone_code\"\n+        ).clone()\n+        self.assertEqual(constraint.violation_error_code, \"clone_code\")\n+\n class CheckConstraintTests(TestCase):\n     def test_eq(self):\n         check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n",
  "django__django-16569": "",
  "django__django-16595": "",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..866190d 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8464,6 +8464,41 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_multiple_query_params(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=123&name=test\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=123&name=test\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+    @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_script_name(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..416484c 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,22 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+    \n+    def test_brotli_and_compress_mime_types(self):\n+        \"\"\"\n+        Test that files with \".br\" and \".Z\" extensions are given the correct\n+        MIME types: \"application/x-brotli\" and \"application/x-compress\", respectively.\n+        \"\"\"\n+        test_tuples = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..c10a380 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -144,6 +144,59 @@ class ModelAdminTests(TestCase):\n                 \"employee__department__code\",\n             ]\n \n+    def test_lookup_allowed_foreign_primary(self):\n+        \"\"\"Test that lookup_allowed behaves correctly with foreign keys as primary keys.\"\"\"\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n+    def test_lookup_disallowed_when_not_in_list_filter(self):\n+        \"\"\"Test that lookup_allowed returns False for disallowed fields.\"\"\"\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__population\", \"test_value\"), False)\n+\n         ma = EmployeeProfileAdmin(EmployeeProfile, self.site)\n         # Reverse OneToOneField\n         self.assertIs(\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..ad990e3 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -921,8 +921,36 @@ class WriterTests(SimpleTestCase):\n             \"import datetime\\nfrom django.db import migrations, models\\n\",\n             output,\n         )\n-\n-    def test_migration_file_header_comments(self):\n+    \n+    def test_sorted_imports_with_additional_imports(self):\n+        \"\"\"\n+        Test that newly generated migrations have import statements sorted correctly\n+        when there are multiple imports.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield\",\n+                        models.DateTimeField(default=datetime.datetime.now),\n+                    ),\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..666587c 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -791,6 +791,21 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n \n+    def test_nonexistent_field_with_name_in_error(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"title\", \"nonexistent\")\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n     def test_nonexistent_field(self):\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"title\", \"nonexistent\")\n@@ -806,6 +821,22 @@ class SystemChecksTestCase(SimpleTestCase):\n         ]\n         self.assertEqual(errors, expected)\n \n+    def test_nonexistent_field_on_inline_with_name_in_error(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"i_dont_exist\"]\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n+                \"not a callable, an attribute of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n     def test_nonexistent_field_on_inline(self):\n         class CityInline(admin.TabularInline):\n             model = City\n",
  "django__django-16901": "",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..7e84f51 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -456,7 +456,32 @@ class WriterTests(SimpleTestCase):\n             \"default=datetime.date(1969, 11, 19))\",\n         )\n \n-    def test_serialize_nested_class(self):\n+    def test_serialize_nested_class_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default,\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        serialized_field, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            serialized_field,\n+            \"django.contrib.postgres.fields.ArrayField(\"\n+            \"base_field=models.CharField(choices=[('BASIC', 'Basic'), \"\n+            \"('PROFESSIONAL', 'Professional')], blank=True, max_length=30), \"\n+            \"null=True, default=migrations.test_writer.Profile.Capability.default)\"\n+        )\n+        self.assertIn('import migrations.test_writer', imports)\n         for nested_cls in [self.NestedEnum, self.NestedChoices]:\n             cls_name = nested_cls.__name__\n             with self.subTest(cls_name):\n@@ -1032,4 +1057,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-7530": "",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..37a3039 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,8 +297,33 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+class PaginatorTests(TestCase):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n \n-class ModelPaginationTests(TestCase):\n+    def test_paginator_iteration_empty(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_multiple_pages(self):\n+        paginator = Paginator([1, 2, 3, 4, 5, 6], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3, 4], [5, 6]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_iteration_items_equal_to_page_size(self):\n+        paginator = Paginator([1, 2], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2],), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n     \"\"\"\n     Test pagination with Django model instances\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..125ae19 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,36 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_multiple_datasets():\n+    # Test with multiple datasets\n+    data1 = np.random.rand(10)\n+    data2 = np.random.rand(20)\n+    datasets = [data1, data2]\n+    _, bins, _ = plt.hist(datasets, \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_weighted():\n+    # Test with weighted dataset\n+    data = np.random.rand(10)\n+    weights = np.random.rand(10)\n+    _, bins, _ = plt.hist(data, \"auto\", range=(0, 1), density=True, weights=weights)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_density_false():\n+    # Ensure 'range' works as expected with density=False\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6396,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..67ad58e 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -918,6 +918,9 @@ def test_hexbin_log():\n     plt.colorbar(h)\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n def test_inverted_limits():\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n@@ -939,7 +942,21 @@ def test_inverted_limits():\n     plt.close()\n \n \n-@image_comparison(baseline_images=['nonfinite_limits'])\n+def test_invert_log_yscale():\n+    # Test inverting a logarithmic y-axis by explicitly setting its limits.\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)  # Attempt to invert, expecting (10, 1) due to set_ylim\n+    assert ax.get_ylim() == (10, 1), \"Log scale y-axis was not inverted as expected\"\n+    plt.close(fig)\n+\n+def test_invert_linear_yscale():\n+    # Test inverting a linear y-axis by explicitly setting its limits.\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"linear\")\n+    ax.set_ylim(10, 1)  # Attempt to invert, expecting (10, 1) due to set_ylim\n+    assert ax.get_ylim() == (10, 1), \"Linear scale y-axis was not inverted as expected\"\n+    plt.close(fig)\n def test_nonfinite_limits():\n     x = np.arange(0., np.e, 0.01)\n     # silence divide by zero warning from log(0)\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..ad90bf4 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,49 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    # Original test to compare\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+def test_shared_axes_ticks_after_clear():\n+    # New test to verify that shared axes still behave as expected after clear\n+    fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n+\n+    for ax in axs.flat:\n+        ax.plot([0, 1], [0, 1])\n+    \n+    # Clear and re-plot\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot([0, 1], [0, 1])\n+\n+    # Ensure that axes limits are still synchronized\n+    axs[0, 0].set_xlim(-0.5, 1.5)\n+    for ax in axs.flat:\n+        assert ax.get_xlim() == axs[0, 0].get_xlim()\n+\n+    axs[0, 0].set_ylim(-0.5, 1.5)\n+    for ax in axs.flat:\n+        assert ax.get_ylim() == axs[0, 0].get_ylim()\n+\n+    # Check that tick labels are correctly hidden where they should be\n+    for i, ax in enumerate(axs.flat):\n+        if i % 2 == 1:  # Right column\n+            assert not ax.get_yticklabels(which='both')\n+        if i >= 2:  # Bottom row\n+            assert not ax.get_xticklabels(which='both')\n+\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..6378a63 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -306,9 +306,22 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert x_units is ax.xaxis.units\n         assert y_units is ax.yaxis.units\n \n-\n-def test_hist():\n+def test_empty_plot_no_deprecation_warning():\n+    \"\"\"\n+    Test to ensure no deprecation warning is emitted when plotting empty data\n+    on an axis with category units.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    import warnings\n+\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        fig, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+        # Check that no MatplotlibDeprecationWarning was triggered\n+        assert all(not issubclass(warn.category, MatplotlibDeprecationWarning) for warn in w)\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..28ff033 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -918,8 +918,34 @@ def test_proportional_colorbars():\n                                      extend=extends[i])\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n+import pytest\n \n-def test_negative_boundarynorm():\n+@pytest.mark.parametrize(\"extend, coloroffset, res\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, res):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                    drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), res))\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n \n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..909c9cd 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,13 +15,23 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n \n \n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n-\n-\n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d_projection(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax2 = fig_test.add_subplot(122, projection='3d')\n+    ax1.scatter(1, 1, 1)\n+    ax2.scatter(1, 1, 1, c='r')\n+    ax1.set_visible(False)\n+\n+    # For reference figure, ax1 is not drawn\n+    ax1_ref = fig_ref.add_subplot(121, projection='3d')\n+    ax2_ref = fig_ref.add_subplot(122, projection='3d')\n+    ax2_ref.scatter(1, 1, 1, c='r')\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..f1a3f95 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -156,8 +156,25 @@ def test_negative_rect():\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n+import matplotlib.pyplot as plt\n+import matplotlib.patches as patches\n+from matplotlib.testing.decorators import image_comparison\n \n-@image_comparison(['clip_to_bbox'])\n+@image_comparison(['test_dash_offset_patch_draw'])\n+def test_dash_offset_patch_draw():\n+    fig, ax = plt.subplots()\n+    # Rectangle with no offset\n+    rect1 = patches.Rectangle(\n+        (0.1, 0.1), 0.3, 0.5, linewidth=3, edgecolor='b', linestyle=(0, [6, 6])\n+    )\n+    # Rectangle with offset\n+    rect2 = patches.Rectangle(\n+        (0.5, 0.1), 0.3, 0.5, linewidth=3, edgecolor='r', linestyle=(6, [6, 6])\n+    )\n+    ax.add_patch(rect1)\n+    ax.add_patch(rect2)\n+    ax.set_xlim(0, 1)\n+    ax.set_ylim(0, 1)\n def test_clip_to_bbox():\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..7b06604 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,23 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+def test_stackplot_color_cycler():\n+    # Test that stackplot does not raise a ValueError when using color cycler\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    # Use color cycler for consistency across different plot types\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    try:\n+        ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+        plt.close(fig)\n+    except ValueError:\n+        plt.close(fig)\n+        raise AssertionError(\"stackplot raised ValueError with color cycler.\")\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..5c41221 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -11,6 +11,7 @@ import matplotlib.patches as mpatches\n import matplotlib.lines as mlines\n from matplotlib.backend_bases import MouseButton, MouseEvent\n \n+from matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea, Rectangle\n from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n     OffsetImage, TextArea, _get_packed_offsets)\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..9f1aba2 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,28 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from numpy.testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\"dtype, value\", [\n+    (np.uint8, 257), # out of bound for uint8\n+    (np.uint8, 256), # out of bound for uint8\n+    (np.uint8, 258), # out of bound for uint8\n+    (int, -1),       # negative value\n+    (np.float32, 0.5), # valid float\n+    (float, 1e10)     # large float, check clipping\n+])\n+def test_deprecation_warnings(dtype, value):\n+    cm = plt.get_cmap(\"viridis\")\n+    with np.testing.suppress_warnings() as sup:\n+        sup.filter(DeprecationWarning)\n+        result = cm(np.array([value], dtype=dtype))\n+        # Assert that the result is an array of the expected shape\n+        assert result.shape == (1, 4)\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..accbd7c 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,35 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    ax.get_figure().canvas.draw()  # Ensure the figure is drawn\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    ax.get_figure().canvas.draw()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    ax.get_figure().canvas.draw()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    ax.get_figure().canvas.draw()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..9909212 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -76,6 +77,25 @@ def _generate_complete_test_figure(fig_ref):\n     ax.set_xlim(0, 7)\n     ax.set_ylim(0, 9)\n     plt.streamplot(x, y, u, v)\n+    \n+def test_figure_pickle_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 4], label='Data')\n+    legend = ax.legend()\n+    legend.set_draggable(True)\n+\n+    # Pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Check the pickle does not contain FigureCanvasQTAgg\n+    import pickletools\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Unpickle the figure and verify it loads without error\n+    fig_loaded = pickle.loads(pkl)\n+    fig_loaded.canvas.draw()  # Ensure the figure can be drawn without issue\n+\n+    plt.close(fig_loaded)\n \n     ax = plt.subplot(3, 3, 7)\n     ax.set_xlim(0, 7)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..f23e7bc 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -105,8 +105,31 @@ def test_complete(fig_test, fig_ref):\n \n     plt.close(loaded)\n \n+def test_pickle_figure_with_aligned_labels():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n \n-def _pickle_load_subprocess():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Attempt to pickle and unpickle the figure\n+    fig_file = BytesIO()\n+    pickle.dump(fig, fig_file, protocol=pickle.HIGHEST_PROTOCOL)\n+    fig_file.seek(0)\n+    loaded_fig = pickle.load(fig_file)\n+    assert loaded_fig is not None\n+    plt.close(loaded_fig)\n     import os\n     import pickle\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..f21a4fa 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,46 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_hexbin_log_clim():\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # Test consistency of mincnt when C is or isn't provided\n+    # See: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/collections.py b/lib/matplotlib/collections.py\nindex 37c6dcb..8589ba2 100644\n--- a/lib/matplotlib/collections.py\n+++ b/lib/matplotlib/collections.py\n@@ -207,7 +207,7 @@ class Collection(artist.Artist, cm.ScalarMappable):\n         return self._paths\n \n     def set_paths(self, paths):\n-        raise NotImplementedError\n+        self._paths = paths\n \n     def get_transforms(self):\n         return self._transforms\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..459736d 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,9 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 4ec0f7c..27cff3f 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -296,6 +296,23 @@ class Session(SessionRedirectMixin):\n         )\n         return p\n \n+def test_headers_on_session_with_undefined_none_are_not_sent():\n+    \"\"\"Do not send headers in Session.headers explicitly set to None.\"\"\"\n+    ses = requests.Session()\n+    ses.headers['User-Agent'] = None  # Setting another header to None\n+    req = requests.Request('GET', 'http://httpbin.org/get')\n+    prep = ses.prepare_request(req)\n+    assert 'User-Agent' not in prep.headers  # Ensure User-Agent is not sent\n+\n+def test_remove_header_and_ensure_not_sent():\n+    \"\"\"Ensure a header removed using del is not sent.\"\"\"\n+    ses = requests.Session()\n+    ses.headers['Custom-Header'] = 'TestValue'\n+    del ses.headers['Custom-Header']  # Remove the Custom-Header\n+    req = requests.Request('GET', 'http://httpbin.org/get')\n+    prep = ses.prepare_request(req)\n+    assert 'Custom-Header' not in prep.headers  # Ensure Custom-Header is not sent\n+\n     def request(self, method, url,\n         params=None,\n         data=None,\n",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..689cdba 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,10 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),  # Test for issue with leading dot\n+            (InvalidURL, 'http:///example.com'),  # Test for missing host\n+            (InvalidURL, 'http://???.com'),       # Test for invalid characters\n+            (InvalidURL, 'http://*.example.com')  # Test for wildcard in host\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..a747a3e 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,25 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_setitem_with_object_containing_values():\n+    import numpy as np\n+    import xarray as xr\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    # Setup the test arrays\n+    good_indexed = xr.DataArray([None])\n+    bad_indexed = xr.DataArray([None])\n+\n+    # Define a class with a 'values' attribute\n+    class HasValues:\n+        values = 5\n+\n+    # Assign a set to good_indexed and a HasValues instance to bad_indexed\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Check the output is as expected\n+    assert isinstance(good_indexed.values[0], set), \"good_indexed should store a set\"\n+    assert isinstance(bad_indexed.values[0], HasValues), \"bad_indexed should store a HasValues instance\"\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..8383247 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2069,6 +2069,28 @@ class TestDataset:\n \n             assert data.attrs['Test'] is not copied.attrs['Test']\n \n+    def test_copy_unicode_index(self):\n+        # Create a Dataset with unicode coordinates and data\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+\n+        # Test deep copy\n+        ds_deep_copy = ds.copy(deep=True)\n+\n+        # Assert that the dtype of coordinate 'x' remains '<U3' after deep copy\n+        assert ds.coords['x'].dtype.kind == ds_deep_copy.coords['x'].dtype.kind == 'U'\n+        assert ds_deep_copy.coords['x'].dtype == '<U3'\n+\n+        # Assert that other variables remain unchanged\n+        assert_identical(ds, ds_deep_copy)\n+\n+        # Test shallow copy\n+        ds_shallow_copy = ds.copy(deep=False)\n+        assert ds.coords['x'].dtype.kind == ds_shallow_copy.coords['x'].dtype.kind == 'U'\n+        assert ds_shallow_copy.coords['x'].dtype == '<U3'\n+\n     def test_copy_with_data(self):\n         orig = create_test_data()\n         new_data = {k: np.random.randn(*v.shape)\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..e398875 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,7 +611,25 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n-    def test_check_for_impossible_ordering(self):\n+    def test_combine_by_coords_non_monotonic_identical_coords(self):\n+        # This test checks the resolution of the issue\n+        # Test with non-monotonic but identical y-coords\n+        ycoord = ['a', 'c', 'b']\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data1)),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data2)),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected_data = np.concatenate([data1, data2], axis=0)\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], expected_data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n         with raises_regex(ValueError, \"does not have monotonic global indexes\"\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..dfe6abb 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,6 +2310,26 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n+    def test_quantile_keep_attrs(self):\n+        # Original test from issue description\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        out = da.quantile(.9, dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}\n+\n+        # Test with different dimensions and multiple quantiles\n+        da2 = xr.DataArray([[0, 1], [2, 3]], dims=[\"x\", \"y\"], attrs={'description': 'test array'})\n+        result = da2.quantile([0.5, 0.9], dim='x', keep_attrs=True)\n+        assert result.attrs == {'description': 'test array'}\n+\n+        # Test with no attributes\n+        da3 = xr.DataArray([0, 0], dims=\"x\")\n+        result_no_attrs = da3.quantile(.5, dim='x', keep_attrs=True)\n+        assert result_no_attrs.attrs == {}\n+\n+        # Test with keep_attrs=False, should not retain attributes\n+        result_no_attrs_kept = da2.quantile(.5, dim='x', keep_attrs=False)\n+        assert result_no_attrs_kept.attrs == {}\n+\n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..a0ef975 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,8 +1,10 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -159,6 +161,23 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        expected = xr.merge([ds, da])\n+\n+        # Test that Dataset.merge correctly merges a DataArray\n+        actual = ds.merge(da)\n+        assert_identical(actual, expected)\n+\n+        # Test merging where DataArray has coordinates\n+        da_with_coords = xr.DataArray(data=2, dims=\"x\", coords={\"x\": [0, 1]}, name=\"c\")\n+        ds_with_coords = xr.Dataset({\"b\": (\"x\", [3, 4])}, coords={\"x\": [0, 1]})\n+        expected_with_coords = xr.merge([ds_with_coords, da_with_coords])\n+\n+        actual_with_coords = ds_with_coords.merge(da_with_coords)\n+        assert_identical(actual_with_coords, expected_with_coords)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..6a34245 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,26 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy_multiple(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0, \"y\": 1})\n+        ds2 = xr.Dataset(attrs={\"x\": 1, \"z\": 2})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        ds3.attrs[\"y\"] = 3\n+        ds3.attrs[\"z\"] = 4\n+        assert ds1.attrs == {\"x\": 0, \"y\": 1}\n+        assert ds2.attrs == {\"x\": 1, \"z\": 2}\n+        assert ds3.attrs == {\"x\": 2, \"y\": 3, \"z\": 4}\n+        \n+    def test_merge_attrs_override_copy_no_attrs(self):\n+        ds1 = xr.Dataset()\n+        ds2 = xr.Dataset()\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"new_attr\"] = 123\n+        assert ds1.attrs == {}\n+        assert ds2.attrs == {}\n+        assert ds3.attrs == {\"new_attr\": 123}\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..c78ca55 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1915,6 +1915,15 @@ def test_dot_align_coords(use_dask) -> None:\n         xr.testing.assert_allclose(expected, actual)\n \n \n+def test_where_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+\n def test_where() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\")\n     actual = xr.where(cond, 1, 0)\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..ed6f9de 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,8 +13,19 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+import numpy as np\n \n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"dtype,expected_dtype,expected_values,_Unsigned\", [\n+    (np.dtype(\"i1\"), np.dtype(\"u1\"), np.array([255], dtype=np.uint8), \"true\"),\n+    (np.dtype(\"i1\"), np.dtype(\"i1\"), np.array([-1], dtype=np.int8), \"false\"),\n+])\n+def test_handle_signed_unsigned_bytes(dtype, expected_dtype, expected_values, _Unsigned):\n+    data = np.array([-1], dtype=dtype)\n+    encoded = xr.Variable((\"x\",), data, attrs={\"_Unsigned\": _Unsigned})\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == expected_dtype\n+    assert np.array_equal(decoded.values, expected_values)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..2b5debc 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1920,6 +1920,25 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_scalar_and_attrs() -> None:\n+    # ensure keep_attrs can handle scalar values as second argument\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    # ensure keep_attrs can handle scalar with attributes\n+    x = xr.DataArray([1, 2, 3], dims=\"x\", attrs={\"attr\": \"x\"})\n+    actual = xr.where(cond, x, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 3], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # testing for case when y is scalar and keep_attrs=True\n+    y = xr.DataArray([0, 0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, 1, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"y\"})\n+    assert_identical(expected, actual)\n+\n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..381ab8f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,14 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..2bd8bfe 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,6 +688,41 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n+import pytest\n+import numpy as np\n+import xarray as xr\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"int64\", \"float64\"])\n+def test_restore_dtype_on_multiindexes_more_dtypes(dtype: str) -> None:\n+    # Create a Dataset with a coordinate of a specific dtype\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    # Stack the Dataset\n+    foo = foo.stack(baz=(\"bar\",))\n+    # Assert that the dtype is preserved after stacking\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_stack_preserve_dtype_simple(dtype: str) -> None:\n+    # Create a dataset with one coordinate\n+    ds = xr.Dataset(coords={\"a\": np.array([0, 1, 2], dtype=dtype)})\n+    # Stack the dataset on itself\n+    stacked = ds.stack(b=(\"a\",))\n+    # Check if the dtype of coordinate 'a' is preserved\n+    assert ds[\"a\"].dtype == stacked[\"a\"].dtype\n+\n+@pytest.mark.parametrize(\"dtypes\", [(\"int32\", \"float32\"), (\"float32\", \"int32\")])\n+def test_stack_preserve_dtype_mixed(dtypes: tuple) -> None:\n+    # Create a dataset with coordinates of different dtypes\n+    ds = xr.Dataset(coords={\n+        \"a\": np.array([0, 1, 2], dtype=dtypes[0]),\n+        \"b\": np.array([3, 4, 5], dtype=dtypes[1])\n+    })\n+    # Stack the dataset\n+    stacked = ds.stack(c=(\"a\", \"b\"))\n+    # Check if the dtypes of coordinates 'a' and 'b' are preserved\n+    assert ds[\"a\"].dtype == stacked[\"a\"].dtype\n+    assert ds[\"b\"].dtype == stacked[\"b\"].dtype\n+\n # Test that datetime.datetime objects are never used in a CFTimeIndex\n @requires_cftime\n def test_safe_cast_to_index_datetime_datetime():\n@@ -696,4 +731,4 @@ def test_safe_cast_to_index_datetime_datetime():\n     expected = pd.Index(dates)\n     actual = safe_cast_to_index(np.array(dates))\n     assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+    assert isinstance(actual, pd.Index)\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..946281a 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,27 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from __future__ import annotations\n+import pytest\n+from pylint.lint import Run\n+\n+EMPTY_MODULE = 'some_empty_module.py'  # Assuming this is how EMPTY_MODULE is defined\n+\n+def test_short_verbose_no_argument(capsys: pytest.CaptureFixture) -> None:\n+    \"\"\"Test that the short verbose option -v does not require an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose_no_argument(capsys: pytest.CaptureFixture) -> None:\n+    \"\"\"Test that the long verbose option --verbose does not require an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..2139f92 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,51 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    def test_recursive_ignores(self):\n+        \"\"\"Tests that Pylint respects various ignore settings in recursive mode.\"\"\"\n+\n+        # Test using --ignore to skip a specific file\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+            ],\n+            code=0,\n+        )\n+\n+        # Test using --ignore-patterns to skip specific patterns\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=ignored_.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        # Test using --ignore-paths to skip specific paths\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*ignored_subdirectory.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        # Test edge case with empty ignore settings to ensure default behavior\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=\",\n+                \"--ignore-patterns=\",\n+                \"--ignore-paths=\",\n+            ],\n+            code=0,\n+        )\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..99cb355 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1329,8 +1329,43 @@ class TestRunTC:\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n                 )\n+    \n+    def test_ignore_paths_with_recursive_option(self):\n+        \"\"\"Test that ignore-paths are respected with the --recursive=y option.\"\"\"\n+        with _test_sys_path():\n+            # Exclude 'regrtest_data', which is added by pytest\n+            sys.path = [\n+                path for path in sys.path if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Go to a directory where we can test ignored paths\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n \n-    def test_regression_recursive_current_dir(self):\n+    def test_ignore_paths_with_recursive_option_absolute(self):\n+        \"\"\"A variation using an absolute path\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path for path in sys.path if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # This time let's try an absolute path\n+                ignored_path = os.path.abspath(join(\"regrtest_data\", \"directory\", \"subdirectory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        f\"--ignore-paths=^{re.escape(ignored_path)}.*\",\n+                    ],\n+                    code=0,\n+                )\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n             # astroid to believe that directory is a package.\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..6801a16 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -171,6 +171,27 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     # This reaches into private API, don't use this type of thing in real tests!\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n+def test_caplog_clear_resets_records(caplog):\n+    logger = logging.getLogger()\n+\n+    # Verify initial state\n+    assert not caplog.records\n+    assert not caplog.get_records(\"call\")\n+\n+    # Log a message during \"call\" stage\n+    logger.info(\"log_before_clear\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"log_before_clear\"]\n+\n+    # Clear logs and verify\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+\n+    # Log another message and verify\n+    logger.info(\"log_after_clear\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"log_after_clear\"]\n+\n+    # Verify caplog.records is consistent with get_records\n+    assert caplog.records == caplog.get_records(\"call\")\n \n def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n     pytester.makepyfile(\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..d9a5218 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1269,10 +1269,16 @@ def test_pdb_teardown_skipped(\n             mark=mark\n         )\n     )\n+\n+    # Test case for verifying unittest.skip at class level\n     result = pytester.runpytest_inprocess(\"--pdb\")\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+    # Verify no setUp or tearDown was called\n+    tracked = []\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    assert tracked == []\n \n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..aaa9547 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1050,10 +1050,27 @@ class TestFDCapture(object):\n             cap.suspend()\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n+import sys\n \n+def test_capfd_encodedfile_write_str(capfd):\n+    original_stdout = sys.stdout\n+    try:\n+        sys.stdout = _pytest.capture.EncodedFile(sys.stdout.buffer, encoding='utf-8')\n+        sys.stdout.write(\"hello world\\n\")\n+    finally:\n+        sys.stdout = original_stdout\n \n-@contextlib.contextmanager\n-def saved_fd(fd):\n+    captured = capfd.readouterr()\n+    assert captured.out == \"hello world\\n\"\n+\n+def test_capfd_encodedfile_write_bytes_raises(capfd):\n+    original_stdout = sys.stdout\n+    try:\n+        sys.stdout = _pytest.capture.EncodedFile(sys.stdout.buffer, encoding='utf-8')\n+        with pytest.raises(TypeError, match=\"write() argument must be str, not bytes\"):\n+            sys.stdout.write(b\"hello world\\n\")\n+    finally:\n+        sys.stdout = original_stdout\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..518af94 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,6 +178,25 @@ class TestMockDecoration:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n+    def test_mock_patch_with_numpy_array(self, testdir):\n+        # Testing the issue with patching an array to ensure the previous ValueError is fixed.\n+        testdir.makepyfile(\n+            \"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+\n+            class TestPatchWithArray:\n+                @patch('numpy.array', new=np.array([-5.5, 3.0]))\n+                def test_numpy_patch(self):\n+                    import numpy as np\n+                    patched_array = np.array([-5.5, 3.0])\n+                    assert patched_array[0] == -5.5\n+                    assert patched_array[1] == 3.0\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=2)\n+\n     def test_mock(self, testdir):\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..3a91d10 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -126,8 +126,20 @@ class TestPaste(object):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n+        lexer = \"text\"\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n+\n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        \"\"\"Test paste creation with text lexer to avoid HTTP 400 errors.\"\"\"\n+        result = pastebin.create_new_paste(b\"test-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=test-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..0baa59e 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -688,19 +688,29 @@ class Test_genitems:\n             def testone():\n                 pass\n \n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(self, arg0):\n+                pass\n+\n             class TestX(object):\n                 def testmethod_one(self):\n                     pass\n \n             class TestY(TestX):\n                 pass\n+\n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_two(self, arg0):\n+                pass\n         \"\"\"\n         )\n         items, reprec = testdir.inline_genitems(p)\n-        assert len(items) == 3\n+        assert len(items) == 4\n         assert items[0].name == \"testone\"\n         assert items[1].name == \"testmethod_one\"\n         assert items[2].name == \"testmethod_one\"\n+        assert items[3].name == \"testmethod_two[.[]\"\n+        assert items[3].getmodpath() == \"TestY.testmethod_two[.[]\"\n \n         # let's also test getmodpath here\n         assert items[0].getmodpath() == \"testone\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..e5a789a 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..4813ed3 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -153,7 +154,47 @@ class TestEvaluation:\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n \n+from _pytest.pytester import Testdir\n+\n class TestXFail:\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed(self, testdir: Testdir) -> None:\n+        # Verify behavior when test passes despite an xfail marker being added.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 1\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xpassed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                assert 1\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..26020c8 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -514,6 +514,12 @@ class TestCaptureFixture:\n         )\n         reprec.assertoutcome(passed=1)\n \n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n+\n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..dce28b7 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,7 +51,20 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n-def test_with_statement(caplog):\n+def test_handler_level_reset_between_tests(testdir):\n+    \"\"\"Ensure that the handler's log level is reset between tests.\"\"\"\n+    \n+    testdir.makepyfile(\n+        \"\"\"\n+        def test_foo(caplog):\n+            caplog.set_level(42)\n+\n+        def test_bar(caplog):\n+            assert caplog.handler.level == 0\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..010af98 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,4 +1,31 @@\n+\n import os\n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n+def test_symlink_to_empty_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlink to an empty directory should not collect any tests.\"\"\"\n+    empty_dir = pytester.mkdir(\"empty_dir\")\n+    pytester.path.joinpath(\"symlink_empty_dir\").symlink_to(empty_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=0, errors=0, failed=0)\n+\n+\n+def test_symlink_to_nested_dirs(pytester: Pytester) -> None:\n+    \"\"\"A symlink to a nested directory structure should collect all tests.\"\"\"\n+    parent_dir = pytester.mkdir(\"parent_dir\")\n+    nested_dir = parent_dir.mkdir(\"nested_dir\")\n+    nested_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_nested\").symlink_to(parent_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=1)\n+\n import pprint\n import sys\n import textwrap\n@@ -9,7 +36,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..5f16c59 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,29 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_fixtures_unittest_setUpClass_visibility_issue(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class TestClass(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            def test_sample(self):\n+                pass\n+        \"\"\"\n+    )\n+    # Test without verbosity, the fixture should not appear\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_TestClass*\")\n+\n+    # Test with verbosity, the fixture should appear\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_TestClass*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..12a330f 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,6 +597,33 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    from sklearn.linear_model import RidgeClassifierCV\n+    import numpy as np\n+    from numpy.testing import assert_equal\n+    \n+    rng = np.random.RandomState(42)\n+\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    y = rng.choice([1, -1], size=n_samples)  # binary classification target\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_alphas))\n+\n+    # with multi-target len(y.shape) == 2\n+    n_targets = 3\n+    y = rng.choice([1, -1], size=(n_samples, n_targets))\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_targets, n_alphas))\n+\n \n def test_ridgecv_sample_weight():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..139e2af 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,15 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_fowlkes_mallows_score_large_inputs():\n+    # Test Fowlkes Mallows Score with large inputs to check for overflow issues\n+    labels_true = np.array([0] * 100000 + [1] * 100000)\n+    labels_pred = np.array([0, 1] * 100000)  # Alternate between two clusters\n+    \n+    # Expecting a valid score in the range [0, 1], no overflow or warnings\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert 0 <= score <= 1, \"Score out of expected range.\"\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..71c61e6 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,16 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+def test_countvectorizer_get_feature_names_with_custom_vocabulary():\n+    # Define a custom vocabulary\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocabulary)\n+    \n+    # Ensure get_feature_names does not raise an error\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(\n+        vocabulary, feature_names\n+    )\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..313971e 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1159,18 +1159,37 @@ def test_search_cv_timing():\n     gs = GridSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0)\n     rs = RandomizedSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, n_iter=2)\n \n+    X, y = np.random.rand(100, 10), np.random.randint(0, 2, size=100)\n+\n     for search in (gs, rs):\n+        start_total_time = time.time()\n         search.fit(X, y)\n         for key in ['mean_fit_time', 'std_fit_time']:\n             # NOTE The precision of time.time in windows is not high\n             # enough for the fit/score times to be non-zero for trivial X and y\n             assert_true(np.all(search.cv_results_[key] >= 0))\n             assert_true(np.all(search.cv_results_[key] < 1))\n+        \n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n+        total_time = time.time() - start_total_time\n+\n+        # Ensure that total search time is greater than refit time\n+        assert_true(total_time > search.refit_time_)\n \n         for key in ['mean_score_time', 'std_score_time']:\n             assert_true(search.cv_results_[key][1] >= 0)\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n+        \n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n+        total_time = time.time() - start_total_time\n+\n+        # Ensure that total search time is greater than refit time\n+        assert_true(total_time > search.refit_time_)\n \n \n def test_grid_search_correct_score_results():\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..3064eb2 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,6 +21,7 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.metrics.scorer import get_scorer\n \n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n@@ -491,8 +492,37 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          # no need to test for micro averaging because it\n+                          # is the same as accuracy for f1, precision,\n+                          # and recall (see https://github.com/\n+                          # scikit-learn/scikit-learn/pull/\n+                          # 11578#discussion_r203250062)\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..f22a4e7 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,6 +154,23 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n+from sklearn.base import BaseEstimator, clone\n+\n+class MyEstimator(BaseEstimator):\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    from sklearn.preprocessing import StandardScaler\n+    \n+    # Create an estimator with a parameter that is an estimator class\n+    clf = MyEstimator(empty=StandardScaler)\n+    clf2 = clone(clf)\n+\n+    # Ensure the empty attribute is the same class (i.e., not an instance yet)\n+    assert clf.empty is clf2.empty\n+\n def test_clone_sparse_matrices():\n     sparse_matrix_classes = [\n         getattr(sp, name)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..9684179 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -6,6 +6,8 @@ import numpy as np\n from scipy import linalg\n \n import pytest\n+import numpy as np\n+from sklearn.linear_model.least_angle import LassoLarsIC\n \n from sklearn.model_selection import train_test_split\n from sklearn.utils.testing import assert_equal\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..410c7aa 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,8 +493,47 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+def test_random_state_effect_on_shuffling_stratifiedkfold():\n+    # Verify that different random_state values result in different shuffles\n \n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+    X = np.arange(20)  # 20 samples\n+    y = np.array([0]*10 + [1]*10)  # perfectly balanced classes\n+\n+    # Create two StratifiedKFold instances with the same number of splits but different random states\n+    skf1 = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n+    skf2 = StratifiedKFold(n_splits=10, shuffle=True, random_state=43)\n+\n+    # Collect the test indices from splits\n+    test_indices1 = [test_idx for _, test_idx in skf1.split(X, y)]\n+    test_indices2 = [test_idx for _, test_idx in skf2.split(X, y)]\n+\n+    # Compare each corresponding test split - for at least one pair, they should not be the same\n+    assert any(not np.array_equal(t1, t2) for t1, t2 in zip(test_indices1, test_indices2)), \\\n+        \"Test splits should differ when random_state changes.\"\n+\n+def test_shuffled_order_impact_on_stratifiedkfold():\n+    # Check that shuffling leads to different fold compositions (in terms of order)\n+    X = np.arange(20)  # 20 samples\n+    y = np.array([0]*10 + [1]*10)  # perfectly balanced classes\n+\n+    # Without shuffle\n+    skf_no_shuffle = StratifiedKFold(n_splits=10, shuffle=False)\n+    test_indices_no_shuffle = [test_idx for _, test_idx in skf_no_shuffle.split(X, y)]\n+\n+    # With shuffle\n+    skf_shuffle = StratifiedKFold(n_splits=10, shuffle=True, random_state=0)\n+    test_indices_shuffle = [test_idx for _, test_idx in skf_shuffle.split(X, y)]\n+\n+    # With a different shuffle\n+    skf_shuffle2 = StratifiedKFold(n_splits=10, shuffle=True, random_state=1)\n+    test_indices_shuffle2 = [test_idx for _, test_idx in skf_shuffle2.split(X, y)]\n+\n+    # Test if shuffling changes the fold compositions (not just their order)\n+    assert test_indices_no_shuffle != test_indices_shuffle, \\\n+        \"Shuffling should lead to different fold compositions.\"\n+\n+    assert test_indices_shuffle != test_indices_shuffle2, \\\n+        \"Different random states should result in different shuffling.\"\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..a7d3f31 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -189,7 +189,12 @@ def test_invalid_strategy_option():\n     [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n      ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n      ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+@pytest.mark.parametrize(\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..42710f6 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,17 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+from sklearn.mixture import GaussianMixture\n+from sklearn.utils.testing import assert_array_equal\n+import numpy as np\n \n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..a603c7b 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,8 +1057,28 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n+from sklearn.pipeline import Pipeline\n+from sklearn.feature_selection import SelectKBest, f_regression\n+from sklearn.svm import SVC\n \n-def test_make_pipeline_memory():\n+def test_pipeline_len():\n+    # Create a simple pipeline and test its length\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    assert len(pipe) == 2\n+    \n+    # Test with an empty pipeline\n+    empty_pipe = Pipeline([])\n+    assert len(empty_pipe) == 0\n+\n+    # Test with a single element pipeline\n+    single_step_pipe = Pipeline([('anova', anova_filter)])\n+    assert len(single_step_pipe) == 1\n+\n+    # Test with more than two steps\n+    pipe_with_three_steps = Pipeline([('anova', anova_filter), ('svc', clf), ('anova2', SelectKBest(f_regression, k=3))])\n+    assert len(pipe_with_three_steps) == 3\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1090,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..a66e11e 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -503,7 +503,41 @@ def test_transform():\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n                               eclf2.transform(X))\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [pytest.param(\n+        *load_iris(return_X_y=True),\n+        VotingClassifier(\n+            [('lr', LogisticRegression()),\n+             ('rf', RandomForestClassifier(n_estimators=5))]\n+        )\n+    ),\n+    pytest.param(\n+        np.random.rand(100, 5),\n+        np.random.rand(100),\n+        VotingRegressor(\n+            [('lr', LinearRegression()),\n+             ('rf', RandomForestRegressor(n_estimators=5))]\n+        )\n+    )]\n+)\n+def test_none_estimator_with_weights(X, y, voter):\n+    # check that an estimator can be set to None and passing some weight\n+    # regression test for\n+    # https://github.com/scikit-learn/scikit-learn/issues/13777\n+\n+    # Initial fit with all estimators present\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+\n+    # Set one estimator to None and refit\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+\n+    # Predict and assert the shape of predictions matches that of y\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..ecb0088 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,23 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n-\n-def test_plot_tree_entropy(pyplot):\n+def test_export_text_single_feature():\n+    from sklearn.tree import DecisionTreeClassifier\n+    from sklearn.tree import export_text\n+    import numpy as np\n+    from sklearn.datasets import load_iris\n+\n+    # load the iris dataset and use only one feature\n+    X, y = load_iris(return_X_y=True)\n+    X = X[:, 0].reshape(-1, 1)  # only the first feature\n+\n+    tree = DecisionTreeClassifier()\n+    tree.fit(X, y)\n+    # attempt to export text with a single feature\n+    tree_text = export_text(tree, feature_names=['sepal_length'])\n+    print(tree_text)\n+    # we won't assert on tree_text as the format can vary,\n+    # but we assert that no IndexError is raised\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..9bd7cab 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,7 +1532,33 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n+\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_additional(penalty, multi_class):\n+    # Additional test to ensure the LogisticRegressionCV with refit=False\n+    # does not throw an IndexError\n+\n+    n_samples, n_features = 200, 3\n+    X, y = make_classification(n_samples=n_samples, n_features=n_features, random_state=0)\n+\n+    Cs = np.logspace(-4, 4, 3)\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n+                                l1_ratios=l1_ratios, multi_class=multi_class, refit=False)\n+    lrcv.fit(X, y)\n+    assert lrcv.C_ is not None\n+    assert lrcv.coef_ is not None\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_ is not None\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..3e4af62 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,41 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+from sklearn.cluster import OPTICS\n+import numpy as np\n+from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils import shuffle\n+\n+def test_optics_with_float_min_samples():\n+    # Test that a float value for min_samples is handled correctly\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 50\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * n_points_per_cluster, [1] * n_points_per_cluster, [2] * n_points_per_cluster]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Using a float for min_samples\n+    clust = OPTICS(min_samples=0.05, min_cluster_size=0.05, max_eps=20, cluster_method='xi', xi=0.05).fit(X)\n+    \n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+def test_optics_edge_cases_min_samples():\n+    # Test edge cases for min_samples as floats\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(100, 2)\n+\n+    # min_samples as a very small float\n+    clust = OPTICS(min_samples=0.01, min_cluster_size=0.02).fit(X)\n+    assert clust is not None, \"OPTICS failed with very small float min_samples\"\n \n-def test_extract_xi():\n+    # min_samples as a large float\n+    clust = OPTICS(min_samples=0.99, min_cluster_size=0.05).fit(X)\n+    assert clust is not None, \"OPTICS failed with very large float min_samples\"\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..cf82476 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -92,7 +92,20 @@ def test_strip_accents():\n     expected = '\\u0627'  # simple alef: \u0627\n     assert strip_accents_unicode(a) == expected\n \n-    # mix letters accentuated and not\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaeresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # grave, acute, circumflex, tilde\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaeresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n     a = \"this is \u00e0 test\"\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..2d0d7e5 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,37 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n-\n-def test_get_support():\n+def test_output_dataframe_preserve_dtypes():\n+    \"\"\"Check that transformers preserve input dtypes when output is a DataFrame.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    # Create a DataFrame with various dtypes\n+    X = pd.DataFrame(\n+        {\n+            \"float32_col\": pd.Series([1.0, 2.4, 3.3], dtype=np.float32),\n+            \"category_col\": pd.Series([\"a\", \"b\", \"a\"], dtype=\"category\"),\n+            \"int32_col\": pd.Series([1, 2, 3], dtype=np.int32)\n+        }\n+    )\n+\n+    # Using a dummy StepSelector for testing\n+    # Assuming StepSelector or similar is defined to retain every step-th column\n+    sel = StepSelector(step=1).set_output(transform=\"pandas\")\n+    sel.fit(X)\n+\n+    output = sel.transform(X)\n+    for name, dtype in output.dtypes.items():\n+        assert dtype == X.dtypes[name], f\"Dtype mismatch for column '{name}'\"\n+\n+    # Test case where no features are selected\n+    sel0 = StepSelector(step=0).set_output(transform=\"pandas\")\n+    sel0.fit(X)\n+\n+    with pytest.warns(UserWarning, match=\"No features were selected\"):\n+        output0 = sel0.transform(X)\n+\n+    assert output0.shape == (X.shape[0], 0)\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..be3190a 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -331,6 +331,35 @@ def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n     model = IsolationForest()\n+\n+def test_iforest_preserve_feature_names_non_auto():\n+    \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+    Feature names are required for consistency checks during scoring.\n+    Non-regression test for Issue #25844\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    import numpy as np\n+    import warnings\n+    from sklearn.ensemble import IsolationForest\n+    \n+    rng = np.random.RandomState(0)\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+def test_iforest_default_contamination():\n+    \"\"\"Check that no warning is raised when contamination is set to 'auto'.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    import numpy as np\n+    from sklearn.ensemble import IsolationForest\n+    \n+    rng = np.random.RandomState(0)\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=\"auto\")\n+    with warnings.catch_warnings(record=True) as w:\n+        model.fit(X)\n+    assert len(w) == 0\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +367,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..ef5c5b5 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -13,6 +13,40 @@ from sklearn.utils._testing import assert_array_equal\n from sklearn.utils._testing import assert_allclose_dense_sparse\n from sklearn.utils._testing import assert_almost_equal\n \n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for the reported issue.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    # Test case with remainder as an estimator\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+    # Additional test case where remainder is set but not an estimator\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=\"passthrough\",\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.compose import (\n     ColumnTransformer,\n@@ -22,6 +56,11 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n+from sklearn.compose import make_column_selector\n+import pandas as pd\n+import pytest\n+import numpy as np\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..120fb36 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -14,6 +15,8 @@ from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.cluster import KMeans\n+from sklearn.datasets import make_blobs\n from sklearn.utils.testing import if_safe_multiprocessing_with_blas\n from sklearn.utils.testing import assert_raise_message\n from sklearn.utils.validation import _num_samples\n",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..d39d8d2 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1024,6 +1024,27 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '      None\\n' == context)\n \n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_autoclass(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: sample_package.Square\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class sample_package.Square\\n'\n+            '\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n'\n+            '   __init__(width, height)\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **width** (*int*) --\\n'\n+            '         **height** (*int*) --\\n'\n+            '\\n' == context)\n+\n+\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n def test_autodoc_typehints_description_with_documented_init(app):\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..15dbbfb 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +10,20 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n+\n+def test_Catalog_unique_locations():\n+    catalog = Catalog()\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/repeated', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/repeated', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/repeated', 2))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/unique', 3))\n+\n+    assert len(list(catalog)) == 1\n+\n+    msg, = list(catalog)\n+    assert msg.text == 'duplicate_test'\n+    assert set(msg.locations) == {('/path/to/repeated', 1), ('/path/to/repeated', 2), ('/path/to/unique', 3)}\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..1b547c7 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -336,13 +336,41 @@ def test_get_toctree_for_includehidden(app):\n                 ([list_item, compact_paragraph, reference, \"quux\"],\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n-\n+@pytest.mark.sphinx('xml', testroot='toctree-index')\n+def test_toctree_indices(app: SphinxTestApp):\n+    \"\"\"\n+    Test to ensure that `genindex`, `modindex`, and `search` can be added\n+    to the toctree without causing warnings and are correctly handled.\n+    \"\"\"\n+    app.build()\n+    toctree = app.env.tocs['index']\n+    \n+    # Check that the genindex, modindex, search entries are present in the toctree\n+    assert_node(\n+        toctree[1], addnodes.toctree,\n+        entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')],\n+        caption=\"Indices and tables\"\n+    )\n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n     assert_node(toctree[1][0][1][2][0][0], reference, refuri=\"foo#foo-2\", secnumber=[1, 3])\n     assert_node(toctree[1][1][0][0], reference, refuri=\"bar\", secnumber=[2])\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n-\n+@pytest.mark.sphinx('xml', testroot='toctree-index')\n+def test_toctree_indices(app: SphinxTestApp):\n+    \"\"\"\n+    Test to ensure that `genindex`, `modindex`, and `search` can be added\n+    to the toctree without causing warnings and are correctly handled.\n+    \"\"\"\n+    app.build()\n+    toctree = app.env.tocs['index']\n+    \n+    # Check that the genindex, modindex, search entries are present in the toctree\n+    assert_node(\n+        toctree[1], addnodes.toctree,\n+        entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')],\n+        caption=\"Indices and tables\"\n+    )\n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..e50bb90 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -95,6 +95,12 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+from docutils import nodes\n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node, restructuredtext\n+from sphinx.domains.std import StandardDomain\n+from typing import cast\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..0707f25 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,8 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+from sphinx.util.inspect import signature_from_str\n+from inspect import Parameter\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n@@ -340,6 +342,18 @@ def test_signature_from_str_positionaly_only_args():\n     assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n \n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_from_str_positionaly_only_args_with_defaults():\n+    sig = signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+\n \n def test_signature_from_str_invalid():\n     with pytest.raises(SyntaxError):\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..395b16f 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -52,7 +53,24 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+from typing import TypeVar\n+\n+def test_generic_typed_class():\n+    \"\"\"Test handling of generic-typed classes by the autodoc mock system.\"\"\"\n+\n+    T = TypeVar('T')\n+\n+    class GenericClass(mock.SomeClass[T]):\n+        \"\"\"docstring of GenericClass\"\"\"\n+\n+        def method(self, value: T) -> T:\n+            return value\n+\n+    obj = GenericClass()\n+    assert GenericClass.__doc__ == \"docstring of GenericClass\"\n+    assert isinstance(obj, GenericClass)\n+    assert obj.method('test') == 'test'\n+    assert obj.method(123) == 123\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..c75f374 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -165,11 +166,31 @@ class SkipMemberTest(TestCase):\n                         SampleClass.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_method(self):\n+        class DecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"Decorated __init__ method docstring.\"\"\"\n+                pass\n+\n+        # We simulate the effect of the configuration that should make __init__ appear\n+        self.assertSkip('class', '__init__', DecoratedInit.__init__, False, 'napoleon_include_init_with_doc')\n+\n     def test_class_special_undoc(self):\n         self.assertSkip('class', '__special_undoc__',\n                         SampleClass.__special_undoc__, True,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_method(self):\n+        class DecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"Decorated __init__ method docstring.\"\"\"\n+                pass\n+\n+        # We simulate the effect of the configuration that should make __init__ appear\n+        self.assertSkip('class', '__init__', DecoratedInit.__init__, False, 'napoleon_include_init_with_doc')\n+\n     def test_exception_private_doc(self):\n         self.assertSkip('exception', '_private_doc',\n                         SampleError._private_doc, False,\n@@ -185,6 +206,16 @@ class SkipMemberTest(TestCase):\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_method(self):\n+        class DecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"Decorated __init__ method docstring.\"\"\"\n+                pass\n+\n+        # We simulate the effect of the configuration that should make __init__ appear\n+        self.assertSkip('class', '__init__', DecoratedInit.__init__, False, 'napoleon_include_init_with_doc')\n+\n     def test_exception_special_undoc(self):\n         self.assertSkip('exception', '__special_undoc__',\n                         SampleError.__special_undoc__, True,\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..a57f6f3 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -101,6 +101,32 @@ def test_anchors_ignored(app, status, warning):\n     content = (app.outdir / 'output.txt').read_text()\n \n     # expect all ok when excluding #top\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # Ensure local links are checked\n+    assert \"[local] doesntexist\" in content, \"Local link was not checked correctly.\"\n+    assert len(content.splitlines()) > 0\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links_json(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.json').exists()\n+    content = (app.outdir / 'output.json').read_text()\n+    print(content)\n+\n+    rows = [json.loads(x) for x in content.splitlines()]\n+\n+    # Ensure local links are included in JSON results\n+    contains_local_link = any(row['uri'] == 'doesntexist' and row['status'] == 'local' for row in rows)\n+    assert contains_local_link, \"JSON output does not include 'doesntexist' as a local link.\"\n     assert not content\n \n \n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..96d58fe 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,33 @@ from test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_specific_private_method,_specific_private_var\"}\n+    actual = do_autodoc(app, 'class', 'target.private.MyClass', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: MyClass',\n+        '   :module: target.private',\n+        '',\n+        '',\n+        '   .. py:method:: MyClass._specific_private_method(self)',\n+        '      :module: target.private',\n+        '',\n+        '      This is a specific private method.',\n+        '',\n+        '      :meta private:',\n+        '',\n+        '',\n+        '   .. py:attribute:: MyClass._specific_private_var',\n+        '      :module: target.private',\n+        '',\n+        '      This is a specific private variable.',\n+        '',\n+        '      :meta private:',\n+        '',\n+    ]\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n",
  "sphinx-doc__sphinx-8120": "",
  "sphinx-doc__sphinx-8269": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 7842f56..36d76fd 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -116,6 +116,22 @@ def test_anchors_ignored(app, status, warning):\n                   })\n def test_auth(app, status, warning):\n     mock_req = mock.MagicMock()\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-http', freshenv=True)\n+def test_http_errors_reported(app, status, warning):\n+    server_thread = HttpServerThread(NotFoundHandler, daemon=True)\n+    server_thread.start()\n+    try:\n+        app.builder.build_all()\n+    finally:\n+        server_thread.terminate()\n+\n+    content = (app.outdir / 'output.txt').read_text()\n+    assert \"404 Client Error: Not Found\" in content\n+\n+class NotFoundHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        self.send_error(404, \"Not Found\")\n     mock_req.return_value = 'fake-response'\n \n     with mock.patch.multiple('requests', get=mock_req, head=mock_req):\n@@ -159,4 +175,11 @@ def test_linkcheck_request_headers(app, status, warning):\n                 assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n                 assert headers[\"X-Secret\"] == \"open sesami\"\n             else:\n-                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..c70f9bc 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,40 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import sys\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_and_aliases_with_description(app):\n+    # Write test RST for the function with type aliases\n+    (app.srcdir / 'types.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    \n+    # Build the Sphinx documentation\n+    app.build()\n+    \n+    # Read the generated documentation content\n+    content = (app.outdir / 'types.txt').read_text()\n+    \n+    # Check the output to ensure it correctly shows the type alias\n+    assert ('types.sphinx_doc(data)\\n'\n+            '\\n'\n+            '   Does it work.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      * **data** (*types.JSONObject*) --\\n'\n+            '         Does it args.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      Does it work in return.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      types.JSONObject\\n' in content)\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..a480cff 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,15 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert inspect.object_description(MyEnum.ValueB) == \"MyEnum.ValueB\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..931ed7a 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -9,6 +9,7 @@\n \"\"\"\n \n import time\n+import sys\n from io import StringIO\n \n import pytest\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..1dce1b9 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -53,7 +53,8 @@ from sphinx.pycode import ast\n     (\"+ a\", \"+ a\"),                             # UAdd\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n-    (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1, 2, 3)\", \"(1, 2, 3)\"),                 # Tuple\n+    (\"(1,)\", \"(1,)\"),                           # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..1a9423c 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,6 +847,26 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n+def test_pyproperty_type_annotations_cross_reference(app):\n+    text = (\".. py:class:: Rectangle\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Check for the cross reference in the type annotations for attributes and properties\n+    assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, (\": \",\n+                                                                        [pending_xref, \"Point\"])])],\n+                                   [desc_content, ()]))\n+    assert 'Rectangle.end' in domain.objects\n+    assert domain.objects['Rectangle.end'] == ('index', 'Rectangle.end', 'property', False)\n+\n def test_pydecorator_signature(app):\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..8fe3ac9 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,7 +236,34 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n-def test_issue_9214():\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+\n+    # Verify the distance calculated is as expected: sqrt((1-2)**2 + (0-0)**2 + (2-0)**2) = sqrt(5)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+    # Additional test cases to ensure robustness\n+    p3 = Point3D(0, 0, 0)\n+    p4 = Point3D(0, 0, 3)\n+    \n+    # Should compute sqrt((0-0)**2 + (0-0)**2 + (0-3)**2) = 3\n+    assert p3.distance(p4) == 3\n+\n+    p5 = Point2D(0, 0)\n+    \n+    # Should compute sqrt((0-0)**2 + (0-0)**2) = 0\n+    assert p3.distance(p5) == 0\n+\n+    # Mixing dimensions: 2D Point and 3D Point\n+    p6 = Point3D(1, 1, 1)\n+    p7 = Point2D(1, 1)\n+    \n+    # Should compute sqrt((1-1)**2 + (1-1)**2 + (1-0)**2) = 1\n+    assert p6.distance(p7) == 1\n+\n+    # Also ensure the method works symmetrically\n+    assert p2.distance(p1) == sqrt(5)\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n     p3 = Point3D(7, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..fafe9a0 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,19 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+    # Original test case from the patch\n+    assert f(f(2)).evalf() == Float(16)\n+    # New test case to verify recursive evaluation\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    assert f(g(f(2))).evalf() == Float(64)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..793a3ef 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -72,7 +72,16 @@ def test_ZeroMatrix_doit():\n     assert isinstance(Znn.doit().rows, Mul)\n \n \n+from sympy import symbols, MatrixSymbol, Identity, Sum\n+\n def test_Identity():\n+    # Test for the specific issue of sum of elements of identity matrix\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+\n+    # Check that the sum of all elements in the identity matrix is n\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n\n     A = MatrixSymbol('A', n, m)\n     In = Identity(n)\n     Im = Identity(m)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..e3549d7 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -336,6 +336,13 @@ def test_args():\n         Permutation(((0, ), [1]))\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n     assert Permutation([[1], [4, 2]]) == Permutation([0, 1, 4, 3, 2])\n+    \n+    # Test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation, as stated in issue\n+    assert Permutation([[0, 2], [0, 2]]) == Permutation([0, 2, 1])  # Also should be an identity for the given cycle\n+    assert Permutation([[1, 2], [2, 3]]) == Permutation([0, 2, 3, 1])  # Non-disjoint cycles applied in order\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])  # Correct permutation from non-disjoint cycles\n+    assert Permutation([[3, 4], [1, 3]]) == Permutation([0, 3, 2, 4, 1])  # More complex non-disjoint cycles\n     assert Permutation([[1], [4, 2]], size=1) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation(\n         [[1], [4, 2]], size=6) == Permutation([0, 1, 4, 3, 2, 5])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex fa86bc3..2ceb7a2 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -1273,6 +1273,21 @@ def test_zeros_ones_fill():\n     assert zeros(2, 3) == Matrix(2, 3, [0]*6)\n     assert ones(2, 3) == Matrix(2, 3, [1]*6)\n \n+def test_matrix_stacking_zero_dimension():\n+    import sympy as sy\n+    # Test for hstack with 0 x n matrices\n+    M1 = sy.Matrix.zeros(0, 0)\n+    M2 = sy.Matrix.zeros(0, 1)\n+    M3 = sy.Matrix.zeros(0, 2)\n+    M4 = sy.Matrix.zeros(0, 3)\n+    assert sy.Matrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+    \n+    # Test for vstack with n x 0 matrices\n+    M1 = sy.Matrix.zeros(1, 0)\n+    M2 = sy.Matrix.zeros(2, 0)\n+    M3 = sy.Matrix.zeros(3, 0)\n+    M4 = sy.Matrix.zeros(4, 0)\n+    assert sy.Matrix.vstack(M1, M2, M3, M4).shape == (10, 0)\n \n def test_empty_zeros():\n     a = zeros(0)\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..3e16ae7 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -167,11 +167,17 @@ def test_evalf_ramanujan():\n     B = 196884*exp(-2*pi*sqrt(163))\n     C = 103378831900730205293632*exp(-3*pi*sqrt(163))\n     assert NS(1 - A - B + C, 10) == '1.613679005e-59'\n+from sympy import Max, Mul\n \n-# Input that for various reasons have failed at some point\n-\n+def test_issue_13076():\n+    # Test case for issue 13076\n+    x, y = symbols('x y')\n+    # This should not raise an UnboundLocalError\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf(), 5) == 'x*Max(0, y)'\n \n def test_evalf_bugs():\n+    # Adding a specific test for issue 13076\n+    test_issue_13076()\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n     assert NS(exp(10**10) + sin(1), 10) == NS(exp(10**10), 10)\n     assert NS('log(1+1/10**50)', 20) == '1.0000000000000000000e-50'\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..7f10dd3 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -268,10 +268,44 @@ def test_coth():\n     assert coth(x*I) == -cot(x)*I\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n+\n+    # Test cases for the coth(log(tan(x))) issue.\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # Verify substitutions do not raise an error (previously did for these values).\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n+    # More values can be added similarly\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n+    # Test cases for the coth(log(tan(x))) issue.\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # Verify substitutions do not raise an error (previously did for these values).\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n+    # More values can be added similarly\n+\n \n def test_coth_series():\n     x = Symbol('x')\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..8e2b67f 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -176,6 +176,23 @@ def test_Complement():\n     assert -1 in Complement(S.Reals, S.Naturals, evaluate=False)\n     assert not 1 in Complement(S.Reals, S.Naturals, evaluate=False)\n \n+    # Additional test cases for issue\n+    a = FiniteSet(x, y, 2, 3)\n+    b = Interval(-10, 10)\n+    assert Complement(a, b) == Complement(FiniteSet(x, y), b)\n+\n+    a = FiniteSet(x, y, 2, 3, z)\n+    b = Interval(0, 5)\n+    assert Complement(a, b) == Complement(FiniteSet(x, y, z), b)\n+\n+    a = FiniteSet(x, 2, z, 5)\n+    b = Interval(2, 5)\n+    assert Complement(a, b) == Complement(FiniteSet(x, z), b)\n+\n+    a = FiniteSet(1, 2, 3)\n+    b = Interval(0, 10)\n+    assert Complement(a, b) == EmptySet()\n+\n     assert Complement(S.Integers, S.UniversalSet) == EmptySet()\n     assert S.UniversalSet.complement(S.Integers) == EmptySet()\n \n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..7895f88 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,30 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    import sympy as sm\n+\n+    # Create an identity matrix of size 6x6\n+    M = sm.eye(6)\n+\n+    # Create a 6x2 matrix filled with 2\n+    V = 2 * sm.ones(6, 2)\n+\n+    # Insert V into M at column index 3\n+    result = M.col_insert(3, V)\n+\n+    # Expected result matrix after insertion\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+\n+    # Assert to check if the result matches the expected matrix\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..aa0c54b 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -665,8 +665,16 @@ def test_Poly_sub():\n def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n+from sympy import symbols, S, Poly\n \n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+x = symbols('x')\n+\n+def test_issue_13079():\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..52925f0 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,24 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_with_custom_mul_symbol():\n+    # Using a thin space as the multiplication symbol\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3 \\, x^{2} \\, y\"\n+    # Ensure that default behavior is not affected\n+    assert latex(3*x**2*y) == \"3 x^{2} y\"\n+    # Test with negative numbers\n+    assert latex(-3*x**2*y, mul_symbol='\\\\,') == r\"- 3 \\, x^{2} \\, y\"\n+    # Test with zero\n+    assert latex(0*x*y, mul_symbol='\\\\,') == \"0\"\n+    # Test with integers and floats mixed\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\, 3^{x}\"\n+    # Test different expression\n+    assert latex(x*y*z, mul_symbol='\\\\,') == r\"x \\, y \\, z\"\n+    # Test with rational numbers\n+    assert latex(S(3)/2*x*y, mul_symbol='\\\\,') == r\"\\frac{3}{2} \\, x \\, y\"\n+    # Test with LaTeX expressions in the power\n+    assert latex(x**(2*y + 3), mul_symbol='\\\\,') == r\"x^{2 \\, y + 3}\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..d031dc5 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -307,8 +307,13 @@ def test_tolist():\n     m = Matrix(lst)\n     assert m.tolist() == lst\n \n-\n-def test_as_mutable():\n+def test_issue_13835():\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a * j for i in range(n)] for j in range(n)])\n+    # Test cases to verify if the issue with symbolic matrix determinants is fixed\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n     assert zeros(0, 3).as_mutable() == zeros(0, 3)\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..362f549 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -725,8 +725,83 @@ def test_precomputed_cdf():\n         compdiff = cdf(X)(x) - simplify(X.pspace.density.compute_cdf()(x))\n         compdiff = simplify(compdiff.rewrite(erfc))\n         assert compdiff == 0\n-\n-def test_issue_13324():\n+def test_issue_cdf_calculation():\n+    from sympy import Piecewise, lowergamma, uppergamma, exp, sqrt, asin, pi, gamma, hyper, beta, integrate, oo\n+    x = symbols(\"x\", real=True, finite=True)\n+    \n+    # Arcsin distribution\n+    X = Arcsin('X', 0, 3)\n+    cdf_arcsin = cdf(X)(x)\n+    expected_arcsin = Piecewise((0, x < 0), (2*asin(sqrt(x/3))/pi, x <= 3), (1, True))\n+    assert cdf_arcsin == expected_arcsin\n+\n+    # Dagum distribution\n+    X = Dagum('X', S(1)/3, S(1)/5, 2)\n+    cdf_dagum = cdf(X)(x)\n+    expected_dagum = Piecewise(((1 + (x/2)**(-S(1)/3))**(-S(1)/5), x >= 0), (0, True))\n+    assert cdf_dagum == expected_dagum\n+\n+    # Erlang distribution\n+    X = Erlang('X', 1, 1)\n+    cdf_erlang = cdf(X)(x)\n+    expected_erlang = Piecewise((lowergamma(1, x)/gamma(1), x > 0), (0, True))\n+    assert cdf_erlang == expected_erlang\n+\n+    # Frechet distribution\n+    X = Frechet(\"X\", S(4)/3, 1, 2)\n+    cdf_frechet = cdf(X)(x)\n+    expected_frechet = Piecewise((exp(-((x-2)/1)**(-S(4)/3)), x >= 2), (0, True))\n+    assert cdf_frechet == expected_frechet\n+\n+    # Gamma distribution\n+    X = Gamma('X', 0.1, 2)\n+    cdf_gamma = cdf(X)(x)\n+    expected_gamma = lowergamma(0.1, x/2)/gamma(0.1)\n+    assert cdf_gamma == expected_gamma\n+\n+    # Inverse Gamma distribution\n+    X = GammaInverse(\"X\", S(5)/7, 2)\n+    cdf_gaminv = cdf(X)(x)\n+    expected_gaminv = uppergamma(S(5)/7, 2/x)/gamma(S(5)/7)\n+    assert cdf_gaminv == expected_gaminv\n+\n+    # Kumaraswamy distribution\n+    X = Kumaraswamy(\"X\", S(1)/123, 5)\n+    cdf_kumaraswamy = cdf(X)(x)\n+    expected_kumaraswamy = Piecewise((0, x < 0), (1 - (1 - x**(S(1)/123))**5, x <= 1), (1, True))\n+    assert cdf_kumaraswamy == expected_kumaraswamy\n+\n+    # Laplace distribution\n+    X = Laplace(\"X\", 2, 3)\n+    cdf_laplace = cdf(X)(x)\n+    expected_laplace = Piecewise((exp((x-2)/3)/2, x < 2), (-exp((2-x)/3)/2 + 1, x >= 2))\n+    assert cdf_laplace == expected_laplace\n+\n+    # Logistic distribution\n+    X = Logistic(\"X\", 1, 0.1)\n+    cdf_logistic = cdf(X)(x)\n+    expected_logistic = 1/(1 + exp((1-x)/0.1))\n+    assert cdf_logistic == expected_logistic\n+\n+    # Nakagami distribution\n+    X = Nakagami('X', S(7)/3, 1)\n+    cdf_nakagami = cdf(X)(x)\n+    expected_nakagami = Piecewise((lowergamma(S(7)/3, S(7)/3*x**2)/gamma(S(7)/3), x > 0), (0, True))\n+    assert cdf_nakagami == expected_nakagami\n+\n+    # StudentT distribution\n+    X = StudentT('X', 10)\n+    cdf_studentt = cdf(X)(x)\n+    expected_studentt = 1/2 + x*gamma(5.5)*hyper((S(1)/2, 5.5), (S(3)/2,), -x**2/10)/(sqrt(pi)*sqrt(10)*gamma(5))\n+    assert cdf_studentt == expected_studentt\n+\n+    # UniformSum distribution\n+    X = UniformSum('X', 5)\n+    cdf_uniformsum = cdf(X, evaluate=False)(x)\n+    pdf_uniformsum = density(UniformSum('X', 5))(x)\n+    assert tn(diff(cdf_uniformsum.subs(floor(x), 0).doit(), x), pdf_uniformsum.subs(floor(x), 0).doit(), x, a=0, b=4)\n+    \n+    test_issue_13324()\n     X = Uniform('X', 0, 1)\n     assert E(X, X > Rational(1,2)) == Rational(3,4)\n     assert E(X, X > 0) == Rational(1,2)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..da9e827 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,10 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+from sympy.physics.quantum import TensorProduct as tp\n+from sympy.physics.paulialgebra import Pauli\n+from sympy import symbols, Symbol\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n@@ -48,8 +52,28 @@ def test_tensor_product_commutator():\n def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n-\n-def test_issue_5923():\n+def test_tensor_product_pow():\n+    A, B, C, D = symbols('A,B,C,D', commutative=False)\n+    x = Symbol('x', commutative=True)\n+    \n+    # Existing test cases for tensor product simplification\n+    assert tensor_product_simp(tp(A, B)**x) == tp(A**x, B**x)\n+    assert tensor_product_simp(x*tp(A, B)**2) == x*tp(A**2, B**2)\n+    assert tensor_product_simp(x*(tp(A, B)**2)*tp(C, D)) == x*tp(A**2*C, B**2*D)\n+    assert tensor_product_simp(tp(A, B) - tp(C, D)**x) == tp(A, B) - tp(C**x, D**x)\n+\n+    # Additional test cases derived from the issue description\n+    a = Symbol('a', commutative=False)\n+    t1 = tp(1, 1) * tp(1, 1)\n+    assert tensor_product_simp(t1) == tp(1, 1**2)\n+    assert t1.expand(tensorproduct=True) == tp(1, 1**2)\n+    \n+    t2 = tp(1, Pauli(3)) * tp(1, Pauli(3))\n+    assert tensor_product_simp(t2) == tp(1, Pauli(3)**2)\n+    assert t2.expand(tensorproduct=True) == tp(1, Pauli(3)**2)\n+\n+    assert tensor_product_simp(tp(1, 1) * tp(1, a)).subs(a, 1) == tp(1, 1)\n+    assert tensor_product_simp(tp(1, Pauli(3)) * tp(1, a)).subs(a, Pauli(3)) == tp(1, 1)\n     # most of the issue regarding sympification of args has been handled\n     # and is tested internally by the use of args_cnc through the quantum\n     # module, but the following is a test from the issue that used to raise.\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..9a161c9 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -80,7 +80,11 @@ def test_python_keyword_function_name_escaping():\n \n \n def test_python_relational():\n-    assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    assert python(Ne(x/(y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"\n+    ]\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n     assert python(Gt(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x > y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..4110544 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -3,12 +3,23 @@ from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n+from sympy.physics.vector import ReferenceFrame, Vector\n+from sympy import symbols\n \n Vector.simp = True\n A = ReferenceFrame('A')\n \n \n-def test_Vector():\n+def test_vector_addition_with_zero():\n+    N = ReferenceFrame('N')\n+    # Test adding a zero-multiplied vector\n+    assert N.x + 0 * N.x == N.x\n+    # Test adding a zero vector explicitly\n+    zero_vector = 0 * N.x\n+    assert N.x + zero_vector == N.x\n+    assert zero_vector + N.x == N.x\n+    # Test sum of vectors including zero-multiplied ones\n+    assert sum([N.x, 0 * N.x]) == N.x\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..ad6817b 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -5,6 +6,8 @@ import inspect\n \n import mpmath\n from sympy.utilities.pytest import XFAIL, raises\n+from sympy import rf\n+from sympy.solvers import nsolve\n from sympy import (\n     symbols, lambdify, sqrt, sin, cos, tan, pi, acos, acosh, Rational,\n     Float, Matrix, Lambda, Piecewise, exp, Integral, oo, I, Abs, Function,\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..98ac37c 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -71,14 +72,28 @@ def test_ndim_array_initiation():\n     assert vector_with_long_shape.rank() == 1\n     raises(ValueError, lambda: vector_with_long_shape[long(5)])\n \n-    from sympy.abc import x\n+    from sympy.abc import x, y\n+    # Test for rank-0 array issue\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1  # Should be 1 as per the fix\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n+    # Test rank-0 array with different scalar element\n+    another_rank_zero_array = ImmutableDenseNDimArray(y)\n+    assert len(another_rank_zero_array) == 1  # Verify len is 1\n+    assert another_rank_zero_array.shape == ()\n+    assert another_rank_zero_array.rank() == 0\n+    assert another_rank_zero_array[()] == y\n+    raises(ValueError, lambda: another_rank_zero_array[0])\n+\n+    # Test rank-0 array iteration\n+    iterated_elements = list(rank_zero_array)\n+    assert len(iterated_elements) == 1\n+    assert iterated_elements[0] == x\n+\n \n def test_reshape():\n     array = ImmutableDenseNDimArray(range(50), 50)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..83255b8 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -18,6 +19,18 @@ def test_Integer():\n def test_Rational():\n     assert mcode(Rational(3, 7)) == \"3/7\"\n     assert mcode(Rational(18, 9)) == \"2\"\n+\n+def test_Max_Min():\n+    x, y, z = symbols('x y z')\n+    # Test case to check Max function with two variables\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    # Test case to check Max function with multiple variables\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    # Test case to verify the original patch test\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+    # Additional test cases to check Min function\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(x, y, z)) == \"Min[x, y, z]\"\n     assert mcode(Rational(3, -7)) == \"-3/7\"\n     assert mcode(Rational(-3, -7)) == \"3/7\"\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..76625cc 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,42 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_positive_x():\n+    \"\"\"Test quaternion rotation matrix for a quaternion representing a positive rotation around x-axis.\"\"\"\n+    from sympy import Quaternion, symbols, sin, cos, trigsimp, Matrix\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected = Matrix([\n+        [1,       0,      0],\n+        [0,  cos(x), -sin(x)],\n+        [0,  sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected\n+\n+def test_quaternion_rotation_negative_y():\n+    \"\"\"Test quaternion rotation matrix for a quaternion representing a negative rotation around y-axis.\"\"\"\n+    from sympy import Quaternion, symbols, sin, cos, trigsimp, Matrix\n+    y = symbols('y') \n+    q = Quaternion(cos(y/2), 0, -sin(y/2), 0)\n+    expected = Matrix([\n+        [ cos(y),  0,  sin(y)],\n+        [      0,  1,       0],\n+        [-sin(y),  0,  cos(y)]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected\n+\n+def test_quaternion_rotation_negative_z():\n+    \"\"\"Test quaternion rotation matrix for a quaternion representing a negative rotation around z-axis.\"\"\"\n+    from sympy import Quaternion, symbols, sin, cos, trigsimp, Matrix\n+    z = symbols('z')\n+    q = Quaternion(cos(z/2), 0, 0, -sin(z/2))\n+    expected = Matrix([\n+        [cos(z),  sin(z),  0],\n+        [-sin(z), cos(z),  0],\n+        [0,       0,       1]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +155,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..3736714 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -75,6 +75,12 @@ def test_Min():\n     assert Min(nn, oo) == nn\n     assert Min(oo, nn) == nn\n     assert Min(p, p) == p\n+    from sympy import S, oo, Symbol, Min, Max\n+    \n+    # Test for zero-argument Min() and Max()\n+    assert Min() == S.Infinity\n+    assert Max() == S.NegativeInfinity\n+    \n     assert Min(p, oo) == p\n     assert Min(oo, p) == p\n     assert Min(oo, oo) == oo\n@@ -154,6 +160,10 @@ def test_Max():\n \n     assert Max(5, 4) == 5\n \n+    # Test for single argument Min() and Max()\n+    assert Min(x) == x\n+    assert Max(x) == x\n+\n     # lists\n \n     raises(ValueError, lambda: Max())\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..f2e6fea 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,38 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n-def test_issue_14392():\n+def test_issue_15873():\n+    # Original test case\n+    e1 = -2*I + (1 + I)**2\n+    assert e1.is_zero is None\n+    assert simplify(e1).is_zero is True\n+\n+    # Additional test cases\n+    e2 = I + (-I)\n+    assert e2.is_zero is True\n+\n+    e3 = 3 + 3*I - 3 - 3*I\n+    assert e3.is_zero is True\n+\n+    e4 = 2*I * I\n+    assert e4.is_zero is False\n+\n+    e5 = (1 + sqrt(5)) * (1 - sqrt(5))\n+    assert e5.is_zero is None\n+\n+    # Ensuring that simplification changes the expression status\n+    e6 = (2 + 3*I) + (-2 - 3*I)\n+    assert e6.is_zero is True\n+\n+    x, y = symbols('x y', zero=True)\n+    e7 = x + y + I\n+    assert e7.is_zero is None\n+\n+    e8 = (x + y).expand(complex=True)\n+    assert e8.is_zero is None\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..bc7c202 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -512,6 +512,29 @@ def test_posify():\n         'Sum(_x**(-n), (n, 1, 3))'\n \n \n+def test_issue_16438_posify_finite():\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    # Check if the posified symbol retains the 'finite' assumption\n+    assert eq.is_finite is True\n+    # Check all assumptions to ensure 'finite' is preserved correctly\n+    expected_assumptions = {\n+        'positive': True,\n+        'real': True,\n+        'hermitian': True,\n+        'imaginary': False,\n+        'negative': False,\n+        'nonnegative': True,\n+        'nonzero': True,\n+        'zero': False,\n+        'complex': True,\n+        'nonpositive': False,\n+        'commutative': True,\n+        'finite': True,\n+        'infinite': False\n+    }\n+    assert eq._assumptions == expected_assumptions\n+\n def test_issue_4194():\n     # simplify should call cancel\n     from sympy.abc import x, y\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..8910de4 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -11,7 +12,8 @@ from sympy.matrices import SparseMatrix, MatrixSymbol\n from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n-from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n+from sympy.printing.pycode import PythonCodePrinter\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +37,22 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+def test_Indexed_PythonCodePrinter():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    # Original test case: single indexed element\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    # Additional test cases for multi-dimensional indexing\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+    # Ensure nested expressions work correctly\n+    q = IndexedBase(\"q\")\n+    expr = p[0] + q[1]\n+    assert prntr.doprint(expr) == 'p[0] + q[1]'\n+    # Test with symbolic indices\n+    i, j = symbols('i j')\n+    assert prntr.doprint(p[i, j]) == 'p[i, j]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..890a14e 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -30,8 +30,15 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     output.close()\n     return source\n \n-\n-def test_cython_wrapper_scalar_function():\n+import numpy as np\n+from sympy import MatrixSymbol\n+from sympy.utilities.autowrap import autowrap\n+\n+def test_cython_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..631972e 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,8 +248,9 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n-\n-def test_decode_morse():\n+    # Test specific encoding for '1' to ensure the fix is correct\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('54321') == '.....|....-|...--|..---|.----'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..11c3b0a 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -801,6 +801,25 @@ def test_nc_simplify():\n     # commutative expressions should be returned without an error\n     assert nc_simplify(2*x**2) == 2*x**2\n \n+def test_issue_17137():\n+    from sympy import Symbol, I, cos, simplify\n+\n+    x = Symbol('x')\n+    \n+    # Original test cases from the provided test patch\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n+    # Additional test cases\n+    # Test with more complex trigonometric simplifications\n+    assert simplify(cos(x)**(2*I)) == cos(x)**(2*I)\n+    assert simplify(cos(x)**(I + 1)) == cos(x)**(I + 1)\n+    assert simplify((cos(x) * cos(x))**I) == (cos(x)**2)**I\n+\n+    # Ensuring expressions with other complex coefficients are handled\n+    assert simplify(cos(x)**(I*x)) == cos(x)**(I*x)\n+    assert simplify(cos(x)**(2*I*x + 1)) == cos(x)**(2*I*x + 1)\n+\n def test_issue_15965():\n     A = Sum(z*x**y, (x, 1, a))\n     anew = z*Sum(x**y, (x, 1, a))\n@@ -814,4 +833,4 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..0a0de20 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,6 +1,8 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n from sympy.simplify.sqrtdenest import _subsets as subsets\n-from sympy.utilities.pytest import slow\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n                                           15, 29]]\n@@ -175,8 +177,24 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # Test that the function returns unchanged expression if it cannot be denested\n+    assert sqrtdenest((3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2) == (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+\n+    # Testing _sqrt_match function as part of the original patch\n+    assert _sqrt_match(4 + I) == []\n+\n+    # Additional case ensuring unchanged return if denesting is not possible\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n \n-def test_issue_5653():\n+    # Check with rational non-surd input\n+    assert sqrtdenest(3 + 4*I) == 3 + 4*I\n+\n+    # Check with a symbolic input\n+    x = Symbol('x')\n+    assert unchanged(sqrtdenest, sqrt(x + sqrt(1 + x))) == sqrt(x + sqrt(1 + x))\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..8a8e799 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -93,6 +94,16 @@ def test_point():\n     assert p4 * 5 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n+    assert 5 * p4 == Point(5, 5)\n+    assert p4 * 5 == Point(5, 5)\n+    \n+    # Test multiplication with sympy sympify number\n+    from sympy import sympify\n+    assert p4 * sympify(2.0) == Point(2, 2)\n+    assert sympify(2.0) * p4 == Point(2, 2)\n+    assert p3 + p4 * sympify(2.0) == Point(2, 2)\n+    assert p3 + sympify(2.0) * p4 == Point(2, 2)\n+\n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n     # Point differences should be simplified\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..4e5cda0 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,15 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy import symbols\n+    x, y = symbols('x y', integer=True)\n+\n+    # Test the order of symbols and permute=True\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..827370d 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -677,7 +677,16 @@ def test_latex_subs():\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+def test_latex_subs_with_parentheses():\n+    from sympy import Subs, symbols\n+    x, y = symbols('x y')\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(2*Subs(x**2 + y, (x,), (3,))) == r'2 \\left. \\left(x^{2} + y\\right) \\right|_{\\substack{ x=3 }}'\n+    assert latex(-Subs(x*y + y**2, (x,), (1,))) == r'- \\left. \\left(x y + y^{2}\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(Subs(x/(y - 1), (y,), (2,))) == r'\\left. \\frac{x}{y - 1} \\right|_{\\substack{ y=2 }}'\n+\n+    # This also ensures the original behavior is unchanged for multiplication\n+    assert latex(Subs(x*y, (x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..5789cdf 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -86,8 +87,16 @@ def test_free_symbols():\n     assert ConditionSet(x, Eq(x, 0), FiniteSet(x, z)\n         ).free_symbols == {x, z}\n \n+from sympy import asin, imageset, Lambda\n+from sympy.sets.sets import Integers\n \n def test_subs_CondSet():\n+    # Test for issue regarding substitution in ConditionSet with ImageSet\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), Integers)\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1,1)), img1)\n+    assert cond_set.subs(y, S.One/3).dummy_eq(img2)\n     s = FiniteSet(z, y)\n     c = ConditionSet(x, x < 2, s)\n     # you can only replace sym with a symbol that is not in\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..510f4cc 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,47 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+from sympy import Symbol, Interval, Add, Mul, exp, Rational, Matrix\n+from sympy.core.sympify import kernS\n+from sympy.abc import x, y\n+\n+def test_kernS_issue():\n+    # Check if kernS throws an error when it should not\n+    try:\n+        assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+        print(\"Test passed: kernS(\\\"(2*x)/(x-1)\\\")\")\n+    except Exception as e:\n+        print(f\"Test failed: kernS(\\\"(2*x)/(x-1)\\\") with exception {e}\")\n+\n+    # Test with potential edge cases\n+    try:\n+        assert kernS(\"-(x + 1)\") == -(x + 1)\n+        print(\"Test passed: kernS(\\\"-(x + 1)\\\")\")\n+    except Exception as e:\n+        print(f\"Test failed: kernS(\\\"-(x + 1)\\\") with exception {e}\")\n+\n+    try:\n+        assert kernS(\"2*(x + y)\") == 2*(x + y)\n+        print(\"Test passed: kernS(\\\"2*(x + y)\\\")\")\n+    except Exception as e:\n+        print(f\"Test failed: kernS(\\\"2*(x + y)\\\") with exception {e}\")\n+\n+    try:\n+        assert kernS(\"x - (x - 1)\").expand() == 1\n+        print(\"Test passed: kernS(\\\"x - (x - 1)\\\")\")\n+    except Exception as e:\n+        print(f\"Test failed: kernS(\\\"x - (x - 1)\\\") with exception {e}\")\n+\n+    # Check handling of unmatched parenthesis\n+    try:\n+        kernS(\"2*(x + y\")\n+    except Exception as e:\n+        print(f\"Properly caught unmatched parenthesis error: {e}\")\n+\n+    try:\n+        kernS(\"(2*x)/(x-1\")\n+    except Exception as e:\n+        print(f\"Properly caught unmatched parenthesis error: {e}\")\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..5a283ec 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -106,7 +107,28 @@ def test_identity():\n         assert represent(IdentityOperator(n)) == eye(n)\n \n \n-def test_outer_product():\n+def test_dagger_identity_operator_simplification():\n+    I = IdentityOperator()\n+    A = Operator('A')\n+    D = Dagger(A)\n+    \n+    # Testing Identity A * I\n+    assert A * I == A\n+    assert I * A == A\n+    \n+    # Now for the Dagger part\n+    assert D * I == D\n+    assert I * D == D\n+    \n+    O = Operator('O')\n+    \n+    # Existing tests that also cover O * I simplification\n+    assert I * O == O\n+    assert O * I == O\n+    \n+    # Verifying if combining daggers and identity maintains properties\n+    assert Dagger(Dagger(A) * I) == A\n+    assert Dagger(I * Dagger(A)) == A\n     k = Ket('k')\n     b = Bra('b')\n     op = OuterProduct(k, b)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..2898630 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -845,6 +845,18 @@ def test_subgroup():\n \n def test_generator_product():\n     G = SymmetricGroup(5)\n+\n+def test_issue_sylow_subgroup_IndexError():\n+    from sympy.combinatorics import DihedralGroup\n+    # Testing for DihedralGroup(18)\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Testing for DihedralGroup(50)\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n     p = Permutation(0, 2, 3)(1, 4)\n     gens = G.generator_product(p)\n     assert all(g in G.strong_gens for g in gens)\n",
  "sympy__sympy-20154": "",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..00d41e0 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,33 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # Test issue https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+def test_extended_zero_false_comparisons():\n+    from sympy import S\n+    # Additional test cases to ensure consistency\n+    # Ensure that comparing different zero representations with S.false gives False\n+    assert (S(0.0) != S.false) is True\n+    assert (S.false != S(0.0)) is True\n+\n+    # Zero in various forms\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Check with negative zero\n+    assert (S(-0.0) == S.false) is False\n+    assert (S.false == S(-0.0)) is False\n+\n+    # Check with very small floats\n+    assert (S(1e-100) == S.false) is False\n+    assert (S.false == S(1e-100)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..3d206c6 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,6 +20,33 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # issue 21373 - Test subs with expressions involving sinh and Piecewise\n+    from sympy import sinh, cosh, tanh, exp, Piecewise, clear_cache\n+\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+\n+    expr_sinh = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    # Check substitutions that should not raise PolynomialError\n+    clear_cache()\n+    assert expr_sinh.subs({1: 1.0})\n+    clear_cache()\n+    assert expr_cosh.subs({1: 1.0})\n+    clear_cache()\n+    assert expr_tanh.subs({1: 1.0})\n+\n+    # Testing without division by z\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    clear_cache()\n+    assert expr_no_div.subs({1: 1.0})\n+\n+    # Testing with a different function other than exp\n+    expr_sin = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    clear_cache()\n+    assert expr_sin.subs({1: 1.0})\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..ffca1c5 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -12,6 +12,8 @@ from sympy.polys.monomials import (\n from sympy.polys.polyerrors import ExactQuotientFailed\n \n from sympy.abc import a, b, c, x, y, z\n+from sympy import symbols\n+from sympy.polys.monomials import itermonomials\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..464e116 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st\n \n \n     class Signifier(String):\n@@ -275,6 +276,7 @@ def test_String():\n     si = Signifier('foobar')\n     assert si != st\n     assert si.text == st.text\n+    assert si.func(*si.args) == si\n     s = String('foo')\n     assert str(s) == 'foo'\n     assert repr(s) == \"String('foo')\"\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..3a0564d 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,9 +1,10 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.core.sympify import sympify\n-from sympy.functions.elementary.miscellaneous import sqrt\n+from sympy.core.parameters import evaluate\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..95fd1ac 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -53,6 +54,16 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n     assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(Min(x, y)) == 'min(x, y)'\n+    assert prntr.doprint(Max(x, y)) == 'max(x, y)'\n+\n+    # Additional test cases for Min and Max\n+    assert prntr.doprint(Min(x, y, z)) == 'min(x, y, z)'\n+    assert prntr.doprint(Max(x, y, z)) == 'max(x, y, z)'\n+    assert prntr.doprint(Min(2, 3, x)) == 'min(2, 3, x)'\n+    assert prntr.doprint(Max(2, 3, y)) == 'max(2, 3, y)'\n+    assert prntr.doprint(Min(Min(x, y), z)) == 'min(min(x, y), z)'\n+    assert prntr.doprint(Max(Max(x, y), z)) == 'max(max(x, y), z)'\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..73decdb 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,7 +1175,20 @@ def test_scipy_polys():\n \n \n \n-def test_lambdify_inspect():\n+def test_lambdify_single_element_tuple():\n+    # Test that the generated function correctly returns a tuple with a single element\n+    f2b = lambdify([], (1,))\n+    assert f2b() == (1,)\n+\n+    # Verify the generated source code contains the trailing comma for a single element tuple\n+    source_code = inspect.getsource(f2b)\n+    assert 'return (1,)' in source_code\n+\n+    # Test for two elements tuple to ensure it works correctly\n+    f2c = lambdify([], (1, 2))\n+    assert f2c() == (1, 2)\n+    source_code_two = inspect.getsource(f2c)\n+    assert 'return (1, 2)' in source_code_two\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..3326a9e 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,4 +1,6 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..6efdd35 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -182,8 +182,38 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     st = tfunc(t)\n     assert _is_tensor_eq(st, t)\n \n+import sympy\n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G\n+from sympy.physics.hep.gamma_matrices import kahane_simplify\n+from sympy.tensor.tensor import tensor_indices\n \n-def test_kahane_algorithm():\n+def test_kahane_leading_gamma_matrix_order():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Test case 1\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Expected 4*G(rho)*G(sigma), got {r}\"\n+\n+    # Test case 2\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Expected 4*G(rho)*G(sigma), got {r}\"\n+\n+    # Additional test cases\n+    # Test with different order of free indices\n+    t = G(sigma)*G(rho)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(sigma)*G(rho)), f\"Expected 4*G(sigma)*G(rho), got {r}\"\n+\n+    t = G(mu)*G(-mu)*G(sigma)*G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(sigma)*G(rho)), f\"Expected 4*G(sigma)*G(rho), got {r}\"\n+\n+    # Additional test case with no contractions, which should remain unchanged\n+    t = G(sigma)*G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(sigma)*G(rho)), f\"Expected G(sigma)*G(rho), got {r}\"\n     # Wrap this function to convert to and from TIDS:\n \n     def tfunc(e):\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..5a9f4df 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -46,6 +46,15 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+from sympy import Symbol, S, Contains, FiniteSet, Reals, Integers, raises\n+\n+def test_contains_as_set_not_implemented():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    # Test case for the issue where Contains.as_set should raise NotImplementedError\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..78434c3 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,28 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+from sympy.core.numbers import E\n+from sympy import exp\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units import Quantity\n+\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..f54c2f7 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -561,8 +561,44 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+from sympy.physics.units import time, velocity, acceleration, second, meter, Quantity\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+    \n+    expr = A1 * T1 + V1\n+    # This should not raise ValueError\n+    SI._collect_factor_and_dimension(expr)\n \n-def test_prefixed_property():\n+def test_equivalent_dimensions_addition():\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 3 * meter / second)\n+    \n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, -9.8 * meter / second**2)\n+    \n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 5 * second)\n+    \n+    expr = A2 * T2 + V2\n+    # This should not raise ValueError, asserting equivalent dimensions are handled\n+    factor, dimension = SI._collect_factor_and_dimension(expr)\n+    assert dimension == velocity\n+    assert factor == -9.8 * 5 + 3\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..726d0ff 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -106,4 +107,25 @@ def test_check_homomorphism():\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n-    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+\n+    # Test case for the issue with PermutationGroup where inverse generators are not handled\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Additional test cases for PermutationGroups\n+    # Test homomorphism where inverses of generators need to be considered\n+    a = Permutation(1, 2)\n+    b = Permutation(1, 3)\n+    G = PermutationGroup([a, b])\n+\n+    # Homomorphism mapping generators to inverses\n+    T = homomorphism(G, G, [a, b], [a**-1, b**-1])\n+    assert T.is_trivial()  # Since sending generators to their inverses and group is abelian\n+\n+    # Check if the homomorphism is injective\n+    T = homomorphism(G, G, G.generators, G.generators)\n+    assert T.is_injective()\n+    assert T.is_surjective()\n+    assert T.is_isomorphism()\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..a65a7ac 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -270,7 +270,32 @@ def test_PolyElement_as_expr():\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n-def test_PolyElement_from_expr():\n+def test_PolyElement_as_expr_with_symbols():\n+    from sympy import ring, ZZ, symbols\n+\n+    # Define a polynomial ring and the polynomial\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    # Define new symbols for substitution\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+\n+    # Check if the polynomial is correctly expressed with the new symbols\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Additional test with a different number of symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))  # Should raise due to wrong number of symbols\n+\n+    # Check with a single variable polynomial\n+    R, x = ring(\"x\", ZZ)\n+    h = 5*x**3 + 2*x + 1\n+    X = symbols(\"X\")\n+    h_expr = 5*X**3 + 2*X + 1\n+    assert h.as_expr(X) == h_expr\n+\n+    # Ensuring the original symbols work as before\n+    assert f.as_expr() == f.as_expr(*R.symbols)\n     x, y, z = symbols(\"x,y,z\")\n     R, X, Y, Z = ring((x, y, z), ZZ)\n \n",
  "sympy__sympy-24661": "",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..cf13ce3 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,8 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n     ],\n )\n def test_unit_grammar(strings, unit):\n@@ -90,6 +92,8 @@ def test_unit_grammar_fail(string):\n         ([\"[cm/s2]\"], dex(u.cm / u.s**2)),\n         ([\"[K]\"], dex(u.K)),\n         ([\"[-]\"], dex(u.dimensionless_unscaled)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n     ],\n )\n def test_cds_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..2b208ff 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1896,6 +1896,28 @@ class OperationTests(OperationTestBase):\n         with self.assertRaises(IntegrityError), transaction.atomic():\n             Author.objects.create(name='Albert', rebate='10$')\n         author = Author.objects.create(name='Albert', rebate='10%')\n+\n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_or_and(self):\n+        app_label = 'test_checkconstraintorand'\n+        constraint_name = 'field_1_has_value_if_flag_set'\n+        from_state = self.set_up_test_model(app_label)\n+        check = (\n+            models.Q(flag__exact=True, field_1__isnull=False) |\n+            models.Q(flag__exact=False)\n+        )\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        # Test correct behavior: flag=True requires field_1 not to be null\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(flag=True, field_1=None)\n+        # Test correct behavior: flag=False does not require field_1\n+        TestConstraint.objects.create(flag=False, field_1=None)\n         self.assertEqual(Author.objects.get(), author)\n \n     @skipUnlessDBFeature('supports_table_check_constraints')\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..5899f33 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -160,6 +160,14 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translation.get_language(), 'en')\n \n         with translation.override('nl'):\n+            # Test URL with missing optional argument\n+            self.assertEqual(translate_url('/nl/with-arguments/regular-argument/', 'en'), '/en/with-arguments/regular-argument/')\n+            # Test URL with optional argument present\n+            self.assertEqual(translate_url('/nl/with-arguments/regular-argument/optional.html', 'en'), '/en/with-arguments/regular-argument/optional.html')\n+            # Test URL pattern with missing optional trailing segment\n+            self.assertEqual(translate_url('/nl/regex_optional/1/', 'en'), '/en/regex_optional/1/')\n+            # Test URL pattern with full optional segment\n+            self.assertEqual(translate_url('/nl/regex_optional/1/2/', 'en'), '/en/regex_optional/1/2/')\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..c133bc7 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -8,6 +9,7 @@ from unittest import expectedFailure\n from django import forms\n from django.test import TestCase\n \n+from django.db import transaction\n from .models import (\n     ArticleWithAuthor, BachelorParty, BirthdayParty, BusStation, Child,\n     DerivedM, InternalCertificationAudit, ItalianRestaurant, M2MChild,\n@@ -18,6 +20,26 @@ from .models import (\n \n \n class ModelInheritanceTest(TestCase):\n+    def test_reset_primary_key_for_child(self):\n+        \"\"\"Test resetting primary key for a child model creates a new object.\"\"\"\n+        # Create and retrieve the original derived object\n+        original_derived = Derived.objects.create(f=True)\n+        original_pk = original_derived.pk\n+\n+        # Reset and save the derived object to create a new one\n+        original_derived.reset()\n+        original_derived.save()\n+\n+        # Retrieve objects with the original and new primary keys\n+        original_obj = Derived.objects.filter(pk=original_pk).first()\n+        new_obj = Derived.objects.filter(pk=original_derived.pk).first()\n+\n+        # Ensure the original object is not overwritten and a new object is created\n+        self.assertIsNotNone(original_obj)\n+        self.assertTrue(original_obj.f)\n+        self.assertIsNotNone(new_obj)\n+        self.assertFalse(new_obj.f)\n+\n     def test_model_inheritance(self):\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..f79b150 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -604,6 +604,46 @@ class DeletionTests(TestCase):\n                 signal.disconnect(receiver, sender=Referrer)\n \n \n+class ModelDeleteTests(TestCase):\n+    \n+    def test_delete_all_generates_no_subquery(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertNotIn('SELECT', sql)\n+\n+    def test_delete_large_table_no_subquery(self):\n+        # Test with a large number of objects\n+        User.objects.bulk_create(User() for _ in range(100000))\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertNotIn('SELECT', sql)\n+        self.assertEqual(User.objects.count(), 0)\n+\n+    def test_delete_with_conditions(self):\n+        # Ensure delete with conditions does not invoke a subquery\n+        u1 = User.objects.create(name=\"user1\")\n+        User.objects.create(name=\"user2\")\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.filter(name=\"user1\").delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertNotIn('SELECT', sql)\n+        self.assertEqual(User.objects.count(), 1)\n+        self.assertFalse(User.objects.filter(pk=u1.pk).exists())\n+\n+    def test_delete_large_table_with_foreign_key(self):\n+        # Ensure that deletion on tables with foreign keys is efficient\n+        avatar = Avatar.objects.create(desc=\"avatar\")\n+        User.objects.bulk_create(User(avatar=avatar) for _ in range(100000))\n+        with self.assertNumQueries(2) as ctx:  # One for User, one for Avatar\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertNotIn('SELECT', sql)\n+        self.assertEqual(User.objects.count(), 0)\n+        self.assertEqual(Avatar.objects.count(), 0)\n+\n+\n class FastDeleteTests(TestCase):\n \n     def test_fast_delete_fk(self):\n@@ -702,4 +742,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..5a2d179 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,23 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..2b387d3 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -110,6 +111,27 @@ class PickleabilityTestCase(TestCase):\n         self.assertEqual(original, reloaded)\n         self.assertIs(reloaded.__class__, dynclass)\n \n+    def test_pickle_values_queryset(self):\n+        happening = Happening.objects.create(name='test_event')\n+        qs = Happening.objects.values('name')\n+        reloaded_qs = Happening.objects.all()\n+        reloaded_qs.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertEqual(list(reloaded_qs)[0], {'name': happening.name})\n+\n+    def test_pickle_values_list_flat_queryset(self):\n+        happening = Happening.objects.create(name='test_event')\n+        qs = Happening.objects.values_list('name', flat=True)\n+        reloaded_qs = Happening.objects.all()\n+        reloaded_qs.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertEqual(list(reloaded_qs)[0], happening.name)\n+\n+    def test_pickle_values_list_named_queryset(self):\n+        happening = Happening.objects.create(name='test_event')\n+        qs = Happening.objects.values_list('name', named=True)\n+        reloaded_qs = Happening.objects.all()\n+        reloaded_qs.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertEqual(list(reloaded_qs)[0].name, happening.name)\n+\n     def test_specialized_queryset(self):\n         self.assert_pickles(Happening.objects.values('name'))\n         self.assert_pickles(Happening.objects.values('name').dates('when', 'year'))\n",
  "django__django-13449": "diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\nindex fb67168..083a6a7 100644\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from unittest import mock, skipIf\n \n@@ -13,6 +14,8 @@ from django.db.models.functions import (\n )\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n+from decimal import Decimal\n+from django.db.models import FloatField\n from .models import Employee\n \n \n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..49149bc 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -24,7 +24,14 @@ class JSONFieldTest(SimpleTestCase):\n         with self.assertRaisesMessage(ValidationError, 'Enter a valid JSON.'):\n             field.clean('{some badly formed: json}')\n \n-    def test_prepare_value(self):\n+    def test_unicode_jsonfield(self):\n+        field = JSONField()\n+        # Test JSONField with Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        # Test JSONField with emojis\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test JSONField with mixed unicode and ASCII\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d\uff0c\u4e16\u754c', 'ja\u017a\u0144']), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..e2a3899 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,7 +6602,41 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_append_slash_true_with_script_name_prefixed(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/some_other_prefix/')\n+    def test_missing_slash_append_slash_true_with_different_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/some_other_prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6628,7 +6662,41 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertEqual(response.status_code, 404)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_append_slash_true_with_script_name_prefixed(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/some_other_prefix/')\n+    def test_missing_slash_append_slash_true_with_different_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/some_other_prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..acc9e20 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,6 +1630,22 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n+    def test_aggregation_default_after_annotation_with_sum(self):\n+        result = Book.objects.annotate(\n+            double_id=F('id') * 2,\n+        ).aggregate(total=Sum('double_id', default=0))\n+        expected_sum = sum(Book.objects.values_list('id', flat=True)) * 2\n+        self.assertEqual(result['total'], expected_sum)\n+\n+    def test_aggregation_default_after_annotation_with_avg(self):\n+        result = Book.objects.annotate(\n+            rating_adjusted=F('rating') + 1.0,\n+        ).aggregate(average=Avg('rating_adjusted', default=1.0))\n+        num_books = Book.objects.count()\n+        ratings_sum = sum(Book.objects.values_list('rating', flat=True)) + num_books\n+        expected_average = ratings_sum / num_books if num_books > 0 else 1.0\n+        self.assertAlmostEqual(result['average'], expected_average, places=2)\n+\n     def test_exists_none_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n@@ -1642,4 +1658,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..b7d0f12 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2984,7 +2984,15 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Reverse is a no-op.\n+        # Test renaming back using the same operation to ensure old name is restored\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"pony_weight_pink_idx\")\n+\n+        # Now reapply the rename operation\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..05956d9 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -595,6 +595,12 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         )\n \n \n+from django.db import connection, migrations, models\n+from django.db.migrations.state import ProjectState\n+from django.test import override_settings\n+from django.test.utils import skipUnlessDBFeature\n+from django.test import TestCase\n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..9836727 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,8 +3496,73 @@ class FormFieldCallbackTests(SimpleTestCase):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+from django.test import TestCase\n+from django import forms\n+from django.forms import modelform_factory\n+from .models import Person  # Assuming Person is defined in models.py\n+\n+class ModelFormTest(TestCase):\n+    def test_custom_callback_in_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class NewForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"id\", \"name\"]\n+                formfield_callback = callback\n+\n+        for field in NewForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_custom_callback_from_base_form_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        NewForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        class InheritedForm(NewForm):\n+            pass\n+\n+        for name, field in NewForm.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+            self.assertEqual(\n+                type(field.widget),\n+                type(InheritedForm.base_fields[name].widget),\n+            )\n+\n+    def test_factory_form_uses_meta_formfield_callback(self):\n+        class CustomForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['name']\n+                formfield_callback = lambda db_field, **kwargs: forms.CharField(required=True)\n+\n+        FactoryForm = modelform_factory(Person, form=CustomForm)\n+\n+        form = FactoryForm()\n+        self.assertTrue(form.fields['name'].required)\n+\n+    def test_override_formfield_callback_in_factory(self):\n+        def custom_callback(db_field, **kwargs):\n+            return forms.CharField(required=True)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['name']\n+                formfield_callback = lambda db_field, **kwargs: forms.CharField()\n+\n+        FactoryForm = modelform_factory(Person, form=BaseForm, formfield_callback=custom_callback)\n \n-class LocalizedModelFormTest(TestCase):\n+        form = FactoryForm()\n+        self.assertTrue(form.fields['name'].required)\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..cf34b0e 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -5,7 +5,9 @@ import re\n \n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n-from django.core.serializers.json import DjangoJSONEncoder\n+from django.core.serializers import serialize\n+from django.db.models import Manager\n+from django.core.exceptions import FieldError\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n@@ -15,6 +17,11 @@ from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n \n+class TestTagManager(Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        return qs.select_related(\"master\")\n+\n class JsonSerializerTestCase(SerializersTestBase, TestCase):\n     serializer_name = \"json\"\n     pkless_str = \"\"\"[\n@@ -67,7 +74,31 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             if field_name in obj_dict[\"fields\"]\n         ]\n \n-    def test_indentation_whitespace(self):\n+    def test_m2m_serialization_with_custom_manager_select_related_error(self):\n+        \"\"\"\n+        Serialization of many-to-many relation with a custom manager using\n+        select_related should raise FieldError due to deferred and traversed fields.\n+        \"\"\"\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = Test.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+        test_instance.save()\n+\n+        with self.assertRaises(FieldError):\n+            serialize(\"json\", [test_instance])\n         s = serializers.json.Serializer()\n         json_data = s.serialize([Score(score=5.0), Score(score=6.0)], indent=2)\n         for line in json_data.splitlines():\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..8a26ca5 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -222,7 +222,22 @@ def test_mpl_toolkits():\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n \n-def test_standard_norm():\n+def test_dpi_unpickle_m1_mac():\n+    fig = mfigure.Figure(dpi=100)  # Start with a specific DPI\n+    original_dpi = fig.dpi  # Store the original DPI for comparison\n+    pickled = pickle.dumps(fig)\n+    fig_unpickled = pickle.loads(pickled)\n+    assert fig_unpickled.dpi == original_dpi, f\"Expected DPI to be {original_dpi}, but got {fig_unpickled.dpi}\"\n+    \n+    # Run the unpickling in a loop to ensure it does not double the DPI\n+    for _ in range(10):\n+        pickled = pickle.dumps(fig_unpickled)\n+        fig_unpickled = pickle.loads(pickled)\n+        assert fig_unpickled.dpi == original_dpi, f\"Expected DPI to remain {original_dpi}, but got {fig_unpickled.dpi}\"\n+\n+    # Cleanup: remove the pickle file if it were created, for a controlled environment.\n+    if Path('sinus.pickle').exists():\n+        Path('sinus.pickle').unlink()\n     assert type(pickle.loads(pickle.dumps(mpl.colors.LogNorm()))) \\\n         == mpl.colors.LogNorm\n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..2da74d8 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6600,6 +6600,10 @@ def test_integrate(dask):\n     actual = da.integrate((\"y\", \"x\"))\n     assert actual.ndim == 0\n \n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"x\")\n+\n+    # Test using coord instead of dim\n     with pytest.raises(ValueError):\n         da.integrate(\"x2d\")\n \n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..63e5fb3 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -131,6 +131,36 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     assert assertString in output.err\n \n \n+# Additional test to verify regular expressions with commas in quantifiers are handled correctly\n+\n+import pytest\n+from pylint.lint import Run\n+import re\n+from typing import Any\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+    (\"foo{1,3}, bar{2,4}\", [\"foo{1,3}\", \"bar{2,4}\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one or more commas within quantifier expressions.\"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-name-rgxs={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..e732eeb 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,7 +1156,42 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n-def test_importorskip():\n+def test_does_not_eagerly_collect_packages(testdir):\n+    testdir.makepyfile(\"def test(): pass\")\n+    pydir = testdir.mkpydir(\"foopkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n+\n+def test_does_not_put_src_on_path(testdir):\n+    # `src` is not on sys.path so it should not be importable\n+    testdir.tmpdir.join(\"src/nope/__init__.py\").ensure()\n+    testdir.makepyfile(\n+        \"import pytest\\\\n\",\n+        \"def test():\\\\n\",\n+        \"    with pytest.raises(ImportError):\\\\n\",\n+        \"        import nope\\\\n\"\n+    )\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n+\n+def test_skipping_imports_in_collected_init_py(testdir):\n+    # Create a nested package structure with `__init__.py` files\n+    pkg = testdir.mkpydir(\"nestedpkg\")\n+    sub_pkg1 = pkg.mkdir(\"subpkg1\")\n+    sub_pkg2 = pkg.mkdir(\"subpkg2\")\n+\n+    sub_pkg1.join(\"__init__.py\").write(\"raise ImportError('import error from subpkg1')\")\n+    sub_pkg2.join(\"__init__.py\").write(\"raise ImportError('import error from subpkg2')\")\n+\n+    # There should be no error from importing these __init__.py files during collection\n+    testdir.makepyfile(\"\"\"\n+    def test_pass():\n+        assert True\n+    \"\"\")\n+\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n     with pytest.raises(\n         pytest.skip.Exception,\n         match=\"^could not import 'doesnotexist': No module named .*\",\n@@ -1184,4 +1219,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..50aa1e4 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -136,7 +136,11 @@ def test_syntax_errors(expr: str, column: int, message: str) -> None:\n     ),\n )\n def test_valid_idents(ident: str) -> None:\n-    assert evaluate(ident, {ident: True}.__getitem__)\n+    if ident in [\"None\", \"True\", \"False\"]:\n+        with pytest.raises(AssertionError):\n+            evaluate(ident, {ident: True}.__getitem__)\n+    else:\n+        assert evaluate(ident, {ident: True}.__getitem__)\n \n \n @pytest.mark.parametrize(\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..6141aaf 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -258,5 +258,33 @@ def test_set_output_mro():\n \n     class C(A, B):\n         pass\n+    assert C().transform(None) == \"B\"\n \n-    assert C().transform(None) == \"B\"\n+def test_feature_union_with_pandas_output():\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X, y=None, **kwargs):\n+            return self\n+\n+        def transform(self, X, y=None):\n+            return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Set pandas output configuration\n+    set_config(transform_output=\"pandas\")\n+\n+    # Create feature union\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+\n+    # Fit and transform\n+    result = union.fit_transform(data)\n+\n+    # Check if result is a pandas DataFrame\n+    assert isinstance(result, pd.DataFrame)\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..00efbb1 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -266,8 +266,17 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+def test_autodoc_typehints_description_none_link():\n+    # Test that with autodoc_typehints='description', `None` is linked correctly\n+    doctree = _parse_annotation(\"None\", config={\"autodoc_typehints\": \"description\"})\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n \n-def test_pyfunction_signature(app):\n+\n+def test_autodoc_typehints_signature_none_no_link():\n+    # Test that with autodoc_typehints='signature', `None` is not linked\n+    doctree = _parse_annotation(\"None\", config={\"autodoc_typehints\": \"signature\"})\n+    assert_node(doctree, \"None\")\n     text = \".. py:function:: hello(name: str) -> str\"\n     doctree = restructuredtext.parse(app, text)\n     assert_node(doctree, (addnodes.index,\n@@ -742,4 +751,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..8b84352 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1096,6 +1096,62 @@ Do as you please\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n \n class NumpyDocstringTest(BaseDocstringTest):\n     docstrings = [(\n@@ -1332,6 +1388,62 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n         config = Config(napoleon_use_param=True)\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n@@ -1340,6 +1452,62 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_without_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n@@ -1355,6 +1523,62 @@ param1 : MyClass instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n         config = Config(napoleon_use_param=True)\n         actual = str(NumpyDocstring(dedent(docstring), config))\n         expected = \"\"\"\\\n@@ -1363,6 +1587,62 @@ param1 : MyClass instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_see_also_refs(self):\n         docstring = \"\"\"\\\n numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n@@ -1388,6 +1668,62 @@ numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n         docstring = \"\"\"\\\n numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n \n@@ -1414,6 +1750,62 @@ numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_colon_in_return_type(self):\n         docstring = \"\"\"\n Summary\n@@ -1437,6 +1829,62 @@ Summary\n \n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_underscore_in_attribute(self):\n         docstring = \"\"\"\n Attributes\n@@ -1457,6 +1905,62 @@ arg_ : type\n \n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_underscore_in_attribute_strip_signature_backslash(self):\n         docstring = \"\"\"\n Attributes\n@@ -1478,6 +1982,62 @@ arg_ : type\n \n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_raises_types(self):\n         docstrings = [(\"\"\"\n Example Function\n@@ -1681,6 +2241,62 @@ Example Function\n         actual = str(NumpyDocstring(docstring, config, app, \"method\"))\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_section_header_underline_length(self):\n         docstrings = [(\"\"\"\n Summary line\n@@ -1927,6 +2543,62 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n         expected = \"\"\"One line summary.\n \n :Parameters: * **no_list** (:class:`int`)\n@@ -2019,6 +2691,62 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_token_type(self):\n         tokens = (\n             (\"1\", \"literal\"),\n@@ -2201,6 +2929,62 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_combined_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+\n+        \"\"\"\n+\n+        # Test without using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test using the sphinx napoleon_use_param directive\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n \n @contextmanager\n def warns(warning, match):\n",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..10b2237 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,8 +1008,63 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_multiple_union_types(app):\n+    text = (\".. py:function:: multi_type_func\\n\"\n+            \"\\n\"\n+            \"   :param data: can be multiple types\\n\"\n+            \"   :type data: int | str | float\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[1][1][0][0], ([nodes.field_name, \"Parameters\"],\n+                                      [nodes.field_body, nodes.paragraph]))\n+\n+    assert_node(doctree[1][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\")\n+    assert_node(doctree[1][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\")\n+    assert_node(doctree[1][1][0][0][1][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"float\")\n+\n+\n+def test_class_attribute_union_type(app):\n+    text = (\".. py:class:: Container\\n\"\n+            \"\\n\"\n+            \"   :var content: can hold different types\\n\"\n+            \"   :type content: list | dict\\n\")\n+    doctree = restructuredtext.parse(app, text)\n \n-def test_info_field_list_var(app):\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[1][1][0][0], ([nodes.field_name, \"Variables\"],\n+                                      [nodes.field_body, nodes.paragraph]))\n+\n+    assert_node(doctree[1][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"list\")\n+    assert_node(doctree[1][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\")\n+\n+\n+def test_combined_type_with_union(app):\n+    text = (\".. py:function:: complex_func\\n\"\n+            \"\\n\"\n+            \"   :param numbers: various combinations\\n\"\n+            \"   :type numbers: list[int | str] | None\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[1][1][0][0], ([nodes.field_name, \"Parameters\"],\n+                                      [nodes.field_body, nodes.paragraph]))\n+\n+    assert_node(doctree[1][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"list\")\n+    assert_node(doctree[1][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"None\")\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..fa28a25 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -833,11 +833,32 @@ def test_autodoc_typehints_description(app):\n             '   docstring\\n'\n             in context)\n \n-\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n-                                   'autodoc_typehints_description_target': 'documented'})\n-def test_autodoc_typehints_description_no_undoc(app):\n+                                   'autodoc_typehints_description_target': 'documented',\n+                                   'napoleon_google_docstring': True,\n+                                   'napoleon_numpy_docstring': False})\n+def test_autodoc_typehints_description_with_napoleon(app):\n+    # Test if autodoc_typehints_description_target works correctly with Napoleon Google style\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.example_function\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('target.typehints.example_function(param1, param2=2)\\n'\n+            '\\n'\n+            '   Description.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **param1** (*int*) -- First parameter.\\n'\n+            '      **param2** (*int*) -- Second parameter.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      The returned value.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n+            in context)\n     # No :type: or :rtype: will be injected for `incr`, which does not have\n     # a description for its parameters or its return. `tuple_args` does\n     # describe them, so :type: and :rtype: will be added.\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..564cd7b 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,7 +1048,18 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n-def test_conditionset():\n+from sympy.sets import ConditionSet\n+from sympy import symbols, Eq, cos, sin, Reals\n+\n+def test_issue_18188():\n+    x = symbols('x')\n+    # Test case for the specific issue described\n+    result1 = Eq(x*cos(x) - 3*sin(x), 0)\n+    assert result1.as_set() == ConditionSet(x, Eq(x*cos(x) - 3*sin(x), 0), Reals)\n+\n+    # Additional test case similar in context for verification\n+    result2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert result2.as_set() == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..aa3cc9e 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,6 +3265,9 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n+from sympy import symbols, sqf_list\n+x, y = symbols('x y')\n+\n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n@@ -3330,6 +3333,21 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+def test_issue_8695_additional():\n+    p1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result1 = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p1) == expected_result1\n+\n+    p2 = x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2\n+    expected_result2 = (1, [(x - 2, 1), (x**2 - 1, 2)])\n+    assert sqf_list(p2) == expected_result2\n+\n+    p3 = (x - 1)**4 * (x - 2)**2\n+    expected_result3 = (1, [(x - 2, 2), (x - 1, 4)])\n+    assert sqf_list(p3) == expected_result3\n+\n+    p4 = (x**2 + x + 1)**3\n+    expected_result4 = (1, [(x**2 + x + 1, 3)])\n+    assert sqf_list(p4) == expected_result4\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..f35d7ac 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -249,6 +249,9 @@ def test_Poly_from_poly():\n         h, gens=(x, y), field=True).rep == DMP([[QQ(1)], [QQ(1), QQ(0)]], QQ)\n \n \n+from sympy import I, expand, factor\n+from sympy.abc import x, y\n+\n def test_Poly_from_expr():\n     raises(GeneratorsNeeded, lambda: Poly.from_expr(S.Zero))\n     raises(GeneratorsNeeded, lambda: Poly.from_expr(S(7)))\n@@ -3255,7 +3258,11 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+def test_issue_18895():\n+    # Test for issue where factor with extension=True drops a factor of y-1\n+    z = expand((x - 1)*(y - 1))\n+    factored = factor(z, extension=[I])\n+    assert factored == (x - 1)*(y - 1), \"Factorization dropped a necessary factor with extension=True\"\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..829987c 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -11,7 +12,7 @@ from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n-from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n+from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum, Symbol\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n from sympy.core import I, pi\n",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..427dcf8 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,20 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundfield_checkboxselectmultiple_id_for_label(self):\n+        \"\"\"\n+        Test that the id_for_label on subwidgets respects the id set by ChoiceWidget options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id_%s'})\n+            )\n+\n+        form = SomeForm(auto_id='ignored_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..1f55e6a 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,8 +301,38 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n-\n-def check_lasso_selector(**kwargs):\n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n+from matplotlib.testing.widgets import do_event\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..a32d665 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,11 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..c34bfe5 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,46 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_cross_val_predict_multioutputclassifier_predict_proba():\n+    # Generate a multilabel classification problem\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=42)\n+\n+    # Initialize the MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # Obtain predictions using cross_val_predict with method 'predict_proba'\n+    try:\n+        pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+        # Check the shape of the returned probabilities\n+        assert len(pred_proba) == Y.shape[1]  # Should have probabilities for each output\n+        assert all([p.shape[1] == len(np.unique(Y[:, i])) for i, p in enumerate(pred_proba)])  # Ensure correct class probabilities\n+    except AttributeError as e:\n+        pytest.fail(f'Test failed with AttributeError: {e}')\n+\n+# Add an additional test case to test predict_proba directly for completeness\n+def test_multi_output_classifier_predict_proba():\n+    # Generate a multilabel classification problem\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=42)\n+\n+    # Initialize the MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    mo_clf.fit(X, Y)\n+    \n+    # Obtain the prediction probabilities directly\n+    pred_proba = mo_clf.predict_proba(X)\n+    \n+    # Check the shape and consistency of the predicted probabilities\n+    for i, proba in enumerate(pred_proba):\n+        assert proba.shape[1] == len(mo_clf.estimators_[i].classes_)\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..2157d45 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,17 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+def test_issue_13546():\n+    from sympy import Symbol, Product, S\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Additional test cases for other values of n\n+    assert p.subs(n, 1).doit() == S(3)  # (1 + 1/1) = 2 + 1 = 3\n+    assert p.subs(n, 3).doit() == S(63)/8  # (3 + 1) * (3 + 1/2) * (3 + 1/4) = 63/8\n+    assert p.subs(n, 4).doit() == S(819)/64  # (4 + 1) * (4 + 1/2) * (4 + 1/4) * (4 + 1/8) = 819/64\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +366,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}