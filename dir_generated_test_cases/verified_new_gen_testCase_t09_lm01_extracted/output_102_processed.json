{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..fac6cb4 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -128,9 +128,31 @@ def test_arith_oper():\n     with pytest.raises(ModelDefinitionError, match=r\"Unsupported operands for arithmetic operator: .*\"):\n         _arith_oper(sh1, map1)\n \n+from astropy.modeling import models, separable\n+import numpy as np\n+import pytest\n+from numpy.testing import assert_allclose\n \n-@pytest.mark.parametrize(('compound_model', 'result'), compound_models.values())\n-def test_separable(compound_model, result):\n+# Additional test case for nested CompoundModels\n+def test_nested_compound_model_separability():\n+    # Define two Linear1D models\n+    lin1 = models.Linear1D(10)\n+    lin2 = models.Linear1D(5)\n+    \n+    # Create a compound model by combining two Linear1D models\n+    cm = lin1 & lin2\n+    \n+    # Nest the compound model with Pix2Sky_TAN and check for separability\n+    nested_cm = models.Pix2Sky_TAN() & cm\n+    \n+    # Expected separability matrix\n+    expected_matrix = np.array([[ True,  True, False, False],\n+                                [ True,  True, False, False],\n+                                [False, False,  True,  True],\n+                                [False, False,  True,  True]])\n+    \n+    # Assert that the computed separability matrix matches the expected matrix\n+    assert_allclose(separable.separability_matrix(nested_cm), expected_matrix)\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..3d00b23 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,7 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, connect, table_to_hdu\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..1ff18c7 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -419,7 +419,23 @@ class TestDiff(FitsTestCase):\n         assert diff.diff_ratio == 0\n         assert diff.diff_total == 0\n \n-    def test_diff_empty_tables(self):\n+    def test_vla_no_false_difference(self):\n+        \"\"\"\n+        Test that VLAs (variable-length arrays) do not cause false differences.\n+        This addresses the issue where comparing identical files with VLAs\n+        incorrectly reports differences.\n+        \"\"\"\n+        # Create a table with a VLA column\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        file_name = 'vla_test.fits'\n+        hdu.writeto(file_name, overwrite=True)\n+\n+        # Compare the file to itself\n+        diff = fits.FITSDiff(file_name, file_name)\n+\n+        # Ensure no differences are detected\n+        assert diff.identical, \"VLA caused false difference in identical files\"\n         \"\"\"\n         Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/178\n \n@@ -601,7 +617,24 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_identical_files_with_vla(self):\n+        \"\"\"\n+        Test that two identical files with VLAs report as identical.\n+        \"\"\"\n+        # Create a table with a VLA column\n+        col1 = fits.Column('a', format='QD', array=[[1], [1, 2]])\n+        hdu1 = fits.BinTableHDU.from_columns([col1])\n+        hdu1.writeto('vla_diff1.fits', overwrite=True)\n+\n+        col2 = fits.Column('a', format='QD', array=[[1], [1, 2]])\n+        hdu2 = fits.BinTableHDU.from_columns([col2])\n+        hdu2.writeto('vla_diff2.fits', overwrite=True)\n+\n+        # Compare two identical files\n+        diff = fits.FITSDiff('vla_diff1.fits', 'vla_diff2.fits')\n+\n+        # Ensure no differences are detected\n+        assert diff.identical, \"Identical files with VLAs reported as different\"\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..80c2401 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -172,12 +172,23 @@ def test_multiple_solidus():\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n \n-def test_unknown_unit3():\n+def test_unrecognized_unit_equality_with_none():\n+    # Create an UnrecognizedUnit with a silent parse\n+    unrecognized_unit = u.Unit('asdf', parse_strict='silent')\n+    \n+    # Ensure comparison with None does not raise TypeError and is handled correctly\n+    assert unrecognized_unit != None  # noqa\n+    assert not (unrecognized_unit == None)  # noqa\n+    assert unrecognized_unit not in (None, u.m)\n+\n+    # Additional test cases related to None\n+    assert not (None == unrecognized_unit)  # Tests __eq__ symmetry\n+    assert None != unrecognized_unit\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n     assert isinstance(unit, u.UnrecognizedUnit)\n     assert unit.name == \"FOO\"\n \n-    unit2 = u.Unit(\"FOO\", parse_strict='silent')\n+    unit = u.Unit(\"FOO\", parse_strict='silent')\n     assert unit == unit2\n     assert unit.is_equivalent(unit2)\n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..20bd776 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,29 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    bad_versions = ['1', '1.2rc1', '1.14dev']\n+\n+    # Issue: Test the LooseVersion failure with 'dev' versions\n+    test_module.__version__ = '1.14.3'\n+    problematic_versions = ['1.14dev', '1.14.3dev']\n+    for version in problematic_versions:\n+        try:\n+            # Depending on bug context, this may pass or raise a TypeError\n+            assert minversion(test_module, version) is True\n+        except TypeError:\n+            assert True  # Expected outcome\n+\n+    # Pkg_resources-like behavior test for raising versions\n+    good_pkg_resources_versions = ['1.14dev', '1.13.5']\n+    bad_pkg_resources_versions = ['1.14.4dev', '1.15dev']\n+    for version in good_pkg_resources_versions:\n+        assert minversion(test_module, version) is True\n+    for version in bad_pkg_resources_versions:\n+        assert minversion(test_module, version) is False\n+\n+    # Add back in the version introduced in the issue text for thoroughness\n+    good_versions.append('0.12dev')\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..3303768 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,48 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_card_from_unicode_string(self):\n+        \"\"\"\n+        Test loading a Card from a unicode `str` object.\n+        \"\"\"\n+        c = fits.Card.fromstring(\"DEF     = 'def'\")\n+        assert c.keyword == 'DEF'\n+        assert c.value == 'def'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n+    def test_header_fromstring_unicode_string(self):\n+        \"\"\"\n+        Test reading a Header from a unicode `str` string.\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'r') as fobj:\n+            pri_hdr_from_str = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_str['NAXIS']\n+        assert pri_hdr == pri_hdr_from_str\n+        assert pri_hdr.tostring() == pri_hdr_from_str.tostring()\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..9abed9c 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -150,7 +150,23 @@ class TestQuantityCreation:\n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n \n-    def test_copy(self):\n+    def test_float16_preservation(self):\n+        \"\"\"Test that np.float16 values are preserved as np.float16 and not cast to np.float64\"\"\"\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.km)\n+        assert q3_16.dtype == a3_16.dtype\n+        for val, orig in zip(q3_16.value, a3_16):\n+            assert val == orig\n+            assert type(val) == type(orig)\n+\n+    def test_float32_preservation(self):\n+        \"\"\"Test that np.float32 values are preserved as np.float32\"\"\"\n+        a3_32 = np.array([1., 2.], dtype=np.float32)\n+        q3_32 = u.Quantity(a3_32, u.km)\n+        assert q3_32.dtype == a3_32.dtype\n+        for val, orig in zip(q3_32.value, a3_32):\n+            assert val == orig\n+            assert type(val) == type(orig)\n \n         # By default, a new quantity is constructed, but not if copy=False\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..e818526 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,6 +226,17 @@ TEST_DATA = [\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n     (BaseValidator(True), True, None),\n+\n+    # Test cases for URLValidator to check proper encoding of special characters in the userinfo part of URLs\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),  # Invalid: @ in username\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),  # Invalid: / in username\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),  # Invalid: : in password\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),  # Invalid: unencoded @ in password\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),  # Invalid: unencoded / in password\n+    (URLValidator(), 'http://valid-user:valid-pass@example.com', None),  # Valid: no special characters\n+    (URLValidator(), 'http://user%2Fname:pass%40word@example.com', None),  # Valid: encoded special characters\n+    (URLValidator(), 'http://%40username:%2Fpassword@example.com', None),  # Valid: encoded special characters\n+    (URLValidator(), 'http://username:password@invalid-.com', ValidationError), # Invalid domain\n     (BaseValidator(True), False, ValidationError),\n \n     (RegexValidator(), '', None),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..9122878 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -8,6 +9,7 @@ from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n     Max, Min, Sum, Value,\n )\n+from django.db.models.expressions import Case, When\n from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..8573948 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1100,6 +1100,7 @@ class OverrideSettingsTests(SimpleTestCase):\n         django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertIsNone(default_storage.file_permissions_mode)\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644, \"Check default file permissions mode is 0o644\")\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..ca22d70 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,7 +1,9 @@\n+\n import os\n import signal\n from unittest import mock\n \n+import subprocess\n from django.db.backends.postgresql.client import DatabaseClient\n from django.test import SimpleTestCase\n \n@@ -101,7 +103,30 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_pgpassword_via_subprocess_run(self):\n+        \"\"\"\n+        Test that PGPASSWORD is correctly passed to subprocess.run via environment.\n+        \"\"\"\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            # Ensure that the 'PGPASSWORD' in the environment is what we expect.\n+            self.assertIn('PGPASSWORD', env)\n+            self.assertEqual(env['PGPASSWORD'], 'somepassword')\n+            self.subprocess_args = list(*args)\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        self.subprocess_args = None\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+            expected_args = ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname']\n+            self.assertEqual(self.subprocess_args, expected_args)\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_call(*args):\n             handler = signal.getsignal(signal.SIGINT)\n@@ -113,4 +138,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..c519621 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -4,6 +4,7 @@ from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n+from django.contrib.contenttypes.models import ContentType\n from django.test import TransactionTestCase, override_settings\n \n \n@@ -63,4 +64,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..465d15b 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,8 +238,29 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            \"trailingnewline\\n\", \"namewithnewline\\n\",\n+        ]\n+\n+    def test_unicode_validator_newlines(self):\n+        invalid_usernames = [\n+            'trailingnewline\\n', 'namewithnewline\\n',\n         ]\n         v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_newlines(self):\n+        invalid_usernames = [\n+            'trailingnewline\\n', 'namewithnewline\\n',\n+        ]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+        v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n                 v(valid)\n@@ -258,4 +279,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..bda62fe 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -1,5 +1,7 @@\n import os\n \n+import os\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.template import Context\n from django.template.engine import Engine\n@@ -15,7 +17,27 @@ class RenderToStringTest(SimpleTestCase):\n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n-    def test_basic_context(self):\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_on_with_different_data_types(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        # Testing with string, int, and list\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<strong>bold</strong>', 'number': 123, 'list': ['<item>']}),\n+            'obj:&lt;strong&gt;bold&lt;/strong&gt;\\nnumber:123\\nlist:[&#x27;&lt;item&gt;&#x27;]\\n',\n+        )\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..73026e1 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,7 +413,29 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n-    def test_lazy_content(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_list_content(self):\n+        # Test if a list of memoryview objects is concatenated correctly\n+        r = HttpResponse([memoryview(b'part1'), memoryview(b'part2'), memoryview(b'part3')])\n+        self.assertEqual(r.content, b'part1part2part3')\n+\n+    def test_memoryview_with_non_memoryview_content(self):\n+        # Test combination of memoryview and string\n+        r = HttpResponse([memoryview(b'part1'), 'part2', memoryview(b'part3')])\n+        self.assertEqual(r.content, b'part1part2part3')\n+\n+    def test_empty_memoryview_content(self):\n+        # Test an empty memoryview object\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_non_ascii_memoryview_content(self):\n+        # Test non-ASCII bytes in a memoryview\n+        r = HttpResponse(memoryview('caf\u00e9'.encode('utf-8')))\n+        self.assertEqual(r.content, b'caf\\xc3\\xa9')\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n \n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..3fef328 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -635,15 +635,47 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, '<h2>Inner2s</h2>')\n         self.assertNotContains(response, 'Add another Inner2')\n         self.assertNotContains(response, 'id=\"id_inner2_set-TOTAL_FORMS\"')\n-\n-    def test_inline_add_m2m_add_perm(self):\n-        permission = Permission.objects.get(codename='add_book', content_type=self.book_ct)\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(reverse('admin:admin_inlines_author_add'))\n-        # No change permission on Books, so no inline\n-        self.assertNotContains(response, '<h2>Author-book relationships</h2>')\n+        # View-only inlines. Should not be able to add/edit/delete\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n         self.assertNotContains(response, 'Add another Author-Book Relationship')\n-        self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n+\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines. Should not be able to add/edit/delete\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # The field in the inline should be read-only.\n+        self.assertContains(response, '<p>The inline Book</p>')\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n \n     def test_inline_add_fk_add_perm(self):\n         permission = Permission.objects.get(codename='add_inner2', content_type=self.inner_ct)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..1ec5fd4 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1805,7 +1805,13 @@ class ModelOneToOneFieldTests(TestCase):\n         self.assertEqual(list(ImprovedArticleForm.base_fields), ['article'])\n         self.assertEqual(list(ImprovedArticleWithParentLinkForm.base_fields), [])\n \n-    def test_modelform_subclassed_model(self):\n+    def test_model_to_dict_empty_fields(self):\n+        \"\"\"Test model_to_dict with an empty list for 'fields'.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        # When fields is an empty list, it should return an empty dict.\n+        self.assertEqual(model_to_dict(bw, fields={}), {})\n+\n+    def test_model_to_dict_empty_fields(self):\n         class BetterWriterForm(forms.ModelForm):\n             class Meta:\n                 # BetterWriter model is a subclass of Writer with an additional `score` field\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..a4d2853 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..da83d98 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,11 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Test for very small decimals with a specified decimal position\n+            ('1e-199', 2, '0.00'),  # Should not be in exponential notation\n+            ('1e-200', 2, '0.00'),  # Should be '0.00' instead of '1.00e-200'\n+            ('1e-201', 2, '0.00'),  # Testing just beyond the cutoff for consistency\n+            ('1e-300', 10, '0.0000000000'),  # Testing near upper cutoff value\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..3466b9d 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -198,7 +199,14 @@ class Comment(models.Model):\n \n # Models for lookup ordering tests\n \n-class House(models.Model):\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, related_name='actors', on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     name = models.CharField(max_length=50)\n     address = models.CharField(max_length=255)\n     owner = models.ForeignKey('Person', models.SET_NULL, null=True)\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..a88c1d5 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,6 +81,24 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {'PGSSLMODE': 'verify-ca', 'PGSSLROOTCERT': 'root.crt', 'PGSSLCERT': 'client.crt', 'PGSSLKEY': 'client.key'},\n+                {'PGPASSWORD': 'somepassword'},\n+            )\n+        )\n+\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..a86b8aa 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,7 +98,32 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n-    def test_with_join_and_complex_condition(self):\n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_with_exclude_no_match(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_bob=FilteredRelation('book', condition=Q(book__title__iexact='nonexistent title')),\n+            ).exclude(book_bob__isnull=False),\n+            [self.author1, self.author2],\n+        )\n+\n+    def test_with_exclude_multiple_conditions(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation(\n+                    'book',\n+                    condition=Q(book__title__iexact='poem by alice') | Q(book__state=Book.RESERVED),\n+                ),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n                 book_alice=FilteredRelation(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..9c3a4dd 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -28,6 +28,7 @@ class TestUtilsHtml(SimpleTestCase):\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),  # Updated expectation for single quote\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n@@ -35,7 +36,7 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(value=value, output=output):\n                 for pattern in patterns:\n                     with self.subTest(value=value, output=output, pattern=pattern):\n-                        self.check_output(escape, pattern % value, pattern % output)\n+                        self.check_output(html.escape, pattern % value, pattern % output)\n                         self.check_output(escape, lazystr(pattern % value), pattern % output)\n                 # Check repeated values.\n                 self.check_output(escape, value * 2, output * 2)\n",
  "django__django-11292": "",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..c0f4cc5 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,9 +1,31 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n-class RegexPatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+    \n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_same_object_different_calls(self):\n+        # Calling get_resolver with the same URLconf should return the same object\n+        resolver1 = get_resolver()\n+        resolver2 = get_resolver()\n+        self.assertIs(resolver1, resolver2)\n+    \n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_different_object_different_urlconfs(self):\n+        # Calling get_resolver with different URLconfs should return different objects\n+        resolver1 = get_resolver()\n+        resolver2 = get_resolver('urlpatterns.path_dynamic_urls')\n+        self.assertIsNot(resolver1, resolver2)\n \n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n@@ -12,4 +34,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..bfdd8ec 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -115,7 +115,32 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__gte=2, num__lte=3)\n         self.assertNumbersEqual(qs1.union(qs2).order_by(F('num').desc()), [3, 2, 1, 0])\n \n-    def test_union_with_values(self):\n+    def test_change_column_list_with_values_list(self):\n+        # Test changing the list of columns using values_list()\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+\n+        # Test using values_list with multiple columns\n+        result = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(result, ('a', 2))\n+\n+        # Test changing to a single column\n+        result = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(result, (2,))\n+\n+    def test_change_column_list_with_values(self):\n+        # Test changing the list of columns using values()\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+\n+        # Initial query with multiple columns\n+        result = qs1.union(qs1).values('name', 'order').get()\n+        self.assertEqual(result['name'], 'a')\n+        self.assertEqual(result['order'], 2)\n+\n+        # Change to a single column\n+        result = qs1.union(qs1).values('order').get()\n+        self.assertEqual(result['order'], 2)\n         ReservedName.objects.create(name='a', order=2)\n         qs1 = ReservedName.objects.all()\n         reserved_name = qs1.union(qs1).values('name', 'order', 'id').get()\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..7162735 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -365,7 +365,33 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n \n-    def test_encoding(self):\n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_in_message_id(self, mocked_getfqdn):\n+        from django.core.mail.message import DNS_NAME  # Import here to reset DNS_NAME._fqdn\n+\n+        # Resetting DNS_NAME cached value\n+        delattr(DNS_NAME, '_fqdn')\n+        \n+        email = EmailMessage('Subject', 'Body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        \n+        # Check if the Message-ID contains the punycode version of '\u6f22\u5b57'\n+        self.assertIn('@xn--p8s937b>', message['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6b63\u5b97')\n+    def test_non_ascii_dns_in_message_id_different_charset(self, mocked_getfqdn):\n+        from django.core.mail.message import DNS_NAME  # Import here to reset DNS_NAME._fqdn\n+\n+        # Resetting DNS_NAME cached value\n+        delattr(DNS_NAME, '_fqdn')\n+        \n+        email = EmailMessage('Subject', 'Another Body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        \n+        # Check if the Message-ID contains the punycode version of '\u6b63\u5b97'\n+        self.assertIn('@xn--fiq228c>', message['Message-ID'])\n         \"\"\"\n         Regression for #12791 - Encode body correctly with other encodings\n         than utf-8\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..175b3fe 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,13 +1,60 @@\n+\n+class FieldAccessibleViaInstanceTests(CheckTestCase):\n+    \n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+        \n+        class TestModel(Model):\n+            field = PositionField()\n+        \n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+        \n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+        \n+        class TestModel(Model):\n+            pass  # No field defined\n+        \n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)  # This should raise an error\n+        \n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel, \n+            \"The value of 'list_display[0]' refers to 'field', which is not a callable, \"\n+            \"an attribute of 'TestModelAdmin', or an attribute or method on 'app_label.TestModel'.\",\n+            'admin.E108'\n+        )\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n \n+from django.core.exceptions import FieldDoesNotExist\n from .models import (\n     Band, Song, User, ValidationTestInlineModel, ValidationTestModel,\n )\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..9cc6aca 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,8 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from datetime import datetime\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n \n class OrderingTests(TestCase):\n",
  "django__django-11603": "",
  "django__django-11740": "",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..3ebdd7d 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -219,11 +219,41 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_with_kwargs(self):\n+        out = StringIO()\n+        # Test with the first mutually exclusive argument in kwargs\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        # Test with the second mutually exclusive argument in kwargs\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        \n+        # Test without passing any mutually exclusive arguments\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_args(self):\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_with_kwargs(self):\n+        out = StringIO()\n+        # Test with the first mutually exclusive argument in kwargs\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        # Test with the second mutually exclusive argument in kwargs\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        \n+        # Test without passing any mutually exclusive arguments\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..905d2ff 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,27 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_maxlength_attribute(self):\n+        # Test with a custom user model that has a max_length of 255\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+            'email': 'test@example.com',\n+        }\n+        CustomEmailField.objects.create_user(**data)\n+        form = AuthenticationForm(None)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_maxlength_attribute_default(self):\n+        # Test with a user model that defaults to max_length of 254\n+        data = {\n+            'username': '0123456',\n+            'password': 'password',\n+        }\n+        IntegerUsernameUser.objects.create_user(**data)\n+        form = AuthenticationForm(None)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..7932e06 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -247,6 +247,29 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        # Serializing TextTranslatedEnum to ensure that the name, not the value, is used.\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum],\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n@@ -269,15 +292,84 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum('a-value')\", {'import migrations.test_writer'})\n         )\n+\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        # Serializing TextTranslatedEnum to ensure that the name, not the value, is used.\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum],\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\"migrations.test_writer.BinaryEnum(b'a-value')\", {'import migrations.test_writer'})\n         )\n+\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        # Serializing TextTranslatedEnum to ensure that the name, not the value, is used.\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum],\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n         self.assertSerializedResultEqual(\n             IntEnum.B,\n             (\"migrations.test_writer.IntEnum(2)\", {'import migrations.test_writer'})\n         )\n \n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        # Serializing TextTranslatedEnum to ensure that the name, not the value, is used.\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum],\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n         field = models.CharField(default=TextEnum.B, choices=[(m.value, m) for m in TextEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -287,6 +379,29 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextEnum('value-b'))], \"\n             \"default=migrations.test_writer.TextEnum('value-b'))\"\n         )\n+\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        # Serializing TextTranslatedEnum to ensure that the name, not the value, is used.\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum],\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n         field = models.CharField(default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -296,6 +411,29 @@ class WriterTests(SimpleTestCase):\n             \"(b'value-b', migrations.test_writer.BinaryEnum(b'value-b'))], \"\n             \"default=migrations.test_writer.BinaryEnum(b'value-b'))\"\n         )\n+\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        # Serializing TextTranslatedEnum to ensure that the name, not the value, is used.\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum],\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n         field = models.IntegerField(default=IntEnum.A, choices=[(m.value, m) for m in IntEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -306,6 +444,29 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n \n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        # Serializing TextTranslatedEnum to ensure that the name, not the value, is used.\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum],\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..1e97130 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,7 +317,24 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mock(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Overriding current date scenarios\n+        current_test_dates = [\n+            (datetime(2023, 1, 1), 'Wednesday, 31-Dec-72 08:49:37 GMT', datetime(2072, 12, 31, 8, 49, 37)),\n+            (datetime(2023, 1, 1), 'Tuesday, 01-Jan-73 08:49:37 GMT', datetime(1973, 1, 1, 8, 49, 37)),\n+            (datetime(2070, 11, 6), 'Sunday, 31-Dec-20 08:49:37 GMT', datetime(2020, 12, 31, 8, 49, 37)),\n+            (datetime(2099, 11, 6), 'Wednesday, 31-Dec-50 08:49:37 GMT', datetime(2050, 12, 31, 8, 49, 37)),\n+        ]\n+\n+        for current_date, rfc850str, expected_date in current_test_dates:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = current_date\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..8f639e8 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,37 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+    import copy\n+    from django.forms import CharField, Form\n+    from django.test import SimpleTestCase\n+\n+    class FormFieldDeepCopyTests(SimpleTestCase):\n+        def test_field_deep_copy_error_messages(self):\n+            class CustomCharField(CharField):\n+                def __init__(self, **kwargs):\n+                    kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                    super().__init__(**kwargs)\n+\n+            field = CustomCharField()\n+            field_copy = copy.deepcopy(field)\n+            self.assertIsInstance(field_copy, CustomCharField)\n+            self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+        def test_modify_copied_field_error_message(self):\n+            class CustomCharField(CharField):\n+                def __init__(self, **kwargs):\n+                    kwargs['error_messages'] = {'invalid': 'Original error message.'}\n+                    super().__init__(**kwargs)\n+\n+            field = CustomCharField()\n+            field_copy = copy.deepcopy(field)\n+\n+            # Modify the error message of the copied field\n+            field_copy.error_messages['invalid'] = 'Modified error message.'\n+\n+            # Ensure the original field's error message is not affected\n+            self.assertEqual(field.error_messages['invalid'], 'Original error message.')\n+            self.assertEqual(field_copy.error_messages['invalid'], 'Modified error message.')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..6b55eac 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,4 @@\n+\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -7,6 +8,7 @@ from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n \n+from math import ceil\n from .models import (\n     Country, NoFields, NullableFields, Pizzeria, ProxyCountry,\n     ProxyMultiCountry, ProxyMultiProxyCountry, ProxyProxyCountry, Restaurant,\n@@ -206,6 +208,14 @@ class BulkCreateTests(TestCase):\n         self.assertEqual(NoFields.objects.count(), 2)\n \n     @skipUnlessDBFeature('has_bulk_insert')\n+    def test_bulk_create_with_batch_size_override(self):\n+        objs = [Country() for _ in range(1200)]  # Create more objects than typical batch size\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+\n+        # This time set a batch size explicitly, which is larger than max_batch_size\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 500)\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n         with self.assertNumQueries(2):\n@@ -215,6 +225,14 @@ class BulkCreateTests(TestCase):\n             TwoFields.objects.bulk_create(objs, len(objs))\n \n     @skipUnlessDBFeature('has_bulk_insert')\n+    def test_bulk_create_with_batch_size_override(self):\n+        objs = [Country() for _ in range(1200)]  # Create more objects than typical batch size\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+\n+        # This time set a batch size explicitly, which is larger than max_batch_size\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 500)\n     def test_bulk_insert_expressions(self):\n         Restaurant.objects.bulk_create([\n             Restaurant(name=\"Sam's Shake Shack\"),\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..23d0f55 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,36 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.db import models\n+from django.test import TestCase\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_enum_str_behavior(self):\n+        # Ensuring the str() on enum returns expected values\n+        for choice in MyChoice:\n+            with self.subTest(choice=choice):\n+                self.assertEqual(str(choice), choice.value)\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..124cc71 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,7 +148,46 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n-class GetFieldDisplayTests(SimpleTestCase):\n+from django.test import TestCase\n+from django.db import models\n+\n+class OverridingGetFieldDisplayTests(TestCase):\n+\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_overriding_FIELD_display_with_different_value(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'not foo or bar'\n+\n+        f = FooBar(foo_bar=2)\n+        self.assertEqual(f.get_foo_bar_display(), 'not foo or bar')\n+\n+    def test_default_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'foo')\n+\n+        f2 = FooBar(foo_bar=2)\n+        self.assertEqual(f2.get_foo_bar_display(), 'bar')\n+\n+        f_invalid = FooBar(foo_bar=3)\n+        self.assertEqual(f_invalid.get_foo_bar_display(), 3)\n+\n+        f_none = FooBar(foo_bar=None)\n+        self.assertIsNone(f_none.get_foo_bar_display())\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..13d9c9e 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -10,7 +10,8 @@ from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n from django.test.utils import override_settings\n-from django.utils import timezone\n+from django.db import connection\n+from django.db.models import Index\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n@@ -34,7 +35,45 @@ class SchemaIndexesTests(TestCase):\n         )\n         self.assertEqual(index_name, \"indexes_article_c1_a52bd80b123\")\n \n-    def test_index_name(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names on the built-in database backends::\n             * Are truncated as needed.\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..c8f048c 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -11,6 +12,7 @@ from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n \n+from django.db.models import QuerySet\n from .models import Author, Item, ObjectC, Ranking\n \n \n@@ -107,7 +109,28 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_exact_match_with_list(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+        \n+    def test_exact_match_with_tuple(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n+\n+    def test_resolve_lookup_with_queryset(self):\n+        # Create a dummy queryset\n+        dummy_queryset = QuerySet(model=Item).filter(name='test')\n+        query = Query(Item)\n+        where = query.build_where(Q(name=dummy_queryset))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, dummy_queryset)\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..db805c1 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -844,7 +844,26 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n-    def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n+    def test_get_list_editable_queryset_with_advanced_regex_chars_in_prefix(self):\n+        \"\"\"Test _get_list_editable_queryset with regex special chars in the prefix.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow X', load=5, speed=3)\n+        Swallow.objects.create(origin='Swallow Y', load=3, speed=4)\n+        data = {\n+            'form[1].TOTAL_FORMS': '2',\n+            'form[1].INITIAL_FORMS': '2',\n+            'form[1].MIN_NUM_FORMS': '0',\n+            'form[1].MAX_NUM_FORMS': '1000',\n+            'form[1].0-uuid': str(a.pk),\n+            'form[1].0-load': '15',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form[1]')\n+        self.assertEqual(queryset.count(), 1)\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n         Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n",
  "django__django-12155": "",
  "django__django-12193": "",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..4942647 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -252,8 +252,10 @@ class SmallPKData(models.Model):\n # class TimePKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n+from uuid import uuid4\n \n class UUIDData(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid4)\n     data = models.UUIDField(primary_key=True)\n \n \n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..575a8be 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -87,6 +87,31 @@ class SimpleTagTests(TagTestCase):\n             t = self.engine.from_string(\"%s as var %%}Result: {{ var }}\" % entry[0][0:-2])\n             self.assertEqual(t.render(c), \"Result: %s\" % entry[1])\n \n+    def test_simple_tag_with_keyword_defaults(self):\n+        templates = [\n+            # Test case for simple tag with a keyword-only argument and default value\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+            # Test case attempting to provide the same keyword argument multiple times\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            # Test case for inclusion tag with a keyword-only argument and default value\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37\\n'),\n+            # Test case attempting to provide the same keyword argument multiple times\n+            (\"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 kwarg=42 %}'),\n+        ]\n+\n+        for template, expected in templates:\n+            if isinstance(expected, tuple):\n+                expected_message, template_string = expected\n+                with self.assertRaisesMessage(TemplateSyntaxError, expected_message):\n+                    self.engine.from_string(template_string)\n+            else:\n+                t = self.engine.from_string(template)\n+                self.assertEqual(t.render(Context()), expected)\n+\n     def test_simple_tag_errors(self):\n         errors = [\n             (\"'simple_one_default' received unexpected keyword argument 'three'\",\n",
  "django__django-12276": "",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..a7e1115 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -6,6 +7,7 @@ import uuid\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n+from django.template import Context, Template\n from django.utils.translation import gettext_lazy as _\n \n \n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..394b209 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1005,8 +1005,39 @@ class OtherModelTests(SimpleTestCase):\n             from_country = models.ForeignKey(Country, models.CASCADE)\n \n         self.assertEqual(ShippingMethod.check(), [])\n+    @isolate_apps('tests.invalid_models_tests')\n+    def test_onetoone_with_varied_field_order(self):\n+        class Document(models.Model):\n+            pass\n+        \n+        class PickingFirst(Document):\n+            document_ptr = models.OneToOneField(\n+                Document, on_delete=models.CASCADE, parent_link=True, related_name='+'\n+            )\n+            origin = models.OneToOneField(\n+                Document, related_name='picking_first', on_delete=models.PROTECT\n+            )\n+        \n+        self.assertEqual(PickingFirst.check(), [])\n+        \n+        class PickingSecond(Document):\n+            origin = models.OneToOneField(\n+                Document, related_name='picking_second', on_delete=models.PROTECT\n+            )\n+            document_ptr = models.OneToOneField(\n+                Document, on_delete=models.CASCADE, parent_link=True, related_name='+'\n+            )\n+        \n+        self.assertEqual(PickingSecond.check(), [])\n \n-    def test_missing_parent_link(self):\n+    @isolate_apps('tests.invalid_models_tests')\n+    def test_onetoone_missing_parent_link(self):\n+        class Document(models.Model):\n+            pass\n+        \n+        with self.assertRaisesMessage(ImproperlyConfigured, \"Add parent_link=True to tests.invalid_models_tests.PickingMiss.parent.\"):\n+            class PickingMiss(Document):\n+                parent = models.OneToOneField(Document, models.CASCADE)\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Place(models.Model):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..d68dd52 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,14 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings(SECURE_REFERRER_POLICY='')\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY set to an empty string, the middleware adds a\n+        \"Referrer-Policy: same-origin\" header to the response by default.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -254,4 +261,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..190447b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -14,6 +14,7 @@ from django.db.models import (\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n )\n@@ -24,7 +25,7 @@ from django.test.utils import Approximate, isolate_apps\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n-    Result, SimulationRun, Time,\n+    Result, SimulationRun, Time, Manager\n )\n \n \n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..a24e688 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, ManyToManyField, UUIDField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -116,8 +116,20 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n     def test_filtered_many_to_many(self):\n         self.assertFormfield(Band, 'members', widgets.FilteredSelectMultiple,\n                              filter_vertical=['members'])\n-\n-    def test_formfield_overrides(self):\n+    def test_formfield_overrides_m2m_filter_widget(self):\n+        \"\"\"\n+        The autocomplete_fields, raw_id_fields, filter_vertical, and\n+        filter_horizontal widgets for ManyToManyFields may be overridden by\n+        specifying a widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget.widget, forms.CheckboxSelectMultiple)\n         self.assertFormfield(Event, 'start_date', forms.TextInput,\n                              formfield_overrides={DateField: {'widget': forms.TextInput}})\n \n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..766b0f4 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -10,6 +10,8 @@ from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n \n+from django.db import models\n+from django.db.models import Q\n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n )\n@@ -194,7 +196,44 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    def test_in_bulk_with_unique_constraint(self):\n+        class ArticleWithUniqueConstraint(models.Model):\n+            slug = models.CharField(max_length=255)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=[\"slug\"], name=\"article_slug_unique_constraint\"),\n+                ]\n+\n+        article1 = ArticleWithUniqueConstraint.objects.create(slug='unique-slug-1')\n+        article2 = ArticleWithUniqueConstraint.objects.create(slug='unique-slug-2')\n+\n+        # Test retrieving articles using in_bulk with a field having a UniqueConstraint.\n+        self.assertEqual(\n+            ArticleWithUniqueConstraint.objects.in_bulk([article1.slug, article2.slug], field_name='slug'),\n+            {\n+                article1.slug: article1,\n+                article2.slug: article2,\n+            }\n+        )\n+\n+    def test_in_bulk_non_unique_constraint_with_condition(self):\n+        class ModelWithConditionalUniqueConstraint(models.Model):\n+            ean = models.CharField(max_length=100)\n+            is_active = models.BooleanField(default=True)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='active_ean_unique_constraint',\n+                        condition=Q(is_active=True)\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but 'ean' isn't.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            ModelWithConditionalUniqueConstraint.objects.in_bulk(field_name='ean')\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..fa2623a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,25 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_without_wrapper(self):\n+        expr = Value(3, output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_variable_expression(self):\n+        expr = ExpressionWrapper(Value('some_value', output_field=IntegerField()), output_field=IntegerField())\n+        self.assertNotEqual(expr.get_group_by_cols(alias=None), [])\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..7a7993b 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1200,6 +1200,28 @@ class Queries1Tests(TestCase):\n         )\n         self.assertTrue(qs.first())\n \n+    def test_filterable_field_behavior(self):\n+        # Test to ensure filtering with a 'filterable=False' field behaves correctly\n+        extra_info = ExtraInfo.objects.create(info='e3', note=self.n3, value=45, filterable=False)\n+        author = Author.objects.create(name='a5', num=5005, extra=extra_info)\n+        \n+        # Test filter with filterable=True\n+        self.assertSequenceEqual(\n+            Author.objects.filter(extra=self.e2),\n+            [self.a3, self.a4],\n+        )\n+        \n+        # Test filter with filterable=False\n+        self.assertSequenceEqual(\n+            Author.objects.filter(extra=extra_info),\n+            [author],\n+        )\n+\n+    def test_non_filterable_field_error(self):\n+        with self.assertRaises(django.db.utils.NotSupportedError):\n+            # Attempt to filter using a model with `filterable=False` causing NotSupportedError\n+            ProductMetaDataType.objects.filter(filterable=False)\n+\n     def test_excluded_intermediary_m2m_table_joined(self):\n         self.assertSequenceEqual(\n             Note.objects.filter(~Q(tag__annotation__name=F('note'))),\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..a1dbf27 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,52 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referential_foreign_key_ordering(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        author_3 = Author.objects.create(name=\"Author 3\", editor=author_1)\n+        author_4 = Author.objects.create(name=\"Author 4\", editor=author_2)\n+\n+        article_1 = Article.objects.create(author=author_3, headline=\"Article 1\", pub_date=now())\n+        article_2 = Article.objects.create(author=author_4, headline=\"Article 2\", pub_date=now())\n+\n+        # Test ordering by editor name of the author\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor__name'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+        # Test ordering by editor's primary key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+        \n+        # Test ordering by author's name, to validate ordering independent of nested relations\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__name'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+    def test_inverted_self_referential_ordering(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        author_3 = Author.objects.create(name=\"Author 3\", editor=author_1)\n+        author_4 = Author.objects.create(name=\"Author 4\", editor=author_2)\n+\n+        article_1 = Article.objects.create(author=author_3, headline=\"Article 1\", pub_date=now())\n+        article_2 = Article.objects.create(author=author_4, headline=\"Article 2\", pub_date=now())\n+\n+        # Test ordering by editor id in descending order\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +399,52 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referential_foreign_key_ordering(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        author_3 = Author.objects.create(name=\"Author 3\", editor=author_1)\n+        author_4 = Author.objects.create(name=\"Author 4\", editor=author_2)\n+\n+        article_1 = Article.objects.create(author=author_3, headline=\"Article 1\", pub_date=now())\n+        article_2 = Article.objects.create(author=author_4, headline=\"Article 2\", pub_date=now())\n+\n+        # Test ordering by editor name of the author\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor__name'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+        # Test ordering by editor's primary key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+        \n+        # Test ordering by author's name, to validate ordering independent of nested relations\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__name'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+    def test_inverted_self_referential_ordering(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        author_3 = Author.objects.create(name=\"Author 3\", editor=author_1)\n+        author_4 = Author.objects.create(name=\"Author 4\", editor=author_2)\n+\n+        article_1 = Article.objects.create(author=author_3, headline=\"Article 1\", pub_date=now())\n+        article_2 = Article.objects.create(author=author_4, headline=\"Article 2\", pub_date=now())\n+\n+        # Test ordering by editor id in descending order\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..dd97d7d 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -609,6 +609,43 @@ class BaseCacheTests:\n         for i in range(1, initial_count):\n             cull_cache.set('cull%d' % i, 'value', 1000)\n         count = 0\n+        \n+    def test_cull_does_not_fail_when_no_data_to_fetch(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        old_max_entries = cull_cache._max_entries\n+        cull_cache._max_entries = 1  # Force culling to trigger quickly\n+        try:\n+            # Add one entry to initialize\n+            cull_cache.set('first_key', 'value', timeout=1000)\n+            # Simulate a situation where there is no data to fetch for culling\n+            with connections[cull_cache._db].cursor() as cursor:\n+                cull_cache._cull(cull_cache._db, cursor, now=datetime.datetime.now())\n+            # Verify that no exceptions occur and cache still works\n+            cull_cache.set('second_key', 'value', timeout=1000)\n+            self.assertIs(cull_cache.has_key('second_key'), True)\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n+\n+    def test_cull_with_many_deletions(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        old_max_entries = cull_cache._max_entries\n+        cull_cache._max_entries = 2  # Set low max_entries to prompt culling\n+        try:\n+            cull_cache.set('key1', 'value1', timeout=1000)\n+            cull_cache.set('key2', 'value2', timeout=1000)\n+            cull_cache.set('key3', 'value3', timeout=1000)\n+            # At this point, key1 should have been culled due to low max_entries\n+            self.assertIs(cull_cache.has_key('key1'), False)\n+            self.assertIs(cull_cache.has_key('key2'), True)\n+            self.assertIs(cull_cache.has_key('key3'), True)\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n         # Count how many keys are left in the cache.\n         for i in range(1, initial_count):\n             if cull_cache.has_key('cull%d' % i):\n",
  "django__django-13109": "",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..2a16632 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,37 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_reference_mixed_case_app_label(self):\n+        # Test ForeignKey with mixed-case app label reference.\n+        new_apps = Apps()\n+        \n+        class MixedCaseAuthor(models.Model):\n+            class Meta:\n+                app_label = 'MiXeDCaSe_migrations'\n+                apps = new_apps\n+        \n+        class MixedCaseBook(models.Model):\n+            author = models.ForeignKey(MixedCaseAuthor, models.CASCADE)\n+        \n+            class Meta:\n+                app_label = 'MiXeDCaSe_migrations'\n+                apps = new_apps\n+        \n+        class MixedCaseMagazine(models.Model):\n+            authors = models.ManyToManyField(MixedCaseAuthor)\n+        \n+            class Meta:\n+                app_label = 'MiXeDCaSe_migrations'\n+                apps = new_apps\n+        \n+        # Create a project state with these models\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(MixedCaseAuthor))\n+        project_state.add_model(ModelState.from_model(MixedCaseBook))\n+        project_state.add_model(ModelState.from_model(MixedCaseMagazine))\n+        \n+        # Verifying the models are registered under the apps\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..57cf99c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1491,6 +1491,13 @@ class FTimeDeltaTests(TestCase):\n                 self.assertEqual(obj.duration, obj.estimated_time + delta)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_date_subtraction(self):\n         queryset = Experiment.objects.annotate(\n             completion_duration=ExpressionWrapper(\n@@ -1520,6 +1527,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertIsNone(queryset.first().shifted)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_date_subquery_subtraction(self):\n         subquery = Experiment.objects.filter(pk=OuterRef('pk')).values('completed')\n         queryset = Experiment.objects.annotate(\n@@ -1530,6 +1544,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_date_case_subtraction(self):\n         queryset = Experiment.objects.annotate(\n             date_case=Case(\n@@ -1547,6 +1568,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertEqual(queryset.get(), self.e0)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_time_subtraction(self):\n         Time.objects.create(time=datetime.time(12, 30, 15, 2345))\n         queryset = Time.objects.annotate(\n@@ -1573,6 +1601,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertIsNone(queryset.first().shifted)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_time_subquery_subtraction(self):\n         Time.objects.create(time=datetime.time(12, 30, 15, 2345))\n         subquery = Time.objects.filter(pk=OuterRef('pk')).values('time')\n@@ -1584,6 +1619,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_datetime_subtraction(self):\n         under_estimate = [\n             e.name for e in Experiment.objects.filter(estimated_time__gt=F('end') - F('start'))\n@@ -1608,6 +1650,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertIsNone(queryset.first().shifted)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_datetime_subquery_subtraction(self):\n         subquery = Experiment.objects.filter(pk=OuterRef('pk')).values('start')\n         queryset = Experiment.objects.annotate(\n@@ -1618,6 +1667,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_datetime_subtraction_microseconds(self):\n         delta = datetime.timedelta(microseconds=8999999999999999)\n         Experiment.objects.update(end=F('start') + delta)\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..637faa3 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,6 @@\n import operator\n \n+import operator\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -39,7 +40,12 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    @skipUnlessDBFeature('supports_select_difference')\n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        self.assertSequenceEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n         qs2 = Number.objects.filter(num__lte=4)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..5ef1dfb 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -330,7 +330,22 @@ class SessionTestsMixin:\n         # The failed decode is logged.\n         self.assertIn('corrupted', cm.output[0])\n \n-    def test_actual_expiry(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_legacy_encode_decode(self):\n+        # Test encoding and decoding using the legacy method with sha1.\n+        data = {'test_key_legacy': 'test_value_legacy'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_legacy_decode_with_corrupted_data(self):\n+        # Test handling of corrupted data in legacy decode.\n+        corrupted_encoded = base64.b64encode(b'incorrect:data').decode('ascii')\n+        with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n+            self.assertEqual({}, self.session._legacy_decode(corrupted_encoded))\n+        self.assertIn('corrupted', cm.output[0])\n         # this doesn't work with JSONSerializer (serializing timedelta)\n         with override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer'):\n             self.session = self.backend()  # reinitialize after overriding settings\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..6f76c44 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -11,6 +11,12 @@ from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n+from django.test import TestCase\n+from django.shortcuts import get_object_or_404\n+from django.urls import path\n+from django.http import HttpResponse\n+from django.views.generic import TemplateView\n+from .models import Artist, Account  # Assuming Account model is defined similarly to Artist\n \n \n class SimpleView(View):\n",
  "django__django-13315": "",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..c49e908 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -20,7 +20,9 @@ from django.core.files.storage import (\n from django.core.files.uploadedfile import (\n     InMemoryUploadedFile, SimpleUploadedFile, TemporaryUploadedFile,\n )\n+from django.core.files.storage import DefaultStorage\n from django.db.models import FileField\n+from .models import callable_storage\n from django.db.models.fields.files import FileDescriptor\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..0094765 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,7 +632,20 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n-    def test_key_icontains(self):\n+    def test_key_in_lookup_on_jsonfield(self):\n+        # Create a list of test cases\n+        tests = [\n+            # The following tests mirror the behavior described in the issue statement\n+            ('our_field__key__in', [0], 312),  # Should return the same as 'our_field__key': 0\n+            ('our_field__key', 0, 312),          # Known working case\n+            # Additional cases to ensure broader testing\n+            ('our_field__key__in', [1, 0], 312), # Expanding with possible additional matches\n+            ('our_field__key__in', [], 0),       # Edge case: empty list\n+        ]\n+        for lookup, value, expected_count in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                queryset = NullableJSONModel.objects.filter(**{lookup: value})\n+                self.assertEqual(queryset.count(), expected_count)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n     def test_key_startswith(self):\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..ce0aa75 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -1133,6 +1133,30 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n+    def test_trunc_with_tzinfo_for_date_and_time(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+\n+        # Create a datetime record in the database\n+        start_datetime = datetime(2023, 3, 10, 12, 30, 45)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            pacific_date=TruncDate('start_datetime', tzinfo=pacific),\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            pacific_time=TruncTime('start_datetime', tzinfo=pacific)\n+        ).get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        pacific_start_datetime = start_datetime.astimezone(pacific)\n+\n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.pacific_date, pacific_start_datetime.date())\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.pacific_time, pacific_start_datetime.time())\n+\n     def test_trunc_ambiguous_and_invalid_times(self):\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..9879a58 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,6 +103,47 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.core.exceptions import FieldError\n+\n+class AbstractModelFieldsTests(SimpleTestCase):\n+\n+    def test_ordering_of_abstract_model_fields(self):\n+        \"\"\"Fields from different models should maintain the order when compared.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertFalse(inherit1_model_field == inherit2_model_field, \"Fields from different models should not be equal.\")\n+        self.assertTrue(inherit1_model_field < inherit2_model_field or inherit2_model_field < inherit1_model_field, \n+                        \"Fields from different models should be ordered consistently.\")\n+\n+    def test_field_errors_with_abstract_model(self):\n+        \"\"\"Confirms that accessing a non-existent field raises an error.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+            \n+            class Meta:\n+                abstract = True\n+        \n+        class InheritAbstractModel(AbstractModel):\n+            pass\n+\n+        with self.assertRaises(FieldError):\n+            InheritAbstractModel._meta.get_field('non_existent_field')\n+\n class ChoicesTests(SimpleTestCase):\n \n     @classmethod\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..abecbf5 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,53 @@\n+\n+class PosixFileLockTestCase(unittest.TestCase):\n+    def test_exclusive_lock_reuse(self):\n+        # This test checks reusing exclusive locks on the same file\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'wb') as f:\n+            self.assertIs(locks.lock(f, locks.LOCK_EX), True)\n+            # Trying to relock the same file without unlocking\n+            self.assertIs(locks.lock(f, locks.LOCK_EX | locks.LOCK_NB), False)\n+            # Unlock the file\n+            self.assertIs(locks.unlock(f), True)\n+            # Relock should now work\n+            self.assertIs(locks.lock(f, locks.LOCK_EX), True)\n+            self.assertIs(locks.unlock(f), True)\n+\n+    def test_shared_lock_reuse(self):\n+        # This test checks reusing shared locks on the same file\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'wb') as f:\n+            self.assertIs(locks.lock(f, locks.LOCK_SH), True)\n+            # Attempt to relock the file in a shared manner without unlocking\n+            self.assertIs(locks.lock(f, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f), True)\n+            # Unlock twice because the file was locked twice\n+            self.assertIs(locks.unlock(f), True)\n+\n+    def test_upgrade_lock(self):\n+        # This test checks the upgrade of lock type: from SH to EX\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'wb') as f:\n+            self.assertIs(locks.lock(f, locks.LOCK_SH), True)\n+            # Attempt to upgrade shared lock to exclusive lock without blocking\n+            self.assertIs(locks.lock(f, locks.LOCK_EX | locks.LOCK_NB), False)\n+            # Properly unlock before changing the lock type\n+            self.assertIs(locks.unlock(f), True)\n+            self.assertIs(locks.lock(f, locks.LOCK_EX), True)\n+            self.assertIs(locks.unlock(f), True)\n+\n+    def test_downgrade_lock(self):\n+        # This test checks the downgrade of lock type: from EX to SH\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'wb') as f:\n+            self.assertIs(locks.lock(f, locks.LOCK_EX), True)\n+            # Attempt to downgrade exclusive lock to shared lock\n+            self.assertIs(locks.lock(f, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f), True)\n+            # Properly unlocking before changing the lock type\n+            self.assertIs(locks.lock(f, locks.LOCK_SH), True)\n+            self.assertIs(locks.unlock(f), True)\n+\n import errno\n import gzip\n import os\n@@ -17,6 +67,8 @@ from django.core.files.uploadedfile import (\n     UploadedFile,\n )\n from django.test import override_settings\n+from django.core.files import locks\n+from pathlib import Path\n \n try:\n     from PIL import Image\n",
  "django__django-13417": "",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..f39e183 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,10 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n-from django.test.utils import ignore_warnings\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -37,6 +39,27 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..65a5133 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,5 @@\n+\n+from django.db.models import Q, UniqueConstraint\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -137,8 +139,24 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n                 id='auth.E005',\n             ),\n         ])\n+    \n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserModelUniqueConstraint')\n+    def test_username_field_with_total_unique_constraint(self):\n+        class UserModelUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = \"username\"\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=[\"username\"],\n+                        name=\"user_username_unq\"\n+                    )\n+                ]\n \n-    def test_non_clashing_custom_permissions(self):\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        # With unique constraint applied, there should be no errors for USERNAME_FIELD uniqueness\n+        self.assertEqual(errors, [])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..7d156ff 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1310,8 +1310,41 @@ class AggregateTestCase(TestCase):\n             contact_publisher__isnull=False,\n         ).annotate(count=Count('authors'))\n         self.assertSequenceEqual(books_qs, [book])\n+\n+    def test_aggregation_random_ordering(self):\n+        \"\"\"Random() is not included in the GROUP BY when used for ordering.\"\"\"\n+        authors = Author.objects.annotate(contact_count=Count('book')).order_by('?')\n+        self.assertQuerysetEqual(authors, [\n+            ('Adrian Holovaty', 1),\n+            ('Jacob Kaplan-Moss', 1),\n+            ('Brad Dayley', 1),\n+            ('James Bennett', 1),\n+            ('Jeffrey Forcier', 1),\n+            ('Paul Bissex', 1),\n+            ('Wesley J. Chun', 1),\n+            ('Stuart Russell', 1),\n+            ('Peter Norvig', 2),\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n+\n+    def test_aggregation_with_random_and_specific_fields(self):\n+        \"\"\"Ensures aggregation works even with random ordering and specific fields selected.\"\"\"\n+        authors_with_books = Author.objects.annotate(book_count=Count('book')).values('id', 'name').order_by('?')\n+        self.assertEqual(authors_with_books.count(), 9)\n+        for author in authors_with_books:\n+            self.assertIn('id', author)\n+            self.assertIn('name', author)\n+            self.assertIn('book_count', author)\n+            self.assertTrue(author['book_count'] >= 0)\n+        \n+    def test_random_ordering_with_values_and_annotation(self):\n+        \"\"\"Check if using values along with random ordering retains valid aggregation.\"\"\"\n+        book_counts = Book.objects.annotate(author_name=F('author__name')).values('author_name').annotate(total=Count('id')).order_by('?')\n+        for bc in book_counts:\n+            self.assertIn('author_name', bc)\n+            self.assertIn('total', bc)\n+            self.assertTrue(bc['total'] > 0)\n         # FIXME: GROUP BY doesn't need to include a subquery with\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n",
  "django__django-13590": "",
  "django__django-13658": "",
  "django__django-13670": "",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..8fa6abb 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,10 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..7180c9c 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,68 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_create_model_and_clear_all_model_options(self):\n+        \"\"\"\n+        Test that CreateModel and multiple AlterModelOptions with clearing operations result in a CreateModel\n+        with no options, verifying that altered options are properly unset.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                    options={\n+                        \"verbose_name\": \"My Model\",\n+                        \"ordering\": [\"-created\"],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    \"MyModel\",\n+                    options={\"verbose_name\": \"My Model v2\"}\n+                ),\n+                migrations.AlterModelOptions(\n+                    \"MyModel\",\n+                    options={}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_redundant_options_update(self):\n+        \"\"\"\n+        Test that CreateModel followed by redundant AlterModelOptions with the same options \n+        doesn't result in incorrect options being set.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                    options={\n+                        \"verbose_name\": \"My Model\",\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    \"MyModel\",\n+                    options={\"verbose_name\": \"My Model\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                    options={\n+                        \"verbose_name\": \"My Model\",\n+                    },\n+                ),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n@@ -134,6 +196,68 @@ class OptimizerTests(SimpleTestCase):\n             [],\n         )\n \n+    def test_create_model_and_clear_all_model_options(self):\n+        \"\"\"\n+        Test that CreateModel and multiple AlterModelOptions with clearing operations result in a CreateModel\n+        with no options, verifying that altered options are properly unset.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                    options={\n+                        \"verbose_name\": \"My Model\",\n+                        \"ordering\": [\"-created\"],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    \"MyModel\",\n+                    options={\"verbose_name\": \"My Model v2\"}\n+                ),\n+                migrations.AlterModelOptions(\n+                    \"MyModel\",\n+                    options={}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_redundant_options_update(self):\n+        \"\"\"\n+        Test that CreateModel followed by redundant AlterModelOptions with the same options \n+        doesn't result in incorrect options being set.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                    options={\n+                        \"verbose_name\": \"My Model\",\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    \"MyModel\",\n+                    options={\"verbose_name\": \"My Model\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[],\n+                    options={\n+                        \"verbose_name\": \"My Model\",\n+                    },\n+                ),\n+            ],\n+        )\n+\n     def test_create_alter_unique_delete_model(self):\n         self._test_create_alter_foo_delete_model(migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]))\n \n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..c8a0428 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,4 +1,6 @@\n+\n from datetime import date, timedelta\n+from django.utils.translation import gettext_lazy, lazy\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n@@ -42,6 +44,27 @@ class AddTests(SimpleTestCase):\n         self.assertEqual(output, '(3, 4, 1, 2)')\n \n     @setup({'add07': '{{ d|add:t }}'})\n+\n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n     def test_add07(self):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n",
  "django__django-13807": "diff --git a/tests/backends/models.py b/tests/backends/models.py\nindex a2fd310..478d44b 100644\n--- a/tests/backends/models.py\n+++ b/tests/backends/models.py\n@@ -134,9 +134,17 @@ class RawData(models.Model):\n     raw_data = models.BinaryField()\n \n \n+class SQLKeywordsModel(models.Model):\n+    id = models.AutoField(primary_key=True, db_column='select')\n+    reporter = models.ForeignKey('Reporter', models.CASCADE, db_column='where')\n+\n+    class Meta:\n+        db_table = 'order'\n+\n+\n class Author(models.Model):\n     name = models.CharField(max_length=255, unique=True)\n \n \n class Book(models.Model):\n-    author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n+    author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..e44d94a 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1342,8 +1342,22 @@ class ManageRunserverMigrationWarning(TestCase):\n             'app_waiting_migration.', output\n         )\n \n+class ManageRunserverSkipChecks(AdminScriptTestCase):\n+    def setUp(self):\n+        super().setUp()\n+        self.stdout = StringIO()\n \n-class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n+    def test_skip_checks_option(self):\n+        with mock.patch('django.core.management.commands.runserver.RunserverCommand.check') as mocked_check:\n+            call_command('runserver', skip_checks=True, stdout=self.stdout)\n+            self.assertNotIn('Performing system checks...', self.stdout.getvalue())\n+            mocked_check.assert_not_called()\n+\n+    def test_no_skip_checks_option(self):\n+        with mock.patch('django.core.management.commands.runserver.RunserverCommand.check') as mocked_check:\n+            call_command('runserver', skip_checks=False, stdout=self.stdout)\n+            self.assertIn('Performing system checks...', self.stdout.getvalue())\n+            mocked_check.assert_called()\n     def setUp(self):\n         super().setUp()\n         self.write_settings('settings.py', sdict={\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..efcd203 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -10,6 +11,7 @@ from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n+from importlib import import_module\n \n \n class RecorderTests(TestCase):\n@@ -512,6 +514,36 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_loading_package_without__file__(self):\n+        \"\"\"\n+        To support frozen environments, MigrationLoader loads migrations from\n+        regular packages with no __file__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n+        loader = MigrationLoader(connection)\n+        # __file__ == __spec__.origin or the latter is None and former is\n+        # undefined.\n+        module_file = getattr(test_module, '__file__', None)\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        try:\n+            delattr(test_module, '__file__')\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            if module_file is not None:\n+                test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..6994d3b 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -9,6 +9,9 @@ from unittest import mock\n \n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n+import unittest\n+from unittest import mock\n+from django.db.backends.sqlite3.base import dbapi2, ImproperlyConfigured\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n from django.db.utils import ConnectionHandler\n from django.test import (\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..b9a171f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -155,8 +155,27 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                     frozenset(),\n                 )\n \n+from .test_module import __main__ as test_main\n \n class TestChildArguments(SimpleTestCase):\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', ['pkg_other_than_django/__main__.py', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_pkg_other_than_django(self):\n+        with mock.patch('pkg_other_than_django.__main__.__spec__') as mock_spec:\n+            mock_spec.parent = 'pkg_other_than_django'\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'pkg_other_than_django', 'runserver']\n+            )\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..ed11e26 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -282,7 +282,25 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         )\n \n \n+from django.test import TestCase\n+from ..models import ChoiceModel\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+\n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Create choices for the model choice field tests below.\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+\n+        # Test that the invalid value is included in the error message\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n+\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +325,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..957e609 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,12 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..3b150aa 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .models import CustomAutoFieldModel\n+from .fields import MyWrapper\n \n from .models import Bar, Business, Employee, Foo\n \n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..641980a 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -204,6 +204,21 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('cached', 'css', 'img', 'window.png'), stats['unmodified'])\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n+    def test_no_duplicate_yields_in_post_process(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Ensure no file is yielded more than once.\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n+        # Checking the expected files\n+        expected_files = [\n+            os.path.join('cached', 'css', 'window.css'),\n+            os.path.join('test', 'nonascii.css')\n+        ]\n+        for file in expected_files:\n+            self.assertIn(file, stats['post_processed'])\n \n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n",
  "django__django-14089": "",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..23b4805 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,7 +1,9 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n from django.db.models import (\n+    Count,\n     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n from django.db.models.functions import Upper\n@@ -291,6 +293,21 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Test that Meta.ordering fields are not included in the GROUP BY clause.\n+        \"\"\"\n+        # Setup authors for articles\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+\n+        # Ensure ordering fields do not affect aggregation with group by\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n+\n     def test_extra_ordering_with_table_name(self):\n         self.assertQuerysetEqual(\n             Article.objects.extra(order_by=['ordering_article.headline']), [\n@@ -483,4 +500,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..52b29b3 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,4 +1,6 @@\n-from django.db.models import F, Q\n+\n+from django.db.models import F, Q, Exists, OuterRef\n+from django.contrib.auth import get_user_model\n from django.test import SimpleTestCase\n \n \n@@ -88,7 +90,25 @@ class QTests(SimpleTestCase):\n         self.assertEqual(args, (Q(price__gt=F('discounted_price')),))\n         self.assertEqual(kwargs, {})\n \n-    def test_reconstruct(self):\n+    def test_deconstruct_single_child_exists(self):\n+        # Test deconstructing a Q object with a single Exists child\n+        tagged = get_user_model().objects.filter(username=OuterRef('pk'))\n+        q = Q(Exists(tagged))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_combined_with_exists(self):\n+        # Test combining Q objects with Exists expressions\n+        tagged = get_user_model().objects.filter(username=OuterRef('pk'))\n+        q1 = Q(Exists(tagged))\n+        q2 = Q(username='jim')\n+        q_combined = q1 & q2\n+        path, args, kwargs = q_combined.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (('django.db.models.Q', (Exists(tagged),), {}), ('username', 'jim')))\n+        self.assertEqual(kwargs, {'_connector': 'AND'})\n         q = Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(Q(*args, **kwargs), q)\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..4e04a5a 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,11 +1,35 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n \n+from django.db import models\n+from django.test import SimpleTestCase, override_settings\n+from django.test.utils import isolate_apps\n \n @isolate_apps('model_options')\n class TestDefaultPK(SimpleTestCase):\n+\n+    class MyBigAutoField(models.BigAutoField):\n+        pass\n+\n+    class MySmallAutoField(models.SmallAutoField):\n+        pass\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, self.MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, self.MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.NonexistentAutoField')\n     def test_default_auto_field_setting_nonexistent(self):\n         msg = (\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..a03b2ab 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -182,12 +182,13 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n-    @mock.patch('sys.argv', [__file__, 'runserver'])\n-    @mock.patch('sys.warnoptions', ['error'])\n-    def test_warnoptions(self):\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n-            [sys.executable, '-Werror', __file__, 'runserver']\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver']\n         )\n \n     @mock.patch('sys.warnoptions', [])\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..446a566 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,6 +226,13 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n+    # Newlines and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..18cc675 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,7 +1526,40 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.test import TestCase\n+from django.db.models import Q, Count\n+from .models import Book, Author\n+\n class JoinPromotionTests(TestCase):\n+    def test_having_subquery_select(self):\n+        authors = Author.objects.filter(pk=self.a1.pk)\n+        books = Book.objects.annotate(Count('authors')).filter(\n+            Q(authors__in=authors) | Q(authors__count__gt=2)\n+        )\n+        self.assertEqual(set(books), {self.b1, self.b4})\n+\n+    def test_q_object_or_subquery(self):\n+        # Scenario for triggering the problematic subquery behavior\n+        property_groups = PropertyGroup.objects.agent_groups(management_agent)\n+        queryset = self.annotate(Count(\"agent__property_groups\"))\n+        with self.assertRaises(ProgrammingError):\n+            queryset.filter(\n+                Q(agent__property_groups__in=property_groups)\n+                | Q(agent__property_groups__count=0)\n+            ).distinct()\n+\n+    def test_fix_for_q_object_or_subquery(self):\n+        # Ensure that the fix resolves the issue and no error is thrown\n+        property_groups = PropertyGroup.objects.agent_groups(management_agent)\n+        queryset = self.annotate(Count(\"agent__property_groups\"))\n+        try:\n+            results = queryset.filter(\n+                Q(agent__property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n+                | Q(agent__property_groups__count=0)\n+            ).distinct()\n+            # Perform assertions or checks on results if necessary\n+        except ProgrammingError:\n+            self.fail(\"The Q object with OR logic should not raise a ProgrammingError after the fix.\")\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..c67b4c4 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -179,7 +179,20 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n-    def test_twelve_hour_format(self):\n+    def test_Y_format_year_before_1000(self):\n+        \"\"\"\n+        Test the Y format specifier for years before 1000 to ensure zero-padding.\n+        \"\"\"\n+        test_cases = [\n+            (1, '0001'),\n+            (999, '0999'),\n+            (123, '0123'),\n+            (42, '0042'),\n+            (7, '0007')\n+        ]\n+        for year, expected in test_cases:\n+            with self.subTest(year=year):\n+                self.assertEqual(dateformat.format(datetime(year, 1, 1), 'Y'), expected)\n         tests = [\n             (0, '12'),\n             (1, '1'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..fb097dd 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,6 +38,76 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_kwargs_still_supported(self):\n+        \"\"\"\n+        Ensure that both deprecated 'db' and 'passwd' kwargs are still\n+        supported for backwards compatibility.\n+        \"\"\"\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        \n+        # Testing both deprecated and new options together\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n+    def test_options_non_deprecated_keys_preferred(self):\n+        \"\"\"\n+        Ensure that when both the deprecated and non-deprecated keys\n+        are present, the non-deprecated keys take precedence.\n+        \"\"\"\n+        expected_args = [\n+            'mysql',\n+            '--user=someuser',\n+            '--host=somehost',\n+            '--port=444',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        \n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n         options_port = 555\n@@ -68,6 +138,76 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_kwargs_still_supported(self):\n+        \"\"\"\n+        Ensure that both deprecated 'db' and 'passwd' kwargs are still\n+        supported for backwards compatibility.\n+        \"\"\"\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        \n+        # Testing both deprecated and new options together\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n+    def test_options_non_deprecated_keys_preferred(self):\n+        \"\"\"\n+        Ensure that when both the deprecated and non-deprecated keys\n+        are present, the non-deprecated keys take precedence.\n+        \"\"\"\n+        expected_args = [\n+            'mysql',\n+            '--user=someuser',\n+            '--host=somehost',\n+            '--port=444',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        \n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n@@ -89,6 +229,76 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_kwargs_still_supported(self):\n+        \"\"\"\n+        Ensure that both deprecated 'db' and 'passwd' kwargs are still\n+        supported for backwards compatibility.\n+        \"\"\"\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        \n+        # Testing both deprecated and new options together\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': settings_port,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': options_port,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n+    def test_options_non_deprecated_keys_preferred(self):\n+        \"\"\"\n+        Ensure that when both the deprecated and non-deprecated keys\n+        are present, the non-deprecated keys take precedence.\n+        \"\"\"\n+        expected_args = [\n+            'mysql',\n+            '--user=someuser',\n+            '--host=somehost',\n+            '--port=444',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        \n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "",
  "django__django-14493": "",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..ef75e4d 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -642,6 +642,58 @@ class ExecutorTests(MigrationTestBase):\n         # Record all replaced migrations as applied\n         recorder.record_applied(\"migrations\", \"0001_initial\")\n         recorder.record_applied(\"migrations\", \"0002_second\")\n+\n+        # Test case to verify unapplied status of squashed migrations when replaced migrations are unapplied.\n+        @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+        def test_unapply_squashed_migration(self):\n+            executor = MigrationExecutor(connection)\n+            # Apply squashed migration\n+            executor.migrate([('migrations', '0001_squashed_0002')])\n+            try:\n+                # Ensure squashed migration is marked as applied\n+                self.assertIn(\n+                    ('migrations', '0001_squashed_0002'),\n+                    executor.recorder.applied_migrations(),\n+                )\n+            finally:\n+                executor.loader.build_graph()\n+                # Unapply the migration\n+                executor.migrate([('migrations', None)])\n+                # Check squashed migration is unapplied too\n+                self.assertNotIn(\n+                    ('migrations', '0001_squashed_0002'),\n+                    executor.recorder.applied_migrations(),\n+                )\n+                # Check replaced migrations are also unapplied\n+                self.assertNotIn(\n+                    ('migrations', '0001_initial'),\n+                    executor.recorder.applied_migrations(),\n+                )\n+                self.assertNotIn(\n+                    ('migrations', '0002_second'),\n+                    executor.recorder.applied_migrations(),\n+                )\n+\n+        # Additional test to check the re-application\n+        @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+        def test_reapply_squashed_migration_after_unapply(self):\n+            executor = MigrationExecutor(connection)\n+            # Apply squashed migration\n+            executor.migrate([('migrations', '0001_squashed_0002')])\n+            # Ensure it's marked as applied\n+            self.assertIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            # Unapply the squashed migration\n+            executor.migrate([('migrations', None)])\n+            # Reapply squashed migration\n+            executor.migrate([('migrations', '0001_squashed_0002')])\n+            # Ensure it's marked as applied again\n+            self.assertIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n \n",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..7840c7a 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -135,7 +135,32 @@ class BulkUpdateTests(TestCase):\n         notes = list(Note.objects.all())\n         Note.objects.bulk_update(notes, ['note'])\n \n-    def test_only_concrete_fields_allowed(self):\n+    def test_bulk_update_return_value_with_empty_queryset(self):\n+        \"\"\"Test that bulk_update returns 0 for an empty queryset.\"\"\"\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_return_value_with_updates(self):\n+        \"\"\"Test that bulk_update returns the correct number of updated rows.\"\"\"\n+        # Create a large batch of Notes.\n+        Note.objects.bulk_create([\n+            Note(note='Note %d' % i, misc='Misc %d' % i)\n+            for i in range(2000)\n+        ])\n+        # Update all rows.\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = 'Updated'\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_return_value_with_duplicates(self):\n+        \"\"\"Test that bulk_update correctly counts rows when there are duplicates.\"\"\"\n+        note = Note.objects.create(note='Original', misc='Original')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)  # Only one row to update\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)  # Each update is counted separately if batch_size is 1.\n         obj = Valid.objects.create(valid='test')\n         detail = Detail.objects.create(data='test')\n         paragraph = Paragraph.objects.create(text='test')\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..9cb95be 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -316,7 +316,53 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(formset.is_valid())\n         self.assertEqual([form.cleaned_data for form in formset.forms], [{'votes': 100, 'choice': 'Calexico'}, {}, {}])\n \n-    def test_formset_validate_max_flag(self):\n+    def test_formset_non_form_errors_css_class(self):\n+        \"\"\"\n+        Test that non-form errors are wrapped with the 'nonform' CSS class in the error list.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '2',\n+            'choices-0-choice': 'Choice 1',\n+            'choices-0-votes': '10',\n+            'choices-1-choice': 'Choice 2',\n+            'choices-1-votes': '20',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=0, max_num=1, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n+\n+    def test_formset_non_form_errors_css_class_multiple(self):\n+        \"\"\"\n+        Test that non-form errors are correctly wrapped with 'nonform' CSS class when multiple errors.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '4',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '2',\n+            'choices-0-choice': 'Choice 1',\n+            'choices-0-votes': '10',\n+            'choices-1-choice': 'Choice 2',\n+            'choices-1-votes': '20',\n+            'choices-2-choice': 'Choice 3',\n+            'choices-2-votes': '30',\n+            'choices-3-choice': 'Choice 4',\n+            'choices-3-votes': '40',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=0, max_num=2, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 2 forms.</li></ul>'\n+        )\n         \"\"\"\n         If validate_max is set and max_num is less than TOTAL_FORMS in the\n         data, a ValidationError is raised. MAX_NUM_FORMS in the data is\n",
  "django__django-14631": "",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..e0490e0 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -3,6 +3,8 @@ from operator import attrgetter\n \n from django.db import IntegrityError\n from django.test import TestCase\n+from django.core.checks import Error\n+from .models import Parent, Child, ManyToManyModel, ProxyParent\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..9d80c18 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,5 +1,45 @@\n+\n+class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+    def serialize_result(self, obj, to_field_name):\n+        return {\n+            **super().serialize_result(obj, to_field_name),\n+            'posted': str(obj.posted),\n+        }\n+\n+\n+class AutocompleteViewTests(TestCase):\n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        self.factory = RequestFactory()\n+        self.url = reverse('admin:appname_modelname_autocomplete')  # Dummy URL; adjust based on actual config.\n+        self.opts = {'app_label': 'appname', 'model_name': 'modelname', 'field_name': 'fieldname'}\n+\n+    def test_serialize_result(self):\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view()(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+\n+        expected_data = {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        }\n+        self.assertEqual(data, expected_data)\n+\n import json\n+import datetime\n from contextlib import contextmanager\n+from django.test import TestCase\n+from .models import Question  # Assume the Question model is defined in models.py.\n \n from django.contrib import admin\n from django.contrib.admin.tests import AdminSeleniumTestCase\n",
  "django__django-14765": "",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..7347f9e 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,7 +195,32 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_to_child(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys._xoptions', {'utf8': True})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_single_xoption(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys._xoptions', {})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_no_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, __file__, 'runserver']\n+        )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -235,8 +260,33 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_to_child(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys._xoptions', {'utf8': True})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_single_xoption(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys._xoptions', {})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_no_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, __file__, 'runserver']\n+        )\n+    @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n         del module.__spec__\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..816d8c7 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -425,8 +425,36 @@ class MethodDecoratorTests(SimpleTestCase):\n                 def __module__(cls):\n                     return \"tests\"\n \n+    def test_method_decorator_preserves_function_attributes(self):\n+        \"\"\"\n+        Ensure that method_decorator preserves __name__ and __module__ attributes of the function.\n+        \"\"\"\n+        from django.utils.decorators import method_decorator\n+        from functools import wraps\n+\n+        def logger(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                try:\n+                    result = func(*args, **kwargs)\n+                except Exception as e:\n+                    result = str(e)\n+                finally:\n+                    # Logging for demonstration purposes; in reality, you might do something else\n+                    print(f\"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}\")\n+                return result\n+            return inner\n \n-class XFrameOptionsDecoratorsTests(TestCase):\n+        class Test:\n+            @method_decorator(logger)\n+            def hello_world(self):\n+                return \"hello\"\n+\n+        instance = Test()\n+        result = instance.hello_world()\n+        self.assertEqual(result, \"hello\")\n+        self.assertEqual(instance.hello_world.__name__, \"hello_world\")\n+        self.assertEqual(instance.hello_world.__module__, __name__)\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..3bbe2a1 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5093,6 +5093,34 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin:admin_views_choice_change', args=(choice.pk,)))\n         self.assertContains(response, '<div class=\"readonly\">No opinion</div>', html=True)\n \n+    from django.urls import reverse\n+    from django.utils.http import quote\n+    from .models import ReadOnlyRelatedField, Language\n+    from .admin import site2\n+    \n+    def _test_readonly_foreignkey_links(self, admin_site_name):\n+        \"\"\"\n+        Helper function to test readonly ForeignKey links on different admin sites.\n+        \"\"\"\n+        obj = ReadOnlyRelatedField.objects.create(field='Test Field', language=Language.objects.create(name='English'))\n+        response = self.client.get(reverse(f'{admin_site_name}:admin_views_readonlyrelatedfield_change', args=(obj.pk,)))\n+        \n+        # Check that the link points to the correct admin URL based on the admin site name\n+        language_url = reverse(f'{admin_site_name}:admin_views_language_change', args=(quote(obj.language.pk),))\n+        self.assertContains(response, f'<div class=\"readonly\"><a href=\"{language_url}\">English</a></div>', html=True)\n+        \n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links on the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links on a custom namespaced admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('site2')\n+        \n     def test_readonly_foreignkey_links(self):\n         \"\"\"\n         ForeignKey readonly fields render as links if the target model is\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..848978c 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,27 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_model_choice_iterator_value_hashable(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        # Test that the value_1 gives the same hash as a new instance with the same pk\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        # Test that different ModelChoiceIteratorValue instances have different hashes\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_model_choice_iterator_value_in_dict(self):\n+        # Test that ModelChoiceIteratorValue can be used as a key in a dictionary\n+        test_dict = {ModelChoiceIteratorValue(self.c1.pk, self.c1): 'first_value'}\n+        self.assertIn(ModelChoiceIteratorValue(self.c1.pk, None), test_dict)\n+\n+    def test_model_choice_iterator_value_comparison(self):\n+        # Test that ModelChoiceIteratorValue comparison works as expected\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        same_value = ModelChoiceIteratorValue(self.c1.pk, None)\n+        different_value = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        \n+        self.assertEqual(value_1, same_value)\n+        self.assertNotEqual(value_1, different_value)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..6b09823 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -792,8 +792,54 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Pony.objects.count(), 2)\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        # Clone the state before applying the rename operation\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Test forwards operation is a no-op\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n \n-    def test_rename_m2m_target_model(self):\n+        # Test backwards operation is a no-op\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_existing_db_table(self):\n+        app_label = 'test_existing_db_table'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Car', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'car'}),\n+            migrations.CreateModel('Driver', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('car', models.ForeignKey('%s.Car' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Car', 'Vehicle')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..1b30be3 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -153,6 +153,35 @@ class ChangeListTests(TestCase):\n         cl = ia.get_changelist_instance(request)\n         self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n \n+    from django.test import TestCase\n+    from django.contrib.admin.sites import AdminSite\n+    from django.contrib.admin.views.main import SEARCH_VAR\n+    from django.db import connection\n+    from django.db.models.signals import post_save\n+    from django.test.utils import CaptureQueriesContext\n+    from .models import Client, ClientOffice\n+    from .admin import ClientAdmin\n+\n+    class ClientAdminTests(TestCase):\n+        def setUp(self):\n+            self.site = AdminSite()\n+            self.client_admin = ClientAdmin(Client, self.site)\n+            self.factory = RequestFactory()\n+            self.superuser = User.objects.create_superuser('admin', 'admin@test.com', 'password')\n+\n+        def test_many_search_terms(self):\n+            client = Client.objects.create(name='Client1')\n+            ClientOffice.objects.create(client=client, name='Office1')\n+            request = self.factory.get('/admin/app/client/', data={SEARCH_VAR: 'Client1 Office1 ' * 20})\n+            request.user = self.superuser\n+            cl = self.client_admin.get_changelist_instance(request)\n+            with CaptureQueriesContext(connection) as context:\n+                object_count = cl.queryset.count()\n+            self.assertEqual(object_count, 1)\n+            # Assert that the SQL query does not have more than expected JOINs\n+            # Allowing just one JOIN as that's necessary for the related lookup\n+            self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 1)\n+\n     def test_result_list_empty_changelist_value(self):\n         \"\"\"\n         Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored\n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..8284508 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n \n+from django.utils.html import json_script\n from ..utils import setup\n \n \n@@ -16,4 +18,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..4f7c239 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2834,11 +2834,65 @@ class AutodetectorTests(TestCase):\n                     expected_number,\n                 )\n \n+class TestCustomFKFieldAutodetector(SimpleTestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n \n-class MigrationSuggestNameTests(SimpleTestCase):\n-    def test_no_operations(self):\n-        class Migration(migrations.Migration):\n-            operations = []\n+    def test_custom_fk_without_deconstruct_modification(self):\n+        class StandardForeignKey(models.ForeignKey):\n+            pass\n+\n+        book_standard_fk_to = ModelState('testapp', 'Book', [\n+            ('author', StandardForeignKey('testapp.Author', on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_standard_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_custom_fk_with_hardcoded_to_and_popfix(self):\n+        class FixedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                kwargs.pop('to', None)\n+                return name, path, args, kwargs\n+\n+        book_fixed_fk_to = ModelState('testapp', 'Book', [\n+            ('author', FixedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_fixed_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n \n         migration = Migration('some_migration', 'test_app')\n         self.assertIs(migration.suggest_name().startswith('auto_'), True)\n",
  "django__django-15127": "",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..d727b7a 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,8 +30,37 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, BaseUser, Annotation, Task,\n )\n+from django.test import TestCase\n+from django.db.models import Q\n+from tests.queries.models import BaseUser, Task, Annotation, Tag\n+\n+class QuerySetCombineAliasTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        tag = Tag.objects.create()\n+        cls.annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = cls.annotation_1.notes.create(tag=tag)\n+        cls.base_user_1 = BaseUser.objects.create(annotation=cls.annotation_1)\n+        cls.base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        cls.task = Task.objects.create(\n+            owner=cls.base_user_2, creator=cls.base_user_2, note=note,\n+        )\n+\n+    def test_conflicting_aliases_during_combine(self):\n+        qs1 = self.annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=self.annotation_1.notes.all()) |\n+            Q(creator__note__in=self.annotation_1.notes.all())\n+        )\n+        # Validate the expected result of each query individually\n+        self.assertSequenceEqual(qs1, [self.base_user_1])\n+        self.assertSequenceEqual(qs2, [self.base_user_2])\n+        # Verify different order of OR operation gives expected results\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [self.base_user_1, self.base_user_2])\n \n \n class Queries1Tests(TestCase):\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..5effbd3 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1764,6 +1764,20 @@ class ValueTests(TestCase):\n         value = Value('name')\n         path, args, kwargs = value.deconstruct()\n         self.assertEqual(path, 'django.db.models.expressions.Value')\n+\n+    def test_deconstruct_f_expression(self):\n+        f_expression = F('field_name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_expression_with_output_field(self):\n+        expression = Value(42, output_field=models.IntegerField())\n+        path, args, kwargs = expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.expressions.Value')\n+        self.assertEqual(args, (42,))\n+        self.assertEqual(kwargs, {'output_field': models.IntegerField()})\n         self.assertEqual(args, (value.value,))\n         self.assertEqual(kwargs, {})\n \n@@ -1771,6 +1785,20 @@ class ValueTests(TestCase):\n         value = Value('name', output_field=CharField())\n         path, args, kwargs = value.deconstruct()\n         self.assertEqual(path, 'django.db.models.expressions.Value')\n+\n+    def test_deconstruct_f_expression(self):\n+        f_expression = F('field_name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_expression_with_output_field(self):\n+        expression = Value(42, output_field=models.IntegerField())\n+        path, args, kwargs = expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.expressions.Value')\n+        self.assertEqual(args, (42,))\n+        self.assertEqual(kwargs, {'output_field': models.IntegerField()})\n         self.assertEqual(args, (value.value,))\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..87f5d44 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,41 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_optimize_foo_together(self):\n+        \"\"\"\n+        Test optimization of consecutive AlterFooTogether operations that can be\n+        reduced to a single operation.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together], [self.author_empty, self.book_foo_together]\n+        )\n+        changes = [\n+            migrations.AlterUniqueTogether(\n+                name='book',\n+                unique_together=set(),\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='book',\n+                index_together=set(),\n+            ),\n+            migrations.AlterUniqueTogether(\n+                name='book',\n+                unique_together={('title', 'author')},\n+            ),\n+            migrations.AlterIndexTogether(\n+                name='book',\n+                index_together={('title', 'author')},\n+            ),\n+        ]\n+\n+        optimized_changes = self.optimizer.optimize(changes, 'otherapp')\n+        self.assertEqual(len(optimized_changes), 2)\n+        self.assertIsInstance(optimized_changes[0], migrations.AlterUniqueTogether)\n+        self.assertIsInstance(optimized_changes[1], migrations.AlterIndexTogether)\n+        self.assertEqual(optimized_changes[0].name, 'book')\n+        self.assertEqual(optimized_changes[1].name, 'book')\n+        self.assertEqual(optimized_changes[0].unique_together, {('title', 'author')})\n+        self.assertEqual(optimized_changes[1].index_together, {('title', 'author')})\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..5ced837 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,7 +1847,29 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n-    def test_resolve_output_field_failure(self):\n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            ('str', 'test'),\n+            (True, True),\n+            (42, 42),\n+            (3.14, 3.14),\n+            (datetime.date(2019, 5, 15), datetime.date(2019, 5, 15)),\n+            (datetime.datetime(2019, 5, 15), datetime.datetime(2019, 5, 15)),\n+            (datetime.time(3, 16), datetime.time(3, 16)),\n+            (datetime.timedelta(1), datetime.timedelta(1)),\n+            (Decimal('3.14'), Decimal('3.14')),\n+            (b'', b''),\n+            (uuid.uuid4(), uuid.uuid4()),\n+        ]\n+        for types, value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                field.clean(value, model_instance=None)\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..5d225bf 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -621,6 +621,29 @@ class SchemaTests(TransactionTestCase):\n         columns = self.column_classes(Author)\n         field_type, field_info = columns['thing']\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n+\n+    def test_add_nullable_o2o_field(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField to a model on SQLite.\n+        \"\"\"\n+        # Create the required tables\n+        with connection.schema_editor() as editor:\n+            editor.create_model(self.Author)\n+            editor.create_model(self.Note)\n+\n+        # Define a nullable OneToOneField\n+        new_field = OneToOneField(self.Note, on_delete=models.CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+\n+        # Add the OneToOneField to the Author model\n+        with connection.schema_editor() as editor:\n+            editor.add_field(self.Author, new_field)\n+\n+        # Verify the field was added properly\n+        columns = self.column_classes(self.Author)\n+        self.assertIn('note_id', columns)\n+        # NOTE: The 6th element in the tuple is the null property\n+        self.assertTrue(columns['note_id'][1][6])\n         # Make sure the values were transformed correctly\n         self.assertEqual(Author.objects.extra(where=[\"thing = 1\"]).count(), 2)\n \n@@ -638,6 +661,14 @@ class SchemaTests(TransactionTestCase):\n             editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n+\n+    def column_classes(self, model):\n+        \"\"\"\n+        Helper method to introspect the columns of a model.\n+        \"\"\"\n+        with connection.cursor() as cursor:\n+            cursor.execute('PRAGMA table_info(%s)' % model._meta.db_table)\n+            return {row[1]: row for row in cursor.fetchall()}\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n \n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..5488df2 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -19,6 +19,15 @@ class Nested:\n \n class BasicFieldTests(SimpleTestCase):\n \n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+        \n+        self.assertEqual(field_hash, hash(field))\n+    \n     def test_show_hidden_initial(self):\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..7c4ac4f 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,7 +204,32 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+    def test_f_expression(self):\n+        # Create multiple entries in the Note model\n+        notes = [Note.objects.create(note='test_note', misc='test_misc') for _ in range(10)]\n+\n+        # Assign an F() expression to each note's misc field\n+        for note in notes:\n+            note.misc = F('note')\n+\n+        # Perform bulk update\n+        Note.objects.bulk_update(notes, ['misc'])\n+\n+        # Assert that all entries have the 'misc' field updated to the 'note' field's value\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n+\n+    def test_f_expression_in_selfref(self):\n+        # Test case similar to the issue described to ensure F() works with SelfRef model\n+        objs = [SelfRef.objects.create(name=f'name_{i}', c8='') for i in range(10)]\n+\n+        for obj in objs:\n+            obj.c8 = F('name')\n+\n+        SelfRef.objects.bulk_update(objs, ['c8'])\n+\n+        for obj in objs:\n+            obj.refresh_from_db()\n+            self.assertEqual(obj.c8, obj.name)\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..8f8fb0d 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,6 +1049,27 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n+    def test_rename_field_and_model_together(self):\n+        \"\"\"Tests autodetector for renaming a model and a field simultaneously.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+\n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..985398f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,24 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+class ExistsEmptySubqueryTests(TestCase):\n+\n+    def test_negated_empty_exists(self):\n+        manager = Manager.objects.create(name='Test Manager')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()), name='Test Manager'\n+        )\n+        self.assertSequenceEqual(list(qs), [manager])\n+\n+    def test_sql_generation_for_negated_empty_exists(self):\n+        manager = Manager.objects.create(name='Test Manager')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()), name='Test Manager'\n+        )\n+        sql, params = qs.query.sql_with_params()\n+        # Here we assert that the generated SQL is not empty and contains a valid WHERE clause\n+        self.assertIn('WHERE', sql.upper())\n+        self.assertIn('NOT EXISTS', sql.upper())\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..df8c28b 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -9,7 +9,52 @@ try:\n except ImportError:\n     from backports import zoneinfo\n \n+# Define a minimal model for testing.\n+class Parent(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+class Inventory(models.Model):\n+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE, blank=True, null=True)\n+\n+class RadioFieldsForeignKeyTest(TestCase):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+                if db_field.name == \"parent\":\n+                    kwargs[\"empty_label\"] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_foreignkey_default_empty_label_when_blank(self):\n+        class MyModelAdmin(ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, _(\"None\"))\n+\n+    def test_radio_fields_foreignkey_no_empty_label_when_not_blank(self):\n+        class CustomInventory(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, blank=False, null=False)\n+\n+        class MyModelAdmin(ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+        ma = MyModelAdmin(CustomInventory, admin.site)\n+        ff = ma.formfield_for_dbfield(CustomInventory._meta.get_field(\"parent\"), request=None)\n+        self.assertIsNone(ff.empty_label)\n+\n from django import forms\n+from django.contrib.admin import widgets\n+from django.contrib.admin.options import ModelAdmin\n+from django.db import models\n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n from django.conf import settings\n from django.contrib import admin\n from django.contrib.admin import widgets\n",
  "django__django-15499": "",
  "django__django-15525": "",
  "django__django-15561": "",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..c0c6c12 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -324,6 +324,28 @@ class LookupTests(TestCase):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n \n+    def test_unregister_lookup_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        with register_lookup(models.ForeignObject, Exactly):\n+            # Ensure lookup is present after registration\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister lookup and check cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()  # Simulate cache clearing operation\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+        field = Article._meta.get_field(\"author\")\n+\n+        # clear and re-cache\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+\n+        # registration should bust the cache\n+        with register_lookup(models.ForeignObject, Exactly):\n+            # getting the lookups again should re-cache\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n \n class BilateralTransformTests(TestCase):\n     def test_bilateral_upper(self):\n",
  "django__django-15572": "",
  "django__django-15731": "",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..715bacd 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,8 +1,10 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n-from django.utils import timezone, translation\n+from django.utils import timezone, translation, formats\n+from django.utils.translation import gettext_lazy\n \n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n@@ -74,7 +76,16 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy_format(self):\n+        # Test get_format with a lazy string\n+        lazy_date_format = gettext_lazy(\"DATE_FORMAT\")\n+        self.assertEqual(formats.get_format(lazy_date_format), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        # Test date template filter with a lazy string\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..fdc705d 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,13 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_on_proxy_model(self):\n+        custom = ProxyCustomModel.objects.create(name=\"Proxy Name\")\n+        another_obj = AnotherModel.objects.create(custom=custom)\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = queryset.get()\n+        self.assertEqual(result.custom.name, \"Proxy Name\")\n+\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..d7f757c 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,52 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_correct_parameter_order(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n+    def test_no_parameters(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n+\n+    def test_multiple_parameters(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\"NAME\": \"dbname\"}, [\"-U\", \"username\", \"-h\", \"localhost\"]\n+            ),\n+            ([\"psql\", \"-U\", \"username\", \"-h\", \"localhost\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_correct_parameter_order(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n+    def test_no_parameters(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n+\n+    def test_multiple_parameters(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\"NAME\": \"dbname\"}, [\"-U\", \"username\", \"-h\", \"localhost\"]\n+            ),\n+            ([\"psql\", \"-U\", \"username\", \"-h\", \"localhost\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..b4299d3 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -74,6 +74,29 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n+    def test_decimal_precision(self):\n+        # This test case checks if the floatformat filter retains precision for Decimal inputs.\n+        # Test a Decimal with higher precision than typical floats.\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\"\n+        )\n+        # Test case with a Decimal that has a long fractional part.\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\"\n+        )\n+        # Test a Decimal with more than typical float precision digits.\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.00000000000000000012345678901234567890\"), 40),\n+            \"0.00000000000000000012345678901234567890\"\n+        )\n+        # Ensure that the filter can round correctly for Decimal inputs\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 15),\n+            \"42.123456789012347\"\n+        )\n+\n     def test_force_grouping(self):\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..0dd6d47 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -405,6 +405,17 @@ class CaseExpressionTests(TestCase):\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n \n+    def test_annotate_case_with_negated_empty_q(self):\n+        # Test to ensure that using ~Q(pk__in=[]) works without crashing\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n             selected=Case(\n@@ -412,6 +423,17 @@ class CaseExpressionTests(TestCase):\n                 default=Value(\"not selected\"),\n             )\n         )\n+\n+    def test_annotate_case_with_negated_empty_q(self):\n+        # Test to ensure that using ~Q(pk__in=[]) works without crashing\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..6b7147f 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -556,6 +557,33 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_default_fixture_path_as_pathlib(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS cannot contain a default fixtures directory\n+        for application (app/fixtures) in order to avoid repeated fixture loading.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            os.path.join(_cur_dir, \"fixtures_1\"),\n+            os.path.join(_cur_dir, \"fixtures_2\"),\n+        ]\n+    )\n+    def test_loaddata_with_duplicate_fixture_dirs(self):\n+        \"\"\"\n+        Ensure that if FIXTURE_DIRS contains duplicates, an error is raised.\n+        \"\"\"\n+        with self.assertRaises(ImproperlyConfigured):\n+            management.call_command(\"loaddata\", \"duplicate.json\", verbosity=0)\n+\n     def test_fixture_dirs_with_default_fixture_path(self):\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n",
  "django__django-16032": "",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..de8fee3 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,13 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [\n+            Combinable.ADD,\n+            Combinable.SUB,\n+            Combinable.MUL,\n+            Combinable.DIV,\n+            Combinable.MOD,  # Added MOD to be tested\n+        ]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..5113bdd 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.urls import reverse\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,15 +404,42 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n-        new_parent = Parent.objects.create(name=\"parent\")\n-        for i in range(1, 201):\n-            Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity_on_partial_failure(self):\n+        # Create two objects\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n \n-        request = self.factory.get(\"/child/\")\n-        request.user = self.superuser\n-        m = CustomPaginationAdmin(Child, custom_site)\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n \n+        # First object will save successfully, second causes a DatabaseError\n+        with mock.patch(\n+            \"django.db.models.BaseModel.save\", side_effect=[None, DatabaseError]\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        \n+        # Ensure neither object has been updated, confirming rollback\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         cl = m.get_changelist_instance(request)\n         cl.get_results(request)\n         self.assertIsInstance(cl.paginator, CustomPaginator)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..28e3df1 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,6 +2400,29 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n+    def test_makemigrations_check_dry_run(self):\n+        \"\"\"\n+        makemigrations --check --dry-run should not create any migration files\n+        and should exit with a non-zero status when there are changes.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\")\n+            # Ensure the migration directory still does not exist, confirming no files were created.\n+            self.assertFalse(os.path.exists(tmpdir))\n+\n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with zero status when there are no changes.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            try:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\")\n+            except SystemExit as e:\n+                self.fail(f\"makemigrations --check exited with non-zero status: {e}\")\n+\n     def test_makemigrations_migration_path_output(self):\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..d13b53c 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,31 @@\n+\n+class HttpMethodNotAllowedTest(SimpleTestCase):\n+\n+    def setUp(self):\n+        self.request_factory = RequestFactory()\n+\n+    def test_sync_view_http_method_not_allowed(self):\n+        class SyncView(View):\n+            def post(self, request, *args, **kwargs):\n+                return HttpResponse(\"ok\")\n+\n+        view = SyncView.as_view()\n+        request = self.request_factory.get('/mock-url/')\n+        response = view(request)\n+        self.assertEqual(response.status_code, 405)\n+        self.assertIsInstance(response, HttpResponseNotAllowed)\n+\n+    def test_async_view_http_method_not_allowed(self):\n+        class AsyncView(View):\n+            async def post(self, request, *args, **kwargs):\n+                return HttpResponse(\"ok\")\n+\n+        view = AsyncView.as_view()\n+        request = self.request_factory.get('/mock-url/')\n+        response = async_to_sync(view)(request)\n+        self.assertEqual(response.status_code, 405)\n+        self.assertIsInstance(response, HttpResponseNotAllowed)\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,8 +34,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+import asyncio\n+from django.test import RequestFactory, SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..9967b96 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,6 @@\n+\n import datetime\n+import urllib.parse\n import re\n from unittest import mock\n \n@@ -25,6 +27,7 @@ from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n+from django.urls import reverse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -892,7 +895,45 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_with_pk(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via pk.\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..9ed3942 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,6 +1600,40 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n+    def test_runner_zero_ip(self):\n+        \"\"\"Test running server with 0 shorthand for 0.0.0.0\"\"\"\n+        with mock.patch(\"django.core.management.commands.runserver.run\"), \\\n+             mock.patch(\"django.core.management.base.BaseCommand.check_migrations\"):\n+            self.output = io.StringIO()\n+            call_command(\n+                self.cmd, \n+                addrport=\"0:8000\", \n+                use_reloader=False, \n+                skip_checks=True, \n+                stdout=self.output,\n+            )\n+            self.assertIn(\n+                \"Starting development server at http://0.0.0.0:8000/\",\n+                self.output.getvalue(),\n+            )\n+\n+    def test_runner_ipv4_zero_shorthand(self):\n+        \"\"\"Test running server with another zero IP pattern\"\"\"\n+        with mock.patch(\"django.core.management.commands.runserver.run\"), \\\n+             mock.patch(\"django.core.management.base.BaseCommand.check_migrations\"):\n+            self.output = io.StringIO()\n+            call_command(\n+                self.cmd,\n+                addrport=\"0:9000\",\n+                use_reloader=False,\n+                skip_checks=True,\n+                stdout=self.output,\n+            )\n+            self.assertIn(\n+                \"Starting development server at http://0.0.0.0:9000/\",\n+                self.output.getvalue(),\n+            )\n+\n     def test_runner_hostname(self):\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..30e3d06 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,6 +508,46 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n+from django.contrib.sitemaps import Sitemap\n+from django.test import TestCase\n+from django.urls import path\n+from django.utils.decorators import override_settings\n+from django.test import Client\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapTests(TestCase):\n+    client = Client()\n+\n+    def test_callable_lastmod_no_items(self):\n+        \"\"\"Test sitemap with callable lastmod and no items does not raise ValueError.\"\"\"\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        # Ensure there isn't a Last-Modified header since there are no items\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        # Verify the response content\n+        expected_content_index = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '  <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\\n'\n+            '</sitemapindex>'\n+        )\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+urlpatterns += [\n+    path(\n+        \"callable-lastmod-no-items/index.xml\",\n+        views.index,\n+        {\"sitemaps\": {\"callable-lastmod\": CallableLastmodNoItemsSitemap}},\n+    ),\n+]\n+\n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..7e99864 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,10 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..8934e6a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n",
  "django__django-16429": "",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..9315520 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,7 +469,47 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n-class UtilsTests(SimpleTestCase):\n+from django.core.management.base import BaseCommand, CommandError\n+from django.test import SimpleTestCase\n+from django.core.management import call_command\n+from io import StringIO\n+\n+class CustomCommandSubparserTests(SimpleTestCase):\n+    def test_subparser_required_argument_error(self):\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers()\n+                foo_parser = subparsers.add_parser(\"foo\")\n+                foo_parser.add_argument(\"bar\", type=int)\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        out = StringIO()\n+        err = StringIO()\n+        try:\n+            call_command(\"foo\", stdout=out, stderr=err)\n+        except CommandError as e:\n+            self.assertIn(\"error: the following arguments are required: bar\", str(e))\n+        self.assertIn(\"manage.py foo: error: the following arguments are required: bar\", err.getvalue())\n+    \n+    def test_subparser_invalid_argument_type_error(self):\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers()\n+                foo_parser = subparsers.add_parser(\"foo\")\n+                foo_parser.add_argument(\"bar\", type=int)\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        out = StringIO()\n+        err = StringIO()\n+        try:\n+            call_command(\"foo\", \"not_an_int\", stdout=out, stderr=err)\n+        except CommandError as e:\n+            self.assertIn(\"argument bar: invalid int value: 'not_an_int'\", str(e))\n+        self.assertIn(\"manage.py foo: error: argument bar: invalid int value: 'not_an_int'\", err.getvalue())\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..734ad43 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -112,6 +112,13 @@ class FunctionTests(SimpleTestCase):\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n \n+    def test_string_zero_value(self):\n+        from decimal import Decimal\n+        from django.template.defaultfilters import floatformat\n+\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+\n     def test_negative_zero_values(self):\n         tests = [\n             (-0.01, -1, \"0.0\"),\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..a6601d6 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,24 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n+    def test_deconstruction_storage_random_choice(self):\n+        \"\"\"\n+        Test that a callable returning either default_storage or another storage\n+        is consistently included during deconstruction.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"my_file\").deconstruct()\n+        # The deconstruction should point to the callable, not evaluated storage.\n+        self.assertEqual(kwargs[\"storage\"], get_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..4b29982 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -8,7 +9,9 @@ from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n+from django.contrib.auth import get_permission_codename\n from .admin import ArticleAdmin, site\n+from .tests import get_perm\n from .models import Article, Question\n from .tests import AdminViewBasicTestCase\n \n@@ -33,6 +36,43 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that the 'show_save_as_new' button requires add permission.\n+        \"\"\"\n+        # User with change permission only\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16560": "",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..ab86bf0 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,20 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+    def test_formset_add_fields_with_none_index(self):\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(initial=None)\n+        \n+        # This is to check if the empty form does not include DELETE field when index is None\n+        self.assertNotIn(\"DELETE\", my_formset.empty_form.fields)\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..5a3220c 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -255,6 +255,8 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..71b3873 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -144,6 +144,39 @@ class ModelAdminTests(TestCase):\n                 \"employee__department__code\",\n             ]\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        # Test that the valid lookups are correctly allowed.\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+        # Test some invalid lookup paths to ensure they are denied.\n+        self.assertIs(ma.lookup_allowed(\"restaurant__country\", \"test_value\"), False)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__invalid\", \"test_value\"), False)\n+\n         ma = EmployeeProfileAdmin(EmployeeProfile, self.site)\n         # Reverse OneToOneField\n         self.assertIs(\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..ca2a758 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,31 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_correct_import_ordering_with_multiple_imports(self):\n+        \"\"\"\n+        Test that generated migration files have imports in the correct order\n+        even when multiple imports are present.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Checking that imports are sorted and conform to the style: `import` then `from ... import`\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..c15cfd2 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -319,6 +319,34 @@ class ImageFieldTwoDimensionsTests(ImageFieldTestMixin, TestCase):\n         # Dimensions were recalculated, and hence file should have opened.\n         self.assertIs(p.mugshot.was_opened, True)\n \n+    def test_post_init_not_connected(self):\n+        from django.db.models import signals\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_when_dimensions_fields_set(self):\n+        class PersonModelWithDimensions(models.Model):\n+            mugshot = models.ImageField(width_field='mugshot_width', height_field='mugshot_height')\n+\n+        person_model_id = id(PersonModelWithDimensions)\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    def test_no_dimensions_fields_no_signal(self):\n+        class PersonModelWithoutDimensions(models.Model):\n+            mugshot = models.ImageField()\n+\n+        person_model_id = id(PersonModelWithoutDimensions)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..d0f0a36 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -783,8 +783,35 @@ class SystemChecksTestCase(SimpleTestCase):\n \n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n+    \n+    def test_readonly_fields_includes_field_name(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"title\", \"nonexistent\")\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is not a callable, an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n \n-    def test_readonly_method_on_model(self):\n+    def test_readonly_fields_includes_field_name_on_inline(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"i_dont_exist\"]\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is not a callable, an attribute of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"readonly_method_on_model\",)\n \n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..19dc7ec 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -19,6 +20,29 @@ class XorLookupsTests(TestCase):\n             self.numbers[:3] + self.numbers[8:],\n         )\n \n+    def test_multiple_xor_conditions(self):\n+        # This test ensures multiple XORs are evaluated correctly\n+        self.assertCountEqual(\n+            Number.objects.filter(\n+                Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7) ^ Q(num__gte=9)\n+            ),\n+            [self.numbers[1], self.numbers[2], self.numbers[5], self.numbers[6], self.numbers[9]]\n+        )\n+\n+    def test_multiple_xor_with_exactly_one_true(self):\n+        # Test to handle exactly one condition true among many\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num=4)),\n+            [self.numbers[1], self.numbers[2], self.numbers[4]]\n+        )\n+\n+    def test_multiple_xor_with_no_true(self):\n+        # Test to handle if no condition is true \n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num=10) ^ Q(num=11) ^ Q(num=12)),\n+            []\n+        )\n+\n     def test_filter_negated(self):\n         self.assertCountEqual(\n             Number.objects.filter(Q(num__lte=7) ^ ~Q(num__lt=3)),\n@@ -64,4 +88,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1e0d80c..7ca28ef 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -29,6 +29,10 @@ from django.db.models import (\n     Variance,\n     When,\n )\n+from django.db.models import Avg, Count, F\n+from django.db.models.functions import Coalesce\n+from django.db.models import Window\n+from myapp.models import Book  # Ensure Book is correctly imported based on your actual app structure\n from django.db.models.expressions import Func, RawSQL\n from django.db.models.functions import (\n     Cast,\n@@ -42,6 +46,10 @@ from django.db.models.functions import (\n     TruncDate,\n     TruncHour,\n )\n+from django.db.models import Avg, Count, F\n+from django.db.models.functions import Coalesce\n+from django.db.models import Window\n+from myapp.models import Book  # Ensure Book is correctly imported based on your actual app structure\n from django.test import TestCase\n from django.test.testcases import skipUnlessDBFeature\n from django.test.utils import Approximate, CaptureQueriesContext\n",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..28d5af6 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -600,9 +600,61 @@ class MakeMigrationsTests(MigrationTestBase):\n \n     def test_makemigrations_consistency_checks_respect_routers(self):\n         \"\"\"\n+        # Add test case to ensure allow_migrate calls are correct for each app's models\n+        from django.test import override_settings\n+        from django.apps import apps\n+        from django.db import connections\n+        from django.db.migrations.recorder import MigrationRecorder\n+        from django.core.management import call_command\n+        from django.db.utils import OperationalError\n+        from unittest import mock\n+        import os\n+\n+        # Test with a setup using multiple apps\n+        @override_settings(INSTALLED_APPS=['migrations', 'migrations2'])\n+        def test_allow_migrate_calls_for_each_app_model(self):\n+            with mock.patch.object(MockRouter, 'allow_migrate', return_value=True) as allow_migrate:\n+                with self.temporary_migration_module() as migration_dir:\n+                    call_command(\"makemigrations\", \"migrations\", verbosity=0)\n+                    initial_file = os.path.join(migration_dir, \"0001_initial.py\")\n+                    self.assertTrue(os.path.exists(initial_file))\n+\n+                    # Check that allow_migrate is called with appropriate app_label and model_name\n+                    allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+                    allow_migrate.assert_any_call('default', 'migrations2', model_name='SomeOtherModel')\n+                    \n+                    # Asserting that it did not call for incorrect (app_label, model) pairs\n+                    with self.assertRaises(LookupError):\n+                        apps.get_app_config('migrations').get_model('SomeNonExistentModel')\n         The history consistency checks in makemigrations respect\n         settings.DATABASE_ROUTERS.\n         \"\"\"\n+        # Add test case to ensure allow_migrate calls are correct for each app's models\n+        from django.test import override_settings\n+        from django.apps import apps\n+        from django.db import connections\n+        from django.db.migrations.recorder import MigrationRecorder\n+        from django.core.management import call_command\n+        from django.db.utils import OperationalError\n+        from unittest import mock\n+        import os\n+\n+        # Test with a setup using multiple apps\n+        @override_settings(INSTALLED_APPS=['migrations', 'migrations2'])\n+        def test_allow_migrate_calls_for_each_app_model(self):\n+            with mock.patch.object(MockRouter, 'allow_migrate', return_value=True) as allow_migrate:\n+                with self.temporary_migration_module() as migration_dir:\n+                    call_command(\"makemigrations\", \"migrations\", verbosity=0)\n+                    initial_file = os.path.join(migration_dir, \"0001_initial.py\")\n+                    self.assertTrue(os.path.exists(initial_file))\n+\n+                    # Check that allow_migrate is called with appropriate app_label and model_name\n+                    allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+                    allow_migrate.assert_any_call('default', 'migrations2', model_name='SomeOtherModel')\n+                    \n+                    # Asserting that it did not call for incorrect (app_label, model) pairs\n+                    with self.assertRaises(LookupError):\n+                        apps.get_app_config('migrations').get_model('SomeNonExistentModel')\n         def patched_ensure_schema(migration_recorder):\n             if migration_recorder.connection is connections['other']:\n                 raise MigrationSchemaMissing('Patched')\n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..e278f3c 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -292,6 +292,27 @@ class PaginationTests(SimpleTestCase):\n         \"\"\"\n         Paginator.get_page() raises EmptyPage if allow_empty_first_page=False\n         and object_list is empty.\n+\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator_iteration(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_large_paginator_iteration(self):\n+        paginator = Paginator(list(range(1, 21)), 5)\n+        page_iterator = iter(paginator)\n+        for expected in (list(range(1, 6)), list(range(6, 11)), list(range(11, 16)), list(range(16, 21))):\n+            self.assertEqual(expected, list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n         \"\"\"\n         paginator = Paginator([], 2, allow_empty_first_page=False)\n         with self.assertRaises(EmptyPage):\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..849fa38 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,31 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_no_density():\n+    # Test that range is respected when density=False\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_with_diff_range_density():\n+    # Test with a different range to ensure it still respects the range with density=True\n+    _, bins, _ = plt.hist(np.random.rand(100), \"auto\", range=(0.2, 0.8), density=True)\n+    assert bins[0] == 0.2\n+    assert bins[-1] == 0.8\n+\n+def test_hist_range_with_diff_range_no_density():\n+    # Test with a different range to ensure it still respects the range with density=False\n+    _, bins, _ = plt.hist(np.random.rand(100), \"auto\", range=(0.2, 0.8), density=False)\n+    assert bins[0] == 0.2\n+    assert bins[-1] == 0.8\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6391,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..024ee25 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,8 +6960,41 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_shared_axes_retick():\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without clearing\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure with clearing\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Check that the axes are still linked and ticks are correct\n+    for ax_ref, ax_test in zip(axs_ref.flat, axs_test.flat):\n+        assert ax_ref.get_xticks().tolist() == ax_test.get_xticks().tolist(), (\n+            \"X ticks do not match after clear\"\n+        )\n+        assert ax_ref.get_yticks().tolist() == ax_test.get_yticks().tolist(), (\n+            \"Y ticks do not match after clear\"\n+        )\n+        assert ax_ref.xaxis.get_visible() == ax_test.xaxis.get_visible(), (\n+            \"X-axis visibility does not match after clear\"\n+        )\n+        assert ax_ref.yaxis.get_visible() == ax_test.yaxis.get_visible(), (\n+            \"Y-axis visibility does not match after clear\"\n+        )\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..dff73e5 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,18 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_convert_xunits_empty_data():\n+    \"\"\"Test converting empty data through unit converters.\"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    # Test with empty data which should not raise warning or error\n+    empty_data_converted = ax.convert_xunits([])\n+    assert empty_data_converted == []\n+    \n+def test_no_deprecation_on_empty_data_with_bar():\n+    \"\"\"Test no deprecation warning with bar plot and empty data.\"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    ax.bar([], [])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..0e12152 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,13 +15,23 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n \n \n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible(fig_test, fig_ref):\n+    # Create a subplot with 3D projection and set it invisible\n+    ax = fig_test.add_subplot(projection='3d')\n+    ax.scatter([1], [1], [1])\n+    ax.set_visible(False)\n+\n+    # Create a reference subplot without 3D projection\n+    ax_ref = fig_ref.add_subplot()\n+    # This should remain an empty plot for comparison\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..bf6d2f9 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -156,8 +156,24 @@ def test_negative_rect():\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n+from matplotlib.testing.decorators import image_comparison\n+from matplotlib.patches import Rectangle\n \n-@image_comparison(['clip_to_bbox'])\n+@image_comparison(['test_dash_offset_patch.png'], extensions=['png'])\n+def test_dash_offset_patch():\n+    fig, ax = plt.subplots()\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+    # Rectangle with no dash offset\n+    rect_no_offset = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                               linestyle=(0, [6, 6]))\n+    # Rectangle with dash offset\n+    rect_with_offset = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                                 linestyle=(6, [6, 6]))\n+    ax.add_patch(rect_no_offset)\n+    ax.add_patch(rect_with_offset)\n+    ax.set_xlim(0, 1)\n+    ax.set_ylim(0, 1)\n def test_clip_to_bbox():\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..47dc410 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,25 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+def test_stackplot_color_aliases():\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 3], [1, 3], color='C0')  # Should use first color in cycle\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))  # Second color\n+    # Check stackplot with color aliases\n+    try:\n+        ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])  \n+        # success if no exception is raised\n+    except ValueError as e:\n+        assert False, f\"stackplot raised an unexpected error: {e}\"\n+    ax.plot([1, 3], [1, 2], color='C4')  # Should continue using the cycle correctly\n+    assert ax.get_lines()[-1].get_color() == 'C4', \"Color cycle was altered unexpectedly.\"\n+\n+# Existing test\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..bc2edf9 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,7 +576,41 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n-    plt.rcParams[\"svg.fonttype\"] = \"none\"\n+from io import BytesIO\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import OffsetImage, AnnotationBbox\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox in the output svg.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"test_gid_20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    # Check if gid attribute is correctly passed to the SVG renderer\n+    expected = '<g id=\"test_gid_20044\">'\n+    assert expected in buf\n+\n+    plt.close(fig)\n \n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..4004a05 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,25 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+import matplotlib as mpl\n+from matplotlib.testing.decorators import check_figures_equal\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float, np.int64])\n+def test_index_dtype_handling(dtype):\n+    # This test verifies that the color mapping does not produce deprecation warnings\n+    # with large indices or indices that could potentially be out of uint8 range.\n+    # Instead of comparing to a single 0 index, we will try edge indices for a broader test.\n+    cm = mpl.colormaps[\"viridis\"]\n+    max_index = cm.N - 1\n+    assert_array_equal(cm(dtype(0)), cm(0))  # Zero index, should not warn\n+    assert_array_equal(cm(dtype(max_index)), cm(max_index))  # Max valid index\n+    assert_array_equal(cm(dtype(max_index + 1)), cm(max_index))  # Overflow to max\n+    assert_array_equal(cm(dtype(-1)), cm(0))  # Underflow to min\n+    assert_array_equal(cm(dtype(max_index + 257)), cm(max_index))  # Large overflow\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..488ea0f 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,9 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n@@ -7811,6 +7814,33 @@ def test_ytickcolor_is_not_yticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+\n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+\n @pytest.mark.parametrize('size', [size for size in mfont_manager.font_scalings\n                                   if size is not None] + [8, 10, 12])\n @mpl.style.context('default')\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..a3e18a3 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,8 +1,9 @@\n+\n from io import BytesIO\n import ast\n import pickle\n-\n-import numpy as np\n+import pickletools\n+import matplotlib.pyplot as plt\n import pytest\n \n import matplotlib as mpl\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..913b122 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -34,7 +34,32 @@ def test_simple():\n #    pickle.dump(ax, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     plt.figure()\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import pickle\n+    from io import BytesIO\n+\n     plt.bar(x=np.arange(10), height=np.arange(10))\n+    # Test pickling of a figure with aligned labels.\n+    def test_pickle_figure_with_aligned_labels():\n+        fig = plt.figure()\n+        ax1 = fig.add_subplot(211)\n+        ax2 = fig.add_subplot(212)\n+        time = [0, 1, 2, 3, 4]\n+        speed = [40000, 4300, 4500, 4700, 4800]\n+        acc = [10, 11, 12, 13, 14]\n+        ax1.plot(time, speed)\n+        ax1.set_ylabel('speed')\n+        ax2.plot(time, acc)\n+        ax2.set_ylabel('acc')\n+\n+        # Align labels\n+        fig.align_labels()\n+\n+        # Attempt pickle\n+        pkl = BytesIO()\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+\n     pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     fig = plt.figure()\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..5234cde 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -992,6 +992,85 @@ def test_hexbin_linear():\n               reduce_C_function=np.sum)\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_0_with_C_parameter(fig_test, fig_ref):\n+    # Test case for mincnt = 0 with C parameter\n+    datapoints = [\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter and mincnt=0\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=0,\n+    )\n+    ax_ref.set_facecolor(\"blue\")  # for contrast of background\n+\n+    # with C parameter and mincnt=0\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"blue\")\n+\n+\n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..f07af6f 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -88,8 +88,40 @@ def test_contour_no_valid_levels():\n     # no warning if z is uniform.\n     ax.contour(np.ones((9, 9)))\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.path import Path\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Create initial contour sets\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[1, 0], [2, 1]])\n+\n+    # Set paths from cs_ref to cs_test using set_paths\n+    cs_test.set_paths(cs_ref.collections[0].get_paths())\n+\n+    # Check if setting paths works correctly by comparing figures\n+    assert len(cs_test.collections) == len(cs_ref.collections)\n+    for path_test, path_ref in zip(cs_test.collections[0].get_paths(), cs_ref.collections[0].get_paths()):\n+        assert np.array_equal(path_test.vertices, path_ref.vertices)\n+        assert np.array_equal(path_test.codes, path_ref.codes)\n+\n+def test_contour_set_paths_invalid():\n+    fig, ax = plt.subplots()\n+\n+    # Create a contour set\n+    cs = ax.contour([[0, 1], [1, 2]])\n+\n+    # Create an invalid path list with incorrect structure\n+    invalid_paths = [Path(np.array([[0, 0], [1, 1]]))]  # A single path\n \n-def test_contour_Nlevels():\n+    with pytest.raises(ValueError, match=\"Mismatch in number of paths\"):\n+        cs.set_paths(invalid_paths)\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n     z = np.arange(12).reshape((3, 4))\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..5228ae1 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -645,6 +645,47 @@ class TestScaling:\n         with pytest.raises(RuntimeError, match=err):\n             p.plot()\n \n+from seaborn import Plot\n+import pytest\n+import matplotlib as mpl\n+\n+class TestNominalAxisBehavior:\n+\n+    def test_nominal_x_axis_margin(self):\n+        # Test that the x-axis for nominal scales extends to +/- 0.5\n+        p = Plot(x=[\"group1\", \"group2\", \"group3\"], y=[1, 2, 3])\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_xlim() == (-0.5, 2.5), \"X-axis limits not adjusted correctly for nominal scale\"\n+\n+    def test_nominal_x_axis_no_grid(self):\n+        # Ensure no grid lines are visible on the nominal x-axis\n+        p = Plot(x=[\"group1\", \"group2\", \"group3\"], y=[1, 2, 3])\n+        ax = p.plot()._figure.axes[0]\n+        assert not any(grid.get_visible() for grid in ax.xaxis.get_gridlines()), \"Grid lines should not be visible\"\n+\n+    def test_nominal_y_axis_margin(self):\n+        # Test that the y-axis for nominal scales extends to +/- 0.5 and is inverted\n+        p = Plot(x=[1, 2, 3], y=[\"group1\", \"group2\", \"group3\"])\n+        ax = p.plot()._figure.axes[0]\n+        assert ax.get_ylim() == (2.5, -0.5), \"Y-axis limits not inverted or adjusted correctly for nominal scale\"\n+\n+    def test_nominal_y_axis_no_grid(self):\n+        # Ensure no grid lines are visible on the nominal y-axis\n+        p = Plot(x=[1, 2, 3], y=[\"group1\", \"group2\", \"group3\"])\n+        ax = p.plot()._figure.axes[0]\n+        assert not any(grid.get_visible() for grid in ax.yaxis.get_gridlines()), \"Grid lines should not be visible\"\n+\n+    def test_custom_limits_respected_x(self):\n+        # Verify that custom x limits are respected and override default behavior\n+        p = Plot(x=[\"group1\", \"group2\", \"group3\"], y=[1, 2, 3])\n+        ax = p.limit(x=(-1, 3)).plot()._figure.axes[0]\n+        assert ax.get_xlim() == (-1, 3), \"Custom x-axis limits not respected\"\n+\n+    def test_custom_limits_respected_y(self):\n+        # Verify that custom y limits are respected and override default behavior\n+        p = Plot(x=[1, 2, 3], y=[\"group1\", \"group2\", \"group3\"])\n+        ax = p.limit(y=(-1, 3)).plot()._figure.axes[0]\n+        assert ax.get_ylim() == (-1, 3), \"Custom y-axis limits not respected\"\n \n class TestPlotting:\n \n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..a14ce44 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,14 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+def test_non_empty_name_required(app, client):\n+    # Test case for ensuring a ValueError is raised for an empty Blueprint name\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..d790aaa 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -10,6 +10,23 @@ This module implements the Requests API.\n :license: Apache2, see LICENSE for more details.\n \n \"\"\"\n+import requests\n+import unittest\n+\n+class TestUnicodeMethodNames(unittest.TestCase):\n+    def test_unicode_method_name(self):\n+        files = {u'file': open(u'/usr/bin/diff', u'rb')}\n+        r = requests.request(method=u'POST', url='http://httpbin.org/post', files=files)\n+        self.assertEqual(r.status_code, 200)\n+\n+    def test_string_method_name(self):\n+        # Control test to ensure that using a standard string method name still works as expected\n+        files = {u'file': open(u'/usr/bin/diff', u'rb')}\n+        r = requests.request(method='POST', url='http://httpbin.org/post', files=files)\n+        self.assertEqual(r.status_code, 200)\n+\n+if __name__ == \"__main__\":\n+    unittest.main()\n \n from . import sessions\n \n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..cb79960 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,11 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://example,com'),\n+            (InvalidURL, 'http://example..com/'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..9f84780 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2309,6 +2309,31 @@ class TestAsCompatibleData:\n         assert isinstance(orig._data, CustomIndexable)\n \n \n+import numpy as np\n+import pytest\n+import xarray as xr\n+from xarray import Variable\n+\n+@pytest.mark.parametrize(\"data_cls\", [xr.Variable])\n+def test_setitem_with_object_with_values_property(data_cls):\n+    # Test case for objects with a `values` property\n+\n+    class HasValues:\n+        values = 5\n+    \n+    # Creating DataArrays with object dtype\n+    good_indexed = xr.DataArray([None], dims=\"dim_0\", dtype=object)\n+    bad_indexed = xr.DataArray([None], dims=\"dim_0\", dtype=object)\n+    \n+    # Assigning a set to a DataArray element (should not coerce)\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    assert good_indexed.values[0] == set()\n+    \n+    # Assigning an object with a `values` property\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+    # It should store the instance itself, not the `values` attribute\n+    assert isinstance(bad_indexed.values[0], HasValues)\n+\n def test_raise_no_warning_for_nan_in_binary_ops():\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex 9329f73..6179fa5 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -492,7 +492,16 @@ class VariableSubclassobjects:\n                         source_ndarray(w.values))\n         assert_identical(v, copy(v))\n \n-    def test_copy_index(self):\n+    @pytest.mark.parametrize('dtype', ['<U3', 'U3'])\n+    def test_copy_unicode_index_variable(self, dtype):\n+        index_data = np.array(['foo', 'bar'], dtype=dtype)\n+        v = self.cls('x', index_data)\n+        \n+        for deep in [True, False]:\n+            copied = v.copy(deep=deep)\n+            assert_identical(v, copied)\n+            assert v.dtype == copied.dtype\n+            assert copied.dtype.kind in ['U']  # Ensure it's still a Unicode type\n         midx = pd.MultiIndex.from_product([['a', 'b'], [1, 2], [-1, -2]],\n                                           names=('one', 'two', 'three'))\n         v = self.cls('x', midx)\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..a9d2cd1 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,7 +611,25 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n-    def test_check_for_impossible_ordering(self):\n+    def test_non_monotonic_identical_coordinates(self):\n+        # Test for issue where non-monotonic but identical coordinates should\n+        # not raise an error when combining by coordinates.\n+        ycoord = ['a', 'c', 'b']\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data1)),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data2)),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected_data = np.concatenate([data1, data2], axis=0)\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], expected_data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n         with raises_regex(ValueError, \"does not have monotonic global indexes\"\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..24c95d9 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2300,6 +2300,10 @@ class TestDataArray:\n \n     # skip due to bug in older versions of numpy.nanpercentile\n     def test_quantile(self):\n+        # Test to ensure quantile keeps attributes when keep_attrs=True\n+        da = DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        actual = da.quantile(0.9, dim='x', keep_attrs=True)\n+        assert actual.attrs == {'units': 'K'}\n         for q in [0.25, [0.50], [0.25, 0.75]]:\n             for axis, dim in zip(\n                 [None, 0, [0], [0, 1]], [None, \"x\", [\"x\"], [\"x\", \"y\"]]\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..499c4dd 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,22 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        # Test merging using Dataset's merge method\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n+        # Test merging with DataArray having different dimensions\n+        da_2d = xr.DataArray(data=[[1, 2], [3, 4]], dims=(\"x\", \"y\"), name=\"c\")\n+        expected = xr.merge([ds, da_2d])\n+        assert_identical(ds.merge(da_2d), expected)\n+\n+        # Test a DataArray that conflicts with the Dataset variable\n+        da_conflict = xr.DataArray(data=2, dims=(), name=\"a\")\n+        with pytest.raises(xr.MergeError):\n+            ds.merge(da_conflict)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..7d0c637 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -594,8 +594,45 @@ def test_min_count(dim_num, dtype, dask, func, aggdim):\n     assert_allclose(actual, expected)\n     assert_dask_array(actual, dask)\n \n+from xarray import DataArray\n \n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_multiple_dims(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    # Create a DataArray with 3 dimensions\n+    da = DataArray(\n+        np.array([\n+            [[1, np.nan], [3, 4]],\n+            [[np.nan, 6], [7, 8]]\n+        ], dtype=dtype),\n+        dims=[\"x\", \"y\", \"z\"]\n+    )\n+    min_count = 2\n+\n+    # Act\n+    actual = getattr(da, func)(dim=[\"x\", \"y\"], skipna=True, min_count=min_count)\n+    \n+    # Manually compute the expected result\n+    expected_values = []\n+    for z_index in range(da.sizes['z']):\n+        subarray = da.isel(z=z_index)\n+        subarray_flat = subarray.values.flatten()\n+        valid_count = np.sum(~np.isnan(subarray_flat))\n+        if valid_count >= min_count:\n+            if func == \"sum\":\n+                expected_values.append(np.nansum(subarray_flat))\n+            elif func == \"prod\":\n+                expected_values.append(np.nanprod(subarray_flat))\n+        else:\n+            expected_values.append(np.nan)\n+    \n+    expected = DataArray(np.array(expected_values), dims=[\"z\"])\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n def test_min_count_dataset(func):\n     da = construct_dataarray(2, dtype=float, contains_nan=True, dask=False)\n     ds = Dataset({\"var1\": da}, coords={\"scalar\": 0})\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..194be7b 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,28 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+\n+    def test_merge_attrs_override_multiple(self):\n+        ds1 = xr.Dataset(attrs={\"a\": 1, \"b\": \"first\"})\n+        ds2 = xr.Dataset(attrs={\"a\": 2, \"b\": \"second\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"a\"] = 3\n+        ds3.attrs[\"b\"] = \"third\"\n+        assert ds1.attrs[\"a\"] == 1\n+        assert ds1.attrs[\"b\"] == \"first\"\n+        \n+    def test_merge_attrs_override_no_mutation(self):\n+        ds1 = xr.Dataset(attrs={\"key\": \"value\"})\n+        ds2 = xr.Dataset(attrs={\"key\": \"another value\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"key\"] = \"new value\"\n+        assert ds1.attrs[\"key\"] == \"value\"\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..7c4ea9b 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,26 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # Test with keep_attrs=True\n+    actual_keep_attrs = xr.where(cond, x, y, keep_attrs=True)\n+    expected_keep_attrs = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected_keep_attrs, actual_keep_attrs)\n+\n+    # Test without attrs in x and y\n+    x_no_attrs = xr.DataArray([1, 1], dims=\"x\")\n+    y_no_attrs = xr.DataArray([0, 0], dims=\"x\")\n+    actual_no_attrs = xr.where(cond, x_no_attrs, y_no_attrs)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..5ff75d7 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -7,9 +7,22 @@ import pytest\n import xarray as xr\n from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n+import numpy as np\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n \n+@pytest.mark.parametrize(\"dtype, attr_value, expected_dtype, expected_values\", [\n+    (np.dtype(\"i1\"), \"true\", np.dtype(\"u1\"), [255, 254, 0, 1, 2, 3, 255]),\n+    (np.dtype(\"u1\"), \"false\", np.dtype(\"i1\"), [-1, -2, 0, 1, 2, 3, -1]),\n+])\n+def test_unsigned_signed_handling(dtype, attr_value, expected_dtype, expected_values):\n+    original_values = np.array([-1, -2, 0, 1, 2, 3, -1], dtype=dtype)\n+    encoded = xr.Variable((\"x\",), original_values, attrs={\"_Unsigned\": attr_value})\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == expected_dtype\n+    np.testing.assert_array_equal(decoded.values, np.array(expected_values, dtype=expected_dtype))\n+\n with suppress(ImportError):\n     import dask.array as da\n \n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..7c4d88f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1928,6 +1928,13 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+def test_where_scalar_with_keep_attrs_true() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"condition\"})\n+    scalar_true = 1\n+    scalar_false = 0\n+    actual = xr.where(cond, scalar_true, scalar_false, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..b8717e6 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -49,7 +49,21 @@ class TestDataArrayRolling:\n                     expected.values[expected.values.nonzero()],\n                 )\n \n-    @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n+    @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    def test_rolling_iter_center(self, da, center: bool, size: int) -> None:\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        manual_means = [\n+            window.mean().values for (_, window) in rolling_obj\n+        ]\n+\n+        expected_means = rolling_obj_mean.values\n+\n+        # Compare the manually iterated means with the normal rolling operation means\n+        np.testing.assert_array_equal(manual_means, expected_means)\n     def test_rolling_repr(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..39bbdc0 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -494,11 +494,42 @@ def test_get_map_data() -> None:\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n \n-    assert len(expected_linelists) == len(data)\n+    import os\n+    import tempfile\n+\n+    def create_temp_file(content):\n+        temp_file = tempfile.NamedTemporaryFile(delete=False)\n+        temp_file.write(content.encode())\n+        temp_file.close()\n+        return temp_file.name\n+\n+    def test_set_duplicate_lines_to_zero():\n+        output = StringIO()\n+        with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+            Run([\"--duplicates=0\", SIMILAR1, SIMILAR2])\n+        assert ex.value.code == 0\n+        assert output.getvalue() == \"\"\n+\n+    def test_set_duplicate_lines_to_non_zero():\n+        file1_content = \"print('Hello World')\"\n+        file2_content = \"print('Hello World')\"\n+\n+        file1 = create_temp_file(file1_content)\n+        file2 = create_temp_file(file2_content)\n+\n+        output = StringIO()\n+        try:\n+            with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+                Run([\"--duplicates=1\", file1, file2])\n+            assert ex.value.code == 1  # Expecting duplication errors\n+            assert \"R0801\" in output.getvalue()  # Check for duplication message\n+        finally:\n+            os.unlink(file1)\n+            os.unlink(file2)\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..85dfc4a 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,16 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+from pylint.lint import Run\n+from pytest import CaptureFixture\n+\n+# Define EMPTY_MODULE as needed, assuming it represents a minimal Python module/file to test against\n+EMPTY_MODULE = \"empty_module.py\"\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex d5ccd91..f3833c5 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -863,8 +863,52 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         # computed for that module\n         assert module_stats[\"statement\"] == linter2.stats.statement\n \n+import os\n+from pylint.lint import Run\n+import pytest\n+from os.path import join\n \n-def test_import_sibling_module_from_namespace(initialized_linter: PyLinter) -> None:\n+@pytest.mark.parametrize(\n+    \"ignore_parameter,ignore_parameter_value\",\n+    [\n+        (\"--ignore\", \"ignored_subdirectory\"),\n+        (\"--ignore\", \"failing.py\"),\n+        (\"--ignore-patterns\", \"ignored_.*\"),\n+        (\"--ignore-patterns\", \"failing.*\"),\n+        (\"--ignore-paths\", \".*ignored.*\"),\n+        (\"--ignore-paths\", \".*failing.*\"),\n+    ],\n+)\n+def test_recursive_ignore(ignore_parameter, ignore_parameter_value) -> None:\n+    REGRTEST_DATA_DIR = os.path.join(os.path.dirname(__file__), \"regrtest_data\")\n+    run = Run(\n+        [\n+            \"--recursive=y\",\n+            ignore_parameter,\n+            ignore_parameter_value,\n+            join(REGRTEST_DATA_DIR, \"directory\"),\n+        ],\n+        exit=False,\n+    )\n+\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([join(REGRTEST_DATA_DIR, \"directory\")]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n+\n+    ignored_file = os.path.abspath(\n+        join(REGRTEST_DATA_DIR, \"directory\", \"ignored_subdirectory\", \"failing.py\")\n+    )\n+    assert ignored_file not in linted_file_paths\n+\n+    for regrtest_data_module in (\n+        (\"directory\", \"subdirectory\", \"subsubdirectory\", \"module.py\"),\n+        (\"directory\", \"subdirectory\", \"module.py\"),\n+        (\"directory\", \"package\", \"module.py\"),\n+        (\"directory\", \"package\", \"subpackage\", \"module.py\"),\n+    ):\n+        module = os.path.abspath(join(REGRTEST_DATA_DIR, *regrtest_data_module))\n+        assert module in linted_file_paths\n     \"\"\"If the parent directory above `namespace` is on sys.path, ensure that\n     modules under `namespace` can import each other without raising `import-error`.\"\"\"\n     linter = initialized_linter\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..4fc5ef7 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,32 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_path_recursive_pyproject_toml(self) -> None:\n+        \"\"\"Tests that `ignore-paths` in pyproject.toml is respected with --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            # Remove any existing inclusion of 'regrtest_data' directory\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Mock the reading of pyproject.toml to include ignore-paths entry\n+                with open(\"pyproject.toml\", \"w\") as f:\n+                    f.write(\"[tool.pylint.MASTER]\\nignore-paths = ['^ignored_subdirectory/.*$']\\n\")\n+                try:\n+                    self._runtest(\n+                        [\n+                            \"src/\",\n+                            \"--recursive=y\",\n+                        ],\n+                        code=0,\n+                    )\n+                finally:\n+                    # Clean up the pyproject.toml file after test\n+                    os.remove(\"pyproject.toml\")\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..de58576 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -767,6 +767,34 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n \n             paths = [cwd, \"/custom_pythonpath\", *default_paths]\n             sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths  # Custom path should not be removed\n+\n+            # Test case 1: First path is \"\"\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"First empty path should be removed\"\n+\n+            # Test case 2: First path is \".\"\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Path '.' should be removed\"\n+\n+            # Test case 3: First path is cwd\n+            paths = [cwd, *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Current working directory should be removed\"\n+\n+            # Test case 4: First path is custom and should not be removed\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n",
  "pytest-dev__pytest-10051": "",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..e35542d 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -175,19 +175,23 @@ class TestPDB:\n         assert \"debug.me\" in rest\n         self.flush(child)\n \n-    def test_pdb_unittest_skip(self, pytester: Pytester) -> None:\n-        \"\"\"Test for issue #2137\"\"\"\n+    def test_pdb_unittest_teardown_not_called_on_skip(self, pytester: Pytester) -> None:\n+        \"\"\"Test that tearDown is not called on skipped unittest.TestCase classes with --pdb\"\"\"\n         p1 = pytester.makepyfile(\n             \"\"\"\n             import unittest\n-            @unittest.skipIf(True, 'Skipping also with pdb active')\n+            @unittest.skip(\"Test class skipped\")\n             class MyTestCase(unittest.TestCase):\n+                def setUp(self):\n+                    xxx\n                 def test_one(self):\n-                    assert 0\n-        \"\"\"\n+                    pass\n+                def tearDown(self):\n+                    xxx\n+            \"\"\"\n         )\n         child = pytester.spawn_pytest(f\"-rs --pdb {p1}\")\n-        child.expect(\"Skipping also with pdb active\")\n+        child.expect(\"Test class skipped\")\n         child.expect_exact(\"= 1 skipped in\")\n         child.sendeof()\n         self.flush(child)\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..391a100 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,9 +1051,35 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n-\n-@contextlib.contextmanager\n-def saved_fd(fd):\n+def test_encodedfile_mode_does_not_include_b():\n+    \"\"\"Test that the mode of EncodedFile does not include 'b'.\"\"\"\n+    from _pytest.capture import EncodedFile\n+    import io\n+\n+    buffer = io.StringIO()\n+    encoded_file = EncodedFile(buffer, encoding='utf-8')\n+    assert 'b' not in getattr(encoded_file, 'mode', '')\n+\n+def test_encodedfile_write_str():\n+    \"\"\"Test that EncodedFile can write strings without error.\"\"\"\n+    from _pytest.capture import EncodedFile\n+    import io\n+    \n+    buffer = io.StringIO()\n+    encoded_file = EncodedFile(buffer, encoding='utf-8')\n+    encoded_file.write('test string')\n+    assert buffer.getvalue() == 'test string'\n+\n+def test_encodedfile_write_bytes_raises():\n+    \"\"\"Test that EncodedFile raises TypeError when writing bytes in Python 3.\"\"\"\n+    from _pytest.capture import EncodedFile\n+    import io\n+    import pytest\n+\n+    buffer = io.StringIO()\n+    encoded_file = EncodedFile(buffer, encoding='utf-8')\n+    with pytest.raises(TypeError, match='write\\\\(\\\\) argument must be str, not bytes'):\n+        encoded_file.write(b'test bytes')\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..7ebd197 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,6 +178,24 @@ class TestMockDecoration:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n+    def test_mock_sentinel_with_numpy_array(self, testdir):\n+        \"\"\"Test that pytest correctly handles numpy arrays in mock patching.\"\"\"\n+        pytest.importorskip(\"numpy\")\n+        testdir.makepyfile(\n+            \"\"\"\n+            from unittest.mock import patch\n+            import numpy as np\n+\n+            class TestWithArrayPatch:\n+                @patch('module_under_test.some_array', new=np.array([-5.5, 3.0]))\n+                def test_array_patch(self):\n+                    # This is a simple test function to ensure collection does not error.\n+                    assert True\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n+\n     def test_mock(self, testdir):\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..2ca98d1 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -126,8 +126,19 @@ class TestPaste(object):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n         assert url == \"https://bpaste.net\"\n-        assert \"lexer=%s\" % lexer in data.decode()\n+        assert \"lexer=text\" in data.decode()  # Updated assertion to check lexer is 'text'\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n+    def test_create_new_paste_with_non_text_lexer(self, pastebin, mocked_urlopen):\n+        # Test to confirm if changing lexer to 'text' fixes HTTP error\n+        result = pastebin.create_new_paste(b\"# some code\\nprint('hello world')\\n\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()  # Ensure lexer is 'text'\n+        assert \"code=# some code\\nprint('hello world')\\n\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "",
  "pytest-dev__pytest-7205": "",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..8d8118f 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -595,6 +595,31 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*testing stuff*\", \"*1 skipped*\"])\n \n+    def test_skip_with_runxfail_and_without(self, testdir):\n+        \"\"\"Test skip location with and without --runxfail.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            @pytest.mark.skip\n+            def test_to_skip():\n+                assert 0\n+            \"\"\"\n+        )\n+        # Running with --runxfail\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\n+            \"*SKIPPED [1] test_to_skip.py:3: unconditional skip\",\n+            \"*1 skipped*\"\n+        ])\n+        \n+        # Running without --runxfail\n+        result = testdir.runpytest(\"-rs\")\n+        result.stdout.fnmatch_lines([\n+            \"*SKIPPED [1] test_to_skip.py:3: unconditional skip\",\n+            \"*1 skipped*\"\n+        ])\n+\n     def test_skip_no_reason(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..4eae23d 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,6 +1,8 @@\n+\n import sys\n \n import pytest\n+from _pytest.pytester import Testdir\n from _pytest.runner import runtestprotocol\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n@@ -155,7 +157,31 @@ class TestEvaluation:\n \n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n-    def test_xfail_simple(self, testdir, strict):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486: Verifying the fix for dynamically adding xfail during test run.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486: Testing strict xfail dynamically.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail_strict(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                assert 1  # This should fail because it's an xpass in strict mode\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         item = testdir.getitem(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..7a92e5d 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,6 +513,11 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n+    @pytest.mark.parametrize(\"nl\", (\"\\\\n\", \"\\\\r\\\\n\", \"\\\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n \n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..3d7d7c5 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,7 +51,51 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n-def test_with_statement(caplog):\n+def test_change_level_undos_handler_level(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n+\n+def test_new_case_logger_level(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (logger).\"\"\"\n+    \n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            logger = logging.getLogger('test_logger')\n+            assert logger.level == logging.NOTSET\n+            caplog.set_level(logging.INFO, 'test_logger')\n+            assert logger.level == logging.INFO\n+\n+        def test2(caplog):\n+            logger = logging.getLogger('test_logger')\n+            assert logger.level == logging.NOTSET\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..1749f87 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,4 +1,20 @@\n+\n import os\n+def test_collect_nested_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A directory with nested symlinks is collected.\"\"\"\n+    base_dir = pytester.mkdir(\"base_dir\")\n+    nested_dir = base_dir.mkdir(\"nested_dir\")\n+    \n+    # Write a simple passing test in the nested directory\n+    nested_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    \n+    # Create a symlink to the nested directory\n+    pytester.path.joinpath(\"symlink_nested_dir\").symlink_to(nested_dir)\n+    \n+    # Run pytest and verify both tests are collected\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n import pprint\n import sys\n import textwrap\n@@ -9,7 +25,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..1cc9882 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,27 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_setUpClass_fixture_visibility(pytester: Pytester) -> None:\n+    testpath = pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class TestExample(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            def test_example(self):\n+                assert True\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_TestExample*\")\n+\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_TestExample*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..6bf6145 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -598,7 +598,28 @@ def test_ridgecv_store_cv_values():\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n \n-def test_ridgecv_sample_weight():\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    n_samples = 10\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    y = rng.choice([-1, 1], size=n_samples)\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # with len(y.shape) == 2 (multiclass case)\n+    n_responses = 3\n+    y_multiclass = rng.choice([0, 1, 2], size=n_samples)\n+    r.fit(x, y_multiclass)\n+    assert r.cv_values_.shape == (n_samples, n_responses, n_alphas)\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..2131d49 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -559,6 +559,19 @@ def test_feature_names():\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n \n+def test_countvectorizer_custom_vocabulary_repeated_indices():\n+    # test for custom vocabulary\n+    vocab = ['beer', 'burger', 'celeri', 'coke', 'pizza',\n+             'salad', 'sparkling', 'tomato', 'water']\n+\n+    cv = CountVectorizer(vocabulary=vocab)\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(['beer', 'burger', 'celeri', 'coke', 'pizza', 'salad',\n+                        'sparkling', 'tomato', 'water'], feature_names)\n+\n+    for idx, name in enumerate(feature_names):\n+        assert_equal(idx, cv.vocabulary_.get(name))\n+\n def test_vectorizer_max_features():\n     vec_factories = (\n         CountVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..6ef1161 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1172,8 +1172,28 @@ def test_search_cv_timing():\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+from sklearn.utils.testing import assert_true\n+from sklearn.utils.testing import assert_greater_equal\n \n-def test_grid_search_correct_score_results():\n+def test_search_cv_refit_time():\n+    # Test that the refit_time_ attribute is available and non-negative\n+    \n+    svc = LinearSVC(random_state=0)\n+    X = [[1, ], [2, ], [3, ], [4, ]]\n+    y = [0, 1, 1, 0]\n+\n+    # Test both GridSearchCV and RandomizedSearchCV\n+    gs = GridSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, refit=True)\n+    rs = RandomizedSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, refit=True, n_iter=2)\n+\n+    for search in (gs, rs):\n+        search.fit(X, y)\n+        # Check if the attribute refit_time_ is present\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        # Check if refit_time_ is a float\n+        assert_true(isinstance(search.refit_time_, float))\n+        # Check if refit_time_ is non-negative\n+        assert_greater_equal(search.refit_time_, 0)\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..3cb883a 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,6 +21,12 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.utils import assert_array_almost_equal\n+from sklearn.datasets import make_classification\n+from sklearn.preprocessing import LabelEncoder\n+from sklearn.linear_model.logistic import _log_reg_scoring_path\n+import pytest\n \n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n@@ -491,8 +497,32 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score for its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..849fc4f 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,6 +154,23 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    class MyEstimator:\n+        def __init__(self, empty=None):\n+            self.empty = empty\n+            \n+        def get_params(self, deep=False):\n+            return {\"empty\": self.empty}\n+\n+    clf = MyEstimator(empty=StandardScaler)\n+    clf_cloned = clone(clf)\n+\n+    assert clf.empty is clf_cloned.empty\n+\n def test_clone_sparse_matrices():\n     sparse_matrix_classes = [\n         getattr(sp, name)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..8809130 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,7 +5,30 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+@pytest.mark.parametrize('init_copy_X, fit_copy_X', [(True, None), (False, None), (True, False), (False, True)])\n+def test_lasso_lars_ic_copyX_combined_behaviour(init_copy_X, fit_copy_X):\n+    \"\"\"\n+    Test that the combination of initialization and fit parameters for copy_X work as expected.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    \n+    # Call fit with potentially overwriting copy_X\n+    if fit_copy_X is None:\n+        lasso_lars.fit(X, y)\n+    else:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+\n+    # Determine expected behavior\n+    expected_copy_X = fit_copy_X if fit_copy_X is not None else init_copy_X\n+    assert expected_copy_X == np.array_equal(X, X_copy)\n+\n import pytest\n+import numpy as np\n+from sklearn.linear_model.least_angle import LassoLarsIC\n \n from sklearn.model_selection import train_test_split\n from sklearn.utils.testing import assert_equal\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..4fae4dc 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -494,7 +494,39 @@ def test_shuffle_stratifiedkfold():\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+def test_stratifiedkfold_shuffling_consistency():\n+    # Test the behavior of StratifiedKFold when shuffling with different random states\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    # StratifiedKFold with shuffle=False should give the same result regardless of random_state\n+    kf_no_shuffle_1 = StratifiedKFold(n_splits=5, shuffle=False, random_state=0)\n+    kf_no_shuffle_2 = StratifiedKFold(n_splits=5, shuffle=False, random_state=42)\n+    \n+    test_sets_no_shuffle_1 = [test for _, test in kf_no_shuffle_1.split(X, y)]\n+    test_sets_no_shuffle_2 = [test for _, test in kf_no_shuffle_2.split(X, y)]\n+    \n+    assert test_sets_no_shuffle_1 == test_sets_no_shuffle_2\n+\n+    # StratifiedKFold with shuffle=True should provide different results for different random states\n+    kf_shuffle_1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n+    kf_shuffle_2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n+    \n+    test_sets_shuffle_1 = [test for _, test in kf_shuffle_1.split(X, y)]\n+    test_sets_shuffle_2 = [test for _, test in kf_shuffle_2.split(X, y)]\n+    \n+    assert test_sets_shuffle_1 != test_sets_shuffle_2\n+\n+    # Ensure that shuffling occurs within stratified folds\n+    y_unbalanced = [0] * 15 + [1] * 5\n+    kf_unbalanced_shuffle = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n+    for train_index, test_index in kf_unbalanced_shuffle.split(X, y_unbalanced):\n+        train_labels = y_unbalanced[train_index].tolist()\n+        test_labels = y_unbalanced[test_index].tolist()\n+        assert train_labels.count(0) == 3 or train_labels.count(0) == 2\n+        assert test_labels.count(0) == 3 or test_labels.count(0) == 2\n+        assert train_labels.count(1) == 1 or train_labels.count(1) == 0\n+        assert test_labels.count(1) == 1 or test_labels.count(1) == 0\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..9a81aa6 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,15 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..0532509 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1058,6 +1058,33 @@ def test_pipeline_memory():\n         shutil.rmtree(cachedir)\n \n \n+def test_pipeline_length():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_regression\n+    from sklearn.svm import SVC\n+\n+    # Create a pipeline\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+    # Test __len__\n+    assert len(pipe) == 2\n+\n+    # Test with additional steps\n+    pipe_with_extra_step = Pipeline([\n+        ('anova', anova_filter),\n+        ('svc', clf),\n+        ('another_step', anova_filter)\n+    ])\n+    assert len(pipe_with_extra_step) == 3\n+\n+    # Test empty pipeline\n+    empty_pipe = Pipeline([])\n+    assert len(empty_pipe) == 0\n+\n+\n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n@@ -1070,4 +1097,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..976495d 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -10,7 +11,8 @@ import pytest\n \n import numpy as np\n \n-from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils import check_random_state\n+from sklearn.ensemble import IsolationForest\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..d51cbc2 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -394,6 +394,31 @@ def test_export_text():\n     |   |--- value: [1.0, 1.0]\n     \"\"\").lstrip()\n     assert export_text(reg, decimals=1) == expected_report\n+\n+    # Test case for issue #12345: \"IndexError: list index out of range in export_text when the tree only has one feature\"\n+    X_single_feature = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single_feature = [-1, -1, -1, 1, 1, 1]\n+    \n+    clf_single = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single.fit(X_single_feature, y_single_feature)\n+\n+    expected_report_single_feature = dedent(\"\"\"\n+    |--- feature_0 <= 0.00\n+    |   |--- class: -1\n+    |--- feature_0 >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf_single) == expected_report_single_feature\n+\n+    expected_report_single_feature_named = dedent(\"\"\"\n+    |--- sepal_length <= 0.00\n+    |   |--- class: -1\n+    |--- sepal_length >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf_single, feature_names=['sepal_length']) == expected_report_single_feature_named\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n \n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..de8efb7 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1531,7 +1531,42 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_train) == gs.predict(X_train)).mean() >= .8\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('solver', ('liblinear', 'saga'))\n+def test_LogisticRegressionCV_no_refit_index_error(penalty, solver):\n+    # Test that no IndexError is raised when refit=False\n+    # This is to verify the issue of IndexError is resolved\n+\n+    np.random.seed(29)\n+    X = np.random.normal(size=(1000, 3))\n+    beta = np.random.normal(size=3)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+    \n+    Cs = np.logspace(-4, 4, 3)\n+    \n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n \n+    lrcv = LogisticRegressionCV(\n+        penalty=penalty,\n+        Cs=Cs,\n+        solver=solver,\n+        l1_ratios=l1_ratios,\n+        refit=False\n+    )\n+    \n+    try:\n+        lrcv.fit(X, y)\n+        no_index_error = True\n+    except IndexError:\n+        no_index_error = False\n+        \n+    assert no_index_error, \"IndexError was raised unexpectedly with refit=False\"\n+\n+        \n @pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n",
  "scikit-learn__scikit-learn-14141": "",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..1988515 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,38 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+from sklearn.cluster import OPTICS\n+from sklearn.utils import shuffle\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+\n+def test_optics_float_min_samples():\n+    # Test case for issue with float min_samples\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 10\n+\n+    C1 = [-5, -2] + 0.5 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + 0.05 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + 0.1 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * 10, [1] * 10, [2] * 10]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n \n-def test_extract_xi():\n+    # Test with min_samples as a float\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.1, max_eps=20, cluster_method='xi', xi=0.05)\n+    clust.fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+    # Test with a different float for min_samples\n+    clust = OPTICS(min_samples=0.2, min_cluster_size=0.1, max_eps=20, cluster_method='xi', xi=0.05)\n+    clust.fit(X)\n+    assert clust.labels_.dtype == expected_labels.dtype\n+\n+    # Ensure no exceptions with min_samples as integer\n+    clust = OPTICS(min_samples=2, min_cluster_size=0.1, max_eps=20, cluster_method='xi', xi=0.05)\n+    clust.fit(X)\n+    assert clust.labels_.dtype == expected_labels.dtype\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..643e569 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -690,7 +690,45 @@ def test_sparse_precomputed():\n         assert \"Sparse precomputed\" in str(e)\n \n \n-def test_linearsvc_parameters():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for ZeroDivisionError when support_vectors_ is empty\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+\n+    assert not model.support_vectors_.data.size, \"Support vectors should be empty\"\n+    assert not model.dual_coef_.data.size, \"Dual coefficients should be empty\"\n+\n+def test_sparse_fit_with_single_data_point():\n+    # Case where we have a single data point\n+    X_train = sparse.csr_matrix([[0, 0, 0, 1]])\n+    y_train = np.array([0.04])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+\n+    assert model.support_vectors_.shape[0] == 1, \"There should be one support vector\"\n+    assert model.dual_coef_.shape[1] == 1, \"Dual coefficients should have one non-zero\"\n+\n+def test_sparse_fit_with_no_support_vectors():\n+    # Case where data points are too similar or identical, leading to no support vectors\n+    X_train = sparse.csr_matrix([[0, 0, 0, 1],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.04])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+\n+    # Since all data points are identical, it might end up with no support vectors\n+    assert model.support_vectors_.shape[0] == 0, \"Support vectors should be empty\"\n+    assert model.dual_coef_.shape[1] == 0, \"Dual coefficients should be empty\"\n     # Test possible parameter combinations in LinearSVC\n     # Generate list of possible parameter combinations\n     losses = ['hinge', 'squared_hinge', 'logistic_regression', 'foo']\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..f55d3ad 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,47 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents():\n+    # check some classical latin accentuated symbols\n+    a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n+    expected = 'aaaaaaceeee'\n+    assert strip_accents_unicode(a) == expected\n+\n+    a = '\u00ec\u00ed\u00ee\u00ef\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd'\n+    expected = 'iiiinooooouuuuy'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # check some arabic\n+    a = '\\u0625'  # alef with a hamza below: \u0625\n+    expected = '\\u0627'  # simple alef: \u0627\n+    assert strip_accents_unicode(a) == expected\n \n-def test_to_ascii():\n+    # mix letters accentuated and not\n+    a = \"this is \u00e0 test\"\n+    expected = 'this is a test'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+    \n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+    \n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+    \n+    # NFKD form inputs\n+    s1 = chr(241)  # \"LATIN SMALL LETTER N WITH TILDE\"\n+    s2 = chr(110) + chr(771)  # \"LATIN SMALL LETTER N\" + \"COMBINING TILDE\"\n+    # Ensure both are normalized to \"n\"\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..8ae1f54 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1524,6 +1524,36 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     assert_allclose(X_imputed[:, 1], 0)\n \n \n+def test_iterative_imputer_fill_value_with_nan():\n+    \"\"\"Check IterativeImputer with fill_value set to np.nan.\"\"\"\n+    X = np.array([[np.nan, 2, 3, np.nan], [4, np.nan, 5, np.nan], [6, 7, np.nan, np.nan], [8, 9, 0, np.nan]])\n+\n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        missing_values=np.nan,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_trans = imputer.fit_transform(X)\n+    assert np.isnan(imputer.initial_imputer_.statistics_).all()\n+    assert np.isnan(X_trans).any()\n+\n+def test_iterative_imputer_fill_value_with_numeric():\n+    \"\"\"Check IterativeImputer with fill_value set to a numeric value.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+\n+    fill_value = 42\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_trans = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [fill_value] * X.shape[1])\n+    assert not np.isnan(X_trans).any()\n+\n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..e1037be 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -330,7 +330,44 @@ def test_iforest_with_n_jobs_does_not_segfault():\n def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n-    model = IsolationForest()\n+    import pandas as pd\n+    import warnings\n+    from sklearn.ensemble import IsolationForest\n+\n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+    \n+    Non-regression test for Issue #25844.\n+    \"\"\"\n+    rng = np.random.RandomState(0)\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"feature_1\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+    \n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+        \n+    X_test = pd.DataFrame(data=rng.randn(2, 1), columns=[\"feature_1\"])\n+    predictions = model.predict(X_test)\n+    assert len(predictions) == 2\n+\n+    # Ensuring no warnings when predicting with the same feature names\n+    with warnings.catch_warnings(record=True) as w:\n+        model.predict(X_test)\n+        assert len(w) == 0\n+\n+def test_iforest_feature_names_with_ndarray():\n+    \"\"\"Check that using ndarray doesn't raise warnings after fitting with DataFrame.\"\"\"\n+    rng = np.random.RandomState(0)\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"feature_1\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+    model.fit(X)\n+    \n+    # Use a numpy array during prediction\n+    X_test = rng.randn(2, 1)\n+    with warnings.catch_warnings(record=True) as w:\n+        model.predict(X_test)\n+        assert len(w) == 0\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +375,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..eee217a 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,17 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # Test to ensure KMeans results are consistent with different n_jobs\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(1000, 10))\n+\n+    for n_jobs in range(1, 5):\n+        inertia = KMeans(n_clusters=10, random_state=0, n_jobs=n_jobs).fit(X).inertia_\n+        if n_jobs == 1:\n+            inertia_reference = inertia\n+        else:\n+            assert_almost_equal(inertia, inertia_reference, decimal=5)\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..aaee6c7 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -7,6 +8,7 @@ from docutils import nodes\n \n from sphinx.config import Config\n from sphinx.directives.code import LiteralIncludeReader\n+from sphinx.directives.code import dedent_lines\n from sphinx.testing.util import etree_parse\n \n DUMMY_CONFIG = Config({}, {})\n@@ -252,6 +254,23 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n \n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_indentation(literal_inc_path):\n+    # Verify prepend with correct indentation\n+    # Using dedent effectively\n+    options = {\n+        'lines': '19-25',  # Adjust line numbers according to the simplified XML content\n+        'dedent': 2,\n+        'prepend': '      </plugin>'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"      </plugin>\\n\"\n+                       \"  <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                       \"  <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                       \"  <version>2.15.0</version>\\n\"\n+                       \"  <configuration>\\n\"\n+                       \"    <verifyFailOn>strict</verifyFailOn>\\n\"\n+                       \"  </configuration>\\n\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n     # tab-width: 4\n     options = {'tab-width': 4, 'pyobject': 'Qux'}\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..04aa5cf 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,27 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_no_return_type_in_class(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints.Square\\n'\n+            '\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n'\n+            '   __init__(width, height)\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **width** (*int*) --\\n'\n+            '         **height** (*int*) --\\n'\n+            '\\n' not in context)\n+    assert 'Return type:' not in context\n+\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..bdff1d1 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -147,6 +147,34 @@ def test_glossary(app):\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n+    # Test for case sensitivity: Ensure \"MySQL\" and \"mysql\" are treated as separate terms\n+    text_case_sensitive = (\".. glossary::\\n\"\n+                           \"\\n\"\n+                           \"   MySQL\\n\"\n+                           \"       description of MySQL\\n\"\n+                           \"\\n\"\n+                           \"   mysql\\n\"\n+                           \"       description of mysql\\n\")\n+\n+    doctree_case_sensitive = restructuredtext.parse(app, text_case_sensitive)\n+    assert_node(doctree_case_sensitive, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree_case_sensitive[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+\n+    # index\n+    objects_case_sensitive = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects_case_sensitive\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects_case_sensitive\n+\n \n def test_glossary_warning(app, status, warning):\n     # empty line between terms\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..e136cd1 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,20 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_from_str_positional_only_args_with_defaults():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..de0f3c2 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -52,7 +53,25 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+def test_generic_typed_class():\n+    # Test for generic-typed class to ensure no TypeError occurs\n+    T = TypeVar('T')\n+\n+    class SubClass2(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClass2\"\"\"\n+        \n+        def method(self, value: T) -> T:\n+            return value\n+\n+    obj2 = SubClass2()\n+    # Ensure the docstring is preserved\n+    assert SubClass2.__doc__ == \"docstring of SubClass2\"\n+    # Check instance creation\n+    assert isinstance(obj2, SubClass2)\n+    # Check method behavior with different types\n+    assert obj2.method(5) == 5  # integer\n+    assert obj2.method(\"test\") == \"test\"  # string\n+    assert obj2.method([1, 2, 3]) == [1, 2, 3]  # list\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..8d79d61 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -175,11 +176,35 @@ class SkipMemberTest(TestCase):\n                         SampleError._private_doc, False,\n                         'napoleon_include_private_with_doc')\n \n+    def test_class_decorated_init_doc(self):\n+        # Define a class with a decorated __init__ method\n+        class SampleClassWithDecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"Decorated init docstring\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_private_undoc(self):\n         self.assertSkip('exception', '_private_undoc',\n                         SampleError._private_undoc, True,\n                         'napoleon_include_private_with_doc')\n \n+    def test_class_decorated_init_doc(self):\n+        # Define a class with a decorated __init__ method\n+        class SampleClassWithDecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"Decorated init docstring\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleClassWithDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_special_doc(self):\n         self.assertSkip('exception', '__special_doc__',\n                         SampleError.__special_doc__, False,\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..1df6605 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -30,7 +30,11 @@ def test_defaults(app, status, warning):\n     # images should fail\n     assert \"Not Found for url: https://www.google.com/image.png\" in content\n     assert \"Not Found for url: https://www.google.com/image2.png\" in content\n-    assert len(content.splitlines()) == 5\n+    # Check local links\n+    assert \"[local] conf.py\" in content  # Assuming 'conf.py' is a valid local file\n+    assert \"[broken] doesntexist\" in content  # Check for the non-existent local link\n+\n+    assert len(content.splitlines()) == 7\n \n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n@@ -47,8 +51,16 @@ def test_defaults_json(app, status, warning):\n                  \"info\"]:\n         assert attr in row\n \n-    assert len(content.splitlines()) == 8\n-    assert len(rows) == 8\n+    # Check local links in JSON format\n+    local_link_row = next(row for row in rows if row['uri'] == 'conf.py')\n+    assert local_link_row['status'] == 'local'\n+    assert local_link_row['info'] == ''\n+    \n+    broken_local_link_row = next(row for row in rows if row['uri'] == 'doesntexist')\n+    assert broken_local_link_row['status'] == 'broken'\n+\n+    assert len(content.splitlines()) == 10\n+    assert len(rows) == 10\n     # the output order of the rows is not stable\n     # due to possible variance in network latency\n     rowsby = {row[\"uri\"]:row for row in rows}\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..50a565d 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -13,6 +14,29 @@ import pytest\n from test_ext_autodoc import do_autodoc\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specified_private_members(app):\n+    app.config.autoclass_content = 'both'\n+    options = {\"members\": None,\n+               \"private-members\": \"_private_function1,_private_function2\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_function1(arg)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_function1 is a docstring.',\n+        '',\n+        '.. py:function:: _private_function2(arg)',\n+        '   :module: target.private',\n+        '',\n+        '   _private_function2 is a docstring.',\n+        '',\n+    ]\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n",
  "sphinx-doc__sphinx-8120": "",
  "sphinx-doc__sphinx-8269": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 7842f56..fa4b6c5 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -107,6 +107,10 @@ def test_anchors_ignored(app, status, warning):\n     assert not content\n \n \n+import http.server\n+import pytest\n+import threading\n+\n @pytest.mark.sphinx(\n     'linkcheck', testroot='linkcheck', freshenv=True,\n     confoverrides={'linkcheck_auth': [\n@@ -159,4 +163,11 @@ def test_linkcheck_request_headers(app, status, warning):\n                 assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n                 assert headers[\"X-Secret\"] == \"open sesami\"\n             else:\n-                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..a01f819 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,36 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+from typing import Dict, Any\n+import pytest\n+from sphinx.testing.fixtures import app\n+\n+# Include the function that sets up the Sphinx test environment\n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={'autodoc_typehints': 'description',\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_type_aliases_with_description(app):\n+    # Write the rst file for testing\n+    (app.srcdir / 'types.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    content = (app.outdir / 'types.txt').read_text()\n+    \n+    # Check that the output matches the expected behavior described in the issue\n+    assert ('types.sphinx_doc(data)\\n'\n+            '\\n'\n+            '   Does it work.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      * **data** (*types.JSONObject*) --\\n'\n+            '         Does it args.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      Does it work in return.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      types.JSONObject\\n' in content)\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..6cdc1ae 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,6 +372,29 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import json\n+import pytest\n+import http.server\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.testing.path import path\n+import requests.exceptions\n+\n+@ pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_fallback_to_get_on_too_many_redirects(app: SphinxTestApp):\n+    class TooManyRedirectsHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"http://localhost:7777/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(TooManyRedirectsHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n     assert content == {\n@@ -381,4 +404,4 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..8a1c22f 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,16 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Check that the description for the Enum is rendered as expected\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert inspect.object_description(MyEnum.ValueB) == \"MyEnum.ValueB\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..a363e2a 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -17,6 +17,7 @@ from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n \n+import sys\n warnfile = StringIO()\n \n \n@@ -241,7 +242,27 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n-def test_extensions(tempdir):\n+def test_exits_when_existing_confpy(monkeypatch, capsys):\n+    # Mock path.isfile to always return True to simulate existing conf.py\n+    def mock_isfile(path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Mock input to simulate user pressing Enter\n+    def mock_input(prompt):\n+        if prompt.startswith('Please enter a new root path'):\n+            return ''\n+        raise ValueError(\"Unexpected prompt\")\n+\n+    monkeypatch.setattr('builtins.input', mock_input)\n+\n+    with pytest.raises(SystemExit):\n+        d = {}\n+        qs.ask_user(d)\n+\n+    captured = capsys.readouterr()\n+    assert \"Please enter a new root path (or just Enter to exit)\" in captured.out\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..4c7bccb 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -50,6 +50,7 @@ from sphinx.pycode import ast\n     (\"{1, 2, 3}\", \"{1, 2, 3}\"),                 # Set\n     (\"a - b\", \"a - b\"),                         # Sub\n     (\"'str'\", \"'str'\"),                         # Str\n+    (\"(1,)\", \"(1,)\"),                           # Tuple (single element)\n     (\"+ a\", \"+ a\"),                             # UAdd\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..d156f57 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,6 +847,47 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n+def test_cross_reference_in_property_type(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: y\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \".. py:class:: Rectangle\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Check cross-references for Square.end property\n+    assert_node(doctree[3][1][2], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, \": \", \n+                                                      [pending_xref, \"Point\"]])],\n+                                   [desc_content, ()]))\n+    \n+    # Check cross-references for Rectangle.end property\n+    assert_node(doctree[5][1][2], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, \": \", \n+                                                      [pending_xref, \"Point\"]])],\n+                                   [desc_content, ()]))\n+    \n def test_pydecorator_signature(app):\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..80e657d 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,42 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_2d_distance():\n+    p1 = Point2D(0, 0)\n+    p2 = Point2D(3, 4)\n+\n+    # Classic 3-4-5 triangle\n+    assert p1.distance(p2) == 5\n+\n+def test_3d_distance():\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 6, 8)\n+\n+    # The distance is sqrt(27 + 16 + 25) = sqrt(68)\n+    assert p1.distance(p2) == sqrt(68)\n+\n+def test_mixed_dimension_distance():\n+    p2d = Point2D(1, 0)\n+    p3d = Point3D(4, 0, 3)\n+\n+    # The distance involves only the common dimensions and accounts for the extra z-dimension\n+    assert p3d.distance(p2d) == sqrt(18)\n+    \n+    # Test a case where the 2D point has a non-zero imaginary dimension\n+    p2d_imag = Point2D(1, 0 + 3)\n+\n+    # Should calculate considering all dimensions correctly\n+    assert p3d.distance(p2d_imag) == sqrt(18)\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..b4cf14e 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -752,7 +752,20 @@ def test_issue_2790():\n     assert lambdify(x, x + 1, dummify=False)(1) == 2\n \n \n-def test_ITE():\n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    # Original test case to ensure the specific issue is fixed\n+    f = implemented_function('f', lambda x: x**2)\n+    assert f(f(2)).evalf() == Float(16)\n+\n+    # Additional test cases to cover more scenarios\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    assert f(g(f(2))).evalf() == Float(64)\n+    assert g(f(g(2))).evalf() == Float(32)\n     assert lambdify((x, y, z), ITE(x, y, z))(True, 5, 3) == 5\n     assert lambdify((x, y, z), ITE(x, y, z))(False, 5, 3) == 3\n \n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..bb0629e 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,13 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import symbols, Identity, Sum\n \n-def test_Identity_doit():\n+def test_Identity_sum_of_elements():\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+    # The sum of all elements in an n x n identity matrix should be n\n+    assert Sum(Sum(In[i, j], (i, 0, n - 1)), (j, 0, n - 1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..163240a 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,14 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # Test case for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])  # Should apply cycles in order\n+    assert Permutation([[0, 2], [1, 2]]) == Permutation([2, 1, 0])  # Should apply cycles in order\n+    assert Permutation([[0, 1, 2], [2, 0]]) == Permutation([2, 0, 1])  # Overlapping cycles\n+    assert Permutation([[0, 1], [2, 3], [0, 2]]) == Permutation([2, 0, 3, 1])  # Multiple non-disjoint cycles\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])  # Double swap leading back to identity\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex fa86bc3..f003207 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -1273,6 +1273,35 @@ def test_zeros_ones_fill():\n     assert zeros(2, 3) == Matrix(2, 3, [0]*6)\n     assert ones(2, 3) == Matrix(2, 3, [1]*6)\n \n+def test_matrix_stacking_zero_sized():\n+    # Test hstack with zero row matrices\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1)\n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    # Test hstack with zero row and non-zero column matrices\n+    M1 = Matrix.zeros(1, 0)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(1, 2)\n+    M4 = Matrix.zeros(1, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+    # Test vstack with zero column matrices\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(1, 0)\n+    M3 = Matrix.zeros(2, 0)\n+    M4 = Matrix.zeros(3, 0)\n+    assert Matrix.vstack(M1, M2, M3, M4).shape == (6, 0)\n+\n+    # Ensure behavior when matrices have one row\n+    M1 = Matrix.zeros(0, 1)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(2, 1)\n+    M4 = Matrix.zeros(3, 1)\n+    assert Matrix.vstack(M1, M2, M3, M4).shape == (6, 1)\n+\n \n def test_empty_zeros():\n     a = zeros(0)\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..6accc9f 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -162,6 +162,23 @@ def test_evalf_near_integers():\n \n def test_evalf_ramanujan():\n     assert NS(exp(pi*sqrt(163)) - 640320**3 - 744, 10) == '-7.499274028e-13'\n+\n+    # Test for UnboundLocalError in evalf when using Mul with Max\n+    #issue 13076 original test\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    \n+    # Additional test cases\n+    assert NS(Mul(Max(x, 0), y, evaluate=False).evalf()) == 'y*Max(x, 0)'\n+    assert NS(Mul(y, Max(x, 0), evaluate=False).evalf()) == 'y*Max(x, 0)'\n+    assert NS(Mul(Max(x, y), 0, evaluate=False).evalf()) == '0'\n+    \n+    # Verify with actual numbers\n+    assert NS(Mul(Max(0, 3), 5, evaluate=False).evalf()) == '15.0000000000000'\n+    assert NS(Mul(Max(0, -3), 5, evaluate=False).evalf()) == '0'\n+    \n+    # Ensure no errors and correct evaluation with nested Max\n+    assert NS(Mul(Max(Max(0, x), y), z, evaluate=False).evalf()) == 'z*Max(Max(0, x), y)'\n+    assert NS(Mul(z, Max(Max(0, x), y), evaluate=False).evalf()) == 'z*Max(Max(0, x), y)'\n     # A related identity\n     A = 262537412640768744*exp(-pi*sqrt(163))\n     B = 196884*exp(-2*pi*sqrt(163))\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..9d36b3d 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,22 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+def test_coth_subs():\n+    from sympy import Symbol, coth, log, tan, sqrt\n+\n+    x = Symbol('x')\n+    assert coth(log(tan(2))) == coth(log(-tan(2)))  # Based on existing test case\n+    # Additional test cases to ensure the bug is fixed\n+    assert coth(log(tan(3))) == coth(log(-tan(3)))\n+    assert coth(log(tan(5))) == coth(log(-tan(5)))\n+    assert coth(log(tan(6))) == coth(log(-tan(6)))\n+    assert coth(log(tan(8))) == coth(log(-tan(8)))\n+    assert coth(log(tan(9))) == coth(log(-tan(9)))\n+    assert coth(log(tan(11))) == coth(log(-tan(11)))\n+    assert coth(log(tan(12))) == coth(log(-tan(12)))\n+    assert coth(log(tan(13))) == coth(log(-tan(13)))\n+    assert coth(log(tan(15))) == coth(log(-tan(15)))\n+    assert coth(log(tan(18))) == coth(log(-tan(18)))\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..aa22bec 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,7 +165,16 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import Symbol, Complement, FiniteSet, Interval, oo, Union, S, pi\n+...\n def test_Complement():\n+    # Test case for issue where complement doesn't work with Symbols and numbers\n+    x, y = Symbol('x'), Symbol('y')\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+    # Additional test cases to further validate the fix\n+    assert Complement(FiniteSet(x, 2, 3), Interval(0, 5)) == Complement(FiniteSet(x), Interval(0, 5))\n+    assert Complement(FiniteSet(y, -1, 7), Interval(-10, 10)) == Complement(FiniteSet(y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, y, 2, 11), Interval(-10, 10)) == Complement(FiniteSet(x, y, 11), Interval(-10, 10))\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..630f8aa 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,21 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    # Verify the solution of issue 13643\n+    import sympy as sm\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..6ec537f 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -678,6 +678,18 @@ def test_Poly_mul():\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n+from sympy import Poly, Symbol, S\n+\n+x = Symbol('x')\n+\n+def test_issue_13079():\n+    # Test cases based on the issue statement\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n def test_Poly_sqr():\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..1560b84 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -61,6 +61,24 @@ def test_latex_basic():\n     assert latex(x**(1 + x)) == \"x^{x + 1}\"\n     assert latex(x**3 + x + 1 + x**2) == \"x^{3} + x^{2} + x + 1\"\n \n+def test_latex_mul_symbol_custom():\n+    # Testing the custom use of the thin space as multiplication symbol\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    # Ensure default behavior for numbers remains unchanged\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+    # Test custom symbol for a simple expression\n+    assert latex(x*y, mul_symbol='\\\\,') == r\"x\\,y\"\n+    # Test custom symbol with a more complex expression\n+    assert latex(2*x**3*y**2, mul_symbol='\\\\,') == r\"2\\,x^{3}\\,y^{2}\"\n+    # Test with fractions\n+    assert latex((x/y)*z, mul_symbol='\\\\,') == r\"\\frac{x}{y}\\,z\"\n+    # Ensure 'dot' works consistently\n+    assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n+    # Test using asterisk as a custom symbol\n+    assert latex(x*y*z, mul_symbol='*') == r\"x*y*z\"\n+    # Test using times symbol\n+    assert latex(a*b*c, mul_symbol='times') == r\"a \\times b \\times c\"\n+\n     assert latex(2*x*y) == \"2 x y\"\n     assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n \n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..e4977be 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -314,7 +314,22 @@ def test_as_mutable():\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n \n \n+from sympy import symbols, Matrix\n+\n def test_determinant():\n+    # Test cases for issue 13835\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+\n+    assert M(5).det() == 0, \"Expected determinant of M(5) to be 0\"\n+    assert M(6).det() == 0, \"Expected determinant of M(6) to be 0\"\n+    assert M(7).det() == 0, \"Expected determinant of M(7) to be 0\"\n+    \n+    # Additional test cases for smaller matrices to check consistency\n+    assert M(1).det() == 0, \"Expected determinant of M(1) to be 0\"\n+    assert M(2).det() == -a, \"Expected determinant of M(2) to be -a\"\n+    # Checking known result for M(3)\n+    assert M(3).det().simplify() == 0, \"For M(3), the determinant simplifies to 0\"\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert (\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..944a048 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,8 +708,59 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n+from sympy import S, Rational, integrate, oo, pi, asin, exp, Abs, sqrt, beta as beta_fn\n+from sympy.stats import cdf, density, Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum\n \n-def test_precomputed_cdf():\n+def test_precomputed_cdf_issue():\n+    # Test precomputed CDFs for specific cases mentioned in the issue\n+\n+    # Arcsin distribution\n+    A = Arcsin(\"A\", 0, 3)\n+    assert cdf(A)(1).simplify() == 2*asin(sqrt(1/3))/pi\n+\n+    # Dagum distribution\n+    D = Dagum(\"D\", S(1)/3, S(1)/5, 2)\n+    assert cdf(D)(3).simplify() == (1 + (3/(S(1)/5))**(-S(1)/3))**(-2)\n+\n+    # Erlang distribution\n+    E = Erlang(\"E\", 1, 1)\n+    assert cdf(E)(1).simplify() == 1 - exp(-1)\n+\n+    # Frechet distribution\n+    F = Frechet(\"F\", S(4)/3, 1, 2)\n+    assert cdf(F)(3).simplify() == exp(-((3 - 2)/1)**(-S(4)/3))\n+\n+    # Gamma distribution\n+    G = Gamma(\"G\", 0.1, 2)\n+    assert cdf(G)(3).simplify() == lowergamma(S(0.1), S(1.5))/gamma(S(0.1))\n+\n+    # GammaInverse distribution\n+    GI = GammaInverse(\"GI\", S(5)/7, 2)\n+    assert cdf(GI)(3).simplify() == uppergamma(S(5)/7, S(2)/3)/gamma(S(5)/7)\n+\n+    # Kumaraswamy distribution\n+    K = Kumaraswamy(\"K\", S(1)/123, 5)\n+    assert cdf(K)(S(1)/3).simplify() == 1 - (1 - S(1)/3**S(1)/123)**5\n+\n+    # Laplace distribution\n+    LA = Laplace(\"LA\", 2, 3)\n+    assert cdf(LA)(5).simplify() == 1 - exp(-(5 - 2)/3)/2\n+\n+    # Logistic distribution\n+    L = Logistic(\"L\", 1, 0.1)\n+    assert cdf(L)(2).simplify() == 1/(exp((1 - 2)/0.1) + 1)\n+\n+    # Nakagami distribution\n+    N = Nakagami(\"N\", S(7)/3, 1)\n+    assert cdf(N)(2).simplify() == lowergamma(S(7)/3, S(7)*4/3)/gamma(S(7)/3)\n+\n+    # Student T distribution\n+    S = StudentT(\"S\", 10)\n+    assert cdf(S)(2).simplify() == 1/2 + x*gamma(S(5.5))*hyper((1/2, 5.5), (3/2,), -x**2/10)/(sqrt(pi)*sqrt(10)*gamma(S(5)))\n+\n+    # Uniform Sum distribution\n+    US = UniformSum(\"US\", 5)\n+    assert integrate(density(US)(x), (x, -oo, 2)).simplify() == cdf(US)(2)\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..07f4be7 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,23 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+def test_tensor_product_pow():\n+    A, B, C, D = symbols('A,B,C,D', commutative=False)\n+    x = Symbol('x')\n+    \n+    # Tests for Pow-expressions\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+    assert tensor_product_simp(x*(TP(A, B)**2)*TP(C,D)) == x*TP(A**2*C, B**2*D)\n+    assert tensor_product_simp(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n+\n+    # Additional tests based on the issue example\n+    assert tensor_product_simp(TP(1, 1)*TP(1, 1)) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, 1)*TP(1, C)).subs(C, 1) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, Pauli(3))*TP(1, Pauli(3))) == TP(1, Pauli(3)**2)\n+    assert tensor_product_simp(TP(1, Pauli(3))*TP(1, A)).subs(A, Pauli(3)) == TP(1, Pauli(3))\n+\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 29c7fd2..c36983e 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -493,6 +493,12 @@ def test_Rational():\n     assert sstr(Symbol(\"x\")**Rational(2, 3), sympy_integers=True) == \"x**(S(2)/3)\"\n \n \n+def test_respect_sympy_integers_in_subexpressions():\n+    x = Symbol(\"x\")\n+    assert sstr(x + S(1)/2, sympy_integers=True) == \"x + S(1)/2\"\n+    assert sstr(Eq(x, S(1)/2), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, S(1)/2), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n+\n def test_Float():\n     # NOTE dps is the whole number of decimal digits\n     assert str(Float('1.23', dps=1 + 2)) == '1.23'\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..9fa8d0b 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -12,6 +12,14 @@ def test_Vector():\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n+    # Test for issue: vector add 0 error fix\n+    assert A.x + 0 == A.x\n+    N = ReferenceFrame('N')\n+    assert sum([N.x, (0 * N.x)]) == N.x\n+\n+    # Additional test cases for vector addition\n+    assert N.x + 0 * N.y == N.x  # Adding zero times a different vector\n+    assert (0 * N.x) + (0 * N.y) == Vector(0)  # Adding two zero vectors (should be zero)\n \n     v1 = x*A.x + y*A.y + z*A.z\n     v2 = x**2*A.x + y**2*A.y + z**2*A.z\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..ad96bb1 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -134,6 +135,26 @@ def test_math_lambda():\n \n \n @conserve_mpmath_dps\n+def test_rational_wrapping_in_lambdify_mpmath():\n+    from sympy import rf\n+    import inspect\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Get the source code for the generated function to verify the conversion\n+    source = inspect.getsource(f)\n+    \n+    # Check that the rational number is wrapped with mpmath.mpf\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in source\n+    \n+    # Test precision with nsolve\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    \n+    # Ensure that precision meets the requirement stated in the issue\n+    expected = Float('77.33333333333332859638176159933209419250488281250000000000000000', 64)\n+    assert abs(result - expected) < Float('1e-50', 64)\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -145,6 +166,26 @@ def test_mpmath_lambda():\n \n \n @conserve_mpmath_dps\n+def test_rational_wrapping_in_lambdify_mpmath():\n+    from sympy import rf\n+    import inspect\n+    x = symbols('x')\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Get the source code for the generated function to verify the conversion\n+    source = inspect.getsource(f)\n+    \n+    # Check that the rational number is wrapped with mpmath.mpf\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in source\n+    \n+    # Test precision with nsolve\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    \n+    # Ensure that precision meets the requirement stated in the issue\n+    expected = Float('77.33333333333332859638176159933209419250488281250000000000000000', 64)\n+    assert abs(result - expected) < Float('1e-50', 64)\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..5b3bbab 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,11 +74,19 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    # Test the length of a rank-0 array\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n-    raises(ValueError, lambda: rank_zero_array[0])\n+    assert rank_zero_array[()] == x\n+    assert list(rank_zero_array) == [x]  # Ensure list conversion works as expected\n+    # For comparison, test against a NumPy array with the same scalar value\n+    import numpy as np\n+    numpy_rank_zero_array = np.asarray(x)\n+    assert len(numpy_rank_zero_array) == 1\n+    assert list(numpy_rank_zero_array) == [x]\n+    raises(IndexError, lambda: rank_zero_array[0])  # Access by index should still raise an error\n \n \n def test_reshape():\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..4716296 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -24,7 +25,13 @@ def test_Rational():\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n \n-def test_Function():\n+def test_Max_Min():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(x, y, 2, 3)) == \"Max[x, y, 2, 3]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y)) == \"Max[x, y]\"\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Max(x,y,z)*Min(y,z)) == \"Max[x, y, z]*Min[y, z]\"\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..c74d5d9 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,58 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix_sign():\n+    \"\"\"\n+    Verify the sign correction in the rotation matrix.\n+    The expected outcome should have one of the sin terms negative.\n+    \"\"\"\n+    from sympy import symbols, cos, sin, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+    \n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix = Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x), cos(x)]\n+    ])\n+    \n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n+def test_quaternion_to_rotation_matrix_fixed_example():\n+    \"\"\"\n+    Test the rotation matrix for a different set of quaternion values.\n+    It helps in making sure the fix is generalized.\n+    \"\"\"\n+    from sympy import symbols, cos, sin, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+    \n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), 0, sin(x/2), 0)\n+    expected_matrix = Matrix([\n+        [cos(x), 0, sin(x)],\n+        [0,     1,      0],\n+        [-sin(x), 0, cos(x)]\n+    ])\n+    \n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n+def test_quaternion_to_rotation_matrix_zero_angle():\n+    \"\"\"\n+    Test the rotation matrix for a zero angle quaternion.\n+    \"\"\"\n+    from sympy import Matrix\n+    from sympy.algebras.quaternion import Quaternion\n+    \n+    q = Quaternion(1, 0, 0, 0)\n+    expected_matrix = Matrix([\n+        [1, 0, 0],\n+        [0, 1, 0],\n+        [0, 0, 1]\n+    ])\n+    \n+    assert q.to_rotation_matrix() == expected_matrix\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +171,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..c4f1663 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,21 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # additional test cases\n+    assert Mod(9*i, 3) == 0\n+    assert Mod(12*j, 6) == 0\n+    assert Mod(0, 2) == 0\n+    assert Mod(-3*i, 2) == Mod(-i, 2)\n+    assert Mod(-9*j, 3) == 0\n+    assert Mod(27*j, 9) == 0\n+    assert Mod(10*i, 5) == 0\n+    assert Mod(3*i + 1, 2) == Mod(i + 1, 2)\n+    assert Mod(3*i - 1, 2) == Mod(i - 1, 2)\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..050d25b 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,7 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +156,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..6bbe563 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,39 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n-\n-def test_issue_14392():\n+from sympy import I, simplify, symbols\n+\n+def test_issue_15873():\n+    # Original test case\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True\n+    \n+    # Additional test cases\n+    # Complex expression that simplifies to zero\n+    e1 = (2 + 3*I) - (2 + 3*I)\n+    assert e1.is_zero is True\n+\n+    # Complex expression that remains nonzero\n+    e2 = (2 + I) - (3 + I)\n+    assert e2.is_zero is False\n+\n+    # Expression where decision can't be made without simplification\n+    e3 = (1 + I)**2 + (-2*I)\n+    assert e3.is_zero is None\n+    assert simplify(e3).is_zero is True\n+\n+    # Edge case: purely imaginary part\n+    e4 = I - I\n+    assert e4.is_zero is True\n+\n+    # Expression with zero that should return None without full evaluation\n+    x = symbols('x', zero=True)\n+    e5 = -2*I + (1 + I)**2 + x\n+    assert e5.is_zero is None\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..8d13dbe 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -512,7 +512,18 @@ def test_posify():\n         'Sum(_x**(-n), (n, 1, 3))'\n \n \n-def test_issue_4194():\n+def test_issue_16438():\n+    from sympy import Symbol, posify\n+\n+    # Create a symbol with a finite assumption\n+    k = Symbol('k', finite=True)\n+    \n+    # Apply posify\n+    eq, rep = posify(k)\n+    \n+    # Check if the finite assumption is preserved\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['infinite'] == False\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..a2f4e9c 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -11,7 +12,7 @@ from sympy.matrices import SparseMatrix, MatrixSymbol\n from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n-from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -19,11 +20,27 @@ x, y, z = symbols('x y z')\n def test_PythonCodePrinter():\n     prntr = PythonCodePrinter()\n     assert not prntr.module_imports\n+\n+    # Test Indexed support\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1, 2]) == 'p[0, 1, 2]'\n+    assert prntr.doprint(p[x]) == 'p[x]'\n+    assert prntr.doprint(p[x, y]) == 'p[x, y]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n     assert not prntr.module_imports\n+\n+    # Test Indexed support\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1, 2]) == 'p[0, 1, 2]'\n+    assert prntr.doprint(p[x]) == 'p[x]'\n+    assert prntr.doprint(p[x, y]) == 'p[x, y]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n     assert prntr.doprint(pi) == 'math.pi'\n     assert prntr.module_imports == {'math': {'pi'}}\n     assert prntr.doprint(acos(x)) == 'math.acos(x)'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..f2fc694 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -31,7 +31,24 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     return source\n \n \n-def test_cython_wrapper_scalar_function():\n+def test_cython_autowrap_unused_array_arg():\n+    from sympy import MatrixSymbol\n+    from sympy.utilities.autowrap import autowrap\n+    import numpy as np\n+\n+    # Define a matrix symbol 'x' with dimensions 2x1\n+    x = MatrixSymbol('x', 2, 1)\n+    # Expression that does not depend on 'x'\n+    expr = 1.0\n+\n+    # Use autowrap with expression that does not use 'x'\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    # Call the generated function with a numpy array matching 'x' dimensions\n+    result = f(np.array([[1.0], [2.0]]))\n+\n+    # Verify that the result is as expected\n+    assert result == 1.0, \"The autowrap function did not return the expected result when 'x' is unused.\"\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..b3bffda 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,6 +248,19 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n+def test_encode_morse_numbers():\n+    # Test the corrected morse code mapping for '1'\n+    assert encode_morse('1') == '.----'\n+    # Ensure other numbers are correctly encoded\n+    assert encode_morse('0') == '-----'\n+    assert encode_morse('2') == '..---'\n+    assert encode_morse('3') == '...--'\n+    assert encode_morse('4') == '....-'\n+    assert encode_morse('5') == '.....'\n+    assert encode_morse('6') == '-....'\n+    assert encode_morse('7') == '--...'\n+    assert encode_morse('8') == '---..'\n+    assert encode_morse('9') == '----.'\n \n def test_decode_morse():\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..15ee8ed 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..d9660ab 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -7,6 +8,17 @@ from sympy.utilities.pytest import raises, warns\n \n \n def test_point():\n+    # Additional test cases for the reported issue\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+\n+    # Test that multiplication works correctly in both orders\n+    assert p1 + p2 * scalar == Point(2, 2)\n+    assert p1 + scalar * p2 == Point(2, 2)\n+    \n+    # Ensure both operations are commutative and do not raise exceptions\n+    assert scalar * p2 + p1 == p2 * scalar + p1\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..3c5374d 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -501,7 +501,13 @@ def test_diophantine():\n     assert diophantine(eq, permute=True) == complete_soln\n \n     assert diophantine(x**2 + x*Rational(15, 14) - 3) == set()\n-    # test issue 11049\n+    # test issue 18186\n+    from sympy import symbols\n+    x, y = symbols('x y', integer=True)\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     eq = 92*x**2 - 99*y**2 - z**2\n     coeff = eq.as_coefficients_dict()\n     assert _diop_ternary_quadratic_normal((x, y, z), coeff) == \\\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..fb363e0 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -664,6 +664,20 @@ def test_latex_derivatives():\n     x2 = Symbol('x2')\n     assert latex(diff(f(x1, x2), x1)) == r'\\frac{\\partial}{\\partial x_{1}} f{\\left(x_{1},x_{2} \\right)}'\n \n+def test_latex_subs_parenthesis_issue():\n+    from sympy import Subs, symbols, latex\n+    x, y = symbols('x y')\n+    # Test case from the reported issue\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    # Additional test cases\n+    z = symbols('z')\n+    # Complex expression\n+    assert latex(Subs(x*y + z, (x, y), (1, 2))) == r'\\left. \\left(x y + z\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    # Nested Subs\n+    assert latex(Subs(Subs(x+y, (x,), (z,)), (y,), (1,))) == r'\\left. \\left(\\left. \\left(x + y\\right) \\right|_{\\substack{ x=z }} + y\\right) \\right|_{\\substack{ y=1 }}'\n+    # Expression evaluating to a single symbol\n+    assert latex(Subs(y, (x,), (0,))) == r'\\left. y \\right|_{\\substack{ x=0 }}'\n+\n     n1 = Symbol('n1')\n     assert latex(diff(f(x), (x, n1))) ==  r'\\frac{d^{n_{1}}}{d x^{n_{1}}} f{\\left(x \\right)}'\n \n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..9892ffd 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -473,7 +473,9 @@ def test_issue_4988_builtins():\n     assert exp1 == C  # Make sure it did not get mixed up with sympy.C\n \n     exp2 = sympify('C', vars)\n-    assert exp2 == C  # Make sure it did not get mixed up with sympy.C\n+from sympy.core.sympify import kernS\n+from sympy import Symbol, Interval, Mul, Add, exp, sin, cos, Matrix, Rational\n+from sympy.abc import x, y\n \n \n def test_geometry():\n@@ -514,7 +516,15 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_issue_kernS_unboundlocalerror():\n+    # Test whether 'kern' can be unbound\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+    # Test with other expressions\n+    assert kernS(\"1 + 2*(x + y)\") == 1 + 2*(x + y)\n+    assert kernS(\"2 - 3*(-2*x + 3)/(x**2)\") == 2 - 3*(-2*x + 3) / (x**2)\n+    assert kernS(\"(a + b)*(c + d)\") == (Symbol('a') + Symbol('b'))*(Symbol('c') + Symbol('d'))\n+    assert kernS(\"exp(x + y)*sin(x)*cos(y)\") == exp(x + y)*sin(x)*cos(y)\n+    assert kernS(\"-3 + 4*((a - b)/(c + d)/e)\") == -3 + 4*((Symbol('a') - Symbol('b'))/(Symbol('c') + Symbol('d'))/Symbol('e'))\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..7024b1b 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -84,6 +85,15 @@ def test_unitary():\n     assert Dagger(U).is_commutative is False\n \n \n+def test_dagger_identity_multiplication():\n+    I = IdentityOperator()\n+    O = Operator('O')\n+    D = Dagger(O)\n+\n+    # Test the issue statement\n+    assert D * I == D\n+    assert I * D == D\n+\n def test_identity():\n     I = IdentityOperator()\n     O = Operator('O')\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..052bc34 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -901,6 +901,29 @@ def test_sylow_subgroup():\n     assert G.order()/S.order() % 3 > 0\n \n     G = AlternatingGroup(100)\n+\n+    # Test cases specifically for the reported issue with sylow_subgroup\n+\n+    # Dihedral group of order 18, test Sylow 2-subgroup\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Dihedral group of order 50, test Sylow 2-subgroup\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Additional cases for different configurations\n+    # Dihedral group of order 30, test for Sylow 3-subgroup\n+    G = DihedralGroup(30)\n+    S = G.sylow_subgroup(p=3)\n+    assert S.order() == 3\n+\n+    # Dihedral group of order 24, test for Sylow 2-subgroup\n+    G = DihedralGroup(24)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 8\n     S = G.sylow_subgroup(2)\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..dadc110 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,8 +513,23 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n-\n-def test_binary_partitions():\n+import sympy\n+from sympy.utilities.iterables import partitions\n+\n+def test_partitions_unique():\n+    # Ensure that partitions() yields unique dictionary objects each time\n+    p_gen = partitions(5, k=2)\n+    p1 = next(p_gen)\n+    p2 = next(p_gen)\n+    p3 = next(p_gen)\n+    p1[(2,)] = 99  # Modify the first partition\n+    assert (2,) not in p2  # Check it hasn't affected the second partition\n+    assert (2,) not in p3  # Check it hasn't affected the third partition\n+\n+    # A more thorough test with partition copying and hashes\n+    results = [p.copy() for p in partitions(6, k=3)]\n+    hashes = [hash(frozenset(p.items())) for p in results]\n+    assert len(hashes) == len(set(hashes)), \"Partitions have reused dictionaries\"\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20801": "",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..a85cf02 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -7,7 +8,34 @@ from sympy import (\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+from sympy import sinh, cosh, tanh, exp, Piecewise, Symbol\n+\n+def test_issue_21373_subs_with_hyperbolic_functions():\n+    # Define symbols\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+\n+    # Tests covering various hyperbolic functions with real symbols\n+    expr_sinh = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_sinh.subs({1: 1.0}) is not None\n+\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_cosh.subs({1: 1.0}) is not None\n+\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_tanh.subs({1: 1.0}) is not None\n+\n+    # Tests without division by z (should not raise PolynomialError)\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_div.subs({1: 1.0}) is not None\n+\n+    # Tests with unary functions other than exp\n+    expr_log = log(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_log.subs({1: 1.0}) is not None\n+\n+    expr_sin = sin(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_sin.subs({1: 1.0}) is not None\n \n+ \n def test_subs():\n     n3 = Rational(3)\n     e = x\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..ee7fafe 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -15,6 +15,8 @@ from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n \n def test_monomials():\n \n@@ -78,7 +80,31 @@ def test_monomials():\n                             x * i * j, x * j * i\n             }\n \n-    # degree_list tests\n+    # New test cases for verifying the issue with min_degrees argument\n+    def test_itermonomials_with_min_degrees():\n+        # Case when min_degrees equals max_degrees\n+        x1, x2, x3 = symbols('x1 x2 x3')\n+        max_degrees = 3\n+        min_degrees = 3\n+        expected_monomials = {\n+            x1**3, x2**3, x3**3,\n+            x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3,\n+            x3**2*x1, x3**2*x2, x1*x2*x3\n+        }\n+        assert set(itermonomials([x1, x2, x3], max_degrees, min_degrees=min_degrees)) == expected_monomials\n+\n+        # Case when min_degrees is less than max_degrees\n+        min_degrees = 2\n+        expected_monomials = {\n+            x1**3, x2**3, x3**3,\n+            x1**2, x2**2, x3**2,\n+            x1*x2, x1*x3, x2*x3,\n+            x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3,\n+            x3**2*x1, x3**2*x2, x1*x2*x3\n+        }\n+        assert set(itermonomials([x1, x2, x3], max_degrees, min_degrees=min_degrees)) == expected_monomials\n+\n+    test_itermonomials_with_min_degrees()\n     assert set(itermonomials([], [])) == {S.One}\n \n     raises(ValueError, lambda: set(itermonomials([], [0])))\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..1be1a12 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # New test case for argument invariance\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..f698ac9 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -10,6 +11,7 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n \n \n def test_point():\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..ba7d2c7 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -53,6 +54,22 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n     assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+\n+    # Test for Min and Max\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    \n+    # Additional test cases with more arguments\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    \n+    # Min and Max with constants\n+    assert prntr.doprint(Min(x, 5, y)) == \"min(x, 5, y)\"\n+    assert prntr.doprint(Max(3, x, 2)) == \"max(3, x, 2)\"\n+    \n+    # Nested Min and Max\n+    assert prntr.doprint(Min(Max(x, y), z)) == \"min(max(x, y), z)\"\n+    assert prntr.doprint(Max(Min(x, y), Min(z, 3))) == \"max(min(x, y), min(z, 3))\"\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..ea21f50 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,7 +1175,13 @@ def test_scipy_polys():\n \n \n \n-def test_lambdify_inspect():\n+def test_tuple_with_one_element():\n+    # Test to ensure that a tuple with one element is correctly returned\n+    f2b = lambdify([], (1,))\n+    assert f2b() == (1,)\n+    # Verify the source code reflects a one-element tuple, with the trailing comma\n+    source = inspect.getsource(f2b)\n+    assert \"return (1,)\" in source\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..f65001f 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,6 +1,8 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n@@ -294,8 +296,27 @@ def test_symbols():\n     assert symbols('aa:d,x:z') == (aa, ab, ac, ad, x, y, z)\n     assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n \n-\n-    # issue 6675\n+    # Test for issue regarding symbols with extra parentheses\n+    def test_symbols_with_extra_parentheses_function_creation():\n+        q, u = symbols(('q:2', 'u:2'), cls=Function)\n+        assert isinstance(q[0], UndefinedFunction)\n+        assert isinstance(q[1], UndefinedFunction)\n+        assert isinstance(u[0], UndefinedFunction)\n+        assert isinstance(u[1], UndefinedFunction)\n+        assert type(symbols(('q:2', 'u:2'), cls=Function)[0][0]) == UndefinedFunction  # issue 23532\n+\n+    def test_symbols_without_extra_parentheses():\n+        q, u = symbols('q:2 u:2', cls=Function)\n+        assert isinstance(q[0], UndefinedFunction)\n+        assert isinstance(q[1], UndefinedFunction)\n+        assert isinstance(u[0], UndefinedFunction)\n+        assert isinstance(u[1], UndefinedFunction)\n+\n+    def test_symbols_with_mixed_types():\n+        q, u = symbols(('q:2', 'u:2'), cls=Function)\n+        a, b = symbols(('a b'))\n+        assert isinstance(q[0], UndefinedFunction)\n+        assert isinstance(a, Symbol)\n     def sym(s):\n         return str(symbols(s))\n     assert sym('a0:4') == '(a0, a1, a2, a3)'\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..f13757f 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -254,6 +254,19 @@ def test_kahane_simplify1():\n     assert r.equals((8*D - 12*D**2 + 6*D**3 - D**4)*eye(4))\n \n     # Expressions with free indices:\n+\n+    # Test case for issue with leading uncontracted gamma matrices\n+    def test_kahane_leading_gamma_matrix_order():\n+        mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+        \n+        # Leading gamma matrices order should be preserved\n+        t1 = G(mu)*G(-mu)*G(rho)*G(sigma)\n+        r1 = kahane_simplify(t1)\n+        assert r1.equals(4*G(rho)*G(sigma)), \"Leading gamma matrices order not preserved in t1\"\n+\n+        t2 = G(rho)*G(sigma)*G(mu)*G(-mu)\n+        r2 = kahane_simplify(t2)\n+        assert r2.equals(4*G(rho)*G(sigma)), \"Leading gamma matrices order not preserved in t2\"\n     t = (G(mu)*G(nu)*G(rho)*G(sigma)*G(-mu))\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..b60293f 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -39,6 +39,14 @@ def test_binary_symbols():\n \n \n def test_as_set():\n+    x = Symbol('x')\n+    # Test Contains with different predefined sets in sympy\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+\n+    # Test Contains with more complex sets\n+    raises(NotImplementedError, lambda: Contains(x, S.Naturals).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Complexes).as_set())\n     x = Symbol('x')\n     y = Symbol('y')\n     # Contains is a BooleanFunction whose value depends on an arg's\n@@ -48,4 +56,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..47e00be 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,30 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..faa96b0 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -548,7 +548,29 @@ def test_issue_24062():\n     R = Quantity('R')\n     C = Quantity('C')\n     T = Quantity('T')\n-    SI.set_quantity_dimension(R, impedance)\n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_collect_factor_and_dimension():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    # This should not throw a ValueError if dimensions are handled correctly\n+    try:\n+        factor, dimension = SI._collect_factor_and_dimension(expr1)\n+        print(factor, dimension)\n+    except ValueError as e:\n+        print(f\"Unexpected error: {e}\")\n     SI.set_quantity_dimension(C, capacitance)\n     SI.set_quantity_dimension(T, time)\n     R.set_global_relative_scale_factor(1, ohm)\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..378ff71 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -56,8 +57,17 @@ def test_homomorphism():\n     assert T.domain == F\n     assert T.codomain == D\n     assert T(a*b) == p\n+def test_issue_check_homomorphism_with_dihedral_group():\n+    from sympy.combinatorics.named_groups import DihedralGroup\n+\n+    # Setup the permutation group D3\n+    D3 = DihedralGroup(3)\n \n-def test_isomorphisms():\n+    # Attempt to create a homomorphism from D3 to D3 using its generators\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+\n+    # Assert that the homomorphism is an isomorphism\n+    assert T.is_isomorphism()\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..a70f693 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -265,6 +265,26 @@ def test_PolyElement_as_expr():\n     assert f != g\n     assert f.as_expr(X, Y, Z) == g\n \n+    # New test cases\n+    U, V, W = symbols(\"u,v,w\")\n+    g_new = 3*U**2*V - U*V*W + 7*W**3 + 1\n+\n+    # Test with different symbols\n+    assert f.as_expr(U, V, W) == g_new\n+\n+    # Test with too few symbols\n+    raises(ValueError, lambda: f.as_expr(U))\n+\n+    # Test with too many symbols\n+    raises(ValueError, lambda: f.as_expr(U, V, W, X))\n+\n+    # Test with no symbols using default ring's symbols\n+    assert f.as_expr() == g\n+    g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+\n+    assert f != g\n+    assert f.as_expr(X, Y, Z) == g\n+\n     raises(ValueError, lambda: f.as_expr(X))\n \n     R, = ring(\"\", ZZ)\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..922e8d2 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -273,8 +273,24 @@ def test_convert_equals_signs():\n     assert parse_expr(\"(2*y = x) = False\",\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n+def test_issue_24288_extended():\n+    x, y = symbols('x y')\n \n-def test_parse_function_issue_3539():\n+    # Test inequalities with variables\n+    inputs = {\n+        \"x < y\": Lt(x, y, evaluate=False),\n+        \"x <= y\": Le(x, y, evaluate=False),\n+        \"x > y\": Gt(x, y, evaluate=False),\n+        \"x >= y\": Ge(x, y, evaluate=False),\n+        \"x != y\": Ne(x, y, evaluate=False),\n+        \"x == y\": Eq(x, y, evaluate=False)\n+    }\n+    for text, expected in inputs.items():\n+        assert parse_expr(text, evaluate=False) == expected\n+\n+    # Test with mixed types\n+    assert parse_expr('1 < y', evaluate=False) == Lt(1, y, evaluate=False)\n+    assert parse_expr('x > 2', evaluate=False) == Gt(x, 2, evaluate=False)\n     x = Symbol('x')\n     f = Function('f')\n     assert parse_expr('f(x)') == f(x)\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..bdd2812 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -61,6 +61,10 @@ def test_unit_grammar_fail(string):\n         ([\"mW/(m2)\"], u.Unit(u.erg / u.cm**2 / u.s)),\n         ([\"km/s\", \"km.s-1\"], u.km / u.s),\n         ([\"10pix/nm\"], u.Unit(10 * u.pix / u.nm)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.W / u.kpc**2)),\n+        ([\"km/s/Mpc\"], u.km / u.s / u.Mpc),\n+        ([\"km/(s.Mpc)\"], u.km / (u.s * u.Mpc)),\n         ([\"1.5x10+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"1.5\u00d710+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"m2\"], u.m**2),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "",
  "django__django-11477": "",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..a4bdf65 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -5,7 +6,9 @@ import datetime\n from operator import attrgetter\n from unittest import expectedFailure\n \n+import uuid\n from django import forms\n+from .models import Item, Derived\n from django.test import TestCase\n \n from .models import (\n@@ -17,7 +20,41 @@ from .models import (\n )\n \n \n-class ModelInheritanceTest(TestCase):\n+class PrimaryKeyResetTestCase(TestCase):\n+    def setUp(self):\n+        # Setting up initial object\n+        self.derived = Derived.objects.create(f=True)\n+        \n+    def test_reset_primary_key_creates_new_instance(self):\n+        # Fetch the same object\n+        item = Item.objects.get(pk=self.derived.pk)\n+        # The derived object\n+        obj1 = item.derived\n+        \n+        # Reset the object to create a new instance\n+        obj1.reset()\n+        obj1.save()  # This should create a new object, not overwrite\n+        \n+        # Check that there are now two objects\n+        self.assertEqual(Derived.objects.count(), 2)\n+        \n+        # Check original object is unchanged\n+        original_obj = Derived.objects.get(pk=self.derived.pk)\n+        self.assertTrue(original_obj.f)\n+\n+    def test_reset_primary_key_does_not_affect_other_instances(self):\n+        # Create an additional derived object\n+        additional_derived = Derived.objects.create(f=False)\n+        \n+        # Reset the original object to create a new instance\n+        item = Item.objects.get(pk=self.derived.pk)\n+        obj1 = item.derived\n+        obj1.reset()\n+        obj1.save()\n+        \n+        # Ensure the additional instance is unaffected\n+        unaffected_obj = Derived.objects.get(pk=additional_derived.pk)\n+        self.assertFalse(unaffected_obj.f)\n     def test_model_inheritance(self):\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..e99256b 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -605,8 +605,33 @@ class DeletionTests(TestCase):\n \n \n class FastDeleteTests(TestCase):\n+    def test_fast_delete_all_no_subquery(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertNotIn('SELECT', sql)\n+        self.assertIn('DELETE FROM', sql)\n+\n+    def test_fast_delete_large_table(self):\n+        # Create a large number of users.\n+        User.objects.bulk_create(User() for _ in range(100000))\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertNotIn('SELECT', sql)\n+        self.assertEqual(User.objects.count(), 0)\n \n-    def test_fast_delete_fk(self):\n+    def test_fast_delete_with_lock_tables(self):\n+        # This test assumes a MySQL setup where lock tables might be used.\n+        # It's more of an integration test, assuming a proper environment setup.\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"LOCK TABLES testapp_user WRITE\")\n+            try:\n+                with self.assertNumQueries(1):\n+                    User.objects.all().delete()\n+                self.assertEqual(User.objects.count(), 0)\n+            finally:\n+                cursor.execute(\"UNLOCK TABLES\")\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n         )\n@@ -702,4 +727,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..c6cf34a 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,11 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value_with_dict(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        with self.assertRaisesMessage(ValidationError, msg % {}):\n+            field.clean({}, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..5f25600 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n \n import django\n from django.db import models\n from django.test import TestCase\n+from django.db.models import Sum\n \n from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n \n@@ -158,6 +160,29 @@ class PickleabilityTestCase(TestCase):\n         with self.assertNumQueries(0):\n             pickle.loads(pickle.dumps(groups))\n \n+    def test_annotation_values(self):\n+        qs = Happening.objects.values('name').annotate(latest_time=models.Max('when'))\n+        reloaded = Happening.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertEqual(\n+            list(reloaded),\n+            [{'name': 'test', 'latest_time': self.happening.when}],\n+        )\n+\n+    def test_annotation_values_list(self):\n+        # values_list() is reloaded to values() when using a pickled query.\n+        tests = [\n+            Happening.objects.values_list('name'),\n+            Happening.objects.values_list('name', flat=True),\n+            Happening.objects.values_list('name', named=True),\n+        ]\n+        for qs in tests:\n+            with self.subTest(qs._iterable_class.__name__):\n+                reloaded = Happening.objects.all()\n+                reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+                expected = [{'name': 'test'}] if qs._iterable_class.__name__ != 'FlatValuesListIterable' else ['test']\n+                self.assertEqual(list(reloaded), expected)\n+\n     def test_pickle_prefetch_related_with_m2m_and_objects_deletion(self):\n         \"\"\"\n         #24831 -- Cached properties on ManyToOneRel created in QuerySet.delete()\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..9be7a30 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -24,7 +24,17 @@ class JSONFieldTest(SimpleTestCase):\n         with self.assertRaisesMessage(ValidationError, 'Enter a valid JSON.'):\n             field.clean('{some badly formed: json}')\n \n-    def test_prepare_value(self):\n+    def test_handle_unicode(self):\n+        field = JSONField()\n+        # Test with Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4e2d\u56fd'}), '{\"a\": \"\u4e2d\u56fd\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        # Test with emojis\n+        self.assertEqual(field.prepare_value({'emoji': '\ud83d\ude00\ud83d\udc31'}), '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test a list of Unicode characters\n+        self.assertEqual(field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n+        # Test a mix of Unicode characters\n+        self.assertEqual(field.prepare_value({'mixed': '\u4f60\u597d \ud83d\ude00 ja\u017a\u0144'}), '{\"mixed\": \"\u4f60\u597d \ud83d\ude00 ja\u017a\u0144\"}')\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..bb403c3 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,6 +6602,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/subpath/')\n+    def test_missing_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='testuser',\n+            password='secret',\n+            email='testuser@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/subpath' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/nested/path/')\n+    def test_missing_slash_with_nested_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='nesteduser',\n+            password='secret',\n+            email='nesteduser@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/nested/path' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..7ce895b 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,47 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Test that `makemigrations` generates a migration file with the necessary imports.\n+        Specifically tests that 'models' is correctly imported if used in the 'bases' argument.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        # Simulate the model setup that was problematic in the issue description\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        fields = {\"name\": MyField(primary_key=True, serialize=False)}\n+        options = {\"abstract\": False}\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.CreateModel(\n+                        name=\"MyModel\",\n+                        fields=tuple(fields.items()),\n+                        options=options,\n+                        bases=(MyMixin, models.Model),  # Same structure that caused the issue\n+                    ),\n+                ],\n+                \"dependencies\": [],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        # Ensure 'models' is imported at the top of the generated migration\n+        self.assertIn(\"from django.db import models\", output)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..0e56dd7 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1637,9 +1637,27 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_aggregation_default_after_annotation(self):\n+        result = Book.objects.annotate(\n+            idx=F('id'),\n+        ).aggregate(value=Sum('id', default=0))\n+        self.assertEqual(result['value'], 4560)\n+\n+    def test_aggregation_default_with_coalesce(self):\n+        result = Book.objects.annotate(\n+            idx=F('id'),\n+        ).aggregate(value=Coalesce(Sum('id'), 0))\n+        self.assertEqual(result['value'], 4560)\n+\n+    def test_aggregation_default_not_in_aggregate(self):\n+        result = Book.objects.annotate(\n+            avg_rating=Coalesce(Avg('rating'), 2.5),\n+        ).aggregate(Sum('id'))\n+        self.assertIsNotNone(result['id__sum'])\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..ffaa847 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -595,6 +595,13 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         )\n \n \n+from django.db import connection\n+from django.test import TestCase\n+from django.test.utils import \\\n+    skipUnlessDBFeature\n+from django.db import migrations, models\n+from django.db.migrations.state import ProjectState\n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n",
  "django__django-15916": "",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..df36716 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,9 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.core import serializers\n+from django.db import models, IntegrityError\n+from django.core.exceptions import FieldError\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..03f0f24 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -217,6 +217,24 @@ def test_unpickle_canvas():\n     assert fig2.canvas is not None\n \n \n+def test_dpi_doubling_on_unpickle():\n+    import matplotlib.pyplot as plt\n+    import platform\n+    platform_name = platform.system()\n+    architecture, _ = platform.architecture()\n+\n+    fig = plt.figure(dpi=200)\n+    assert fig.dpi == 200, \"Initial DPI should be 200\"\n+\n+    if platform_name == \"Darwin\" and architecture == \"64bit\" and \"arm\" in platform.processor():\n+        # Simulating behavior on M1 Mac\n+        for _ in range(5):\n+            out = io.BytesIO()\n+            pickle.dump(fig, out)\n+            out.seek(0)\n+            fig = pickle.load(out)\n+            assert fig.dpi == 200, \"DPI should remain constant after unpickling\"\n+\n def test_mpl_toolkits():\n     ax = parasite_axes.host_axes([0, 0, 1, 1])\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..8029889 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6587,6 +6587,11 @@ def test_integrate(dask):\n \n     # along y\n     actual = da.integrate(\"y\")\n+    actual_coord = da.integrate(coord=\"y\")\n+    assert_equal(actual, actual_coord)\n+\n+    with pytest.raises(TypeError, match=\"unexpected keyword argument 'dim'\"):\n+        da.integrate(dim=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..6ec33e7 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -131,6 +131,31 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     assert assertString in output.err\n \n \n+from typing import Any\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..c5b2fe6 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,21 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"expression\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+        \"None or True\",\n+        \"True and False\",\n+        \"False or True\",\n+    ),\n+)\n+def test_compile_expression(expression: str) -> None:\n+    with pytest.raises(AssertionError):\n+        Expression.compile(expression)\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..71f05a1 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -11,6 +11,8 @@\n import pytest\n \n from sphinx import addnodes\n+from docutils.nodes import pending_xref\n+from sphinx.testing.util import assert_node\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n@@ -30,4 +32,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..53b5291 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,54 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_multiple_parameters_combined(self):\n+        # Test the rendering of combined parameters without \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        # Test the rendering of combined parameters with \"optional\"\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..aebdf78 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,9 +773,46 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+from sphinx import addnodes\n+from sphinx.testing import restructuredtext\n \n @pytest.mark.sphinx(freshenv=True)\n-def test_module_index(app):\n+def test_type_rtype_resolution(app):\n+    text = (\"\"\"\n+    .. py:module:: mod\n+\n+    .. py:class:: mod.A\n+\n+    .. py:module:: mod.submod\n+\n+    .. py:class:: mod.submod.A\n+\n+    .. py:currentmodule:: mod\n+\n+    .. py:function:: f()\n+\n+        :param A a: local type A\n+        :param mod.A b: qualified mod.A\n+        :param mod.submod.A c: qualified mod.submod.A\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \"\"\")\n+\n+    # Parse the rst content\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Ensure that the unqualified 'A' resolves to 'mod.A' without warnings\n+    assert_node(doctree[7][1][0][1][0], pending_xref, refdomain='py', reftype='class', reftarget='mod.A', **{\"py:module\": \"mod\"})\n+    \n+    # Ensure the qualified names are resolved correctly\n+    assert_node(doctree[7][1][0][1][1], pending_xref, refdomain='py', reftype='class', reftarget='mod.A', **{\"py:module\": \"mod\"})\n+    assert_node(doctree[7][1][0][1][2], pending_xref, refdomain='py', reftype='class', reftarget='mod.submod.A', **{\"py:module\": \"mod.submod\"})\n+    \n+    # Check rtype resolutions\n+    assert_node(doctree[7][1][1][0], pending_xref, refdomain='py', reftype='class', reftarget='mod.A', **{\"py:module\": \"mod\"})\n+    assert_node(doctree[7][1][1][1], pending_xref, refdomain='py', reftype='class', reftarget='mod.A', **{\"py:module\": \"mod\"})\n+    assert_node(doctree[7][1][1][2], pending_xref, refdomain='py', reftype='class', reftarget='mod.submod.A', **{\"py:module\": \"mod.submod\"})\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n             \".. py:module:: sphinx.config\\n\"\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..ec4b94e 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,3 +1,6 @@\n+\n+_foo = None  #: :meta public:\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n@@ -8,4 +11,4 @@ def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..cf4943e 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -922,7 +922,8 @@ def test_info_field_list(app):\n             \"   :param age: blah blah\\n\"\n             \"   :type age: int\\n\"\n             \"   :param items: blah blah\\n\"\n-            \"   :type items: Tuple[str, ...]\\n\")\n+            \"   :type items: Tuple[str, ...]\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n     doctree = restructuredtext.parse(app, text)\n     print(doctree)\n \n@@ -983,6 +984,29 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][3][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][3][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n \n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..8ec9920 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -833,6 +833,23 @@ def test_autodoc_typehints_description(app):\n             '   docstring\\n'\n             in context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_typehints_description_target': 'documented'})\n+def test_autodoc_typehints_description_with_napoleon(app):\n+    # Test to ensure return type appears correctly with Napoleon and autodoc_typehints_description_target='documented'\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.decr\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('target.typehints.decr(a, b=1)\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n' in context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..b015d4e 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1067,6 +1067,10 @@ def test_conditionset():\n     assert solveset(y**x-z, x, S.Reals) == \\\n         ConditionSet(x, Eq(y**x - z, 0), S.Reals)\n \n+    # Test case for issue where solveset should return ConditionSet instead of NotImplementedError\n+    assert solveset(Eq(x*cos(x) - 3*sin(x), 0), x, domain=S.Reals) == \\\n+        ConditionSet(x, Eq(x*cos(x) - 3*sin(x), 0), S.Reals)\n+\n \n @XFAIL\n def test_conditionset_equality():\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..67ae370 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3241,8 +3241,10 @@ def test_keep_coeff():\n     assert _keep_coeff(x, 1/x) == 1\n     assert _keep_coeff(x + 1, S(2)) == u\n \n-\n-def test_poly_matching_consistency():\n+def test_issue_18895_factor_with_extension():\n+    z = expand((x - 1)*(y - 1))\n+    z_factor = factor(z, extension=[I])\n+    assert z_factor == (x - 1)*(y - 1)\n     # Test for this issue:\n     # https://github.com/sympy/sympy/issues/5514\n     assert I * Poly(x, x) == Poly(I*x, x)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..ea6b81f 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -25,6 +26,28 @@ b21 = Basic(b2, b1)\n def test__aresame():\n     assert not _aresame(Basic([]), Basic())\n     assert not _aresame(Basic([]), Basic(()))\n+\n+def test_symbol_dict():\n+    from sympy.core.symbol import Symbol\n+\n+    # Test that Symbol should not have a __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+\n+    # Test that Symbol should have __slots__ attribute defined\n+    assert hasattr(s, '__slots__')\n+    assert s.__slots__ == ('name',)\n+\n+def test_dummy_symbol_dict():\n+    from sympy.core.symbol import Dummy\n+\n+    # Test that Dummy (a subclass of Symbol) also should not have a __dict__ attribute\n+    d = Dummy('d')\n+    assert not hasattr(d, '__dict__')\n+\n+    # Test that Dummy should have __slots__ attribute defined\n+    assert hasattr(d, '__slots__')\n+    assert d.__slots__ == ('name',)\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..8d58b75 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_subwidget_id_for_label_respects_choicewidget_options(self):\n+        \"\"\"\n+        The id_for_label of a BoundWidget should use the id set by\n+        ChoiceWidget.options. Test this specifically for\n+        CheckboxSelectMultiple.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..a698060 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,8 +301,37 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n-\n-def check_lasso_selector(**kwargs):\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_no_axes_change_after_interaction(direction):\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound_initial = ax.get_xbound()\n+    y_bound_initial = ax.get_ybound()\n+\n+    selector = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    \n+    # Initial bounds should remain unchanged\n+    assert ax.get_xbound() == x_bound_initial\n+    assert ax.get_ybound() == y_bound_initial\n+\n+    # Simulate selecting a span\n+    press_data = [12, 15]\n+    release_data = [14, 18]\n+    \n+    press_event = {'x': press_data[0], 'y': press_data[1], 'button': 1}\n+    release_event = {'x': release_data[0], 'y': release_data[1], 'button': 1}\n+    \n+    do_event(selector, 'press', **press_event)\n+    do_event(selector, 'release', **release_event)\n+\n+    # Ensure bounds have not changed post selection\n+    assert ax.get_xbound() == x_bound_initial\n+    assert ax.get_ybound() == y_bound_initial\n+\n+    # Check handle positions match expected extents for interaction\n+    expected_positions = (press_data[0], release_data[0]) if direction == 'horizontal' else (press_data[1], release_data[1])\n+    assert selector._edge_handles.positions == list(expected_positions)\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..9e2b41f 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+def test_sparse_coder_max_iter_for_lasso_cd():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # Check that the underlying model fails to converge with low max_iter\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # Check that the underlying model converges without warnings with higher max_iter\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..ce97dc6 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,7 +148,22 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n-# Import the data\n+import pytest\n+from sklearn.utils._testing import assert_array_equal\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+\n+def test_cross_val_predict_with_multioutputclassifier_predict_proba():\n+    X, Y = make_multilabel_classification(random_state=0)\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    # This should run without error, testing the fix\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+    assert len(pred_proba) == Y.shape[1]\n+    for i, proba in enumerate(pred_proba):\n+        # Each proba should sum to 1 for each sample, proving valid probabilities\n+        assert np.allclose(np.sum(proba, axis=1), 1)\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n X = iris.data\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..33cd7c2 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -354,7 +354,16 @@ def test_issue_9983():\n     assert p.is_convergent() is S.false\n     assert product(1 + 1/n**(S(2)/3), (n, 1, oo)) == p.doit()\n \n-\n-def test_rewrite_Sum():\n+def test_issue_13546():\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Additional test cases to verify the fix\n+    assert p.subs(n, 3).doit() == S(315)/32\n+    assert p.subs(n, 4).doit() == S(2835)/512\n+    assert p.subs(n, 1).doit() == S(3)\n+    assert p.subs(n, 0).doit() == S(1)\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}