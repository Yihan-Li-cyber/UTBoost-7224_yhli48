{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..56d8bff 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -129,7 +129,29 @@ def test_arith_oper():\n         _arith_oper(sh1, map1)\n \n \n-@pytest.mark.parametrize(('compound_model', 'result'), compound_models.values())\n+from astropy.modeling import models as m\n+from astropy.modeling.separable import separability_matrix\n+\n+def test_issue_separability_matrix_nested_compound_model():\n+    # Test the separability matrix for nested compound models\n+    linear_model1 = m.Linear1D(10)\n+    linear_model2 = m.Linear1D(5)\n+    \n+    # Initial compound model\n+    cm = linear_model1 & linear_model2\n+\n+    # Nested compound model with Pix2Sky_TAN\n+    complex_cm = m.Pix2Sky_TAN() & cm\n+    expected_matrix = np.array([\n+        [True,  True, False, False],\n+        [True,  True, False, False],\n+        [False, False, True,  True],\n+        [False, False, True,  True]\n+    ])\n+\n+    # Assert the computed separability matrix matches the expected matrix\n+    computed_matrix = separability_matrix(complex_cm)\n+    assert np.array_equal(computed_matrix, expected_matrix)\n def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..848a5a7 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,16 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import (\n+    BinTableHDU,\n+    HDUList,\n+    ImageHDU,\n+    PrimaryHDU,\n+    connect,\n+    table_to_hdu,\n+)\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..e5a23c7 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -127,6 +127,27 @@ class TestHeaderFunctions(FitsTestCase):\n         c = fits.Card(\"long_int\", -467374636747637647347374734737437)\n         assert str(c) == _pad(\"LONG_INT= -467374636747637647347374734737437\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation.\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_floating_point_value_card(self):\n         \"\"\"Test Card constructor with floating point value\"\"\"\n \n@@ -137,6 +158,26 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_hierarchical_floating_point_card_precision(self):\n+        \"\"\"Test precise floating point representation for hierarchical keywords\"\"\"\n+\n+        c = fits.Card(\"HIERARCH ESO IFM CL RADIUS\", 0.009125, \"[m] radius arround actuator to avoid\")\n+        expected_str = \"HIERARCH ESO IFM CL RADIUS = 0.009125 / [m] radius arround actuator to avoid\"\n+        assert str(c)[ : len(expected_str)] == expected_str\n+\n+        # Test with a float that could cause precision errors\n+        c = fits.Card(\"HIERARCH PRECISION TEST\", 1.2345678901234567, \"Test precision\")\n+        expected_str = \"HIERARCH PRECISION TEST = 1.234567890123 / Test precision\"\n+        assert str(c)[ : len(expected_str)] == expected_str\n+        \"\"\"Test Card constructor with floating point value\"\"\"\n+\n+        c = fits.Card(\"floatnum\", -467374636747637647347374734737437.0)\n+\n+        if str(c) != _pad(\"FLOATNUM= -4.6737463674763E+32\") and str(c) != _pad(\n+            \"FLOATNUM= -4.6737463674763E+032\"\n+        ):\n+            assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..9d7d5a2 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -87,6 +87,21 @@ def test_inherit_docstrings():\n     if Base.__call__.__doc__ is not None:\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n+        \n+    # New test for property inheritance\n+    class BaseWithProperty(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 0\n+\n+    class SubclassWithProperty(BaseWithProperty):\n+        @property\n+        def bar(self):\n+            return 1\n+\n+    if BaseWithProperty.bar.__doc__ is not None:\n+        assert SubclassWithProperty.bar.__doc__ == \"BAR\"\n \n \n def test_set_locale():\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..19a6215 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -198,6 +198,20 @@ def test_unknown_unit3():\n         unit5 = u.Unit(None)\n \n \n+def test_unrecognized_unit_equality_with_none():\n+    # Test that comparing an UnrecognizedUnit with None does not raise a TypeError and returns False\n+    unrecognized_unit = u.Unit('asdf', parse_strict='silent')\n+    assert unrecognized_unit != None  # noqa: E711\n+    assert not (unrecognized_unit == None)  # Double check using equality\n+    assert unrecognized_unit not in (None, u.m)\n+\n+    # Further tests to ensure behavior is consistent\n+    standard_unit = u.m\n+    assert standard_unit != None  # noqa: E711\n+    assert not (standard_unit == None)  # Double check using equality\n+    assert standard_unit not in (None, u.kg)\n+\n+\n @raises(TypeError)\n def test_invalid_scale():\n     x = ['a', 'b', 'c'] * u.m\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..40097ce 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,17 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    bad_versions = ['1', '1.2rc1', '1.14dev', '1.14.3']\n+    # Adding additional test cases to cover the specific issue with LooseVersion\n+    assert not minversion(test_module, '1.14dev')\n+    assert minversion(test_module, '0.12dev')\n+    \n+    # The following test should return True if the issue is resolved\n+    numpy_module = ModuleType(str(\"numpy\"))\n+    numpy_module.__version__ = '1.14.3'\n+    assert not minversion(numpy_module, '1.14dev')  # This should handle the comparison correctly\n+    assert minversion(numpy_module, '1.14.2')  # Normal case which should be True regardless\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..c2761b2 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -92,8 +92,32 @@ class TestHeaderFunctions(FitsTestCase):\n         assert str(c) == _pad(\"ABC     = '<8 ch   '\")\n         c = fits.Card('nullstr', '')\n         assert str(c) == _pad(\"NULLSTR = ''\")\n+    \n+    def test_card_from_bytes_unicode(self):\n+        \"\"\"\n+        Additional test to ensure Card can handle bytes encoded in utf-8.\n+        \"\"\"\n+        # utf-8 bytes, equivalent to ASCII in this limited example scope\n+        c = fits.Card.fromstring(b\"DEF     = 'def'\")\n+        assert c.keyword == 'DEF'\n+        assert c.value == 'def'\n+\n+    def test_header_fromstring_unicode(self):\n+        \"\"\"\n+        Test reading a Header from a unicode string.\n+        \"\"\"\n+        unicode_header_str = (\n+            \"XTENSION= 'IMAGE   '           / Image extension\\n\"\n+            \"BITPIX  =                    8 / array data type\\n\"\n+            \"NAXIS   =                    0 / number of array dimensions\\n\"\n+            \"END\" + ' ' * 77               # Padding to ensure a proper header\n+        )\n+        hdr = fits.Header.fromstring(unicode_header_str)\n \n-    def test_boolean_value_card(self):\n+        assert hdr['XTENSION'] == 'IMAGE'\n+        assert hdr['BITPIX'] == 8\n+        assert hdr['NAXIS'] == 0\n+        assert 'END' in hdr.tostring()\n         \"\"\"Test Card constructor with boolean value\"\"\"\n \n         c = fits.Card(\"abc\", True)\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..71f1e8d 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -31,8 +31,8 @@ try:\n except ImportError:\n     HAS_MATPLOTLIB = False\n \n-\n-\"\"\" The Quantity class will represent a number + unit + uncertainty \"\"\"\n+import numpy as np\n+import pytest\n \n \n class TestQuantityCreation:\n@@ -150,6 +150,16 @@ class TestQuantityCreation:\n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n \n+    def test_preserve_float16_dtype(self):\n+        \"\"\"Test that np.float16 dtype is preserved when creating a Quantity\"\"\"\n+        single_value = np.float16(1.0)\n+        q_single = u.Quantity(single_value, u.km)\n+        assert q_single.dtype == single_value.dtype\n+\n+        array_value = np.array([1.0, 2.0], dtype=np.float16)\n+        q_array = u.Quantity(array_value, u.km)\n+        assert q_array.dtype == array_value.dtype\n+\n     def test_copy(self):\n \n         # By default, a new quantity is constructed, but not if copy=False\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..a27b2a6 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,6 +218,20 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+    \n+    # Invalid URLs with unencoded characters in the username/password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+    \n+    # Valid URLs with correctly encoded userinfo\n+    (URLValidator(), 'http://foo%40bar@example.com', None),\n+    (URLValidator(), 'http://foo:foo%40bar@example.com', None),\n+    (URLValidator(), 'http://user:pass@host.com', None),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..819fc75 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -395,6 +397,16 @@ class AggregateTestCase(TestCase):\n         sql = ctx.captured_queries[0]['sql']\n         self.assertIn('SELECT COUNT(*) ', sql)\n \n+    def test_count_distinct_expression(self):\n+        # Create the test data\n+        # Assuming `Book` objects with different `pages` and `rating` values already exist in the database\n+        # Adjust the expected distinct_ratings value as per your test data setup.\n+\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n     def test_non_grouped_annotation_not_in_group_by(self):\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..a2cb684 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,14 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Test that the default FILE_UPLOAD_PERMISSIONS is set to 0o644 if not\n+        explicitly set.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..b362873 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -29,7 +30,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_pgpassword_with_run(self):\n+        \"\"\"\n+        Test using subprocess.run to ensure PGPASSWORD is set correctly.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.subprocess_args = list(*args)\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            result = DatabaseClient.runshell_db({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n+\n+        self.assertEqual(self.subprocess_args, ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'])\n+        self.assertEqual(self.pgpassword, 'somepassword')\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +133,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..f9c56fc 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,7 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -47,6 +48,22 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Create the initial content type in the 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+\n+        # Migrate with the 'other' database; model name should change\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+\n+        # Zero the migration; model name should revert\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n+\n     def test_missing_content_type_rename_ignore(self):\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +80,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..0ea63b8 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -425,7 +425,41 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n             inlines = [\n                 AlternateInline, MediaInline\n             ]\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n         ma = EpisodeAdmin(Episode, self.site)\n-        inlines = ma.get_inline_instances(request)\n-        for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+        # Original tests\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+        \n+        for name, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+            request.name = name\n+            self.assertEqual(ma.get_inlines(request, None), [inline_class])\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), inline_class)\n+\n+        # Additional test cases\n+        request.name = 'non_existing'\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+\n+        del request.name\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+\n+        # Test with an obj argument\n+        obj = Episode(title='Test Episode')\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, obj), [AlternateInline])\n+        self.assertEqual(type(ma.get_inline_instances(request, obj)[0]), AlternateInline)\n+\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, obj), [MediaInline])\n+        self.assertEqual(type(ma.get_inline_instances(request, obj)[0]), MediaInline)\n+        \n+        print(\"All inline tests passed.\")\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..6b43446 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -236,7 +236,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         valid_usernames = ['joe', 'Ren\u00e9', '\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30', '\u0623\u062d\u0645\u062f']\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n-            \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n+            \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\", 'trailingnewline\\u000A',\n             \"en\\u2013dash\",\n         ]\n         v = validators.UnicodeUsernameValidator()\n@@ -250,7 +250,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +258,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..94b8e4e 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -1,9 +1,10 @@\n import os\n \n+import os\n from django.core.exceptions import ImproperlyConfigured\n-from django.template import Context\n-from django.template.engine import Engine\n-from django.test import SimpleTestCase, override_settings\n+from django.template import Context, Template\n+from django.template.engine import Engine, TemplateDoesNotExist\n+from django.test import SimpleTestCase, override_settings, override_settings\n \n from .utils import ROOT, TEMPLATE_DIR\n \n@@ -21,8 +22,26 @@ class RenderToStringTest(SimpleTestCase):\n             'obj:test\\n',\n         )\n \n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_off_with_multiple_templates(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR, OTHER_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string(['nonexistent.html', 'test_context.html'], {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n \n-class GetDefaultTests(SimpleTestCase):\n+    def test_autoescape_on_with_multiple_templates(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR, OTHER_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string(['nonexistent.html', 'test_context.html'], {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..6d8b079 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,10 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview test'))\n+        self.assertEqual(r.content, b'memoryview test')\n+\n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..09d1946 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,6 +501,17 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n     def test_ignore_files(self):\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..3d0a831 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -635,15 +635,49 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, '<h2>Inner2s</h2>')\n         self.assertNotContains(response, 'Add another Inner2')\n         self.assertNotContains(response, 'id=\"id_inner2_set-TOTAL_FORMS\"')\n-\n-    def test_inline_add_m2m_add_perm(self):\n-        permission = Permission.objects.get(codename='add_book', content_type=self.book_ct)\n+    \n+    def test_inline_add_m2m_view_only_perm(self):\n+        # Grant only the view permission on books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(reverse('admin:admin_inlines_author_add'))\n-        # No change permission on Books, so no inline\n-        self.assertNotContains(response, '<h2>Author-book relationships</h2>')\n+        # View-only inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n         self.assertNotContains(response, 'Add another Author-Book Relationship')\n-        self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n+\n+    def test_inline_change_m2m_view_only_perm(self):\n+        # Grant only the view permission on books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertContains(response, '<p>The inline Book</p>')\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n \n     def test_inline_add_fk_add_perm(self):\n         permission = Permission.objects.get(codename='add_inner2', content_type=self.inner_ct)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..89e138d 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,6 +2900,11 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n+    def test_empty_fields_returns_empty_dict(self):\n+        bw = BetterWriter.objects.create(name='Joe', score=20)\n+        # Test that model_to_dict with an empty fields list returns an empty dict\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..549450c 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n@@ -464,7 +466,17 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        \"\"\"\n+        Test that deleting an instance with no dependencies sets the primary key to None.\n+        \"\"\"\n+        u = User.objects.create()\n+        # Verify that the instance can be fast-deleted\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        # Delete the instance and check the resulting primary key\n+        u.delete()\n+        self.assertIsNone(u.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..4500094 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,11 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-300', 6, '0.000000'),\n+            ('1e-305', 5, '0.00000'),\n+            ('1.2345e-300', 8, '0.00000000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..0c8c3e0 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -196,7 +197,18 @@ class Comment(models.Model):\n         ordering = ['id']\n \n \n-# Models for lookup ordering tests\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=20)\n+\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class House(models.Model):\n     name = models.CharField(max_length=50)\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..2b6fcac 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -38,6 +38,23 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,  # No password set in this test case\n+            )\n+        )\n+\n     def test_nopass(self):\n         self.assertEqual(\n             self._run_it({\n@@ -51,6 +68,23 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,  # No password set in this test case\n+            )\n+        )\n+\n     def test_column(self):\n         self.assertEqual(\n             self._run_it({\n@@ -65,6 +99,23 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,  # No password set in this test case\n+            )\n+        )\n+\n     def test_accent(self):\n         username = 'r\u00f4le'\n         password = 's\u00e9same'\n@@ -81,6 +132,23 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,  # No password set in this test case\n+            )\n+        )\n+\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..00693f4 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -82,6 +82,33 @@ class FilteredRelationTests(TestCase):\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n \n+    def test_with_exclude(self):\n+        # Test case to ensure excluding works with annotated FilteredRelation\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2]\n+        )\n+\n+    def test_exclude_no_relation(self):\n+        # Test case to ensure exclude works when no records match the condition\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_bob=FilteredRelation('book', condition=Q(book__title__iexact='poem by bob')),\n+            ).exclude(book_bob__isnull=False),\n+            [self.author1, self.author2]  # Assuming both authors have no book titled 'Poem by Bob'\n+        )\n+        \n+    def test_exclude_after_filter(self):\n+        # Test case to verify exclude works correctly after a filter\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_random=FilteredRelation('book', condition=Q(book__title__iexact='random title')),\n+            ).filter(book_random__isnull=True).exclude(book_random__isnull=False),\n+            [self.author1, self.author2]\n+        )\n+\n     def test_without_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..4ddfc13 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -28,6 +28,8 @@ class TestUtilsHtml(SimpleTestCase):\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n+            # Ensure that Django's escape function now uses html.escape(), which defaults to '&#x27;' for single quotes\n+            (\"'\", '&#x27;'),\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..9802baa 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,6 +243,20 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n+    def test_skip_checks(self):\n+        \"\"\"\n+        Test the --skip-checks option to ensure system checks are skipped.\n+        \"\"\"\n+        # Write settings with a configuration that would normally cause a check error\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+\n+        # Run a management command with --skip-checks\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n     def test_disallowed_abbreviated_options(self):\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..fa9e946 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,9 +1,34 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n-class RegexPatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+    \n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_with_root_urlconf(self):\n+        # Ensure the same resolver object is used when ROOT_URLCONF is accessed.\n+        resolver_default = get_resolver()\n+        resolver_explicit = get_resolver('urlpatterns.path_urls')\n+        \n+        self.assertIs(resolver_default, resolver_explicit)\n+        self.assertIsNot(resolver_default, get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    def test_resolver_cache_without_calling_set_urlconf(self):\n+        # Test that multiple requests to get_resolver before set_urlconf \n+        # don't lead to multiple resolver instances.\n+        resolver1 = get_resolver(None)\n+        resolver2 = get_resolver(None)\n+        \n+        self.assertIs(resolver1, resolver2)\n+        \n+        # Now simulate setting urlconf and getting resolver for ROOT_URLCONF.\n+        with override_settings(ROOT_URLCONF='urlpatterns.another_urls'):\n+            resolver3 = get_resolver(settings.ROOT_URLCONF)\n+            self.assertIsNot(resolver1, resolver3)\n+            self.assertIs(resolver3, get_resolver(settings.ROOT_URLCONF))\n \n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n@@ -12,4 +37,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "",
  "django__django-11490": "",
  "django__django-11532": "",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..378e0c6 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..b3b785f 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -2,6 +2,7 @@ from datetime import datetime\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from datetime import datetime\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n",
  "django__django-11603": "",
  "django__django-11740": "",
  "django__django-11749": "",
  "django__django-11790": "",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..abbda19 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -246,8 +246,21 @@ class WriterTests(SimpleTestCase):\n             [list, tuple, dict, set, frozenset],\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n+    def test_serialize_enum_names_instead_of_values(self):\n+        class TranslatedStatus(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n \n-    def test_serialize_lazy_objects(self):\n+        # Testing serialization that it refers to the Enum using its name\n+        field = models.CharField(default=TranslatedStatus.GOOD, choices=[(m.name, m) for m in TranslatedStatus])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', migrations.test_writer.TranslatedStatus('GOOD')), \"\n+            \"('BAD', migrations.test_writer.TranslatedStatus('BAD'))], \"\n+            \"default=migrations.test_writer.TranslatedStatus('GOOD'))\"\n+        )\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..db2da31 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n",
  "django__django-11880": "",
  "django__django-11951": "",
  "django__django-11964": "",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..75d8cbf 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -147,8 +147,16 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+class FooBarOverrideTests(TestCase):\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n \n-class GetFieldDisplayTests(SimpleTestCase):\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..940bc5d 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -20,6 +20,70 @@ from .models import (\n class SchemaIndexesTests(TestCase):\n     \"\"\"\n     Test index handling by the db.backends.schema infrastructure.\n+\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_create_index_with_opclass_no_order(self):\n+        index = Index(\n+            fields=['name'],\n+            name='no_order_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('name'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_create_index_with_opclass_and_order(self):\n+        index = Index(\n+            fields=['-name'],\n+            name='order_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('name'),\n+                str(index.create_sql(Article, editor)),\n+            )\n     \"\"\"\n \n     def test_index_name_hash(self):\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..9183ccb 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,6 +8,9 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n+from django.db.models.lookups import Exact\n+from django.test import SimpleTestCase\n+from .models import Item\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n@@ -107,7 +111,29 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_iterable_lookup_value_with_list(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Check that the right hand side is still a list, not converted to a tuple\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_iterable_lookup_value_with_tuple(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('c', 'd')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Check that the right hand side maintains its tuple type\n+        self.assertEqual(name_exact.rhs, ('c', 'd'))\n+\n+    def test_non_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name='single_value'))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Check that the right hand side is a single string value\n+        self.assertEqual(name_exact.rhs, 'single_value')\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..378a942 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -844,7 +844,26 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n-    def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n+    def test_get_list_editable_queryset_with_escaped_regex_chars_in_prefix(self):\n+        \"\"\"Test formset prefix with regex special characters.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form$.^*-TOTAL_FORMS': '2',\n+            'form$.^*-INITIAL_FORMS': '2',\n+            'form$.^*-MIN_NUM_FORMS': '0',\n+            'form$.^*-MAX_NUM_FORMS': '1000',\n+            'form$.^*-0-uuid': str(a.pk),\n+            'form$.^*-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$.^*')\n+        self.assertEqual(queryset.count(), 1)\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n         Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..ab1ded2 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,9 +1,11 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n     docutils_is_available, parse_docstring, parse_rst, trim_docstring,\n )\n \n+from django.test.utils import captured_stderr\n from .tests import AdminDocsSimpleTestCase\n \n \n@@ -95,6 +97,26 @@ class TestUtils(AdminDocsSimpleTestCase):\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n \n+    def test_parse_docstring_no_leading_line_feed(self):\n+        \"\"\"\n+        This test verifies that the parse_docstring function correctly\n+        handles a docstring where the first line is not empty.\n+        \"\"\"\n+        title, body, _ = parse_docstring('firstline\\n\\n    second line')\n+        with captured_stderr() as stderr:\n+            self.assertEqual(parse_rst(title, ''), '<p>firstline</p>\\n')\n+            self.assertEqual(parse_rst(body, ''), '<p>second line</p>\\n')\n+        self.assertEqual(stderr.getvalue(), '')\n+\n+    def test_trim_docstring(self):\n+        \"\"\"\n+        Test the trim_docstring function to ensure that it trims the\n+        docstring correctly when the first line is not empty.\n+        \"\"\"\n+        docstring = 'First line of docstring\\n    Second line\\n        Third line'\n+        expected_trimmed = 'First line of docstring\\nSecond line\\n    Third line'\n+        self.assertEqual(trim_docstring(docstring), expected_trimmed)\n+\n     def test_parse_rst(self):\n         \"\"\"\n         parse_rst() should use `cmsreference` as the default role.\n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..cc74508 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,22 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_split_array_field_boolean_display(self):\n+        # Initialize the SplitArrayField with a BooleanField and preexisting data\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        # Context with True and False boolean values\n+        context = widget.get_context('name', [False, True, False, True])\n+        # Check the structure and ensure correct 'checked' attributes\n+        subwidgets_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(subwidgets_attrs, [{}, {'checked': True}, {}, {'checked': True}])\n+\n+    def test_split_array_field_initial_false(self):\n+        # Test with initial values as all False\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, False, False])\n+        subwidgets_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(subwidgets_attrs, [{}, {}, {}])\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..2630143 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -252,6 +252,10 @@ class SmallPKData(models.Model):\n # class TimePKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n+import uuid\n+\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n \n class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n",
  "django__django-12262": "diff --git a/tests/template_tests/templatetags/inclusion.py b/tests/template_tests/templatetags/inclusion.py\nindex da4058d..601c000 100644\n--- a/tests/template_tests/templatetags/inclusion.py\n+++ b/tests/template_tests/templatetags/inclusion.py\n@@ -124,6 +124,8 @@ def inclusion_two_params_from_template(one, two):\n     return {\"result\": \"inclusion_two_params_from_template - Expected result: %s, %s\" % (one, two)}\n \n \n+from django import template\n+\n inclusion_two_params_from_template.anything = \"Expected inclusion_two_params_from_template __dict__\"\n \n \n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..b2704c8 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2485,6 +2486,27 @@ Password: <input type=\"password\" name=\"password\" required>\n         f = FileForm({})\n         self.assertEqual(f.errors, {})\n         self.assertEqual(f.cleaned_data['file1'], 'resume.txt')\n+    def test_filefield_with_initial_callable(self):\n+        class FileForm(Form):\n+            file1 = forms.FileField(widget=FileInput)\n+\n+        # A required file field with initial data as a callable doesn't render 'required'\n+        f = FileForm(initial={'file1': lambda: 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_filefield_with_initial_byte_data(self):\n+        class FileForm(Form):\n+            file1 = forms.FileField(widget=FileInput)\n+\n+        # A required file field with initial bytes data doesn't render 'required'\n+        f = FileForm(initial={'file1': b'somebinarydata'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n \n     def test_basic_processing_in_view(self):\n         class UserRegistration(Form):\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..c7cce5e 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n import decimal\n import ipaddress\n import uuid\n \n+from django.template import Context, Template\n from django.db import models\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n@@ -137,7 +139,28 @@ class ChoicesTests(SimpleTestCase):\n                 # A string is not permitted as the second argument to int().\n                 ONE = 1, 'X', 'Invalid'\n \n-        msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n+    def test_enum_templates_rendering(self):\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        context = Context({'Suit': Suit})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Diamond|1')\n+\n+        template = Template('{{ student.year_in_school.label }}')\n+        context = Context({'YearInSchool': YearInSchool, 'student': Student(year_in_school=YearInSchool.FRESHMAN)})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Freshman')\n+\n+    def test_enum_direct_comparison_in_template(self):\n+        # Assuming we have a student model with a year_in_school attribute\n+        class Student:\n+            def __init__(self, year_in_school):\n+                self.year_in_school = year_in_school\n+\n+        student = Student(year_in_school=YearInSchool.FRESHMAN)\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Yes{% else %}No{% endif %}')\n+        context = Context({'YearInSchool': YearInSchool, 'student': student})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Yes')\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..7f9ce20 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1003,9 +1003,46 @@ class OtherModelTests(SimpleTestCase):\n             method = models.ForeignKey(ShippingMethod, models.CASCADE)\n             to_country = models.ForeignKey(Country, models.CASCADE)\n             from_country = models.ForeignKey(Country, models.CASCADE)\n-\n+        \n         self.assertEqual(ShippingMethod.check(), [])\n \n+    def test_onetoone_parent_link_ordering(self):\n+        \"\"\"\n+        Test to ensure OneToOneField with parent_link works regardless of declaration order.\n+        \"\"\"\n+        from django.core.exceptions import ImproperlyConfigured\n+        \n+        # First class ordering (incorrect as pointed out in the issue)\n+        class Document1(models.Model):\n+            pass\n+\n+        class Picking1(Document1):\n+            document_ptr = models.OneToOneField(\n+                Document1, on_delete=models.CASCADE, parent_link=True, related_name='+'\n+            )\n+            origin = models.OneToOneField(\n+                Document1, on_delete=models.PROTECT, related_name='picking'\n+            )\n+        \n+        # Should not raise configuration errors due to ordering\n+        with self.assertRaises(ImproperlyConfigured):\n+            Picking1.check()\n+\n+        # Second class ordering (correct as per issue)\n+        class Document2(models.Model):\n+            pass\n+        \n+        class Picking2(Document2):\n+            origin = models.OneToOneField(\n+                Document2, on_delete=models.PROTECT, related_name='picking'\n+            )\n+            document_ptr = models.OneToOneField(\n+                Document2, on_delete=models.CASCADE, parent_link=True, related_name='+'\n+            )\n+        \n+        # Should pass without errors\n+        self.assertEqual(Picking2.check(), [])\n+\n     def test_missing_parent_link(self):\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..dab4170 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,12 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings()\n+    def test_referrer_policy_default_same_origin(self):\n+        \"\"\"\n+        By default, the SECURE_REFERRER_POLICY should result in a 'Referrer-Policy: same-origin' header.\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -254,4 +259,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..c266a1a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,6 +13,28 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+class SimpleLazyObjectSubqueryTests(TestCase):\n+    \n+    def test_subquery_with_lazy_object(self):\n+        manager = Manager.objects.create(name=\"Manager A\")\n+        lazy_manager = SimpleLazyObject(lambda: Manager.objects.get(pk=manager.pk))\n+        \n+        # Setting up a subquery to filter Company objects\n+        companies = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    manager=OuterRef('ceo__manager')\n+                ).values('manager'),\n+            ),\n+        ).filter(ceo_manager=lazy_manager)\n+        \n+        # Create an employee to meet the filter condition\n+        Employee.objects.create(firstname=\"Jane\", lastname=\"Doe\", manager=manager)\n+        company = Company.objects.create(name=\"Test Company\", ceo=Employee.objects.get(firstname=\"Jane\"))\n+        \n+        # Assert that the company is correctly retrieved\n+        self.assertEqual(companies.get(), company)\n+\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n@@ -20,6 +42,7 @@ from django.db.models.functions import (\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.utils.functional import SimpleLazyObject\n from django.test.utils import Approximate, isolate_apps\n \n from .models import (\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..e16bf75 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -121,7 +121,20 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         self.assertFormfield(Event, 'start_date', forms.TextInput,\n                              formfield_overrides={DateField: {'widget': forms.TextInput}})\n \n-    def test_formfield_overrides_widget_instances(self):\n+    def test_formfield_overrides_m2m_widget(self):\n+        \"\"\"\n+        Test that the widget for ManyToManyFields can be overridden in\n+        formfield_overrides for the admin model.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+            filter_horizontal = ['members']\n+\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n         \"\"\"\n         Widget instances in formfield_overrides are not shared between\n         different fields. (#19423)\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..6f4c97a 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,8 +2444,55 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n \n-    def test_mti_inheritance_model_removal(self):\n+    def test_remove_and_add_field_order(self):\n+        \"\"\"\n+        Test that removing a field from a base model and adding it to a subclass\n+        handles duplicate field errors properly by ensuring the order is correct.\n+        \"\"\"\n+        initial_state = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        final_state = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(initial_state, final_state)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n@@ -2453,4 +2500,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..1ed96a1 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,8 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test.utils import isolate_apps\n+from django.db import models\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n",
  "django__django-12858": "",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..94bc140 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1827,4 +1827,27 @@ class CombinableTests(SimpleTestCase):\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n+\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_group_by_with_constant_expression(self):\n+        # This tests the specific issue where a constant should not appear in the GROUP BY.\n+        expr = ExpressionWrapper(Value(5), output_field=IntegerField())\n+        # Simulate the process of what get_group_by_cols would return\n+        result = expr.get_group_by_cols(alias=None)\n+        # Since 5 is a constant, it should not be in the GROUP BY\n+        self.assertEqual(result, [])\n+\n+    def test_group_by_with_non_constant_expression(self):\n+        # Now testing with a non-constant expression that should appear in the GROUP BY\n+        expr = ExpressionWrapper(Lower(Value('foo')), output_field=IntegerField())\n+        result = expr.get_group_by_cols(alias=None)\n+        self.assertEqual(result, [expr.expression])\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..9c8bec6 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -56,12 +56,12 @@ class Queries1Tests(TestCase):\n \n         # Create these out of order so that sorting by 'id' will be different to sorting\n         # by 'info'. Helps detect some problems later.\n-        cls.e2 = ExtraInfo.objects.create(info='e2', note=cls.n2, value=41)\n+        cls.e2 = ExtraInfo.objects.create(info='e2', note=cls.n2, value=41, filterable=False)\n         e1 = ExtraInfo.objects.create(info='e1', note=cls.n1, value=42)\n \n         cls.a1 = Author.objects.create(name='a1', num=1001, extra=e1)\n         cls.a2 = Author.objects.create(name='a2', num=2002, extra=e1)\n-        a3 = Author.objects.create(name='a3', num=3003, extra=cls.e2)\n+        cls.a3 = Author.objects.create(name='a3', num=3003, extra=cls.e2)\n         cls.a4 = Author.objects.create(name='a4', num=4004, extra=cls.e2)\n \n         cls.time1 = datetime.datetime(2007, 12, 19, 22, 25, 0)\n@@ -1212,6 +1212,15 @@ class Queries1Tests(TestCase):\n \n \n class Queries2Tests(TestCase):\n+    def test_filterable_field_behavior(self):\n+        \"\"\"\n+        Test to verify that setting `filterable=False` does not cause any errors\n+        like NotSupportedError when using it in filter query.\n+        \"\"\"\n+        self.assertSequenceEqual(\n+            Author.objects.filter(extra=self.e2),\n+            [self.a3],\n+        )\n     @classmethod\n     def setUpTestData(cls):\n         Number.objects.create(num=4)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..7fb792b 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,38 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referencing_foreign_key_ordering(self):\n+        # Create authors\n+        author_a = Author.objects.create(name=\"Author A\")\n+        author_b = Author.objects.create(name=\"Author B\")\n+        # Create articles with self-referencing foreign key\n+        article_1 = Article.objects.create(\n+            headline=\"Article 1\", pub_date=\"2023-01-01\", author=author_a\n+        )\n+        article_2 = Article.objects.create(\n+            headline=\"Article 2\", pub_date=\"2023-01-02\", author=author_b\n+        )\n+        # Setting authors with self-reference\n+        author_a.editor = author_b\n+        author_a.save()\n+        author_b.editor = author_a\n+        author_b.save()\n+        \n+        # Test query that reproduces the issue\n+        queryset_asc = Article.objects.filter(author__isnull=False).order_by(\"author__editor\")\n+        self.assertQuerysetEqual(\n+            queryset_asc,\n+            [\"Article 2\", \"Article 1\"],\n+            attrgetter('headline'),\n+        )\n+\n+        queryset_desc = Article.objects.filter(author__isnull=False).order_by(\"author__editor_id\")\n+        self.assertQuerysetEqual(\n+            queryset_desc,\n+            [\"Article 1\", \"Article 2\"],\n+            attrgetter('headline'),\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +385,38 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referencing_foreign_key_ordering(self):\n+        # Create authors\n+        author_a = Author.objects.create(name=\"Author A\")\n+        author_b = Author.objects.create(name=\"Author B\")\n+        # Create articles with self-referencing foreign key\n+        article_1 = Article.objects.create(\n+            headline=\"Article 1\", pub_date=\"2023-01-01\", author=author_a\n+        )\n+        article_2 = Article.objects.create(\n+            headline=\"Article 2\", pub_date=\"2023-01-02\", author=author_b\n+        )\n+        # Setting authors with self-reference\n+        author_a.editor = author_b\n+        author_a.save()\n+        author_b.editor = author_a\n+        author_b.save()\n+        \n+        # Test query that reproduces the issue\n+        queryset_asc = Article.objects.filter(author__isnull=False).order_by(\"author__editor\")\n+        self.assertQuerysetEqual(\n+            queryset_asc,\n+            [\"Article 2\", \"Article 1\"],\n+            attrgetter('headline'),\n+        )\n+\n+        queryset_desc = Article.objects.filter(author__isnull=False).order_by(\"author__editor_id\")\n+        self.assertQuerysetEqual(\n+            queryset_desc,\n+            [\"Article 1\", \"Article 2\"],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..6b882a1 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1644,6 +1644,67 @@ class ModelFormBasicTests(TestCase):\n         obj.name = 'Alice'\n         obj.full_clean()\n \n+class ForeignKeyValidationTests(TestCase):\n+    def test_foreign_key_validation_uses_base_manager(self):\n+        class ArticleManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().filter(archived=False)\n+\n+        class Article(models.Model):\n+            title = models.CharField(max_length=100)\n+            archived = models.BooleanField(default=False)\n+            objects = ArticleManager()\n+\n+        class FavoriteArticle(models.Model):\n+            article = models.ForeignKey(Article, on_delete=models.CASCADE)\n+\n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticle\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                self.fields['article'].queryset = Article._base_manager.all()\n+\n+        # Create an archived article\n+        archived_article = Article.objects.create(title='Archived Article', archived=True)\n+\n+        data = {'article': archived_article.pk}\n+        form = FavoriteArticleForm(data)\n+        # Form should be valid as it uses the base manager that includes archived\n+        self.assertTrue(form.is_valid())\n+\n+    def test_foreign_key_validation_with_default_manager_fails_for_archived_articles(self):\n+        class ArticleManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().filter(archived=False)\n+\n+        class Article(models.Model):\n+            title = models.CharField(max_length=100)\n+            archived = models.BooleanField(default=False)\n+            objects = ArticleManager()\n+\n+        class FavoriteArticle(models.Model):\n+            article = models.ForeignKey(Article, on_delete=models.CASCADE)\n+\n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticle\n+                fields = '__all__'\n+\n+        # Create an archived article\n+        archived_article = Article.objects.create(title='Archived Article', archived=True)\n+\n+        data = {'article': archived_article.pk}\n+        form = FavoriteArticleForm(data)\n+        # Form validation should fail as default manager is used\n+        self.assertIs(form.is_valid(), False)\n+        self.assertEqual(\n+            form.errors,\n+            {'article': ['Select a valid choice. That choice is not one of the available choices.']}\n+        )\n+\n \n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..38dc950 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,36 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_mixed_case_foreign_key_app_reference(self):\n+        \"\"\"\n+        Test that a ForeignKey with a mixed-case app name does not cause migration failures.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class MixedCaseCategory(models.Model):\n+            class Meta:\n+                app_label = 'MiXeDCaSe_AppName'\n+                apps = new_apps\n+\n+        class MixedCaseContent(models.Model):\n+            category = models.ForeignKey(MixedCaseCategory, on_delete=models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXeDCaSe_AppName'\n+                apps = new_apps\n+        \n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(MixedCaseCategory))\n+        project_state.add_model(ModelState.from_model(MixedCaseContent))\n+        \n+        # Simulate registering the app config\n+        app_config = AppConfig.create('MiXeDCaSe_AppName')\n+        app_config.apps = new_apps\n+        new_apps.app_configs['MiXeDCaSe_AppName'] = app_config\n+        new_apps.all_models['MiXeDCaSe_AppName']['mixedcasecategory'] = MixedCaseCategory\n+        new_apps.all_models['MiXeDCaSe_AppName']['mixedcasecontent'] = MixedCaseContent\n+        \n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..b8c5df3 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1210,13 +1210,43 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+    import datetime\n+    from django.db.models import F\n+\n+    def test_duration_expressions_zero_delta(self):\n+        # Test with zero timedelta\n+        zero_delta = datetime.timedelta(0)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + zero_delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time + zero_delta)\n+\n+    def test_duration_expressions_negative_delta(self):\n+        # Test with a negative timedelta\n+        negative_delta = datetime.timedelta(days=-1)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + negative_delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time + negative_delta)\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n \n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+    import datetime\n+    from django.db.models import F\n+\n+    def test_duration_expressions_zero_delta(self):\n+        # Test with zero timedelta\n+        zero_delta = datetime.timedelta(0)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + zero_delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time + zero_delta)\n+\n+    def test_duration_expressions_negative_delta(self):\n+        # Test with a negative timedelta\n+        negative_delta = datetime.timedelta(days=-1)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + negative_delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time + negative_delta)\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n         Employee.objects.update(salary=F('salary').bitxor(48))\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..a923d7c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1618,6 +1618,27 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Temporal subtraction without ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n+        \n+        queryset = Time.objects.annotate(\n+            delta=F('time') - Value(datetime.time(11, 0, 0))\n+        )\n+        for t in queryset:\n+            expected_delta = datetime.timedelta(\n+                hours=t.time.hour - 11,\n+                minutes=t.time.minute,\n+                seconds=t.time.second,\n+                microseconds=t.time.microsecond\n+            )\n+            self.assertEqual(t.delta, expected_delta)\n+\n     def test_datetime_subtraction_microseconds(self):\n         delta = datetime.timedelta(microseconds=8999999999999999)\n         Experiment.objects.update(end=F('start') + delta)\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..682500c 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,44 @@\n import operator\n \n+from django.forms import ModelForm\n+from .models import Publication, Article\n+\n+class TestUnionWithNone(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Creating test data for Publications.\n+        Publication.objects.bulk_create(\n+            [Publication(id=i) for i in range(10)]\n+        )\n+\n+    def test_queryset_union_behaves_as_or(self):\n+        combined_qs = Publication.objects.filter(id__lt=2).union(\n+            Publication.objects.filter(id__gt=5)\n+        )\n+        # Verify that combined_qs contains the correct publications\n+        expected_ids = [pub.id for pub in Publication.objects.filter(id__lt=2) | Publication.objects.filter(id__gt=5)]\n+        self.assertCountEqual(combined_qs.values_list('id', flat=True), expected_ids)\n+\n+    def test_none_on_combined_queryset(self):\n+        combined_qs = Publication.objects.filter(id__lt=2).union(\n+            Publication.objects.filter(id__gt=5)\n+        )\n+        # Using none() should give an empty result\n+        self.assertCountEqual(combined_qs.none(), [])\n+        \n+        # Combined queryset should not add any object when none is selected (simulating form submission)\n+        class ArticleForm(ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = ['publications']\n+                \n+        form = ArticleForm(data={'publications': []})\n+        self.assertTrue(form.is_valid())\n+        article = form.save(commit=False)\n+        article.save()\n+        form.save_m2m()\n+        self.assertCountEqual(article.publications.all(), [])\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..8c74536 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,7 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -323,7 +324,30 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n-    def test_decode_failure_logged_to_security(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_legacy_encode_decode(self):\n+        # Given data\n+        data = {'test_key': 'test_value'}\n+        # Encode the session data using the legacy method\n+        encoded = self.session.encode(data)\n+        # Decode the same data\n+        decoded = self.session._legacy_decode(encoded)\n+        # Assert that decoding the encoded data returns the original data\n+        self.assertEqual(decoded, data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_valid_legacy_encoded_data(self):\n+        # This test validates the legacy data still decodes correctly.\n+        legacy_encoded = (\n+            'OWUzNTNmNWQxNTBjOWExZmM4MmQ3NzNhMDRmMjU4NmYwNDUyNGI2NDp7InRlc3Rfa2V5IjoidGVzdF92YWx1ZSJ9'\n+        )\n+        expected_data = {'test_key': 'test_value'}\n+        self.assertEqual(\n+            self.session.decode(legacy_encoded),\n+            expected_data,\n+        )\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n             self.assertEqual({}, self.session.decode(bad_encode))\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..3bdc920 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -572,6 +572,10 @@ class SingleObjectTemplateResponseMixinTest(SimpleTestCase):\n \n @override_settings(ROOT_URLCONF='generic_views.urls')\n class DeprecationTests(SimpleTestCase):\n+    from django.utils.functional import SimpleLazyObject\n+    from django.shortcuts import get_object_or_404\n+    from .models import Account\n+\n     @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_template_params(self):\n         \"\"\"A generic template view passes kwargs as context.\"\"\"\n@@ -580,8 +584,27 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['foo'], 'bar')\n         self.assertIsInstance(response.context['view'], View)\n \n+    from django.utils.functional import SimpleLazyObject\n+    from django.shortcuts import get_object_or_404\n+    from .models import Account\n+\n     @ignore_warnings(category=RemovedInDjango40Warning)\n-    def test_extra_template_params(self):\n+    def test_offer_view_with_simple_lazy_object(self):\n+        \"\"\"Test if SimpleLazyObject in kwargs is correctly resolved.\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+        \n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        account = Account.objects.create(slug='simple-lazy-slug')\n+        lazy_slug = SimpleLazyObject(lambda: 'simple-lazy-slug')\n+        request = self.client.get('/offers/simple-lazy-slug/')\n+        response = OfferView.as_view()(request, offer_slug=lazy_slug)\n+        self.assertEqual(response.context_data['offer'], account)\n+        self.assertEqual(response.context_data['offer_slug'], 'simple-lazy-slug')\n         \"\"\"A template view can be customized to return extra context.\"\"\"\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..de8e7be 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2832,6 +2833,70 @@ class LimitChoicesToTests(TestCase):\n \n class FormFieldCallbackTests(SimpleTestCase):\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Create some initial characters\n+        threepwood = Character.objects.create(username=\"Threepwood\", last_action=\"2023-10-25\")\n+        marley = Character.objects.create(username=\"Marley\", last_action=\"2023-10-25\")\n+\n+        # Prepare jokes\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        # Assign jokes to characters\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n+\n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n         widget = forms.Textarea()\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..bddb073 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -912,6 +912,27 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n         self.assertIsInstance(obj.storage_callable_class.storage, BaseStorage)\n \n+class FileFieldDeconstructionTests(TestCase):\n+\n+    def test_callable_storage_deconstruction(self):\n+        \"\"\"\n+        Test that the deconstruction of a FileField with callable storage\n+        does not evaluate the callable, returning a reference instead.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n+    def test_callable_upload_to_deconstruction(self):\n+        \"\"\"\n+        Test that the deconstruction of a FileField with callable upload_to\n+        behaves correctly (as a reference).\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('upload_to_callable').deconstruct()\n+        upload_to = kwargs['upload_to']\n+        self.assertTrue(callable(upload_to))\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..c47de20 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -635,6 +635,32 @@ class TestQuerying(TestCase):\n     def test_key_icontains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n+    def test_key_in_lookup(self):\n+        # Assuming self.objs are set up to contain these cases\n+        # Create the test scenario where `__in` is used on a JSON field key transformation\n+        # Mock data in `self.objs` might look like:\n+        # self.objs = [\n+        #     NullableJSONModel.objects.create(value={'key': 0}),\n+        #     NullableJSONModel.objects.create(value={'key': 1}),\n+        #     NullableJSONModel.objects.create(value={'key': 0}),\n+        #     NullableJSONModel.objects.create(value={'key': 2}),\n+        #     ...\n+        # ]\n+        # Test `__in` lookup on JSONField keys\n+        test_filter = {\"value__key__in\": [0]}\n+        expected_objects = [self.objs[0], self.objs[2]]\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(**test_filter),\n+            expected_objects\n+        )\n+        # Ensure different values in the list work correctly\n+        test_filter_multiple = {\"value__key__in\": [0, 1]}\n+        expected_objects_multiple = [self.objs[0], self.objs[1], self.objs[2]]\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(**test_filter_multiple),\n+            expected_objects_multiple\n+        )\n+\n     def test_key_startswith(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__startswith='b').exists(), True)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..77dc974 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -7,6 +7,7 @@ from django.db.models import (\n     DateField, DateTimeField, F, IntegerField, Max, OuterRef, Subquery,\n     TimeField,\n )\n+import pytz\n from django.db.models.functions import (\n     Extract, ExtractDay, ExtractHour, ExtractIsoWeekDay, ExtractIsoYear,\n     ExtractMinute, ExtractMonth, ExtractQuarter, ExtractSecond, ExtractWeek,\n@@ -1133,7 +1134,37 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_trunc_date_with_tzinfo(self):\n+        start_datetime = datetime(2023, 10, 22, 9, 0, 0)\n+        pacific = pytz.timezone('US/Pacific')\n+        london = pytz.timezone('Europe/London')\n+\n+        start_datetime = timezone.make_aware(start_datetime, is_dst=False)\n+        self.create_model(start_datetime, start_datetime)\n+        \n+        model = DTModel.objects.annotate(\n+            pacific_date=TruncDate('start_datetime', tzinfo=pacific),\n+            london_date=TruncDate('start_datetime', tzinfo=london),\n+        ).order_by('start_datetime').get()\n+\n+        self.assertEqual(model.pacific_date, start_datetime.astimezone(pacific).date())\n+        self.assertEqual(model.london_date, start_datetime.astimezone(london).date())\n+\n+    def test_trunc_time_with_tzinfo(self):\n+        start_datetime = datetime(2023, 10, 22, 9, 0, 0)\n+        pacific = pytz.timezone('US/Pacific')\n+        london = pytz.timezone('Europe/London')\n+\n+        start_datetime = timezone.make_aware(start_datetime, is_dst=False)\n+        self.create_model(start_datetime, start_datetime)\n+        \n+        model = DTModel.objects.annotate(\n+            pacific_time=TruncTime('start_datetime', tzinfo=pacific),\n+            london_time=TruncTime('start_datetime', tzinfo=london),\n+        ).order_by('start_datetime').get()\n+\n+        self.assertEqual(model.pacific_time, start_datetime.astimezone(pacific).time())\n+        self.assertEqual(model.london_time, start_datetime.astimezone(london).time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..3bf23ff 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -17,6 +18,8 @@ from django.core.files.uploadedfile import (\n     UploadedFile,\n )\n from django.test import override_settings\n+from django.core.files import locks\n+from pathlib import Path\n \n try:\n     from PIL import Image\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..bf96d69 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2076,6 +2076,25 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_empty_queryset(self):\n         self.assertIs(Annotation.objects.none().ordered, True)\n \n+    def test_annotated_default_ordering_group_by(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        # This queryset should not be considered ordered, as GROUP BY removes default ordering\n+        self.assertIs(qs.ordered, False)\n+\n+    def test_annotated_values_ordering(self):\n+        # Test the behavior with values\n+        qs = Annotation.objects.values('name').annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False)\n+\n+    def test_annotated_ordering_with_explicit_order_by(self):\n+        # Even with Group By, if we add order_by, it should become ordered\n+        qs = Annotation.objects.annotate(num_notes=Count('notes')).order_by('name')\n+        self.assertIs(qs.ordered, True)\n+\n+    def test_annotated_values_ordering_with_explicit_order_by(self):\n+        qs = Annotation.objects.values('name').annotate(num_notes=Count('notes')).order_by('name')\n+        self.assertIs(qs.ordered, True)\n+\n     def test_order_by_extra(self):\n         self.assertIs(Annotation.objects.all().extra(order_by=['id']).ordered, True)\n \n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..118d8c8 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models.with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -36,8 +38,26 @@ class TokenGeneratorTest(TestCase):\n         tk1 = p0.make_token(user)\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n-\n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..e24254a 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -7,6 +8,7 @@ from django.db import models\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n+from django.db.models import Q, UniqueConstraint\n from django.test.utils import isolate_apps\n \n from .models import CustomUserNonUniqueUsername\n@@ -138,16 +140,41 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n-        class Checked(models.Model):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraint')\n+    def test_username_unique_constraint(self):\n+        \"\"\"\n+        Test that no auth.E003 error is raised when USERNAME_FIELD has a UniqueConstraint.\n+        \"\"\"\n+        class CustomUserUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n             class Meta:\n-                permissions = [\n-                    ('my_custom_permission', 'Some permission'),\n-                    ('other_one', 'Some other permission'),\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='unique_username'),\n                 ]\n-        errors = checks.run_checks(self.apps.get_app_configs())\n+        \n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n         self.assertEqual(errors, [])\n \n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserNonUniqueConstraint')\n+    def test_username_non_unique_constraint(self):\n+        \"\"\"\n+        Test that auth.E003 is raised when USERNAME_FIELD does not have unique=True or a UniqueConstraint.\n+        \"\"\"\n+        class CustomUserNonUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'CustomUserNonUniqueConstraint.username' must be unique because it is named as the 'USERNAME_FIELD'.\",\n+                obj=CustomUserNonUniqueConstraint,\n+                id='auth.E003',\n+            ),\n+        ])\n+\n     def test_clashing_custom_permissions(self):\n         class Checked(models.Model):\n             class Meta:\n",
  "django__django-13569": "",
  "django__django-13590": "",
  "django__django-13658": "",
  "django__django-13670": "",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..f4648a1 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,7 +1020,9 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_password_hash_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..67d827a 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,26 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+        def test_create_model_with_cleared_options(self):\n+            \"\"\"Test that options are cleared correctly when squashing CreateModel and AlterModelOptions.\"\"\"\n+            # Test scenario where a model begins with options and then has them cleared\n+            self.assertOptimizesTo(\n+                [\n+                    migrations.CreateModel(\n+                        'MyModel',\n+                        fields=[],\n+                        options={'unique_together': {('field1',)}},\n+                    ),\n+                    migrations.AlterModelOptions(\n+                        'MyModel',\n+                        options={}\n+                    ),\n+                ],\n+                [\n+                    migrations.CreateModel('MyModel', fields=[]),\n+                ],\n+            )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n@@ -134,6 +154,26 @@ class OptimizerTests(SimpleTestCase):\n             [],\n         )\n \n+        def test_create_model_with_cleared_options(self):\n+            \"\"\"Test that options are cleared correctly when squashing CreateModel and AlterModelOptions.\"\"\"\n+            # Test scenario where a model begins with options and then has them cleared\n+            self.assertOptimizesTo(\n+                [\n+                    migrations.CreateModel(\n+                        'MyModel',\n+                        fields=[],\n+                        options={'unique_together': {('field1',)}},\n+                    ),\n+                    migrations.AlterModelOptions(\n+                        'MyModel',\n+                        options={}\n+                    ),\n+                ],\n+                [\n+                    migrations.CreateModel('MyModel', fields=[]),\n+                ],\n+            )\n+\n     def test_create_alter_unique_delete_model(self):\n         self._test_create_alter_foo_delete_model(migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]))\n \n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..8c7ea63 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,6 +1,9 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n from django.test import SimpleTestCase\n \n from ..utils import setup\n@@ -42,6 +45,27 @@ class AddTests(SimpleTestCase):\n         self.assertEqual(output, '(3, 4, 1, 2)')\n \n     @setup({'add07': '{{ d|add:t }}'})\n+\n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n     def test_add07(self):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n",
  "django__django-13807": "",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..5594b60 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,13 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import mock\n+from django.core.management import call_command\n+from django.core.management.base import BaseCommand\n+from django.core.management.commands.runserver import Command as RunserverCommand, autoreload\n+from io import StringIO\n+import unittest.mock as mock\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..fda1093 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -240,17 +241,10 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n             \"middleware_exceptions.middleware.PaymentMiddleware adapted.\",\n         )\n \n-    @override_settings(MIDDLEWARE=[\n-        'middleware_exceptions.middleware.async_payment_middleware',\n-    ])\n-    async def test_async_middleware_async(self):\n-        with self.assertLogs('django.request', 'WARNING') as cm:\n-            response = await self.async_client.get('/middleware_exceptions/view/')\n-        self.assertEqual(response.status_code, 402)\n-        self.assertEqual(\n-            cm.records[0].getMessage(),\n-            'Payment Required: /middleware_exceptions/view/',\n-        )\n+    async def test_chain_continues_despite_middleware_not_used(self):\n+        response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.content, b'OK')\n \n     @override_settings(\n         DEBUG=False,\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..f551eda 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,7 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n@@ -512,6 +514,52 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_loading_package_without__file__(self):\n+        \"\"\"\n+        To support frozen environments, MigrationLoader loads migrations from\n+        regular packages with no __file__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n+        loader = MigrationLoader(connection)\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        try:\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_path'})\n+    def test_loading_package_without__path__(self):\n+        \"\"\"\n+        Ensure MigrationLoader does not load modules without __path__.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_no_path')\n+        loader = MigrationLoader(connection)\n+        try:\n+            del test_module.__path__\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertEqual(migrations, [])\n+        finally:\n+            test_module.__path__ = []\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..e7fc350 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -9,6 +9,9 @@ from unittest import mock\n \n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n+import mock\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db.backends.sqlite3.base import DatabaseWrapper as dbapi2\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n from django.db.utils import ConnectionHandler\n from django.test import (\n@@ -36,7 +39,12 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_3_8_11_1(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..96bbd2a 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -156,9 +156,22 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 )\n \n \n+import sys\n+from unittest import mock\n+from .test_module import __main__ as test_main\n+from django.utils import autoreload\n+\n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        # This tests whether the autoreload function correctly parses arguments\n+        # when called with -m <package> on a non-Django module.\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,7 +186,15 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        # This tests whether the autoreload function correctly parses arguments\n+        # when called with -m <package> on a non-Django module.\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "",
  "django__django-13933": "",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..2ec3aae 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,6 @@\n+\n+from .models import ParentStringPrimaryKey, ChildStringPrimaryKeyParent\n+\n import datetime\n from copy import deepcopy\n \n@@ -549,7 +552,38 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        # Test case where parent primary key is set before associating with child\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'jeff'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_after_parent_primary_key_set_before_assignment(self):\n+        # Test case where parent primary key is set before child assignment\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name=\"charlie\")\n+            child = ChildStringPrimaryKeyParent()\n+            child.parent = parent\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_after_parent_primary_key_set_after_assignment(self):\n+        # Test the original issue scenario: ForeignKeyViolation should occur due to \"\" primary key\n+        with self.assertRaises(IntegrityError):\n+            with transaction.atomic():\n+                parent = ParentStringPrimaryKey()\n+                child = ChildStringPrimaryKeyParent(parent=parent)\n+                child.parent.name = ''\n+                parent.save()\n+                child.save()\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..802a353 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -220,6 +223,22 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that MyAutoField calls from_db_value on creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that MyAutoField calls from_db_value on bulk_create.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n     # SQLite lets objects be saved with an empty primary key, even though an\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..ae54201 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -792,6 +792,38 @@ class BasicExpressionsTests(TestCase):\n                 output_field=BooleanField(),\n             ),\n         )\n+\n+    def test_commutative_operations_with_Q_and_Exists(self):\n+        # Test the issue that Exists & Q and Q & Exists should both work without TypeError\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # This should not raise a TypeError\n+        conditions_and = Q(salary__gte=30) & Exists(is_ceo)\n+        self.assertCountEqual(\n+            Employee.objects.filter(conditions_and),\n+            [self.max],\n+        )\n+\n+        # This should not raise a TypeError\n+        conditions_or = Q(salary__lt=15) | Exists(is_poc)\n+        self.assertCountEqual(\n+            Employee.objects.filter(conditions_or),\n+            [self.example_inc.ceo, self.max],\n+        )\n+\n+        # Additional tests to ensure commutative behavior\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+            [self.max],\n+        )\n+\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            [self.example_inc.ceo, self.max],\n+        )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n     def test_boolean_expression_combined(self):\n@@ -803,19 +835,147 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_ceo) | Exists(is_poc)),\n             [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n         )\n+\n+    def test_commutative_operations_with_Q_and_Exists(self):\n+        # Test the issue that Exists & Q and Q & Exists should both work without TypeError\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # This should not raise a TypeError\n+        conditions_and = Q(salary__gte=30) & Exists(is_ceo)\n+        self.assertCountEqual(\n+            Employee.objects.filter(conditions_and),\n+            [self.max],\n+        )\n+\n+        # This should not raise a TypeError\n+        conditions_or = Q(salary__lt=15) | Exists(is_poc)\n+        self.assertCountEqual(\n+            Employee.objects.filter(conditions_or),\n+            [self.example_inc.ceo, self.max],\n+        )\n+\n+        # Additional tests to ensure commutative behavior\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+            [self.max],\n+        )\n+\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            [self.example_inc.ceo, self.max],\n+        )\n         self.assertCountEqual(\n             Employee.objects.filter(Exists(is_ceo) & Exists(is_poc)),\n             [self.max],\n         )\n+\n+    def test_commutative_operations_with_Q_and_Exists(self):\n+        # Test the issue that Exists & Q and Q & Exists should both work without TypeError\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # This should not raise a TypeError\n+        conditions_and = Q(salary__gte=30) & Exists(is_ceo)\n+        self.assertCountEqual(\n+            Employee.objects.filter(conditions_and),\n+            [self.max],\n+        )\n+\n+        # This should not raise a TypeError\n+        conditions_or = Q(salary__lt=15) | Exists(is_poc)\n+        self.assertCountEqual(\n+            Employee.objects.filter(conditions_or),\n+            [self.example_inc.ceo, self.max],\n+        )\n+\n+        # Additional tests to ensure commutative behavior\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+            [self.max],\n+        )\n+\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            [self.example_inc.ceo, self.max],\n+        )\n         self.assertCountEqual(\n             Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n             [self.max],\n         )\n+\n+    def test_commutative_operations_with_Q_and_Exists(self):\n+        # Test the issue that Exists & Q and Q & Exists should both work without TypeError\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # This should not raise a TypeError\n+        conditions_and = Q(salary__gte=30) & Exists(is_ceo)\n+        self.assertCountEqual(\n+            Employee.objects.filter(conditions_and),\n+            [self.max],\n+        )\n+\n+        # This should not raise a TypeError\n+        conditions_or = Q(salary__lt=15) | Exists(is_poc)\n+        self.assertCountEqual(\n+            Employee.objects.filter(conditions_or),\n+            [self.example_inc.ceo, self.max],\n+        )\n+\n+        # Additional tests to ensure commutative behavior\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+            [self.max],\n+        )\n+\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            [self.example_inc.ceo, self.max],\n+        )\n         self.assertCountEqual(\n             Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n             [self.example_inc.ceo, self.max],\n         )\n \n+    def test_commutative_operations_with_Q_and_Exists(self):\n+        # Test the issue that Exists & Q and Q & Exists should both work without TypeError\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # This should not raise a TypeError\n+        conditions_and = Q(salary__gte=30) & Exists(is_ceo)\n+        self.assertCountEqual(\n+            Employee.objects.filter(conditions_and),\n+            [self.max],\n+        )\n+\n+        # This should not raise a TypeError\n+        conditions_or = Q(salary__lt=15) | Exists(is_poc)\n+        self.assertCountEqual(\n+            Employee.objects.filter(conditions_or),\n+            [self.example_inc.ceo, self.max],\n+        )\n+\n+        # Additional tests to ensure commutative behavior\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+            [self.max],\n+        )\n+\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            [self.example_inc.ceo, self.max],\n+        )\n+\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..95a8d12 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -204,6 +204,53 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('cached', 'css', 'img', 'window.png'), stats['unmodified'])\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n+        # Test case for ensuring files are not yielded multiple times.\n+        self.test_no_duplicate_yields()\n+\n+    def test_no_duplicate_yields(self):\n+        \"\"\"\n+        Ensure that post_process() does not yield the same file multiple times.\n+        \"\"\"\n+        from django.contrib.staticfiles.storage import HashedFilesMixin\n+        paths = {\n+            'admin/css/base.css': 'some content',\n+            'admin/css/dashboard.css': 'other content',\n+        }\n+        \n+        # Create a mock instance of a storage class that includes HashedFilesMixin.\n+        class MockStorage(HashedFilesMixin):\n+            def _open(self, name, mode='rb'):\n+                # Mock method\n+                pass\n+\n+            def _save(self, name, content):\n+                # Mock method\n+                pass\n+\n+            def path(self, name):\n+                # Mock method to return a fake path\n+                return f'/fake/path/{name}'\n+\n+            def url(self, name):\n+                # Mock method to return a fake URL\n+                return f'http://example.com/static/{name}'\n+\n+            def get_available_name(self, name, max_length=None):\n+                # Mock method to ensure names are unique\n+                return name\n+\n+        storage = MockStorage()\n+\n+        # Collect stats on post-processed files\n+        post_processed_files = set()\n+        for original, hashed, processed in storage.post_process(paths):\n+            post_processed_files.add(original)\n+\n+        # Verify that each file is only processed once\n+        self.assertEqual(len(post_processed_files), len(paths))\n+\n+        # Ensure no duplicate yields\n+        self.assertCountEqual(post_processed_files, paths.keys())\n \n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n@@ -213,6 +260,53 @@ class TestHashedFiles:\n             self.assertNotIn(b\"cached/other.css\", content)\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n+        # Test case for ensuring files are not yielded multiple times.\n+        self.test_no_duplicate_yields()\n+\n+    def test_no_duplicate_yields(self):\n+        \"\"\"\n+        Ensure that post_process() does not yield the same file multiple times.\n+        \"\"\"\n+        from django.contrib.staticfiles.storage import HashedFilesMixin\n+        paths = {\n+            'admin/css/base.css': 'some content',\n+            'admin/css/dashboard.css': 'other content',\n+        }\n+        \n+        # Create a mock instance of a storage class that includes HashedFilesMixin.\n+        class MockStorage(HashedFilesMixin):\n+            def _open(self, name, mode='rb'):\n+                # Mock method\n+                pass\n+\n+            def _save(self, name, content):\n+                # Mock method\n+                pass\n+\n+            def path(self, name):\n+                # Mock method to return a fake path\n+                return f'/fake/path/{name}'\n+\n+            def url(self, name):\n+                # Mock method to return a fake URL\n+                return f'http://example.com/static/{name}'\n+\n+            def get_available_name(self, name, max_length=None):\n+                # Mock method to ensure names are unique\n+                return name\n+\n+        storage = MockStorage()\n+\n+        # Collect stats on post-processed files\n+        post_processed_files = set()\n+        for original, hashed, processed in storage.post_process(paths):\n+            post_processed_files.add(original)\n+\n+        # Verify that each file is only processed once\n+        self.assertEqual(len(post_processed_files), len(paths))\n+\n+        # Ensure no duplicate yields\n+        self.assertCountEqual(post_processed_files, paths.keys())\n \n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..3c3d1c5 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -5,6 +6,7 @@ Tests for stuff in django.utils.datastructures.\n import copy\n import pickle\n \n+import collections.abc\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n",
  "django__django-14122": "",
  "django__django-14140": "",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..f02a158 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.db.models import BigAutoField, SmallAutoField\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -66,7 +68,28 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +105,28 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..0d56e00 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -182,6 +182,24 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_sub_module})\n+    @mock.patch('sys.argv', [test_sub_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_submodule(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.sub_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..508cddd 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -234,6 +234,16 @@ TEST_DATA = [\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n     (BaseValidator(True), True, None),\n+\n+    # Test URLs with CR, LF, and tabs\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (BaseValidator(True), False, ValidationError),\n \n     (RegexValidator(), '', None),\n",
  "django__django-14351": "",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..40ca1a9 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,6 +38,72 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_new_and_deprecated_keys(self):\n+        \"\"\"Test both new ('database', 'password') and deprecated ('db', 'passwd') keys.\"\"\"\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        \n+        # Expected results when using new keys\n+        expected_args_new_keys = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname_new',\n+        ]\n+        expected_env_new_keys = {'MYSQL_PWD': 'optionpassword_new'}\n+\n+        # Expected results when using deprecated keys\n+        expected_args_deprecated_keys = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname_deprecated',\n+        ]\n+        expected_env_deprecated_keys = {'MYSQL_PWD': 'optionpassword_deprecated'}\n+\n+        # Check new keys are used when both are present\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname_new',\n+                    'db': 'optiondbname_deprecated',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword_new',\n+                    'passwd': 'optionpassword_deprecated',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args_new_keys, expected_env_new_keys),\n+        )\n+\n+        # Check deprecated keys alone\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'optiondbname_deprecated',\n+                    'user': 'optionuser',\n+                    'passwd': 'optionpassword_deprecated',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args_deprecated_keys, expected_env_deprecated_keys),\n+        )\n+\n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n         options_port = 555\n@@ -68,6 +134,72 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_new_and_deprecated_keys(self):\n+        \"\"\"Test both new ('database', 'password') and deprecated ('db', 'passwd') keys.\"\"\"\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        \n+        # Expected results when using new keys\n+        expected_args_new_keys = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname_new',\n+        ]\n+        expected_env_new_keys = {'MYSQL_PWD': 'optionpassword_new'}\n+\n+        # Expected results when using deprecated keys\n+        expected_args_deprecated_keys = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname_deprecated',\n+        ]\n+        expected_env_deprecated_keys = {'MYSQL_PWD': 'optionpassword_deprecated'}\n+\n+        # Check new keys are used when both are present\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname_new',\n+                    'db': 'optiondbname_deprecated',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword_new',\n+                    'passwd': 'optionpassword_deprecated',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args_new_keys, expected_env_new_keys),\n+        )\n+\n+        # Check deprecated keys alone\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'optiondbname_deprecated',\n+                    'user': 'optionuser',\n+                    'passwd': 'optionpassword_deprecated',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args_deprecated_keys, expected_env_deprecated_keys),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n@@ -89,6 +221,72 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_new_and_deprecated_keys(self):\n+        \"\"\"Test both new ('database', 'password') and deprecated ('db', 'passwd') keys.\"\"\"\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        \n+        # Expected results when using new keys\n+        expected_args_new_keys = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname_new',\n+        ]\n+        expected_env_new_keys = {'MYSQL_PWD': 'optionpassword_new'}\n+\n+        # Expected results when using deprecated keys\n+        expected_args_deprecated_keys = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname_deprecated',\n+        ]\n+        expected_env_deprecated_keys = {'MYSQL_PWD': 'optionpassword_deprecated'}\n+\n+        # Check new keys are used when both are present\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname_new',\n+                    'db': 'optiondbname_deprecated',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword_new',\n+                    'passwd': 'optionpassword_deprecated',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args_new_keys, expected_env_new_keys),\n+        )\n+\n+        # Check deprecated keys alone\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'optiondbname_deprecated',\n+                    'user': 'optionuser',\n+                    'passwd': 'optionpassword_deprecated',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args_deprecated_keys, expected_env_deprecated_keys),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..f983ef1 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -94,6 +94,10 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n     )\n \n \n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+\n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..8154852 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -640,7 +640,39 @@ class ExecutorTests(MigrationTestBase):\n         \"\"\"\n         recorder = MigrationRecorder(connection)\n         # Record all replaced migrations as applied\n-        recorder.record_applied(\"migrations\", \"0001_initial\")\n+import unittest\n+from django.db import connection\n+from django.test import override_settings\n+from django.db.migrations.executor import MigrationExecutor\n+\n+@override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+class TestMigrationSquash(unittest.TestCase):\n+    def test_unapply_squashed_migration(self):\n+        \"\"\"Test that unapplying a squashed migration correctly marks it as unapplied.\"\"\"\n+        executor = MigrationExecutor(connection)\n+        # Apply the squashed migration\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        self.assertIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        # Unapply the same squashed migration\n+        executor.loader.build_graph()  # Refresh the graph to ensure consistency\n+        executor.migrate([('migrations', None)])\n+        # Check if squashed migration is marked as unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        # Also check that replaced migrations are marked as unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_initial'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            ('migrations', '0002_second'),\n+            executor.recorder.applied_migrations(),\n+        )\n         recorder.record_applied(\"migrations\", \"0002_second\")\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..7312afb 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -255,6 +255,24 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n+            # Test for handling of HTML-escaped string and trailing punctuation\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            # Additional test cases for various edge cases\n+            (\n+                'Contact us at hello@example.com!',\n+                'Contact us at <a href=\"mailto:hello@example.com\">hello@example.com</a>!'\n+            ),\n+            (\n+                'Visit https://sub.domain.com/path?query=value&another=<tag>',\n+                'Visit <a href=\"https://sub.domain.com/path?query=value&amp;another=%3Ctag%3E\">https://sub.domain.com/path?query=value&amp;another=%3Ctag%3E</a>'\n+            ),\n+            (\n+                'Look at www.example.com, www.test.org, and www.random.net!',\n+                'Look at <a href=\"http://www.example.com\">www.example.com</a>, <a href=\"http://www.test.org\">www.test.org</a>, and <a href=\"http://www.random.net\">www.random.net</a>!'\n+            ),\n         )\n         for value, output in tests:\n             with self.subTest(value=value):\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..638507e 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,6 +115,48 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n+    def test_bulk_update_return_value_empty(self):\n+        # Test bulk_update with no objects, should return 0\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_return_value_multiple_objects(self):\n+        # Create multiple Note objects\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 5)\n+        ])\n+        # Retrieve all Note objects\n+        notes = list(Note.objects.all())\n+        # Change note field values\n+        for note in notes:\n+            note.note = 'updated-note-' + note.misc\n+        # Perform bulk update\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        # Assert that all rows were updated\n+        self.assertEqual(rows_updated, 5)\n+\n+    def test_bulk_update_return_value_with_duplicates(self):\n+        # Create a single Note object\n+        note = Note.objects.create(note='original', misc='test-duplicate')\n+        # Attempt bulk_update with duplicates, should count the actual updates\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+    def test_bulk_update_return_value_with_batch_size(self):\n+        # Create Note objects\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(100)\n+        ])\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = f'new-note-{note.misc}'\n+        # Test using batch size\n+        rows_updated = Note.objects.bulk_update(notes, ['note'], batch_size=10)\n+        # Assert that all rows were updated\n+        self.assertEqual(rows_updated, 100)\n+\n     def test_update_primary_key(self):\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..55a9b1a 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -983,8 +983,26 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n-\n-    def test_formset_iteration(self):\n+    \n+    def test_non_form_errors_with_css_class(self):\n+        \"\"\"\n+        Test that non-form errors include the 'nonform' CSS class\n+        in their HTML representation.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '3',\n+            'drinks-INITIAL_FORMS': '0',\n+            'drinks-MIN_NUM_FORMS': '0',\n+            'drinks-MAX_NUM_FORMS': '0',\n+            'drinks-0-name': 'Beer',\n+            'drinks-1-name': 'Beer',\n+            'drinks-2-name': 'Beer',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors_html = str(formset.non_form_errors())\n+        self.assertIn('class=\"errorlist nonform\"', non_form_errors_html)\n+        self.assertIn('<li>You may only specify a drink once.</li>', non_form_errors_html)\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n         formset = ChoiceFormset()\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..e0edb66 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2122,6 +2122,31 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         self.assertEqual(form.errors, {})\n         self.assertEqual(form.cleaned_data, {'dt': now})\n \n+    def test_datetime_clean_initial_matches_boundfield_initial(self):\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned_value = form.cleaned_data['dt']\n+        bound_field_initial = form['dt'].initial\n+        self.assertEqual(cleaned_value, bound_field_initial)\n+\n+    def test_datetimefield_did_change_method_not_changed(self):\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45))\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        self.assertEqual(form['dt']._did_change(), False)\n+\n+    def test_datetimefield_did_change_method_changed(self):\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45))\n+\n+        form = DateTimeForm({'dt': '2006-10-26 14:30:45'})\n+        self.assertEqual(form['dt']._did_change(), True)\n+\n     def test_datetime_changed_data_callable_with_microseconds(self):\n         class DateTimeForm(forms.Form):\n             dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45, 123456), disabled=True)\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..a8a71e6 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -20,7 +20,20 @@ class M2mThroughTests(TestCase):\n         cls.rock = Group.objects.create(name='Rock')\n         cls.roll = Group.objects.create(name='Roll')\n \n-    def test_retrieve_intermediate_items(self):\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        # Check M2M through fields list is made hashable for proxy models\n+        reverse_m2m = Person._meta.get_field('custom_members')\n+        self.assertEqual(reverse_m2m.through_fields, ['person', 'group'])\n+        \n+        class PersonProxy(Person):\n+            class Meta:\n+                proxy = True\n+        \n+        inherited_reverse_m2m = PersonProxy._meta.get_field('custom_members')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['person', 'group'])\n+        \n+        # Ensure no hash-related errors occur\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n         Membership.objects.create(person=self.jim, group=self.rock)\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..eb2dd5e 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,4 +1,9 @@\n+\n+import datetime\n import json\n+from django.test import TestCase\n+from django.http import JsonResponse\n+from .models import Question  # Ensure that models are imported properly\n from contextlib import contextmanager\n \n from django.contrib import admin\n",
  "django__django-14765": "",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..4ecd381 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,6 +166,17 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 )\n \n \n+import django\n+import mock\n+import sys\n+import tempfile\n+import types\n+from django.utils import autoreload\n+from pathlib import Path\n+from unittest import SimpleTestCase\n+from unittest.mock import patch\n+from subprocess import CompletedProcess\n+\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/admin.py b/tests/admin_views/admin.py\nindex 7959ba6..e7b7961 100644\n--- a/tests/admin_views/admin.py\n+++ b/tests/admin_views/admin.py\n@@ -1141,6 +1141,11 @@ site2.register(\n     list_editable=['parent'],\n     raw_id_fields=['parent'],\n )\n+\n+# Define a new Admin Site to test custom admin URLs\n+custom_admin_site = admin.AdminSite(name='custom_admin')\n+custom_admin_site.register(ReadOnlyRelatedField, ReadOnlyRelatedFieldAdmin)\n+custom_admin_site.register(Language)\n site2.register(Person, save_as_continue=False)\n \n site7 = admin.AdminSite(name=\"admin7\")\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..108d830 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -279,7 +281,32 @@ class ModelChoiceFieldTests(TestCase):\n         field = CustomModelChoiceField(Category.objects.all())\n         self.assertIsInstance(field.choices, CustomModelChoiceIterator)\n \n-    def test_choice_iterator_passes_model_to_widget(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(\n+            hash(value_1), \n+            hash(ModelChoiceIteratorValue(self.c1.pk, None))\n+        )\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+        \n+    def test_create_option_hashable(self):\n+        class CustomSelectWidget(forms.Select):\n+            def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+                context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+                if not value:\n+                    return context\n+                if value in show_fields:\n+                    context['attrs']['data-fields'] = json.dumps(show_fields[value])\n+                return context\n+\n+        class CustomModelChoiceField(forms.ModelChoiceField):\n+            widget = CustomSelectWidget\n+\n+        show_fields = {self.c1.pk: ['first_name', 'last_name'], self.c2.pk: ['city', 'age']}\n+        field = CustomModelChoiceField(Category.objects.all())\n+        rendered = field.widget.render('name', self.c1.pk)\n+        self.assertIn('data-fields', rendered)\n         class CustomCheckboxSelectMultiple(CheckboxSelectMultiple):\n             def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n                 option = super().create_option(name, value, label, selected, index, subindex, attrs)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..e58557e 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,7 +793,48 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n-    def test_rename_m2m_target_model(self):\n+    def test_rename_model_with_db_table_noop_reverse(self):\n+        app_label = 'test_rmwdbtn_reverse'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_with_alteration(self):\n+        app_label = 'test_rmwdbtn_alt'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+                \n+        # Simulate an unrelated operation to ensure no operation occurs.\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                editor.alter_db_table(None, 'rider', 'rider_new')\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/admin.py b/tests/admin_changelist/admin.py\nindex 580e58f..2eadde2 100644\n--- a/tests/admin_changelist/admin.py\n+++ b/tests/admin_changelist/admin.py\n@@ -1,9 +1,10 @@\n+\n from django.contrib import admin\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.core.paginator import Paginator\n \n-from .models import Band, Child, Event, Parent, Swallow\n+from .models import Band, Child, Event, Parent, Swallow, Client, ClientOffice\n \n site = admin.AdminSite(name=\"admin\")\n \n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex b862331..0285f3f 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -173,7 +173,27 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, 'test_id'), expected)\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_without_id(self):\n+        tests = (\n+            # Test JSON object without element_id\n+            (\n+                {'key': 'value'},\n+                '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+            ),\n+            # Test JSON string without element_id\n+            (\n+                \"simple string\",\n+                '<script type=\"application/json\">\"simple string\"</script>'\n+            ),\n+            # Test JSON number without element_id\n+            (\n+                42,\n+                '<script type=\"application/json\">42</script>'\n+            ),\n+        )\n+        for arg, expected in tests:\n+            with self.subTest(arg=arg):\n+                self.assertEqual(json_script(arg), expected)\n         items = (\n             ('http://\u00f6\u00e4\u00fc.com/', 'http://xn--4ca9at.com/'),\n             ('http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/', 'http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/'),\n@@ -276,4 +296,4 @@ class TestUtilsHtml(SimpleTestCase):\n         )\n         for value in tests:\n             with self.subTest(value=value):\n-                self.assertEqual(urlize(value), value)\n+                self.assertEqual(urlize(value), value)\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..c94701b 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2827,6 +2827,49 @@ class AutodetectorTests(TestCase):\n             ('0002_custom_name_20380101_1112_squashed_0003_model', 3),\n             ('2_squashed_4', 4),\n         ]\n+\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_deep_deconstruct_with_hardcoded_fk(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.HardcodedModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'AnotherModel', [('related', HardcodedForeignKey(on_delete=models.CASCADE))]))\n+        changes = MigrationAutodetector(before, after).changes(graph=None)\n+        self.assertEqual(len(changes['testapp']), 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='AnotherModel')\n         for migration_name, expected_number in tests:\n             with self.subTest(migration_name=migration_name):\n                 self.assertEqual(\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..4fe6f73 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,32 @@\n+\n+from django.test import SimpleTestCase\n+\n+class OverrideSettingsLevelTagsTests(SimpleTestCase):\n+    message_tags = {\n+        constants.INFO: 'info',\n+        constants.DEBUG: 'debug',\n+        constants.WARNING: 'warn',\n+        constants.ERROR: 'error',\n+        constants.SUCCESS: 'success',\n+        99: 'custom',  # Custom level tag\n+    }\n+\n+    @override_settings(MESSAGE_TAGS=message_tags)\n+    def test_level_tags_are_updated_with_override_settings(self):\n+        \"\"\"\n+        Ensure that the LEVEL_TAGS constant is updated correctly when\n+        @override_settings is used with MESSAGE_TAGS.\n+        \"\"\"\n+        # Assert that the LEVEL_TAGS match the overridden MESSAGE_TAGS\n+        self.assertEqual(base.LEVEL_TAGS, self.message_tags)\n+\n+        # Create a message and verify its level_tag corresponds to the overridden settings\n+        message = Message(constants.INFO, \"Test message\")\n+        self.assertEqual(message.level_tag, 'info')\n+\n+        custom_message = Message(99, \"Test custom message\")\n+        self.assertEqual(custom_message.level_tag, 'custom')\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..4de109b 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2096,12 +2096,34 @@ class QuerySetBitwiseOperationTests(TestCase):\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n     @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+\n+    def test_conflicting_aliases_during_combine(self):\n+        # Simulate the problematic condition described in the issue.\n+        from django.db.models import Q\n+        qux = Qux.objects.create()\n+        qs1 = qux.foos.all()\n+        qs2 = Foo.objects.filter(\n+            Q(bars__baz__in=qux.bazes.all()) | Q(other_bars__baz__in=qux.bazes.all())\n+        )\n+        # Assert that both combinations work and give the same results.\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n     @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+\n+    def test_conflicting_aliases_during_combine(self):\n+        # Simulate the problematic condition described in the issue.\n+        from django.db.models import Q\n+        qux = Qux.objects.create()\n+        qs1 = qux.foos.all()\n+        qs2 = Foo.objects.filter(\n+            Q(bars__baz__in=qux.bazes.all()) | Q(other_bars__baz__in=qux.bazes.all())\n+        )\n+        # Assert that both combinations work and give the same results.\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=False)\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..96b6ad6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1755,6 +1755,13 @@ class ValueTests(TestCase):\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n \n+    def test_deconstruct_F_expression(self):\n+        expr = F('field_name')\n+        path, args, kwargs = expr.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..6c84e5f 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1731,7 +1731,37 @@ class AutodetectorTests(TestCase):\n             index_together={('name',), ('age',)},\n         )\n \n-    def test_rename_field_and_foo_together(self):\n+    def test_optimize_alter_foo_together_operations(self):\n+        \"\"\"\n+        Ensure that multiple AlterFooTogether operations are optimized into a single operation.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together_optimized],\n+            [self.author_empty, self.book_foo_together_unoptimized]\n+        )\n+        # Should result in a single migration with two operations.\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book', unique_together={('col',)},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book', index_together={('col',)},\n+        )\n+\n+    def test_no_change_in_foo_together(self):\n+        \"\"\"\n+        Verify that no migrations are created if the unique_together and index_together remain the same.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together],\n+            [self.author_empty, self.book_foo_together]\n+        )\n+        # There should be no migrations since there's no change.\n+        self.assertEqual(len(changes), 0)\n         \"\"\"Fields are renamed before updating index/unique_together.\"\"\"\n         changes = self.get_changes(\n             [self.author_empty, self.book_foo_together_3],\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..3e89ff5 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1842,7 +1842,32 @@ class ValueTests(TestCase):\n             (b'', BinaryField),\n             (uuid.uuid4(), UUIDField),\n         ]\n-        for value, output_field_type in value_types:\n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15, 12, 0),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                try:\n+                    field.clean(value, model_instance=None)\n+                except ValidationError as e:\n+                    self.fail(f\"ValidationError raised: {e}\")\n             with self.subTest(type=type(value)):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n",
  "django__django-15278": "",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..7e0037c 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -102,7 +102,20 @@ class BasicFieldTests(SimpleTestCase):\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n-    def test_abstract_inherited_fields(self):\n+    def test_hash_immutability(self):\n+        \"\"\"Ensure that the hash of a field is immutable before and after assignment to a model.\"\"\"\n+        field = models.CharField(max_length=200)\n+        initial_hash = hash(field)\n+\n+        # Place the field in a dictionary to simulate use case\n+        field_dict = {field: \"value\"}\n+        \n+        class MyModel(models.Model):\n+            title = field\n+        \n+        # Ensure the hash remains the same after being assigned to a model\n+        self.assertEqual(initial_hash, hash(field))\n+        self.assertIn(field, field_dict)\n         \"\"\"Field instances from abstract models are not equal.\"\"\"\n         class AbstractModel(models.Model):\n             field = models.IntegerField()\n",
  "django__django-15368": "",
  "django__django-15380": "",
  "django__django-15382": "",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..b69856f 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -27,7 +27,9 @@ from django.db.models import (\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n-\n+from django.contrib.admin import ModelAdmin\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n from .models import (\n     Advisor,\n     Album,\n@@ -143,8 +145,25 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n \n     def test_many_to_many(self):\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n-\n-    def test_raw_id_many_to_many(self):\n+    \n+    def test_radio_fields_foreignkey_respects_custom_empty_label(self):\n+        class MyModel(models.Model):\n+            name = models.CharField(max_length=100)\n+            parent = models.ForeignKey('self', null=True, blank=True, on_delete=models.SET_NULL)\n+\n+            class Meta:\n+                app_label = 'admin_widgets'\n+\n+        class MyModelAdmin(ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n+                if db_field.name == \"parent\":\n+                    kwargs[\"empty_label\"] = \"Custom Empty Label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(MyModel, admin.site)\n+        ff = ma.formfield_for_dbfield(MyModel._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom Empty Label\")\n         self.assertFormfield(\n             Band, \"members\", widgets.ManyToManyRawIdWidget, raw_id_fields=[\"members\"]\n         )\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..db97f96 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,64 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_model_with_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[], managers=[(\"default\", models.Manager())]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"items\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"items\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+        \n+    def test_multiple_alter_model_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Baz\", fields=[], managers=[(\"default\", models.Manager())]),\n+                migrations.AlterModelManagers(name=\"Baz\", managers=[(\"objects\", models.Manager())]),\n+                migrations.AlterModelManagers(name=\"Baz\", managers=[(\"things\", models.Manager())]),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[(\"things\", models.Manager())],\n+                ),\n+            ],\n+        )\n+    \n+    def test_create_model_without_initial_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Qux\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[(\"custom_manager\", models.Manager())],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[],\n+                    managers=[(\"custom_manager\", models.Manager())],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n@@ -141,6 +199,64 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.CreateModel(\"MyModel\", fields=[])],\n         )\n+\n+    def test_create_model_with_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[], managers=[(\"default\", models.Manager())]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"items\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"items\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+        \n+    def test_multiple_alter_model_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Baz\", fields=[], managers=[(\"default\", models.Manager())]),\n+                migrations.AlterModelManagers(name=\"Baz\", managers=[(\"objects\", models.Manager())]),\n+                migrations.AlterModelManagers(name=\"Baz\", managers=[(\"things\", models.Manager())]),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[(\"things\", models.Manager())],\n+                ),\n+            ],\n+        )\n+    \n+    def test_create_model_without_initial_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Qux\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[(\"custom_manager\", models.Manager())],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[],\n+                    managers=[(\"custom_manager\", models.Manager())],\n+                ),\n+            ],\n+        )\n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel(\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..fa091c0 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,36 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+from django.test import TestCase\n+from django.core import management\n+from .models import Author, Book\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def test_natural_key_with_foreign_key_on_non_default_db(self):\n+        \"\"\"\n+        Test that loading data using natural keys with foreign key dependencies\n+        works correctly when using a non-default database.\n+        \"\"\"\n+        # Assuming appropriate 'books.json' fixture in the test setup.\n+        management.call_command(\n+            \"loaddata\",\n+            \"books.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        # Verify that the objects were loaded into the 'other' database\n+        books = Book.objects.using(\"other\").all()\n+        authors = Author.objects.using(\"other\").all()\n+\n+        self.assertEqual(len(authors), 1)\n+        self.assertEqual(authors[0].name, \"JR Tolkien\")\n+        \n+        self.assertEqual(len(books), 1)\n+        self.assertEqual(books[0].title, \"The Ring\")\n+        self.assertEqual(books[0].author.name, \"JR Tolkien\")\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..69e4814 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,7 +3961,55 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n-    def test_add_textfield_unhashable_default(self):\n+    def test_alter_field_choices_noop_multiple_values(self):\n+        # Setup initial model state.\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        \n+        # Original field without choices.\n+        old_field = Author._meta.get_field(\"name\")\n+        \n+        # New field with multiple choice values added.\n+        new_field = CharField(\n+            choices=((\"Alice\", \"Alice\"), (\"Bob\", \"Bob\"), (\"Charlie\", \"Charlie\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        \n+        # Verify no SQL is executed when altering the field with added choices.\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        \n+        # Verify no SQL is executed when reverting the field to its original state.\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_choices_noop_modify_values(self):\n+        # Setup initial model state.\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        \n+        # Original field with initial choice values.\n+        initial_choices_field = CharField(\n+            choices=((\"Tom\", \"Tom\"), (\"Dick\", \"Dick\")),\n+            max_length=255,\n+        )\n+        initial_choices_field.set_attributes_from_name(\"name\")\n+        \n+        # Modify choice values in the same field.\n+        modified_choices_field = CharField(\n+            choices=((\"Tom\", \"Thomas\"), (\"Dick\", \"Richard\")),\n+            max_length=255,\n+        )\n+        modified_choices_field.set_attributes_from_name(\"name\")\n+        \n+        # Verify no SQL is executed when modifying choice values.\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, initial_choices_field, modified_choices_field, strict=True)\n+        \n+        # Verify no SQL is executed when reverting the choice values to original.\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, modified_choices_field, initial_choices_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..94628b7 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -326,6 +326,18 @@ class LookupTests(TestCase):\n \n \n class BilateralTransformTests(TestCase):\n+    def test_lookup_cache_clearing_on_unregister(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register a custom lookup and ensure it's in the cached lookups\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+        \n+        # Unregister the custom lookup and check that it clears the cache\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+\n     def test_bilateral_upper(self):\n         with register_lookup(models.CharField, UpperBilateralTransform):\n             author1 = Author.objects.create(name=\"Doe\")\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..04861cc 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -6,6 +7,7 @@ from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n+import inspect\n from django.test import (\n     SimpleTestCase,\n     TestCase,\n@@ -724,7 +726,15 @@ class ManagerTest(SimpleTestCase):\n \n     def test_manager_methods(self):\n         \"\"\"\n-        This test ensures that the correct set of methods from `QuerySet`\n+    def test_manager_method_with_correct_signature(self):\n+        # Ensure functools.wraps is copying the signature correctly for manager methods.\n+        signature = inspect.signature(Article.objects.bulk_create)\n+        self.assertEqual(\n+            str(signature),\n+            \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\",\n+        )\n+\n+...\n         are copied onto `Manager`.\n \n         It's particularly useful to prevent accidentally leaking new methods\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..2319af2 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,8 +1,11 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n \n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n@@ -62,6 +65,16 @@ class DateTests(TimezoneTestCase):\n         self.assertEqual(output, \"\")\n \n     # #19370: Make sure |date doesn't blow up on a midnight time object\n+    def test_get_format_lazy_format(self):\n+        # Test if get_format can handle lazy strings\n+        self.assertEqual(get_format(_(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        # Test if date filter can handle lazy strings\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n+\n     @setup({\"date08\": '{{ t|date:\"H:i\" }}'})\n     def test_date08(self):\n         output = self.engine.render_to_string(\"date08\", {\"t\": time(0, 1)})\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..1d17c6b 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,16 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_with_proxy(self):\n+        custom_model = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        another_model = AnotherModel.objects.create(custom=custom_model)\n+        \n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = queryset.get()\n+        \n+        self.assertEqual(result, another_model)\n+        self.assertEqual(result.custom.name, \"Test Name\")\n+\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..f5fad43 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,48 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_with_command(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n+    def test_multiple_parameters(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-U\", \"user\", \"-h\", \"localhost\"]),\n+            ([\"psql\", \"-U\", \"user\", \"-h\", \"localhost\", \"dbname\"], None),\n+        )\n+\n+    def test_no_extra_parameters(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_with_command(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n+    def test_multiple_parameters(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-U\", \"user\", \"-h\", \"localhost\"]),\n+            ([\"psql\", \"-U\", \"user\", \"-h\", \"localhost\", \"dbname\"], None),\n+        )\n+\n+    def test_no_extra_parameters(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..5e9d192 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,8 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n",
  "django__django-15930": "",
  "django__django-15987": "",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..e8f3619 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,49 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n+    def test_annotation_and_alias_filter_related_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(pages__gt=400)\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = Publisher.objects.filter(\n+            book__in=long_books_qs,\n+        ).values(\"name\")\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"},\n+            ],\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..2d6156a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,13 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [\n+            Combinable.ADD,\n+            Combinable.SUB,\n+            Combinable.MUL,\n+            Combinable.DIV,\n+            Combinable.MOD,  # Added MOD to the list of connectors\n+        ]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..6cbb807 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError, connection, models\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,6 +403,54 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_multiple_db_errors_revert_changes(self):\n+        # Setting up objects\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+        \n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        \n+        # Case 1: First operation fails\n+        with mock.patch('django.contrib.admin.ModelAdmin.log_change', side_effect=DatabaseError):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        \n+        # Check that data is rolled back in case of error\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+        \n+        # Case 2: Second operation fails\n+        with mock.patch('django.contrib.admin.ModelAdmin.log_change', side_effect=[None, DatabaseError]):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        \n+        # Check that data is rolled back in case of error\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n     def test_custom_paginator(self):\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..3d3a8a2 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,17 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with a zero status when\n+        there are no changes to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertEqual(cm.exception.code, 0)\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..4d141e7 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+import asyncio\n+from django.test import RequestFactory\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..b20c1f0 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -25,6 +26,8 @@ from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n+import urllib.parse\n+from django.urls import reverse\n \n from .models.custom_user import (\n     CustomUser,\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..4a7efe4 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,7 +508,41 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n-# RemovedInDjango50Warning\n+from django.test import TestCase, override_settings\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from .urls.http import callable_lastmod_no_items_sitemap\n+from django.utils.decorators import method_decorator\n+\n+class TestEmptySitemapHandling(TestCase):\n+\n+    @override_settings(ROOT_URLCONF='tests.sitemaps_tests.urls.http')\n+    def test_callable_lastmod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    @override_settings(ROOT_URLCONF='tests.sitemaps_tests.urls.http')\n+    def test_callable_lastmod_with_items(self):\n+        sitemap_response = self.client.get(\"/callable-lastmod/sitemap.xml\")\n+        expected_content_sitemap = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" '\n+            'xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\\n'\n+            \"<url><loc>http://example.com/location/</loc>\"\n+            \"<lastmod>2013-03-13</lastmod></url>\"\n+            \"<url><loc>http://example.com/location/</loc>\"\n+            \"<lastmod>2014-03-13</lastmod></url>\\n\"\n+            \"</urlset>\"\n+        )\n+        self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n+\n+\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16315": "",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..441000e 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,7 +254,42 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_invalid_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        nonexistent_org_id = 9999\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(nonexistent_org_id)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), False)\n+        self.assertIn(\"orgs\", form.errors)\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "",
  "django__django-16454": "",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..962a226 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -91,7 +91,18 @@ class GetStorageClassTests(SimpleTestCase):\n             get_storage_class(\"django.core.files.storage.FileSystemStorage\"),\n \n \n+from .models import callable_default_storage, Storage\n+\n class FileSystemStorageTests(unittest.TestCase):\n+    \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n     def test_deconstruction(self):\n         path, args, kwargs = temp_storage.deconstruct()\n         self.assertEqual(path, \"django.core.files.storage.FileSystemStorage\")\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..53c4223 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,7 +1,10 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n@@ -16,7 +19,39 @@ from .tests import AdminViewBasicTestCase\n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n     request_factory = RequestFactory()\n \n-    def test_submit_row(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test the `submit_row` context for `show_save_as_new` button visibility\n+        \"\"\"\n+        # Test user with only change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta))\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Test user with add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         \"\"\"\n         submit_row template tag should pass whole context.\n         \"\"\"\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..3bba7ef 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -108,6 +108,11 @@ class BaseConstraintTests(SimpleTestCase):\n         self.assertEqual(c.get_violation_error_message(), \"custom name message\")\n \n \n+from django.core.exceptions import ValidationError\n+from django.db import models\n+from django.db.models.functions import Lower\n+from django.test import TestCase, skipUnlessDBFeature\n+\n class CheckConstraintTests(TestCase):\n     def test_eq(self):\n         check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n@@ -217,7 +222,33 @@ class CheckConstraintTests(TestCase):\n         constraints = get_constraints(ChildModel._meta.db_table)\n         self.assertIn(\"constraints_childmodel_adult\", constraints)\n \n-    def test_validate(self):\n+    def test_custom_violation_error_code_with_check_constraint(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price_gt_discounted_price\",\n+            violation_error_code=\"price_error_code\",\n+        )\n+        # Invalid product triggers custom violation error code.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"price_gt_discounted_price\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"price_error_code\")\n+\n+    def test_custom_violation_error_code_with_unique_constraint(self):\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\", \"color\"],\n+            name=\"unique_name_color\",\n+            violation_error_code=\"unique_error_code\",\n+        )\n+        non_unique_product = UniqueConstraintProduct(\n+            name=self.p1.name, color=self.p1.color\n+        )\n+        msg = \"Unique constraint product with this Name and Color already exists.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"unique_error_code\")\n         check = models.Q(price__gt=models.F(\"discounted_price\"))\n         constraint = models.CheckConstraint(check=check, name=\"price\")\n         # Invalid product.\n@@ -654,7 +685,33 @@ class UniqueConstraintTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             NoCodeErrorConstraintModel(name=\"test\").validate_constraints()\n \n-    def test_validate(self):\n+    def test_custom_violation_error_code_with_check_constraint(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price_gt_discounted_price\",\n+            violation_error_code=\"price_error_code\",\n+        )\n+        # Invalid product triggers custom violation error code.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"price_gt_discounted_price\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"price_error_code\")\n+\n+    def test_custom_violation_error_code_with_unique_constraint(self):\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\", \"color\"],\n+            name=\"unique_name_color\",\n+            violation_error_code=\"unique_error_code\",\n+        )\n+        non_unique_product = UniqueConstraintProduct(\n+            name=self.p1.name, color=self.p1.color\n+        )\n+        msg = \"Unique constraint product with this Name and Color already exists.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"unique_error_code\")\n         constraint = UniqueConstraintProduct._meta.constraints[0]\n         msg = \"Unique constraint product with this Name and Color already exists.\"\n         non_unique_product = UniqueConstraintProduct(\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..a08d822 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,21 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+    def test_empty_form_with_can_delete(self):\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+\n+        formset = MyFormSet(initial=None)\n+        empty_form = formset.empty_form\n+        self.assertIsInstance(empty_form, forms.Form)\n+        self.assertNotIn(\"DELETE\", empty_form.fields)\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..2b67461 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,12 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        for extension, mimetype in [(\".br\", \"application/x-brotli\"), (\".Z\", \"application/x-compress\")]:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..a139d1d 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,50 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_ordering_with_time(self):\n+        \"\"\"\n+        Test that a migration file with both datetime and time imports\n+        is sorted correctly.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n+\n+    def test_import_ordering_with_mock(self):\n+        \"\"\"\n+        Test that a migration file with mock import is sorted correctly.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.RunPython(migrations.RunPython.noop, migrations.RunPython.noop),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import mock\\nfrom django.db import migrations\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..435a2c5 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -328,6 +328,23 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = Person\n \n+from django.db.models import signals\n+\n+@skipIf(Image is None, \"Pillow is required to test ImageField\")\n+class ImageFieldNoSignalTests(ImageFieldTwoDimensionsTests):\n+    \"\"\"\n+    Tests that the post_init signal is not connected if no dimension fields are set.\n+    \"\"\"\n+\n+    def test_post_init_not_connected(self):\n+        \"\"\"\n+        Ensure that no post_init signals are connected when width_field and height_field are not set.\n+        \"\"\"\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..8f7dfaa 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1148,6 +1148,69 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.RenameIndex(\"Pony\", new_name=\"new_name\", old_name=\"old_name\")],\n         )\n+from django.db import migrations, models\n+\n+class TestMigrationOptimizer(TestCase):\n+    def test_add_remove_index(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+            ],\n+            [],\n+        )\n+\n+    def test_multiple_add_remove_index(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\"], name=\"idx_pony_weight\"\n+                    ),\n+                ),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\"], name=\"idx_pony_height\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight\"),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height\"),\n+            ],\n+            [],\n+        )\n+\n+    def test_add_index_not_immediately_followed_by_removal(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"age\"], name=\"idx_pony_weight_age\"\n+                    ),\n+                ),\n+                migrations.AddField(\n+                    model_name='pony',\n+                    name='color',\n+                    field=models.CharField(max_length=15),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_age\"),\n+            ],\n+            [\n+                migrations.AddField(\n+                    model_name='pony',\n+                    name='color',\n+                    field=models.CharField(max_length=15),\n+                ),\n+            ],\n+        )\n+\n         self.assertDoesNotOptimize(\n             [\n                 migrations.RenameIndex(\n@@ -1157,4 +1220,4 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..57c7de4 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -805,7 +805,23 @@ class SystemChecksTestCase(SimpleTestCase):\n             )\n         ]\n         self.assertEqual(errors, expected)\n+    \n+    def test_readonly_field_with_correct_field_name(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"nonexistent_field\",)\n \n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent_field', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+        \n     def test_nonexistent_field_on_inline(self):\n         class CityInline(admin.TabularInline):\n             model = City\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..8a92629 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -36,8 +37,23 @@ class XorLookupsTests(TestCase):\n             Number.objects.filter(~(Q(num__lte=7) ^ ~Q(num__lt=3) ^ Q(num__lte=1))),\n             self.numbers[:2] + self.numbers[3:8],\n         )\n-\n-    def test_exclude(self):\n+    \n+    def test_filter_multiple(self):\n+        # This test case is based on the incorrect behavior description\n+        qs = Number.objects.filter(\n+            Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7) ^ Q(num__gte=9)\n+        )\n+        expected_numbers = [self.numbers[1], self.numbers[2], self.numbers[5], self.numbers[6], self.numbers[9]]\n+        self.assertCountEqual(qs, expected_numbers)\n+        \n+        self.assertCountEqual(\n+            qs.values_list(\"num\", flat=True),\n+            [\n+                i\n+                for i in range(10)\n+                if (i >= 1) ^ (i >= 3) ^ (i >= 5) ^ (i >= 7) ^ (i >= 9)\n+            ],\n+        )\n         self.assertCountEqual(\n             Number.objects.exclude(Q(num__lte=7) ^ Q(num__gte=3)),\n             self.numbers[3:8],\n@@ -64,4 +80,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..0a51cac 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -167,7 +167,22 @@ class AppsTests(SimpleTestCase):\n             apps.get_app_config(\"django.contrib.auth\")\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n-    def test_is_installed(self):\n+    def test_clear_cache(self):\n+        \"\"\"\n+        Test that apps.clear_cache clears all relevant caches.\n+        \"\"\"\n+        # Set a cache value.\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+\n+        # Clear the cache.\n+        apps.clear_cache()\n+\n+        # Assert that get_swappable_settings_name cache is cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+\n+        # Assert that get_models cache is cleared\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n         \"\"\"\n         Tests apps.is_installed().\n         \"\"\"\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..e5d8676 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,7 +641,35 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n-    def test_failing_migration(self):\n+    def test_makemigrations_calls_allow_migrate_correctly(self):\n+        \"\"\"\n+        Test that makemigrations calls allow_migrate() correctly for each app with its models.\n+        \"\"\"\n+        with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+            with mock.patch('migrations.routers.TestRouter.allow_migrate', return_value=True) as allow_migrate:\n+                call_command('makemigrations', 'migrations', verbosity=0)\n+                # Check that allow_migrate is called with correct (app_label, model_name)\n+                called_models = [\n+                    mock.call('default', 'migrations', model_name='UnicodeModel'),\n+                    mock.call('other', 'migrations', model_name='UnicodeModel'),\n+                ]\n+                allow_migrate.assert_has_calls(called_models, any_order=True)\n+\n+    def test_makemigrations_does_not_call_allow_migrate_with_invalid_models(self):\n+        \"\"\"\n+        Ensure that allow_migrate is not called with invalid (app_label, model) combinations.\n+        \"\"\"\n+        with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+            with mock.patch('migrations.routers.TestRouter.allow_migrate', return_value=True) as allow_migrate:\n+                call_command('makemigrations', verbosity=0)\n+                for call_args in allow_migrate.call_args_list:\n+                    connection_alias, app_label = call_args[0]\n+                    model_name = call_args[1].get('model_name')\n+                    # Validate that the model belongs to the app\n+                    try:\n+                        apps.get_app_config(app_label).get_model(model_name)\n+                    except LookupError:\n+                        self.fail(f\"Invalid call to allow_migrate with (app_label={app_label}, model_name={model_name})\")\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..8682844 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,6 +297,48 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_iteration_complete(self):\n+        # Test a paginator with 3 items per page and a total of 7 items\n+        paginator = Paginator([1, 2, 3, 4, 5, 6, 7], 3)\n+        page_iterator = iter(paginator)\n+        expected_pages = ([1, 2, 3], [4, 5, 6], [7])\n+        for page, expected in enumerate(expected_pages, start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+        \n+    def test_paginator_iteration_empty(self):\n+        # Test a paginator with no items\n+        paginator = Paginator([], 3)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+        \n+    def test_paginator_iteration_single_page(self):\n+        # Test a paginator where items fit into exactly one page\n+        paginator = Paginator([1, 2], 2)\n+        page_iterator = iter(paginator)\n+        expected_pages = ([1, 2],)\n+        for page, expected in enumerate(expected_pages, start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+        \n+    def test_paginator_iteration_large_number_of_items(self):\n+        # Test a paginator with a large number of items\n+        items = list(range(1, 101))\n+        paginator = Paginator(items, 10)\n+        page_iterator = iter(paginator)\n+        expected_pages = [items[i:i + 10] for i in range(0, 100, 10)]\n+        for page, expected in enumerate(expected_pages, start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n \n class ModelPaginationTests(TestCase):\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..fd452e6 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,43 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Original test case to verify the issue fix\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_stacked():\n+    # Test with stacked histograms\n+    data1 = np.random.rand(10)\n+    data2 = np.random.rand(10)\n+    _, bins, _ = plt.hist([data1, data2], \"auto\", range=(0, 1), density=True, stacked=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_with_weights():\n+    # Test with the use of weights\n+    weights = np.random.rand(10)\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True, weights=weights)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_multiple_data():\n+    # Test with multiple datasets\n+    data1 = np.random.rand(10)\n+    data2 = np.random.rand(10)\n+    _, bins, _ = plt.hist([data1, data2], \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_specified_bins():\n+    # Test with range specified but explicit bin edges\n+    bins = [0, 0.25, 0.5, 0.75, 1]\n+    _, calculated_bins, _ = plt.hist(np.random.rand(10), bins=bins, range=(0, 1), density=True)\n+    assert np.array_equal(calculated_bins, bins)\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6403,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..0fac11d 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,21 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_invert_log_yscale():\n+    # Test whether inverting a log axis using its limits is fixed\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(1000, 10)\n+    assert ax.get_ylim() == (1000, 10), \"Log y-axis did not invert properly using limits\"\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1000)\n+    ax.invert_yaxis()\n+    assert ax.get_ylim() == (1000, 10), \"Log y-axis did not invert after calling invert_yaxis\"\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +953,21 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_log_yscale():\n+    # Test whether inverting a log axis using its limits is fixed\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(1000, 10)\n+    assert ax.get_ylim() == (1000, 10), \"Log y-axis did not invert properly using limits\"\n+    plt.close()\n+\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1000)\n+    ax.invert_yaxis()\n+    assert ax.get_ylim() == (1000, 10), \"Log y-axis did not invert after calling invert_yaxis\"\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..13e40ba 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,8 +6960,61 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_shared_axes_retick():\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference plot without ax.clear(), expected ticks are:\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    # Test plot with ax.clear() and then plotting\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_x_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference plot without ax.clear(), expected ticks are:\n+    axs = fig_ref.subplots(2, 1, sharex=True)\n+    for ax in axs:\n+        ax.plot(x, y)\n+\n+    # Test plot with ax.clear() and then plotting\n+    axs = fig_test.subplots(2, 1, sharex=True)\n+    for ax in axs:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_y_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference plot without ax.clear(), expected ticks are:\n+    axs = fig_ref.subplots(1, 2, sharey=True)\n+    for ax in axs:\n+        ax.plot(x, y)\n+\n+    # Test plot with ax.clear() and then plotting\n+    axs = fig_test.subplots(1, 2, sharey=True)\n+    for ax in axs:\n+        ax.clear()\n+        ax.plot(x, y)\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..95047c6 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,36 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted. See #22640.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    ax.plot([], [])\n+\n+def test_no_conversion_error_on_empty_data():\n+    \"\"\"\n+    Test that no ConversionError is raised when empty data is passed.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    import pytest\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    try:\n+        ax.plot([], [])\n+    except Exception as e:\n+        pytest.fail(f\"Unexpected error occurred: {e}\")\n+\n+def test_conversion_function_with_empty_list():\n+    \"\"\"\n+    Test the conversion function directly with an empty list.\n+    \"\"\"\n+    from matplotlib.category import StrCategoryConverter\n+    converter = StrCategoryConverter()\n+    unit = {0: \"a\", 1: \"b\"}  # Mock unit mapping\n+    converted_values = converter.convert([], unit, None)\n+    assert len(converted_values) == 0, \"Conversion of empty list failed unexpectedly.\"\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..9a0fb6a 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,6 +15,7 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n \n \n mpl3d_image_comparison = functools.partial(\n@@ -28,6 +29,17 @@ def test_aspect_equal_error():\n         ax.set_aspect('equal')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d(fig_test, fig_ref):\n+    # Create a 3D subplot in the test figure and make it invisible\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n+    \n+    # Create a 3D subplot in the reference figure without any data\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    # Do not add data or modify its visibility\n+    \n @mpl3d_image_comparison(['bar3d.png'])\n def test_bar3d():\n     fig = plt.figure()\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..8d69789 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,8 +148,33 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+from matplotlib import pyplot as plt\n+from matplotlib.patches import Rectangle\n+import pytest\n \n-def test_negative_rect():\n+@pytest.mark.parametrize(\"offset, expected_offset\", [\n+    ((0, [10, 10]), 0),\n+    ((10, [10, 10]), 10),\n+])\n+def test_dash_offset_rectangle(offset, expected_offset):\n+    fig, ax = plt.subplots()\n+    rect = Rectangle((0.1, 0.1), 0.8, 0.8, linewidth=3, edgecolor='b', linestyle=offset)\n+    ax.add_patch(rect)\n+    assert rect.get_linestyle()[0] == expected_offset\n+    plt.close(fig)\n+\n+\n+@pytest.mark.parametrize(\"offset, expected_offset\", [\n+    ((0, [5, 5]), 0),\n+    ((5, [5, 5]), 5),\n+    ((2, [3, 2]), 2),\n+])\n+def test_dash_offset_ellipse(offset, expected_offset):\n+    fig, ax = plt.subplots()\n+    ellipse = Rectangle((0.2, 0.2), 0.5, 0.5, linewidth=2, edgecolor='g', linestyle=offset) # Using Rectangle for testing; replace with Ellipse for actual use\n+    ax.add_patch(ellipse)\n+    assert ellipse.get_linestyle()[0] == expected_offset\n+    plt.close(fig)\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n     pos_vertices = Rectangle((-3, -2), 3, 2).get_verts()[:-1]\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..ccd33e4 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,35 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.patches import Rectangle\n+\n+def test_stackplot_color_cycler_and_aliases():\n+    \"\"\"\n+    Test that stackplot does not affect the Axes color cycler and can correctly\n+    handle color aliases such as 'C0', 'C1', etc.\n+    \"\"\"\n+    # Prepare the data\n+    x = np.array([1, 2, 3])\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+    # Create a figure and axis\n+    fig, ax = plt.subplots()\n+\n+    # Plot a line and a rectangle using color cyler aliases\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+\n+    # Use stackplot with color aliases\n+    ax.stackplot(x, my_data, colors=['C2', 'C3', 'C4'])\n+\n+    # Check that the color cycler has not been altered\n+    line_colors = [line.get_color() for line in ax.get_lines()]\n+    assert line_colors == ['C0'], f\"Expected line color 'C0', got {line_colors}\"\n+\n+    # Ensure no exceptions are raised\n+    plt.close(fig)\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..d70feea 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -4,6 +4,7 @@ import io\n import numpy as np\n from numpy.testing import assert_allclose\n import pytest\n+from matplotlib.offsetbox import HPacker, VPacker, DrawingArea\n \n from matplotlib.testing.decorators import image_comparison\n import matplotlib.pyplot as plt\n",
  "matplotlib__matplotlib-24627": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 35bc6ec..7f9d577 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -8365,6 +8365,56 @@ def test_extent_units():\n     axs[1, 1].xaxis.set_major_formatter(mdates.DateFormatter('%d'))\n     axs[1, 1].set(xlabel='Day of Jan 2020')\n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_cla_clears_children_axes_and_fig():\n+    fig, ax = plt.subplots()\n+    lines = ax.plot([], [], [], [])\n+    img = ax.imshow([[1]])\n+    for art in lines + [img]:\n+        assert art.axes is ax\n+        assert art.figure is fig\n+    ax.clear()  # Same as ax.cla()\n+    for art in lines + [img]:\n+        assert art.axes is None\n+        assert art.figure is None\n+\n+def test_clf_clears_children_axes_and_fig():\n+    fig, ax = plt.subplots()\n+    lines = ax.plot([], [], [], [])\n+    img = ax.imshow([[1]])\n+    for art in lines + [img]:\n+        assert art.axes is ax\n+        assert art.figure is fig\n+    fig.clf()  # Clear the entire figure\n+    for art in lines + [img]:\n+        assert art.axes is None\n+        assert art.figure is None\n+\n+def test_remove_then_cla():\n+    fig, ax = plt.subplots()\n+    line, = ax.plot([1, 2])\n+    line.remove()\n+    assert line.axes is None\n+    assert line.figure is fig  # Figure remains as is\n+    ax.cla()\n+    assert line.axes is None\n+    assert line.figure is fig  # Figure remains as is\n+\n+def test_readd_after_cla():\n+    fig, ax = plt.subplots()\n+    line, = ax.plot([1, 2])\n+    ax.cla()\n+    ax.plot([3, 4])  # Re-add a new line to the cleared axes\n+    assert line.axes is None\n+    assert line.figure is None\n+\n+def test_axes_clear_no_error():\n+    fig, ax = plt.subplots()\n+    ax.clear()\n+    ax.plot([5, 6])  # Should work without error after clear\n+\n     with pytest.raises(ValueError,\n                        match=\"set_extent did not consume all of the kwargs\"):\n         im.set_extent([2, 12, date_first, date_last], clip=False)\n",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..a1e9007 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,9 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import pytest\n+import matplotlib.pyplot as plt\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..574a204 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -9,6 +10,8 @@ import matplotlib as mpl\n from matplotlib import cm\n from matplotlib.testing import subprocess_run_helper\n from matplotlib.testing.decorators import check_figures_equal\n+from io import BytesIO\n+import pickletools\n from matplotlib.dates import rrulewrapper\n from matplotlib.lines import VertexSelector\n import matplotlib.pyplot as plt\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..48b3254 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -42,9 +42,32 @@ def test_simple():\n     plt.plot(np.arange(10))\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pickle\n+from io import BytesIO\n \n-\n-def _generate_complete_test_figure(fig_ref):\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # This was causing our issue\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle.dumps(fig)\n+        print(\"Pickle successful\")\n+    except TypeError as e:\n+        print(f\"Error during pickling: {e}\")\n+        assert False, \"Pickling failed for figure with aligned labels.\"\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..486d285 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,6 +991,85 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # A test for consistent behavior when using mincnt with and without C parameter\n+    datapoints = [\n+        # list of (x, y) coordinates\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)  # C values to be the same as X length\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter, using mincnt=1\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter, using mincnt=1\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_zero(fig_test, fig_ref):\n+    # Test mincnt=0 with and without C parameter to ensure proper behavior\n+\n+    datapoints = [\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter, using mincnt=0\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=0,\n+    )\n+    ax_ref.set_facecolor(\"green\")\n+\n+    # with C parameter, using mincnt=0\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n \n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..6709357 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,24 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Create initial contour plots\n+    z_test = [[0, 1], [1, 2]]\n+    z_ref = [[1, 0], [2, 1]]\n+    \n+    cs_test = ax_test.contour(z_test)\n+    cs_ref = ax_ref.contour(z_ref)\n+\n+    # Swap paths using the set_paths method and compare results\n+    cs_test.set_paths(cs_ref.get_paths())\n+    # The two figures should be the same\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..5a3f5fc 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,23 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_non_empty_name_allowed(app, client):\n+    try:\n+        bp = flask.Blueprint(\"valid_name\", __name__)\n+    except ValueError:\n+        pytest.fail(\"ValueError raised for a valid blueprint name\")\n+\n+def test_none_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(None, __name__)\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..1b2ad10 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,12 +81,24 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n             requests.get(url)\n \n-    def test_basic_building(self):\n+    @pytest.mark.parametrize(\n+        'url', (\n+            'http://..example.com',\n+            'http://example..com',\n+            'http://-.example.com',\n+            'http://example.com-',\n+            'http://example.com..',\n+            (InvalidURL, 'http://.example.com'),\n+        ))\n+    def test_various_invalid_urls(self, url):\n+        with pytest.raises(InvalidURL):\n+            requests.get(url)\n         req = requests.Request()\n         req.url = 'http://kennethreitz.org/'\n         req.data = {'life': '42'}\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..e0cb8cf 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,24 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_setitem_with_has_values():\n+    import xarray as xr\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    class HasValues:\n+        values = 5\n+\n+    good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])\n+\n+    # Test storing an object with 'values' property\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Verify that good_indexed correctly stores the set object\n+    assert good_indexed.values[0] == set()\n+\n+    # Verify that bad_indexed stores the HasValues instance, not its 'values' property\n+    assert isinstance(bad_indexed.values[0], HasValues)\n+    assert bad_indexed.values[0].values == 5\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 274cb25..2a31380 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -3479,8 +3479,12 @@ class TestDataArray:\n         assert_identical(da_cp['a'], expected_cp)\n \n         assert_identical(da['a'], expected_orig)\n-\n-    def test_real_and_imag(self):\n+    @pytest.mark.parametrize('deep', [True, False])\n+    def test_dataarray_copy_unicode_dtype(self, deep):\n+        dataarray = xr.DataArray([1, 2, 3], dims=\"x\", coords={\"x\": [\"foo\", \"bar\", \"baz\"]})\n+        copied = dataarray.copy(deep=deep)\n+        assert dataarray.x.dtype == copied.x.dtype\n+        assert dataarray.x.dtype.kind == 'U'\n         array = DataArray(1 + 2j)\n         assert_identical(array.real, DataArray(1))\n         assert_identical(array.imag, DataArray(2))\n",
  "pydata__xarray-3151": "",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..ea165a4 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,7 +2310,28 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        \n+        # Test keep_attrs=True\n+        out = da.quantile(0.9, dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}\n+        \n+        # Test keep_attrs=False\n+        out = da.quantile(0.9, dim='x', keep_attrs=False)\n+        assert out.attrs == {}\n+        \n+        # Test without specifying keep_attrs (should default to False)\n+        out = da.quantile(0.9, dim='x')\n+        assert out.attrs == {}\n+\n+        # Extended test: Multi-dimensional DataArray\n+        da_multi = xr.DataArray([[0, 1], [2, 3]], dims=(\"x\", \"y\"), attrs={'description': 'test'})\n+        out_multi = da_multi.quantile(0.5, dim=\"x\", keep_attrs=True)\n+        assert out_multi.attrs == {'description': 'test'}\n+        out_multi = da_multi.quantile(0.5, dim=\"x\", keep_attrs=False)\n+        assert out_multi.attrs == {}\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..4b1b0de 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,8 +1,10 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -159,6 +161,29 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Ensure that merging a Dataset with a DataArray does not raise an error\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(expected, actual)\n+\n+        # Test merging with more complex DataArray\n+        da = xr.DataArray(data=[1, 2, 3], dims=\"x\", name=\"c\")\n+        expected = xr.merge([ds, da])\n+        ds[\"x\"] = [0, 1, 2]\n+        actual = ds.merge(da)\n+        assert_identical(expected, actual)\n+\n+        # Test the case where the DataArray has a different coordinate\n+        da = xr.DataArray(data=[4, 5, 6], dims=\"y\", name=\"d\")\n+        ds[\"y\"] = [0, 1, 2]\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(expected, actual)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..66c5690 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -594,8 +594,39 @@ def test_min_count(dim_num, dtype, dask, func, aggdim):\n     assert_allclose(actual, expected)\n     assert_dask_array(actual, dask)\n \n+import numpy as np\n+import pytest\n+from xarray import DataArray, Dataset\n+from xarray.tests import assert_allclose, assert_dask_array, has_dask, construct_dataarray\n+import xarray.core.dtypes as dtypes\n \n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_nd(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    min_count = 3\n+    dim_num = 3\n+    da = construct_dataarray(dim_num, dtype, contains_nan=True, dask=dask)\n+    actual = getattr(da, func)(dim=[\"x\", \"y\", \"z\"], skipna=True, min_count=min_count)\n+    # Supplying all dims is equivalent to supplying `...` or `None`\n+    expected = getattr(da, func)(dim=..., skipna=True, min_count=min_count)\n+\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n+\n+\n+@pytest.mark.parametrize(\"skipna\", [False, True])\n+def test_multiple_dims(dtype, dask, skipna, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+\n+    actual = getattr(da, func)((\"x\", \"y\"), skipna=skipna)\n+    expected = getattr(getattr(da, func)(\"x\", skipna=skipna), func)(\"y\", skipna=skipna)\n+    assert_allclose(actual, expected)\n def test_min_count_dataset(func):\n     da = construct_dataarray(2, dtype=float, contains_nan=True, dask=False)\n     ds = Dataset({\"var1\": da}, coords={\"scalar\": 0})\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..a566379 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -114,11 +114,69 @@ class TestMergeFunction:\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0, \"y\": 1})\n+        ds2 = xr.Dataset(attrs={\"x\": 1, \"z\": 2})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Modify ds3 attrs and check that ds1 and ds2 remain unchanged\n+        ds3.attrs[\"x\"] = 10\n+        ds3.attrs[\"y\"] = 11\n+        ds3.attrs[\"z\"] = 12\n+        \n+        assert ds1.attrs == {\"x\": 0, \"y\": 1}\n+        assert ds2.attrs == {\"x\": 1, \"z\": 2}\n+        assert ds3.attrs == {\"x\": 10, \"y\": 11, \"z\": 12}\n+\n+    def test_merge_attrs_override_no_side_effects(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"original_a\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"override_a\", \"b\": \"b_value\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Check that ds3 attrs are initialized correctly\n+        assert ds3.attrs == {\"a\": \"original_a\", \"b\": \"b_value\"}\n+        \n+        # Modify ds3 attrs\n+        ds3.attrs[\"a\"] = \"modified_a\"\n+        \n+        # Ensure original datasets are unaffected\n+        assert ds1.attrs == {\"a\": \"original_a\"}\n+        assert ds2.attrs == {\"a\": \"override_a\", \"b\": \"b_value\"}\n+\n     def test_merge_dicts_dims(self):\n         actual = xr.merge([{\"y\": (\"x\", [13])}, {\"x\": [12]}])\n         expected = xr.Dataset({\"x\": [12], \"y\": (\"x\", [13])})\n         assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0, \"y\": 1})\n+        ds2 = xr.Dataset(attrs={\"x\": 1, \"z\": 2})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Modify ds3 attrs and check that ds1 and ds2 remain unchanged\n+        ds3.attrs[\"x\"] = 10\n+        ds3.attrs[\"y\"] = 11\n+        ds3.attrs[\"z\"] = 12\n+        \n+        assert ds1.attrs == {\"x\": 0, \"y\": 1}\n+        assert ds2.attrs == {\"x\": 1, \"z\": 2}\n+        assert ds3.attrs == {\"x\": 10, \"y\": 11, \"z\": 12}\n+\n+    def test_merge_attrs_override_no_side_effects(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"original_a\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"override_a\", \"b\": \"b_value\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Check that ds3 attrs are initialized correctly\n+        assert ds3.attrs == {\"a\": \"original_a\", \"b\": \"b_value\"}\n+        \n+        # Modify ds3 attrs\n+        ds3.attrs[\"a\"] = \"modified_a\"\n+        \n+        # Ensure original datasets are unaffected\n+        assert ds1.attrs == {\"a\": \"original_a\"}\n+        assert ds2.attrs == {\"a\": \"override_a\", \"b\": \"b_value\"}\n+\n     def test_merge_error(self):\n         ds = xr.Dataset({\"x\": 0})\n         with pytest.raises(xr.MergeError):\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..9058b8a 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1915,6 +1915,23 @@ def test_dot_align_coords(use_dask) -> None:\n         xr.testing.assert_allclose(expected, actual)\n \n \n+def test_where_preserves_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\")\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+\n+def test_where_dtype_preserved() -> None:\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+    data.attrs[\"attr_1\"] = \"test1\"\n+    data.attrs[\"attr_2\"] = \"test2\"\n+    result = xr.where(data == 1, 5, 0)\n+    assert result.dtype == np.int8\n+\n+\n def test_where() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\")\n     actual = xr.where(cond, 1, 0)\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..da78cdb 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -7,6 +7,7 @@ import pytest\n import xarray as xr\n from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n+import numpy as np\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n \n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..5f36b03 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1920,7 +1920,31 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n-def test_where_attrs() -> None:\n+def test_where_with_scalar_keep_attrs() -> None:\n+    # Test with scalar `x` and `y`, with `keep_attrs=True`\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x_scalar = 1\n+    y_scalar = 0\n+    actual = xr.where(cond, x_scalar, y_scalar, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")  # Scalars don't have attrs\n+    assert_identical(expected, actual)\n+\n+    # Test with scalar `x`, DataArray `y` and `keep_attrs=True`\n+    y_data_array = xr.DataArray([0, 0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x_scalar, y_data_array, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"y\"})\n+    assert_identical(expected, actual)\n+\n+    # Test with DataArray `x`, scalar `y` and `keep_attrs=True`\n+    x_data_array = xr.DataArray([1, 1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    actual = xr.where(cond, x_data_array, y_scalar, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test with scalar `x`, scalar `y` and `keep_attrs=False`\n+    actual = xr.where(cond, x_scalar, y_scalar, keep_attrs=False)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n     y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..381ab8f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,14 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..5891ac7 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,6 +221,16 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # Regression test for issue with accessing chunks on zarr backed xarray\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = xr.open_dataset(url, engine='zarr')\n+        \n+        # We expect that simply accessing ds.chunks will not load the data\n+        with pytest.raises(KeyError):\n+            # Trying to access 'unknown_key' for ensuring no side-effects have loaded data\n+            _ = ds.chunks['unknown_key']\n+\n     def test_repr(self) -> None:\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..791fc5f 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -50,7 +50,19 @@ class TestDataArrayRolling:\n                 )\n \n     @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n-    def test_rolling_repr(self, da) -> None:\n+    @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"size\", [3, 5])\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    def test_rolling_iter_with_center(self, da, size, center) -> None:\n+        rolling_obj = da.rolling(time=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        manual_means = [window.mean(\"time\") for _, window in rolling_obj]\n+\n+        # Convert list of DataArrays to a single DataArray for comparison\n+        manual_means_da = xr.concat(manual_means, dim=\"time\")\n+\n+        assert_identical(manual_means_da, rolling_obj_mean)\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n         rolling_obj = da.rolling(time=7, center=True)\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..6cad460 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -493,12 +493,40 @@ def test_get_map_data() -> None:\n             sim.append_stream(source_fname, stream)\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n-\n-    assert len(expected_linelists) == len(data)\n+import sys\n+from io import StringIO\n+import pytest\n+from contextlib import redirect_stdout\n+from pylint.checkers.similar import Run\n+\n+...\n+\n+def test_set_min_similarity_lines_to_zero_no_duplicates() -> None:\n+    \"\"\"Test that setting min-similarity-lines to 0 disables duplicate checks.\"\"\"\n+    # Simulate similar files' content\n+    file_content_1 = \"def foo():\\n    pass\\n\"\n+    file_content_2 = \"def bar():\\n    pass\\n\"\n+\n+    # Create temporary files for testing\n+    with open(\"temp_similar1.py\", \"w\") as file1, open(\"temp_similar2.py\", \"w\") as file2:\n+        file1.write(file_content_1)\n+        file2.write(file_content_2)\n+\n+    try:\n+        output = StringIO()\n+        with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+            Run([\"--duplicates=0\", \"temp_similar1.py\", \"temp_similar2.py\"])\n+        assert ex.value.code == 0\n+        assert output.getvalue() == \"\"\n+    finally:\n+        # Cleanup temporary files\n+        import os\n+        os.remove(\"temp_similar1.py\")\n+        os.remove(\"temp_similar2.py\")\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..6f67f47 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,34 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint import Run\n+import pytest\n+from _pytest.capture import CaptureFixture\n+\n+def test_short_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag without requiring an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+    assert \"Some verbose output expected\" in output.out  # Replace with actual expected output\n+\n+def test_long_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure the long verbose option also works correctly without an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+    assert \"Some verbose output expected\" in output.out  # Replace with actual expected output\n+\n+def test_verbose_argument_error(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure providing an argument to the verbose option returns an error.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\", \"unexpected_arg\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"argument --verbose/-v: expected no argument\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..36ea381 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,7 +1233,74 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n-    def test_recursive(self):\n+    def test_ignore_recursive(self):\n+        \"\"\"Tests recursive run of linter ignoring directory using --ignore parameter.\n+        \n+        Ensures ignored directories or files are not linted.\n+        \"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=failing.py\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_ignore_pattern_recursive(self):\n+        \"\"\"Tests recursive run of linter ignoring directory using --ignore-patterns parameter.\n+        \n+        Ensures directories or files matching the pattern are not linted.\n+        \"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=ignored_.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_ignore_path_recursive(self):\n+        \"\"\"Tests recursive run of linter ignoring directory using --ignore-paths parameter.\n+        \n+        Ensures directories or files matching the path pattern are not linted.\n+        \"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*ignored.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*failing.*\",\n+            ],\n+            code=0,\n+        )\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n             code=0,\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..38affb8 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,47 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_path_recursive_with_config(self) -> None:\n+        \"\"\"Tests that the --recursive=y respects ignore-paths in pyproject.toml\"\"\"\n+        with _test_sys_path():\n+            # Ensuring no unwanted sys.path interference\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+                \n+    def test_ignore_path_recursive_absolute_path(self) -> None:\n+        \"\"\"Tests that the --recursive=y respects ignore-paths with absolute paths\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Move to a directory that contains the ignored subdirectory\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                # Assume 'ignored_subdirectory' exists in this directory structure\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths={}/ignored_subdirectory/.*\".format(os.getcwd()),\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..c39310f 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -751,22 +751,98 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n             \"/usr/local/lib/python3.9/lib-dynload\",\n             \"/usr/local/lib/python3.9/site-packages\",\n         ]\n+        import os\n+        import sys\n+        from copy import copy\n+        from unittest.mock import patch\n+        from pylint import modify_sys_path\n+        from contextlib import contextmanager\n+\n+        @contextmanager\n+        def _test_sys_path():\n+            original_sys_path = sys.path[:]\n+            try:\n+                yield\n+            finally:\n+                sys.path = original_sys_path\n+\n+        @contextmanager\n+        def _test_environ_pythonpath(pythonpath=None):\n+            original_pythonpath = os.environ.get('PYTHONPATH')\n+            if pythonpath is not None:\n+                os.environ['PYTHONPATH'] = pythonpath\n+            try:\n+                yield\n+            finally:\n+                if original_pythonpath is None:\n+                    os.environ.pop('PYTHONPATH', None)\n+                else:\n+                    os.environ['PYTHONPATH'] = original_pythonpath\n+\n         with _test_sys_path(), patch(\"os.getcwd\") as mock_getcwd:\n             mock_getcwd.return_value = cwd\n             paths = [cwd, *default_paths]\n+            # Test case for empty string as first entry in sys.path\n+            sys.path = copy(paths)\n+\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            # Test case for '.' as first entry in sys.path\n+            paths = [\".\", *default_paths]\n             sys.path = copy(paths)\n+\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            # Test case for os.getcwd() as first entry in sys.path\n+            paths = [cwd, *default_paths]\n             with _test_environ_pythonpath():\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n             paths = [cwd, cwd, *default_paths]\n+            # Test case for empty string as first entry in sys.path\n+            sys.path = copy(paths)\n+\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            # Test case for '.' as first entry in sys.path\n+            paths = [\".\", *default_paths]\n             sys.path = copy(paths)\n+\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            # Test case for os.getcwd() as first entry in sys.path\n+            paths = [cwd, *default_paths]\n             with _test_environ_pythonpath(\".\"):\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n             paths = [cwd, \"/custom_pythonpath\", *default_paths]\n+            # Test case for empty string as first entry in sys.path\n+            sys.path = copy(paths)\n+\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            # Test case for '.' as first entry in sys.path\n+            paths = [\".\", *default_paths]\n             sys.path = copy(paths)\n+\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            # Test case for os.getcwd() as first entry in sys.path\n+            paths = [cwd, *default_paths]\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..955bde2 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -159,8 +159,15 @@ def logging_during_setup_and_teardown(caplog):\n     logger.info(\"a_teardown_log\")\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n+def test_caplog_get_records_and_clear_behaviour(caplog):\n+    def verify_consistency() -> None:\n+        assert caplog.get_records(\"call\") == caplog.records\n \n-def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n+    verify_consistency()\n+    logging.warning(\"test\")\n+    verify_consistency()\n+    caplog.clear()\n+    verify_consistency()  # This should pass if the issue is resolved\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n     logger.info(\"a_call_log\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..a336735 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1273,6 +1273,31 @@ def test_pdb_teardown_skipped(\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+    # Additional test for decorators that use unittest.skipIf\n+    tracked_skip_if: List[str] = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked_skip_if, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skipIf(True, reason=\"skipped due to condition\")\n+        class AnotherTestCase(unittest.TestCase):\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_2(self):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked_skip_if == []\n+\n \n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n",
  "pytest-dev__pytest-5262": "",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..0b38ba7 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,7 +178,24 @@ class TestMockDecoration:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n-    def test_mock(self, testdir):\n+    def test_mock_sentinel_with_numpy_array(self, testdir):\n+        \"\"\"\n+        Test to ensure that patching with a numpy array as new value\n+        does not raise a ValueError during test collection.\n+        \"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            from unittest.mock import patch\n+            import numpy as np\n+\n+            class TestArrayPatch:\n+                @patch('target.FOO', new=np.array([-5.5, 3.0]))\n+                def test_array_patch(self):\n+                    assert True  # Simple assertion to ensure test runs\n+            \"\"\"\n+        )\n+        result = testdir.runpytest()\n+        result.assert_outcomes(passed=1)\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..e61e1ad 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,7 +116,6 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n-\n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n \n@@ -126,8 +125,33 @@ class TestPaste(object):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=full-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n+    def test_paste_with_python3_lexer_raises_error(self, pastebin, mocked_urlopen):\n+        # Test case to check that using 'python3' as lexer raises HTTP error, assuming `mocked_urlopen` is set to raise it\n+        def raising_mock(*args, **kwargs):\n+            from urllib.error import HTTPError\n+            raise HTTPError(*args, **kwargs)\n+\n+        mocked_urlopen.clear()\n+        mocked_urlopen.append(raising_mock)\n+\n+        try:\n+            pastebin.create_new_paste(b\"class Test:\\n    pass\")\n+            assert False, \"Expected HTTPError to be raised\"\n+        except Exception as exc:\n+            from urllib.error import HTTPError\n+            assert isinstance(exc, HTTPError)\n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n         lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "",
  "pytest-dev__pytest-7205": "",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..9ffabd9 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -230,11 +230,111 @@ class TestXFail:\n                 pytest.xfail(\"hello\")\n         \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: skip with reason\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: skip with reason\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_with_reason_and_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"skip with reason\")\n+            def test_skip_with_reason() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n         result = testdir.runpytest(\"--runxfail\")\n         result.stdout.fnmatch_lines(\n             [\"*def test_func():*\", \"*assert 0*\", \"*1 failed*1 pass*\"]\n         )\n \n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: skip with reason\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: skip with reason\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_with_reason_and_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"skip with reason\")\n+            def test_skip_with_reason() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n     def test_xfail_evalfalse_but_fails(self, testdir):\n         item = testdir.getitem(\n             \"\"\"\n@@ -244,6 +344,56 @@ class TestXFail:\n                 assert 0\n         \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: skip with reason\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: skip with reason\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_with_reason_and_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"skip with reason\")\n+            def test_skip_with_reason() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n         reports = runtestprotocol(item, log=False)\n         callreport = reports[1]\n         assert callreport.failed\n@@ -592,6 +742,56 @@ class TestSkip:\n                 pass\n         \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: skip with reason\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: skip with reason\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_with_reason_and_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"skip with reason\")\n+            def test_skip_with_reason() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*testing stuff*\", \"*1 skipped*\"])\n \n@@ -604,6 +804,56 @@ class TestSkip:\n                 pass\n         \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: skip with reason\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: skip with reason\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_with_reason_and_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"skip with reason\")\n+            def test_skip_with_reason() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n@@ -616,6 +866,56 @@ class TestSkip:\n                 pass\n         \"\"\"\n         )\n+\n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: skip with reason\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: skip with reason\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_with_reason_and_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"skip with reason\")\n+            def test_skip_with_reason() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*for lolz*\", \"*1 skipped*\"])\n \n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..947c391 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -397,7 +398,31 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n-    def test_dynamic_xfail_no_run(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Test when dynamically adding xfail marker during runtest that fails.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Test when dynamically adding xfail marker during runtest that passes with strict=True.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                assert 1\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..a39d145 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,7 +513,18 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n+import pytest\n+\n+@pytest.mark.parametrize(\"newline\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+def test_capfd_preserves_newlines(capfd, newline):\n+    print(\"test\", end=newline)\n+    out, err = capfd.readouterr()\n+    assert out.endswith(newline)\n \n+def test_capfd_mixed_line_endings(capfd):\n+    print(\"Line1\\rLine2\\nLine3\\r\\n\", end=\"\")\n+    out, err = capfd.readouterr()\n+    assert out == \"Line1\\rLine2\\nLine3\\r\\n\"\n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..29c750d 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,6 +1,35 @@\n+\n import logging\n \n import pytest\n+def test_change_level_undos_handler_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\n+\n+    Issue #7569. Tests the handler level specifically.\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n+from _pytest.pytester import Testdir\n+\n from _pytest.logging import caplog_records_key\n \n logger = logging.getLogger(__name__)\n@@ -50,7 +79,25 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n-def test_with_statement(caplog):\n+def test_change_level_with_different_loggers(testdir: Testdir) -> None:\n+    \"\"\"Ensure that setting different loggers returns their levels post-test.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            caplog.set_level(logging.INFO, logger='logger1')\n+            caplog.set_level(logging.WARNING, logger='logger2')\n+\n+        def test2(caplog):\n+            logger1 = logging.getLogger('logger1')\n+            logger2 = logging.getLogger('logger2')\n+            assert logger1.level == logging.NOTSET\n+            assert logger2.level == logging.NOTSET\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..c3740a8 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..0d4811c 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -302,6 +302,38 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec.assertoutcome(passed=3)\n \n \n+import pytest\n+from _pytest.pytester import Pytester\n+\n+def test_unittest_setUpClass_fixture_privacy(pytester: Pytester) -> None:\n+    test_module = pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        \n+        class TestExample(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+\n+            def test_sample(self):\n+                pass\n+        \"\"\"\n+    )\n+    \n+    # Run without -v and check for fixture privacy\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_TestExample*\")\n+\n+    # Run with -v and check if fixture is displayed\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\"*_pytest/unittest.py*unittest_setUpClass_fixture_TestExample*\")\n+\n def test_setup_class(pytester: Pytester) -> None:\n     testpath = pytester.makepyfile(\n         \"\"\"\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..f422d66 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,6 +573,31 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+from sklearn.linear_model import RidgeClassifierCV\n+from numpy.testing import assert_equal\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    rng = np.random.RandomState(42)\n+    \n+    # Test with a single target\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Test with multiple targets\n+    y_multi = np.array([[1, 1, 1, -1, -1],\n+                        [1, -1, 1, -1, 1],\n+                        [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y_multi.shape[1]\n+    r.fit(x, y_multi)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n \n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..e28cd6c 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,24 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+import numpy as np\n+from sklearn.metrics import fowlkes_mallows_score\n+from sklearn.utils.testing import assert_all_finite\n+\n+def test_large_values_fowlkes_mallows_score():\n+    # Test for overflow in fowlkes_mallows_score with large values\n+    # Create large cluster sizes with sufficient samples\n+    labels_true = np.array([0] * (2**16) + [1] * (2**16))\n+    labels_pred = np.array([0] * (2**16) + [1] * (2**16))\n+    \n+    # This should not produce a runtime warning and the result should be finite\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n+\n+    # Test with slightly different predictions\n+    labels_pred = np.array([0] * (2**15) + [1] * (2**15) + [0] * (2**15) + [1] * (2**15))\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..9be2a1a 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,16 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+def test_get_feature_names_with_custom_vocabulary():\n+    # Define a custom vocabulary\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    \n+    # Initialize CountVectorizer with vocabulary\n+    cv = CountVectorizer(vocabulary=vocab)\n+    \n+    # Check that no error is raised and feature names are correctly returned\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(feature_names, vocab)\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..d38c18e 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1167,11 +1167,21 @@ def test_search_cv_timing():\n             assert_true(np.all(search.cv_results_[key] >= 0))\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+        # New test cases for refit_time_\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n+\n         for key in ['mean_score_time', 'std_score_time']:\n             assert_true(search.cv_results_[key][1] >= 0)\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+        # New test cases for refit_time_\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n+\n \n def test_grid_search_correct_score_results():\n     # test that correct scores are used\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..bc22b14 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -17,6 +17,35 @@ from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_greater\n from sklearn.utils.testing import assert_raise_message\n from sklearn.utils.testing import assert_raises\n+@pytest.mark.parametrize('scoring', ['neg_log_loss'])\n+def test_logistic_cv_multinomial_neg_log_loss(scoring):\n+    # Test that LogisticRegressionCV with multi_class='multinomial'\n+    # computes the neg_log_loss correctly using multinomial approach\n+    X, y = make_classification(n_samples=100, n_features=5, n_classes=3, random_state=0, n_informative=4)\n+\n+    # Split data into train and test\n+    train, test = np.arange(70), np.arange(70, 100)\n+\n+    # Initialize LogisticRegression using multinomial\n+    lr_multinomial = LogisticRegressionCV(\n+        multi_class='multinomial',\n+        solver='lbfgs',\n+        scoring=scoring,\n+        random_state=0\n+    )\n+    lr_multinomial.fit(X[train], y[train])\n+\n+    # Use predict_proba and log_loss directly to get the expected log loss\n+    probs = lr_multinomial.predict_proba(X[test])\n+    expected_loss = log_loss(y[test], probs)\n+\n+    # Validate that the scored neg_log_loss from CV matches the expected_loss\n+    cv_score = np.mean(lr_multinomial.scores_[1])\n+    assert np.isclose(-expected_loss, cv_score), (\n+        \"Mismatch between expected log loss and CV score,\"\n+        \"expected log loss: {}, CV score: {}\".format(expected_loss, cv_score)\n+    )\n+\n from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..ade584d 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,6 +154,29 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n+from sklearn.preprocessing import StandardScaler\n+from sklearn.base import clone\n+from sklearn.utils.estimator_checks import check_estimator\n+\n+class MyEstimator:\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+\n+    def get_params(self, deep=True):\n+        return {'empty': self.empty}\n+\n+    def set_params(self, **params):\n+        for key, value in params.items():\n+            setattr(self, key, value)\n+        return self\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    clf = MyEstimator(empty=StandardScaler)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n+\n def test_clone_sparse_matrices():\n     sparse_matrix_classes = [\n         getattr(sp, name)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..5e7879e 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -19,6 +19,8 @@ from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n from sklearn.linear_model.least_angle import _lars_path_residues\n+import numpy as np\n+from sklearn.linear_model.least_angle import LassoLarsIC\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..568cd61 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -480,8 +480,35 @@ def test_shuffle_kfold_stratifiedkfold_reproducibility():\n                 with pytest.raises(AssertionError):\n                     np.testing.assert_array_equal(test_a, test_b)\n \n+import numpy as np\n+import pytest\n+from sklearn.model_selection import StratifiedKFold\n+\n+def test_issue_13124_stratifiedkfold_shuffling():\n+    # Reproduces test for issue #13124\n+    # Ensure that we shuffle each class's samples with different random_state in StratifiedKFold\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    # Two different StratifiedKFold with the same n_splits but different random_state\n+    kf1 = StratifiedKFold(n_splits=10, shuffle=True, random_state=0)\n+    kf2 = StratifiedKFold(n_splits=10, shuffle=True, random_state=1)\n+\n+    test_indices_1 = sorted([tuple(indices) for _, indices in kf1.split(X, y)])\n+    test_indices_2 = sorted([tuple(indices) for _, indices in kf2.split(X, y)])\n+\n+    # Assert that different random states lead to different test set splits\n+    assert test_indices_1 != test_indices_2\n+\n+    # Check that shuffling within class also happens by checking individual class indices\n+    class0_indices_1 = [set(X[idx] for idx in indices if y[idx] == 0) for _, indices in kf1.split(X, y)]\n+    class1_indices_1 = [set(X[idx] for idx in indices if y[idx] == 1) for _, indices in kf1.split(X, y)]\n+    class0_indices_2 = [set(X[idx] for idx in indices if y[idx] == 0) for _, indices in kf2.split(X, y)]\n+    class1_indices_2 = [set(X[idx] for idx in indices if y[idx] == 1) for _, indices in kf2.split(X, y)]\n \n-def test_shuffle_stratifiedkfold():\n+    # Assert that shuffling within each class happened as well\n+    assert class0_indices_1 != class0_indices_2\n+    assert class1_indices_1 != class1_indices_2\n     # Check that shuffling is happening when requested, and for proper\n     # sample coverage\n     X_40 = np.ones(40)\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..eadb1af 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,16 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Test that fit_predict is equivalent to predicting after fitting, for n_init > 1\n+    rng = np.random.RandomState(0)\n+    X = rng.randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..a4feace 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,8 +1057,22 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n-\n-def test_make_pipeline_memory():\n+def test_pipeline_length():\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SelectKBest, f_regression\n+    from sklearn.svm import SVC\n+    from sklearn.pipeline import Pipeline\n+\n+    # Create sample data\n+    X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+\n+    # Create a pipeline with two steps\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipeline = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+    # Verify that len(pipeline) returns the correct number of steps\n+    assert len(pipeline) == 2\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1084,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..e74d0da 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,12 +1,19 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n \n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n+\n # Authors: Nicolas Goix <nicolas.goix@telecom-paristech.fr>\n #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>\n # License: BSD 3 clause\n \n import pytest\n+import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..05d34df 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -327,8 +327,29 @@ def test_export_text_errors():\n                          \"spacing must be > 0, given 0\",\n                          export_text, clf, spacing=0)\n \n+from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\n+from sklearn.tree.export import export_text\n+from sklearn.datasets import load_iris\n \n def test_export_text():\n+    # Test case for single feature to check IndexError fix\n+    X, y = load_iris(return_X_y=True)\n+    X_single_feature = X[:, 0].reshape(-1, 1)\n+    \n+    clf_single_feature = DecisionTreeClassifier(random_state=0)\n+    clf_single_feature.fit(X_single_feature, y)\n+    \n+    expected_single_feature_report = dedent(\"\"\" \n+    |--- sepal_length <= 5.45\n+    |   |--- class: 0\n+    |--- sepal_length >  5.45\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    result_single_feature = export_text(clf_single_feature, feature_names=['sepal_length'])\n+    assert result_single_feature.startswith(\"|--- sepal_length\")  # Check if it starts with the feature name.\n+    assert \"value\" in result_single_feature or \"class\" in result_single_feature  # Check if \"value\" or \"class\" is in the text.\n+    # Original test cases\n     clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n     clf.fit(X, y)\n \n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..3ffceb9 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,7 +1532,34 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('solver', ('saga', 'liblinear'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_extended(penalty, solver, multi_class):\n+    # Extended test to handle different solvers and penalties with refit=False\n+    n_samples, n_features, n_classes = 1000, 3, 2\n+    X = np.random.normal(size=(n_samples, n_features))\n+    beta = np.random.normal(size=n_features)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(\n+        penalty=penalty,\n+        solver=solver,\n+        Cs=np.logspace(-4, 4, 3),\n+        l1_ratios=l1_ratios,\n+        multi_class=multi_class,\n+        refit=False\n+    )\n+    lrcv.fit(X, y)\n+    assert hasattr(lrcv, 'scores_')\n+    assert hasattr(lrcv, 'coefs_paths_')\n+    assert lrcv.C_.shape[0] > 0\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..4ba7ce6 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -22,6 +22,7 @@ def test_get_deps_info():\n     assert 'scipy' in deps_info\n     assert 'Cython' in deps_info\n     assert 'pandas' in deps_info\n+    assert 'joblib' in deps_info\n     assert 'matplotlib' in deps_info\n \n \n@@ -30,4 +31,4 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..63c76b3 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -125,6 +125,25 @@ def test_extract_xi():\n     assert_array_equal(clust.labels_, expected_labels)\n \n \n+import numpy as np\n+from sklearn.utils import shuffle\n+from sklearn.cluster import OPTICS\n+from sklearn.utils.testing import assert_array_equal\n+\n+def test_optics_float_min_samples():\n+    # Test case for verifying float min_samples\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(100, 2)  # 100 samples, 2 features\n+    \n+    # Use float for min_samples\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08, max_eps=20, cluster_method='xi', xi=0.4)\n+    clust.fit(X)\n+    # Ensure that no error is raised and labels are produced\n+    assert len(clust.labels_) == len(X)\n+\n+    # Verify the min_samples was correctly converted to integer\n+    assert clust.min_samples == max(2, int(round(0.1 * len(X))))\n+\n def test_cluster_hierarchy_():\n     rng = np.random.RandomState(0)\n     n_points_per_cluster = 100\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..b8e8c03 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,31 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test for strings in NFKD form with combining characters\n+    # s1: \"LATIN SMALL LETTER N WITH TILDE\"\n+    s1 = chr(241)\n+    expected_s1 = \"n\"\n+    assert strip_accents_unicode(s1) == expected_s1\n \n-def test_to_ascii():\n+    # s2: \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\"\n+    s2 = chr(110) + chr(771)\n+    expected_s2 = \"n\"\n+    assert strip_accents_unicode(s2) == expected_s2\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_feature_select.py b/sklearn/feature_selection/tests/test_feature_select.py\nindex 1bc044a..5378fcb 100644\n--- a/sklearn/feature_selection/tests/test_feature_select.py\n+++ b/sklearn/feature_selection/tests/test_feature_select.py\n@@ -934,6 +934,41 @@ def test_mutual_info_regression():\n     # Test in Percentile mode.\n     univariate_filter = SelectPercentile(mutual_info_regression, percentile=20)\n     X_r = univariate_filter.fit(X, y).transform(X)\n+    def test_dataframe_dtype_preservation():\n+        \"\"\"Test that dataframe column dtypes are preserved after transformation.\"\"\"\n+        pd = pytest.importorskip(\"pandas\")\n+        X = pd.DataFrame({\n+            \"int_col\": pd.Series([1, 2, 3], dtype=np.int32),\n+            \"float_col\": pd.Series([1.0, 2.0, 3.0], dtype=np.float32),\n+            \"str_col\": pd.Series([\"a\", \"b\", \"c\"], dtype=\"category\"),\n+        })\n+        y = pd.Series([0, 1, 1])\n+\n+        # Transformer that simply selects every second feature\n+        univariate_filter = SelectKBest(k=2).set_output(transform=\"pandas\")\n+        output = univariate_filter.fit_transform(X, y)\n+\n+        # Verify that the dtypes are preserved\n+        assert output.dtypes[\"int_col\"] == X.dtypes[\"int_col\"]\n+        assert output.dtypes[\"float_col\"] == X.dtypes[\"float_col\"]\n+        assert output.dtypes[\"str_col\"] == X.dtypes[\"str_col\"]\n+\n+    def test_dataframe_dtype_conversion():\n+        \"\"\"Test that dataframe column dtypes are correctly converted if necessary.\"\"\"\n+        pd = pytest.importorskip(\"pandas\")\n+        X = pd.DataFrame({\n+            \"float_col\": pd.Series([1.0, 2.0, 3.0], dtype=np.float64),\n+            \"bool_col\": pd.Series([True, False, True], dtype=bool),\n+        })\n+        y = pd.Series([0, 1, 0])\n+\n+        # Transformer that selects only one feature, causing dtype to change\n+        univariate_filter = SelectKBest(k=1).set_output(transform=\"pandas\")\n+        output = univariate_filter.fit_transform(X, y)\n+\n+        # Since only one column is selected, ensure dtype match\n+        assert output.dtypes[\"bool_col\"] == X.dtypes[\"bool_col\"]\n+\n     X_r2 = (\n         GenericUnivariateSelect(mutual_info_regression, mode=\"percentile\", param=20)\n         .fit(X, y)\n@@ -943,4 +978,4 @@ def test_mutual_info_regression():\n     support = univariate_filter.get_support()\n     gtruth = np.zeros(10)\n     gtruth[:2] = 1\n-    assert_array_equal(support, gtruth)\n+    assert_array_equal(support, gtruth)\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..e43ac31 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1515,6 +1515,45 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     \"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n \n+def test_iterative_imputer_fill_value_integer():\n+    \"\"\"Test IterativeImputer with fill_value as an integer.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+    fill_value = 999\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(X_imputed, np.full(X.shape, fill_value))\n+\n+def test_iterative_imputer_fill_value_float():\n+    \"\"\"Test IterativeImputer with fill_value as a float.\"\"\"\n+    X = np.array([[-1.0, 2.0, 3.0, -1.0], [4.0, -1.0, 5.0, -1.0]])\n+    fill_value = 42.42\n+    imputer = IterativeImputer(\n+        missing_values=-1.0,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_array_equal(X_imputed, np.full(X.shape, fill_value))\n+\n+def test_iterative_imputer_fill_value_nan():\n+    \"\"\"Test IterativeImputer with fill_value as np.nan.\"\"\"\n+    X = np.array([[np.nan, 2.0, 3.0, np.nan], [4.0, np.nan, 5.0, np.nan]])\n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        missing_values=np.nan,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert np.all(np.isnan(X_imputed))\n+\n     imputer = IterativeImputer(\n         initial_strategy=initial_strategy, keep_empty_features=True\n     )\n",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..b0afc86 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -20,7 +20,10 @@ from sklearn.compose import (\n     make_column_selector,\n )\n from sklearn.exceptions import NotFittedError\n-from sklearn.preprocessing import FunctionTransformer\n+from sklearn.feature_selection import VarianceThreshold\n+import pytest\n+import pandas as pd\n+import numpy as np\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n \n \n",
  "scikit-learn__scikit-learn-9288": "",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..07aca12 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,23 @@\n+\n+def test_Catalog_unique_locations():\n+    catalog = Catalog()\n+    catalog.add('greeting', MsgOrigin('/path/to/doc1', 1))\n+    catalog.add('greeting', MsgOrigin('/path/to/doc1', 1))  # Duplicate location on purpose\n+    catalog.add('greeting', MsgOrigin('/path/to/doc2', 2))\n+    catalog.add('farewell', MsgOrigin('/path/to/doc1', 3))\n+    catalog.add('farewell', MsgOrigin('/path/to/doc1', 3))  # Duplicate location on purpose\n+\n+    catalog_messages = list(catalog)\n+    \n+    assert len(catalog_messages) == 2\n+\n+    msg1, msg2 = catalog_messages\n+    assert msg1.text == 'greeting'\n+    assert sorted(msg1.locations) == sorted([('/path/to/doc1', 1), ('/path/to/doc2', 2)])\n+    \n+    assert msg2.text == 'farewell'\n+    assert msg2.locations == [('/path/to/doc1', 3)]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -7,6 +27,7 @@ import subprocess\n from subprocess import PIPE, CalledProcessError\n \n import pytest\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n from sphinx.util.osutil import cd\n \n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..9ff96cc 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -336,13 +336,49 @@ def test_get_toctree_for_includehidden(app):\n                 ([list_item, compact_paragraph, reference, \"quux\"],\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n+import pytest\n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx.testing.fixtures import sphinx_test_tempdir, app\n+from sphinx.application import Sphinx\n \n+@pytest.mark.sphinx('html', testroot='toctree-index')\n+def test_toctree_directive_with_index(app: Sphinx, status: str, warning: str):\n+    app.build()\n+    warnings = warning.getvalue().strip()\n+    assert \"toctree contains reference to nonexisting document 'genindex'\" not in warnings\n+    assert \"toctree contains reference to nonexisting document 'modindex'\" not in warnings\n+    assert \"toctree contains reference to nonexisting document 'search'\" not in warnings\n+    \n+    toctree = app.env.tocs['index']\n+    assert_node(toctree[0][1][1], addnodes.toctree,\n+                caption=\"Indices\", glob=False, hidden=False,\n+                titlesonly=False, maxdepth=-1, numbered=0,\n+                entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')])\n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n     assert_node(toctree[1][0][1][2][0][0], reference, refuri=\"foo#foo-2\", secnumber=[1, 3])\n     assert_node(toctree[1][1][0][0], reference, refuri=\"bar\", secnumber=[2])\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n+import pytest\n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx.testing.fixtures import sphinx_test_tempdir, app\n+from sphinx.application import Sphinx\n \n+@pytest.mark.sphinx('html', testroot='toctree-index')\n+def test_toctree_directive_with_index(app: Sphinx, status: str, warning: str):\n+    app.build()\n+    warnings = warning.getvalue().strip()\n+    assert \"toctree contains reference to nonexisting document 'genindex'\" not in warnings\n+    assert \"toctree contains reference to nonexisting document 'modindex'\" not in warnings\n+    assert \"toctree contains reference to nonexisting document 'search'\" not in warnings\n+    \n+    toctree = app.env.tocs['index']\n+    assert_node(toctree[0][1][1], addnodes.toctree,\n+                caption=\"Indices\", glob=False, hidden=False,\n+                titlesonly=False, maxdepth=-1, numbered=0,\n+                entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')])\n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..78710f7 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -148,7 +148,38 @@ def test_glossary(app):\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n \n-def test_glossary_warning(app, status, warning):\n+def test_glossary_case_sensitivity(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       description for lowercase mysql\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       description for capitalized MySQL\\n\")\n+\n+    # doctree\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree[0][0][0][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree[0][0][0][1],\n+                [definition, nodes.paragraph, \"description for lowercase mysql\"])\n+    assert_node(doctree[0][0][1][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree[0][0][1][1],\n+                [definition, nodes.paragraph, \"description for capitalized MySQL\"])\n+\n+    # index\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..5142fde 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -332,6 +332,11 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].default == Parameter.empty\n \n \n+import pytest\n+import sys\n+from sphinx.util import inspect\n+from inspect import Parameter\n+\n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n def test_signature_from_str_positionaly_only_args():\n@@ -339,9 +344,43 @@ def test_signature_from_str_positionaly_only_args():\n     assert list(sig.parameters.keys()) == ['a', 'b']\n     assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+import pytest\n+import sys\n+from sphinx.util import inspect\n+from inspect import Parameter\n+\n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_with_positional_only_default_values():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n \n+import pytest\n+import sys\n+from sphinx.util import inspect\n+from inspect import Parameter\n \n-def test_signature_from_str_invalid():\n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_with_mixed_args():\n+    sig = inspect.signature_from_str('(a, b=0, /, c, d=2, *, e=3)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c', 'd', 'e']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == Parameter.empty\n+    assert sig.parameters['d'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['d'].default == '2'\n+    assert sig.parameters['e'].kind == Parameter.KEYWORD_ONLY\n+    assert sig.parameters['e'].default == '3'\n     with pytest.raises(SyntaxError):\n         inspect.signature_from_str('')\n \n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..7ee5c33 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,7 @@ from importlib import import_module\n \n import pytest\n \n+from typing import TypeVar\n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n \n \n@@ -52,7 +54,21 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+def test_generic_mock():\n+    \"\"\"Test the mocking of generic-typed classes.\"\"\"\n+\n+    T = TypeVar('T')\n+\n+    class SubClass2(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClass2\"\"\"\n+\n+        def method(self):\n+            return \"string with generics\"\n+\n+    obj2 = SubClass2()\n+    assert SubClass2.__doc__ == \"docstring of SubClass2\"\n+    assert isinstance(obj2, SubClass2)\n+    assert obj2.method() == \"string with generics\"\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 464108d..bdb24d3 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -1263,6 +1263,20 @@ def test_automethod_for_builtin(app):\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autoinit_for_decorated(app):\n+    actual = do_autodoc(app, 'class', 'target.decoratedinit.Foo')\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Foo(name=None)',\n+        '   :module: target.decoratedinit',\n+        '',\n+        '   ',\n+        '   .. py:method:: __init__(name=None)',\n+        '      :module: target.decoratedinit',\n+        '',\n+        '      Initialize self.  See help(type(self)) for accurate signature.',\n+        '',\n+    ]\n def test_automethod_for_decorated(app):\n     actual = do_autodoc(app, 'method', 'target.decorator.Bar.meth')\n     assert list(actual) == [\n@@ -1274,6 +1288,20 @@ def test_automethod_for_decorated(app):\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autoinit_for_decorated(app):\n+    actual = do_autodoc(app, 'class', 'target.decoratedinit.Foo')\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Foo(name=None)',\n+        '   :module: target.decoratedinit',\n+        '',\n+        '   ',\n+        '   .. py:method:: __init__(name=None)',\n+        '      :module: target.decoratedinit',\n+        '',\n+        '      Initialize self.  See help(type(self)) for accurate signature.',\n+        '',\n+    ]\n def test_abstractmethods(app):\n     options = {\"members\": None,\n                \"undoc-members\": None}\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..50fa2f6 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,74 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    # Create a dummy local file to test valid local link\n+    valid_local_file = app.srcdir / 'conf.py'\n+    valid_local_file.touch()\n+\n+    invalid_local_file_path = 'doesnotexist'\n+    # Add local link references to test whether they are checked\n+    (app.srcdir / 'index.rst').write_text(\n+        f\"\"\"\n+        Test valid local link: `Valid local file <conf.py>`_\n+        Test invalid local link: `Invalid local file <{invalid_local_file_path}>`_\n+        \"\"\"\n+    )\n+\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+    \n+    print(content)\n+    # Check for valid local file\n+    assert \"-local-   conf.py\" in content\n+    # Check for invalid local file\n+    assert f\"[broken] {invalid_local_file_path}\" in content\n+    assert len(content.splitlines()) == 2\n+\n+    # Clean up\n+    valid_local_file.unlink()\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links_json(app, status, warning):\n+    # Create a dummy local file to test valid local link\n+    valid_local_file = app.srcdir / 'conf.py'\n+    valid_local_file.touch()\n+\n+    invalid_local_file_path = 'doesnotexist'\n+    # Add local link references to test whether they are checked\n+    (app.srcdir / 'index.rst').write_text(\n+        f\"\"\"\n+        Test valid local link: `Valid local file <conf.py>`_\n+        Test invalid local link: `Invalid local file <{invalid_local_file_path}>`_\n+        \"\"\"\n+    )\n+\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.json').exists()\n+    content = (app.outdir / 'output.json').read_text()\n+    print(content)\n+\n+    rows = [json.loads(x) for x in content.splitlines()]\n+    \n+    # Find local links in json output\n+    rowsby = {row[\"uri\"]:row for row in rows}\n+    assert \"conf.py\" in rowsby\n+    assert rowsby[\"conf.py\"]['status'] == 'local'\n+    \n+    assert invalid_local_file_path in rowsby\n+    assert rowsby[invalid_local_file_path]['status'] == 'broken'\n+    \n+    assert len(content.splitlines()) == 2\n+\n+    # Clean up\n+    valid_local_file.unlink()\n+\n+import os\n+\n import json\n import re\n from unittest import mock\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..dd5face 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -16,6 +17,49 @@ from test_ext_autodoc import do_autodoc\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_specific_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _specific_private_function(param)',\n+        '   :module: target.private',\n+        '',\n+        '   Specific private function docstring.',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_multiple_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_specific_private_function,_another_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _specific_private_function(param)',\n+        '   :module: target.private',\n+        '',\n+        '   Specific private function docstring.',\n+        '',\n+        '.. py:function:: _another_private_function(param)',\n+        '   :module: target.private',\n+        '',\n+        '   Another private function docstring.',\n+        '',\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n     assert list(actual) == [\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..a71d67d 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1287,5 +1287,35 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n \n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+from babel.messages import pofile\n+\n+# Test to ensure locale translations in sphinx.po are respected over defaults\n+@pytest.mark.sphinx('html', testroot='intl_custom_translation', confoverrides={'language': 'da'})\n+def test_custom_locale_translation(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare Danish message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'intl_custom_translation' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..303b6f3 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,12 +9,35 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc', srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_with_aliases(app: SphinxTestApp):\n+    # Create an RST file for testing\n+    (app.srcdir / 'types.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    \n+    # Build the documentation\n+    app.build()\n+    \n+    # Read the output file to check the results\n+    context = (app.outdir / 'types.txt').read_text()\n+    \n+    # Check if the alias is correctly applied in the output\n+    assert 'types.sphinx_doc(data)' in context\n+    assert 'Parameters:' in context\n+    assert '* **data** (*types.JSONObject*)' in context\n+    assert 'Returns' in context\n+    assert 'Return type:' in context\n+    assert 'types.JSONObject' in context\n+\n import platform\n import sys\n \n import pytest\n \n from sphinx.testing import restructuredtext\n+from pathlib import Path\n+from sphinx.testing.util import SphinxTestApp\n \n from .test_ext_autodoc import do_autodoc\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..74e769b 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -20,6 +20,9 @@ from sphinx import addnodes\n from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n+\n from sphinx.util.docutils import LoggingReporter\n \n try:\n@@ -29,8 +32,45 @@ try:\n except ImportError:\n     pyximport = None\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_ignored(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'example', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: example',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n \n-def do_autodoc(app, objtype, name, options=None):\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_all_with_ignored_option(app):\n+    options = {'members': True, 'ignore-module-all': True}\n+    actual = do_autodoc(app, 'module', 'example', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: example',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+        '.. py:function:: bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: baz()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n     if options is None:\n         options = {}\n     app.env.temp_data.setdefault('docname', 'index')  # set dummy docname\n",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..5edd0fa 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,15 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n-\n-def test_getslots():\n+def test_object_description_enum():\n+    import enum\n+    \n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Test that the Enum value is formatted without the '<MyEnum.ValueA: 10>'\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..de755f6 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -241,7 +241,25 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n-def test_extensions(tempdir):\n+def test_exits_when_existing_confpy(monkeypatch):\n+    from sphinx.cmd import quickstart as qs\n+    import pytest\n+    from os import path\n+    \n+    # Mock path.isfile to always return True to simulate existing conf.py\n+    def mock_isfile(path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Simulate user input where \"Enter\" is pressed, expecting SystemExit\n+    qs.term_input = mock_input({\n+        'Please enter a new root path (or just Enter to exit)': ''\n+    })\n+    \n+    d = {}\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..ae79ffe 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -754,7 +754,9 @@ def test_pymethod_options(app):\n     assert 'Class.meth4' in domain.objects\n     assert domain.objects['Class.meth4'] == ('index', 'Class.meth4', 'method', False)\n \n-    # :property:\n+    # :property: should not have parentheses\n+    assert_node(doctree[1][1][8], addnodes.index,\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][8], addnodes.index,\n                 entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..a112148 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,41 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_point_distance():\n+    # Test 2D points\n+    p1 = Point2D(3, 4)\n+    p2 = Point2D(0, 0)\n+    assert p1.distance(p2) == 5\n+\n+    # Test 3D points\n+    p1 = Point3D(1, 2, 2)\n+    p2 = Point3D(4, 6, 5)\n+    assert p1.distance(p2) == sqrt(35)\n+\n+    # Test mixed dimensions should raise an error\n+    p1 = Point3D(1, 2, 2)\n+    p2 = Point2D(4, 6)\n+    try:\n+        p1.distance(p2)\n+        assert False, \"Expected an exception due to dimension mismatch\"\n+    except ValueError:\n+        assert True\n+\n+    # Test dimension mismatch with a message\n+    try:\n+        assert Point2D(1, 1).distance(Point3D(2, 2, 2))\n+        assert False, \"Expected an exception due to dimension mismatch\"\n+    except ValueError as e:\n+        assert 'incompatible dimensions' in str(e)\n+\n+from sympy.geometry import Point, Point2D, Point3D\n+from sympy import sqrt\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..e07f670 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,17 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(f(2)).evalf() == Float(16)\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    assert f(g(f(g(2)))).evalf() == Float(64)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..50790a8 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,15 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Identity, Sum, symbols\n \n-def test_Identity_doit():\n+def test_Identity_sum_of_elements():\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+\n+    # Check the sum of all elements in the identity matrix is 'n'\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..717c76a 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -353,6 +353,21 @@ def test_args():\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n+    \n+    # Test non-disjoint cycles, should give the identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 2], [0, 2]]) == Permutation([0, 2, 1])\n+    \n+    # Test more complex non-disjoint cycles to ensure left-to-right application\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[1, 2], [0, 1]]) == Permutation([2, 0, 1])\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([2, 0, 1])\n+    assert Permutation([[0, 1, 2], [1, 0]]) == Permutation([0, 2, 1])\n+    assert Permutation([[0, 2, 1], [2, 1, 0]]) == Permutation([1, 0, 2])\n+    \n+    # Ensure identity cycles are handled correctly\n+    assert Permutation([[0], [1], [2]]) == Permutation([0, 1, 2])\n+    assert Permutation([[0, 0], [1, 1], [2, 2]]) == Permutation([0, 1, 2])\n \n \n def test_Cycle():\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..b9b8435 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -495,6 +495,27 @@ def test_len():\n     assert SparseMatrix() == SparseMatrix([])\n     assert SparseMatrix() == SparseMatrix([[]])\n \n+def test_issue_matrix_hstack_vstack():\n+    # Test the behavior of Matrix.hstack with zero-row matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    # Test the behavior of Matrix.hstack with non-zero-row matrices\n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(1, 2)\n+    M4 = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+    # Test the behavior of Matrix.vstack with zero-column matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(1, 0)\n+    M3 = SparseMatrix.zeros(2, 0)\n+    M4 = SparseMatrix.zeros(3, 0)\n+    assert SparseMatrix.vstack(M1, M2, M3, M4).shape == (6, 0)\n \n def test_sparse_zeros_sparse_eye():\n     assert SparseMatrix.eye(3) == eye(3, cls=SparseMatrix)\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..8349f55 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,8 +170,34 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import Mul, Max, symbols, NS, oo, E, I, pi, sqrt, exp, sin, Rational, cos, floor, log, factorial, ceiling\n \n-def test_evalf_bugs():\n+x, y = symbols('x y')\n+\n+def test_issue_13076():\n+    # Verify the fix for UnboundLocalError when evaluating Mul with unevaluated Max.\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Adding additional variations to ensure consistent behavior\n+    assert NS(Mul(x, Max(y, 0), evaluate=False).evalf()) == 'x*Max(y, 0)'\n+    assert NS(Mul(Max(y, 0), x, evaluate=False).evalf()) == 'x*Max(y, 0)'\n+\n+    # Checking with specific numeric values\n+    assert NS(Mul(5, Max(0, 3), evaluate=False).evalf()) == '15.0000000000000'\n+    assert NS(Mul(Max(0, 3), 5, evaluate=False).evalf()) == '15.0000000000000'\n+\n+    # Checking behavior with symbolic and numeric mix\n+    assert NS(Mul(2, Max(0, y), evaluate=False).evalf()) == '2*Max(0, y)'\n+    assert NS(Mul(Max(0, y), 2, evaluate=False).evalf()) == '2*Max(0, y)'\n+\n+    # Extreme values\n+    assert NS(Mul(x, Max(-oo, y), evaluate=False).evalf()) == 'x*Max(-oo, y)'\n+    assert NS(Mul(Max(-oo, y), x, evaluate=False).evalf()) == 'x*Max(-oo, y)'\n+\n+    # Verify with negative multiplication\n+    assert NS(Mul(x, Max(0, -y), evaluate=False).evalf()) == 'x*Max(0, -y)'\n+    assert NS(Mul(Max(0, -y), x, evaluate=False).evalf()) == 'x*Max(0, -y)'\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n     assert NS(exp(10**10) + sin(1), 10) == NS(exp(10**10), 10)\n     assert NS('log(1+1/10**50)', 20) == '1.0000000000000000000e-50'\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..e7ed98f 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -233,6 +233,13 @@ def test_coth():\n     assert coth(-pi*I) == cot(pi)*I\n \n     assert coth(2**1024 * E) == coth(2**1024 * E)\n+    \n+    # Test case for the issue with coth(log(tan(x))).subs(x, value)\n+    x = Symbol('x')\n+    expr = coth(log(tan(x)))\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for v in test_values:\n+        assert isinstance(expr.subs(x, v), Expr)  # Check if it returns a valid expression without error\n     assert coth(-2**1024 * E) == -coth(2**1024 * E)\n \n     assert coth(pi*I) == -I*cot(pi)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..2755b74 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,7 +165,20 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import FiniteSet, Interval, Complement, Symbol, S, Union\n+\n def test_Complement():\n+    # Test case based on issue 12712\n+    x, y = Symbol('x'), Symbol('y')\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+        Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n+    # Additional test case for mixture of symbols and numerical values\n+    a, b, c = Symbol('a'), Symbol('b'), Symbol('c')\n+    assert Complement(FiniteSet(a, b, c, 5), Interval(0, 10)) == \\\n+        Complement(FiniteSet(a, b, c), Interval(0, 10))\n+    assert Complement(FiniteSet(1, b, 10, 0), Interval(1, 2)) == \\\n+        Complement(FiniteSet(b, 0, 10), Interval(1, 2))\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..2d13e62 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,22 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_col_insert_issue_13643():\n+    from sympy import Matrix, eye, ones\n+\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..a099876 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -665,8 +665,16 @@ def test_Poly_sub():\n def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n+from sympy import Poly, Symbol, S\n \n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+x = Symbol('x')\n+\n+def test_issue_13079():\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..3abddf7 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,32 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_custom_mul_symbol():\n+    from sympy import symbols, latex\n+    \n+    x, y = symbols('x y')\n+\n+    # Original test cases\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+    \n+    # New test cases\n+    # Test with different custom multiplication symbols\n+    assert latex(2*x*y, mul_symbol='*') == r\"2*x*y\"\n+    assert latex(2*x*y, mul_symbol='\\\\cdot') == r\"2\\cdotx\\cdoty\"\n+    assert latex(2*x*y, mul_symbol='\\\\star') == r\"2\\starx\\stary\"\n+    \n+    # Test without specifying mul_symbol (default behavior)\n+    assert latex(2*x*y) == r\"2 x y\"\n+    \n+    # Edge cases with unusual symbols\n+    assert latex(2*x*y, mul_symbol='!!!') == r\"2!!!x!!!y\"\n+    assert latex(2*x*y, mul_symbol='') == r\"2xy\"\n+    \n+    # Check integration case with symbol still separating differentials\n+    from sympy import Integral\n+    assert latex(Integral(2*x**2*y, x)) == r\"\\int 2 x^{2} y\\, dx\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..c781462 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,14 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n+def test_issue_13835():\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n \n-def test_det_LU_decomposition():\n+def test_determinant():\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..b9bfbc0 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -711,6 +711,61 @@ def test_issue_10003():\n \n def test_precomputed_cdf():\n     x = symbols(\"x\", real=True, finite=True)\n+\n+    # Test Arcsin distribution\n+    a, b = 0, 3\n+    X = Arcsin('x', a, b)\n+    assert cdf(X)(1) == 2 / pi * asin(sqrt((1 - a)/(b - a)))\n+\n+    # Test Dagum distribution\n+    p, a, b = Rational(1, 3), Rational(1, 5), 2\n+    D = Dagum('x', p, a, b)\n+    assert cdf(D)(3) == (1 + (3/b)**(-a))**(-p)\n+\n+    # Test Erlang distribution\n+    k, l = 1, 1\n+    E = Erlang(\"x\", k, l)\n+    assert cdf(E)(1) == lowergamma(k, l*1)/gamma(k)\n+\n+    # Test Frechet distribution\n+    a, s, m = Rational(4, 3), 1, 2\n+    F = Frechet(\"x\", a, s, m)\n+    assert cdf(F)(3) == exp(-((3 - m)/s)**(-a))\n+\n+    # Test Inverse Gamma distribution\n+    a, b = Rational(5, 7), 2\n+    GI = GammaInverse(\"x\", a, b)\n+    assert cdf(GI)(3) == uppergamma(a, b/3)/gamma(a)\n+    \n+    # Test Kumaraswamy distribution\n+    a, b = Rational(1, 123), 5\n+    K = Kumaraswamy(\"x\", a, b)\n+    assert cdf(K)(Rational(1, 3)) == -((-Rational(1, 3)**a + 1)**b + 1)\n+\n+    # Test Laplace distribution\n+    mu, b = 2, 3\n+    L = Laplace(\"x\", mu, b)\n+    assert cdf(L)(5) == Piecewise((exp((5 - mu)/b)/2, mu > 5), (-exp((mu - 5)/b)/2 + 1, True))\n+\n+    # Test Logistic distribution\n+    mu, s = 1, 0.1\n+    LH = Logistic(\"x\", mu, s)\n+    assert cdf(LH)(2) == 1/(1 + exp(-(2 - mu)/s))\n+\n+    # Test Nakagami distribution\n+    mu, omega = Rational(7, 3), 1\n+    N = Nakagami(\"x\", mu, omega)\n+    assert cdf(N)(2) == lowergamma(mu, mu * 2**2/omega)/gamma(mu)\n+    \n+    # Test StudentT distribution\n+    nu = 10\n+    S = StudentT(\"x\", nu)\n+    assert cdf(S)(2) == 1/2 + 2*gamma(nu/2 + 1/2)*hyper((1/2, nu/2 + 1/2), (3/2,), -2**2/nu)/(sqrt(pi)*sqrt(nu)*gamma(nu/2))\n+\n+    # Test UniformSum distribution\n+    US = UniformSum(\"x\", 5)\n+    assert tn(diff(cdf(US)(x), x), density(US)(x), x, a=0, b=0, c=1, d=0)\n+    x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n     n = symbols(\"n\", integer=True, positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..d955969 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,7 +45,16 @@ def test_tensor_product_commutator():\n         TP(A, B)*TP(B, C) - TP(B, C)*TP(A, B)\n \n \n+from sympy import Symbol\n+from sympy.physics.quantum import TensorProduct as TP\n+from sympy.physics.quantum import tensor_product_simp\n+from sympy.physics.paulialgebra import Pauli\n+\n+A, B, C, D = symbols('A,B,C,D', commutative=False)\n+a = Symbol('a', commutative=False)\n+\n def test_tensor_product_simp():\n+    # Original test case\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n \n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 29c7fd2..b59a8c2 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -491,6 +491,9 @@ def test_Rational():\n \n     assert sstr(Rational(2, 3), sympy_integers=True) == \"S(2)/3\"\n     assert sstr(Symbol(\"x\")**Rational(2, 3), sympy_integers=True) == \"x**(S(2)/3)\"\n+    # Additional tests from the issue description\n+    assert sstr(Eq(x, S(1)/2), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, S(1)/2), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n \n \n def test_Float():\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..56c9806 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,34 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n+def test_vector_addition_with_zero():\n+    N = ReferenceFrame('N')\n+    \n+    # Ensuring that adding N.x and 0*N.x does not cause a TypeError\n+    assert A.x + 0 == A.x\n+    assert N.x + 0 * N.x == N.x\n+    assert sum([N.x, 0 * N.x]) == N.x\n+    assert sum([0 * N.x, N.x]) == N.x\n+\n+    # Check combining multiple zero-multiplications\n+    assert N.x + (0 * N.x) + (0 * N.x) == N.x\n+\n+    # More complex expressions involving zero multiplications\n+    assert sum([N.x, 0 * N.y, 0 * N.z]) == N.x\n+    assert sum([0 * N.x, 0 * N.y, N.z]) == N.z\n+\n+    # Check with floating-point zero\n+    assert N.x + 0.0 * N.x == N.x\n+    assert 0.0 * N.x + N.y == N.y\n+\n+    # Ensure no TypeError when zero is present in various operations\n+    zero_vector = 0 * N.x\n+    assert isinstance(zero_vector, Vector)  # Ensure it's considered a valid Vector\n+\n+# Add this new test to ensure the issue is resolved without affecting other functions\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..63240cf 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -40,6 +41,9 @@ def test_PythonCodePrinter():\n def test_MpmathPrinter():\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n+    # Test for mpmath printer handling of Rational\n+    assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n+    assert p.doprint(Rational(232, 3)) == 'mpmath.mpf(232)/mpmath.mpf(3)'\n \n \n def test_NumPyPrinter():\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..8d5ccbe 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -72,6 +73,11 @@ def test_ndim_array_initiation():\n     raises(ValueError, lambda: vector_with_long_shape[long(5)])\n \n     from sympy.abc import x\n+    # Test case for the issue where len of rank-0 arrays should return 1\n+    rank_zero_array_scalar = ImmutableDenseNDimArray(3)\n+    assert len(rank_zero_array_scalar) == 1\n+    assert rank_zero_array_scalar[()] == 3\n+    raises(ValueError, lambda: rank_zero_array_scalar[0])\n     rank_zero_array = ImmutableDenseNDimArray(x)\n     assert len(rank_zero_array) == 0\n     assert rank_zero_array.shape == ()\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..40ecba9 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -21,7 +22,21 @@ def test_Rational():\n     assert mcode(Rational(3, -7)) == \"-3/7\"\n     assert mcode(Rational(-3, -7)) == \"3/7\"\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n-    assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n+    assert mcode(Rational(3, 7) * x) == \"(3/7)*x\"\n+\n+def test_Max_Min_functions():\n+    # Testing original test case with Max and Min\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+    # Testing Max with two variables\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    # Testing Max with different variable types\n+    assert mcode(Max(x, y)) == \"Max[x, y]\"\n+    assert mcode(Max(5, 3)) == \"Max[5, 3]\"\n+    # Testing nested Max\n+    assert mcode(Max(Max(x, y), z)) == \"Max[Max[x, y], z]\"\n+    # Testing Max with symbolic constants\n+    assert mcode(Max(x, pi)) == \"Max[x, Pi]\"\n \n \n def test_Function():\n",
  "sympy__sympy-15349": "",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..ef7e6f3 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,19 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional test cases to verify fix and more edge cases\n+    assert Mod(6*i, 3) == 0\n+    assert Mod(9*i + 6, 3) == 0\n+    assert Mod(12*i + 2, 4) == 2\n+    assert Mod(7*i, 1) == 0\n+    assert Mod(13*i - 5, 3) == Mod(i - 2, 3)\n+    assert Mod(0*i, 10) == 0\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..52244b5 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -88,6 +88,12 @@ def test_Min():\n     raises(ValueError, lambda: Min())\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n+\n+    # Test cases for zero-argument Min() and Max()\n+    from sympy import S, Min, Max\n+\n+    assert Min() == S.Infinity\n+    assert Max() == S.NegativeInfinity\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n     assert Min(x, Max(y, -oo)) == Min(x, y)\n     assert Min(p, oo, n, p, p, p_) == n\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..af68290 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1982,7 +1982,33 @@ def test_issue_8247_8354():\n     assert z.is_positive is False  # it's 0 (and a single _mexpand isn't enough)\n \n \n+from sympy import I, simplify, Add\n+\n def test_Add_is_zero():\n+    # Issue 15873 initial test\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+\n+    # Additional test cases for Issue 15873\n+    # Simplified expression should lead to a definite zero result\n+    assert simplify(e).is_zero is True\n+\n+    # Testing other complex expressions with similar structure\n+    e2 = I + I * (1 + I) - 1 - (1 + I)**2\n+    assert e2.is_zero is None\n+    assert simplify(e2).is_zero is True\n+\n+    e3 = 3*I - 1 - (1 - I) - I * (1 - I)\n+    assert e3.is_zero is None\n+    assert simplify(e3).is_zero is True\n+\n+    # Test with expressions involving symbols\n+    x = symbols('x', real=True)\n+    e4 = x + I - x - I\n+    assert e4.is_zero is True\n+\n+    e5 = x + I - x\n+    assert e5.is_zero is None  # Cannot be determined because it depends on I\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n@@ -1993,4 +2019,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..5b10d19 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -478,6 +478,34 @@ def test_logcombine_complex_coeff():\n         i + log(x**2)\n \n \n+from sympy import Symbol, posify, symbols\n+\n+def test_issue_16438_finite():\n+    # Original test for finite assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True, 'zero': False, 'imaginary': False,\n+        'nonpositive': False, 'commutative': True, 'hermitian': True, \n+        'real': True, 'nonzero': True, 'nonnegative': True, \n+        'negative': False, 'complex': True, 'finite': True, 'infinite': False\n+    }\n+\n+def test_posify_preserves_assumptions():\n+    # Test cases for additional assumptions\n+    assumptions_to_test = {\n+        'integer': True,\n+        'rational': True,\n+        'prime': True,\n+        'even': True,\n+        'odd': True\n+    }\n+    \n+    for assumption, value in assumptions_to_test.items():\n+        x = Symbol('x', **{assumption: value})\n+        xp, _ = posify(x)\n+        assert getattr(xp, f'is_{assumption}') == value, f\"Failed for {assumption}\"\n+\n def test_issue_5950():\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..bc642de 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +37,14 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test for Indexed support in PythonCodePrinter\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[x]) == 'p[x]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y]) == 'p[x, y]'\n+    assert prntr.doprint(p[x, 0, y]) == 'p[x, 0, y]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..6677ccb 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -31,7 +31,13 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     return source\n \n \n-def test_cython_wrapper_scalar_function():\n+def test_autowrap_cython_unused_array_arg():\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..a0a4a2f 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,6 +248,25 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n+def test_encode_morse_numbers():\n+    # Test correct encoding for numbers 1 through 5\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('2') == '..---'\n+    assert encode_morse('3') == '...--'\n+    assert encode_morse('4') == '....-'\n+    assert encode_morse('5') == '.....'\n+\n+    # Test correct encoding for numbers 6 through 0\n+    assert encode_morse('6') == '-....'\n+    assert encode_morse('7') == '--...'\n+    assert encode_morse('8') == '---..'\n+    assert encode_morse('9') == '----.'\n+    assert encode_morse('0') == '-----'\n+\n+    # Re-run the original patch to ensure overall correctness\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n+\n \n def test_decode_morse():\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..4f3f0ca 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -810,8 +810,16 @@ def test_issue_15965():\n     assert simplify(A) == anew\n     assert simplify(B) == bnew\n \n-\n-def test_issue_7971():\n+def test_issue_17137():\n+    from sympy import simplify, Symbol, I, cos\n+    x = Symbol('x')\n+    # Test complex exponentiation with simplify\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    # Additional cases for verification\n+    assert simplify(cos(x)**(1 + I)) == cos(x)**(1 + I)\n+    assert simplify(cos(x)**0) == 1\n+    assert simplify(cos(x)**(I*I)) == cos(x)**(-1)\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..a5ea1d9 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n@@ -176,7 +178,31 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # Ensure _sqrt_match does not crash and returns empty list for non-matching inputs\n+    assert _sqrt_match(4 + I) == []\n+\n+    # Test the specific case from the issue\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    expected = expr  # It should return the expression unchanged\n+    assert sqrtdenest(expr) == expected\n+\n+    # Additional case similar to the original one, but with slight variations\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e  # Should remain unchanged\n+\n+    # Test with purely real parts in the same kind of structure\n+    e_real = (3 - sqrt(2)*sqrt(4 + 3)) / 2\n+    assert sqrtdenest(e_real) == e_real  # Should remain unchanged\n+\n+    # Test with purely imaginary parts\n+    e_imaginary = (3*I - sqrt(2)*sqrt(3*I) + sqrt(4 + 2*I)) / 2\n+    assert sqrtdenest(e_imaginary) == e_imaginary  # Should remain unchanged\n+\n+    # Test to ensure the original function s is not affected by other fixes\n+    assert unchanged(sqrtdenest, e_real)\n+    assert unchanged(sqrtdenest, e_imaginary)\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..46f26e9 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -89,6 +90,13 @@ def test_point():\n     assert p4.rotate(pi, Point(0.5, 0.5)) == p3\n     assert p1.__radd__(p2) == p1.midpoint(p2).scale(2, 2)\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+\n+    # Test multiplication of Point and scalar\n+    assert point1 + point2 * scalar == Point(2, 2)\n+    assert point1 + scalar * point2 == Point(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..8d58f37 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -473,8 +473,20 @@ def test_descent():\n     # supposed to be square-free\n     raises(TypeError, lambda: descent(4, 3))\n \n+from sympy import diophantine, symbols\n+\n+m, n = symbols('m n', integer=True)\n \n def test_diophantine():\n+    # Test for issue involving symbol order with permute=True\n+    equation = n**4 + m**4 - 2**4 - 3**4\n+    \n+    result_1 = diophantine(equation, syms=(m, n), permute=True)\n+    expected_result = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert result_1 == expected_result, f\"Unexpected result for syms=(m, n): {result_1}\"\n+\n+    result_2 = diophantine(equation, syms=(n, m), permute=True)\n+    assert result_2 == expected_result, f\"Unexpected result for syms=(n, m): {result_2}\"\n     assert check_solutions((x - y)*(y - z)*(z - x))\n     assert check_solutions((x - y)*(x**2 + y**2 - z**2))\n     assert check_solutions((x - 3*y + 7*z)*(x**2 + y**2 - z**2))\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..f54b6c8 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -679,6 +679,18 @@ def test_latex_subs():\n \n def test_latex_integrals():\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n+\n+    # Test cases to verify the fix for parenthesizing of Subs\n+    # Original test case from patch\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    # New test case to check multiple substitutions\n+    assert latex(3*Subs(-x+y, (x, y), (1, 2))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    # Complex expression\n+    assert latex(3*Subs(y - x**2, (x,), (1,))) == r'3 \\left. \\left(- x^{2} + y\\right) \\right|_{\\substack{ x=1 }}'\n+    # Testing no substitution to see default behavior\n+    assert latex(3*Subs(-x+y, (), ())) == r'3 \\left(- x + y\\right)'\n+    # Testing single variable expressions\n+    assert latex(Subs(x, (x,), (1,))) == r'\\left. x \\right|_{\\substack{ x=1 }}'\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n     assert latex(Integral(x**2, (x, 10, 20))) == \\\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..ad5de23 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -86,8 +87,15 @@ def test_free_symbols():\n     assert ConditionSet(x, Eq(x, 0), FiniteSet(x, z)\n         ).free_symbols == {x, z}\n \n+from sympy import asin, imageset\n+from sympy.sets import ImageSet\n \n def test_subs_CondSet():\n+    # issue related test case\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    assert ConditionSet(x, Contains(y, Interval(-1,1)), img1).subs(y, S.One/3).dummy_eq(img2)\n     s = FiniteSet(z, y)\n     c = ConditionSet(x, x < 2, s)\n     # you can only replace sym with a symbol that is not in\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..0b175e9 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -476,6 +476,30 @@ def test_issue_4988_builtins():\n     assert exp2 == C  # Make sure it did not get mixed up with sympy.C\n \n \n+from sympy.core.sympify import kernS\n+from sympy.abc import x, y\n+from sympy import Rational, Symbol, exp, sin, cos, Add, Mul, Interval\n+\n+...\n+\n+def test_issue_kernS_unbound():\n+    # Test a simple expression\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+    # Test an expression without parentheses\n+    assert kernS(\"2*x + 3\") == 2*x + 3\n+    # Test an expression with nested parentheses\n+    assert kernS(\"((3 + 4) * 5)\") == (3 + 4) * 5\n+    # Test an expression with implied multiplication\n+    assert kernS(\"2(x + 1)\") == 2*(x + 1)\n+    # Test expressions with negative numbers\n+    assert kernS(\"-(3 + 4)\") == -(3 + 4)\n+    # Test expressions with random spaces\n+    assert kernS(\"  2 * ( x + y )  \") == 2*(x + y)\n+    # Test expression with unique kern that may cause issues\n+    assert kernS(\"2**(x + 1)\") == 2**(x + 1)\n+    # Test expressions with alphabets leading to kern generation\n+    assert kernS(\"a + b\") == Symbol('a') + Symbol('b')\n+\n def test_geometry():\n     p = sympify(Point(0, 1))\n     assert p == Point(0, 1) and isinstance(p, Point)\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..f929da9 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -106,7 +107,29 @@ def test_identity():\n         assert represent(IdentityOperator(n)) == eye(n)\n \n \n-def test_outer_product():\n+def test_dagger_identity():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+\n+    # Test Dagger of an operator multiplied by IdentityOperator\n+    D = Dagger(O)\n+    assert D * I == D\n+    assert I * D == D\n+\n+    # Test with multiple Dagger operators\n+    DD = Dagger(D)\n+    assert DD * I == DD\n+    assert I * DD == DD\n+\n+    # Test combination with other operators\n+    P = Operator('P')\n+    assert D * I * P == D * P\n+    assert P * I * D == P * D\n+    assert D * I * D == D * D\n+\n+    # Edge case with multiple identities\n+    assert D * I * I == D\n+    assert I * I * D == D\n     k = Ket('k')\n     b = Bra('b')\n     op = OuterProduct(k, b)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..7d424e9 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -877,6 +877,23 @@ def test_sylow_subgroup():\n     S = P.sylow_subgroup(5)\n     assert S.order() == 25\n \n+    # Test cases specifically focusing on previously problematic inputs\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4  # 18 = 2 * 3^2, so Sylow 2-subgroup order is 2^2 = 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4  # 50 = 2 * 5^2, so Sylow 2-subgroup order is 2^2 = 4\n+\n+    G = DihedralGroup(25)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 2  # 25 = 5^2; a 2-Sylow subgroup must be of order 2\n+\n+    G = DihedralGroup(30)\n+    S = G.sylow_subgroup(p=3)\n+    assert S.order() == 3  # 30 = 2 * 3 * 5, so Sylow 3-subgroup order is 3^1 = 3\n+\n     # the length of the lower central series\n     # of a p-Sylow subgroup of Sym(n) grows with\n     # the highest exponent exp of p such\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..faebc24 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,23 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy import S\n+from sympy.utilities.iterables import partitions, uniq\n \n-def test_partitions():\n+def test_partitions_issue():\n+    # Ensure that each partition is a unique dictionary (not reused)\n+    n = 6\n+    seen = []\n+    for p in partitions(n, k=2):\n+        assert p not in seen, f\"Partition {p} was reused\"\n+        seen.append(p.copy())  # Copy to track previously yielded partitions\n+\n+    assert [p.copy() for p in partitions(6, k=2)] == [\n+        {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+\n+    # Test using list, to ensure no reused dicts\n+    part_list = list(partitions(6, k=3))\n+    assert len(part_list) == len(set(id(p) for p in part_list)), \"Reused dictionary detected in partitions\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..69af9a3 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,12 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..d648529 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -9,6 +10,32 @@ from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n def test_subs():\n+    # Issue 21373: Check PolynomialError in specific cases with subs\n+    from sympy.functions.elementary.hyperbolic import sinh\n+    from sympy.functions.elementary.exponential import exp\n+    from sympy import Piecewise, clear_cache, Symbol\n+    \n+    x, y, z = symbols('x y z')\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) is not None  # should not raise an error\n+\n+    clear_cache()\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr_real = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        expr_real.subs({1: 1.0})\n+    except Exception as e:\n+        assert False, f\"Unexpected exception: {e}\"\n+\n+    # Additional check: using cosh which was mentioned in the issue\n+    clear_cache()\n+    from sympy.functions.elementary.hyperbolic import cosh\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        expr_cosh.subs({1: 1.0})\n+    except Exception as e:\n+        assert False, f\"Unexpected exception: {e}\"\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..f159af3 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -15,6 +15,42 @@ from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n+\n+def test_itermonomials_min_degrees():\n+    # Test case from the issue description\n+    x1, x2, x3 = symbols('x1, x2, x3')\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+    expected_monomials = {x1**3, x2**3, x3**3, x1*x2**2, x2*x1**2, x1*x3**2, x3*x1**2, x2*x3**2, x3*x2**2, x1*x2*x3}\n+    monomials = sorted(itermonomials(states, max_degrees, min_degrees=min_degrees), \n+                       key=monomial_key('grlex', states))\n+    assert set(monomials) == expected_monomials\n+\n+    # Additional test cases to ensure comprehensive coverage\n+    # Testing when `min_degrees` is less than `max_degrees`\n+    max_degrees = 3\n+    min_degrees = 2\n+    expected_monomials = {\n+        x1**2, x2**2, x3**2, x1*x2, x1*x3, x2*x1, x2*x3, x3*x1, x3*x2,\n+        x1**3, x2**3, x3**3, x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3, x3**2*x1, x3**2*x2,\n+        x1*x2**2, x1*x3**2, x2*x3**2, x3*x2*x1, x1*x2*x3, x2*x3\n+    }\n+    monomials = sorted(itermonomials(states, max_degrees, min_degrees=min_degrees),\n+                       key=monomial_key('grlex', states))\n+    assert set(monomials) == expected_monomials\n+\n+    # Testing single variable\n+    monomials = set(itermonomials([x1], 3, 2))\n+    expected_monomials = {x1**2, x1**3}\n+    assert monomials == expected_monomials\n+\n+    # Testing when max_degrees equals min_degrees equals 0\n+    monomials = set(itermonomials([x1, x2], 0, 0))\n+    expected_monomials = {S.One}\n+    assert monomials == expected_monomials\n \n def test_monomials():\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..3f7e1b8 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -269,6 +269,8 @@ def test_String():\n     assert st.func(**st.kwargs()) == st\n \n \n+    assert st.func(*st.args) == st\n+\n     class Signifier(String):\n         pass\n \n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..45e81da 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,5 @@\n+\n+from sympy.core.parameters import evaluate\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -11,8 +13,13 @@ from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n \n+def test_issue_22684():\n+    # Test to ensure no error is raised with evaluate(False) context\n+    with evaluate(False):\n+        Point2D(1, 2)\n \n-def test_point():\n+    # Test to ensure no error is raised without evaluate(False)\n+    Point2D(1, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..544c9b7 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -55,6 +56,16 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n+    # Test for Min and Max\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, Min(y, z))) == \"max(x, min(y, z))\"\n+\n+    # Edge cases: single argument\n+    assert prntr.doprint(Min(x)) == \"x\"\n+    assert prntr.doprint(Max(y)) == \"y\"\n+    \n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..fa113b7 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1181,8 +1181,22 @@ def test_lambdify_inspect():\n     # details\n     assert 'x**2' in inspect.getsource(f)\n \n+def test_single_element_tuple_lambdify():\n+    # Test single-element tuple with lambdify\n+    f = lambdify([], (1,))\n+    assert f() == (1,)\n \n-def test_issue_14941():\n+def test_empty_tuple_lambdify():\n+    # Test empty tuple to ensure it returns an empty tuple\n+    f = lambdify([], ())\n+    assert f() == ()\n+\n+def test_multi_element_tuple_lambdify():\n+    # Test multi-element tuple with lambdify\n+    f = lambdify([], (1, 2))\n+    assert f() == (1, 2)\n+\n+def test_lambdify_inspect():\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..f4b9b3b 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,10 +1,10 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n-\n-from sympy.testing.pytest import raises\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import disambiguate\n \n def test_Str():\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..f78feec 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -183,6 +183,10 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     assert _is_tensor_eq(st, t)\n \n \n+import sympy\n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, LorentzIndex, kahane_simplify\n+from sympy.tensor.tensor import tensor_indices\n+\n def test_kahane_algorithm():\n     # Wrap this function to convert to and from TIDS:\n \n@@ -261,8 +265,31 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n-\n-def test_gamma_matrix_class():\n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Test case where contracted gamma matrices are followed by uncontracted ones\n+    t1 = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r1 = kahane_simplify(t1)\n+    assert r1.equals(4*G(rho)*G(sigma)), f\"Failed test case 1: {r1}\"\n+\n+    # Test case where uncontracted gamma matrices precede contracted ones\n+    t2 = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r2 = kahane_simplify(t2)\n+    assert r2.equals(4*G(rho)*G(sigma)), f\"Failed test case 2: {r2}\"\n+\n+    # Additional test cases for more thorough checking\n+    t3 = G(rho)*G(mu)*G(-mu)*G(sigma)\n+    r3 = kahane_simplify(t3)\n+    assert r3.equals(4*G(rho)*G(sigma)), f\"Failed test case 3: {r3}\"\n+\n+    t4 = G(mu)*G(rho)*G(-mu)*G(sigma)\n+    r4 = kahane_simplify(t4)\n+    assert r4.equals(4*G(rho)*G(sigma)), f\"Failed test case 4: {r4}\"\n+\n+    t5 = G(sigma)*G(rho)*G(mu)*G(-mu)\n+    r5 = kahane_simplify(t5)\n+    assert r5.equals(4*G(sigma)*G(rho)), f\"Failed test case 5: {r5}\"\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..149daae 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,29 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+from sympy.core.numbers import E\n+from sympy.core import exp\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units import Quantity\n+\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..c20c174 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -549,6 +549,47 @@ def test_issue_24062():\n     C = Quantity('C')\n     T = Quantity('T')\n     SI.set_quantity_dimension(R, impedance)\n+\n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+    \n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_equivalent_dimension_handling():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    # Test with different scale factors\n+    v2 = Quantity('v2')\n+    SI.set_quantity_dimension(v2, velocity)\n+    SI.set_quantity_scale_factor(v2, 3 * meter / second)\n+\n+    a2 = Quantity('a2')\n+    SI.set_quantity_dimension(a2, acceleration)\n+    SI.set_quantity_scale_factor(a2, -9.8 * meter / second**2)\n+\n+    t2 = Quantity('t2')\n+    SI.set_quantity_dimension(t2, time)\n+    SI.set_quantity_scale_factor(t2, 5 * second)\n+\n+    expr2 = a2*t2 + v2\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr2)\n     SI.set_quantity_dimension(C, capacitance)\n     SI.set_quantity_dimension(T, time)\n     R.set_global_relative_scale_factor(1, ohm)\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..ab44351 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -5,6 +6,7 @@ from sympy.combinatorics.free_groups import free_group\n from sympy.combinatorics.fp_groups import FpGroup\n from sympy.combinatorics.named_groups import AlternatingGroup, DihedralGroup, CyclicGroup\n from sympy.testing.pytest import raises\n+from sympy.combinatorics.named_groups import DihedralGroup\n \n def test_homomorphism():\n     # FpGroup -> PermutationGroup\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..a19e511 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -270,7 +270,37 @@ def test_PolyElement_as_expr():\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n-def test_PolyElement_from_expr():\n+def test_as_expr_with_symbols():\n+    from sympy import ring, ZZ, symbols\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    # Test with symbols u, v, w\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test with insufficient symbols\n+    raises(ValueError, lambda: f.as_expr(U))\n+\n+    # Test with no symbols - should use default ring symbols\n+    assert f.as_expr() == f.as_expr(*R.symbols)\n+\n+    # Test with incorrect number of symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with additional symbol not used\n+    T = symbols(\"t\")\n+    raises(ValueError, lambda: f.as_expr(U, V, W, T))\n+\n+    # Test with same number of symbols where it should work\n+    Q, R, S = symbols(\"q,r,s\")\n+    g = 3*Q**2*R - Q*R*S + 7*S**3 + 1\n+    assert f.as_expr(Q, R, S) == g\n+\n+    # Edge case with no generators\n+    R, = ring(\"\", ZZ)\n+    assert R(3).as_expr() == 3\n     x, y, z = symbols(\"x,y,z\")\n     R, X, Y, Z = ring((x, y, z), ZZ)\n \n",
  "sympy__sympy-24661": "",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..4bceb74 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -31,6 +31,8 @@ from astropy.units.utils import is_effectively_unity\n         # unity grammar ([\"3.45 10**(-4)Jy\"], 3.45 * 1e-4 * u.Jy)\n         ([\"sqrt(m)\"], u.m**0.5),\n         ([\"dB(mW)\", \"dB (mW)\"], u.DecibelUnit(u.mW)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / u.m / u.s / u.kpc**2)),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / u.s / u.kpc**2)),\n         ([\"mag\"], u.mag),\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..9adb495 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1908,7 +1908,39 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(\n             gt_operation.describe(), \"Remove constraint test_remove_constraint_pony_pink_gt_2 from model Pony\"\n         )\n-        # Test state alteration\n+        \n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_or_operator(self):\n+        # Set up test model\n+        app_label = 'test_checkconstraint_or'\n+        constraint_name = 'check_constraint_or'\n+        from_state = self.set_up_test_model(app_label)\n+\n+        # Define the CheckConstraint\n+        check = models.Q(pink__gt=2, weight__gt=2) | models.Q(weight__lt=0)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('Pony', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+\n+        # Apply the constraint\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+\n+        Pony = to_state.apps.get_model(app_label, 'Pony')\n+        \n+        # Test data validity\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            Pony.objects.create(pink=2, weight=3.0)\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            Pony.objects.create(pink=3, weight=1.0)\n+        \n+        # Valid entries\n+        Pony.objects.bulk_create([\n+            Pony(pink=3, weight=-1.0),\n+            Pony(pink=1, weight=-1.0),\n+            Pony(pink=3, weight=3.0),\n+        ])\n         new_state = project_state.clone()\n         gt_operation.state_forwards(\"test_removeconstraint\", new_state)\n         self.assertEqual(len(new_state.models[\"test_removeconstraint\", \"pony\"].options['constraints']), 1)\n",
  "django__django-11477": "",
  "django__django-12273": "",
  "django__django-12965": "",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..213abd9 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,13 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value_dict(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        # The error message should indicate the value must be a decimal number\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        value = {}  # This is the specific test case related to the issue from the report.\n+        with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+            field.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..5975d01 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,14 +1,48 @@\n+\n import datetime\n import pickle\n \n import django\n from django.db import models\n from django.test import TestCase\n+from django.db.models import Sum\n \n from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n \n \n class PickleabilityTestCase(TestCase):\n+    \n+    def test_pickle_values_annotate(self):\n+        # Create test data\n+        Happening.objects.create(name='foo', when=datetime.datetime.now())\n+        Happening.objects.create(name='bar', when=datetime.datetime.now())\n+        Happening.objects.create(name='baz', when=datetime.datetime.now())\n+        \n+        # Create and test pickling of a values/annotate queryset\n+        qs = Happening.objects.values('name').annotate(latest_time=models.Max('when'))\n+        reloaded = Happening.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+        \n+        # Check that types match\n+        self.assertEqual(type(list(reloaded)[0]), dict)\n+        self.assertEqual(reloaded[0]['name'], 'foo')\n+        \n+    def test_pickle_values_list(self):\n+        # Create test data\n+        Happening.objects.create(name='foo', when=datetime.datetime.now())\n+        Happening.objects.create(name='bar', when=datetime.datetime.now())\n+        \n+        # Test with values_list\n+        tests = [\n+            Happening.objects.values_list('name'),\n+            Happening.objects.values_list('name', flat=True),\n+            Happening.objects.values_list('name', named=True),\n+        ]\n+        for qs in tests:\n+            with self.subTest(qs._iterable_class.__name__):\n+                reloaded = Happening.objects.all()\n+                reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+                self.assertIn(reloaded[0], ['foo', ('foo',)])\n     @classmethod\n     def setUpTestData(cls):\n         Happening.objects.create()  # make sure the defaults are working (#20158)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..a3803bf 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,7 +30,15 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n-    def test_widget(self):\n+    def test_unicode_characters(self):\n+        field = JSONField()\n+        # Test Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        # Test Emoji characters\n+        self.assertEqual(field.prepare_value({'emoji': '\ud83d\ude00\ud83d\udc31'}), '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test mixed language\n+        self.assertEqual(field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n \n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..8bde4aa 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6603,6 +6603,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n     @override_settings(APPEND_SLASH=True)\n+    \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix2/')\n+    def test_missing_slash_different_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix2' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/')\n+    def test_missing_slash_root_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6629,6 +6665,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True)\n+    \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix2/')\n+    def test_missing_slash_different_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix2' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/')\n+    def test_missing_slash_root_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..740ec52 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,47 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_serialize_missing_import_in_migration(self):\n+        \"\"\"\n+        Test to ensure missing import statements in migrations are handled properly.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+        \n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+        \n+        class MyMixin:\n+            pass\n+        \n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+        \n+        # Simulate a migration that would be generated for MyModel\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name='MyModel',\n+                    fields=[\n+                        ('name', MyField(primary_key=True, serialize=False)),\n+                    ],\n+                    options={\n+                        'abstract': False,\n+                    },\n+                    bases=(MyMixin, models.Model),\n+                )\n+            ],\n+            \"dependencies\": [],\n+        })\n+\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        # Execute the generated migration code to see if it runs without import errors\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n+        self.assertIn(\"from django.db import models\", output)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..4bb837d 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1624,6 +1624,24 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal.from_float(math.pi), places=6)\n \n+    def test_aggregate_with_default_after_annotate_with_sum(self):\n+        result = Book.objects.annotate(\n+            idx=F('id')\n+        ).aggregate(\n+            total=Sum('idx', default=0)\n+        )\n+        expected_total = Book.objects.aggregate(total=Coalesce(Sum('id'), 0))['total']\n+        self.assertEqual(result['total'], expected_total)\n+\n+    def test_aggregate_with_default_after_annotate_with_count(self):\n+        result = Author.objects.annotate(\n+            book_count=Count('book')\n+        ).aggregate(\n+            count_default=Count('book_count', default=1)\n+        )\n+        expected_count = Author.objects.aggregate(count_default=Coalesce(Count('book'), 1))['count_default']\n+        self.assertEqual(result['count_default'], expected_count)\n+\n     def test_aggregation_default_passed_another_aggregate(self):\n         result = Book.objects.aggregate(\n             value=Sum('price', filter=Q(rating__lt=3.0), default=Avg('pages') / 10.0),\n@@ -1642,4 +1660,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..b4a141f 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2984,10 +2984,23 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n         # Reverse is a no-op.\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Re-apply renaming when old and new names match (should be a no-op).\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Test renaming back to the original auto-generated name.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+            original_name = operation.old_name\n+        self.assertIndexNameExists(table_name, original_name)\n+\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..134eecb 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3487,6 +3487,40 @@ class FormFieldCallbackTests(SimpleTestCase):\n \n         NewForm = modelform_factory(Person, form=BaseForm, formfield_callback=callback)\n \n+\n+import django\n+from django.test import TestCase\n+from django import forms\n+from django.forms import modelform_factory\n+from .models import Person\n+\n+class ModelFormFactoryTests(TestCase):\n+\n+    def test_custom_callback_in_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class NewForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"id\", \"name\"]\n+                formfield_callback = callback\n+\n+        for field in NewForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_custom_callback_from_base_form_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        NewForm = modelform_factory(model=Person, form=BaseForm)\n+\n         class InheritedForm(NewForm):\n             pass\n \n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..6c574a0 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -8,6 +8,9 @@ from django.core.serializers.base import DeserializationError\n from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n+from django.core import serializers\n+from django.db import models, connection\n+from django.core.exceptions import FieldError\n from django.test.utils import isolate_apps\n from django.utils.translation import gettext_lazy, override\n \n@@ -15,6 +18,26 @@ from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n \n+class CustomManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().select_related(\"master\")\n+\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+\n+class TestTag(models.Model):\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+    objects = CustomManager()\n+\n+\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n+\n class JsonSerializerTestCase(SerializersTestBase, TestCase):\n     serializer_name = \"json\"\n     pkless_str = \"\"\"[\n@@ -154,7 +177,23 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n         with self.assertRaisesMessage(DeserializationError, expected):\n             list(serializers.deserialize(\"json\", test_string))\n \n-    def test_helpful_error_message_for_many2many_non_natural(self):\n+    def test_serialization_with_custom_manager_and_m2m(self):\n+        # Set up objects\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = TestModel.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+        \n+        # Attempt to serialize\n+        try:\n+            data = serializers.serialize(\"json\", [test_instance])\n+        except FieldError:\n+            self.fail(\"Serialization raised FieldError unexpectedly.\")\n+        \n+        # Check if the serialization is successful\n+        self.assertIsInstance(data, str)\n+        self.assertIn('\"model\": \"testmodel\"', data)\n+        self.assertIn('\"tags\": [', data)\n         \"\"\"\n         Invalid many-to-many keys should throw a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..12a42c0 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -222,7 +222,27 @@ def test_mpl_toolkits():\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n \n-def test_standard_norm():\n+@pytest.mark.skipif(platform.system() != 'Darwin' or platform.machine() != 'arm64',\n+                    reason=\"Test is specific to M1 Mac (macOS-ARM64)\")\n+def test_dpi_doubling_issue_m1_mac():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    \n+    def dump_load_get_dpi(fig):\n+        from io import BytesIO\n+        file = BytesIO()\n+        pickle.dump(fig, file)\n+        file.seek(0)\n+        fig2 = pickle.load(file)\n+        return fig2, fig2.dpi\n+\n+    fig = plt.figure()\n+    initial_dpi = fig.dpi\n+\n+    # Testing that unpickling doesn't change the dpi of a figure\n+    for _ in range(5):\n+        fig, dpi = dump_load_get_dpi(fig)\n+        assert dpi == initial_dpi, f\"Expected DPI to remain {initial_dpi}, but got {dpi}\"\n     assert type(pickle.loads(pickle.dumps(mpl.colors.LogNorm()))) \\\n         == mpl.colors.LogNorm\n \n",
  "pydata__xarray-3993": "",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..74d9050 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -112,6 +112,19 @@ def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n+\n+def test_bad_name_rgxs_with_comma_and_quantifier() -> None:\n+    \"\"\"Verify that regular expressions with commas and quantifiers are handled correctly.\"\"\"\n+    csv_regex_tests = [\n+        (r\"foo{1,3}\", [r\"foo{1,3}\"]),\n+        (r\"x{10,12},y{5,6}\", [r\"x{10,12}\", r\"y{5,6}\"]),\n+        (r\"(a{2,4},b{3,5})\", [r\"(a{2,4}\", r\"b{3,5})\"])\n+    ]\n+    \n+    for in_string, expected_patterns in csv_regex_tests:\n+        run_instance = Run([str(EMPTY_MODULE), rf\"--bad-name-rgxs={in_string}\"], exit=False)\n+        bad_names_rgxs: list[re.Pattern[Any]] = run_instance.linter.config.bad_names_rgxs\n+        assert bad_names_rgxs == [re.compile(pattern) for pattern in expected_patterns]\n     assert \"the-newest has an invalid format, should be a version string.\" in output.err\n \n \n@@ -124,6 +137,19 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n         )\n     output = capsys.readouterr()\n \n+def test_bad_name_rgxs_with_comma_and_quantifier() -> None:\n+    \"\"\"Verify that regular expressions with commas and quantifiers are handled correctly.\"\"\"\n+    csv_regex_tests = [\n+        (r\"foo{1,3}\", [r\"foo{1,3}\"]),\n+        (r\"x{10,12},y{5,6}\", [r\"x{10,12}\", r\"y{5,6}\"]),\n+        (r\"(a{2,4},b{3,5})\", [r\"(a{2,4}\", r\"b{3,5})\"])\n+    ]\n+    \n+    for in_string, expected_patterns in csv_regex_tests:\n+        run_instance = Run([str(EMPTY_MODULE), rf\"--bad-name-rgxs={in_string}\"], exit=False)\n+        bad_names_rgxs: list[re.Pattern[Any]] = run_instance.linter.config.bad_names_rgxs\n+        assert bad_names_rgxs == [re.compile(pattern) for pattern in expected_patterns]\n+\n     assertString = (\n         r\"Error in provided regular expression: [\\p{Han}a-z_][\\p{Han}a-z0-9_]{2,30}$ \"\n         r\"beginning at index 1: bad escape \\p\"\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..18396b3 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -133,6 +133,7 @@ def test_syntax_errors(expr: str, column: int, message: str) -> None:\n         \"if\",\n         \"else\",\n         \"while\",\n+        \"None\",\n     ),\n )\n def test_valid_idents(ident: str) -> None:\n",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..6fc6df1 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -266,8 +266,18 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n-\n-def test_pyfunction_signature(app):\n+def test_annotation_handling_for_None():\n+    # Test for 'signature' mode where None should not be a clickable link\n+    \n+    # Simulate the environment for 'signature'\n+    doctree = _parse_annotation(\"None\", mode='signature')\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert doctree[0]['reftype'] == \"obj\"  # Ensure it's not a class reference type\n+\n+    # Test for 'description' mode where None should be a clickable link\n+    doctree = _parse_annotation(\"None\", mode='description')\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert doctree[0]['reftype'] == \"obj\"  # 'None' should remain an object reference\n     text = \".. py:function:: hello(name: str) -> str\"\n     doctree = restructuredtext.parse(app, text)\n     assert_node(doctree, (addnodes.index,\n@@ -742,4 +752,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..7cba919 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,39 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_multiple_input_parameters_rendering(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+\n+        x3, x4 : int, optional\n+            Some integers.\n+\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: * **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+                     * **x3, x4** (:class:`int`, *optional*) -- Some integers.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of ``x1``, ``x2``.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of ``x1``, ``x2``.\n+        :type x2: :class:`array_like`\n+        :param x3: Some integers.\n+        :type x3: :class:`int`, *optional*\n+        :param x4: Some integers.\n+        :type x4: :class:`int`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..95849f8 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,9 +773,59 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n-\n @pytest.mark.sphinx(freshenv=True)\n-def test_module_index(app):\n+def test_type_and_rtype_ambiguous_class_lookup(app):\n+    text = \"\"\"\n+    .. py:class:: mod.A\n+    .. py:class:: mod.submod.A\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param mod.A a:\n+        :param mod.submod.A b:\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`A`\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod.submod\n+\n+    .. py:function:: f()\n+\n+        - :py:class:`A`\n+        - :py:class:`mod.A`\n+        - :py:class:`mod.submod.A`\n+\n+        :param A a: BUG: links to mod.A instead of mod.submod.A\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \"\"\"\n+    warnings_count = 0\n+    with sphinx_domains(app.env):\n+        doctree = restructuredtext.parse(app, text)\n+        warnings_count = len(app._warning.getvalue().strip().split('\\n'))\n+\n+    # We expect no warnings from this doctree\n+    assert warnings_count == 0\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n             \".. py:module:: sphinx.config\\n\"\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..42cd2d4 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,11 +1,15 @@\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n-\n+# example.py\n+_foo = None  #: :meta public:\n     :meta private:\n     \"\"\"\n-\n+# example.py\n+_foo = None  #: :meta public:\n def _public_function(name):\n     \"\"\"public_function is a docstring().\n-\n+# example.py\n+_foo = None  #: :meta public:\n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..0139db3 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -922,7 +922,8 @@ def test_info_field_list(app):\n             \"   :param age: blah blah\\n\"\n             \"   :type age: int\\n\"\n             \"   :param items: blah blah\\n\"\n-            \"   :type items: Tuple[str, ...]\\n\")\n+            \"   :type items: Tuple[str, ...]\\n\"\n+            \"   :param dict(str, str) opc_meta: blah blah\\n\")\n     doctree = restructuredtext.parse(app, text)\n     print(doctree)\n \n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..8bc0058 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,6 +1008,44 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_info_field_list_union_type(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:function:: process_data(data)\\n\"\n+            \"\\n\"\n+            \"   :param data: data to process\\n\"\n+            \"   :type data: list | dict | None\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree,\n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"function \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"process_data\"])],\n+                         [desc_content, nodes.field_list, nodes.field, (nodes.field_name,\n+                                                                        nodes.field_body)])]))\n+    assert_node(doctree[3][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"data\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"list\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [addnodes.literal_emphasis, \"None\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"data to process\")],))\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"list\",\n+                **{\"py:module\": \"example\", \"py:function\": \"process_data\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:function\": \"process_data\"})\n+    assert_node(doctree[3][1][0][0][1][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"None\",\n+                **{\"py:module\": \"example\", \"py:function\": \"process_data\"})\n+\n \n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..3f3f054 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -833,35 +833,27 @@ def test_autodoc_typehints_description(app):\n             '   docstring\\n'\n             in context)\n \n-\n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n-                                   'autodoc_typehints_description_target': 'documented'})\n-def test_autodoc_typehints_description_no_undoc(app):\n-    # No :type: or :rtype: will be injected for `incr`, which does not have\n-    # a description for its parameters or its return. `tuple_args` does\n-    # describe them, so :type: and :rtype: will be added.\n+                                   'autodoc_typehints_description_target': 'documented',\n+                                   'napoleon_numpy_docstring': False})\n+def test_autodoc_typehints_description_with_napoleon(app):\n+    # Test case to verify that autodoc_typehints_description_target is respected with Napoleon\n+    # and that return types are added to the documentation.\n     (app.srcdir / 'index.rst').write_text(\n-        '.. autofunction:: target.typehints.incr\\n'\n-        '\\n'\n-        '.. autofunction:: target.typehints.tuple_args\\n'\n+        '.. autofunction:: target.typehints.decr\\n'\n         '\\n'\n-        '   :param x: arg\\n'\n-        '   :return: another tuple\\n'\n+        '   :returns: decremented number\\n'\n     )\n     app.build()\n     context = (app.outdir / 'index.txt').read_text()\n-    assert ('target.typehints.incr(a, b=1)\\n'\n-            '\\n'\n-            'target.typehints.tuple_args(x)\\n'\n-            '\\n'\n-            '   Parameters:\\n'\n-            '      **x** (*Tuple**[**int**, **Union**[**int**, **str**]**]*) -- arg\\n'\n+    assert ('target.typehints.decr(a, b=1)\\n'\n             '\\n'\n             '   Returns:\\n'\n-            '      another tuple\\n'\n+            '      decremented number\\n'\n             '\\n'\n             '   Return type:\\n'\n+            '      int\\n'\n             '      Tuple[int, int]\\n'\n             in context)\n \n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..cbee744 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,7 +1048,15 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n-def test_conditionset():\n+from sympy import Eq, sin, cos, Symbol, ConditionSet, Reals\n+\n+def test_issue_18188():\n+    x = Symbol('x')\n+    result1 = Eq(x*cos(x) - 3*sin(x), 0)\n+    assert result1.as_set() == ConditionSet(x, Eq(x*cos(x) - 3*sin(x), 0), Reals)\n+\n+    result2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert result2.as_set() == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..42d2d24 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3330,6 +3330,23 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n+from sympy import Symbol, sqf_list\n+\n+def test_issue_8695():\n+    x = Symbol('x')\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n+\n+def test_issue_8695_additional_cases():\n+    x = Symbol('x')\n+    # Test the polynomial with nested multiplicity\n+    assert sqf_list((x - 2)**6) == (1, [(x - 2, 6)])\n+    # Test a polynomial with multiple distinct factors\n+    assert sqf_list((x - 1) * (x - 2) * (x - 3)) == (1, [(x - 1, 1), (x - 2, 1), (x - 3, 1)])\n+    # Test a polynomial with all powers of x\n+    assert sqf_list(x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2) == (1, [(x - 2, 1), (x**2 - 1, 2)])\n+\n def test_issue_18205():\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..c45ced4 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -249,6 +249,8 @@ def test_Poly_from_poly():\n         h, gens=(x, y), field=True).rep == DMP([[QQ(1)], [QQ(1), QQ(0)]], QQ)\n \n \n+from sympy import expand, factor, symbols, I\n+\n def test_Poly_from_expr():\n     raises(GeneratorsNeeded, lambda: Poly.from_expr(S.Zero))\n     raises(GeneratorsNeeded, lambda: Poly.from_expr(S(7)))\n@@ -3255,7 +3257,17 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+def test_issue_18895():\n+    x, y = symbols('x y')\n+    \n+    # Original expression\n+    z = expand((x - 1)*(y - 1))\n+    \n+    # Test without extension\n+    assert factor(z) == (x - 1)*(y - 1)\n+    \n+    # Test with extension [I]\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..853a532 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,12 @@\n+\n+from sympy import Symbol\n+\n+def test_symbol_dict_attribute():\n+    \"\"\"Test if Symbol instances have __dict__ attribute.\"\"\"\n+    s = Symbol('s')\n+    assert hasattr(s, '__dict__')\n+    assert s.__dict__ == {}\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..7414860 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -370,6 +370,8 @@ def test_Rational_new():\n     assert n.p == -2\n \n \n+from sympy import Rational\n+\n def test_Number_new():\n     \"\"\"\"\n     Test for Number constructor\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..ffe215e 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundfield_choicewidget_subwidget_id_for_label(self):\n+        \"\"\"\n+        Check that the BoundWidget id_for_label correctly uses the id from ChoiceWidget.options\n+        when a custom auto_id is provided.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'})\n+            )\n+        \n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Expect the custom_id to be used for the label id\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..50fdf90 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -302,7 +302,64 @@ def test_tool_line_handle():\n     assert tool_line_handle.positions == positions\n \n \n-def check_lasso_selector(**kwargs):\n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n+# Additional tests to ensure complete coverage\n+def test_span_selector_no_zero_inclusion_horizontal():\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 20])\n+    tool = widgets.SpanSelector(ax, print, \"horizontal\", interactive=True)\n+    x_bound_before = ax.get_xbound()\n+\n+    # Triggering selector actions\n+    do_event(tool, 'press', xdata=15, ydata=15, button=1)\n+    do_event(tool, 'release', xdata=18, ydata=18, button=1)\n+    \n+    # Assert that x-boundaries remain unchanged and don't include zero\n+    assert ax.get_xbound() == x_bound_before\n+\n+def test_span_selector_no_zero_inclusion_vertical():\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 20])\n+    tool = widgets.SpanSelector(ax, print, \"vertical\", interactive=True)\n+    y_bound_before = ax.get_ybound()\n+\n+    # Triggering selector actions\n+    do_event(tool, 'press', xdata=15, ydata=15, button=1)\n+    do_event(tool, 'release', xdata=18, ydata=18, button=1)\n+    \n+    # Assert that y-boundaries remain unchanged and don't include zero\n+    assert ax.get_ybound() == y_bound_before\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..06ff843 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_sparse_coder_lasso_cd_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..502518b 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -143,8 +143,23 @@ def test_multi_target_sample_weights():\n     y = [[3.141, 2.718], [3.141, 2.718], [2.718, 3.141]]\n     rgr = MultiOutputRegressor(GradientBoostingRegressor(random_state=0))\n     rgr.fit(X, y)\n-\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n+\n+def test_multi_output_classifier_predict_proba():\n+    # Generate a random multilabel classification problem\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=42)\n+    # Use a MultiOutputClassifier with a simple classifier that supports predict_proba\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # Check no errors occur during cross_val_predict with predict_proba\n+    predictions_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+    \n+    # Assert that predictions_proba is a list of arrays with probabilities\n+    assert isinstance(predictions_proba, list)\n+    assert len(predictions_proba) == Y.shape[1]  # One array per output\n+    for pred in predictions_proba:\n+        assert isinstance(pred, np.ndarray)\n+        assert pred.shape == (X.shape[0], len(np.unique(Y)))  # Each should have shape (n_samples, n_classes)\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..097ec2c 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -169,8 +169,27 @@ def test_restify_type_union_operator():\n def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n \n-\n-def test_stringify():\n+def test_restify_inherited_mock():\n+    with mock(['torch.nn']):\n+        import torch\n+        class MockedModule:\n+            __module__ = 'torch.nn'\n+            __name__ = 'Module'\n+        class InheritedMockClass(MockedModule):\n+            pass\n+        \n+        assert restify(InheritedMockClass) == ':py:class:`torch.nn.Module`'\n+\n+def test_stringify_inherited_mock():\n+    with mock(['torch.nn']):\n+        import torch\n+        class MockedModule:\n+            __module__ = 'torch.nn'\n+            __name__ = 'Module'\n+        class InheritedMockClass(MockedModule):\n+            pass\n+        \n+        assert stringify(InheritedMockClass) == 'torch.nn.Module'\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n     assert stringify(None) == \"None\"\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..4d4b504 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,13 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+def test_issue_13546():\n+    from sympy import S, Symbol, Product\n+    from sympy.abc import n, k\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    assert p.subs(n, 3).doit() == S(105)/8\n+    assert p.subs(n, 4).doit() == S(1155)/16\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +362,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}