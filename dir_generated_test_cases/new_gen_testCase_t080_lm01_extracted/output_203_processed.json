{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..a1bff66 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -52,6 +52,20 @@ compound_models = {\n     'cm7': (map2 | p2 & sh1,\n             (np.array([False, True]),\n              np.array([[True, False], [False, True]]))\n+            ),\n+    'cm12': (m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Linear1D(5)),\n+            (np.array([False, False, True, True]),\n+             np.array([[True,  True, False, False],\n+                       [True,  True, False, False],\n+                       [False, False, True,  False],\n+                       [False, False, False, True]]))\n+            ),\n+    'cm13': (m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5),\n+            (np.array([False, False, True, True]),\n+             np.array([[True,  True, False, False],\n+                       [True,  True, False, False],\n+                       [False, False,  True, False],\n+                       [False, False, False,  True]]))\n             )\n }\n \n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..157d73e 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,54 @@\n+\n+def test_rst_write_with_header_rows():\n+    \"\"\"Test writing a QTable with header_rows specified in RST format\"\"\"\n+    tbl = QTable({\n+        'wave': [350, 950] * u.nm,\n+        'response': [0.7, 1.2] * u.count\n+    })\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    expected = [\n+        \"===== ========\",\n+        \" wave response\",\n+        \" nm       ct\",\n+        \"===== ========\",\n+        \"350.0      0.7\",\n+        \"950.0      1.2\",\n+        \"===== ========\",\n+    ]\n+    assert out.getvalue().splitlines() == expected\n+\n+def test_rst_roundtrip_with_header_rows():\n+    \"\"\"Test round-trip read/write of a QTable with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n \n from astropy.io import ascii\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..478132e 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -42,8 +42,75 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert table2.meta[\"comments\"][0].startswith(\"WT -- hardness\")\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n+import pytest\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+import numpy as np\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+def test_lowercase_commands(tmp_path):\n+    lower_case_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    read terr 1\n+    read serr 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    ! WT -- soft data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592\n+    NO NO NO NO NO\n+    ! WT -- hardness ratio\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    ! Add command, just to raise the warning.\n+    read terr 1\n+    ! WT -- whatever\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    \"\"\"\n+\n+    path = str(tmp_path / \"test_lower.qdp\")\n+    path2 = str(tmp_path / \"test_lower_out.qdp\")\n \n-def test_roundtrip(tmp_path):\n+    with open(path, \"w\") as fp:\n+        print(lower_case_qdp, file=fp)\n+    with pytest.warns(AstropyUserWarning) as record:\n+        table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n+    assert np.any(\n+        [\n+            \"This file contains multiple command blocks\" in r.message.args[0]\n+            for r in record\n+        ]\n+    )\n+\n+    _write_table_qdp(table, path2)\n+\n+    new_table = _read_table_qdp(path2, names=[\"MJD\", \"Rate\"], table_id=0)\n+\n+    for col in new_table.colnames:\n+        is_masked = np.array([np.ma.is_masked(val) for val in new_table[col]])\n+        if np.any(is_masked):\n+            # All NaN values are read as such.\n+            assert np.ma.is_masked(table[col][is_masked])\n+\n+        is_nan = np.array(\n+            [(not np.ma.is_masked(val) and np.isnan(val)) for val in new_table[col]]\n+        )\n+        # All non-NaN values are the same\n+        assert np.allclose(new_table[col][~is_nan], table[col][~is_nan])\n+        if np.any(is_nan):\n+            # All NaN values are read as such.\n+            assert np.isnan(table[col][is_nan])\n+    assert np.allclose(new_table[\"MJD_perr\"], [2.378472e-05, 1.1446759e-05])\n+\n+    for meta_name in [\"initial_comments\", \"comments\"]:\n+        assert meta_name in new_table.meta\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n     ! Columns are as labelled\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..47bca52 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -31,6 +31,45 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n # Test with Data covers:\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n+\n+def test_nddata_mask_propagation():\n+    import numpy as np\n+    from astropy.nddata import NDDataRef\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply mask by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_mask.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply mask by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply mask by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+    \n+    # Test other operations to ensure consistent behavior\n+    # Add operation with no mask\n+    assert nref_nomask.add(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # Add operation with mask\n+    np.testing.assert_equal(\n+        nref_mask.add(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n @pytest.mark.parametrize(\n     (\"data1\", \"data2\"),\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..783fc1e 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -245,6 +245,19 @@ class TestTableFunctions(FitsTestCase):\n         # Change scaled field and scale back to the original array\n         t[1].data.field('c4')[0] = 1\n         t[1].data._scale_back()\n+\n+    def test_D_exponent_handling(self):\n+        # Test 'D' exponent in ASCII table\n+        r1 = np.array([3.14e10, 6.28e20])\n+        c1 = fits.Column(name='exp_data', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1])\n+        hdu.writeto(self.temp('d_exponent_test.fits'), overwrite=True)\n+        with open(self.temp('d_exponent_test.fits')) as f:\n+            content = f.read()\n+            assert '3.14000000000000000D+10' in content\n+            assert '6.28000000000000000D+20' in content\n+        with fits.open(self.temp('d_exponent_test.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n         assert str(np.rec.recarray.field(t[1].data, 'c4')) == '[84 84]'\n \n         # look at data column-wise\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..a01b600 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Default FILE_UPLOAD_PERMISSIONS should be 0o644 if not explicitly set.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..51941c6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -376,7 +376,37 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertEqual(str(qs.query).count('JOIN'), 2)\n \n-    def test_order_by_exists(self):\n+    def test_order_by_multiline_rawsql(self):\n+        # Test for multiline RawSQL statements in order_by clause\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN status IN ('accepted', 'verification')\n+                     THEN 2 ELSE 1 END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN status IN ('accepted', 'verification')\n+                     THEN (accepted_datetime, preferred_datetime)\n+                     ELSE null END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN status NOT IN ('accepted', 'verification')\n+                     THEN (accepted_datetime, preferred_datetime, created_at)\n+                     ELSE null END\n+            ''', []).desc()\n+        )\n+        \n+        MyModel.objects.create(status='accepted', accepted_datetime='2023-01-01', preferred_datetime='2023-01-02', created_at='2023-01-03')\n+        MyModel.objects.create(status='verification', accepted_datetime='2023-01-01', preferred_datetime='2023-01-02', created_at='2023-01-03')\n+        MyModel.objects.create(status='other', accepted_datetime='2023-01-02', preferred_datetime='2023-01-01', created_at='2023-01-04')\n+\n+        queryset = MyModel.objects.all().order_by(*raw_order_by)\n+        results = list(queryset)\n+\n+        # We expect all entries to be sorted correctly without removing any order_by clause\n+        self.assertEqual(len(results), 3)\n+        self.assertEqual(results[0].status, 'accepted')\n+        self.assertEqual(results[1].status, 'verification')\n+        self.assertEqual(results[2].status, 'other')\n         mary = Employee.objects.create(firstname='Mary', lastname='Mustermann', salary=20)\n         mustermanns_by_seniority = Employee.objects.filter(lastname='Mustermann').order_by(\n             # Order by whether the employee is the CEO of a company\n",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..896f3f6 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,23 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_username_with_trailing_newline(self):\n+        # These usernames should be considered invalid because they end with a newline character.\n+        invalid_usernames = ['username\\n', 'testuser\\n', '\\n']\n+\n+        # Test UnicodeUsernameValidator\n+        v_unicode = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v_unicode(invalid)\n+        \n+        # Test ASCIIUsernameValidator\n+        v_ascii = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v_ascii(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +274,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..59c6988 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,10 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..a6a23d3 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,7 +1,9 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n+from django.db.models.deletion import Collector\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n from .models import (\n@@ -464,7 +466,22 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Test case for the issue: delete() should set PK to None for models without dependencies\n+        u = User.objects.create()\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))  # Ensures fast-deletion is possible\n+        u.delete()\n+        self.assertIsNone(u.pk)  # Assert PK is None after deletion\n+\n+    def test_fast_delete_instance_with_dependencies(self):\n+        # Test case to ensure behavior with dependencies is not affected\n+        a = Avatar.objects.create(desc='avatar')\n+        user = User.objects.create(avatar=a)\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(user))  # User has dependencies, cannot be fast-deleted\n+        user.delete()\n+        self.assertIsNone(user.pk)  # Assert PK is None after deletion\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..1063b38 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,11 +1,12 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n-from django.contrib.auth.models import Permission, User\n+from django.contrib.auth.models import Permission, User, Group\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n \n-from .models import Proxy, UserProxy\n+from .models import Proxy, UserProxy, ConcreteModel, ConvertedProxyModel\n \n update_proxy_permissions = import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')\n \n@@ -140,6 +141,52 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Permissions may already exist:\n+\n+        - Old workaround was to manually create permissions for proxy models.\n+        - Model may have been concrete and then converted to proxy.\n+\n+        Output a reminder to audit relevant permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_no_duplicate_permission_on_migration(self):\n+        \"\"\"\n+        Ensure no duplicate permissions are created when migrating a model that\n+        was converted from concrete to proxy.\n+        \"\"\"\n+        concrete_content_type = ContentType.objects.get_for_model(ConcreteModel, for_concrete_model=True)\n+        proxy_content_type = ContentType.objects.get_for_model(ConvertedProxyModel, for_concrete_model=False)\n+        \n+        Permission.objects.create(\n+            content_type=concrete_content_type,\n+            codename='add_convertedproxymodel',\n+            name='Can add converted proxy model',\n+        )\n+        \n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+\n+        # Ensure the permission count is 1, meaning no duplicate creation\n+        self.assertEqual(Permission.objects.filter(\n+            codename='add_convertedproxymodel',\n+            content_type=proxy_content_type\n+        ).count(), 1)\n+\n     def test_user_keeps_same_permissions_after_migrating_backward(self):\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..a8e5d25 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -19,7 +19,8 @@ from django.test.utils import extend_sys_path\n from django.utils import autoreload\n from django.utils.autoreload import WatchmanUnavailable\n \n-from .utils import on_macos_with_hfs\n+import sys\n+from pathlib import Path\n \n \n class TestIterModulesAndFiles(SimpleTestCase):\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..4822e2f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -134,6 +134,20 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n     def test_main_module_is_resolved(self):\n         main_module = sys.modules['__main__']\n+\n+    def test_iter_modules_and_files_handles_embedded_null_bytes(self):\n+        # Test paths with embedded null byte\n+        test_paths = [\n+            'embedded_null_byte\\x00.py',\n+            'di\\x00rectory/embedded_null_byte.py',\n+            '/Users/kez\\x00/.pyenv/versions/3.6.2/lib/python3.6/site.py',\n+        ]\n+        for path in test_paths:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n         self.assertFileFound(Path(main_module.__file__))\n \n     def test_main_module_without_file_is_not_resolved(self):\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..515d3ed 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -10,6 +10,8 @@ from pathlib import Path\n from unittest import mock\n \n from django.core import mail\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.db import DatabaseError, connection\n from django.shortcuts import render\n@@ -242,7 +244,45 @@ class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n-    def test_handle_db_exception(self):\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test that raising Http404 in a path converter's to_python method\n+        results in a technical 404 response when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_technical_404_converter_custom_message(self):\n+        \"\"\"\n+        Test that a custom message in Http404 is displayed in the response when\n+        DEBUG is True.\n+        \"\"\"\n+        custom_message = \"Custom 404 message for path converter.\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404(custom_message)):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, custom_message, status_code=404)\n+\n+    def test_technical_404_converter_different_converter(self):\n+        \"\"\"\n+        Test that a different converter raising Http404 results in a technical 404 response.\n+        \"\"\"\n+        class CustomConverter:\n+            regex = '[0-9]+'\n+\n+            def to_python(self, value):\n+                raise Http404(\"Custom 404 from CustomConverter.\")\n+\n+            def to_url(self, value):\n+                return str(value)\n+\n+        # Register the custom converter\n+        with mock.patch('django.urls.converters.register_converter') as mock_register:\n+            mock_register(CustomConverter, 'custom')\n+\n+            # Simulate a URL using the custom converter\n+            response = self.client.get('/custom-path/123/')\n+            self.assertContains(response, 'Custom 404 from CustomConverter.', status_code=404)\n         \"\"\"\n         Ensure the debug view works when a database exception is raised by\n         performing an invalid query and passing the exception to the debug view.\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..a9a0af9 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -333,6 +333,31 @@ class CharFieldTests(SimpleTestCase):\n                 id='fields.E008',\n             ),\n         ])\n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n     @unittest.skipUnless(connection.vendor == 'mysql',\n                          \"Test valid only for MySQL\")\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..c4bfc4c 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -251,8 +251,29 @@ class WriterTests(SimpleTestCase):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n-\n-    def test_serialize_enums(self):\n+    def test_serialize_enum_using_name_instead_of_value(self):\n+        from enum import Enum\n+        from django.utils.translation import gettext_lazy as _\n+        from django.db import models\n+        from django.db.migrations.writer import MigrationWriter\n+\n+        class TranslatedEnum(Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(\n+            default=TranslatedEnum.GOOD,\n+            choices=[(tag.name, tag.value) for tag in TranslatedEnum],\n+            max_length=128\n+        )\n+        string, imports = MigrationWriter.serialize(field)\n+        expected_string = (\n+            \"models.CharField(choices=[\" \n+            \"('GOOD', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('BAD', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'], max_length=128)\"\n+        )\n+        self.assertEqual(string, expected_string)\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..43b71e8 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,7 +318,27 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mock(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..06b3b43 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,8 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.test import SimpleTestCase\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n@@ -40,7 +42,28 @@ class Gender(models.TextChoices):\n     __empty__ = '(Undeclared)'\n \n \n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", \"The first choice, it is\"\n+    SECOND_CHOICE = \"second\", \"The second choice, it is\"\n+\n+class MyIntegerChoice(models.IntegerChoices):\n+    FIRST_CHOICE = 1, 'The first choice'\n+    SECOND_CHOICE = 2, 'The second choice'\n+\n+class MyTestModel(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+    my_int_value = models.IntegerField(choices=MyIntegerChoice.choices)\n+\n class ChoicesTests(SimpleTestCase):\n+    def test_textchoices_str_value(self):\n+        instance = MyTestModel(my_str_value=MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(instance.my_str_value, str)\n+        self.assertEqual(instance.my_str_value, \"first\")\n+\n+    def test_integerchoices_int_value(self):\n+        instance = MyTestModel(my_int_value=MyIntegerChoice.FIRST_CHOICE)\n+        self.assertIsInstance(instance.my_int_value, int)\n+        self.assertEqual(instance.my_int_value, 1)\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..dbde0f7 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -168,7 +168,18 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsInstance(val, str)\n         self.assertEqual(val, 'translated')\n \n-    def test_iterator_choices(self):\n+    def test_overriding_get_FIELD_display(self):\n+        \"\"\"\n+        Ensure that overriding get_FIELD_display() works correctly.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         \"\"\"\n         get_choices() works with Iterators.\n         \"\"\"\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..4df991a 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -11,7 +11,8 @@ urlpatterns = [\n     path('users/<id>/', views.empty_view, name='user-with-id'),\n     path('included_urls/', include('urlpatterns.included_urls')),\n     re_path(r'^regex/(?P<pk>[0-9]+)/$', views.empty_view, name='regex'),\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.empty_view, name='modules'),\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+]\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..89e6272 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,4 @@\n+\n import pickle\n \n from django import forms\n@@ -148,7 +149,26 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n-class GetFieldDisplayTests(SimpleTestCase):\n+class InheritedChoicesDisplayTests(TestCase):\n+    def test_inherited_choices_display(self):\n+        \"\"\"\n+        Test that get_FOO_display() works correctly with inherited choices.\n+        \"\"\"\n+        class Base(models.Model):\n+            foo_choice = [('A', 'Base A'), ('B', 'Base B')]\n+            foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo_choice = [('A', 'Child A'), ('B', 'Child B'), ('C', 'Child C')]\n+            foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+        # Testing the Child model's get_foo_display\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+        self.assertEqual(Child(foo='C').get_foo_display(), 'Child C')  # This should pass with the fix\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..f6b8957 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,12 +76,37 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('en', 'English'),\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_valid_sublanguage_fallback(self):\n+        # This test ensures that if a base language is available, no error is raised for a sublanguage\n+        tests = [\n+            # Base language 'de' is available, so 'de-at' should not raise an error\n+            'de-at',\n+            # Base language 'es' is available, so 'es-419' should not raise an error\n+            'es-419',\n+            # Base language 'fr' is available, so 'fr-CA' should not raise an error\n+            'fr-CA',\n+            # Base language 'ca' is available, so 'ca-ES-valencia' should not raise an error\n+            'ca-ES-valencia',\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag=tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n+    @override_settings(USE_I18N=True, LANGUAGES=[('en', 'English')])\n     def test_inconsistent_language_settings(self):\n-        msg = (\n-            'You have provided a value for the LANGUAGE_CODE setting that is '\n-            'not in the LANGUAGES setting.'\n-        )\n-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n-            self.assertEqual(check_language_settings_consistent(None), [\n-                Error(msg, id='translation.E004'),\n-            ])\n+        msg = 'You have provided a value for the LANGUAGE_CODE setting that is not in the LANGUAGES setting.'\n+        for tag in ['fr', 'fr-CA', 'fr-357']:\n+            with self.subTest(tag=tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [\n+                    Error(msg, id='translation.E004'),\n+                ])\n",
  "django__django-12308": "",
  "django__django-12453": "",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..1f41377 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,6 +159,28 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_correct_hint_for_recursive_relationship(self):\n+        class SelfReferencingModel(models.Model):\n+            field = models.ManyToManyField('self', through=\"SelfReferencingRelationship\")\n+\n+        class SelfReferencingRelationship(models.Model):\n+            from_self = models.ForeignKey(SelfReferencingModel, models.CASCADE, related_name='from_self')\n+            to_self = models.ForeignKey(SelfReferencingModel, models.CASCADE, related_name='to_self')\n+\n+        field = SelfReferencingModel._meta.get_field('field')\n+        errors = field.check(from_model=SelfReferencingModel)\n+        self.assertEqual(len(errors), 1)\n+        error = errors[0]\n+        self.assertIsInstance(error, Error)\n+        self.assertIn(\n+            \"You must specify which foreign key Django should use via the through_fields keyword argument.\",\n+            error.msg,\n+        )\n+        self.assertIn(\n+            'If you want to create a recursive relationship, use ManyToManyField(\"self\", through=\"SelfReferencingRelationship\").',\n+            error.hint,\n+        )\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..fcb2bf8 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -46,7 +46,47 @@ class MigrationTestBase(TransactionTestCase):\n     def assertColumnNotExists(self, table, column, using='default'):\n         self.assertNotIn(column, [c.name for c in self.get_table_description(table, using=using)])\n \n-    def _get_column_allows_null(self, table, column, using):\n+    class MigrationTestCase(TestCase):\n+        def set_up_test_model(self, app_label, unique_together=False, index_together=False):\n+            # Set up initial model state for testing.\n+            operations = [\n+                migrations.CreateModel(\n+                    name='Pony',\n+                    fields=[\n+                        ('id', models.AutoField(primary_key=True)),\n+                        ('pink', models.CharField(max_length=255)),\n+                        ('weight', models.IntegerField()),\n+                    ],\n+                    options={\n+                        'unique_together': {('pink', 'weight')} if unique_together else set(),\n+                        'index_together': {('pink', 'weight')} if index_together else set(),\n+                    },\n+                ),\n+            ]\n+            return self.apply_operations(app_label, ProjectState(), operations)\n+\n+        @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+        def test_alter_index_together_remove_with_unique_together(self):\n+            app_label = 'test_alintoremove_wunto'\n+            table_name = '%s_pony' % app_label\n+            project_state = self.set_up_test_model(app_label, unique_together=True)\n+            self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+            # Add index together.\n+            new_state = project_state.clone()\n+            operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+            operation.state_forwards(app_label, new_state)\n+            with connection.schema_editor() as editor:\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            self.assertIndexExists(table_name, ['pink', 'weight'])\n+            # Remove index together.\n+            project_state = new_state\n+            new_state = project_state.clone()\n+            operation = migrations.AlterIndexTogether('Pony', set())\n+            operation.state_forwards(app_label, new_state)\n+            with connection.schema_editor() as editor:\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+            self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n         return [c.null_ok for c in self.get_table_description(table, using=using) if c.name == column][0]\n \n     def assertColumnNull(self, table, column, using='default'):\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..c308d25 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,6 +685,32 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n+    def test_delete_zero_objects_including_foreign_keys(self):\n+        \"\"\"\n+        Test that deleting zero objects from models with foreign keys\n+        returns a consistent result in the format (0, {'model_label': 0}).\n+        \"\"\"\n+        # Assuming ForeignKeyModel has a foreign key relationship\n+        deleted, deleted_objs = ForeignKeyModel.objects.filter(id=-1).delete()\n+        self.assertEqual(deleted, 0)\n+        expected_result = {\n+            ForeignKeyModel._meta.label: 0\n+        }\n+        self.assertEqual(deleted_objs, expected_result)\n+\n+    def test_delete_zero_objects_no_foreign_keys(self):\n+        \"\"\"\n+        Test that deleting zero objects from simple models without foreign keys\n+        returns a consistent result in the format (0, {'model_label': 0}).\n+        \"\"\"\n+        # Assuming SimpleModel is a model without foreign keys\n+        deleted, deleted_objs = SimpleModel.objects.filter(id=-1).delete()\n+        self.assertEqual(deleted, 0)\n+        expected_result = {\n+            SimpleModel._meta.label: 0\n+        }\n+        self.assertEqual(deleted_objs, expected_result)\n+\n     def test_fast_delete_empty_no_update_can_self_select(self):\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..d86baa9 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -94,6 +94,87 @@ class ASGITest(SimpleTestCase):\n             ),\n         )\n         await communicator.send_input({'type': 'http.request'})\n+\n+from django.contrib.staticfiles.handlers import ASGIStaticFilesHandler\n+from django.core.handlers.asgi import ASGIHandler\n+from django.test import AsyncRequestFactory\n+from daphne.testing import ApplicationCommunicator\n+from asgiref.testing import ApplicationCommunicator\n+from django.core.asgi import get_asgi_application\n+\n+class TestASGIStaticFilesHandler(SimpleTestCase):\n+    async_request_factory = AsyncRequestFactory()\n+\n+    @modify_settings(INSTALLED_APPS={'append': 'django.contrib.staticfiles'})\n+    @override_settings(\n+        STATIC_URL='/static/',\n+        STATIC_ROOT=TEST_STATIC_ROOT,\n+        STATICFILES_DIRS=[TEST_STATIC_ROOT],\n+        STATICFILES_FINDERS=[\n+            'django.contrib.staticfiles.finders.FileSystemFinder',\n+        ],\n+    )\n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 200)\n+        response.close()\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n+    # Additional test to ensure that the async handler can handle an empty request.\n+    async def test_empty_request(self):\n+        request = self.async_request_factory.get('')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        # Here, we expect a 404 because the request path is empty and does not correspond to a valid static file.\n+        self.assertEqual(response.status_code, 404)\n+\n+    # Test to ensure that malformed requests are handled gracefully.\n+    async def test_malformed_request(self):\n+        scope = self.async_request_factory._base_scope(path=None)\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 400)\n+        await communicator.wait()\n         response_start = await communicator.receive_output()\n         self.assertEqual(response_start['type'], 'http.response.start')\n         self.assertEqual(response_start['status'], 200)\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..ee4de13 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,13 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Additional test cases for the issue fix\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('---Django Slugify Test___', 'django-slugify-test', False),\n+            ('__Leading and trailing___', 'leading-and-trailing', False),\n+            ('-Only dashes-', 'only-dashes', False),\n+            ('_Only underscores_', 'only-underscores', False),\n+            ('Mixed___-__characters--_', 'mixed-characters', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..53a93b5 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -45,7 +46,19 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__lte=4)\n         self.assertNumbersEqual(qs1.difference(qs2), [5], ordered=False)\n \n-    def test_union_distinct(self):\n+    def test_union_with_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        self.assertEqual(qs3.none().count(), 0)\n+        self.assertNumbersEqual(qs3.none(), [], ordered=False)\n+\n+    def test_union_with_none_and_empty_result(self):\n+        qs1 = Number.objects.none()\n+        qs2 = Number.objects.none()\n+        qs3 = qs1.union(qs2)\n+        self.assertEqual(qs3.count(), 0)\n+        self.assertNumbersEqual(qs3.none(), [], ordered=False)\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.all()\n         self.assertEqual(len(list(qs1.union(qs2, all=True))), 20)\n@@ -313,4 +326,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..ca46826 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2829,9 +2829,80 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+from django.test.utils import isolate_apps\n+from django import forms\n+from .models import Character, StumpJoke\n \n class FormFieldCallbackTests(SimpleTestCase):\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Create some characters\n+        marley = Character.objects.create(username='Marley', last_action='2023-09-30')\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-09-30')\n+\n+        # Create jokes\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        # Adding characters to jokes\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        # Define CharacterDetails model dynamically\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        # Define form for CharacterDetails\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+\n+        # Assert no duplicates in the queryset\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n+\n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n         widget = forms.Textarea()\n",
  "django__django-13321": "",
  "django__django-13401": "",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..699a212 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,7 +45,40 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n-    def test_available_apps(self):\n+    def test_model_class_in_app_list(self):\n+        # Create a mock request\n+        request = RequestFactory().get('/admin/')\n+        site = AdminSite()\n+\n+        # Fetch the app list\n+        app_list = site.get_app_list(request)\n+\n+        # Check that the Article model has the correct class in the 'model' field\n+        for app in app_list:\n+            for model in app['models']:\n+                if model['object_name'] == 'Article':\n+                    self.assertEqual(model['model'], Article)\n+\n+                if model['object_name'] == 'User':\n+                    self.assertEqual(model['model'], User)\n+\n+    def test_public_build_app_dict(self):\n+        # Create a mock request\n+        request = RequestFactory().get('/admin/')\n+        site = AdminSite()\n+\n+        # Use the _build_app_dict method directly\n+        app_dict = site._build_app_dict(request)\n+\n+        # Ensure the structure is as expected and contains model information\n+        self.assertIn('admin_views', app_dict)\n+        self.assertIn('auth', app_dict)\n+        \n+        admin_views_models = app_dict['admin_views']['models']\n+        auth_models = app_dict['auth']['models']\n+\n+        self.assertTrue(any(model['object_name'] == 'Article' and model.get('model') == Article for model in admin_views_models))\n+        self.assertTrue(any(model['object_name'] == 'User' and model.get('model') == User for model in auth_models))\n         ctx = self.ctx\n         apps = ctx['available_apps']\n         # we have registered two models from two different apps\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..9b06631 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +40,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..1bf4a1d 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,7 +19,9 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n-from django.core.management.commands.loaddata import Command as LoaddataCommand\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n@@ -1866,8 +1868,30 @@ class ArgumentOrder(AdminScriptTestCase):\n             \"('verbosity', 1)]\" % option_b\n         )\n \n-\n-@override_settings(ROOT_URLCONF='admin_scripts.urls')\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_when_none(self):\n+        \"\"\"\n+        Test handling when sys.argv[0] is None and execute_from_command_line\n+        is given a valid argv.\n+        \"\"\"\n+        args = ['help']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None]):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin help', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n     available_apps = [\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..406b368 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -30,6 +31,49 @@ class ShellCommandTestCase(SimpleTestCase):\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n \n+    def setUp(self):\n+        self.script_globals = 'print(\"__name__\" in globals())'\n+        self.script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n     @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n@@ -37,6 +81,49 @@ class ShellCommandTestCase(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, \"Couldn't import ipython interface.\"):\n             call_command('shell', interface='ipython')\n \n+    def setUp(self):\n+        self.script_globals = 'print(\"__name__\" in globals())'\n+        self.script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n     @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n     @mock.patch.dict('sys.modules', {'bpython': None})\n     def test_shell_with_bpython_not_installed(self, select):\n@@ -49,4 +136,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..c153803 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -962,27 +962,46 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n         response = self.client.get(self.change_url)\n         self.assertNotContains(response, 'id=\"id_question_set-0-text\"')\n \n+from django.test import TestCase, RequestFactory\n+from django.urls import reverse\n+from django.contrib.admin.sites import site as admin_site\n+from django.contrib.admin import ModelAdmin, TabularInline\n+from .models import Profile, VerboseNameProfile, VerboseNamePluralProfile, BothVerboseNameProfile, ProfileCollection\n \n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n-class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n+class TestVerboseNameInlineForms(TestCase):\n+    factory = RequestFactory()\n+    superuser = None\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(\n+            username='admin',\n+            email='admin@test.com',\n+            password='password'\n+        )\n     factory = RequestFactory()\n \n     def test_verbose_name_plural_inline(self):\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n-            verbose_name_plural = 'Non-verbose childs'\n+            # Only verbose_name is specified; should infer plural.\n+            verbose_name = 'Non-verbose child'\n \n         class VerboseNameProfileInline(TabularInline):\n             model = VerboseNameProfile\n-            verbose_name_plural = 'Childs with verbose name'\n+            # Only verbose_name is specified; should infer plural.\n+            verbose_name = 'Child with verbose name'\n \n         class VerboseNamePluralProfileInline(TabularInline):\n             model = VerboseNamePluralProfile\n-            verbose_name_plural = 'Childs with verbose name plural'\n+            # Only verbose_name is specified; should infer plural.\n+            verbose_name = 'Child with verbose name plural'\n \n         class BothVerboseNameProfileInline(TabularInline):\n             model = BothVerboseNameProfile\n-            verbose_name_plural = 'Childs with both verbose names'\n+            # Only verbose_name is specified; should infer plural.\n+            verbose_name = 'Child with both verbose names'\n \n         modeladmin = ModelAdmin(ProfileCollection, admin_site)\n         modeladmin.inlines = [\n@@ -996,21 +1015,21 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         request = self.factory.get(url)\n         request.user = self.superuser\n         response = modeladmin.changeform_view(request)\n-        # Non-verbose model.\n+        # Non-verbose model; checks for inferred plural.\n         self.assertContains(response, '<h2>Non-verbose childs</h2>')\n-        self.assertContains(response, 'Add another Profile')\n+        self.assertContains(response, 'Add another Non-verbose child')\n         self.assertNotContains(response, '<h2>Profiles</h2>')\n-        # Model with verbose name.\n-        self.assertContains(response, '<h2>Childs with verbose name</h2>')\n-        self.assertContains(response, 'Add another Model with verbose name only')\n+        # Model with verbose name; checks for inferred plural.\n+        self.assertContains(response, '<h2>Childs with verbose names</h2>')\n+        self.assertContains(response, 'Add another Child with verbose name')\n         self.assertNotContains(response, '<h2>Model with verbose name onlys</h2>')\n-        # Model with verbose name plural.\n+        # Model with verbose name plural; checks for inferred plural.\n         self.assertContains(response, '<h2>Childs with verbose name plural</h2>')\n-        self.assertContains(response, 'Add another Profile')\n+        self.assertContains(response, 'Add another Child with verbose name plural')\n         self.assertNotContains(response, '<h2>Model with verbose name plural only</h2>')\n-        # Model with both verbose names.\n+        # Model with both verbose names; checks for inferred plural.\n         self.assertContains(response, '<h2>Childs with both verbose names</h2>')\n-        self.assertContains(response, 'Add another Model with both - name')\n+        self.assertContains(response, 'Add another Child with both verbose names')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n     def test_both_verbose_names_inline(self):\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..c1ad36d 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -595,6 +595,13 @@ class TestQuerying(TestCase):\n             [self.objs[4]],\n         )\n \n+    def test_isnull_json_key_correct_behavior(self):\n+        # Ensure that __isnull=True only matches objects without the key, not those with the key set to null.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # Expects objects without 'j' key, not those with 'j': null\n+        )\n+\n     def test_isnull_key_or_none(self):\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..3e3c3dc 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -152,11 +152,71 @@ class DispatcherTests(SimpleTestCase):\n \n     def test_send_robust_no_receivers(self):\n         result = a_signal.send_robust(sender=self, val='test')\n+\n+    def test_send_robust_logs_exceptions(self):\n+        import logging\n+        from django.dispatch import Signal\n+\n+        def fails(val, **kwargs):\n+            raise KeyError('missing_key')\n+\n+        a_signal = Signal()\n+        a_signal.connect(fails)\n+        \n+        with self.assertLogs('django.dispatch', level='ERROR') as cm:\n+            result = a_signal.send_robust(sender=self, val='test')\n+\n+        err = result[0][1]\n+        self.assertIsInstance(err, KeyError)\n+        self.assertEqual(err.args, ('missing_key',))\n+\n+        # Check the log record\n+        log_record = cm.records[0]\n+        self.assertEqual(\n+            log_record.getMessage(),\n+            \"Error calling fails in Signal.send_robust() (missing_key)\"\n+        )\n+        self.assertIsNotNone(log_record.exc_info)\n+        _, exc_value, _ = log_record.exc_info\n+        self.assertIsInstance(exc_value, KeyError)\n+        self.assertEqual(str(exc_value), 'missing_key')\n+\n+        a_signal.disconnect(fails)\n         self.assertEqual(result, [])\n \n     def test_send_robust_ignored_sender(self):\n         a_signal.connect(receiver_1_arg)\n         result = a_signal.send_robust(sender=self, val='test')\n+\n+    def test_send_robust_logs_exceptions(self):\n+        import logging\n+        from django.dispatch import Signal\n+\n+        def fails(val, **kwargs):\n+            raise KeyError('missing_key')\n+\n+        a_signal = Signal()\n+        a_signal.connect(fails)\n+        \n+        with self.assertLogs('django.dispatch', level='ERROR') as cm:\n+            result = a_signal.send_robust(sender=self, val='test')\n+\n+        err = result[0][1]\n+        self.assertIsInstance(err, KeyError)\n+        self.assertEqual(err.args, ('missing_key',))\n+\n+        # Check the log record\n+        log_record = cm.records[0]\n+        self.assertEqual(\n+            log_record.getMessage(),\n+            \"Error calling fails in Signal.send_robust() (missing_key)\"\n+        )\n+        self.assertIsNotNone(log_record.exc_info)\n+        _, exc_value, _ = log_record.exc_info\n+        self.assertIsInstance(exc_value, KeyError)\n+        self.assertEqual(str(exc_value), 'missing_key')\n+\n+        a_signal.disconnect(fails)\n         self.assertEqual(result, [(receiver_1_arg, 'test')])\n         a_signal.disconnect(receiver_1_arg)\n         self.assertTestIsClean(a_signal)\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..c932b30 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,9 +281,25 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+from django.utils.translation import gettext_lazy as _\n+from .asserts import AssertFormErrorsMixin\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n-    def test_modelchoicefield(self):\n+    def test_modelchoicefield_invalid_choice_value_included(self):\n+        # Create choices for the model choice field tests below.\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+\n+        # Test that invalid choice error message includes the invalid value\n+        error_messages = {\n+            'invalid_choice': _('Select a valid choice. \"%(value)s\" is not one of the available choices.'),\n+        }\n+        f = ModelChoiceField(queryset=ChoiceModel.objects.all(), error_messages=error_messages)\n+        self.assertFormErrors(['Select a valid choice. \"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -307,4 +323,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..5e88fc1 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -60,6 +60,14 @@ class Second(models.Model):\n # Protect against repetition of #1839, #2415 and #2536.\n class Third(models.Model):\n     name = models.CharField(max_length=20)\n+\n+\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n@@ -70,6 +78,14 @@ class Parent(models.Model):\n \n class Child(models.Model):\n     name = models.CharField(max_length=20)\n+\n+\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n     parent = models.ForeignKey(Parent, models.CASCADE)\n \n \n@@ -85,6 +101,14 @@ class ToFieldChild(models.Model):\n class Category(models.Model):\n     name = models.CharField(max_length=20)\n \n+\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n     def __str__(self):\n         return self.name\n \n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..3c1a9b8 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -11,7 +12,13 @@ class QTests(SimpleTestCase):\n     def test_combine_and_both_empty(self):\n         self.assertEqual(Q() & Q(), Q())\n \n-    def test_combine_or_empty(self):\n+    def test_dict_keys_in_q_object(self):\n+        # Verifies that combining Q objects with dict_keys using | does not raise a TypeError\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n         q = Q(x=1)\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..2adeea1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,7 +28,8 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n-from django.utils.functional import SimpleLazyObject\n+from django.db.models import Exists, OuterRef, Q\n+from django.test import TestCase\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n@@ -794,7 +795,27 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n-    def test_boolean_expression_combined(self):\n+    def test_q_exists_commutative(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        # Testing all combinations of Q and Exists with & and | operators\n+        tests = [\n+            (Q() & Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Exists(is_ceo) & Q(), [self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Q() | Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Exists(is_ceo) | Q(), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Q() & Exists(is_poc), [self.max]),\n+            (Exists(is_poc) & Q(), [self.max]),\n+            (Q() | Exists(is_poc), [self.max, self.example_inc.ceo, self.foobar_ltd.ceo]),\n+            (Exists(is_poc) | Q(), [self.max, self.example_inc.ceo, self.foobar_ltd.ceo]),\n+        ]\n+        \n+        for conditions, expected in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..e728242 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1145,6 +1145,24 @@ class ResolverMatchTests(SimpleTestCase):\n             \"namespaces=[], route=^no_kwargs/([0-9]+)/([0-9]+)/$)\",\n         )\n \n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial_with_args(self):\n+        from functools import partial\n+        from urlpatterns_reverse import views\n+\n+        # Create a partial function with additional arguments\n+        partial_func = partial(views.empty_view, 'arg1', kwarg1='value1')\n+\n+        # Resolve a URL pattern that uses the partial function\n+        resolved = resolve('/partial_with_args/')\n+\n+        # Check if __repr__ provides detailed information about the partial function\n+        expected_repr = (\n+            \"ResolverMatch(func=functools.partial(urlpatterns_reverse.views.empty_view, 'arg1', kwarg1='value1'), \"\n+            \"args=(), kwargs={}, url_name=partial_with_args, app_names=[], namespaces=[], route=partial_with_args/)\"\n+        )\n+        self.assertEqual(repr(resolved), expected_repr)\n+\n \n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n",
  "django__django-14238": "diff --git a/tests/model_fields/test_autofield.py b/tests/model_fields/test_autofield.py\nindex bfbf1e8..847d12c 100644\n--- a/tests/model_fields/test_autofield.py\n+++ b/tests/model_fields/test_autofield.py\n@@ -29,7 +29,17 @@ class AutoFieldInheritanceTests(SimpleTestCase):\n             with self.subTest(field.__name__):\n                 self.assertIsInstance(field(), models.AutoField)\n \n-    def test_issubclass_of_autofield(self):\n+    def test_custom_big_auto_field_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        self.assertIsInstance(MyBigAutoField(), models.AutoField)\n+\n+    def test_custom_small_auto_field_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        self.assertIsInstance(MySmallAutoField(), models.AutoField)\n         for field in (models.BigAutoField, models.SmallAutoField):\n             with self.subTest(field.__name__):\n-                self.assertTrue(issubclass(field, models.AutoField))\n+                self.assertTrue(issubclass(field, models.AutoField))\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..0609e7e 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2196,6 +2196,14 @@ class StartApp(AdminScriptTestCase):\n                     \"CommandError: '%s' is not a valid app directory. Please \"\n                     \"make sure the directory is a valid identifier.\" % bad_target\n                 )\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app_with_slash/')\n+        os.makedirs(app_dir)\n+        # Run the django-admin startapp command with a trailing slash.\n+        _, err = self.run_django_admin(['startapp', 'app', 'apps/app_with_slash/'])\n+        self.assertNoOutput(err)\n+        # Verify the existence of apps.py in the specified directory.\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n \n     def test_importable_target_name(self):\n         _, err = self.run_django_admin(['startapp', 'app', 'os'])\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..1c847c7 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1026,6 +1026,30 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n \n+class ReadOnlyPasswordHashWidgetTest(SimpleTestCase):\n+    \n+    def test_label_without_for_attribute(self):\n+        \"\"\"\n+        Test that ReadOnlyPasswordHashWidget label does not have a 'for' attribute.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+        \n+        bound_field = TestForm()['hash_field']\n+        self.assertIsNone(bound_field.field.widget.id_for_label('id'))\n+        self.assertNotIn('for=\"', bound_field.label_tag())\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n+\n+    def test_widget_output(self):\n+        \"\"\"\n+        Test the output of ReadOnlyPasswordHashWidget to ensure it's rendering as expected.\n+        \"\"\"\n+        widget = ReadOnlyPasswordHashWidget()\n+        output = widget.render('name', 'value')\n+        self.assertIn('<div class=\"readonly\">', output)\n+        self.assertIn('<strong>Algorithm:</strong>', output)\n+        self.assertNotIn('<input', output)\n+\n class AdminPasswordChangeFormTest(TestDataMixin, TestCase):\n \n     @mock.patch('django.contrib.auth.password_validation.password_changed')\n",
  "django__django-14580": "",
  "django__django-14608": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 0b8d2fa..b366824 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -3349,8 +3349,18 @@ class AdminViewListEditable(TestCase):\n         non_form_errors = response.context['cl'].formset.non_form_errors()\n         self.assertIsInstance(non_form_errors, ErrorList)\n         self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"])))\n-\n-    def test_list_editable_ordering(self):\n+    \n+    def test_non_form_errors_css_class(self):\n+        data = {\n+            \"form-0-id\": str(self.per2.pk),\n+            \"form-0-alive\": \"1\",\n+            \"form-0-gender\": \"2\",\n+            \"_save\": \"Save\",\n+        }\n+        response = self.client.post(reverse('admin:admin_views_person_changelist'), data)\n+        non_form_errors = response.context['cl'].formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertIn('nonform', str(non_form_errors))\n         collector = Collector.objects.create(id=1, name=\"Frederick Clegg\")\n \n         Category.objects.create(id=1, order=1, collector=collector)\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..246e9ec 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -9,6 +9,8 @@ from .models import (\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n     Relationship, SymmetricalFriendship,\n )\n+from django.db import models\n+from django.core.checks import Error\n \n \n class M2mThroughTests(TestCase):\n@@ -20,6 +22,20 @@ class M2mThroughTests(TestCase):\n         cls.rock = Group.objects.create(name='Rock')\n         cls.roll = Group.objects.create(name='Roll')\n \n+    def test_m2m_with_through_fields_list_hashable(self):\n+        \"\"\"\n+        Test to ensure that ManyToManyField with through_fields as a list\n+        does not raise any TypeError due to unhashable types.\n+        \"\"\"\n+        reverse_m2m = Event._meta.get_field('invitees').remote_field\n+        self.assertEqual(reverse_m2m.through_fields, ('event', 'invitee'))\n+\n+        # Attempt to compute the hash to ensure no TypeError is raised.\n+        try:\n+            hash(reverse_m2m)\n+        except TypeError as e:\n+            self.fail(f\"Hashing failed with TypeError: {e}\")\n+\n     def test_retrieve_intermediate_items(self):\n         Membership.objects.create(person=self.jim, group=self.rock)\n         Membership.objects.create(person=self.jane, group=self.rock)\n",
  "django__django-14752": "",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..2989344 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -412,7 +412,8 @@ class MethodDecoratorTests(SimpleTestCase):\n \n     def test_invalid_method_name_to_decorate(self):\n         \"\"\"\n-        @method_decorator on a nonexistent method raises an error.\n+from functools import wraps\n+from django.utils.decorators import method_decorator\n         \"\"\"\n         msg = (\n             \"The keyword argument `name` must be the name of a method of the \"\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..b5ebea2 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5083,6 +5083,38 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n     def test_user_password_change_limited_queryset(self):\n         su = User.objects.filter(is_superuser=True)[0]\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n+\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test language')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+        response = self.client.get(\n+            reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        )\n+        self.assertContains(\n+            response,\n+            f'<a href=\"/{admin_site}/admin_views/language/{language.pk}/change/\">Test language</a>',\n+            html=True,\n+        )\n+        self.assertContains(\n+            response,\n+            f'<a href=\"/{admin_site}/auth/user/{self.superuser.pk}/change/\">superuser</a>',\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        self._test_readonly_foreignkey_links('site2')\n         self.assertEqual(response.status_code, 404)\n \n     def test_change_form_renders_correct_null_choice_value(self):\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8bb77cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "",
  "django__django-15061": "",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..8650fed 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -93,6 +93,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://[a',\n             # Non-string.\n             23,\n+            # Test cases for invalid URLs that previously raised ValueError.\n+            '////]@N.AN',\n+            '#@A.bO',\n             # Hangs \"forever\" before fixing a catastrophic backtracking,\n             # see #11198.\n             'http://%s' % ('X' * 60,),\n",
  "django__django-15213": "",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..9a61e1f 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -8,6 +9,8 @@ from django.contrib.messages.storage.cookie import (\n     CookieStorage, MessageDecoder, MessageEncoder,\n )\n from django.test import SimpleTestCase, override_settings\n+from django.contrib.messages.storage.base import Message\n+from django.contrib.messages.storage.cookie import MessageEncoder, MessageDecoder\n from django.utils.crypto import get_random_string\n from django.utils.safestring import SafeData, mark_safe\n \n@@ -143,7 +146,16 @@ class CookieTests(BaseTests, SimpleTestCase):\n         for illegal in non_compliant_chars:\n             self.assertEqual(encoded.find(illegal), -1)\n \n-    def test_json_encoder_decoder(self):\n+    def test_preserve_extra_tags(self):\n+        \"\"\"\n+        Test that extra_tags is correctly preserved as an empty string\n+        during serialization and deserialization.\n+        \"\"\"\n+        message = Message(constants.INFO, 'Test message', extra_tags='')\n+        encoder = MessageEncoder()\n+        value = encoder.encode(message)\n+        decoded_message = json.loads(value, cls=MessageDecoder)\n+        self.assertEqual(decoded_message.extra_tags, '')\n         \"\"\"\n         A complex nested data structure containing Message\n         instances is properly encoded/decoded by the custom JSON\n",
  "django__django-15388": "",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..dc97467 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,38 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty string for the If-Modified-Since header does not raise an exception\n+        and returns True.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        Test that an invalid date string for the If-Modified-Since header returns True.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"invalid-date\", mtime=1))\n+\n+    def test_was_modified_since_valid_date_older(self):\n+        \"\"\"\n+        Test that a valid older date string for the If-Modified-Since header returns False.\n+        \"\"\"\n+        past_date = http_date(100000)  # A date in the past\n+        self.assertFalse(was_modified_since(header=past_date, mtime=200000))\n+\n+    def test_was_modified_since_valid_date_newer(self):\n+        \"\"\"\n+        Test that a valid newer date string for the If-Modified-Since header returns True.\n+        \"\"\"\n+        future_date = http_date(300000)  # A date in the future\n+        self.assertTrue(was_modified_since(header=future_date, mtime=200000))\n+\n+    def test_was_modified_since_no_header(self):\n+        \"\"\"\n+        Test that not providing the If-Modified-Since header returns True.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=None, mtime=1))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..0560dbe 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -7,6 +8,7 @@ from admin_scripts.tests import AdminScriptTestCase\n from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management import BaseCommand, CommandError, find_commands\n from django.core.management.utils import (\n     find_command,\n@@ -411,7 +413,40 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_formatter_usage(self):\n+        \"\"\"Test whether the custom ArgumentDefaultsHelpFormatter is used by the command.\"\"\"\n+        epilog = \"This is an epilog\"\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"subcommand\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter\n+        )\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+\n+    def test_help_output_formatting(self):\n+        \"\"\"Test whether the help output is correctly formatted with newlines.\"\"\"\n+        epilog = '''\n+            Import a contract from tzkt.\n+            Example usage:\n+                ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+        '''\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"subcommand\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter\n+        )\n+        help_output = parser.format_help()\n+        expected_output = (\n+            \"usage: prog_name subcommand [-h]\\n\\n\"\n+            \"optional arguments:\\n\"\n+            \"  -h, --help  show this help message and exit\\n\\n\"\n+            \"This is an epilog\\n\"\n+            \"Example usage:\\n\"\n+            \"\\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\"\n+        )\n+        self.assertIn(expected_output.strip(), help_output.strip())\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..eb27c8e 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,8 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n+from django.core.serializers.json import DjangoJSONEncoder\n from django.utils.html import (\n     conditional_escape,\n     escape,\n@@ -217,6 +219,30 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"custom\": \"output\"}'\n+\n+        # Testing with a custom encoder that outputs a fixed string\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"output\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_with_data(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def default(self, o):\n+                if isinstance(o, datetime):\n+                    return o.strftime('%Y-%m-%d')\n+                return super().default(o)\n+\n+        # Testing with a custom encoder that formats datetime\n+        self.assertHTMLEqual(\n+            json_script({\"date\": datetime(2023, 10, 1)}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"date\": \"2023-10-01\"}</script>',\n+        )\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n",
  "django__django-15790": "",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..e0e3e9e 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -395,7 +395,20 @@ class ProxyModelTests(TestCase):\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n-    def test_eq(self):\n+    def test_select_related_only_on_proxy(self):\n+        # Create a ProxyCustomModel instance\n+        custom_instance = ProxyCustomModel.objects.create(name=\"Proxy Name\")\n+\n+        # Create an AnotherModel instance with a foreign key to the proxy model\n+        another_instance = AnotherModel.objects.create(custom=custom_instance)\n+\n+        # Query using select_related and only on the proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        queried_instance = qs.get()\n+\n+        # Check if the queried instance matches the created instance\n+        self.assertEqual(queried_instance, another_instance)\n+        self.assertEqual(queried_instance.custom.name, \"Proxy Name\")\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..6e8c57c 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,6 +151,12 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_additional_parameters_before_dbname(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n@@ -183,4 +189,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..3894c78 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1902,11 +1902,31 @@ class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n \n+    def test_no_management_form_warning(self):\n+        \"\"\"\n+        Management forms are already rendered with the new div template.\n+        No deprecation warning should be raised.\n+        \"\"\"\n+        with isolate_lru_cache(get_default_renderer), self.settings(\n+            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+        ):\n+            ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+            formset = ChoiceFormSet()\n+            with self.assertRaisesMessage(\n+                RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n+            ):\n+                str(formset.management_form)\n+\n+    def test_formset_without_deprecation_warning(self):\n+        \"\"\"\n+        Ensure formsets do not incorrectly raise deprecation warnings\n+        when rendering management forms.\n+        \"\"\"\n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n-        ), self.assertRaisesMessage(\n-            RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            # Directly checking that no warning is raised\n+            with self.assertNoLogs('django', level='WARNING'):\n+                str(formset.management_form)\n",
  "django__django-16041": "",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..79052d3 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,23 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_null_or_empty_string(self):\n+        # Verify handling of null or empty strings in the format function\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(\"\", \".\", decimal_pos=2), \".00\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+        self.assertEqual(nformat(None, \".\", decimal_pos=2), \"None\")\n+        self.assertEqual(nformat(None, \".\", grouping=2, thousand_sep=\",\"), \"None\")\n+\n+    def test_negative_numbers(self):\n+        # Test negative number formatting to ensure negative sign handling\n+        self.assertEqual(nformat(-1234, \".\"), \"-1234\")\n+        self.assertEqual(nformat(-1234.56, \".\", decimal_pos=1), \"-1234.5\")\n+        self.assertEqual(nformat(-1234.56, \".\", grouping=1, thousand_sep=\",\"), \"-1,2,3,4.56\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..d0ece4d 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,6 +25,7 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n \n from .models.custom_user import (\n@@ -881,8 +883,25 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         form = UserChangeForm(instance=user, data=post_data)\n \n         self.assertTrue(form.is_valid())\n-        # original hashed password contains $\n-        self.assertIn(\"$\", form.cleaned_data[\"password\"])\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n \n     def test_bug_19349_bound_password_field(self):\n         user = User.objects.get(username=\"testclient\")\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..d62c23f 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,6 +507,16 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+    def test_callable_sitemap_no_items_value_error_fix(self):\n+        # This test verifies that a sitemap with no items does not raise a ValueError\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response.headers)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\"\"\"\n+        self.assertXMLEqual(response.content.decode(), expected_content_index)\n+\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..88b6d97 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,10 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock, TestCase\n+from django.core.cache import cache\n+import threading\n import io\n import os\n import pickle\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..35125f1 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -33,7 +36,62 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_no_permissions(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is False when the user has no add/change permissions.\n+        \"\"\"\n+        no_perm_user = User.objects.create_user(\n+            username=\"no_perm_user\", password=\"secret\", is_staff=True\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = no_perm_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+    def test_submit_row_save_as_new_only_change_permission(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is False when the user only has change permission.\n+        \"\"\"\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+    def test_submit_row_save_as_new_only_add_permission(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is False when the user only has add permission.\n+        \"\"\"\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..d951aeb 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -235,8 +235,19 @@ class OptimizerTests(SimpleTestCase):\n                 alter_bar,\n             ],\n         )\n-\n-    def test_alter_alter_table_model(self):\n+    def test_alter_alter_field(self):\n+        self._test_alter_alter(\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True)),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+        )\n+        self._test_alter_alter(\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        )\n+        self._test_alter_alter(\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=256, null=True)),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True)),\n+        )\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..da40c90 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -26,7 +27,12 @@ class JoinTests(SimpleTestCase):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n-    # Joining with unsafe joiners doesn't result in unsafe strings.\n+    @setup({\"join_autoescape_issue\": '{% autoescape off %}{{ a|join:b }}{% endautoescape %}'})\n+    def test_join_autoescape_issue(self):\n+        a = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        b = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_issue\", {\"a\": a, \"b\": b})\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +84,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..cb0f038 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -779,7 +779,36 @@ class BulkCreateTests(TestCase):\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n-    def test_update_conflicts_unique_fields(self):\n+    def test_update_conflicts_ids_returned(self):\n+        objects = [\n+            UpsertConflict(number=5, rank=5, name=\"Alice\"),\n+            UpsertConflict(number=6, rank=6, name=\"Bob\"),\n+        ]\n+        results = UpsertConflict.objects.bulk_create(\n+            objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=[\"number\"],\n+        )\n+        self.assertEqual(len(results), len(objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        # Test with conflicts\n+        conflicting_objects = [\n+            UpsertConflict(number=5, rank=7, name=\"Clara\"),\n+            UpsertConflict(number=6, rank=8, name=\"David\"),\n+        ]\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=[\"number\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n         self._test_update_conflicts(unique_fields=[\"number\"])\n \n     @skipUnlessDBFeature(\"supports_update_conflicts\")\n@@ -816,4 +845,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..4fc235f 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1119,9 +1119,20 @@ def test_range_slider(orientation):\n     slider.reset()\n     assert_allclose(slider.val, [0.1, 0.34])\n \n+def test_range_slider_initialization():\n+    fig, ax = plt.subplots()\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Test Slider\", valmin=0.0, valmax=1.0, valinit=[0.2, 0.8]\n+    )\n+    # Check that the initial values are set correctly\n+    assert slider.val == (0.2, 0.8)\n \n-def check_polygon_selector(event_sequence, expected_result, selections_count,\n-                           **kwargs):\n+    # Verify that the handles are positioned correctly according to valinit\n+    if slider.orientation == \"vertical\":\n+        pos = [h.get_ydata()[0] for h in slider._handles]\n+    else:\n+        pos = [h.get_xdata()[0] for h in slider._handles]\n+    assert_allclose(pos, [0.2, 0.8])\n     \"\"\"\n     Helper function to test Polygon Selector.\n \n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..ee9cdcf 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -508,7 +508,25 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+def test_get_backend_does_not_clear_figures():\n+    import matplotlib.pyplot as plt\n+    from matplotlib import get_backend, rc_context\n+\n+    # Create a figure within an rc_context\n+    with rc_context():\n+        fig2 = plt.figure()\n+    \n+    # Capture the state of Gcf.figs before calling get_backend\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    # Call get_backend, which should not clear the figures\n+    get_backend()\n+    \n+    # Capture the state of Gcf.figs after calling get_backend\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    # Assert that the figures are the same before and after\n+    assert before == after, '\\n' + before + '\\n' + after\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..fd1637a 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,7 +21,14 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_axes_3d(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n+\n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+    # In the reference, we don't add any data, so it should be entirely blank\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..88abc98 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -773,8 +773,25 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n     for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n         assert mpl.colors.same_color(text.get_color(), color)\n \n+import matplotlib.pyplot as plt\n+import pytest\n \n-def test_get_set_draggable():\n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_draggable_interactive(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='data')\n+    leg = ax.legend(draggable=draggable)\n+    \n+    # Initially the legend should have the draggable property as passed\n+    assert leg.get_draggable() is draggable\n+    \n+    # Test toggling the state\n+    leg.set_draggable(not draggable)\n+    assert leg.get_draggable() is not draggable\n+\n+    # Toggle back to original state\n+    leg.set_draggable(draggable)\n+    assert leg.get_draggable() is draggable\n     legend = plt.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..6bb5dfa 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -255,8 +255,34 @@ def test_linedash():\n \n     assert buf.tell() > 0\n \n+import io\n+from matplotlib.figure import Figure\n+\n+def test_empty_line():\n+    # Smoke-test for gh#23954\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n \n-def test_no_duplicate_definition():\n+def test_annotate_with_empty_line():\n+    # Test annotation with an empty line in the PostScript backend\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n+\n+def test_title_with_empty_line():\n+    # Test title with an empty line in the PostScript backend\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.set_title('\\nLower title')\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n \n     fig = Figure()\n     axs = fig.subplots(4, 4, subplot_kw=dict(projection=\"polar\"))\n",
  "matplotlib__matplotlib-23987": "",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..30ec049 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5732,7 +5732,28 @@ def test_set_get_ticklabels():\n     ax[1].set_yticklabels(ax[0].get_yticklabels())\n \n \n-@check_figures_equal(extensions=[\"png\"])\n+def test_set_ticks_kwargs_valid_with_labels():\n+    \"\"\"\n+    Test that providing valid kwargs with labels works correctly.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = ['a', 'b', 'c']\n+    ax.xaxis.set_ticks(ticks, labels, fontweight='bold')\n+    # No assertion error should occur, the test passes if no exception is raised\n+\n+def test_set_ticks_kwargs_invalid_with_labels():\n+    \"\"\"\n+    Test that providing invalid kwargs with labels raises an error.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = ['a', 'b', 'c']\n+    with pytest.raises(TypeError):\n+        ax.xaxis.set_ticks(ticks, labels, non_existent_kwarg=True)\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n     Test that these two are identical::\n",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..fbc4c0b 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -13,6 +14,7 @@ from matplotlib.dates import rrulewrapper\n from matplotlib.lines import VertexSelector\n import matplotlib.pyplot as plt\n import matplotlib.transforms as mtransforms\n+import pickletools\n import matplotlib.figure as mfigure\n from mpl_toolkits.axes_grid1 import parasite_axes\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..a0d0d00 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,34 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n \n @mpl.style.context(\"default\")\n+def test_pickle_aligned_labels():\n+    # Create a figure with aligned labels and test pickling\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+    \n+    fig.align_labels()  # Align labels, which previously caused a pickling issue\n+    \n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        # If successful, try loading it back\n+        loaded_fig = pickle.loads(pickle_data)\n+        loaded_fig.canvas.draw()  # Ensure the figure can be drawn\n+    except Exception as e:\n+        assert False, f\"Pickling failed with exception: {e}\"\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..f390a86 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -446,7 +446,63 @@ def test_paddedbox():\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n \n+def test_mplcursor_interaction():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+\n+    # Attach mplcursor\n+    mplcursors.cursor()\n+    \n+    # Simulate clicks on data points and ensure no exceptions are raised\n+    try:\n+        for i in range(1, 11):\n+            event = plt.backend_bases.MouseEvent(\n+                name='button_press_event',\n+                canvas=fig.canvas,\n+                x=i,\n+                y=i,\n+                button=1\n+            )\n+            fig.canvas.callbacks.process('button_press_event', event)\n+    except Exception as e:\n+        assert False, f\"An exception was raised: {e}\"\n+\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+def test_mplcursor_interaction():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+\n+    # Attach mplcursor\n+    mplcursors.cursor()\n+    \n+    # Simulate clicks on data points and ensure no exceptions are raised\n+    try:\n+        for i in range(1, 11):\n+            event = plt.backend_bases.MouseEvent(\n+                name='button_press_event',\n+                canvas=fig.canvas,\n+                x=i,\n+                y=i,\n+                button=1\n+            )\n+            fig.canvas.callbacks.process('button_press_event', event)\n+    except Exception as e:\n+        assert False, f\"An exception was raised: {e}\"\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..cf8acdc 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -102,7 +102,23 @@ class TestContinuous:\n         s = Continuous(\"viridis\")._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n-    def test_color_tuple_values(self, x):\n+    def test_interval_with_bools(self):\n+        x = pd.Series([True, False, False])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 0])\n+        \n+    def test_color_mapping_with_booleans(self):\n+        # Test to ensure color mapping works with boolean values\n+        x = pd.Series([True, False, True, False])\n+        s = Continuous()._setup(x, Color())\n+        # Check that the color scale is applied correctly\n+        assert_array_equal(s(x), sns.color_palette(\"ch:\", as_cmap=True)([1, 0, 1, 0])[:, :3])\n+\n+    def test_color_mapping_with_booleans_edge_case(self):\n+        # Test a single True and False value\n+        x = pd.Series([True, False])\n+        s = Continuous()._setup(x, Color())\n+        assert_array_equal(s(x), sns.color_palette(\"ch:\", as_cmap=True)([1, 0])[:, :3])\n \n         cmap = color_palette(\"blend:b,g\", as_cmap=True)\n         s = Continuous((\"b\", \"g\"))._setup(x, Color())\n",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..70d4344 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -917,6 +917,31 @@ class TestPairGrid:\n             npt.assert_array_equal(x_in, x_out)\n             npt.assert_array_equal(y_in, y_out)\n \n+    def test_pairplot_column_multiindex(self):\n+\n+        # Test with standard MultiIndex\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\"], [1, 2]])\n+        df_multi_standard = self.df[[\"x\", \"y\"]].set_axis(cols, axis=1)\n+        g_standard = ag.pairplot(df_multi_standard)\n+        assert g_standard.diag_vars == list(cols)\n+\n+        # Test with MultiIndex having more levels\n+        cols_more_levels = pd.MultiIndex.from_arrays([[\"x\", \"x\", \"y\", \"y\"], [1, 2, 1, 2]])\n+        df_multi_more_levels = self.df[[\"x\", \"y\"]].set_axis(cols_more_levels, axis=1)\n+        g_more_levels = ag.pairplot(df_multi_more_levels)\n+        assert g_more_levels.diag_vars == list(cols_more_levels)\n+\n+        # Test with MultiIndex and empty DataFrame\n+        df_empty = pd.DataFrame(columns=cols)\n+        g_empty = ag.pairplot(df_empty)\n+        assert len(g_empty.axes) == 0\n+\n+        # Test with MultiIndex having non-string levels\n+        cols_non_string = pd.MultiIndex.from_arrays([[1, 2], [3, 4]])\n+        df_non_string = self.df[[\"x\", \"y\"]].set_axis(cols_non_string, axis=1)\n+        g_non_string = ag.pairplot(df_non_string)\n+        assert g_non_string.diag_vars == list(cols_non_string)\n+\n     def test_map_diag(self):\n \n         g = ag.PairGrid(self.df)\n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..e2acb9d 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,11 @@\n+\n import json\n import os\n import textwrap\n+import errno\n \n import pytest\n+import tomllib  # Import tomllib for testing TOML loading\n \n import flask\n \n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..8aecf36 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,34 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import pytest\n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import DecodeError, Timeout\n+from urllib3.exceptions import DecodeError as Urllib3DecodeError\n+from urllib3.exceptions import ReadTimeoutError\n+\n+def httpbin(endpoint):\n+    return f'http://httpbin.org/{endpoint}'\n+\n+def test_urllib3_decode_error_translated():\n+    \"\"\"Test that urllib3 DecodeError is translated to requests DecodeError.\"\"\"\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    with pytest.raises(DecodeError):\n+        # Simulating DecodeError: This requires a mock or a controlled environment.\n+        raise Urllib3DecodeError(\"Simulated DecodeError\")\n+\n+def test_urllib3_timeout_error_translated():\n+    \"\"\"Test that urllib3 TimeoutError is translated to requests Timeout.\"\"\"\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    with pytest.raises(Timeout):\n+        # Simulating TimeoutError: This requires a mock or a controlled environment.\n+        raise ReadTimeoutError(None, None, \"Simulated TimeoutError\")\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1663,4 +1691,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..4bc8e77 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -976,6 +976,27 @@ class TestRequests:\n         # also for streaming\n         r = requests.Response()\n         r.raw = io.BytesIO(b'the content')\n+\n+    def test_iter_content_with_unicode_and_json(self):\n+        \"\"\"\n+        Test that iter_content with decode_unicode=True appropriately decodes\n+        JSON content as a string.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'{\"key\": \"value\"}')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(chunk_size=16*1024, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Chunks should be string when decode_unicode=True\"\n+\n+    def test_iter_content_with_unicode_and_binary(self):\n+        \"\"\"\n+        Test that iter_content with decode_unicode=False returns bytes.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(chunk_size=16*1024, decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks), \"Chunks should be bytes when decode_unicode=False\"\n         r.encoding = 'ascii'\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n@@ -986,11 +1007,53 @@ class TestRequests:\n         \"\"\"\n         r = requests.Response()\n         r.raw = io.BytesIO(b'the content')\n+\n+    def test_iter_content_with_unicode_and_json(self):\n+        \"\"\"\n+        Test that iter_content with decode_unicode=True appropriately decodes\n+        JSON content as a string.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'{\"key\": \"value\"}')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(chunk_size=16*1024, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Chunks should be string when decode_unicode=True\"\n+\n+    def test_iter_content_with_unicode_and_binary(self):\n+        \"\"\"\n+        Test that iter_content with decode_unicode=False returns bytes.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(chunk_size=16*1024, decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks), \"Chunks should be bytes when decode_unicode=False\"\n         chunks = r.iter_content(1)\n         assert all(len(chunk) == 1 for chunk in chunks)\n \n         r = requests.Response()\n         r.raw = io.BytesIO(b'the content')\n+\n+    def test_iter_content_with_unicode_and_json(self):\n+        \"\"\"\n+        Test that iter_content with decode_unicode=True appropriately decodes\n+        JSON content as a string.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'{\"key\": \"value\"}')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(chunk_size=16*1024, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Chunks should be string when decode_unicode=True\"\n+\n+    def test_iter_content_with_unicode_and_binary(self):\n+        \"\"\"\n+        Test that iter_content with decode_unicode=False returns bytes.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(chunk_size=16*1024, decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks), \"Chunks should be bytes when decode_unicode=False\"\n         with pytest.raises(TypeError):\n             chunks = r.iter_content(\"1024\")\n \n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..1db6bde 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,8 +743,62 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    def test_multiple_hooks_execution(self):\n+        \"\"\"Test that multiple hooks are executed in the correct order.\"\"\"\n \n-    def test_session_persistent_cookies(self):\n+        def hook1(args):\n+            if 'executed_hooks' not in args:\n+                args['executed_hooks'] = []\n+            args['executed_hooks'].append('hook1')\n+\n+        def hook2(args):\n+            args['executed_hooks'].append('hook2')\n+\n+        hooks = [hook1, hook2]\n+        r = requests.models.Request(hooks={'args': hooks})\n+        assert 'hook1' in r.hooks['args'][0].__name__\n+        assert 'hook2' in r.hooks['args'][1].__name__\n+\n+        # Simulate a call where hooks are executed\n+        args = {}\n+        for hook in r.hooks['args']:\n+            hook(args)\n+\n+        assert args['executed_hooks'] == ['hook1', 'hook2']\n+\n+    def test_empty_hooks_registration(self):\n+        \"\"\"Test that registering empty hooks does not cause errors.\"\"\"\n+\n+        r = requests.models.Request(hooks={'args': []})\n+        assert isinstance(r.hooks['args'], list)\n+        assert len(r.hooks['args']) == 0\n+\n+    def test_mix_single_and_list_hooks(self):\n+        \"\"\"Test a mix of single and list hooks registration.\"\"\"\n+\n+        def single_hook(args):\n+            args['single'] = True\n+\n+        def hook_list(args):\n+            if 'hook_list' not in args:\n+                args['hook_list'] = []\n+            args['hook_list'].append('executed')\n+\n+        single_hooks = single_hook\n+        list_of_hooks = [hook_list]\n+\n+        r = requests.models.Request(hooks={'args': single_hooks})\n+        r.register_hook('args', list_of_hooks)\n+\n+        assert len(r.hooks['args']) == 2  # single_hook + list_of_hooks\n+\n+        # Simulate a call where hooks are executed\n+        args = {}\n+        for hook in r.hooks['args']:\n+            hook(args)\n+\n+        assert args['single'] is True\n+        assert args['hook_list'] == ['executed']\n \n         s = requests.session()\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..e2c237a 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -89,6 +89,29 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n+    @set_config(notes=[\"!!!\", \"###\"])\n+    def test_multiple_punctuation_codetags(self) -> None:\n+        code = \"\"\"a = 1\n+                #!!!\n+                # Some comment\n+                ####\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"!!!\", col_offset=17),\n+            MessageTest(msg_id=\"fixme\", line=4, args=\"###\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_issue_2321_should_not_trigger(self) -> None:\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n@@ -119,4 +142,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..7625e00 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -56,6 +56,13 @@ reports = \"yes\"\n     check_configuration_file_reader(runner)\n \n \n+import pytest\n+from pylint.lint import Run\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+from pytest import CaptureFixture\n+\n+EMPTY_MODULE = \"empty_module\"\n+\n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown id.\"\"\"\n     Run([str(EMPTY_MODULE), \"--disable=12345\"], exit=False)\n@@ -79,12 +86,14 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n \n-def test_unknown_confidence(capsys: CaptureFixture) -> None:\n-    \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n+def test_unrecognized_option_exit_gracefully(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure pylint exits gracefully with a usage message for unrecognized options.\"\"\"\n     with pytest.raises(SystemExit):\n-        Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"argument --confidence: UNKNOWN_CONFIG should be in\" in output.err\n+    assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"usage: pylint\" in output.err\n+    assert \"Unrecognized option\" in output.err\n \n \n def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..f24a25f 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,25 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_path_recursive_specified_path(self) -> None:\n+        \"\"\"Tests that the ignore-paths from pyproject.toml is respected with --recursive=y\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^directory/subdirectory/.*\"\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..6747bd0 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,84 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_lint_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for naming conflict when a module shares its name with its containing package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the files with the conflicting name\n+        create_files([\"conflict/conflict.py\", \"conflict/another_module.py\"])\n+        \n+        # Run pylint on the top-level package\n+        linter.check([\"conflict\"])\n+        \n+    # Assert that no parse-error occurs\n+    assert not linter.stats.by_msg.get(\"parse-error\", 0)\n+\n+\n+def test_lint_import_conflict(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for import errors when a module shares its name with its containing package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the conflict and importer files\n+        create_files([\n+            \"conflict/conflict.py\",\n+            \"conflict/another_module.py\",\n+            \"importer.py\"\n+        ])\n+        \n+        # Write the import statement in the importer module\n+        with open(\"importer.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from conflict import another_module\\n\")\n+        \n+        # Run pylint on both modules\n+        linter.check([\"importer\", \"conflict\"])\n+        \n+    # Assert that no import errors occur\n+    assert not linter.stats.by_msg.get(\"no-name-in-module\", 0)\n+    assert not linter.stats.by_msg.get(\"parse-error\", 0)\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_identically_named_nested_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for naming conflict when a module shares its name with its containing package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the files with the conflicting name\n+        create_files([\"conflict/conflict.py\", \"conflict/another_module.py\"])\n+        \n+        # Run pylint on the top-level package\n+        linter.check([\"conflict\"])\n+        \n+    # Assert that no parse-error occurs\n+    assert not linter.stats.by_msg.get(\"parse-error\", 0)\n+\n+\n+def test_lint_import_conflict(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for import errors when a module shares its name with its containing package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the conflict and importer files\n+        create_files([\n+            \"conflict/conflict.py\",\n+            \"conflict/another_module.py\",\n+            \"importer.py\"\n+        ])\n+        \n+        # Write the import statement in the importer module\n+        with open(\"importer.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from conflict import another_module\\n\")\n+        \n+        # Run pylint on both modules\n+        linter.check([\"importer\", \"conflict\"])\n+        \n+    # Assert that no import errors occur\n+    assert not linter.stats.by_msg.get(\"no-name-in-module\", 0)\n+    assert not linter.stats.by_msg.get(\"parse-error\", 0)\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..2ea0f54 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -12,8 +13,8 @@ from contextlib import redirect_stdout\n from io import StringIO\n from json import dumps\n from typing import TYPE_CHECKING\n-\n import pytest\n+from _pytest.recwarn import WarningsRecorder\n \n from pylint import checkers\n from pylint.interfaces import HIGH\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..3c3afb3 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -298,6 +298,26 @@ class TestImportPath:\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n \n+    def test_no_duplicate_imports(self, tmp_path: Path) -> None:\n+        \"\"\"Module should not be imported more than once with importlib mode.\"\"\"\n+        module_code = \"\"\"\n+        if 'imported' not in globals():\n+            imported = 0\n+        imported += 1\n+        def get_import_count():\n+            return imported\n+        \"\"\"\n+        fn = tmp_path / \"_src/tests/duplicate.py\"\n+        fn.parent.mkdir(parents=True, exist_ok=True)\n+        fn.write_text(module_code, encoding=\"utf-8\")\n+        \n+        module1 = import_path(fn, mode=\"importlib\", root=tmp_path)\n+        assert module1.get_import_count() == 1  # type: ignore[attr-defined]\n+\n+        module2 = import_path(fn, mode=\"importlib\", root=tmp_path)\n+        assert module2 is module1\n+        assert module2.get_import_count() == 1  # type: ignore[attr-defined]\n+\n     def test_importmode_twice_is_different_module(\n         self, simple_module: Path, tmp_path: Path\n     ) -> None:\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..3993fd0 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -6,7 +7,7 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n@@ -26,11 +27,13 @@ def test_coloredlogformatter():\n     tw.hasmarkup = True\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n+    expected_output_with_markup = \"INFO     dummy:dummypath:10 Test Message\"\n     assert output == (\n-        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+        f\"{expected_output_with_markup}\"\n     )\n \n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n-    assert output == (\"dummypath                   10 INFO     Test Message\")\n+    expected_output_without_markup = \"INFO     dummy:dummypath:10 Test Message\"\n+    assert output == (f\"{expected_output_without_markup}\")\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..6679ff4 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -525,6 +525,34 @@ class TestAssert_reprcompare:\n         assert \"-\" + repr(nums_x) in expl\n         assert \"+\" + repr(nums_y) in expl\n \n+    def test_bytes_diff_edge_cases(self):\n+        \"\"\"Test edge cases for byte string differences to address assertion message confusion.\"\"\"\n+        # Case where both are empty byte strings\n+        diff = callequal(b\"\", b\"\")\n+        assert diff == [\"b'' == b''\"]\n+\n+        # Original issue example: `b\"\" == b\"42\"`\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+            \"?   ++\",\n+        ]\n+\n+        # Another example from the issue: `b\"\" == b\"1\"`\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+            \"?  +\",\n+        ]\n+\n     def test_list_bad_repr(self):\n         class A:\n             def __repr__(self):\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..41c1b5e 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,4 +1,6 @@\n+\n import os\n+from datetime import datetime\n from xml.dom import minidom\n \n import py\n@@ -157,6 +159,25 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n+    def test_hostname_and_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_example():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+\n+        # Verify hostname is included\n+        import platform\n+        node.assert_attr(hostname=platform.node())\n+\n+        # Verify timestamp is included\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n+\n     @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..271effa 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -150,7 +150,20 @@ def test_unicode():\n     assert saferepr(val) == reprval\n \n \n-def test_pformat_dispatch():\n+def test_broken_getattribute_and_repr():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ and __repr__ (#7145)\"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Error in __getattribute__\")\n+\n+        def __repr__(self):\n+            raise RuntimeError(\"Error in __repr__\")\n+\n+    # Verify that no INTERNALERROR occurs and a proper representation is returned\n+    result = saferepr(SomeClass())\n+    assert result.startswith(\"<[RuntimeError('Error in __repr__') raised in repr()] SomeClass object at 0x\")\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..4b75089 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -70,8 +70,32 @@ def test_make_hook_recorder(testdir) -> None:\n     recorder.hook.pytest_runtest_logreport(report=rep3)\n     pytest.raises(ValueError, recorder.getfailures)\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n \n-def test_parseconfig(testdir) -> None:\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            if not os.path.exists(out_dir):\n+                os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     config1 = testdir.parseconfig()\n     config2 = testdir.parseconfig()\n     assert config2 is not config1\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..b3ae4b9 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,6 @@\n import os\n import sys\n+import os\n from unittest import mock\n \n import pytest\n",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..8bfae31 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -411,6 +412,33 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*NOTRUN*\"])\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(\n+        self, testdir: Testdir\n+    ) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_dynamic_xfail_set_during_funcarg_setup(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-8365": "",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..c349563 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,30 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    n_samples = 8\n+    n_features = 5\n+    X = rng.randn(n_samples, n_features)\n+    alphas = [0.1, 1.0, 10.0]\n+    n_alphas = len(alphas)\n+\n+    # with len(y.shape) == 1\n+    y = rng.choice([1, -1], size=n_samples)\n+    clf = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    clf.fit(X, y)\n+    assert_equal(clf.cv_values_.shape, (n_samples, n_alphas))\n+\n+    # with len(y.shape) == 2\n+    y = rng.choice([1, -1], size=(n_samples, 2))\n+    clf.fit(X, y)\n+    assert_equal(clf.cv_values_.shape, (n_samples, 2, n_alphas))\n \n-def test_ridgecv_store_cv_values():\n+    # Test that an error is raised when cv is not None and store_cv_values=True\n+    clf = RidgeClassifierCV(alphas=alphas, cv=3, store_cv_values=True)\n+    assert_raises(ValueError, clf.fit, X, y)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..e8f495a 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -14,6 +14,7 @@ from sklearn.mixture.bayesian_mixture import _log_wishart_norm\n from sklearn.mixture import BayesianGaussianMixture\n \n from sklearn.mixture.tests.test_gaussian_mixture import RandomData\n+from sklearn.utils.testing import assert_greater\n from sklearn.exceptions import ConvergenceWarning\n from sklearn.utils.testing import assert_greater_equal, ignore_warnings\n \n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..c5a1b1e 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,46 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+from sklearn.preprocessing import OneHotEncoder\n+import numpy as np\n+import pytest\n+from numpy.testing import assert_array_equal\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore', dtype=bool)\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_ignore_unknown_with_varied_lengths():\n+    X = np.array(['a', 'bb', 'ccc']).reshape((-1, 1))\n+    X_test = np.array(['dddd', 'a']).reshape((-1, 1))\n+    # Test with varied lengths where unknowns are longer\n+    encoder = OneHotEncoder(handle_unknown='ignore', dtype=bool)\n+    encoder.fit(X)\n+    result = encoder.transform(X_test).toarray()\n+    expected = np.array([[0., 0., 0.], [1., 0., 0.]])\n+    assert_array_equal(result, expected)\n+\n+def test_one_hot_encoder_ignore_with_empty_unknown():\n+    X = np.array(['cat', 'dog', 'fish']).reshape((-1, 1))\n+    X_test = np.array(['', 'cat']).reshape((-1, 1))\n+    # Test when unknown is an empty string\n+    encoder = OneHotEncoder(handle_unknown='ignore', dtype=bool)\n+    encoder.fit(X)\n+    result = encoder.transform(X_test).toarray()\n+    expected = np.array([[0., 0., 0.], [1., 0., 0.]])\n+    assert_array_equal(result, expected)\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..9daafd8 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,6 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n \n def test_gaussian_mixture_fit():\n     # recover the ground truth\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..b7b08d8 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -13,8 +14,28 @@ from sklearn.pipeline import Pipeline\n from sklearn.model_selection import GridSearchCV\n from sklearn.metrics.pairwise import rbf_kernel\n \n+from sklearn.utils.testing import assert_allclose\n+\n+def test_kernel_pca_sign_invariance():\n+    # Test to ensure KernelPCA results are invariant to sign flips\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(10, 10)\n+\n+    # We will run the KernelPCA multiple times and check if the results are\n+    # consistent up to sign flips\n+    n_runs = 5\n+    n_components = 7\n+    transformed_results = []\n+\n+    for _ in range(n_runs):\n+        kpca = KernelPCA(n_components=n_components, kernel='rbf', random_state=rng)\n+        transformed_X = kpca.fit_transform(X)\n+        transformed_results.append(transformed_X)\n \n-def test_kernel_pca():\n+    # Assert that all transformed results are equal up to sign\n+    first_result = transformed_results[0]\n+    for result in transformed_results[1:]:\n+        assert_allclose(np.abs(result), np.abs(first_result))\n     rng = np.random.RandomState(0)\n     X_fit = rng.random_sample((5, 4))\n     X_pred = rng.random_sample((2, 4))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..e8dbc86 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,6 +1057,27 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n+from sklearn.pipeline import Pipeline\n+from sklearn.svm import SVC\n+from sklearn.feature_selection import SelectKBest, f_regression\n+\n+def test_pipeline_len():\n+    # Test that the length of the pipeline matches the number of steps\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    assert len(pipe) == 2\n+\n+def test_pipeline_len_empty():\n+    # Test that the length of an empty pipeline is 0\n+    pipe = Pipeline([])\n+    assert len(pipe) == 0\n+\n+def test_pipeline_len_single_step():\n+    # Test that the length of a pipeline with a single step is 1\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    pipe = Pipeline([('anova', anova_filter)])\n+    assert len(pipe) == 1\n \n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n@@ -1070,4 +1091,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..a7ceba8 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -11,6 +12,8 @@ import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils import check_random_state\n+from sklearn.ensemble import IsolationForest\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..227d23d 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -173,6 +173,30 @@ def test_mutual_info_classif_mixed():\n         assert_equal(mi_nn[2], mi[2])\n \n \n+from numpy.testing import assert_raises, assert_array_equal\n+from scipy.sparse import csr_matrix\n+import numpy as np\n+from sklearn.feature_selection import mutual_info_regression, mutual_info_classif\n+\n+def test_mutual_info_with_different_discrete_features():\n+    X = np.array([[0, 0, 0],\n+                  [1, 1, 0],\n+                  [2, 0, 1],\n+                  [2, 0, 1],\n+                  [2, 0, 1]], dtype=float)\n+    y = np.array([0, 1, 2, 2, 1], dtype=float)\n+\n+    # Test with array of indices\n+    mi_indices = mutual_info_classif(X, y, discrete_features=[0, 2], random_state=0)\n+    assert mi_indices is not None\n+\n+    # Test with boolean mask\n+    mi_boolean_mask = mutual_info_classif(X, y, discrete_features=[True, False, True], random_state=0)\n+    assert_array_equal(mi_indices, mi_boolean_mask)\n+\n+    # Test with incorrect boolean mask length\n+    assert_raises(ValueError, mutual_info_classif, X, y, discrete_features=[True, False])\n+\n def test_mutual_info_options():\n     X = np.array([[0, 0, 0],\n                   [1, 1, 0],\n@@ -197,4 +221,4 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..620b312 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -215,7 +218,17 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n     set_config(print_changed_only=False)\n \n \n-def test_pipeline():\n+def test_logistic_regression_cv_changed_only():\n+    # Test array parameters with print_changed_only=True do not throw errors\n+    set_config(print_changed_only=True)\n+    try:\n+        repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        assert \"Cs=array([0.1, 1. ])\" in repr_output\n+    except ValueError:\n+        assert False, \"ValueError raised when it should not be.\"\n+\n+    # Reset config to default\n+    set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..2898e9c 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,25 @@\n+\n+@pytest.mark.filterwarnings('ignore: Default solver will be changed')  # 0.22\n+@pytest.mark.filterwarnings('ignore: Default multi_class will')  # 0.22\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(datasets.load_iris(return_X_y=True)[0], datasets.load_iris(return_X_y=True)[1], VotingClassifier(\n+        [('lr', LogisticRegression()),\n+         ('rf', RandomForestClassifier(n_estimators=5))])),\n+     (datasets.load_iris(return_X_y=True)[0], datasets.load_iris(return_X_y=True)[1], VotingRegressor(\n+         [('lr', LinearRegression()),\n+          ('rf', RandomForestRegressor(n_estimators=5))]))]\n+)\n+def test_none_estimator_with_weights(X, y, voter):\n+    # check that an estimator can be set to None and passing some weight\n+    # regression test for\n+    # https://github.com/scikit-learn/scikit-learn/issues/13777\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape[0] == y.shape[0]\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -8,6 +30,8 @@ from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n from sklearn.exceptions import NotFittedError\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..64d62a7 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -679,6 +679,39 @@ def test_unicode_kernel():\n                                 kernel='linear',\n                                 random_seed=0)\n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+    \n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_no_error_when_no_support_vectors():\n+    # Additional test to ensure no error is raised when support_vectors_ is empty\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+    \n+    X_train = sparse.csr_matrix([[0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert model.dual_coef_ is not None\n+    assert model.dual_coef_.shape == (1, 0)\n+    assert model.support_vectors_.shape == (0, X_train.shape[1])\n+\n \n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..60b865c 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -979,8 +979,33 @@ def test_repeated_cv_value_errors():\n         assert_raises(ValueError, cv, n_repeats=0)\n         assert_raises(ValueError, cv, n_repeats=1.5)\n \n-\n-def test_repeated_kfold_determinstic_split():\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+@pytest.mark.parametrize(\"RepeatedCV, expected\", [\n+    (RepeatedKFold, \"RepeatedKFold(n_repeats=6, n_splits=2, random_state=None)\"),\n+    (RepeatedStratifiedKFold, \"RepeatedStratifiedKFold(n_repeats=6, n_splits=2, random_state=None)\")\n+])\n+def test_repeated_cv_repr(RepeatedCV, expected):\n+    \"\"\"Test __repr__ methods for Repeated KFold classes.\"\"\"\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    assert repr(repeated_cv) == expected\n+\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr_with_random_state(RepeatedCV):\n+    \"\"\"Test __repr__ methods with a specified random_state.\"\"\"\n+    n_splits, n_repeats, random_state = 3, 4, 42\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)\n+    expected_repr = \"{}(n_repeats=4, n_splits=3, random_state=42)\".format(repeated_cv.__class__.__name__)\n+    assert repr(repeated_cv) == expected_repr\n+\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr_with_different_parameters(RepeatedCV):\n+    \"\"\"Test __repr__ with different parameters.\"\"\"\n+    n_splits, n_repeats = 5, 8\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    expected_repr = \"{}(n_repeats=8, n_splits=5, random_state=None)\".format(repeated_cv.__class__.__name__)\n+    assert repr(repeated_cv) == expected_repr\n     X = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n     random_state = 258173307\n     rkf = RepeatedKFold(\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..3cc84e7 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -151,6 +151,19 @@ def test_affinity_propagation_predict_non_convergence():\n     y = assert_warns(ConvergenceWarning, af.predict, to_predict)\n     assert_array_equal(np.array([-1, -1, -1]), y)\n \n+def test_affinity_propagation_non_convergence_labels_and_centers():\n+    # Test that non-converged AffinityPropagation returns -1 labels and empty cluster centers\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+    \n+    # Check labels\n+    assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n+    \n+    # Check cluster centers indices\n+    assert len(af.cluster_centers_indices_) == 0\n+\n \n def test_equal_similarities_and_preferences():\n     # Unequal distances\n",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..605a60d 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,11 +1,16 @@\n+\n import warnings\n import numpy as np\n import pickle\n import copy\n \n import pytest\n-\n-from sklearn.datasets import make_regression\n+import pytest\n+import numpy as np\n+import pandas as pd\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn import set_config\n from sklearn.isotonic import (\n     check_increasing,\n     isotonic_regression,\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 21b6a7e..c55ea8a 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -737,7 +737,40 @@ def test_autodoc_type_aliases(app):\n     ]\n \n \n-@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc')\n+def test_autodoc_type_aliases_for_variables_and_attributes(app):\n+    # Given the test configuration\n+    app.config.autodoc_type_aliases = {'String': 'example.MyString'}\n+    options = {\"members\": None, \"undoc-members\": None}\n+\n+    # When auto-documenting the example module\n+    actual = do_autodoc(app, 'module', 'target.example', options)\n+\n+    # Then autodoc_type_aliases should apply to module-level variables and class attributes\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.example',\n+        '',\n+        '',\n+        '.. py:data:: var',\n+        '   :module: target.example',\n+        '   :type: example.MyString',\n+        '',\n+        '   blah blah blah',\n+        '',\n+        '',\n+        '.. py:class:: MyString',\n+        '   :module: target.example',\n+        '',\n+        '   mystring',\n+        '',\n+        '   .. py:attribute:: MyString.var',\n+        '      :module: target.example',\n+        '      :type: example.MyString',\n+        '',\n+        '      blah blah blah',\n+        '',\n+    ]\n def test_autodoc_default_options(app):\n     # no settings\n     actual = do_autodoc(app, 'class', 'target.enums.EnumCls')\n",
  "sphinx-doc__sphinx-8506": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..c369840 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -45,6 +46,19 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+\n def make_directive_bridge(env):\n     options = Options(\n         inherited_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..d0e088f 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -46,7 +48,8 @@ def test_restify():\n     assert restify(Any) == \":obj:`Any`\"\n \n \n-def test_restify_type_hints_containers():\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(List) == \":class:`List`\"\n     assert restify(Dict) == \":class:`Dict`\"\n     assert restify(List[int]) == \":class:`List`\\\\ [:class:`int`]\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..01ba190 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,38 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_with_use_param_false(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+    def test_other_parameters_with_use_param_true(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..d9e16b9 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -448,6 +449,35 @@ def test_sparse_matrix():\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n     assert SparseMatrix.eye(2).nnz() == 2\n \n+    # New test cases for hstack and vstack with zero dimension matrices\n+    def test_stack_with_zero_dimensions():\n+        # Test hstack with zero row matrices\n+        M1 = SparseMatrix.zeros(0, 0)\n+        M2 = SparseMatrix.zeros(0, 1)\n+        M3 = SparseMatrix.zeros(0, 2)\n+        M4 = SparseMatrix.zeros(0, 3)\n+        assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+        # Test vstack with zero column matrices\n+        M1 = SparseMatrix.zeros(1, 0)\n+        M2 = SparseMatrix.zeros(1, 1)\n+        M3 = SparseMatrix.zeros(1, 2)\n+        M4 = SparseMatrix.zeros(1, 3)\n+        assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+        # Test hstack with variety of zero row/column matrices\n+        M1 = SparseMatrix.zeros(0, 0)\n+        M2 = SparseMatrix.zeros(0, 1)\n+        M3 = SparseMatrix.zeros(0, 2)\n+        M4 = SparseMatrix.zeros(0, 3)\n+        assert SparseMatrix.vstack(M1, M2, M3, M4).shape == (0, 3)\n+\n+        sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+        assert SparseMatrix.hstack(*sparse_matrices) == SparseMatrix(0, 6, [])\n+\n+        sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+        assert SparseMatrix.vstack(*sparse_matrices) == SparseMatrix(6, 0, [])\n+\n \n def test_transpose():\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..8a7ac18 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -82,6 +82,27 @@ def check(a, exclude=[], check_attr=True):\n #================== core =========================\n \n \n+import sympy\n+import pickle\n+import sys\n+\n+def test_pickle_load_sympy_expression_with_float():\n+    # This is a test to verify the issue with pickling sympy expressions containing floats\n+    # from Python 2 and loading them in Python 3 is resolved.\n+    \n+    # Create a sympy expression containing a float\n+    x = sympy.symbols(\"x\")\n+    expression = x + 1.0\n+\n+    # Simulate pickling the expression in Python 2\n+    pickled_data = pickle.dumps(expression, protocol=2)\n+    \n+    # Simulate unpickling the expression in Python 3\n+    loaded_expression = pickle.loads(pickled_data)\n+    \n+    # Check if the expression is correctly unpickled\n+    assert loaded_expression == expression\n+\n def test_core_basic():\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..0eae864 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -273,7 +273,16 @@ def test_coth():\n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n \n-def test_coth_series():\n+def test_coth_subs_issue():\n+    from sympy import Symbol, coth, log, tan\n+\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Test cases for the specified integral values\n+    values_to_test = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for val in values_to_test:\n+        assert e.subs(x, val) is not None  # Ensure no exception is raised and a value is returned\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..71a2aa2 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,52 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+\n+    # Test case based on the issue description\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Additional test cases\n+    # Insert a zero column vector in the middle of a 3x3 identity matrix\n+    M2 = eye(3)\n+    V2 = Matrix([[0, 0, 0]])\n+    result2 = M2.col_insert(1, V2.transpose())\n+    expected2 = Matrix([\n+        [1, 0, 0, 0],\n+        [0, 0, 1, 0],\n+        [0, 0, 0, 1]\n+    ])\n+    assert result2 == expected2\n+\n+    # Insert an empty matrix into an identity matrix\n+    M3 = eye(3)\n+    V3 = Matrix()\n+    result3 = M3.col_insert(1, V3)\n+    expected3 = M3  # Should remain unchanged\n+    assert result3 == expected3\n+\n+    # Insert a column into a zero matrix\n+    M4 = Matrix.zeros(3, 3)\n+    V4 = Matrix([[5], [5], [5]])\n+    result4 = M4.col_insert(2, V4)\n+    expected4 = Matrix([\n+        [0, 0, 5, 0],\n+        [0, 0, 5, 0],\n+        [0, 0, 5, 0]\n+    ])\n+    assert result4 == expected4\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..f6139ea 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -620,46 +620,46 @@ def test_latex_sequences():\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n     assert latex(s1) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n+    latex_str = r'[1, 2, 1, 2, \\ldots]'\n     assert latex(s2) == latex_str\n \n     s3 = SeqFormula(a**2, (0, 2))\n     s4 = SeqPer((1, 2), (0, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4\\right\\]'\n+    latex_str = r'[0, 1, 4]'\n     assert latex(s3) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1\\right\\]'\n+    latex_str = r'[1, 2, 1]'\n     assert latex(s4) == latex_str\n \n     s5 = SeqFormula(a**2, (-oo, 0))\n     s6 = SeqPer((1, 2), (-oo, 0))\n \n-    latex_str = r'\\left\\[\\ldots, 9, 4, 1, 0\\right\\]'\n+    latex_str = r'[\\ldots, 9, 4, 1, 0]'\n     assert latex(s5) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 2, 1, 2, 1\\right\\]'\n+    latex_str = r'[\\ldots, 2, 1, 2, 1]'\n     assert latex(s6) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5, 11, \\ldots\\right\\]'\n+    latex_str = r'[1, 3, 5, 11, \\ldots]'\n     assert latex(SeqAdd(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5\\right\\]'\n+    latex_str = r'[1, 3, 5]'\n     assert latex(SeqAdd(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 11, 5, 3, 1\\right\\]'\n+    latex_str = r'[\\ldots, 11, 5, 3, 1]'\n     assert latex(SeqAdd(s5, s6)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4, 18, \\ldots\\right\\]'\n+    latex_str = r'[0, 2, 4, 18, \\ldots]'\n     assert latex(SeqMul(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4\\right\\]'\n+    latex_str = r'[0, 2, 4]'\n     assert latex(SeqMul(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n+    latex_str = r'[\\ldots, 18, 4, 2, 0]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..e32d4ad 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, EX, RR, CC\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -188,6 +189,19 @@ def test_Domain_preprocess():\n \n     raises(OptionError, lambda: Domain.preprocess('Z()'))\n \n+    # Additional test cases for RR and CC with multiple variables\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n+    # Verify that the error is raised for invalid domain specification\n+    raises(OptionError, lambda: Domain.preprocess('RR[y,z]'))\n+\n     assert Domain.preprocess('Z(x)') == ZZ.frac_field(x)\n     assert Domain.preprocess('Q(x)') == QQ.frac_field(x)\n \n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..bac16e5 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n@@ -298,6 +299,14 @@ def test_latex_functions():\n         r\"\\sin {x^{2}}\"\n \n     assert latex(asin(x)**2) == r\"\\operatorname{asin}^{2}{\\left (x \\right )}\"\n+    assert latex(acsc(x), inv_trig_style=\"full\") == r\"\\operatorname{arccsc}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"full\") == r\"\\operatorname{arcsec}{\\left (x \\right )}\"\n+    assert latex(acsc(x)**2, inv_trig_style=\"full\") == r\"\\operatorname{arccsc}^{2}{\\left (x \\right )}\"\n+    assert latex(asec(x)**2, inv_trig_style=\"full\") == r\"\\operatorname{arcsec}^{2}{\\left (x \\right )}\"\n+    assert latex(acsc(x), inv_trig_style=\"abbreviated\") == r\"\\operatorname{acsc}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"abbreviated\") == r\"\\operatorname{asec}{\\left (x \\right )}\"\n+    assert latex(acsc(x), inv_trig_style=\"power\") == r\"\\csc^{-1}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"power\") == r\"\\sec^{-1}{\\left (x \\right )}\"\n     assert latex(asin(x)**2, inv_trig_style=\"full\") == \\\n         r\"\\arcsin^{2}{\\left (x \\right )}\"\n     assert latex(asin(x)**2, inv_trig_style=\"power\") == \\\n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..4a1afd9 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,32 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty, symbols\n+\n+n = symbols('n')\n+\n+def test_MatAdd_pretty_printing():\n+    # Test case for issue #14814\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    assert pretty(x + y_star) == \"x + y*\"\n+\n+    # Additional cases\n+    a = symbols('a')\n+    y = MatrixSymbol('y', n, n)\n+    assert pretty(-a*x + -2*y*y_star) == \"-a*x - 2*y*y*\"\n+\n+    # Edge cases\n+    assert pretty(y - x) == \"-x + y\"\n+    assert pretty(-x + y_star) == \"-x + y*\"\n+\n+    # Case with multiple MatAdd instances\n+    z = MatrixSymbol('z', n, n)\n+    assert pretty(x + y_star + z) == \"x + y* + z\"\n+\n+    # Case with negative first argument\n+    assert pretty(-x + y) == \"-x + y\"\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..7d2fdc6 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -727,8 +727,20 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n+import sympy\n+from sympy import lambdify, symbols, MatrixSymbol\n+from sympy.testing.pytest import raises\n+\n+def test_curly_matrix_symbol():\n+    # Issue #15009\n+    curlyv = sympy.MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # These should not raise a SyntaxError\n+    lam = lambdify(curlyv, curlyv)\n+    assert lam([[1], [2]]) == [[1], [2]]\n \n-def test_python_keywords():\n+    lam_dummify = lambdify(curlyv, curlyv, dummify=True)\n+    assert lam_dummify([[3], [4]]) == [[3], [4]]\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..e3383df 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,25 @@\n+\n+def test_Max_Min():\n+    # Test the specific case mentioned in the issue\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    \n+    # Test with variables only\n+    assert mcode(Max(x, y)) == \"Max[x, y]\"\n+\n+    # Test with multiple arguments\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+\n+    # Test with mixed arguments\n+    assert mcode(Max(2, y, z)) == \"Max[2, y, z]\"\n+\n+    # Original test case to ensure no regression\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..531cea0 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,16 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex():\n+    # Test case for the issue where indexed matrix-expression LaTeX was incorrect\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Verify that the LaTeX output does not contain any double underscores\n+    assert latex((M*N)[i, j]) == r'\\sum_{k_{1}=0}^{k - 1} M_{i, k_{1}} N_{k_{1}, j}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..5381183 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -9,7 +10,22 @@ def test_idiff():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n-    # the use of idiff in ellipse also provides coverage\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Test cases based on the original issue\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Additional test cases to verify fixes\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x) == (x + 1) * exp(x - y)/(y + 1)\n+    # Non-equation form that was working in the example should still work\n+    assert idiff(y*exp(y) - x*exp(x), y, x) == (x + 1) * exp(x - y)/(y + 1)\n+    \n+    # Additional test with nested functions\n+    assert idiff(Eq(y**2 + f(x)**2, x**2), y, x) == x/y\n     circ = x**2 + y**2 - 4\n     ans = -3*x*(x**2 + y**2)/y**5\n     assert ans == idiff(circ, y, x, 3).simplify()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..696dd74 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,7 +582,26 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n-def test_empty_f_code():\n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import codegen\n+    from sympy import MatrixSymbol\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..478c6b3 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,25 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Eq, Piecewise, Symbol, Intersection, FiniteSet, S\n \n-def test_issue_9623():\n+def test_issue_intersection_duplicates():\n+    x = Symbol('x')\n+\n+    # Test case for Intersection({1}, {1}, {x})\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+\n+    # Test case with expected Piecewise result\n+    result = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1}, {x}).simplify() == result\n+    assert Intersection({1}, {1}, {x}).simplify() == result\n+\n+    # Additional test cases with duplicates\n+    assert Intersection({1, 1, 1}, {1, 1}, {x}) == Intersection({1}, {x})\n+    assert Intersection({1, 2, 2}, {2, 2}, {x}) == Intersection({2}, {x})\n+\n+    # Test case with numeric and symbolic intersection\n+    assert Intersection({1, 2}, {2, x}) == Piecewise(({2}, Eq(x, 2)), (S.EmptySet, True))\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..c565ac1 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,15 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n-def test_issue_7971():\n+def test_issue_17137():\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    \n+    # Additional test cases\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(exp(x)**I) == exp(x)**I\n+    assert simplify((cos(x) + sin(x))**I) == (cos(x) + sin(x))**I\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..c86e196 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -91,6 +92,9 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    assert 5 * p4 == Point(5, 5)  # Original test patch\n+    assert sympify(2.0) * p4 == Point(2.0, 2.0)  # New test case for sympify multiplication\n+    assert p4 * sympify(2.0) == Point(2.0, 2.0)  # New test case for reverse sympify multiplication\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n@@ -168,6 +172,9 @@ def test_point3D():\n \n \n     assert p4 * 5 == Point3D(5, 5, 5)\n+    assert 5 * p4 == Point3D(5, 5, 5)  # Original test patch\n+    assert sympify(2.0) * p4 == Point3D(2.0, 2.0, 2.0)  # New test case for sympify multiplication in 3D\n+    assert p4 * sympify(2.0) == Point3D(2.0, 2.0, 2.0)  # New test case for reverse sympify multiplication in 3D\n     assert p4 / 5 == Point3D(0.2, 0.2, 0.2)\n \n     raises(ValueError, lambda: Point3D(0, 0, 0) + 10)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..cc9af93 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,45 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, sympify, Symbol\n+from sympy.core.compatibility import raises\n+\n+def test_non_string_equality():\n+    # Symbols should not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Test to ensure __eq__ does not evaluate the repr of other objects\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    # Should not raise AttributeError\n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+\n+    class C2:\n+        def __repr__(self):\n+            return 'x'\n+\n+    # Should not incorrectly compare equal\n+    assert (x == C2()) is False\n+    assert (x != C2()) is True\n+\n+    # Test using a class with a runtime error in repr\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1941,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..8355530 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -554,7 +554,17 @@ def test_diophantine():\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n \n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy import symbols\n+\n+    x, y = symbols('x y', integer=True)\n+\n+    # Reproduce the original issue\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..912f202 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n from sympy.codegen.ast import Declaration, Variable, float64, int64\n@@ -59,6 +60,8 @@ def test_PostIncrement():\n     assert p.func(*p.args) == p\n     assert ccode(p) == '(x)++'\n \n+from sympy.core.basic import Basic\n+from sympy.core.symbol import Symbol\n \n def test_sizeof():\n     typename = 'unsigned int'\n@@ -66,8 +69,15 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    assert sz.atoms() == {String(typename), String('sizeof')}  # Updated to match issue description\n+\n+def test_atoms_on_basic():\n+    b = Basic()\n+    assert b.atoms() == set()  # Expecting an empty set as Basic has no arguments\n \n+def test_variable_atoms():\n+    vx = Variable(x, type=float64)\n+    assert vx.atoms() == {x, float64}  # Atoms should include both the symbol and the type\n \n def test_struct():\n     vx, vy = Variable(x, type=float64), Variable(y, type=float64)\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..44cc5e6 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,13 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_with_one_element():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..2b7e34d 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -67,6 +68,11 @@ def test_Identity_index():\n \n \n def test_block_index():\n+    # Additional test case for the issue with symbolic indices in BlockMatrix\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[i, 0] == MatrixElement(C, i, 0)  # Ensure no premature simplification\n     I = Identity(3)\n     Z = ZeroMatrix(3, 3)\n     B = BlockMatrix([[I, I], [I, I]])\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..409b46f 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -302,7 +302,21 @@ def test_sign():\n     assert sign(x).rewrite(Heaviside) == 2*Heaviside(x, H0=S(1)/2) - 1\n     assert sign(y).rewrite(Heaviside) == sign(y)\n \n-    # evaluate what can be evaluated\n+    # Test rewriting of sign in terms of Abs\n+    from sympy import Abs, Piecewise, Symbol, Eq, Function\n+\n+    y = Symbol('y')\n+    f = Function('f')\n+\n+    # Test with a basic variable symbol\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    \n+    # Test with a function of a variable\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y)/Abs(f(y)), True))\n+    \n+    # Test when input is zero\n+    z = Symbol('z', real=True)\n+    assert sign(z).rewrite(Abs) == Piecewise((0, Eq(z, 0)), (z/Abs(z), True))\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n     eq = -sqrt(10 + 6*sqrt(3)) + sqrt(1 + sqrt(3)) + sqrt(3 + 3*sqrt(3))\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..b43fd3d 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,18 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n+from sympy import S\n \n def test_partitions():\n+    # Test that partitions do not reuse dictionaries\n+    partitions_list = list(partitions(6, k=2))\n+    assert partitions_list == [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    \n+    # Modify one of the dictionaries and check if others are affected\n+    partitions_list[0][2] = 0\n+    assert partitions_list == [{2: 0}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    assert list(partitions(6, k=2)) == [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..8e6d903 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,6 +254,9 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n+from sympy import S, oo, zoo\n+from sympy.core.power import Pow\n+\n def test_zero():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -266,8 +269,11 @@ def test_zero():\n     assert 0**(2*x*y) == 0**(x*y)\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n-\n-def test_pow_as_base_exp():\n+def test_issue_19572():\n+    # Test 0 raised to a negative infinity power\n+    # It should give ComplexInfinity (zoo) as per the documentation.\n+    assert Pow(0, -oo) == zoo\n+    assert (0 ** -oo) == zoo\n     x = Symbol('x')\n     assert (S.Infinity**(2 - x)).as_base_exp() == (S.Infinity, 2 - x)\n     assert (S.Infinity**(x - 2)).as_base_exp() == (S.Infinity, x - 2)\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..13b7383 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n@@ -31,6 +32,32 @@ def test_eq():\n \n \n def test_convert_to():\n+    from sympy.physics.units import joule, minute, kg, m, s\n+\n+    # Original test patch\n+    expr = joule * s\n+    conv = convert_to(expr, joule)\n+    assert conv == expr, f\"Expected {expr}, but got {conv}\"\n+\n+    # Additional test cases\n+    # Case 1: Conversion to joule*second should return original\n+    conv = convert_to(expr, joule * s)\n+    assert conv == expr, f\"Expected {expr}, but got {conv}\"\n+\n+    # Case 2: Conversion to base units (kg*m**2/s) should be exact\n+    expr_kg_m2_per_s = kg * m**2 / s\n+    conv = convert_to(expr, expr_kg_m2_per_s)\n+    assert conv == expr_kg_m2_per_s, f\"Expected {expr_kg_m2_per_s}, but got {conv}\"\n+\n+    # Case 3: Conversion to minutes should adjust the time unit\n+    expr_minutes = joule * minute / 60\n+    conv = convert_to(expr, minute)\n+    assert conv == expr_minutes, f\"Expected {expr_minutes}, but got {conv}\"\n+\n+    # Case 4: Conversion to unrelated units should return original\n+    # Since 'joule' is unrelated to 'meter', conversion should fail gracefully\n+    conv = convert_to(expr, m)\n+    assert conv == expr, f\"Conversion to unrelated units should return original: {expr}, but got {conv}\"\n     q = Quantity(\"q1\")\n     q.set_global_relative_scale_factor(S(5000), meter)\n \n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..627c8cf 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,17 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_slots():\n+    # Test that SymPy Symbols do not have __dict__ due to the use of __slots__\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    # Ensure that attempting to assign to a non-existent attribute raises an AttributeError\n+    with raises(AttributeError):\n+        s.some_attribute = 42\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..2b8b2df 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,18 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_issue_refine_complex_arguments():\n+    a = Symbol('a', real=True)\n+    x = Symbol('x', real=True)\n+    J = Integral(sin(x)*exp(-a*x), (x, 0, oo))\n+    \n+    # Testing if refine can simplify the result of the integral under the assumption that a is positive\n+    assert J.doit().simplify() == Piecewise((1/(a**2 + 1), 2*Abs(arg(a)) < pi), (Integral(exp(-a*x)*sin(x), (x, 0, oo)), True))\n+    assert refine(J.doit(), Q.positive(a)) == 1/(a**2 + 1)\n+    \n+    # Testing refine on abs(a) and arg(a) under the same positive assumption\n+    assert refine(abs(a), Q.positive(a)) == a\n+    assert refine(arg(a), Q.positive(a)) == 0\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..ef29d27 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -8,6 +9,26 @@ from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n+from sympy.functions.elementary.trigonometric import sinh, cosh, tanh\n+from sympy.functions.elementary.piecewise import Piecewise\n+\n+def test_issue_21373_subs():\n+    x, y, z = symbols('x y z', real=True)\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})  # Ensures no error is raised\n+\n+    expr = exp(cosh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})  # Ensures no error is raised\n+\n+    expr = exp(tanh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})  # Ensures no error is raised\n+\n+    expr = sinh(Piecewise((x, y > x), (y, True)) / z)\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})  # Ensures no error is raised\n+\n+    expr = exp(Piecewise((x, y > x), (y, True)))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})  # Ensures no error is raised\n+\n def test_subs():\n     n3 = Rational(3)\n     e = x\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..bbb478e 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -34,7 +35,10 @@ def test_Symbol_kind():\n     assert comm_x.kind is NumberKind\n     assert noncomm_x.kind is UndefinedKind\n \n-def test_Integral_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    d = Derivative(A, comm_x)\n+    assert d.kind is MatrixKind(NumberKind)\n     A = MatrixSymbol('A', 2,2)\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..62e482f 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -131,7 +131,10 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n-    i, j, k = symbols('i j k', commutative=False)\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x2**3, x3**3, x1**2*x2, x1*x2**2, x1**2*x3, x1*x3**2, x2**2*x3, x2*x3**2, x1*x2*x3}\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {x1**3, x2**3, x3**3, x1**2*x2, x1*x2**2, x1**2*x3, x1*x3**2, x2**2*x3, x2*x3**2, x1*x2, x2*x3, x1*x3, x1*x2*x3, x1**2, x2**2, x3**2}\n+    assert set(itermonomials([x1, x2, x3], 2, 2)) == {x1**2, x2**2, x3**2, x1*x2, x1*x3, x2*x3, x1*x2*x3}\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n     assert set(itermonomials([i, j, k], [0, 1, 0])) == {1, j}\n",
  "sympy__sympy-22005": "",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..a933033 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -10,6 +11,18 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n+\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        Point(1, 2)\n+\n+def test_point2d_evaluate_false():\n+    # Ensure no error is raised with evaluate(False) and Point2D\n+    with evaluate(False):\n+        pt = Point2D(S.One, S(2))\n+        assert pt == Point2D(1, 2)\n \n \n def test_point():\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..f1aecf2 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -338,6 +338,34 @@ def test_cse_Indexed():\n     assert len(replacements) > 0\n \n \n+from sympy import symbols, MatrixSymbol, cse, IndexedBase, Idx, Matrix\n+from sympy.testing.pytest import raises\n+\n+def test_cse_MatrixSymbol_indexed():\n+    A = MatrixSymbol('A', 3, 3)\n+    B = MatrixSymbol('B', 3, 3)\n+\n+    # Test with indexed expression of MatrixSymbols\n+    expr = A[0, 0] * B[0, 0] + A[0, 1] * B[1, 0]\n+    replacements, reduced_exprs = cse(expr)\n+\n+    # In the original issue, x0, x1, x2, etc. are redundant copies of matrices.\n+    # Ensure that no such unnecessary substitutions are made\n+    assert replacements == []\n+    assert reduced_exprs == [expr]\n+\n+def test_cse_nonindexed_MatrixSymbol():\n+    # Ensure that non-indexed MatrixSymbol cases are handled correctly\n+    A = MatrixSymbol('A', 2, 2)\n+    B = MatrixSymbol('B', 2, 2)\n+\n+    expr = A * B\n+    replacements, reduced_exprs = cse(expr)\n+    \n+    # Since A and B are not indexed, their product should be a single expression without replacements\n+    assert replacements == []\n+    assert reduced_exprs == [A * B]\n+\n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..2f35304 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -37,6 +38,18 @@ def test_array_negative_indices():\n \n         assert test_array[-1, -1] == 10\n \n+def test_issue_17851():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n+\n+def test_issue_and_18715():\n+    for array_type in mutable_array_types:\n+        A = array_type([0, 1, 2])\n+        A[0] += 5\n+        assert A[0] == 5\n \n def test_issue_18361():\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..7a7918f 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,7 +1175,20 @@ def test_scipy_polys():\n \n \n \n-def test_lambdify_inspect():\n+def test_tuple_with_one_element():\n+    # Test for tuple with one element\n+    f = lambdify([], tuple([1]))\n+    assert inspect.getsource(f) == \"def _lambdifygenerated():\\n    return (1,)\\n\"\n+    assert f() == (1,)\n+\n+    # Test for tuple with multiple elements to ensure existing functionality works\n+    f2 = lambdify([], tuple([1, 2]))\n+    assert inspect.getsource(f2) == \"def _lambdifygenerated():\\n    return (1, 2)\\n\"\n+    assert f2() == (1, 2)\n+\n+    f_empty = lambdify([], tuple([]))\n+    assert inspect.getsource(f_empty) == \"def _lambdifygenerated():\\n    return ()\\n\"\n+    assert f_empty() == ()\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..1d5a6ce 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy import exp\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units.quantities import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+    from sympy.core.numbers import E\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..6b98ccb 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -32,6 +32,30 @@ def test_tensor_product_dagger():\n         TensorProduct(Dagger(mat1), Dagger(mat2))\n \n \n+from sympy import symbols\n+from sympy.physics.quantum import TensorProduct as TP, Operator\n+\n+# Define symbols for operators\n+A, B, C = symbols('A B C', commutative=False)\n+U = Operator('U')\n+V = Operator('V')\n+\n+# Tests for fix of the issue described\n+def test_tensor_product_issue_fix():\n+    # Test with scalar multiplication and addition in tensor product\n+    P = TP(2*U - V, U + V)\n+    expanded_P = P.expand(tensorproduct=True)\n+    expected_P = 2*TP(U, U) + 2*TP(U, V) - TP(V, U) - TP(V, V)\n+    assert expanded_P == expected_P\n+\n+    # Test original patch cases to ensure they are working with the fix\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n def test_tensor_product_abstract():\n \n     assert TP(x*A, 2*B) == x*2*TP(A, B)\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..8c7f433 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,6 +563,54 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter, SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_extended_cases():\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 3 * meter / second)\n+    \n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, -9.8 * meter / second**2)\n+    \n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 1 * second)\n+\n+    # Testing with negative acceleration\n+    expr2 = A2*T2 + V2\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr2)\n+\n+    # Test with zero scale factor quantities\n+    V3 = Quantity('V3')\n+    SI.set_quantity_dimension(V3, velocity)\n+    SI.set_quantity_scale_factor(V3, 0 * meter / second)\n+    \n+    A3 = Quantity('A3')\n+    SI.set_quantity_dimension(A3, acceleration)\n+    SI.set_quantity_scale_factor(A3, 0 * meter / second**2)\n+    \n+    expr3 = A3*T2 + V3\n+    # should not throw ValueError here and should handle zero correctly\n+    SI._collect_factor_and_dimension(expr3)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..90e2540 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, milli, W, V\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -22,7 +23,11 @@ def test_prefix_operations():\n     assert 1 / m == k\n     assert k / m == M\n \n-    assert dodeca * dodeca == 144\n+    # Test for milli prefix issue\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+    assert milli * V == V / 1000\n+    assert V * milli == V / 1000\n     assert 1 / dodeca == S.One / 12\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..ea9516c 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -185,11 +185,13 @@ class GrandParent(models.Model):\n \n \n class Parent(GrandParent):\n-    pass\n+    class Meta:\n+        ordering = ['-pk']\n \n \n class Child(Parent):\n-    pass\n+    class Meta:\n+        ordering = ['-pk']\n \n \n class GrandChild(Child):\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..2c13f70 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -333,6 +333,35 @@ class OrderingTests(TestCase):\n             article.author = author\n             article.save(update_fields={'author'})\n \n+    def test_self_ref_fk_ordering(self):\n+        # Setup test data\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        \n+        a1 = Article.objects.create(headline=\"Article 1\", author=author_1)\n+        a2 = Article.objects.create(headline=\"Article 2\", author=author_2)\n+\n+        # Test ordering by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),  # Assuming 'editor' is the self-ref fk\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+        \n+        # Test with a different ordering\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n+    def test_order_by_f_expression(self):\n+\n         self.assertQuerysetEqual(\n             Article.objects.order_by('author_id'), [\n                 \"Article 4\",\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..0fd736f 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,39 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundfield_subwidget_id_for_label_custom_id(self):\n+        \"\"\"\n+        Test that custom ids provided in subwidgets are used for the label.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        # Create a form with a specific auto_id format\n+        form = SomeForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Check if the id_for_label matches the custom id format\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n+\n+    def test_boundfield_subwidget_id_for_label_default(self):\n+        \"\"\"\n+        Test that default id format is used when no auto_id is specified.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        # Create a form without a specific auto_id format\n+        form = SomeForm()\n+        subwidgets = form['field'].subwidgets\n+        # Check if the id_for_label matches the default generated id format\n+        self.assertEqual(subwidgets[0].id_for_label, 'id_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'id_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex de2502e..c1af6c5 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1484,4 +1484,43 @@ class CreatePermissionsTests(TestCase):\n                 content_type__app_label=opts.app_label,\n                 codename=codename,\n             ).exists()\n-        )\n+        )\n+\n+from django.test import TestCase, override_settings\n+from django.contrib.auth.models import Permission\n+from django.apps import apps\n+from django.core.management import call_command\n+\n+class DefaultDBRouter:\n+    \"\"\"Route all writes to default.\"\"\"\n+\n+    def db_for_write(self, model, **hints):\n+        return \"default\"\n+\n+@override_settings(DATABASE_ROUTERS=[DefaultDBRouter()])\n+class CreatePermissionsMultipleDatabasesTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def test_set_permissions_fk_to_using_parameter(self):\n+        Permission.objects.using(\"other\").delete()\n+        with self.assertNumQueries(6, using=\"other\") as captured_queries:\n+            create_permissions(apps.get_app_config(\"auth\"), verbosity=0, using=\"other\")\n+        self.assertIn(\"INSERT INTO\", captured_queries[-1][\"sql\"].upper())\n+        self.assertGreater(Permission.objects.using(\"other\").count(), 0)\n+\n+    def test_migrate_respects_database_parameter(self):\n+        \"\"\"Test that migrate command respects the specified database parameter.\"\"\"\n+\n+        # Delete all permissions from the 'other' database\n+        Permission.objects.using(\"other\").delete()\n+        self.assertEqual(Permission.objects.using(\"other\").count(), 0)\n+\n+        # Run migrate for the 'other' database\n+        call_command('migrate', database='other', verbosity=0)\n+\n+        # Check that permissions have been added to the 'other' database\n+        self.assertGreater(Permission.objects.using(\"other\").count(), 0)\n+\n+        # Ensure permissions are not inadvertently added to the 'default' database\n+        original_count_default = Permission.objects.using(\"default\").count()\n+        self.assertEqual(Permission.objects.using(\"default\").count(), original_count_default)\n",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..d546584 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,40 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+def test_colorbar_update_after_changing_norm():\n+    # Generate random data\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    # Create a plot\n+    fig, ax = plt.subplots(1, 1)\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+\n+    # Change the normalization of the plot\n+    plot.set_norm(LogNorm())\n+    # Update the colorbar\n+    cb.update_normal(plot)\n+    fig.canvas.draw()\n+\n+    # Test if the colorbar's ticks reflect the log norm correctly\n+    assert cb.ax.yaxis.get_scale() == 'log'\n+    assert cb.norm.vmin == img.min()\n+    assert cb.norm.vmax == img.max()\n+\n+    # Reset to linear normalization\n+    plot.set_norm(Normalize())\n+    cb.update_normal(plot)\n+    fig.canvas.draw()\n+\n+    # Test if the colorbar's ticks reflect the linear scale correctly\n+    assert cb.ax.yaxis.get_scale() == 'linear'\n+\n+    plt.close(fig)\n+\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm, Normalize, to_rgba\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..80978b3 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,12 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+from target.uninitialized_attributes import Base, Derived\n+from sphinx.ext.autodoc import do_autodoc\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..969d580 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -9,9 +10,32 @@ from sympy.utilities.pytest import XFAIL\n from sympy.abc import x, y, z, t, a, b, c, d, e, f, g, h, i, k\n \n \n-\n-def test_trigsimp1():\n-    x, y = symbols('x,y')\n+def test_issue_simplification_with_rational():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    r = t1.dot(t2)\n+    \n+    # Original issue reported no simplification\n+    assert simplify(r) == cos(S(1)/50 - S(1)/25)\n+    assert trigsimp(r) == cos(S(1)/50 - S(1)/25)\n+    \n+    # Test for direct trigonometric expression simplification\n+    r_direct = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert simplify(r_direct) == cos(S(1)/50 - S(1)/25)\n+    assert trigsimp(r_direct) == cos(S(1)/50 - S(1)/25)\n+\n+    # Test for acos on the simplified result\n+    acos_r = acos(r)\n+    assert simplify(acos_r).evalf() == acos(cos(S(1)/50 - S(1)/25)).evalf()\n+\n+    # Ensuring trigsimp still works for different kinds of expressions\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+    # Additional test with a simple rational difference\n+    r3 = Rational(1, 50) - Rational(1, 25)\n+    assert simplify(r3) == -Rational(1, 50)\n \n     assert trigsimp(1 - sin(x)**2) == cos(x)**2\n     assert trigsimp(1 - cos(x)**2) == sin(x)**2\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..0783b9e 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,25 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_pretty_print_alignment():\n+    from sympy import Sum, oo, pprint\n+    from sympy.abc import x\n \n-def test_units():\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e    \\n\\\n+ ___   \\n\\\n+ \u2572     \\n\\\n+  \u2572   x\\n\\\n+  \u2571    \\n\\\n+ \u2571     \\n\\\n+ \u203e\u203e\u203e   \\n\\\n+x = 1  \\n\\\n+     + 3\\\n+\"\"\")\n+    # Ensure the `+ 3` is aligned correctly with the sum function expression\n+    assert upretty(expr) == ucode_str\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..790f122 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -701,6 +701,16 @@ def test_uniq():\n     assert list(uniq([[1], [2, 1], [1]])) == [[1], [2, 1]]\n     assert list(uniq(permutations(i for i in [[1], 2, 2]))) == \\\n         [([1], 2, 2), (2, [1], 2), (2, 2, [1])]\n+    \n+    # Test cases to ensure RuntimeError is raised when list changes size during iteration\n+    f = [1, 2, 3]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [[1], [2], [3]]\n+    raises(RuntimeError, lambda: [f.pop(0) for i in uniq(f)])\n+    f = [1, 2, 2, 3, 3, 3]\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+    f = [1, 1, 1, 1]\n+    raises(RuntimeError, lambda: [f.clear() for i in uniq(f)])\n     assert list(uniq([2, 3, 2, 4, [2], [1], [2], [3], [1]])) == \\\n         [2, 3, 4, [2], [1], [3]]\n \n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..b50247b 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -8,6 +9,7 @@ from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n+from django.db.models import Max\n \n from .models import (\n     Article, Author, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n",
  "django__django-15320": "",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..1272c2a 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,7 +153,34 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation('pool__tournament__pool'),\n+                ).select_related('tournament_pool', 'tournament_pool__tournament')\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation('pool__tournament__pool'),\n+                ).select_related('tournament_pool', 'tournament_pool__tournament')\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation('pool__another_style'),\n+                )\n+                .select_related('style')\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +191,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..61b0f31 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -10,6 +11,8 @@ import warnings\n import numpy as np\n import pytest\n from PIL import Image\n+import matplotlib.pyplot as plt\n+import pickle\n \n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..58f94cd 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -8,6 +9,11 @@ import pytest\n from numpy.testing import assert_array_equal\n \n from seaborn.external.version import Version\n+from seaborn import PairGrid\n+from seaborn import scatterplot, regplot\n+from seaborn import load_dataset\n+import pandas as pd\n+import pytest\n from seaborn.palettes import color_palette\n \n from seaborn.relational import (\n@@ -1623,7 +1629,23 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_with_hue(self):\n+        # Load the iris dataset\n+        iris = load_dataset(\"iris\")\n+        \n+        # Create a PairGrid without using the hue keyword argument\n+        g = PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        \n+        # Attempt to map scatterplot with hue as a Series (categorical) to the PairGrid\n+        try:\n+            g.map(scatterplot, hue=iris[\"species\"])\n+            g.map(regplot, scatter=False)\n+            success = True\n+        except Exception as e:\n+            success = False\n+        \n+        # Assert that the operation does not raise an exception\n+        assert success, \"Mapping scatterplot with categorical hue to PairGrid should not raise an exception\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..eb011b0 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -323,6 +323,19 @@ class TestTraceback_f_g_h:\n         assert entry.frame.code.name == \"g\"\n \n \n+import pytest\n+\n+...\n+\n+def test_raises_context_str():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    \n+    # Check that str(excinfo) does not give the full message\n+    assert str(excinfo) != \"A\\nB\\nC\"\n+    # Check that str(excinfo.value) gives the full message\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+\n def test_excinfo_exconly():\n     excinfo = pytest.raises(ValueError, h)\n     assert excinfo.exconly().startswith(\"ValueError\")\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..f3af72a 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,11 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Test the new shortcut for `--collect-only`\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+        # Test the new shortcut for `--collect-only`\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..040ee79 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -91,11 +91,20 @@ def missing_attr(c,\n     return a + (b or \"\")\n \n \n-class _ClassWithDocumentedInit:\n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n     \"\"\"Class docstring.\"\"\"\n \n     def __init__(self, x: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..e7bf19a 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -71,8 +71,19 @@ def test_ZeroMatrix_doit():\n     assert Znn.doit() == ZeroMatrix(2*n, n)\n     assert isinstance(Znn.doit().rows, Mul)\n \n+from sympy import Symbol, symbols, Sum, Identity\n+from sympy.matrices.expressions.matexpr import MatrixSymbol\n \n-def test_Identity():\n+def test_identity_matrix_sum():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+    \n+    # Test the sum of the diagonal elements\n+    assert Sum(In[i, i], (i, 0, n - 1)).doit() == n\n+    \n+    # Test the total sum of all elements\n+    assert Sum(Sum(In[i, j], (i, 0, n - 1)), (j, 0, n - 1)).doit() == n\n     A = MatrixSymbol('A', n, m)\n     In = Identity(n)\n     Im = Identity(m)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..d9d7713 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -246,6 +246,17 @@ GOOD_PAIRS = [\n ]\n \n \n+from sympy.parsing.latex import parse_latex\n+from sympy import Symbol, Rational\n+\n+a, b, c = Symbol('a'), Symbol('b'), Symbol('c')\n+\n+def test_issue_21537():\n+    # Test for the specific issue of LaTeX parsing with nested fractions\n+    latex_expr = r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\"\n+    expected_expr = ((a**3 + b)/c)/(1/(c**2))\n+    assert parse_latex(latex_expr) == expected_expr\n+\n def test_parseable():\n     from sympy.parsing.latex import parse_latex\n     for latex_str, sympy_expr in GOOD_PAIRS:\n"
}