{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..8a26f5b 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,8 +134,22 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n-\n-def test_custom_model_separable():\n+def test_nested_compound_model_separability():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    nested_cm = m.Pix2Sky_TAN() & cm\n+\n+    # Expected separability matrix for the nested compound model\n+    expected_separability_matrix = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, False],\n+        [False, False, False, True]\n+    ])\n+\n+    result_separability_matrix = separability_matrix(nested_cm)\n+    assert_allclose(result_separability_matrix, expected_separability_matrix)\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..66ea0d5 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,32 @@\n+\n+def test_write_rst_with_header_rows():\n+    \"\"\"Test writing a table in RST format with header rows specified\"\"\"\n+    tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    \n+    # Expected output with header rows\n+    expected_output = (\n+        \"===== ========\\n\"\n+        \" wave response\\n\"\n+        \"  nm       ct\\n\"\n+        \"===== ========\\n\"\n+        \"350.0      0.7\\n\"\n+        \"950.0      1.2\\n\"\n+        \"===== ========\\n\"\n+    )\n+    \n+    assert out.getvalue() == expected_output\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+from io import StringIO\n \n from .common import assert_almost_equal, assert_equal\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..216b48d 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,42 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+import numpy as np\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip_with_case_insensitivity(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Example QDP file\n+    READ SERR 1\n+    1 0.1\n+    2 0.2\n+    NO NO\n+    \"\"\"\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+\n+    path = str(tmp_path / \"test_case_insensitivity.qdp\")\n+\n+    with open(path, \"w\") as fp:\n+        fp.write(example_qdp)\n+\n+    table = _read_table_qdp(path, names=[\"Col1\", \"Col2\"], table_id=0)\n \n-def test_read_example():\n+    assert not table.masked\n+    assert np.allclose(table[\"Col1\"], [1, 2])\n+    assert np.allclose(table[\"Col2\"], [0.1, 0.2])\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..6bc6897 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,39 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddataref_mask_propagation_bitwise_or():\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # Multiply mask by constant (mask * no mask)\n+    np.testing.assert_equal(nref_mask.multiply(1.0, handle_mask=np.bitwise_or).mask, mask)\n+\n+    # multiply mask by itself (mask * mask)\n+    np.testing.assert_equal(nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask, mask)\n+\n+    # multiply mask by no mask (mask * no mask)\n+    np.testing.assert_equal(nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask)\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_mask, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask)\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..ef40874 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,22 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_d_exponent_replacement(self):\n+        \"\"\"Test handling of 'D' exponents in ASCII tables.\"\"\"\n+        # Creating a FITS table with 'D' format to check if the replacement works\n+        r1 = np.array([1.23e+4, 5.67e-8])\n+        c1 = fits.Column(name='col1', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1])\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+\n+        with open(self.temp('test_d_exponent.fits')) as f:\n+            content = f.read()\n+            assert '1.2300000000000000D+04' in content\n+            assert '5.6700000000000000D-08' in content\n+\n+        with fits.open(self.temp('test_d_exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..7b470b2 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,14 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        By default, FILE_UPLOAD_PERMISSIONS should be set to 0o644.\n+        \"\"\"\n+        from django.core.files.storage import default_storage\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):  # Ensure it's not set elsewhere\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex e8d2c40..cd38c28 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -1,3 +1,4 @@\n+\n from django.apps import apps\n from django.core.management.base import BaseCommand, CommandError\n from django.db import DEFAULT_DB_ALIAS, connections\n@@ -56,7 +57,7 @@ class Command(BaseCommand):\n         targets = [(app_label, migration.name)]\n \n         # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\n",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..4b93fdc 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,13 +75,23 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n-class TestFormField(SimpleTestCase):\n+    def test_invalid_format_message(self):\n+        field = models.DurationField()\n+        invalid_value = '14:00'  # This should be invalid since seconds are missing\n+        with self.assertRaises(exceptions.ValidationError) as cm:\n+            field.clean(invalid_value, None)\n+        self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+            f\"'{invalid_value}' value has an invalid format. \"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n     # Tests for forms.DurationField are in the forms_tests app.\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..10f52ae 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\",\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +250,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +258,14 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n+\n+    def test_unicode_validator_with_trailing_newline(self):\n+        v = validators.UnicodeUsernameValidator()\n+        with self.assertRaises(ValidationError):\n+            v('validusername\\n')\n+\n+    def test_ascii_validator_with_trailing_newline(self):\n+        v = validators.ASCIIUsernameValidator()\n+        with self.assertRaises(ValidationError):\n+            v('validusername\\n')\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..59c6988 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,10 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..25e5d13 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,7 +1,9 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n+from django.db.models.deletion import Collector\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n from .models import (\n@@ -464,7 +466,17 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        \"\"\"Test that deleting an instance sets its PK to None.\"\"\"\n+        u = User.objects.create()\n+        # Verify the PK is not None initially\n+        self.assertIsNotNone(u.pk)\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        # After deletion, the PK should be None\n+        self.assertIsNone(u.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..6a8c9b2 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,78 @@\n+\n+class ProxyPermissionsMigrationTests(TestCase):\n+    available_apps = [\n+        'auth_tests',\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+    ]\n+\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Permissions may already exist:\n+\n+        - Old workaround was to manually create permissions for proxy models.\n+        - Model may have been concrete and then converted to proxy.\n+\n+        Output a reminder to audit relevant permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_no_duplicate_permissions_after_migration(self):\n+        \"\"\"\n+        Test to ensure that migrating does not create duplicate permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        # Attempt migration, should not raise IntegrityError\n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        # Check only one instance of the permission exists\n+        self.assertEqual(\n+            Permission.objects.filter(content_type=proxy_model_content_type, codename='add_proxy').count(),\n+            1\n+        )\n+\n+    def test_revert_proxy_permissions(self):\n+        \"\"\"\n+        Test to ensure that reverting proxy permissions works correctly.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        update_proxy_permissions.revert_proxy_model_permissions(apps, None)\n+        # Check if the permission exists for the concrete model after revert\n+        concrete_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=True)\n+        self.assertTrue(\n+            Permission.objects.filter(content_type=concrete_model_content_type, codename='add_proxy').exists()\n+        )\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.test.utils import captured_stdout\n \n from .models import Proxy, UserProxy\n \n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..23dfa5b 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -19,7 +19,9 @@ from django.test.utils import extend_sys_path\n from django.utils import autoreload\n from django.utils.autoreload import WatchmanUnavailable\n \n-from .utils import on_macos_with_hfs\n+import sys\n+import os\n+from django.utils.autoreload import StatReloader\n \n \n class TestIterModulesAndFiles(SimpleTestCase):\n@@ -85,7 +87,26 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 autoreload.check_errors(import_module)('test_syntax_error')\n         self.assertFileFound(filename)\n \n-    def test_check_errors_catches_all_exceptions(self):\n+    def test_manage_py_change_triggers_reload(self):\n+        \"\"\"\n+        The autoreloader should detect changes to manage.py.\n+        \"\"\"\n+        # Simulate a manage.py file\n+        manage_py = self.temporary_file('manage.py')\n+        manage_py.write_text('print(\"Original\")')\n+\n+        # Create an instance of StatReloader\n+        reloader = StatReloader()\n+\n+        # Add manage.py to the reloader's watch list\n+        reloader.watch_file(manage_py)\n+\n+        # Simulate a change to manage.py\n+        manage_py.write_text('print(\"Modified\")')\n+\n+        # Check if the change is detected\n+        changed_files = list(reloader.update_watch_list())\n+        self.assertIn(manage_py.resolve(), changed_files)\n         \"\"\"\n         Since Python may raise arbitrary exceptions when importing code,\n         check_errors() must catch Exception, not just some subclasses.\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..923d8ce 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -136,6 +136,23 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         main_module = sys.modules['__main__']\n         self.assertFileFound(Path(main_module.__file__))\n \n+    def test_path_with_embedded_null_bytes_extended(self):\n+        \"\"\"Test handling of paths with embedded null bytes in various scenarios.\"\"\"\n+        paths_with_null_bytes = [\n+            'embedded_null_byte\\x00.py',\n+            'di\\x00rectory/embedded_null_byte.py',\n+            b'binary\\x00\\x00path.py',\n+            '/abs\\x00olute/path/with\\x00null.py',\n+            'rel\\x00ative/path/with/null.py',\n+        ]\n+        for path in paths_with_null_bytes:\n+            with self.subTest(path=path):\n+                # The function should handle these paths gracefully and return an empty set.\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n+\n     def test_main_module_without_file_is_not_resolved(self):\n         fake_main = types.ModuleType('__main__')\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..0e7de58 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -5,6 +5,8 @@ import re\n import sys\n import tempfile\n import threading\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from io import StringIO\n from pathlib import Path\n from unittest import mock\n@@ -238,7 +240,35 @@ class DebugViewTests(SimpleTestCase):\n             m.assert_called_once_with(encoding='utf-8')\n \n \n-class DebugViewQueriesAllowedTests(SimpleTestCase):\n+class DebugViewPathConverterTests(SimpleTestCase):\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test that raising Http404 in a path converter's to_python method\n+        results in a technical 404 page when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_converter_raise_value_error(self):\n+        \"\"\"\n+        Test that raising ValueError in a path converter's to_python method\n+        results in a URL not matching.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=ValueError):\n+            response = self.client.get('/path-post/1/')\n+            # Assuming that if ValueError is raised, the next URL pattern is tried and this one does not match.\n+            self.assertEqual(response.status_code, 404)\n+\n+    def test_converter_raise_404_custom_message(self):\n+        \"\"\"\n+        Test that raising Http404 with a custom message in a path converter's to_python method\n+        results in a technical 404 page with the custom message when DEBUG is True.\n+        \"\"\"\n+        custom_message = \"Custom not found message\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404(custom_message)):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, custom_message, status_code=404)\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n",
  "django__django-11742": "",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..dc47176 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,7 +317,27 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_two_digit_years(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Assume the current UTC time is 2023\n+        utcnow_2023 = datetime(2023, 1, 1, 0, 0, 0)\n+        mocked_datetime.utcnow.return_value = utcnow_2023\n+\n+        test_cases = [\n+            ('Monday, 01-Jan-70 00:00:00 GMT', datetime(1970, 1, 1, 0, 0, 0)),\n+            ('Monday, 01-Jan-69 00:00:00 GMT', datetime(2069, 1, 1, 0, 0, 0)),\n+            ('Monday, 01-Jan-68 00:00:00 GMT', datetime(2068, 1, 1, 0, 0, 0)),\n+            ('Monday, 01-Jan-99 00:00:00 GMT', datetime(1999, 1, 1, 0, 0, 0)),\n+            ('Monday, 01-Jan-00 00:00:00 GMT', datetime(2000, 1, 1, 0, 0, 0)),\n+        ]\n+\n+        for rfc850str, expected_date in test_cases:\n+            with self.subTest(rfc850str=rfc850str):\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..9542424 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -40,7 +40,32 @@ class Gender(models.TextChoices):\n     __empty__ = '(Undeclared)'\n \n \n-class ChoicesTests(SimpleTestCase):\n+class EnumTypeConsistencyTests(TestCase):\n+    class MyChoice(models.TextChoices):\n+        FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+        SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+    class MyObject(models.Model):\n+        my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+    def setUp(self) -> None:\n+        self.my_object = self.MyObject.objects.create(my_str_value=self.MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = self.MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_enum_str_representation(self):\n+        for test_choice in [self.MyChoice]:\n+            for member in test_choice:\n+                with self.subTest(member=member):\n+                    self.assertEqual(str(test_choice[member.name]), str(member.value))\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..0cdd038 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -187,7 +187,34 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n \n-class GetChoicesTests(SimpleTestCase):\n+class TestOverrideGetFieldDisplay(SimpleTestCase):\n+\n+    def test_overriding_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_get_FIELD_display_without_override(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'foo')\n+\n+    def test_override_with_different_value(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'another value'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'another value')\n \n     def test_empty_choices(self):\n         choices = []\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..c0ea4f1 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,4 @@\n+\n import pickle\n \n from django import forms\n@@ -147,8 +148,23 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.test import TestCase\n+\n+class OverridingInheritedFieldDisplayTests(TestCase):\n+    def test_overriding_inherited_field_display(self):\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B'), ('C', 'Child C')])\n \n-class GetFieldDisplayTests(SimpleTestCase):\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+        self.assertEqual(Child(foo='C').get_foo_display(), 'Child C')\n+        self.assertEqual(Child(foo='D').get_foo_display(), 'D')  # Testing an invalid choice\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..3b69b7d 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,6 +76,27 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_no_error_with_base_language_available(self):\n+        # Ensures that no error is raised for sublanguages when base language is available\n+        tests = [\n+            'de-at',  # de is available\n+            'es-ar',  # es is available\n+            'fr-CA',  # fr is available\n+            'ca-ES-valencia',  # ca is available\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..6e4adf9 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +7,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -18,6 +20,75 @@ def get_connection_copy():\n     return test_connection\n \n \n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # Test that deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=1)\n+        obj_ref = ObjectReference.objects.get(pk=1)\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_multiple_references(self):\n+        # Test multiple references scenario where objects refer to each other\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"related_objects\": [2]}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 2,\n+                \"fields\": {\"related_objects\": [1]}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj1 = Object.objects.get(pk=1)\n+        obj2 = Object.objects.get(pk=2)\n+        self.assertIn(obj2, obj1.related_objects.all())\n+        self.assertIn(obj1, obj2.related_objects.all())\n+\n+    def test_missing_reference_handling(self):\n+        # Test that missing references are handled properly (should not raise errors)\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": null}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=1)\n+        obj_ref = ObjectReference.objects.get(pk=1)\n+        self.assertIsNone(obj_ref.obj)\n+        self.assertEqual(list(obj.related_objects.all()), [])\n+\n class TestDbSignatureTests(SimpleTestCase):\n     def test_default_name(self):\n         # A test db name isn't set.\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..30d5d8e 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,6 +159,35 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_ambiguous_relationship_model_from(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('field')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.field', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..888c679 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,7 +1249,35 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n-    def test_request_meta_filtering(self):\n+    def test_cleanse_setting_recurses_in_list_of_dicts(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {'api_key': 'abc123', 'password': 'secret'},\n+            {'token': '123456'}\n+        ]\n+        cleansed = [\n+            {'api_key': reporter_filter.cleansed_substitute, 'password': reporter_filter.cleansed_substitute},\n+            {'token': reporter_filter.cleansed_substitute}\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed\n+        )\n+\n+    def test_cleanse_setting_recurses_in_nested_lists(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            [{'api_key': 'abc123'}, {'password': 'secret'}],\n+            [{'token': '123456'}]\n+        ]\n+        cleansed = [\n+            [{'api_key': reporter_filter.cleansed_substitute}, {'password': reporter_filter.cleansed_substitute}],\n+            [{'token': reporter_filter.cleansed_substitute}]\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed\n+        )\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n         self.assertEqual(\n",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..8ea46f9 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -45,8 +45,40 @@ class MigrationTestBase(TransactionTestCase):\n \n     def assertColumnNotExists(self, table, column, using='default'):\n         self.assertNotIn(column, [c.name for c in self.get_table_description(table, using=using)])\n-\n-    def _get_column_allows_null(self, table, column, using):\n+from django.db import connection, migrations, models\n+from django.test import TestCase\n+from django.test.utils import override_settings\n+from django.db.utils import IntegrityError\n+from django.db import connections\n+from django.test import skipUnlessDBFeature\n+\n+class MigrationTestCase(TestCase):\n+    @override_settings(INSTALLED_APPS=['migrations', 'tests.migrations.test_base'])\n+    def test_remove_index_together_with_unique_together(self):\n+        app_label = 'test_remove_index_together'\n+        table_name = '%s_pony' % app_label\n+        \n+        # Initial state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        \n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n         return [c.null_ok for c in self.get_table_description(table, using=using) if c.name == column][0]\n \n     def assertColumnNull(self, table, column, using='default'):\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..e31c79b 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,23 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_zero_objects_deleted_with_foreign_keys(self):\n+        \"\"\"\n+        Test deleting objects with foreign keys when there are zero objects to delete.\n+        The result should be a consistent (0, {}) format.\n+        \"\"\"\n+        deleted, deleted_objs = R.objects.filter(id=-1).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {})\n+\n+    def test_zero_objects_deleted_without_foreign_keys(self):\n+        \"\"\"\n+        Test deleting objects without foreign keys when there are zero objects to delete.\n+        The result should be a consistent (0, {}) format, matching foreign key behavior.\n+        \"\"\"\n+        deleted, deleted_objs = M.objects.filter(id=-1).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {})\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..f49ca7b 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,38 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_response_not_modified(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(\n+            path='/static/file.txt',\n+            headers=[(b\"If-Modified-Since\", http_date((TEST_STATIC_ROOT / 'file.txt').stat().st_mtime).encode('ascii'))]\n+        )\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Read the response.\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 304)\n+\n+    async def test_static_file_response_with_query_params(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request with query parameters.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt?version=1.2.3')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..a57ffe1 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,12 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Issue specific tests\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('__strip__underscore-value___', 'strip-underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..35ceea2 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -138,6 +139,21 @@ class QuerySetSetOperationTests(TestCase):\n             operator.itemgetter('alias'),\n         )\n \n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        # Assert that none() on a union query returns an empty result.\n+        self.assertSequenceEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+\n+    def test_union_with_empty_result(self):\n+        # Test union with an empty queryset and ensure none() still returns an empty result.\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__lte=0)  # This should be empty given our setUpTestData\n+        qs3 = qs1.union(qs2)\n+        self.assertNumbersEqual(qs3.none(), [])\n+\n     def test_union_with_values(self):\n         ReservedName.objects.create(name='a', order=2)\n         qs1 = ReservedName.objects.all()\n@@ -313,4 +329,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..5456b16 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2829,6 +2829,71 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+@isolate_apps('model_forms')\n+class LimitChoicesToTests(TestCase):\n+    def setUp(self):\n+        # Create Character instances\n+        self.marley = Character.objects.create(username=\"Marley\", last_action=\"2023-10-10\")\n+        self.threepwood = Character.objects.create(username=\"Threepwood\", last_action=\"2023-10-10\")\n+\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Create StumpJoke instances\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        # Define the CharacterDetails model inside the test\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n \n class FormFieldCallbackTests(SimpleTestCase):\n \n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..08cbf43 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -8,8 +8,36 @@ from django.db import models\n from django.test import SimpleTestCase\n from django.test.utils import isolate_apps\n \n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n+class FieldComparisonTests(SimpleTestCase):\n+    def test_fields_from_abstract_models_are_not_equal(self):\n+        class AbstractBase(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritedModel1(AbstractBase):\n+            pass\n+\n+        class InheritedModel2(AbstractBase):\n+            pass\n+\n+        field1 = InheritedModel1._meta.get_field('field')\n+        field2 = InheritedModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(field1, field2, \"Fields from different models should not be equal\")\n+        self.assertNotEqual(hash(field1), hash(field2), \"Hash should differ for fields from different models\")\n+        self.assertLess(field1.creation_counter, field2.creation_counter, \"Field order should be based on creation_counter\")\n+\n+        # Ensure the field from the abstract base model is not equal to those from derived models\n+        base_field = AbstractBase._meta.get_field('field')\n+        self.assertNotEqual(base_field, field1, \"Base model field should not equal derived model field\")\n+        self.assertNotEqual(base_field, field2, \"Base model field should not equal derived model field\")\n class AbstractInheritanceTests(SimpleTestCase):\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n@@ -347,4 +375,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..399b132 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,4 +1,6 @@\n+\n from datetime import datetime, timedelta\n+from .models import CustomEmailField, IntegerUsernameUser\n \n from django.conf import settings\n from django.contrib.auth.models import User\n@@ -36,8 +38,27 @@ class TokenGeneratorTest(TestCase):\n         tk1 = p0.make_token(user)\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n-\n-    def test_timeout(self):\n+    \n+    def test_token_with_updated_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..5b5ddfb 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..7319de7 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -20,6 +20,9 @@ from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n@@ -1866,6 +1869,41 @@ class ArgumentOrder(AdminScriptTestCase):\n             \"('verbosity', 1)]\" % option_b\n         )\n \n+class ExecuteFromCommandLineTest(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Test that the program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_is_main(self):\n+        \"\"\"\n+        Test that the program name '__main__.py' is replaced with 'python -m django'.\n+        \"\"\"\n+        args = ['help']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['python -m django'] + args)\n+        self.assertIn('usage: python -m django help', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_none(self):\n+        \"\"\"\n+        Test case where sys.argv[0] is None and ensure it doesn't affect our custom prog name.\n+        \"\"\"\n+        args = ['help']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin help', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n \n @override_settings(ROOT_URLCONF='admin_scripts.urls')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..ff00076 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -29,15 +30,93 @@ class ShellCommandTestCase(SimpleTestCase):\n             stdin.seek(0)\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n         select.return_value = ([], [], [])\n         with self.assertRaisesMessage(CommandError, \"Couldn't import ipython interface.\"):\n             call_command('shell', interface='ipython')\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'bpython': None})\n     def test_shell_with_bpython_not_installed(self, select):\n         select.return_value = ([], [], [])\n@@ -49,4 +128,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..00c66b6 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1012,8 +1012,22 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, '<h2>Childs with both verbose names</h2>')\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n+    def test_verbose_name_default_plural(self):\n+        class DefaultVerboseNameInline(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Single Child'\n \n-    def test_both_verbose_names_inline(self):\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [DefaultVerboseNameInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        # Test if verbose_name is used as default for verbose_name_plural\n+        self.assertContains(response, '<h2>Single Childs</h2>')\n+        self.assertContains(response, 'Add another Single Child')\n+        self.assertNotContains(response, '<h2>Verbose Name Profiles</h2>')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..bcd9862 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -596,6 +596,20 @@ class TestQuerying(TestCase):\n         )\n \n     def test_isnull_key_or_none(self):\n+        # Test that value__j__isnull=True does not match JSON null on SQLite and Oracle\n+        # This should match objects that do not have the key 'j'\n+        # The sequence should be objs[:4] + objs[5:], excluding objs[4] because it has key 'j' with JSON null value\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+\n+        # Also test the opposite case, where we look for isnull=False\n+        # This should only match objects that have the key 'j' with a non-null value\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=False),\n+            [],  # Assuming objs[4] has JSON null value for 'j', it shouldn't be matched\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex ad86558..37c3dd3 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -204,10 +204,14 @@ class Signal:\n         # Call each receiver with whatever arguments it can accept.\n         # Return a list of tuple pairs [(receiver, response), ... ].\n         responses = []\n+        import logging\n+        logger = logging.getLogger('django.dispatch')\n+        \n         for receiver in self._live_receivers(sender):\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n+                logger.exception('Error calling %s in Signal.send_robust()', receiver)\n                 responses.append((receiver, err))\n             else:\n                 responses.append((receiver, response))\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..c925fe0 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -403,6 +403,75 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n     def test_explicit_pk(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_explicit_inherited_pk(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_explicit_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_auto_created_inherited_pk(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            ),\n+        ])\n+\n+    def test_auto_created_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            ),\n+        ])\n         class Model(models.Model):\n             id = models.BigAutoField(primary_key=True)\n \n@@ -414,4 +483,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..013093c 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -282,6 +282,21 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         )\n \n \n+from django.test import TestCase\n+from .models import ChoiceModel\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from django.utils.translation import gettext_lazy as _\n+\n+class AssertFormErrorsMixin:\n+    def assertFormErrors(self, expected_errors, callable_obj, *args, **kwargs):\n+        try:\n+            callable_obj(*args, **kwargs)\n+        except Exception as e:\n+            actual_errors = e.messages if hasattr(e, 'messages') else [str(e)]\n+            assert actual_errors == expected_errors, f\"Expected {expected_errors}, but got {actual_errors}\"\n+        else:\n+            assert False, f\"Expected error {expected_errors}, but no error was raised.\"\n+\n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n@@ -307,4 +322,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..d5106db 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -72,6 +72,11 @@ class Child(models.Model):\n     name = models.CharField(max_length=20)\n     parent = models.ForeignKey(Parent, models.CASCADE)\n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n \n class ChildNullableParent(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..d83e561 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -16,6 +17,25 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n+    def test_combine_with_dict_keys(self):\n+        # Test combining with dict_keys using AND\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n+        # Test combining with dict_keys using OR\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n+    def test_combine_with_non_empty_dict_keys(self):\n+        # Test combining with non-empty dict_keys\n+        non_empty_dict = {'a': 1, 'b': 2}\n+        q = Q(x__in=non_empty_dict.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..9cc2a83 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -29,6 +29,7 @@ from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n from django.utils.functional import SimpleLazyObject\n+from django.db.models import Q, Exists, OuterRef\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n@@ -794,7 +795,20 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n-    def test_boolean_expression_combined(self):\n+    def test_q_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        tests = [\n+            (Exists(is_poc) & Q(), [self.max]),\n+            (Q() & Exists(is_poc), [self.max]),\n+            (Exists(is_poc) | Q(), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Q() | Exists(is_poc), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+        ]\n+        for conditions, expected in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..87fc6f5 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1146,6 +1146,8 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..147ba6c 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -74,7 +76,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n         class Model(models.Model):\n@@ -91,7 +113,27 @@ class TestDefaultPK(SimpleTestCase):\n         m2m_pk = M2MModel._meta.get_field('m2m').remote_field.through._meta.pk\n         self.assertIsInstance(m2m_pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_m2m_app_default_auto_field(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..768a33d 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2168,8 +2168,37 @@ class StartApp(AdminScriptTestCase):\n                     \"sure the name is a valid identifier.\".format(bad_name)\n                 )\n                 self.assertFalse(os.path.exists(testproject_dir))\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        # Test creating an app with a target directory that has a trailing slash.\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_multiple_trailing_slashes_in_target_app_directory_name(self):\n+        # Test creating an app with a target directory that has multiple trailing slashes.\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app2')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app2', '///')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n \n-    def test_importable_name(self):\n+    def test_no_slash_in_target_app_directory_name(self):\n+        # Test creating an app with a target directory that does not have a trailing slash.\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app3')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app3')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_existing_directory_without_slash(self):\n+        # Test with an existing directory without a trailing slash.\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app4')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', 'apps/app4'])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n         \"\"\"\n         startapp validates that app name doesn't clash with existing Python\n         modules.\n",
  "django__django-14411": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..888e314 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,6 +655,41 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_migration_imports_models(self):\n+        \"\"\"\n+        Ensure that the generated migration includes the necessary imports.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        # Simulate the migration writing process\n+        writer = MigrationWriter(migrations.CreateModel(\n+            name='MyModel',\n+            fields=[\n+                ('name', MyField(primary_key=True))\n+            ],\n+            options={\n+                'abstract': False,\n+            },\n+            bases=(MyMixin, models.Model),\n+        ))\n+        \n+        serialized_migration = writer.as_string()\n+        \n+        # Check that the import statement for `models` is present\n+        self.assertIn('from django.db import models', serialized_migration)\n+        self.assertIn('class MyModel(MyMixin, models.Model)', serialized_migration)\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..2fe0e6b 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -334,7 +334,22 @@ class FormsFormsetTestCase(SimpleTestCase):\n             'choices-1-votes': '1',\n         }\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n+        from django.forms.utils import ErrorList\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        # Check that non_form_errors have the 'nonform' error_class\n+        non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertEqual(\n+            str(non_form_errors),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n+        # Check that non_form_errors have the 'nonform' error_class\n+        non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertEqual(\n+            str(non_form_errors),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n \n@@ -356,7 +371,22 @@ class FormsFormsetTestCase(SimpleTestCase):\n             'choices-1-votes': '1',\n         }\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n+        from django.forms.utils import ErrorList\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        # Check that non_form_errors have the 'nonform' error_class\n+        non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertEqual(\n+            str(non_form_errors),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n+        # Check that non_form_errors have the 'nonform' error_class\n+        non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertEqual(\n+            str(non_form_errors),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n \n@@ -981,6 +1011,13 @@ class FormsFormsetTestCase(SimpleTestCase):\n             'drinks-1-name': 'Gin and Tonic',\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        # Check that non_form_errors have the 'nonform' error_class\n+        non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertEqual(\n+            str(non_form_errors),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..68f640b 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -20,6 +20,15 @@ class M2mThroughTests(TestCase):\n         cls.rock = Group.objects.create(name='Rock')\n         cls.roll = Group.objects.create(name='Roll')\n \n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        person_m2m = Person._meta.get_field('events_invited')\n+        person_child_m2m = PersonChild._meta.get_field('events_invited')\n+\n+        # Ensure that the through_fields are correctly set and hashable.\n+        self.assertEqual(person_m2m.through_fields, ['event', 'invitee'])\n+        self.assertEqual(person_child_m2m.through_fields, ['event', 'invitee'])\n+        self.assertEqual(hash(person_m2m), hash(person_child_m2m))\n+\n     def test_retrieve_intermediate_items(self):\n         Membership.objects.create(person=self.jim, group=self.rock)\n         Membership.objects.create(person=self.jane, group=self.rock)\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..bff0843 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -294,6 +294,53 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n+import json\n+import datetime\n+from django.test import TestCase\n+from django.urls import reverse\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.http import JsonResponse\n+from admin_views.models import Question\n+\n+class AutocompleteJsonSerializeResultViewTest(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.url = reverse('admin:autocomplete')\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        self.opts = {\n+            'app_label': 'admin_views',\n+            'model_name': 'question',\n+            'field_name': 'question',\n+        }\n+        self.as_view_args = {\n+            'admin_site': site,\n+        }\n+\n+    def test_serialize_result_with_extra_field(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n",
  "django__django-14787": "",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..7a35ba0 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,31 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        # Creating two ModelChoiceIteratorValue instances\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Assert that the hash of value_1 is equal to the hash of a new instance with the same primary key\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+\n+        # Assert that the hash of value_1 is not equal to the hash of value_2\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_choice_value_equality(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_3 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        self.assertTrue(value_1 == value_2, \"Values with the same pk should be equal\")\n+        self.assertFalse(value_1 == value_3, \"Values with different pk should not be equal\")\n+\n+    def test_choice_value_in_dict(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        custom_dict = {value_1: \"test_value\"}\n+\n+        self.assertIn(value_1, custom_dict, \"Value should be found in the dictionary\")\n+        self.assertEqual(custom_dict[value_1], \"test_value\", \"Dictionary value should match expected\")\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..fc75044 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,7 +793,50 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n-    def test_rename_m2m_target_model(self):\n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_without_db_table(self):\n+        app_label = 'test_rmwithoutdbt'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            # Expecting queries since db_table is not specified\n+            with self.assertNumQueriesGreaterThan(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueriesGreaterThan(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_splitdatetimefield.py b/tests/forms_tests/field_tests/test_splitdatetimefield.py\nindex 64c3822..aeeb339 100644\n--- a/tests/forms_tests/field_tests/test_splitdatetimefield.py\n+++ b/tests/forms_tests/field_tests/test_splitdatetimefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django.core.exceptions import ValidationError\n from django.forms import SplitDateTimeField\n-from django.forms.widgets import SplitDateTimeWidget\n+from django.forms import Form, SplitDateTimeField\n+from django.forms.widgets import SplitDateTimeWidget, MultiWidget\n from django.test import SimpleTestCase\n \n \n@@ -54,9 +56,25 @@ class SplitDateTimeFieldTest(SimpleTestCase):\n         with self.assertRaisesMessage(ValidationError, \"'Enter a valid date.'\"):\n             f.clean(['', '07:30'])\n \n-    def test_splitdatetimefield_changed(self):\n+    def test_splitdatetimefield_label_for(self):\n+        class TestForm(Form):\n+            datetime = SplitDateTimeField()\n+\n+        form = TestForm()\n+        # This test checks if the label \"for\" attribute is correctly set\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th>\n+            <label for=\"id_datetime_0\">Datetime:</label>\n+            </th><td>\n+            <input type=\"text\" name=\"datetime_0\" required id=\"id_datetime_0\">\n+            <input type=\"text\" name=\"datetime_1\" required id=\"id_datetime_1\">\n+            </td></tr>\n+            \"\"\"\n+        )\n         f = SplitDateTimeField(input_date_formats=['%d/%m/%Y'])\n         self.assertFalse(f.has_changed(['11/01/2012', '09:18:15'], ['11/01/2012', '09:18:15']))\n         self.assertTrue(f.has_changed(datetime.datetime(2008, 5, 6, 12, 40, 00), ['2008-05-06', '12:40:00']))\n         self.assertFalse(f.has_changed(datetime.datetime(2008, 5, 6, 12, 40, 00), ['06/05/2008', '12:40']))\n-        self.assertTrue(f.has_changed(datetime.datetime(2008, 5, 6, 12, 40, 00), ['06/05/2008', '12:41']))\n+        self.assertTrue(f.has_changed(datetime.datetime(2008, 5, 6, 12, 40, 00), ['06/05/2008', '12:41']))\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..16a514b 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -91,6 +91,14 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://inv-.-alid.com',\n             '[a',\n             'http://[a',\n+            'http://[::1',  # Unterminated IPv6 address\n+            'http://[::1:z]',  # Invalid character in IPv6 address\n+            'http://[2001:db8:85a3::8a2e:370:7334',  # Missing closing bracket\n+            'http://[1200::AB00:1234::2552:7777:1313',  # Double '::'\n+            'http://[1200:0000:AB00:1234:O000:2552:7777:1313]',  # Invalid hex digit 'O'\n+            # Issue-specific test cases.\n+            '////]@N.AN',  # Invalid IPv6 URL\n+            '#@A.bO',      # Empty hostname\n             # Non-string.\n             23,\n             # Hangs \"forever\" before fixing a catastrophic backtracking,\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..f99cd7e 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -197,7 +197,26 @@ class NonAggregateAnnotationTestCase(TestCase):\n         combined = int(test.pages + test.rating)\n         self.assertEqual(b.combined, combined)\n \n-    def test_empty_expression_annotation(self):\n+    def test_negated_empty_expression_annotation(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        # Since ~Q(pk__in=[]) implies all records, all selected should be True.\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_negated_empty_expression_annotation_with_aggregation(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1] * Book.objects.count())\n+\n+    def test_aggregate_over_negated_empty_expression_annotation(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n         books = Book.objects.annotate(\n             selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n         )\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..f3b287b 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -163,7 +164,18 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_extra_tags_preservation(self):\n+        \"\"\"\n+        Test that extra_tags is correctly preserved when it's an empty string,\n+        None, or any non-empty string.\n+        \"\"\"\n+        storage = self.get_storage()\n+        for extra_tags in ['', None, 'some tags']:\n+            with self.subTest(extra_tags=extra_tags):\n+                message = Message(constants.INFO, 'Test message', extra_tags=extra_tags)\n+                encoded = storage._encode(message)\n+                decoded_message = storage._decode(encoded)\n+                self.assertEqual(decoded_message.extra_tags, extra_tags)\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..e42c5d4 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,29 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty string for the If-Modified-Since header \n+        does not raise an exception and returns True, indicating the \n+        resource was modified since the date provided by the header.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(\"\", mtime=1))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        Test that an invalid date string for the If-Modified-Since header \n+        does not raise an exception and returns True, indicating the \n+        resource was modified since the date provided by the header.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(\"invalid-date\", mtime=1))\n+\n+    def test_was_modified_since_none(self):\n+        \"\"\"\n+        Test that a None value for the If-Modified-Since header \n+        does not raise an exception and returns True, indicating the \n+        resource was modified since the date provided by the header.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(None, mtime=1))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..9371543 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,7 +1,9 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n \n+from argparse import ArgumentDefaultsHelpFormatter\n from admin_scripts.tests import AdminScriptTestCase\n \n from django.apps import apps\n@@ -411,7 +413,30 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_formatter_class(self):\n+        \"\"\"Test that a custom formatter class is used for the command parser.\"\"\"\n+        epilog = \"Example usage:\\n\\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"subcommand\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter\n+        )\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+        self.assertIn(\"Example usage:\\n\", parser.format_help())\n+\n+    def test_command_help_output_format(self):\n+        \"\"\"Test that the command help output is correctly formatted.\"\"\"\n+        class CustomCommand(BaseCommand):\n+            help = '''\n+            Import a contract from tzkt.\n+            Example usage:\n+                ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+            '''\n+        command = CustomCommand()\n+        parser = command.create_parser(\"manage.py\", \"tzkt_import\")\n+        help_output = parser.format_help()\n+        self.assertIn(\"Example usage:\\n\\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\", help_output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..b3b8dff 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,8 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n+from django.core.serializers.json import DjangoJSONEncoder\n from django.utils.html import (\n     conditional_escape,\n     escape,\n@@ -216,8 +218,28 @@ class TestUtilsHtml(SimpleTestCase):\n             json_script({\"key\": \"value\"}),\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                # Simple custom encoding logic for testing\n+                return '{\"custom\": \"value\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        # Test to ensure default behavior is unchanged\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_invalid_encoder(self):\n+        # Test to handle the scenario where the encoder is not a valid JSON encoder class\n+        with self.assertRaises(TypeError):\n+            json_script({}, encoder=\"not_a_valid_encoder\")\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..f094bcb 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -158,6 +158,30 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 [self.error_same_tags],\n             )\n \n+    def test_template_tags_with_same_name_in_different_apps(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tags\", \"app_1.templatetags.my_tags\"\n+                ),\n+                self.get_settings(\n+                    \"same_tags\", \"app_2.templatetags.my_tags\"\n+                ),\n+            ]\n+        ):\n+            expected_error = Error(\n+                E003.msg.format(\n+                    \"'same_tags'\",\n+                    \"'check_framework.template_test_apps.app_1.templatetags.my_tags', \"\n+                    \"'check_framework.template_test_apps.app_2.templatetags.my_tags'\",\n+                ),\n+                id=E003.id,\n+            )\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [expected_error],\n+            )\n+\n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n     )\n@@ -206,4 +230,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..55a37d2 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,6 +399,36 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from django.db import models\n+from django.core.management import call_command\n+from .models import ProxyCustomModel, AnotherModel, Issue, ProxyTrackerUser\n+\n+class ProxyModelQuerySetTests(TestCase):\n+    def setUp(self):\n+        self.proxy_user = ProxyCustomModel.objects.create(name=\"Test User\")\n+        self.another_model_instance = AnotherModel.objects.create(custom=self.proxy_user)\n+\n+    def test_select_related_only_on_proxy(self):\n+        # This test specifically addresses the issue where using only() after select_related() on proxy models would crash\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        objs = list(qs)\n+        self.assertEqual(objs[0].custom.name, self.proxy_user.name)\n+\n+    def test_only_without_select_related_on_proxy(self):\n+        # Ensure only() works without select_related() on proxy models\n+        qs = AnotherModel.objects.only(\"custom__name\")\n+        objs = list(qs)\n+        self.assertEqual(objs[0].custom.name, self.proxy_user.name)\n+\n+    def test_select_related_only_with_no_proxy(self):\n+        # Ensure select_related() and only() work on regular models\n+        regular_user = ProxyCustomModel.objects.create(name=\"Regular User\")\n+        another_model_instance = AnotherModel.objects.create(custom=regular_user)\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        objs = list(qs)\n+        self.assertEqual(objs[0].custom.name, regular_user.name)\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..81f9ec2 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,6 +151,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_order(self):\n+        # Test that additional parameters appear before the database name.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n@@ -183,4 +190,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..7ac618a 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,14 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty_input(self):\n+        # Test with an empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        \n+        # Test with None\n+        # Assuming the desired behavior is that None is returned as a string \"None\"\n+        # If the desired behavior is different, this expectation should be adjusted.\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..be79ed8 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,6 +25,8 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+import urllib.parse\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n \n from .models.custom_user import (\n@@ -881,7 +884,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         form = UserChangeForm(instance=user, data=post_data)\n \n         self.assertTrue(form.is_valid())\n-        # original hashed password contains $\n+    def test_link_to_password_reset_in_helptext_via_to_field_with_uuid(self):\n+        user = User.objects.get(username=\"testclient\")\n+        user.uuid = \"22222222-3333-4444-5555-666677778888\"  # Simulate a UUID\n+        user.save()\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.uuid,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n     def test_bug_19349_bound_password_field(self):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..0849ac4 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,24 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from django.test import TestCase\n+from django.urls import reverse\n+from django.contrib.sitemaps import Sitemap\n+\n+class ValueErrorHandlingTests(TestCase):\n+    def test_empty_items_callable_lastmod(self):\n+        # This sitemap has no items, and the lastmod function is callable.\n+        class EmptyItemsSitemap(Sitemap):\n+            def items(self):\n+                return []\n+\n+            def lastmod(self, obj):\n+                return obj.lastmod\n+\n+        sitemap = EmptyItemsSitemap()\n \n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+        # The method should handle the empty items gracefully without raising a ValueError.\n+        self.assertIsNone(sitemap.get_latest_lastmod())\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..a4843c5 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n@@ -9,6 +10,8 @@ import shutil\n import sys\n import tempfile\n import threading\n+from unittest import mock, TestCase\n+from django.core.cache import caches\n import time\n import unittest\n from pathlib import Path\n@@ -1755,7 +1758,34 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n-    def test_empty_cache_file_considered_expired(self):\n+    def test_has_key_race_handling(self):\n+        cache = caches['default']\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+\n+    def test_concurrent_access(self):\n+        cache = caches['default']\n+        cache.add(\"key\", \"value\")\n+        \n+        def access_cache():\n+            with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+                self.assertIs(cache.has_key(\"key\"), False)\n+                mocked_open.assert_called_once()\n+        \n+        threads = [threading.Thread(target=access_cache) for _ in range(10)]\n+        for thread in threads:\n+            thread.start()\n+        for thread in threads:\n+            thread.join()\n+\n+    def test_file_deleted_after_exists_check(self):\n+        cache = caches['default']\n+        cache.add(\"key\", \"value\")\n+        with mock.patch(\"os.path.exists\", side_effect=lambda x: True), \\\n+             mock.patch(\"builtins.open\", side_effect=FileNotFoundError):\n+            self.assertIs(cache.has_key(\"key\"), False)\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n             fh.write(b\"\")\n",
  "django__django-16527": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..299f3a5 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -236,7 +236,31 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n-    def test_alter_alter_table_model(self):\n+    def _test_alter_alter(self, alter_foo, alter_bar):\n+        \"\"\"\n+        AlterField should collapse into the second if they are for the same field.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                alter_foo,\n+                alter_bar,\n+            ],\n+            [\n+                alter_bar,\n+            ],\n+        )\n+\n+    def test_alter_alter_field(self):\n+        self._test_alter_alter(\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+        )\n+\n+    def test_alter_alter_field_with_default(self):\n+        self._test_alter_alter(\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        )\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..b32e995 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -26,7 +27,12 @@ class JoinTests(SimpleTestCase):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n-    # Joining with unsafe joiners doesn't result in unsafe strings.\n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ a|join:b }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        output = self.engine.render_to_string(\n+            \"join_autoescape_off\", {\"a\": [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"b\": \"<br/>\"}\n+        )\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +84,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..4efb796 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -569,6 +569,46 @@ class BulkCreateTests(TestCase):\n                 unique_fields=[\"big_auto_fields\"],\n             )\n \n+    def test_bulk_create_update_conflicts_return_ids(self):\n+        # Initial data setup\n+        two_fields_instances = [\n+            TwoFields(f1=1, f2=1, name=\"x\"),\n+            TwoFields(f1=2, f2=2, name=\"y\"),\n+        ]\n+        TwoFields.objects.bulk_create(two_fields_instances)\n+        \n+        # Check initial count\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        # Conflicting objects\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"z\"),\n+            TwoFields(f1=2, f2=2, name=\"w\"),\n+        ]\n+\n+        # Perform bulk_create with update_conflicts and check for returned IDs\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+\n+        # Verify count remains same but names updated\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+        self.assertCountEqual(\n+            TwoFields.objects.values(\"f1\", \"f2\", \"name\"),\n+            [\n+                {\"f1\": 1, \"f2\": 1, \"name\": \"z\"},\n+                {\"f1\": 2, \"f2\": 2, \"name\": \"w\"},\n+            ],\n+        )\n+\n+        # Check that the returned results have valid primary keys\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+\n     def _test_update_conflicts_two_fields(self, unique_fields):\n         TwoFields.objects.bulk_create(\n             [\n@@ -816,4 +856,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..9566e3b 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,9 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n@@ -508,7 +511,28 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+def test_get_backend_does_not_clear_gcf_figs():\n+    # Ensure that figures created under rc_context are not cleared by get_backend\n+    # when they are the first figures.\n+\n+    # Create a figure within an rc_context\n+    with rc_context():\n+        fig = plt.figure()\n+\n+    # Record the state of Gcf.figs before calling get_backend\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    # Call get_backend which previously cleared Gcf.figs\n+    get_backend()\n+\n+    # Record the state of Gcf.figs after calling get_backend\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    # Assert that the state of Gcf.figs is unchanged\n+    assert before == after, f'\\nBefore: {before}\\nAfter: {after}'\n+\n+    # Clean up by closing the figure\n+    plt.close(fig)\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..0762eb4 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,7 +21,14 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible_false(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_test.scatter([1], [1], [1], c='r')\n+    ax_test.set_visible(False)\n+\n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+    # ax_ref does not plot anything, serving as an invisible reference\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex a51a857..e00d65b 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1773,6 +1773,59 @@ def test_margins_errors(err, args, kwargs, match):\n \n \n @check_figures_equal(extensions=[\"png\"])\n+def test_line3d_with_integer_input():\n+    # Test plotting with integer inputs to ensure no '_verts3d' attribute errors occur.\n+    x_s_0 = np.array([0, 1])\n+    x_e_0 = np.array([1, 2])\n+    y_s_0 = np.array([0, 1])\n+    y_e_0 = np.array([1, 2])\n+    z_s_0 = np.array([0, 1])\n+    z_e_0 = np.array([1, 2])\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.view_init(elev=90, azim=0)\n+    ax.set_zlim3d(-10, 10)\n+    clr_list = 'r-'\n+\n+    for n in range(len(z_s_0)):\n+        ax.plot([x_s_0[n], x_e_0[n]],\n+                [y_s_0[n], y_e_0[n]],\n+                [z_s_0[n], z_e_0[n]], clr_list)\n+\n+    plt.xlabel('x')\n+    plt.ylabel('y')\n+    plt.title('90-0')\n+    plt.show()\n+\n+def test_line3d_with_numpy_array_input():\n+    # Test plotting with numpy array inputs to ensure no errors occur.\n+    x_s_0 = np.array([0, 1])\n+    x_e_0 = np.array([1, 2])\n+    y_s_0 = np.array([0, 1])\n+    y_e_0 = np.array([1, 2])\n+    z_s_0 = np.array([0, 1])\n+    z_e_0 = np.array([1, 2])\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.view_init(elev=90, azim=0)\n+    ax.set_zlim3d(-10, 10)\n+    clr_list = 'r-'\n+\n+    for n in range(len(z_s_0)):\n+        ax.plot([int(x_s_0[n]), int(x_e_0[n])],\n+                [int(y_s_0[n]), int(y_e_0[n])],\n+                [int(z_s_0[n]), int(z_e_0[n])], clr_list)\n+\n+    plt.xlabel('x')\n+    plt.ylabel('y')\n+    plt.title('90-0')\n+    plt.show()\n+\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n def test_text_3d(fig_test, fig_ref):\n     ax = fig_ref.add_subplot(projection=\"3d\")\n     txt = Text(0.5, 0.5, r'Foo bar $\\int$')\n",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..dc4664d 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -773,8 +773,23 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n     for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n         assert mpl.colors.same_color(text.get_color(), color)\n \n-\n-def test_get_set_draggable():\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='data')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_legend_draggable_interaction(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_test.plot(range(10), label=\"data\")\n+    leg = ax_test.legend(draggable=True)\n+    leg.set_draggable(False)  # Ensure interaction with set_draggable\n+\n+    ax_ref = fig_ref.add_subplot()\n+    ax_ref.plot(range(10), label=\"data\")\n+    ax_ref.legend()\n     legend = plt.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..5c79a6f 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -246,7 +246,39 @@ def test_fonttype(fonttype):\n \n def test_linedash():\n     \"\"\"Test that dashed lines do not break PS output\"\"\"\n-    fig, ax = plt.subplots()\n+import io\n+from matplotlib.figure import Figure\n+import matplotlib.pyplot as plt\n+\n+def test_text_with_empty_line():\n+    # Test with a multiline label containing an empty line\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n+\n+def test_multiline_text():\n+    # Test with a multiline text containing multiple empty lines\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='Line 1\\n\\n\\nLine 4', xy=(0, 0))\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='ps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n+\n+def test_title_with_empty_line():\n+    # Test with a title containing an empty line\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.set_title('\\nTitle with empty line')\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n \n     ax.plot([0, 1], linestyle=\"--\")\n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..2f8fcf2 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,19 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+@pytest.mark.filterwarnings(\"error::UserWarning\")\n+def test_constrained_layout_false_no_warning():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+\n+    a = np.linspace(0, 2*np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    \n+    # This should not raise a warning\n+    plt.subplots_adjust(wspace=0)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..451b08e 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -29,8 +29,21 @@ def test_create_lookup_table(N, result):\n     data = [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n-\n-def test_resampled():\n+import warnings\n+import matplotlib as mpl\n+import numpy as np\n+import pytest\n+from numpy.testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_no_deprecation_warnings_in_colormap(dtype):\n+    cm = mpl.colormaps[\"viridis\"]\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        # Trigger the code that caused the deprecation warning\n+        cm(np.empty((0,), dtype=dtype))\n+        # Check that no DeprecationWarnings are in the list of warnings\n+        assert not any(issubclass(warning.category, DeprecationWarning) for warning in w)\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..fa5e16c 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,9 +90,26 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+# Test to verify pickling of figures with draggable legends\n+def test_pickle_draggable_legend():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n \n-@mpl.style.context(\"default\")\n-@check_figures_equal(extensions=[\"png\"])\n+    ax.plot(time, speed, label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure 'FigureCanvasAgg' is not referenced in the pickle stream\n+    import pickletools\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Load the pickled figure and ensure it can be drawn\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw()\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n     # plotting is done, now test its pickle-ability\n",
  "matplotlib__matplotlib-25332": "",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..f0c1140 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -722,6 +722,13 @@ class TestPairGrid:\n         g = ag.PairGrid(self.df)\n         assert g.data is self.df\n \n+    def test_pairplot_column_multiindex(self):\n+        # Test pairplot with MultiIndex columns\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\"], [1, 2]])\n+        df = self.df[[\"x\", \"y\"]].set_axis(cols, axis=1)\n+        g = ag.pairplot(df)\n+        assert g.diag_vars == list(cols)\n+\n     def test_ignore_datelike_data(self):\n \n         df = self.df.copy()\n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..d67de32 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,8 @@\n+\n import json\n import os\n import textwrap\n-\n-import pytest\n+import tomllib\n \n import flask\n \n",
  "psf__requests-1963": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 7fdc4a9..8844c3c 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -80,6 +80,12 @@ def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n     return merge_setting(request_hooks, session_hooks, dict_class)\n \n \n+import requests\n+from requests.structures import CaseInsensitiveDict\n+from requests.utils import extract_cookies_to_jar, get_netrc_auth, requote_uri, to_native_string, urljoin, urlparse\n+from requests.models import Response\n+from io import StringIO\n+\n class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None,\n                           verify=True, cert=None, proxies=None):\n",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..307babb 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,13 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import DecodeError, ReadTimeout\n+from requests.packages.urllib3.exceptions import DecodeError as Urllib3DecodeError\n+from requests.packages.urllib3.exceptions import ReadTimeoutError as Urllib3ReadTimeoutError\n+import pytest\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1654,8 +1661,19 @@ def test_urllib3_retries():\n \n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n+def test_urllib3_decode_error():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    with pytest.raises(DecodeError):\n+        raise Urllib3DecodeError(\"Mock decode error\")\n+\n+def test_urllib3_timeout_error():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n \n-def test_vendor_aliases():\n+    with pytest.raises(ReadTimeout):\n+        raise Urllib3ReadTimeoutError(None, None, \"Mock timeout error\")\n     from requests.packages import urllib3\n     from requests.packages import chardet\n \n@@ -1663,4 +1681,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..6ca3000 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,37 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_response_bytes_with_decode_unicode(self):\n+        \"\"\"\n+        Test that iter_content with decode_unicode=True properly decodes bytes to strings.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'\\xe2\\x9c\\x93')  # This is the UTF-8 encoding for '\u2713'\n+        r.encoding = 'utf-8'  # Set encoding to UTF-8\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+        assert next(chunks) == '\u2713', \"The content should be decoded to a unicode check mark.\"\n+\n+    def test_response_mixed_content_with_decode_unicode(self):\n+        \"\"\"\n+        Test iter_content with mixed bytes and unicode data when decode_unicode=True.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'Hello \\xe2\\x9c\\x93')  # 'Hello \u2713' in UTF-8\n+        r.encoding = 'utf-8'\n+        chunks = list(r.iter_content(chunk_size=5, decode_unicode=True))\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+        assert chunks == ['Hello', ' \u2713'], \"The mixed content should be correctly decoded to unicode strings.\"\n+\n+    def test_response_no_encoding_with_decode_unicode(self):\n+        \"\"\"\n+        Test iter_content when encoding is None and decode_unicode=True.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'\\xff\\xfe')  # Invalid UTF-8 sequence on purpose\n+        r.encoding = None  # No encoding set\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks), \"Chunks should be bytes as encoding is None.\"\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..b72ec25 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -400,8 +400,12 @@ def test_groupby_repr(obj, dim):\n         expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n \n-\n+@pytest.mark.parametrize(\"dim\", [\"x\", \"y\", \"z\", \"month\"])\n @pytest.mark.parametrize(\"obj\", [repr_da, repr_da.to_dataset(name=\"a\")])\n+def test_groupby_repr_no_trailing_whitespace(obj, dim):\n+    # Test for the absence of trailing whitespace in the groupby repr\n+    actual = repr(obj.groupby(dim)).split('\\n')[0]  # Check the first line\n+    assert not actual.endswith(' '), \"Trailing whitespace found in repr\"\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n",
  "pylint-dev__pylint-5859": "",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..98e77e4 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -79,7 +79,14 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n \n-def test_unknown_confidence(capsys: CaptureFixture) -> None:\n+def test_traceback_not_printed_for_unrecognized_option(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure no traceback is printed for unrecognized options.\"\"\"\n+    with pytest.raises(SystemExit) as excinfo:\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in output.err\n+    assert excinfo.value.code == 2  # Ensures correct exit code for unrecognized options.\n     \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..7245871 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1324,9 +1324,32 @@ class TestRunTC:\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n             with _test_cwd():\n-                os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n                 self._runtest(\n-                    [\".\", \"--recursive=y\"],\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n+    def test_ignore_path_recursive_specific_dir(self) -> None:\n+        \"\"\"Tests that the ignore-paths option works with --recursive=y for specific paths.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \"subdirectory\",  # change to specific subdirectory\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n                     code=0,\n                 )\n \n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..cfb4501 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,50 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_lint_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test case for a module with the same name as its package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"module/module.py\", \"module/other.py\"])\n+        linter.check([\"module\"])\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_module_and_package_import(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test case for importing modules in a package with similar naming.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"package/module.py\", \"package/another.py\", \"main.py\"])\n+        with open(\"main.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from package import another\\n\")\n+        linter.check([\"main\", \"package\"])\n+    assert not linter.stats.by_msg\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test case for a module with the same name as its package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"module/module.py\", \"module/other.py\"])\n+        linter.check([\"module\"])\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_module_and_package_import(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test case for importing modules in a package with similar naming.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"package/module.py\", \"package/another.py\", \"main.py\"])\n+        with open(\"main.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from package import another\\n\")\n+        linter.check([\"main\", \"package\"])\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..7108f0a 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -112,8 +113,23 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[1] == \"my_mod:1::()\"\n     assert out_lines[2] == \"my_mod:2::()\"\n \n+def test_custom_braces_in_msg_template(linter: PyLinter) -> None:\n+    \"\"\"Test that custom braces in msg-template are correctly handled.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    # Using a more complex message template\n+    linter.config.msg_template = '{{ \"Type\": \"{msg_id}\", \"Category\": \"{category}\", \"Message\": \"{msg}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+\n+    # Adding messages to test the template\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"line-too-long\", line=2, end_lineno=2, end_col_offset=4, args=(3, 4))\n \n-def test_deprecation_set_output(recwarn):\n+    # Verifying the output format\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Type\": \"C0301\", \"Category\": \"convention\", \"Message\": \"Line too long (80/100)\" }'\n+    assert out_lines[2] == '{ \"Type\": \"C0301\", \"Category\": \"convention\", \"Message\": \"Line too long (80/100)\" }'\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "",
  "pytest-dev__pytest-5227": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 1ebe9d0..01f354c 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..cb4befb 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -301,6 +301,45 @@ def callequal(left, right, verbose=False):\n \n \n class TestAssert_reprcompare:\n+    def test_bytes_diff_empty_vs_nonempty(self):\n+        \"\"\"Test assertion message for empty vs non-empty byte strings.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Use -v to get the full diff\",\n+        ]\n+\n+    def test_bytes_diff_empty_vs_nonempty_verbose(self):\n+        \"\"\"Test verbose assertion message for empty vs non-empty byte strings.\"\"\"\n+        diff = callequal(b\"\", b\"42\", verbose=True)\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+        ]\n+\n+    def test_bytes_diff_single_char(self):\n+        \"\"\"Test assertion message for single character byte strings.\"\"\"\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Use -v to get the full diff\",\n+        ]\n+\n+    def test_bytes_diff_single_char_verbose(self):\n+        \"\"\"Test verbose assertion message for single character byte strings.\"\"\"\n+        diff = callequal(b\"\", b\"1\", verbose=True)\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+        ]\n     def test_different_types(self):\n         assert callequal([0, 1], \"foo\") is None\n \n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..e594719 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,3 +1,4 @@\n+\n import os\n from xml.dom import minidom\n \n@@ -157,6 +158,31 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n+    \n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n+\n     @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..23ca18a 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,42 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\n+    \"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_exception_in_repr():\n+    \"\"\"Test saferepr with an exception raised in __repr__.\"\"\"\n+    class BrokenRepr:\n+        def __repr__(self):\n+            raise ValueError(\"Error in repr\")\n+\n+    result = saferepr(BrokenRepr())\n+    assert result.startswith(\"<[ValueError('Error in repr') raised in repr()] BrokenRepr object at 0x\")\n+\n+def test_exception_in_getattribute_and_repr():\n+    \"\"\"Test saferepr with exceptions in both __getattribute__ and __repr__.\"\"\"\n+    class VeryBrokenClass:\n+        def __getattribute__(self, attr):\n+            raise AttributeError(\"Error in getattribute\")\n+\n+        def __repr__(self):\n+            raise TypeError(\"Error in repr\")\n+\n+    result = saferepr(VeryBrokenClass())\n+    assert result.startswith(\"<[TypeError('Error in repr') raised in repr()] VeryBrokenClass object at 0x\")\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +189,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..1b38b54 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -288,8 +288,31 @@ class TestInlineRunModulesCleanup:\n         assert imported.data == 42\n \n \n-def test_assert_outcomes_after_pytest_error(testdir) -> None:\n-    testdir.makepyfile(\"def test_foo(): assert True\")\n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n \n     result = testdir.runpytest(\"--unexpected-argument\")\n     with pytest.raises(ValueError, match=\"Pytest terminal summary report not found\"):\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..ef3d82e 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,39 @@\n import os\n import sys\n+import os  # Ensure os is imported for file operations\n+\n+def test_skipif_caching_issue(testdir):\n+    \"\"\"Test that the skipif caching issue is resolved.\"\"\"\n+    py_file1 = testdir.makepyfile(\n+        test_module_1=\"\"\"\n+        import pytest\n+\n+        skip = True\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_skip():\n+            assert False\n+    \"\"\"\n+    )\n+    py_file2 = testdir.makepyfile(\n+        test_module_2=\"\"\"\n+        import pytest\n+\n+        skip = False\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_not_skip():\n+            assert True\n+    \"\"\"\n+    )\n+\n+    file_name1 = os.path.basename(py_file1.strpath)\n+    file_name2 = os.path.basename(py_file2.strpath)\n+    \n+    # Execute tests and check outcomes\n+    reprec = testdir.inline_run(file_name1, file_name2)\n+    reprec.assertoutcome(passed=1, skipped=1) # Expect one test to be skipped and one to pass\n+\n from unittest import mock\n \n import pytest\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..ce12483 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -152,8 +152,33 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n+import pytest\n \n-class TestXFail:\n+class TestSkipWithRunXFail:\n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_location_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..4bd78e5 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -359,7 +360,33 @@ class TestXFail:\n         result = testdir.runpytest(p, \"--runxfail\")\n         result.stdout.fnmatch_lines([\"*1 pass*\"])\n \n-    def test_xfail_imperative_in_setup_function(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir):\n+        # Test dynamic xfail: expected to xfail when assertion fails\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"dynamically xfailed\"))\n+                assert 0  # This should xfail, not fail\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p, \"-rx\")\n+        result.assert_outcomes(xfailed=1)\n+        result.stdout.fnmatch_lines([\"*XFAIL*test_dynamic_xfail*reason:*dynamically xfailed*\"])\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir):\n+        # Test dynamic xfail with strict=True: expected to fail as xpass\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_strict_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"strict xfail\", strict=True))\n+                pass  # This should xpass, and cause a failure due to strict=True\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p, \"-rx\")\n+        result.assert_outcomes(failed=1)\n+        result.stdout.fnmatch_lines([\"*XPASS(strict)*test_strict_dynamic_xfail*strict xfail*\"])\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-8365": "",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..73f54a9 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,44 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+import numpy as np\n+import pytest\n+from sklearn.linear_model import RidgeClassifierCV\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test that RidgeClassifierCV correctly handles the store_cv_values parameter\n+    \n+    # Test data\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    # Define alphas and expected shapes\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_samples = x.shape[0]\n+    n_alphas = len(alphas)\n \n-def test_ridgecv_store_cv_values():\n+    # Create RidgeClassifierCV instance with store_cv_values=True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # Test with 1D y\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, 1, n_alphas)\n+\n+    # Test with 2D y\n+    y_2d = np.array([[1, 1, 1, -1, -1], [1, -1, 1, -1, 1], [-1, -1, 1, -1, -1]]).transpose()\n+    r.fit(x, y_2d)\n+    n_targets = y_2d.shape[1]\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # Ensure alpha_ is set\n+    assert r.alpha_ is not None\n+\n+    # Test with store_cv_values=False\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=False)\n+    r.fit(x, y)\n+    with pytest.raises(AttributeError):\n+        _ = r.cv_values_\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..191dc0d 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -6,7 +6,7 @@ import numpy as np\n from scipy.special import gammaln\n \n from sklearn.utils.testing import assert_raise_message\n-from sklearn.utils.testing import assert_almost_equal\n+from sklearn.utils.testing import assert_almost_equal, assert_raises\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n from sklearn.mixture.bayesian_mixture import _log_wishart_norm\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..0810d00 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,48 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+from sklearn.preprocessing import OneHotEncoder\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+import pytest\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_handle_unknown_strings_with_long_known():\n+    X = np.array(['long_string_value', 'short', 'medium']).reshape((-1, 1))\n+    X2 = np.array(['unknown', 'short']).reshape((-1, 1))\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.], [0.,  1.,  0.]]))\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_handle_unknown_all_zeros():\n+    X = np.array(['apple', 'banana', 'cherry']).reshape((-1, 1))\n+    X2 = np.array(['unknown_fruit', 'banana']).reshape((-1, 1))\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.], [0.,  1.,  0.]]))\n+    assert_array_equal(X2, X2_passed)\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..d1a72e2 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,6 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(42).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=10, random_state=42)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n \n def test_gaussian_mixture_fit():\n     # recover the ground truth\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..4af5ce1 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,22 @@\n+\n+def test_kernel_pca_sign_flip_invariance():\n+    # Test if KernelPCA results are invariant to sign flips\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(10, 10)\n+    n_components = 7\n+    n_runs = 5\n+\n+    results = []\n+    for _ in range(n_runs):\n+        kpca = KernelPCA(n_components=n_components, kernel='rbf', random_state=rng, eigen_solver='arpack')\n+        transformed_X = kpca.fit_transform(X)\n+        results.append(transformed_X)\n+\n+    # Check if results are consistent up to a sign flip\n+    for i in range(1, n_runs):\n+        for j in range(n_components):\n+            assert_allclose(np.abs(results[0][:, j]), np.abs(results[i][:, j]), err_msg=f\"Inconsistent results at component {j} run {i}\")\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -12,6 +31,7 @@ from sklearn.linear_model import Perceptron\n from sklearn.pipeline import Pipeline\n from sklearn.model_selection import GridSearchCV\n from sklearn.metrics.pairwise import rbf_kernel\n+from sklearn.utils.testing import assert_allclose\n \n \n def test_kernel_pca():\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..dc85cb1 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,6 +1057,31 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n+def test_pipeline_len():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_regression\n+    from sklearn.svm import SVC\n+    \n+    # Test with a two-step pipeline\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipeline = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    assert len(pipeline) == 2, \"Expected length of 2 for two-step pipeline\"\n+\n+    # Test with a three-step pipeline\n+    another_clf = SVC(kernel='rbf')\n+    pipeline3 = Pipeline([('anova', anova_filter), ('svc', clf), ('svc_rbf', another_clf)])\n+    assert len(pipeline3) == 3, \"Expected length of 3 for three-step pipeline\"\n+\n+    # Test with an empty pipeline\n+    empty_pipeline = Pipeline([])\n+    assert len(empty_pipeline) == 0, \"Expected length of 0 for empty pipeline\"\n+\n+    # Test with a single step pipeline\n+    single_step_pipeline = Pipeline([('anova', anova_filter)])\n+    assert len(single_step_pipeline) == 1, \"Expected length of 1 for single-step pipeline\"\n+\n \n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n@@ -1070,4 +1095,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..4952769 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,8 +217,16 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_array_parameter():\n+    # Set configuration to print only changed parameters\n+    set_config(print_changed_only=True)\n+    # Test if array parameters are handled without error\n+    repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    # Ensure that the output is a string and does not raise an error\n+    assert isinstance(repr_output, str)\n \n-def test_pipeline():\n+    # Reset the configuration to default\n+    set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..d954098 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -12,6 +13,8 @@ from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n from sklearn.ensemble import VotingClassifier, VotingRegressor\n+from sklearn.linear_model import LinearRegression, LogisticRegression\n+from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n from sklearn.model_selection import GridSearchCV\n from sklearn import datasets\n from sklearn.model_selection import cross_val_score, train_test_split\n@@ -506,4 +509,26 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n+\n+@pytest.mark.parametrize(\n+    \"voter, X, y\",\n+    [\n+        (VotingClassifier(estimators=[\n+            ('lr', LogisticRegression()),\n+            ('rf', RandomForestClassifier(n_estimators=5))\n+        ]), *datasets.load_iris(return_X_y=True)),\n+        (VotingRegressor(estimators=[\n+            ('lr', LinearRegression()),\n+            ('rf', RandomForestRegressor(n_estimators=5))\n+        ]), *datasets.load_boston(return_X_y=True))\n+    ]\n+)\n+def test_none_estimator_with_weights(voter, X, y):\n+    # check that an estimator can be set to None and passing some weight\n+    # regression test for the issue\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape[0] == y.shape[0]\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..80644e5 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,31 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+import numpy as np\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+from sklearn.utils._testing import assert_raises\n+from sklearn.utils._testing import assert_warns_message\n+from sklearn.exceptions import ConvergenceWarning\n \n-def test_transformation_dimensions():\n+def test_numpy_scalar_parameters():\n+    # Ensure numpy scalar types are accepted for parameters\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+    \n+    nca_float_tol = NeighborhoodComponentsAnalysis(tol=np.float32(1e-3))\n+    nca_int_n_components = NeighborhoodComponentsAnalysis(n_components=np.int32(5))\n+    \n+    try:\n+        nca_float_tol.fit(X, y)\n+        print(\"NCA with numpy float32 tol fitted successfully.\")\n+    except TypeError as e:\n+        print(f\"Unexpected TypeError for numpy float32 tol: {e}\")\n+    \n+    try:\n+        nca_int_n_components.fit(X, y)\n+        print(\"NCA with numpy int32 n_components fitted successfully.\")\n+    except TypeError as e:\n+        print(f\"Unexpected TypeError for numpy int32 n_components: {e}\")\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..fdf47c3 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,42 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for zero division error when support_vectors_ is empty\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+    \n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_no_error_on_empty_support_vectors():\n+    # Test to ensure no error is raised with empty support_vectors_ in sparse format\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+    \n+    X_train = sparse.csr_matrix([[0, 0, 0, 0],\n+                                 [0, 0, 0, 0]])\n+    y_train = np.array([0, 0])\n+    model = svm.SVR(kernel='linear')\n+    \n+    # Ensure that no exceptions are raised during fit\n+    try:\n+        model.fit(X_train, y_train)\n+        assert not model.support_vectors_.data.size\n+        assert not model.dual_coef_.data.size\n+    except ZeroDivisionError:\n+        assert False, \"ZeroDivisionError was raised when it should not have been.\"\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..c3f8d7c 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,8 +972,31 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n-def test_repeated_cv_value_errors():\n+import pytest\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr_with_different_parameters(RepeatedCV):\n+    # Test with default parameters\n+    repeated_cv = RepeatedCV()\n+    expected_repr = \"{}(n_repeats=10, n_splits=5, random_state=None)\".format(repeated_cv.__class__.__name__)\n+    assert repr(repeated_cv) == expected_repr\n+\n+    # Test with custom n_splits and n_repeats\n+    n_splits, n_repeats = 3, 4\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    expected_repr = \"{}(n_repeats={}, n_splits={}, random_state=None)\".format(\n+        repeated_cv.__class__.__name__, n_repeats, n_splits\n+    )\n+    assert repr(repeated_cv) == expected_repr\n+\n+    # Test with a specific random_state\n+    random_state = 42\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)\n+    expected_repr = \"{}(n_repeats={}, n_splits={}, random_state={})\".format(\n+        repeated_cv.__class__.__name__, n_repeats, n_splits, random_state\n+    )\n+    assert repr(repeated_cv) == expected_repr\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n         assert_raises(ValueError, cv, n_repeats=0)\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..809949f 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -152,6 +152,29 @@ def test_affinity_propagation_predict_non_convergence():\n     assert_array_equal(np.array([-1, -1, -1]), y)\n \n \n+import numpy as np\n+from sklearn.cluster import AffinityPropagation\n+from sklearn.utils._testing import assert_array_equal\n+from sklearn.exceptions import ConvergenceWarning\n+import warnings\n+\n+def test_affinity_propagation_non_convergence_cluster_centers():\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+    assert_array_equal(np.array([]), af.cluster_centers_indices_)\n+\n+def test_affinity_propagation_convergence_check_warning():\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+        assert len(w) > 0\n+        assert issubclass(w[-1].category, ConvergenceWarning)\n+\n def test_equal_similarities_and_preferences():\n     # Unequal distances\n     X = np.array([[0, 0], [1, 1], [-2, -2]])\n",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..e5a2689 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -162,6 +162,9 @@ def test_format_invariance(metric_name):\n         yield y, 'array of ints'\n         yield y.tolist(), 'list of ints'\n         yield [str(x) for x in y.tolist()], 'list of strs'\n+        yield [str(x) + \"-a\" for x in y.tolist()], 'list of modified strs'\n+        yield np.array([str(x) for x in y.tolist()], dtype=object), 'array of strs as object'\n+        yield np.array([str(x) + \"-a\" for x in y.tolist()], dtype=object), 'array of modified strs as object'\n         yield y - 1, 'including negative ints'\n         yield y + 1, 'strictly positive ints'\n \n",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..3192191 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -668,7 +669,25 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_calibrated_classifier_with_isotonic_and_pandas_output():\n+    \"\"\"Check that CalibratedClassifierCV with isotonic regression works with \n+    transform_output='pandas'.\n+    \n+    This test ensures that the isotonic regression calibration does not fail \n+    when the output format is set to pandas.\n+    \"\"\"\n+    X, y = make_classification(n_samples=100, n_features=2, random_state=42)\n+    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n+    \n+    base_estimator = SGDClassifier(random_state=42)\n+    calibrator = CalibratedClassifierCV(base_estimator, method='isotonic', cv=2)\n+    \n+    with set_config(transform_output=\"pandas\"):\n+        calibrator.fit(X_train, y_train)\n+        proba = calibrator.predict_proba(X_test)\n+    \n+    assert isinstance(proba, pd.DataFrame)\n+    assert proba.shape == (len(X_test), len(calibrator.classes_))\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..825daf6 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2121,6 +2121,30 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n \n+@pytest.mark.parametrize(\n+    \"categorical_features\",\n+    [[], np.array([False, False, False, False]), [False, False, False, False]],\n+    ids=[\"list\", \"np_bool_array\", \"bool_list\"],\n+)\n+def test_column_transformer_with_empty_features_pandas_output(categorical_features):\n+    \"\"\"Test ColumnTransformer with empty feature lists and pandas output\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    X = pd.DataFrame(data=[[1.0, 2.0, 3.0, 4.0], [4, 2, 2, 5]],\n+                     columns=[\"a\", \"b\", \"c\", \"d\"])\n+    y = np.array([0, 1])\n+    numerical_features = [\"a\", \"b\", \"c\"]\n+    ct = ColumnTransformer(\n+        [\n+            ('categorical', 'passthrough', categorical_features),\n+            ('numerical', Pipeline([(\"scaler\", RobustScaler()),\n+                                    (\"imputer\", SimpleImputer(strategy=\"median\"))]), numerical_features),\n+        ],\n+        remainder='drop'\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\", \"numerical__c\"])\n+\n     # The feature names are prefixed because verbose_feature_names_out=True is default\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n@@ -2128,4 +2152,4 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..769fa55 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -111,18 +111,332 @@ def test_automodule_special_members(app):\n         '   docstring',\n         '',\n     ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple_classes(app):\n+    # Test case where inherited members from Base are included, but from list are ignored\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'Base'\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '.. py:class:: MyList',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_ignore_list_set_tuple(app):\n+    # Test case where inherited members from list, set, and tuple are ignored\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'Base, Derived'\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+    ]\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n \n \n-@pytest.mark.sphinx('html', testroot='ext-autodoc',\n-                    confoverrides={'autodoc_mock_imports': ['missing_module',\n-                                                            'missing_package1',\n-                                                            'missing_package2',\n-                                                            'missing_package3',\n-                                                            'sphinx.missing_module4']})\n-@pytest.mark.usefixtures(\"rollback_sysmodules\")\n-def test_subclass_of_mocked_object(app):\n-    sys.modules.pop('target', None)  # unload target module to clear the module cache\n \n-    options = {'members': None}\n-    actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..5713b19 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,26 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (index,\n+                          [desc, ([desc_signature, ([desc_name, '-j'],\n+                                                    [desc_addname, '[=N]'])],\n+                                  [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (index,\n+                          [desc, ([desc_signature, ([desc_name, '[enable'],\n+                                                    [desc_addname, '=]PATTERN'])],\n+                                  [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..0b43403 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..01b2169 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..df3ae92 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,30 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_with_class_reference(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..a42f08a 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -336,6 +336,13 @@ def test_args():\n         Permutation(((0, ), [1]))\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n     assert Permutation([[1], [4, 2]]) == Permutation([0, 1, 4, 3, 2])\n+\n+    # Test case for non-disjoint cycles to ensure they are applied in order\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])  # Apply cycles in order\n+    assert Permutation([[1, 2], [2, 3]]) == Permutation([0, 2, 3, 1])  # Non-disjoint, but sequential\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([1, 2, 0])  # Overlapping cycles\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])  # Cancel out to identity\n     assert Permutation([[1], [4, 2]], size=1) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation(\n         [[1], [4, 2]], size=6) == Permutation([0, 1, 4, 3, 2, 5])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..e180822 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -449,6 +450,43 @@ def test_sparse_matrix():\n     assert SparseMatrix.eye(2).nnz() == 2\n \n \n+def test_sparse_hstack_vstack_edge_cases():\n+    # Test for hstack with zero row matrices\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices).shape == (0, 6)\n+\n+    # Test for vstack with zero column matrices\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices).shape == (6, 0)\n+\n+    # Additional tests for varied dimensions ensuring that stacking is correct\n+    # hstack with zero row matrices but different column sizes\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    # vstack with zero column matrices but different row sizes\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(1, 0)\n+    M3 = SparseMatrix.zeros(2, 0)\n+    M4 = SparseMatrix.zeros(3, 0)\n+    assert SparseMatrix.vstack(M1, M2, M3, M4).shape == (6, 0)\n+\n+    # Ensure that stacking with non-zero dimensions behaves correctly\n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(1, 2)\n+    M4 = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+    M1 = SparseMatrix.zeros(0, 1)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(2, 1)\n+    M4 = SparseMatrix.zeros(3, 1)\n+    assert SparseMatrix.vstack(M1, M2, M3, M4).shape == (6, 1)\n+\n def test_transpose():\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n         SparseMatrix(((1, 3), (2, 4)))\n",
  "sympy__sympy-13471": "",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..eb5797e 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -278,8 +278,20 @@ def test_coth_series():\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n-\n-def test_csch():\n+def test_coth_log_tan_subs():\n+    from sympy import Symbol, coth, log, tan\n+\n+    x = Symbol('x')\n+    expr = coth(log(tan(x)))\n+    \n+    # Test substitutions that previously caused errors\n+    for val in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        try:\n+            result = expr.subs(x, val)\n+            print(f\"coth(log(tan({val}))) = {result}\")\n+        except Exception as e:\n+            print(f\"Substitution failed for x={val} with error: {e}\")\n+            assert False, f\"Substitution raised an unexpected exception for x={val}: {e}\"\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..906594d 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -187,6 +187,51 @@ def test_col_join():\n                    [0, 0, 1],\n                    [7, 7, 7]])\n \n+def test_issue_13643_col_insert():\n+    from sympy import eye, Matrix, ones\n+    \n+    # Recreate the case from the issue\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    \n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    \n+    assert result == expected\n+    \n+    # Test inserting at the beginning\n+    result_start = M.col_insert(0, V)\n+    expected_start = Matrix([\n+        [2, 2, 1, 0, 0, 0, 0, 0],\n+        [2, 2, 0, 1, 0, 0, 0, 0],\n+        [2, 2, 0, 0, 1, 0, 0, 0],\n+        [2, 2, 0, 0, 0, 1, 0, 0],\n+        [2, 2, 0, 0, 0, 0, 1, 0],\n+        [2, 2, 0, 0, 0, 0, 0, 1]\n+    ])\n+    \n+    assert result_start == expected_start\n+    \n+    # Test inserting at the end\n+    result_end = M.col_insert(6, V)\n+    expected_end = Matrix([\n+        [1, 0, 0, 0, 0, 0, 2, 2],\n+        [0, 1, 0, 0, 0, 0, 2, 2],\n+        [0, 0, 1, 0, 0, 0, 2, 2],\n+        [0, 0, 0, 1, 0, 0, 2, 2],\n+        [0, 0, 0, 0, 1, 0, 2, 2],\n+        [0, 0, 0, 0, 0, 1, 2, 2]\n+    ])\n+    \n+    assert result_end == expected_end\n+\n def test_row_insert():\n     r4 = Matrix([[4, 4, 4]])\n     for i in range(-4, 5):\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..f791eea 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,8 +615,41 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+import sympy as sp\n+from sympy import symbols, oo, latex\n+from sympy.series.sequences import SeqFormula, SeqPer, SeqAdd, SeqMul\n \n def test_latex_sequences():\n+    # Test with the original issue example\n+    k, m, n = symbols('k m n', integer=True)\n+    seq_formula = SeqFormula(n**2, (n, 0, oo))\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(seq_formula) == latex_str\n+\n+    # Additional sequences with different patterns and lengths\n+    seq_formula_2 = SeqFormula(n**3, (n, 0, oo))\n+    latex_str_2 = r'[0, 1, 8, 27, \\ldots]'\n+    assert latex(seq_formula_2) == latex_str_2\n+\n+    seq_formula_3 = SeqFormula(n, (n, 0, 3))\n+    latex_str_3 = r'[0, 1, 2, 3]'\n+    assert latex(seq_formula_3) == latex_str_3\n+\n+    seq_formula_4 = SeqFormula(n**2, (n, -oo, 0))\n+    latex_str_4 = r'[\\ldots, 9, 4, 1, 0]'\n+    assert latex(seq_formula_4) == latex_str_4\n+\n+    seq_per = SeqPer((1, 2))\n+    latex_str_5 = r'[1, 2, 1, 2, \\ldots]'\n+    assert latex(seq_per) == latex_str_5\n+\n+    seq_add = SeqAdd(seq_formula, seq_per)\n+    latex_str_6 = r'[1, 3, 5, 11, \\ldots]'\n+    assert latex(seq_add) == latex_str_6\n+\n+    seq_mul = SeqMul(seq_formula, seq_per)\n+    latex_str_7 = r'[0, 2, 4, 18, \\ldots]'\n+    assert latex(seq_mul) == latex_str_7\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..f47ca8f 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..a5c83fb 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n@@ -307,6 +308,30 @@ def test_latex_functions():\n         r\"\\sin^{-1} {x^{2}}\"\n \n     assert latex(factorial(k)) == r\"k!\"\n+\n+    # Test for acsc with 'full' inverse trig style\n+    assert latex(acsc(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arccsc}{\\left (x \\right )}\"\n+\n+    # Additional testing for inverse trigonometric functions with 'full' style\n+    assert latex(asec(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arcsec}{\\left (x \\right )}\"\n+\n+    # Test for acsc with 'abbreviated' inverse trig style\n+    assert latex(acsc(x), inv_trig_style=\"abbreviated\") == \\\n+        r\"\\operatorname{acsc}{\\left (x \\right )}\"\n+\n+    # Test for asec with 'abbreviated' inverse trig style\n+    assert latex(asec(x), inv_trig_style=\"abbreviated\") == \\\n+        r\"\\operatorname{asec}{\\left (x \\right )}\"\n+\n+    # Test for acsc with 'power' inverse trig style\n+    assert latex(acsc(x), inv_trig_style=\"power\") == \\\n+        r\"\\csc^{-1}{\\left (x \\right )}\"\n+\n+    # Test for asec with 'power' inverse trig style\n+    assert latex(asec(x), inv_trig_style=\"power\") == \\\n+        r\"\\sec^{-1}{\\left (x \\right )}\"\n     assert latex(factorial(-k)) == r\"\\left(- k\\right)!\"\n \n     assert latex(subfactorial(k)) == r\"!k\"\n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..9a52067 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,46 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+def test_MatAdd_pretty_printing():\n+    # issue #14814\n+    n = symbols('n')\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    a = symbols('a')\n+\n+    # Original test patch to verify the issue is fixed\n+    assert pretty(x + y_star) == \"x + y*\"\n+    assert pretty(-a*x + -2*y_star*y_star) == \"-a*x -2*y**y*\"\n+\n+    # Additional test cases\n+    # Test with more complex matrix expressions\n+    z = MatrixSymbol('z', n, n)\n+    assert pretty(x + y_star - z) == \"x + y* - z\"\n+    \n+    # Test with negative and positive terms in a different order\n+    assert pretty(-x - y_star + z) == \"-x - y* + z\"\n+    \n+    # Test with a single MatrixSymbol\n+    assert pretty(x) == \"x\"\n+    assert pretty(y_star) == \"y*\"\n+    assert pretty(-y_star) == \"-y*\"\n+\n+    # Test with zero terms\n+    assert pretty(x - x) == \"0\"\n+\n+    # Test with different coefficients\n+    assert pretty(2*x + 3*y_star) == \"2*x + 3*y*\"\n+    assert pretty(-3*x - 5*y_star) == \"-3*x - 5*y*\"\n+\n+    # Test with scalar multiplication\n+    assert pretty(2*(x + y_star)) == \"2*x + 2*y*\"\n+\n+    # Test with nested MatAdd\n+    expr = (x + y_star) + (z - x)\n+    assert pretty(expr) == \"y* + z\"\n+\n+from sympy import MatrixSymbol, pretty, symbols\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..10bd6d9 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -721,7 +721,26 @@ def test_dummification():\n     assert lam(3, 9) == 2\n     lam = lambdify(sin(t), 2 * sin(t)**2)\n     assert lam(F(t)) == 2 * F(t)**2\n-    #Test that \\alpha was properly dummified\n+    # Test for lambdify handling MatrixSymbol with curly braces in the name\n+    def test_lambdify_curly_matrix_symbol():\n+        from sympy import MatrixSymbol, lambdify\n+        curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+\n+        # Attempt to create lambdified function without dummify\n+        try:\n+            curlyVectorId = lambdify(curlyv, curlyv)\n+            result = curlyVectorId([[1], [2]])\n+            assert result == [[1], [2]], \"Function did not return expected matrix\"\n+        except SyntaxError:\n+            assert False, \"SyntaxError raised unexpectedly with curly braces in MatrixSymbol\"\n+\n+        # Attempt to create lambdified function with dummify=True\n+        try:\n+            curlyVectorIdDummified = lambdify(curlyv, curlyv, dummify=True)\n+            result = curlyVectorIdDummified([[1], [2]])\n+            assert result == [[1], [2]], \"Function did not return expected matrix with dummify=True\"\n+        except SyntaxError:\n+            assert False, \"SyntaxError raised unexpectedly with dummify=True for MatrixSymbol with curly braces\"\n     lam = lambdify((alpha, t), 2*alpha + t)\n     assert lam(2, 1) == 5\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n",
  "sympy__sympy-15345": "",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..59aed00 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,30 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_matrix_expression_latex_compilable():\n+    # Original issue case\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n+    # Additional test cases:\n+    # Test with a different symbol for summation index\n+    l = symbols(\"l\")\n+    assert latex((M*N)[i, l]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, l}'\n+\n+    # Test with different matrix sizes\n+    A = MatrixSymbol(\"A\", 3, 3)\n+    B = MatrixSymbol(\"B\", 3, 3)\n+    assert latex((A*B)[0, 1]) == r'\\sum_{i_{1}=0}^{2} A_{0, i_{1}} B_{i_{1}, 1}'\n+\n+    # Test with non-square matrices\n+    X = MatrixSymbol(\"X\", 3, 2)\n+    Y = MatrixSymbol(\"Y\", 2, 3)\n+    assert latex((X*Y)[1, 2]) == r'\\sum_{i_{1}=0}^{1} X_{1, i_{1}} Y_{i_{1}, 2}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..7f3dfdc 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -21,7 +22,22 @@ def test_idiff():\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n \n-def test_intersection():\n+def test_idiff_new_cases():\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    f = Function('f')\n+    g = Function('g')\n+    \n+    # Testing idiff with Eq\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x).simplify() == (x + 1)*exp(x - y)/(y + 1)\n+    \n+    # Testing idiff with function f(x) instead of y\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x).simplify() == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    \n+    # Additional test cases from the original patch\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..3b9d1a9 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,17 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_autowrap_unused_array_arg_cython():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+    \n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..265bb63 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,16 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, Eq, S, Symbol\n+from sympy.sets import FiniteSet\n \n-def test_issue_9623():\n+def test_issue_16987():\n+    x = Symbol('x')\n+    # Testing the issue to ensure duplicates are handled correctly\n+    assert Intersection({1}, {1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1, 1}, {1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1}, {x}, {1}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({x}, {x}, {1}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..7a853b2 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -26,7 +27,32 @@ def test_numpy_piecewise_regression():\n     assert NumPyPrinter().doprint(p) == 'numpy.select([numpy.less(x, 0),True], [1,0], default=numpy.nan)'\n \n \n-def test_sum():\n+def test_issue_17006():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    # Test fixed behavior for specific matrix size\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2))\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+    assert (f(ma) == mr).all()\n+\n+    # Test error raised for symbolic size identity matrix\n+    from sympy import symbols\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"M\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n+\n+    # Test for larger identity matrix\n+    M3 = MatrixSymbol(\"M\", 3, 3)\n+    f3 = lambdify(M3, M3 + Identity(3))\n+    ma3 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n+    mr3 = np.array([[2, 2, 3], [4, 6, 6], [7, 8, 10]])\n+    assert (f3(ma3) == mr3).all()\n+\n+    # Test with a non-square matrix should raise an error\n+    raises(ValueError, lambda: lambdify(M, M + Identity(3)))\n     if not np:\n         skip(\"NumPy not installed\")\n \n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..7498813 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,18 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n-def test_issue_7971():\n+def test_issue_17137():\n+    from sympy import simplify, Symbol, I, cos\n+\n+    x = Symbol('x')\n+    # Test cases for the specific issue\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n+    # Additional test cases to ensure functionality\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(tan(x)**I) == tan(x)**I\n+    assert simplify(exp(I*x)) == exp(I*x)\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..63c0ada 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -95,7 +96,9 @@ def test_point():\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n-    # Point differences should be simplified\n+    # Test for multiplying Point and sympified number in different orders\n+    assert p3 + p4 * sympify(2.0) == Point(2.0, 2.0), \"Multiplication of Point and sympified number failed\"\n+    assert p3 + sympify(2.0) * p4 == Point(2.0, 2.0), \"Sympified number and Point multiplication failed\"\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n     a, b = S.Half, Rational(1, 3)\n@@ -172,7 +175,9 @@ def test_point3D():\n \n     raises(ValueError, lambda: Point3D(0, 0, 0) + 10)\n \n-    # Point differences should be simplified\n+    # Test for multiplying Point and sympified number in different orders\n+    assert p3 + p4 * sympify(2.0) == Point(2.0, 2.0), \"Multiplication of Point and sympified number failed\"\n+    assert p3 + sympify(2.0) * p4 == Point(2.0, 2.0), \"Sympified number and Point multiplication failed\"\n     assert Point3D(x*(x - 1), y, 2) - Point3D(x**2 - x, y + 1, 1) == \\\n         Point3D(0, -1, 1)\n \n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..dcc2717 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,42 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import Symbol, sympify\n+from sympy.core import symbols\n+from sympy.testing.pytest import raises\n+\n+def test_non_string_equality():\n+    # Ensure expressions do not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Ensure __eq__ doesn't attempt to convert objects to strings\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+    \n+    # Testing for issue verification\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+    assert (x == D()) is False\n+    assert (x != D()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1938,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..f873a57 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,18 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy.abc import x, y\n+\n+    # Test case from the issue description\n+    expr = x**4 + y**4 - 2**4 - 3**4\n+    expected_result = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), \n+                       (2, -3), (2, 3), (3, -2), (3, 2)}\n+\n+    # Check if permute=True gives consistent results irrespective of the order of symbols\n+    assert diophantine(expr, syms=(x, y), permute=True) == expected_result\n+    assert diophantine(expr, syms=(y, x), permute=True) == expected_result\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..f33b8d9 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -60,7 +61,10 @@ def test_PostIncrement():\n     assert ccode(p) == '(x)++'\n \n \n-def test_sizeof():\n+def test_sizeof_atoms():\n+    typename = 'unsigned int'\n+    sz = sizeof(typename)\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n     typename = 'unsigned int'\n     sz = sizeof(typename)\n     assert ccode(sz) == 'sizeof(%s)' % typename\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..41a638f 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,13 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_issue_with_single_element_BlockDiagMatrix():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..7de7e21 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -87,7 +88,14 @@ def test_slicing():\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n-def test_errors():\n+def test_issue_block_index_symbolic():\n+    from sympy import MatrixSymbol, BlockMatrix, symbols\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    # Test to ensure that symbolic indexing does not resolve to incorrect submatrices\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n     raises(IndexError, lambda: Identity(2)[1, 2, 3, 4, 5])\n     raises(IndexError, lambda: Identity(2)[[1, 2, 3, 4, 5]])\n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..346232f 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -200,7 +200,29 @@ def test_im():\n     X = FunctionMatrix(3, 3, Lambda((n, m), n + m*I))\n     assert im(X) == Matrix([[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n \n+from sympy import sign, Abs, Piecewise, Eq, Symbol\n+\n def test_sign():\n+    # Test rewrite of sign in terms of Abs\n+    y = Symbol('y')\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(y).rewrite(Abs).subs(y, 5) == 1\n+    assert sign(y).rewrite(Abs).subs(y, -5) == -1\n+    assert sign(y).rewrite(Abs).subs(y, 0) == 0\n+    \n+    # Test with complex number\n+    z = Symbol('z', complex=True, zero=False)\n+    assert sign(z).rewrite(Abs) == z / Abs(z)\n+    \n+    # Test with different assumptions\n+    positive_x = Symbol('positive_x', positive=True)\n+    negative_x = Symbol('negative_x', negative=True)\n+    zero_x = Symbol('zero_x', zero=True)\n+    \n+    assert sign(positive_x).rewrite(Abs) == 1\n+    assert sign(negative_x).rewrite(Abs) == -1\n+    assert sign(zero_x).rewrite(Abs) == 0\n     assert sign(1.2) == 1\n     assert sign(-1.2) == -1\n     assert sign(3*I) == I\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..6bdeb91 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,8 +513,39 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n+def test_partitions_issue_resolution():\n+    from sympy.utilities.iterables import partitions\n \n-def test_binary_partitions():\n+    # Test case 1: Ensure partitions of 6 with k=2 are distinct\n+    partitions_list = list(partitions(6, k=2))\n+    assert partitions_list == [\n+        {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}\n+    ]\n+\n+    # Test case 2: Ensure partitions of 6 with k=3 are distinct\n+    partitions_list = list(partitions(6, k=3))\n+    assert partitions_list == [\n+        {3: 2}, {1: 1, 2: 1, 3: 1}, {1: 3, 3: 1}, {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}\n+    ]\n+\n+    # Test case 3: Ensure partitions of 8 with k=4 and m=3 are distinct\n+    partitions_list = [p for p in partitions(8, k=4, m=3) if all(k <= 4 for k in p) and sum(p.values()) <= 3]\n+    assert partitions_list == [\n+        {4: 2}, {1: 1, 3: 1, 4: 1}, {2: 2, 4: 1}, {2: 1, 3: 2}\n+    ]\n+\n+    # Test case 4: Ensure partitions of 4 with k=3 are distinct\n+    partitions_list = [p for p in partitions(4, k=3)]\n+    assert partitions_list == [\n+        {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}\n+    ]\n+\n+    # Test case 5: Ensure list of partitions of 4 is unique\n+    from sympy.utilities.iterables import uniq\n+    unique_partitions = list(uniq(partitions(4)))\n+    assert unique_partitions == [\n+        {4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}\n+    ]\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..41aed75 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,6 +254,8 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n+from sympy import S, oo\n+\n def test_zero():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -266,8 +268,10 @@ def test_zero():\n     assert 0**(2*x*y) == 0**(x*y)\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n-\n-def test_pow_as_base_exp():\n+def test_issue_19572():\n+    # Test for issue where 0**-oo should return zoo (ComplexInfinity)\n+    assert 0**-oo == S.ComplexInfinity\n+    assert Pow(0, -oo) == S.ComplexInfinity\n     x = Symbol('x')\n     assert (S.Infinity**(2 - x)).as_base_exp() == (S.Infinity, 2 - x)\n     assert (S.Infinity**(x - 2)).as_base_exp() == (S.Infinity, x - 2)\n",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..0ce6f0a 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,25 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import pytest\n+from sympy import Symbol\n+from sympy.core.basic import Basic\n+\n+def test_symbol_no_dict():\n+    # Test that Symbol instances do not have a __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+\n+def test_symbol_slots():\n+    # Test that Symbol instances have __slots__ defined\n+    s = Symbol('s')\n+    assert hasattr(s, '__slots__')\n+    assert 'name' in s.__slots__\n+\n+def test_symbol_basic_inheritance():\n+    # Ensure that Symbol still correctly inherits from Basic\n+    assert isinstance(Symbol('s'), Basic)\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..b0019cf 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n                    atan, atan2, nan, Symbol, re, im, sign)\n from sympy.abc import w, x, y, z\n@@ -160,6 +161,14 @@ def test_sign():\n     x = Symbol('x', complex=True)\n     assert refine(sign(x), Q.zero(x)) == 0\n \n+def test_refine_complex_arguments():\n+    a = Symbol('a', real=True)\n+    x = Symbol('x')\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo))\n+    assert refine(J.doit(), Q.positive(a)) == 1 / (a**2 + 1)\n+    assert refine(abs(a), Q.positive(a)) == a\n+    assert refine(arg(a), Q.positive(a)) == 0\n+\n \n def test_func_args():\n     class MyClass(Expr):\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..bc7869c 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,6 +20,17 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # Test case for issue with PolynomialError in subs\n+    from sympy.functions.elementary.hyperbolic import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+    \n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        expr.subs({1: 1.0})\n+    except PolynomialError:\n+        assert False, \"Unexpected PolynomialError on substitution\"\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..12e9c0d 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,9 +1,11 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n+from sympy.core.function import Derivative\n from sympy.integrals.integrals import Integral\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n@@ -45,7 +47,12 @@ def test_Matrix_kind():\n         m = cls.zeros(3, 2)\n         assert m.kind is MatrixKind(NumberKind)\n \n-def test_MatMul_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    d1 = Derivative(A, comm_x)\n+    d2 = Derivative(comm_x, comm_x)\n+    assert d2.kind is NumberKind, \"Expected NumberKind for scalar derivative\"\n+    assert d1.kind is MatrixKind(NumberKind), \"Expected MatrixKind(NumberKind) for matrix derivative\"\n     M = Matrix([[1,2],[3,4]])\n     assert MatMul(2, M).kind is MatrixKind(NumberKind)\n     assert MatMul(comm_x, M).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..40dce0a 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -130,8 +130,11 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 1])) == {S.One, x, y, x*y, x**2, x**2*y}\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n-\n-    i, j, k = symbols('i j k', commutative=False)\n+    # Test cases to verify the issue related to min_degrees argument\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x2*x3**2, x2**2*x3, x1*x3**2, x1**2*x3, x3*x2**2, x3**2*x1, x1*x2*x3}\n+    assert set(itermonomials([x1, x2, x3], 4, 3)) == {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x2*x3**2, x2**2*x3, x1*x3**2, x1**2*x3, x3*x2**2, x3**2*x1, x1*x2*x3, x1**4, x2**4, x3**4, x1**3*x2, x1**3*x3, x2**3*x1, x2**3*x3, x3**3*x1, x3**3*x2, x1*x2**3, x2*x3**3, x3*x1**3, x1**2*x2**2, x2**2*x3**2, x3**2*x1**2, x1*x2*x3**2, x1*x3*x2**2, x2*x1*x3**2, x3*x1*x2**2}\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x2*x3**2, x2**2*x3, x1*x3**2, x1**2*x3, x3*x2**2, x3**2*x1, x1*x2*x3, x1*x2, x1*x3, x2*x3, x2**2, x1**2, x3**2}\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n     assert set(itermonomials([i, j, k], [0, 1, 0])) == {1, j}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..70bfd70 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -48,6 +49,15 @@ def test_solve_poly_system():\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n+    # New test cases for verifying issue resolution\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        Poly(x - 1, x, y), (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        Poly(y - 1, x, y), (x, y)))\n \n \n def test_solve_biquadratic():\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..7057531 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..2040f85 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -337,6 +337,8 @@ def test_cse_Indexed():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+from sympy import symbols, MatrixSymbol, cse, Matrix\n+from sympy.codegen.cfunctions import log2\n \n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n@@ -346,8 +348,19 @@ def test_cse_MatrixSymbol():\n     n = symbols('n', integer=True)\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n+def test_cse_MatrixSymbol_indexing():\n+    A = MatrixSymbol(\"A\", 4, 4)\n+    B = MatrixSymbol(\"B\", 4, 4)\n+    C = A*B\n+    replacements, reduced_exprs = cse(C)\n+    assert len(replacements) > 0\n+    assert all(isinstance(expr, Matrix) for expr in reduced_exprs)\n+    assert all(isinstance(r[1], MatrixSymbol) for r in replacements)\n \n-def test_cse_MatrixExpr():\n+    expr1 = A[0, 0]*B[0, 0] + A[0, 1]*B[1, 0] + A[0, 2]*B[2, 0] + A[0, 3]*B[3, 0]\n+    expr2 = A[1, 0]*B[0, 0] + A[1, 1]*B[1, 0] + A[1, 2]*B[2, 0] + A[1, 3]*B[3, 0]\n+    replacements, reduced_exprs = cse([expr1, expr2])\n+    assert len(replacements) > 0\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..79599f4 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -46,6 +47,20 @@ def test_issue_18361():\n     assert simplify(B) == Array([1, 0])\n     assert simplify(C) == Array([x + 1, sin(2*x)])\n \n+def test_empty_array_construction():\n+    # Test if empty Array can be constructed without error\n+    for ArrayType in array_types:\n+        A = ArrayType([])\n+        assert isinstance(A, ArrayType)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n+        \n+    # Test ImmutableDenseNDimArray specifically\n+    A = ImmutableDenseNDimArray([])\n+    assert isinstance(A, ImmutableDenseNDimArray)\n+    assert A.shape == (0,)\n+    assert list(A) == []\n+\n def test_issue_20222():\n     A = Array([[1, 2], [3, 4]])\n     B = Matrix([[1,2],[3,4]])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..6ba4545 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1174,8 +1174,20 @@ def test_scipy_polys():\n                     )\n \n \n-\n-def test_lambdify_inspect():\n+import inspect\n+from sympy import lambdify\n+\n+def test_tuple_single_element():\n+    # Test for a single-element tuple\n+    f = lambdify([], (1,))\n+    src = inspect.getsource(f)\n+    assert 'return (1,)' in src, \"The source should return a tuple with one element.\"\n+\n+def test_tuple_multiple_elements():\n+    # Test for a tuple with multiple elements\n+    f = lambdify([], (1, 2))\n+    src = inspect.getsource(f)\n+    assert 'return (1, 2)' in src, \"The source should return a tuple with two elements.\"\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..d6176df 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy import exp\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.util import dimensionless\n+    from sympy.physics.units.dimensions import Dimension\n+    \n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..c86ca8a 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,8 +45,21 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n-\n-def test_tensor_product_commutator():\n+def test_tensor_product_issue_24142():\n+    # Tests for fix of issue #24142\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2 * A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A * B, A) + 2 * TP(A * B, B) + TP(A, A) + TP(A, B)\n+    # Additional test cases\n+    assert TP(3 * A + 4 * B, B + 2 * C).expand(tensorproduct=True) == \\\n+        3 * TP(A, B) + 6 * TP(A, C) + 4 * TP(B, B) + 8 * TP(B, C)\n+    assert TP(0, A + B).expand(tensorproduct=True) == 0\n+    assert TP(A + B, 0).expand(tensorproduct=True) == 0\n+    assert TP(A + B, B - A + C).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) + TP(A, C) + TP(B, B) - TP(B, A) + TP(B, C)\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..77f4a4a 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,6 +563,38 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter, SI\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    # Test expression a1*t1 + v1\n+    expr1 = A1 * T1 + V1\n+    # should not throw ValueError here, as dimensions should be equivalent\n+    assert SI._collect_factor_and_dimension(expr1) == (2 * meter / second - 49 * meter / second, velocity)\n+\n+    # Additional test cases\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 5 * meter / second)\n+    expr2 = V1 + V2\n+    # should be straightforward addition of velocities\n+    assert SI._collect_factor_and_dimension(expr2) == (7 * meter / second, velocity)\n+\n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 0.5 * second)\n+    expr3 = A1 * T2 + V1\n+    # Result should still be velocity\n+    assert SI._collect_factor_and_dimension(expr3) == (2 * meter / second - 4.9 * meter / second, velocity)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..fe0d3c7 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, kilo\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..0c8ea1c 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -7,7 +7,7 @@ from django.test.utils import CaptureQueriesContext, isolate_apps\n \n from .models import (\n     Base, Chef, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n-    MixinModel, ParkingLot, Place, Post, Restaurant, Student, SubBase,\n+    MixinModel, ParkingLot, Place, Post, Restaurant, Student, SubBase, Child, Parent,\n     Supplier, Title, Worker,\n )\n \n",
  "django__django-13033": "",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..9b5d151 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_with_checkboxselectmultiple(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the correct ID from attrs\n+        when auto_id is provided in CheckboxSelectMultiple.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex de2502e..23d0b92 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1484,4 +1484,37 @@ class CreatePermissionsTests(TestCase):\n                 content_type__app_label=opts.app_label,\n                 codename=codename,\n             ).exists()\n-        )\n+        )\n+\n+@override_settings(DATABASE_ROUTERS=[TenantDatabaseRouter()])\n+class MigrateCommandDatabaseParameterTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        # Set up any necessary state before each test\n+        self.old_subdomain = getattr(local_state, \"subdomain\", None)\n+        local_state.subdomain = \"tenant_1\"\n+\n+    def tearDown(self):\n+        # Clean up any state after each test\n+        if self.old_subdomain is not None:\n+            local_state.subdomain = self.old_subdomain\n+        else:\n+            del local_state.subdomain\n+\n+    def test_migrate_respects_database_parameter(self):\n+        # Test that the migrate command respects the --database parameter\n+        try:\n+            with self.assertRaises(InvalidTenantException):\n+                # We expect an `InvalidTenantException` as the router will try to route to a non-existent tenant DB\n+                call_command(\"migrate\", database=\"other\", verbosity=0)\n+        except OperationalError:\n+            self.fail(\"OperationalError raised, expected InvalidTenantException for invalid tenant routing.\")\n+\n+    def test_create_permissions_respects_using(self):\n+        # Test that create_permissions uses the correct database\n+        Permission.objects.using(\"other\").delete()\n+        with self.assertNumQueries(6, using=\"other\") as captured_queries:\n+            create_permissions(apps.get_app_config(\"auth\"), verbosity=0, using=\"other\")\n+        self.assertIn(\"INSERT INTO\", captured_queries[-1][\"sql\"].upper())\n+        self.assertGreater(Permission.objects.using(\"other\").count(), 0)\n",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..224fdb3 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,11 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm, Normalize\n+import numpy as np\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n@@ -657,8 +662,32 @@ def test_colorbar_scale_reset():\n \n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n+def test_update_colorbar_after_changing_norm():\n+    # Create a random image with a log-normal distribution\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n \n-def test_colorbar_get_ticks_2():\n+    fig, ax = plt.subplots()\n+    # Display the image\n+    plot = ax.imshow(img, cmap='gray')\n+    # Add a colorbar\n+    cb = fig.colorbar(plot, ax=ax)\n+\n+    # Change the normalization to LogNorm\n+    plot.set_norm(LogNorm())\n+\n+    # Update the colorbar\n+    cb.update_normal(plot)\n+\n+    # Check if the colorbar's scale is updated correctly\n+    assert cb.ax.yaxis.get_scale() == 'log'\n+\n+    # Now use a different method and ensure no ZeroDivisionError occurs\n+    try:\n+        cb.update_bruteforce(plot)\n+        # Test if colorbar's ticks are within the expected range\n+        assert cb.get_ticks()[0] > 0\n+    except ZeroDivisionError:\n+        pytest.fail(\"update_bruteforce() raised ZeroDivisionError unexpectedly!\")\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..2cbae8f 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,31 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output to ensure no errors are thrown.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().to_frame(name='value_sum')\n+\n+    # This should work without errors\n+    set_config(transform_output=\"pandas\")\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    result = union.fit_transform(data)\n+    assert isinstance(result, pd.DataFrame)\n+    assert \"my_transformer__value_sum\" in result.columns\n+    assert len(result) == 4  # 4 unique dates\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..78effc6 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,43 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import sys\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+\n+def do_autodoc(app, objtype, name, options=None):\n+    # A placeholder function for generating autodoc content.\n+    # This would be implemented according to the testing utilities available.\n+    pass\n+\n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is available since python3.6.')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app: SphinxTestApp):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..4b97607 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -358,12 +359,27 @@ def test_issue_2827_trigsimp_methods():\n     assert exptrigsimp(eq) == eq\n \n \n-def test_exptrigsimp():\n-    def valid(a, b):\n-        from sympy.utilities.randtest import verify_numerically as tn\n-        if not (tn(a, b) and a == b):\n-            return False\n-        return True\n+def test_issue_simplify_trig_with_rational():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = sin(Rational(1, 50)) * sin(Rational(1, 25)) + cos(Rational(1, 50)) * cos(Rational(1, 25))\n+    \n+    assert simplify(r1) == cos(S(1)/50 - S(1)/25)\n+    assert simplify(r2) == cos(S(1)/50 - S(1)/25)\n+\n+    # Check acos simplification\n+    simplified_result = simplify(acos(r2))\n+    assert simplified_result == acos(cos(S(1)/50 - S(1)/25))\n+\n+    # Additional tests for trigsimp\n+    assert trigsimp(r1) == cos(S(1)/50 - S(1)/25)\n+    assert trigsimp(r2) == cos(S(1)/50 - S(1)/25)\n+\n+    # Check the case of using negative angles\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r3 = t1.dot(t3)\n+    assert trigsimp(r3) == sin(S(3)/50)\n \n     assert exptrigsimp(exp(x) + exp(-x)) == 2*cosh(x)\n     assert exptrigsimp(exp(x) - exp(-x)) == 2*sinh(x)\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..b63576f 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,37 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_with_addition_alignment():\n+    from sympy import Sum, oo, pprint\n+    from sympy.abc import x\n \n-def test_units():\n+    expr = Sum(x, (x, 1, oo)) + 3\n+\n+    ascii_str = \\\n+    \"\"\"\\\n+  oo  \\n\\\n+ ___  \\n\\\n+ \\\\ `  \\n\\\n+  )  x\\n\\\n+ /_,  \\n\\\n+x = 1 \\n\\\n+  + 3 \\\n+\"\"\"\n+    ucode_str = \\\n+    u(\"\"\"\\\n+  \u221e   \\n\\\n+ ___  \\n\\\n+ \u2572    \\n\\\n+  \u2572  x\\n\\\n+  \u2571   \\n\\\n+ \u2571    \\n\\\n+ \u203e\u203e\u203e  \\n\\\n+x = 1 \\n\\\n+  + 3 \\\n+\"\"\")\n+    \n+    assert pretty(expr) == ascii_str\n+    assert upretty(expr) == ucode_str\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..eed036c 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,20 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.utilities.pytest import raises\n+\n def test_uniq():\n+    # Test that modifying the list during iteration raises RuntimeError\n+    f = [1, 2, 3]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = ['a', 'b', 'c']\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+\n+    # Test with nested lists\n+    f = [[1], [2], [3]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..20d32d6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -536,6 +536,25 @@ class BasicExpressionsTests(TestCase):\n             qs.query.annotations['is_ceo'],\n             qs.query.annotations['small_company'],\n         )\n+    def test_subquery_sql(self):\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+\n+    def test_subquery_sql_without_subquery_flag(self):\n+        # Test to reproduce the issue where the subquery flag is not set\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        # Explicitly set subquery flag to False to simulate the issue\n+        employees_subquery.query.subquery = False\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        # The SQL should be invalid with missing 'S' and ending quote\n+        self.assertTrue(sql.startswith('(ELECT '))\n \n     def test_in_subquery(self):\n         # This is a contrived test (and you really wouldn't write this query),\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..8996c35 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,13 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation('pool__tournament__pool')\n+                ).select_related('tournament_pool', 'tournament_pool__tournament'))\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +171,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..0e53711 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -12,9 +13,14 @@ import pytest\n from PIL import Image\n \n import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+import pickle\n+import platform\n+import pytest\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n+from matplotlib.figure import Figure\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..fec1acf 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -1623,7 +1624,16 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_scatterplot_hue(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            assert True, \"PairGrid with scatterplot and hue did not raise an exception\"\n+        except Exception as e:\n+            assert False, f\"PairGrid with scatterplot and hue raised an exception: {e}\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..93e5f0d 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -323,6 +323,26 @@ class TestTraceback_f_g_h:\n         assert entry.frame.code.name == \"g\"\n \n \n+import pytest\n+\n+def test_raises_str_behavior():\n+    # Testing the `str()` behavior on the pytest.raises context variable\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    \n+    # Check that str(excinfo) does not return the full exception message\n+    assert str(excinfo) == \"<ExceptionInfo LookupError tblen=3>\"\n+    \n+    # Check that str(excinfo.value) returns the full exception message\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+\n+def test_standard_exception_str():\n+    # Standard exception handling in Python for comparison\n+    try:\n+        raise LookupError(\"A\\nB\\nC\")\n+    except LookupError as e:\n+        assert str(e) == \"A\\nB\\nC\"\n+\n def test_excinfo_exconly():\n     excinfo = pytest.raises(ValueError, h)\n     assert excinfo.exconly().startswith(\"ValueError\")\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..18aa66d 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,11 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Test with the new shortcut '-c'\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+        # Test with the new shortcut '-c'\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..5453cf4 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -91,6 +91,18 @@ def missing_attr(c,\n     return a + (b or \"\")\n \n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+\n+\n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n \n@@ -98,4 +110,4 @@ class _ClassWithDocumentedInit:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..27f055a 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,18 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Sum, symbols, Symbol, Identity\n \n-def test_Identity_doit():\n+def test_Identity_sum():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+\n+    # Confirm that the sum of diagonal elements is n\n+    assert Sum(In[i, i], (i, 0, n-1)).doit() == n\n+\n+    # Verify that the total sum of the elements in the Identity matrix is n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..54821d8 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,12 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_issue_21537():\n+    from sympy.parsing.latex import parse_latex\n+    # Test the fix for issue 21537 regarding fraction parsing\n+    expr_latex = r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\"\n+    expected_expr = ((a**3 + b)/c)/(1/(c**2))\n+    assert parse_latex(expr_latex) == expected_expr\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}