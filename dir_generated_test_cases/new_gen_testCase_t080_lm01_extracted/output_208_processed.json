{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..0560e18 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,8 +134,21 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n-\n-def test_custom_model_separable():\n+def test_nested_compound_model_separability():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+\n+    # Define the initial compound model\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+\n+    # Check the separability matrix for a nested compound model\n+    nested_model = m.Pix2Sky_TAN() & cm\n+    expected_separability = np.array([[True, True, False, False],\n+                                      [True, True, False, False],\n+                                      [False, False, True, True],\n+                                      [False, False, True, True]])\n+    result_separability = separability_matrix(nested_model)\n+    assert_allclose(result_separability, expected_separability)\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..50438a3 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,63 @@\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    \n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n+def test_rst_with_header_rows_only_name():\n+    \"\"\"Test RST output with only name headers\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.ct})\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\"])\n+    expected = [\n+        \"===== ========\",\n+        \" wave response\",\n+        \"===== ========\",\n+        \"350.0      0.7\",\n+        \"950.0      1.2\",\n+        \"===== ========\",\n+    ]\n+    assert out.getvalue().splitlines() == expected\n+\n+def test_rst_with_invalid_header_rows():\n+    \"\"\"Test RST output with invalid header rows causing an error\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.ct})\n+    out = StringIO()\n+    try:\n+        tbl.write(out, format=\"ascii.rst\", header_rows=[\"invalid\"])\n+    except TypeError as e:\n+        assert \"unexpected keyword argument\" in str(e)\n+    else:\n+        assert False, \"Expected a TypeError but none was raised\"\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n+from astropy.table import QTable\n+import astropy.units as u\n+import numpy as np\n \n from .common import assert_almost_equal, assert_equal\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..feb459f 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -42,8 +42,41 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert table2.meta[\"comments\"][0].startswith(\"WT -- hardness\")\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n+import pytest\n+from astropy.io.ascii.qdp import _read_table_qdp\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_case_insensitive_commands(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Example QDP file with mixed case commands\n+    READ TERR 1\n+    read serr 2\n+    !MJD            Rate            Error\n+    53000.123456    0.726155        0.583890\n+    55045.099887    2.410935        1.393592\n+    NO NO NO\n+    \"\"\"\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+    \n+    path = str(tmp_path / \"test_case.qdp\")\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+    \n+    table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n \n-def test_roundtrip(tmp_path):\n+    assert np.allclose(table[\"MJD\"], [53000.123456, 55045.099887])\n+    assert np.allclose(table[\"Rate\"], [0.726155, 2.410935])\n+    assert np.allclose(table[\"Rate_perr\"], [0.583890, 1.393592])\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n     ! Columns are as labelled\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..6306a20 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,26 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+import pytest\n+\n+def test_nddata_mask_propagation():\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    # multiply mask by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_mask.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply mask by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..a1bf54d 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -253,8 +253,25 @@ class TestTableFunctions(FitsTestCase):\n         # When there are scaled columns, the raw data are in data._parent\n \n         t.close()\n-\n-    def test_ascii_table(self):\n+    def test_fitsrec_d_exponent_handling(self):\n+        # Create a FITS table with a column that uses the 'D' format\n+        r1 = np.array([1.234567890123456, 2.345678901234567, 3.456789012345678])\n+        c1 = fits.Column(name='col1', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1])\n+\n+        # Write the HDU to a temporary FITS file\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+\n+        # Read the file and verify the data is written with 'D' as the exponent\n+        with open(self.temp('test_d_exponent.fits')) as f:\n+            content = f.read()\n+            assert '1.234567890123456D+00' in content\n+            assert '2.345678901234567D+00' in content\n+            assert '3.456789012345678D+00' in content\n+\n+        # Open the FITS file with astropy and verify the data integrity\n+        with fits.open(self.temp('test_d_exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n         ra1 = np.rec.array([\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..b6b4e71 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1092,8 +1092,12 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertEqual(default_storage.base_location, '')\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n-\n-    def test_override_file_upload_permissions(self):\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default value for FILE_UPLOAD_PERMISSIONS should be 0o644.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n         the file_permissions_mode attribute of\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..530b2d9 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -514,6 +514,21 @@ class MigrateTests(MigrationTestBase):\n             out.getvalue()\n         )\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_no_transactional_ddl(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n     def test_showmigrations_plan_app_label_no_migrations(self):\n         out = io.StringIO()\n@@ -541,23 +556,98 @@ class MigrateTests(MigrationTestBase):\n             index_op_desc_author, index_tx_start,\n             \"Operation description (author) not found or found before transaction start\"\n         )\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_no_transactional_ddl(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n         self.assertGreater(\n             index_create_table, index_op_desc_author,\n             \"CREATE TABLE not found or found before operation description (author)\"\n         )\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_no_transactional_ddl(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n         self.assertGreater(\n             index_op_desc_tribble, index_create_table,\n             \"Operation description (tribble) not found or found before CREATE TABLE (author)\"\n         )\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_no_transactional_ddl(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n         self.assertGreater(\n             index_op_desc_unique_together, index_op_desc_tribble,\n             \"Operation description (unique_together) not found or found before operation description (tribble)\"\n         )\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_no_transactional_ddl(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n         self.assertGreater(\n             index_tx_end, index_op_desc_unique_together,\n             \"Transaction end not found or found before operation description (unique_together)\"\n         )\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_no_transactional_ddl(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n     def test_sqlmigrate_backwards(self):\n         \"\"\"\n@@ -582,24 +672,99 @@ class MigrateTests(MigrationTestBase):\n             index_op_desc_unique_together, index_tx_start,\n             \"Operation description (unique_together) not found or found before transaction start\"\n         )\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_no_transactional_ddl(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n         self.assertGreater(\n             index_op_desc_tribble, index_op_desc_unique_together,\n             \"Operation description (tribble) not found or found before operation description (unique_together)\"\n         )\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_no_transactional_ddl(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n         self.assertGreater(\n             index_op_desc_author, index_op_desc_tribble,\n             \"Operation description (author) not found or found before operation description (tribble)\"\n         )\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_no_transactional_ddl(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n         self.assertGreater(\n             index_drop_table, index_op_desc_author,\n             \"DROP TABLE not found or found before operation description (author)\"\n         )\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_no_transactional_ddl(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n         self.assertGreater(\n             index_tx_end, index_op_desc_unique_together,\n             \"Transaction end not found or found before DROP TABLE\"\n         )\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_no_transactional_ddl(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n         # Cleanup by unmigrating everything\n         call_command(\"migrate\", \"migrations\", \"zero\", verbosity=0)\n \n",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..e439feb 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,13 +75,22 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n+    def test_invalid_duration_format(self):\n+        field = models.DurationField()\n+        invalid_durations = ['14:00', '14', '25:61:61', '1:2', '1 1']\n+        for duration in invalid_durations:\n+            with self.assertRaises(exceptions.ValidationError) as cm:\n+                field.clean(duration, None)\n+            self.assertEqual(cm.exception.code, 'invalid')\n+            self.assertIn(\"[DD] [[HH:]MM:]ss[.uuuuuu]\", cm.exception.message % cm.exception.params)\n+\n \n class TestFormField(SimpleTestCase):\n     # Tests for forms.DurationField are in the forms_tests app.\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..4e18418 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,7 +356,10 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n-    def test_non_string_content(self):\n+    def test_memoryview_content(self):\n+        \"\"\"Test that HttpResponse correctly handles memoryview objects.\"\"\"\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n         self.assertEqual(r.content, b'12345')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..fe1cef0 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n@@ -464,7 +466,16 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a User instance\n+        u = User.objects.create()\n+        # Ensure it can be fast-deleted\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        # Delete the instance\n+        u.delete()\n+        # Check that the primary key is set to None\n+        self.assertIsNone(u.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..9cc2de5 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,3 +1,4 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n@@ -6,6 +7,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n \n from .models import Proxy, UserProxy\n+from django.db import IntegrityError\n \n update_proxy_permissions = import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')\n \n@@ -140,6 +142,26 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Test that the migration does not fail when permissions already exist for proxy models.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        try:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        except IntegrityError:\n+            self.fail(\"update_proxy_model_permissions raised IntegrityError unexpectedly!\")\n+\n     def test_user_keeps_same_permissions_after_migrating_backward(self):\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..d38e8f5 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -3,6 +3,8 @@ import os\n import py_compile\n import shutil\n import sys\n+import os\n+import sys\n import tempfile\n import threading\n import time\n@@ -22,7 +24,24 @@ from django.utils.autoreload import WatchmanUnavailable\n from .utils import on_macos_with_hfs\n \n \n-class TestIterModulesAndFiles(SimpleTestCase):\n+class TestManagePyReloader(SimpleTestCase):\n+    def test_manage_py_change_triggers_reload(self):\n+        \"\"\"\n+        Test that changes to manage.py trigger the auto-reloader.\n+        \"\"\"\n+        manage_py_path = Path(__file__).resolve().parent / 'manage.py'\n+        with open(manage_py_path, 'w') as f:\n+            f.write(\"print('modification')\\n\")\n+        \n+        # Simulate the environment where manage.py is the main module\n+        sys.modules['__main__'] = import_module('manage')\n+        \n+        # Check if the main module (manage.py) change is detected\n+        self.assertFileFound(manage_py_path)\n+\n+    def test_main_module_is_resolved(self):\n+        main_module = sys.modules['__main__']\n+        self.assertFileFound(Path(main_module.__file__))\n     def import_and_cleanup(self, name):\n         import_module(name)\n         self.addCleanup(lambda: sys.path_importer_cache.clear())\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..0993e1e 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -17,6 +17,8 @@ from django.template import TemplateDoesNotExist\n from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.utils.functional import SimpleLazyObject\n from django.utils.safestring import mark_safe\n from django.views.debug import (\n@@ -238,6 +240,27 @@ class DebugViewTests(SimpleTestCase):\n             m.assert_called_once_with(encoding='utf-8')\n \n \n+class DebugPathConvertersTests(SimpleTestCase):\n+\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test that raising Http404 in a path converter's to_python method results\n+        in a technical 404 response when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_converter_value_error(self):\n+        \"\"\"\n+        Test that raising a ValueError in a path converter's to_python method\n+        results in trying the next URL pattern.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=ValueError):\n+            with mock.patch('django.urls.resolvers.ResolverMatch') as mock_resolver:\n+                response = self.client.get('/path-post/1/')\n+                mock_resolver.assert_called()\n+\n class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..f4d216d 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -293,16 +293,31 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_choices_named_group_lazy(self):\n+    def test_choices_in_max_length(self):\n         class Model(models.Model):\n             field = models.CharField(\n-                max_length=10, choices=[\n-                    [_('knights'), [['L', _('Lancelot')], ['G', _('Galahad')]]],\n-                    ['R', _('Random character')],\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n                 ],\n             )\n \n-        self.assertEqual(Model._meta.get_field('field').check(), [])\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n     def test_bad_db_index_value(self):\n         class Model(models.Model):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..f9c418d 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -246,11 +246,32 @@ class WriterTests(SimpleTestCase):\n             [list, tuple, dict, set, frozenset],\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n+    def test_serialize_translated_enum(self):\n+        from django.utils.translation import gettext_lazy as _\n+        \n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(\n+            default=TranslatedEnum.GOOD,\n+            choices=[(tag.value, tag.name) for tag in TranslatedEnum],\n+            max_length=128\n+        )\n+        \n+        string = MigrationWriter.serialize(field)[0]\n+        \n+        # Check that the serialized string uses the Enum name, not the translated value\n+        self.assertIn(\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD']\",\n+            string\n+        )\n \n-    def test_serialize_lazy_objects(self):\n-        pattern = re.compile(r'^foo$')\n-        lazy_pattern = SimpleLazyObject(lambda: pattern)\n-        self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n+        # Check that the choices array is correctly serialized\n+        self.assertIn(\n+            \"choices=[('Good', 'GOOD'), ('Bad', 'BAD')]\",\n+            string\n+        )\n \n     def test_serialize_enums(self):\n         class TextEnum(enum.Enum):\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..c426138 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..02b7e53 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -40,7 +40,28 @@ class Gender(models.TextChoices):\n     __empty__ = '(Undeclared)'\n \n \n+from django.test import TestCase\n+from .models import MyObject, MyChoice\n+\n class ChoicesTests(SimpleTestCase):\n+    def test_textchoices_enum_str(self):\n+        for choice in MyChoice:\n+            with self.subTest(choice=choice):\n+                self.assertEqual(str(choice), str(choice.value))\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..bd77992 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -147,9 +147,28 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.db import models\n+from django.test import SimpleTestCase\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overriding_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_non_overridden_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'foo')\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 7b8648d..3a6f434 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -67,6 +67,24 @@ class SimplifiedURLTests(SimpleTestCase):\n                     match.route,\n                     r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n                 )\n+    def test_module_view_with_format_optional_parameter(self):\n+        # Test the scenario where the 'format' parameter is provided\n+        match = resolve('/module/html/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'html'})\n+        self.assertEqual(\n+            match.route,\n+            r'^module/(?P<format>(html|json|xml))?/?$',\n+        )\n+\n+        # Test the scenario where the 'format' parameter is omitted\n+        match = resolve('/module/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': None})  # No format given, kwargs is empty\n+        self.assertEqual(\n+            match.route,\n+            r'^module/(?P<format>(html|json|xml))?/?$',\n+        )\n \n     def test_path_lookup_with_inclusion(self):\n         match = resolve('/included_urls/extra/something/')\n",
  "django__django-12284": "",
  "django__django-12286": "",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..3cb7a06 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -169,12 +169,47 @@ class UtilsTests(SimpleTestCase):\n         display_value = display_for_field(None, models.BooleanField(null=True), self.empty_value)\n         expected = '<img src=\"%sadmin/img/icon-unknown.svg\" alt=\"None\" />' % settings.STATIC_URL\n         self.assertHTMLEqual(display_value, expected)\n-\n-        display_value = display_for_field(None, models.DecimalField(), self.empty_value)\n+from django.db import models\n+from django.test import TestCase\n+\n+class AdminUtilsTests(TestCase):\n+    empty_value = '-'\n+\n+    def test_json_display_for_field(self):\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON.\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n+    \n+    def test_jsonfield_with_invalid_json(self):\n+        # Test to ensure the function handles invalid JSON gracefully.\n+        invalid_json = {('a', 'b'): 'c'}\n+        display_value = display_for_field(invalid_json, models.JSONField(), self.empty_value)\n+        # Since this is invalid JSON, it should not be processed as JSON\n+        self.assertEqual(display_value, \"{('a', 'b'): 'c'}\")\n+\n+    def test_jsonfield_with_none(self):\n+        # Test to ensure None is displayed correctly\n+        display_value = display_for_field(None, models.JSONField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n-        display_value = display_for_field(None, models.FloatField(), self.empty_value)\n-        self.assertEqual(display_value, self.empty_value)\n+    def test_jsonfield_with_empty_dict(self):\n+        # Test for an empty dictionary\n+        display_value = display_for_field({}, models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, '{}')\n+\n+    def test_jsonfield_with_empty_list(self):\n+        # Test for an empty list\n+        display_value = display_for_field([], models.JSONField(), self.empty_value)\n+        self.assertEqual(display_value, '[]')\n \n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..be2a924 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +7,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -18,7 +20,53 @@ def get_connection_copy():\n     return test_connection\n \n \n-class TestDbSignatureTests(SimpleTestCase):\n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+    \n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_foreign_key_ordering(self):\n+        # Test that foreign key constraints are respected during deserialization.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj\": 2}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj_ref\": 2, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        # This should not raise an IntegrityError due to missing referenced object.\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=2)\n+        obj_ref = ObjectReference.objects.get(pk=2)\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n     def test_default_name(self):\n         # A test db name isn't set.\n         prod_name = 'hodor'\n",
  "django__django-12497": "",
  "django__django-12700": "",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..6e5104e 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1751,6 +1751,33 @@ class OperationTests(OperationTestBase):\n         self.assertIndexNotExists(\"test_alinto_pony\", [\"pink\", \"weight\"])\n         # And deconstruction\n         definition = operation.deconstruct()\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_with_unique_together(self):\n+        app_label = 'test_alter_with_unq'\n+        table_name = '%s_pony' % app_label\n+        \n+        # Initial state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Attempt to remove index_together and ensure unique_together remains\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n         self.assertEqual(definition[0], \"AlterIndexTogether\")\n         self.assertEqual(definition[1], [])\n         self.assertEqual(definition[2], {'name': \"Pony\", 'index_together': {(\"pink\", \"weight\")}})\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..82ec1be 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,7 +685,31 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n-    def test_fast_delete_empty_no_update_can_self_select(self):\n+    def test_zero_deletions_with_foreign_keys(self):\n+        \"\"\"\n+        Test that when there are zero deletions, the result format is consistent\n+        for models with foreign keys. Both cases should return a dictionary with\n+        model-label keys and zero values.\n+        \"\"\"\n+        existed_objs = {\n+            'my_app.FileAccess': 0,  # Assume this is a model with foreign keys\n+        }\n+        deleted, deleted_objs = FileAccess.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'my_app.FileAccess': 0})\n+\n+    def test_zero_deletions_without_foreign_keys(self):\n+        \"\"\"\n+        Test that when there are zero deletions, the result format is consistent\n+        for models without foreign keys. Both cases should return a dictionary with\n+        model-label keys and zero values.\n+        \"\"\"\n+        existed_objs = {\n+            'my_app.BlockLibrary': 0,  # Assume this is a model without foreign keys\n+        }\n+        deleted, deleted_objs = BlockLibrary.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'my_app.BlockLibrary': 0})\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n         `no_update_can_self_select` feature should work even if the specified\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..1387597 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,49 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..7b5b8b0 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2830,6 +2830,70 @@ class LimitChoicesToTests(TestCase):\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n \n+class ForeignKeyLimitChoicesTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.threepwood = Character.objects.create(username='Guybrush Threepwood', last_action=timezone.now())\n+        cls.marley = Character.objects.create(username='Elaine Marley', last_action=timezone.now())\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+\n class FormFieldCallbackTests(SimpleTestCase):\n \n     def test_baseform_with_widgets_in_meta(self):\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..ba51756 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -2,6 +2,7 @@ from django.contrib.contenttypes.fields import (\n     GenericForeignKey, GenericRelation,\n )\n from django.contrib.contenttypes.models import ContentType\n+from django.db import models\n from django.core.checks import Error\n from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import models\n@@ -10,6 +11,35 @@ from django.test.utils import isolate_apps\n \n \n @isolate_apps('model_inheritance')\n+class AbstractFieldComparisonTests(SimpleTestCase):\n+    def test_abstract_inherited_fields_equality(self):\n+        \"\"\"Field instances from abstract models are not equal across models.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Test that fields from different models are not equal\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+        # Test ordering fields to ensure predictable sorting\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        # Ensure that they can be put into a set and not de-duplicated\n+        field_set = {inherit1_model_field, inherit2_model_field}\n+        self.assertEqual(len(field_set), 2)\n class AbstractInheritanceTests(SimpleTestCase):\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n@@ -347,4 +377,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..635439a 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,10 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n-from django.test.utils import ignore_warnings\n+from .models import CustomEmailField\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -36,8 +37,56 @@ class TokenGeneratorTest(TestCase):\n         tk1 = p0.make_token(user)\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n+    \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n+    def test_token_with_no_email_change(self):\n+        \"\"\"Ensuring token is still valid if the email is not changed.\"\"\"\n+        user = User.objects.create_user('nochangeuser', 'test5@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+        user.save()  # Save without changes\n+        self.assertIs(p0.check_token(user, tk1), True)\n \n-    def test_timeout(self):\n+    def test_token_with_email_change_to_none(self):\n+        \"\"\"Invalidating token when email is changed to None.\"\"\"\n+        user = User.objects.create_user('emailtononeuser', 'test6@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+        user.email = None\n+        user.save()\n+        self.assertIs(p0.check_token(user, tk1), False)\n+\n+    def test_token_with_email_set_to_same_value(self):\n+        \"\"\"Ensure token is still valid if email is set to the same value.\"\"\"\n+        user = User.objects.create_user('sameemailuser', 'test7@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+        user.email = 'test7@example.com'  # Setting the same email\n+        user.save()\n+        self.assertIs(p0.check_token(user, tk1), True)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..615dcdf 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -6,6 +7,7 @@ from copy import deepcopy\n from decimal import Decimal\n from unittest import mock\n \n+from collections import namedtuple\n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..ea8f005 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -28,6 +28,7 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from unittest import mock\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n@@ -38,7 +39,30 @@ SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n class AdminScriptTestCase(SimpleTestCase):\n-    def setUp(self):\n+    class ExecuteFromCommandLine(SimpleTestCase):\n+        def test_program_name_from_argv_with_main(self):\n+            \"\"\"\n+            Program name is computed from the execute_from_command_line()'s argv\n+            argument, not sys.argv, even when sys.argv[0] is '__main__.py'.\n+            \"\"\"\n+            args = ['help', 'shell']\n+            with captured_stdout() as out, captured_stderr() as err:\n+                with mock.patch('sys.argv', ['__main__.py'] + args):\n+                    execute_from_command_line(['django-admin'] + args)\n+            self.assertIn('usage: django-admin shell', out.getvalue())\n+            self.assertEqual(err.getvalue(), '')\n+\n+        def test_program_name_from_argv_empty_sys_argv(self):\n+            \"\"\"\n+            Program name is computed from the execute_from_command_line()'s argv\n+            argument, not sys.argv, even when sys.argv is empty.\n+            \"\"\"\n+            args = ['help', 'shell']\n+            with captured_stdout() as out, captured_stderr() as err:\n+                with mock.patch('sys.argv', []):\n+                    execute_from_command_line(['django-admin'] + args)\n+            self.assertIn('usage: django-admin shell', out.getvalue())\n+            self.assertEqual(err.getvalue(), '')\n         tmpdir = tempfile.TemporaryDirectory()\n         self.addCleanup(tmpdir.cleanup)\n         # os.path.realpath() is required for temporary directories on macOS,\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..53b71a2 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -29,15 +30,81 @@ class ShellCommandTestCase(SimpleTestCase):\n             stdin.seek(0)\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+    \n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n         select.return_value = ([], [], [])\n         with self.assertRaisesMessage(CommandError, \"Couldn't import ipython interface.\"):\n             call_command('shell', interface='ipython')\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+    \n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'bpython': None})\n     def test_shell_with_bpython_not_installed(self, select):\n         select.return_value = ([], [], [])\n@@ -49,4 +116,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..ca22559 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -962,8 +962,47 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n         response = self.client.get(self.change_url)\n         self.assertNotContains(response, 'id=\"id_question_set-0-text\"')\n \n-\n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n+class TestInlineVerboseNameLogic(TestCase):\n+    factory = RequestFactory()\n+\n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser(\n+            username='superuser', email='super@example.com', password='password'\n+        )\n+\n+    def test_inline_verbose_name_default_plural(self):\n+        class DefaultPluralProfileInline(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Child with verbose name'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [DefaultPluralProfileInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Check if the plural automatically adopts from verbose_name\n+        self.assertContains(response, '<h2>Child with verbose names</h2>')\n+        self.assertContains(response, 'Add another Child with verbose name')\n+\n+    def test_inline_no_verbose_name(self):\n+        class NoVerboseNameProfileInline(TabularInline):\n+            model = Profile\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [NoVerboseNameProfileInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Check if default verbose_name and verbose_name_plural from model's Meta are used\n+        self.assertContains(response, '<h2>Profiles</h2>')\n+        self.assertContains(response, 'Add another Profile')\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n \n@@ -1071,8 +1110,47 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n         self.assertNotContains(response, 'Add another Model with both - name')\n \n-\n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n+class TestInlineVerboseNameLogic(TestCase):\n+    factory = RequestFactory()\n+\n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser(\n+            username='superuser', email='super@example.com', password='password'\n+        )\n+\n+    def test_inline_verbose_name_default_plural(self):\n+        class DefaultPluralProfileInline(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Child with verbose name'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [DefaultPluralProfileInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Check if the plural automatically adopts from verbose_name\n+        self.assertContains(response, '<h2>Child with verbose names</h2>')\n+        self.assertContains(response, 'Add another Child with verbose name')\n+\n+    def test_inline_no_verbose_name(self):\n+        class NoVerboseNameProfileInline(TabularInline):\n+            model = Profile\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [NoVerboseNameProfileInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Check if default verbose_name and verbose_name_plural from model's Meta are used\n+        self.assertContains(response, '<h2>Profiles</h2>')\n+        self.assertContains(response, 'Add another Profile')\n class SeleniumTests(AdminSeleniumTestCase):\n \n     available_apps = ['admin_inlines'] + AdminSeleniumTestCase.available_apps\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..37440ce 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -596,6 +596,17 @@ class TestQuerying(TestCase):\n         )\n \n     def test_isnull_key_or_none(self):\n+        # Additional test to validate fix on SQLite and Oracle for JSON null.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # Should not match the object where key 'j' has value null\n+        )\n+\n+        # Inverse test to ensure objects with key 'j' having a value match correctly.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=False),\n+            [self.objs[4]],  # Only this object should have key 'j' with a non-null value\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..4b1947b 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -376,7 +376,67 @@ def mocked_is_overridden(self, setting):\n @isolate_apps('check_framework.apps.CheckDefaultPKConfig', attr_name='apps')\n @override_system_checks([checks.model_checks.check_all_models])\n class ModelDefaultAutoFieldTests(SimpleTestCase):\n-    def test_auto_created_pk(self):\n+    def test_explicit_inherited_pk(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_explicit_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_auto_created_inherited_pk(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            ),\n+        ])\n+\n+    def test_auto_created_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            ),\n+        ])\n         class Model(models.Model):\n             pass\n \n@@ -414,4 +474,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..d82fc12 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,31 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_invalid_value_provided(self):\n+        # Create choices for the model choice field tests below.\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+\n+        # Test with value placeholder in the error message for invalid choice\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        # Test an invalid choice and check if the value is included in the error message\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +330,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..a1d20ee 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -77,6 +77,12 @@ class ChildNullableParent(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class ToFieldChild(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, to_field='name', related_name='to_field_children')\n \n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..d94cb6e 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -16,6 +17,17 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n+    def test_combine_with_dict_keys(self):\n+        # Test & operator with dict_keys\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n+        # Test | operator with dict_keys\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..ecf3636 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,7 +28,7 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n-from django.utils.functional import SimpleLazyObject\n+from django.db.models import Exists, OuterRef, Q\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n@@ -43,6 +43,32 @@ class BasicExpressionsTests(TestCase):\n             name=\"Example Inc.\", num_employees=2300, num_chairs=5,\n             ceo=Employee.objects.create(firstname=\"Joe\", lastname=\"Smith\", salary=10)\n         )\n+        \n+    def test_q_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        # Test for AND operation commutativity\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+        )\n+\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() & Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) & Q()),\n+        )\n+\n+        # Test for OR operation commutativity\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n+        )\n+\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() | Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) | Q()),\n+        )\n         cls.foobar_ltd = Company.objects.create(\n             name=\"Foobar Ltd.\", num_employees=3, num_chairs=4, based_in_eu=True,\n             ceo=Employee.objects.create(firstname=\"Frank\", lastname=\"Meyer\", salary=20)\n@@ -792,6 +818,32 @@ class BasicExpressionsTests(TestCase):\n                 output_field=BooleanField(),\n             ),\n         )\n+        \n+    def test_q_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        # Test for AND operation commutativity\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+        )\n+\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() & Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) & Q()),\n+        )\n+\n+        # Test for OR operation commutativity\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n+        )\n+\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() | Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) | Q()),\n+        )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n     def test_boolean_expression_combined(self):\n@@ -803,6 +855,32 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_ceo) | Exists(is_poc)),\n             [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n         )\n+        \n+    def test_q_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        # Test for AND operation commutativity\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+        )\n+\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() & Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) & Q()),\n+        )\n+\n+        # Test for OR operation commutativity\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+            Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n+        )\n+\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() | Exists(is_ceo)),\n+            Employee.objects.filter(Exists(is_ceo) | Q()),\n+        )\n         self.assertCountEqual(\n             Employee.objects.filter(Exists(is_ceo) & Exists(is_poc)),\n             [self.max],\n",
  "django__django-14155": "",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..7b00019 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,25 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n+    from django.test import SimpleTestCase, override_settings, isolate_apps\n+    from django.db import models\n+    from example.core.models import MyBigAutoField, MySmallAutoField\n+\n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='example.core.models.MyBigAutoField')\n+    def test_default_auto_field_setting_custom_bigautofield(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+        \n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='example.core.models.MySmallAutoField')\n+    def test_default_auto_field_setting_custom_smallautofield(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +101,25 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n+    from django.test import SimpleTestCase, override_settings, isolate_apps\n+    from django.db import models\n+    from example.core.models import MyBigAutoField, MySmallAutoField\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='example.core.models.MyBigAutoField')\n+    def test_default_auto_field_setting_custom_bigautofield(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+        \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='example.core.models.MySmallAutoField')\n+    def test_default_auto_field_setting_custom_smallautofield(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..4ac6396 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2206,7 +2206,26 @@ class StartApp(AdminScriptTestCase):\n             \"another directory.\"\n         )\n \n-    def test_overlaying_app(self):\n+    def test_trailing_slash_in_target_app_directory_name_with_existing_directory(self):\n+        \"\"\"\n+        Test that 'startapp' does not raise an error when the target directory \n+        has a trailing slash and already exists.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app2')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app2', os.path.join('apps', 'app2', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_trailing_slash_in_target_app_directory_name_with_nonexistent_directory(self):\n+        \"\"\"\n+        Test that 'startapp' creates the directory when the target directory \n+        has a trailing slash but does not exist.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app3')\n+        _, err = self.run_django_admin(['startapp', 'app3', os.path.join('apps', 'app3', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n         # Use a subdirectory so it is outside the PYTHONPATH.\n         os.makedirs(os.path.join(self.test_dir, 'apps/app1'))\n         self.run_django_admin(['startapp', 'app1', 'apps/app1'])\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..a1012c9 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,6 +1,7 @@\n import datetime\n import re\n from unittest import mock\n+from django.forms import forms\n \n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm,\n@@ -1020,6 +1021,20 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_label_for_readonlypasswordhashwidget(self):\n+        \"\"\"\n+        Ensure ReadOnlyPasswordHashWidget's label does not contain a 'for' attribute\n+        as it doesn't have any labelable elements.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        # Check that id_for_label returns None, meaning no 'for' attribute should be present\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        # Check that the label_tag does not include a 'for' attribute\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..f69e1bc 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,6 +655,42 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_imports_in_migration_file(self):\n+        \"\"\"\n+        Tests that required imports are present in the generated migration file.\n+        \"\"\"\n+        from django.db import migrations\n+        import app.models  # assuming 'app' is the correct app label for this test\n+        \n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        writer = MigrationWriter(migrations.CreateModel(\n+            name='MyModel',\n+            fields=[\n+                ('name', MyField(primary_key=True)),\n+            ],\n+            options={\n+                'abstract': False,\n+            },\n+            bases=(MyMixin, models.Model),\n+        ))\n+\n+        migration_code = writer.as_string()\n+        \n+        # Check that 'from django.db import models' is present in the migration code\n+        self.assertIn('from django.db import models', migration_code)\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..7e4927c 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -355,7 +355,47 @@ class FormsFormsetTestCase(SimpleTestCase):\n             'choices-1-choice': 'One',\n             'choices-1-votes': '1',\n         }\n+        from django.forms import formset_factory\n+        from django.forms.utils import ErrorList\n+        from .forms import Choice, FavoriteDrinksFormSet\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n+\n+    def test_formset_non_form_error_class(self):\n+        \"\"\"\n+        Test that non_form_errors return errors with the nonform CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '1',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '2',\n+            'choices-MAX_NUM_FORMS': '1',\n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '0',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=2, validate_min=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 2 forms.</li></ul>'\n+        )\n+\n+    def test_formset_non_form_error_integration(self):\n+        \"\"\"\n+        Integration test ensuring the nonform CSS class appears in complex formsets.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',\n+            'drinks-INITIAL_FORMS': '0',\n+            'drinks-0-name': 'Martini',\n+            'drinks-1-name': 'Martini',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..3bcc469 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -9,6 +9,9 @@ from .models import (\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n     Relationship, SymmetricalFriendship,\n )\n+from django.db import models\n+from django.test import TestCase\n+from .models import Person, Group, Event, Invitation, PersonChild\n \n \n class M2mThroughTests(TestCase):\n@@ -31,7 +34,12 @@ class M2mThroughTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n-    def test_get_on_intermediate_model(self):\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n         queryset = Membership.objects.get(person=self.jane, group=self.rock)\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..9943d64 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -293,6 +293,29 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'pagination': {'more': False},\n         })\n \n+    def test_serialize_result(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n",
  "django__django-14787": "",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..350b8cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..6ed382c 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,7 +154,21 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n-    def test_form_as_table_data(self):\n+    def test_multivaluefield_id_for_label(self):\n+        class TestForm(Form):\n+            field = MultiValueField(fields=(CharField(), CharField()))\n+\n+        form = TestForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_field_0\">Field:</label></th>\n+            <td>\n+            <input type=\"text\" name=\"field_0\" id=\"id_field_0\" required>\n+            <input type=\"text\" name=\"field_1\" id=\"id_field_1\" required>\n+            </td></tr>\n+            \"\"\"\n+        )\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..b14e21c 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -91,6 +91,10 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://inv-.-alid.com',\n             '[a',\n             'http://[a',\n+            # URL split raises ValueError, should raise ValidationError instead\n+            '////]@N.AN',\n+            # Empty hostname\n+            '#@A.bO',\n             # Non-string.\n             23,\n             # Hangs \"forever\" before fixing a catastrophic backtracking,\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..f110238 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -197,7 +197,19 @@ class NonAggregateAnnotationTestCase(TestCase):\n         combined = int(test.pages + test.rating)\n         self.assertEqual(b.combined, combined)\n \n-    def test_empty_expression_annotation(self):\n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_expression_wrapper_negated_empty_q(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=Book.objects.none()), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n         books = Book.objects.annotate(\n             selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n         )\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..f0d2dc4 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -163,7 +164,19 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        A message's extra_tags attribute is correctly preserved when retrieved\n+        from the message storage, even when it is an empty string.\n+        \"\"\"\n+        storage = self.get_storage()\n+        # Test with empty string, None, and some tags\n+        for extra_tags in ['', None, 'some tags']:\n+            with self.subTest(extra_tags=extra_tags):\n+                message = Message(constants.DEBUG, 'message', extra_tags=extra_tags)\n+                encoded = storage._encode(message)\n+                decoded = storage._decode(encoded)\n+                self.assertEqual(decoded.extra_tags, extra_tags)\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..d7d8fb8 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,5 +1,7 @@\n from pathlib import Path\n from unittest import mock\n+from pathlib import Path\n+from django.conf import settings\n \n from django.template import autoreload\n from django.test import SimpleTestCase, override_settings\n@@ -59,6 +61,16 @@ class TemplateReloadTests(SimpleTestCase):\n             }\n         )\n \n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_server_restart_with_basedir_in_templates_dirs(self, mock_reset):\n+        # Add BASE_DIR to templates DIRS\n+        with override_settings(TEMPLATES=[{\n+            'DIRS': [settings.BASE_DIR],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]):\n+            self.assertTrue(autoreload.template_changed(None, Path(__file__)))\n+            mock_reset.assert_called_once()\n+\n     @mock.patch('django.template.loaders.base.Loader.reset')\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..4f35f15 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -9,6 +10,7 @@ from django.http import FileResponse, HttpResponseNotModified\n from django.test import SimpleTestCase, override_settings\n from django.utils.http import http_date\n from django.views.static import was_modified_since\n+from django.utils.http import parse_http_date\n \n from .. import urls\n from ..urls import media_dir\n@@ -184,7 +186,37 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty If-Modified-Since header does not raise an exception\n+        and returns True, indicating the resource was modified.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        Test that an invalid date in If-Modified-Since header raises no exception\n+        and returns True, indicating the resource was modified due to parsing failure.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"invalid-date\", mtime=1))\n+\n+    def test_was_modified_since_valid_date_unmodified(self):\n+        \"\"\"\n+        Test that a valid If-Modified-Since header with the same modification time\n+        returns False, indicating the resource was not modified.\n+        \"\"\"\n+        mtime = 1680000000\n+        header = http_date(mtime)\n+        self.assertFalse(was_modified_since(header=header, mtime=mtime))\n+\n+    def test_was_modified_since_valid_date_modified(self):\n+        \"\"\"\n+        Test that a valid If-Modified-Since header with an earlier modification time\n+        returns True, indicating the resource was modified.\n+        \"\"\"\n+        mtime = 1680000000\n+        header = http_date(mtime - 100)\n+        self.assertTrue(was_modified_since(header=header, mtime=mtime))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..b56763d 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -7,6 +8,7 @@ from admin_scripts.tests import AdminScriptTestCase\n from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management import BaseCommand, CommandError, find_commands\n from django.core.management.utils import (\n     find_command,\n@@ -411,7 +413,45 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_formatter_class(self):\n+        \"\"\"Test that the custom formatter class is used when provided.\"\"\"\n+        epilog = \"some epilog text\"\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"subcommand\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter,\n+        )\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+\n+    def test_help_output_format(self):\n+        \"\"\"Test that the help output maintains the correct format.\"\"\"\n+        class MockCommand(BaseCommand):\n+            help = '''\n+            Import a contract from tzkt.\n+            Example usage:\n+                ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+            '''\n+\n+        cmd = MockCommand()\n+        parser = cmd.create_parser(\"manage.py\", \"tzkt_import\")\n+        with mock.patch('sys.stdout', new_callable=StringIO) as mock_stdout:\n+            parser.print_help()\n+            help_output = mock_stdout.getvalue()\n+            expected_output = (\n+                \"usage: manage.py tzkt_import [-h] [--version] [-v {0,1,2,3}] [--settings SETTINGS]\\n\"\n+                \"                             [--pythonpath PYTHONPATH] [--traceback] [--no-color] [--force-color]\\n\"\n+                \"                             [--skip-checks]\\n\"\n+                \"                             blockchain target\\n\"\n+                \"Import a contract from tzkt\\n\"\n+                \"Example usage:\\n\"\n+                \"    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\"\n+                \"\\n\"\n+                \"positional arguments:\\n\"\n+                \"  blockchain           Name of the blockchain to import into\\n\"\n+                \"  target               Id of the contract to import\\n\"\n+            )\n+            self.assertIn(expected_output, help_output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..939bc44 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,8 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n+from django.core.serializers.json import DjangoJSONEncoder\n from django.utils.html import (\n     conditional_escape,\n     escape,\n@@ -217,7 +219,41 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_with_data(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"custom\": o[\"key\"]})\n+\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_with_element_id_and_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"custom\": o[\"key\"]})\n+\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}, \"custom_id\", encoder=CustomDjangoJSONEncoder),\n+            '<script id=\"custom_id\" type=\"application/json\">{\"custom\": \"value\"}</script>',\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..d18fe5c 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -153,6 +153,7 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 ),\n             ]\n         ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n             self.assertEqual(\n                 check_for_template_tags_with_the_same_name(None),\n                 [self.error_same_tags],\n@@ -170,6 +171,7 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 ),\n             ]\n         ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n             self.assertEqual(\n                 check_for_template_tags_with_the_same_name(None),\n                 [\n@@ -198,6 +200,7 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             ]\n         ):\n             self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n \n     @override_settings(\n         INSTALLED_APPS=[\n@@ -206,4 +209,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..7be1ed6 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -382,7 +382,27 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-        # Select related + filter on a related proxy of proxy field\n+from django.test import TestCase\n+from django.core.management import call_command\n+from .models import AnotherModel, ProxyCustomModel, CustomModel\n+from .models import Issue, ProxyTrackerUser\n+\n+class ProxyModelIssueTests(TestCase):\n+    \n+    def test_select_related_only_with_proxy(self):\n+        # Set up initial data\n+        custom_model_instance = CustomModel.objects.create(name=\"Proxy Test\")\n+        proxy_model_instance = ProxyCustomModel.objects.create(name=custom_model_instance.name)\n+        another_model_instance = AnotherModel.objects.create(custom=proxy_model_instance)\n+        \n+        # Test the select_related + only combination\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.first()\n+\n+        # Verify the result\n+        self.assertIsNotNone(result)\n+        self.assertEqual(result.pk, another_model_instance.pk)\n+        self.assertEqual(result.custom.name, \"Proxy Test\")\n         resp = ProxyImprovement.objects.select_related().get(\n             associated_bug__summary__icontains=\"fix\"\n         )\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..8b95f10 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_order(self):\n+        # Verifies that parameters come before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT * FROM test;\"]),\n+            ([\"psql\", \"-c\", \"SELECT * FROM test;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n@@ -183,4 +190,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..028d3bf 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,14 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_ignored_empty_form(self):\n+        # Test to ensure no KeyError occurs and the empty_permitted is ignored for empty_form\n+        ArticleFormSet = modelformset_factory(MyModel, fields=['a_field'])\n+        formset_with_true = ArticleFormSet(form_kwargs={\"empty_permitted\": True})\n+        formset_with_false = ArticleFormSet(form_kwargs={\"empty_permitted\": False})\n+        self.assertIs(formset_with_true.empty_form.empty_permitted, True)\n+        self.assertIs(formset_with_false.empty_form.empty_permitted, True)\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..f83e106 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,51 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_null_and_empty_string(self):\n+        # Test case for empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        \n+        # Test case for None\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+        # Test case for zero\n+        self.assertEqual(nformat(0, \".\"), \"0\")\n+        \n+        # Test case for negative zero\n+        self.assertEqual(nformat(-0, \".\"), \"0\")\n+\n+        # Test case for a number string\n+        self.assertEqual(nformat(\"1234\", \".\"), \"1234\")\n+\n+        # Test case for a negative number string\n+        self.assertEqual(nformat(\"-1234\", \".\"), \"-1234\")\n+\n+        # Test case for a float number string\n+        self.assertEqual(nformat(\"1234.56\", \".\"), \"1234.56\")\n+\n+        # Test case for a negative float number string\n+        self.assertEqual(nformat(\"-1234.56\", \".\"), \"-1234.56\")\n+\n+        # Test case for a number with leading zeros\n+        self.assertEqual(nformat(\"0001234\", \".\"), \"1234\")\n+\n+        # Test case for a negative number with leading zeros\n+        self.assertEqual(nformat(\"-0001234\", \".\"), \"-1234\")\n+\n+        # Test case for a number with trailing zeros\n+        self.assertEqual(nformat(\"1234000\", \".\"), \"1234000\")\n+        \n+        # Test case for a number that is None\n+        self.assertEqual(nformat(None, \".\", decimal_pos=2), \"None\")\n+\n+        # Test case for a large number\n+        self.assertEqual(nformat(123456789012345, \".\", grouping=3, thousand_sep=\",\"), \"123,456,789,012,345\")\n+\n+        # Test case for a negative large number\n+        self.assertEqual(nformat(-123456789012345, \".\", grouping=3, thousand_sep=\",\"), \"-123,456,789,012,345\")\n+        \n+        # Ensure None is handled gracefully, even when additional formatting is applied\n+        self.assertEqual(nformat(None, \".\", grouping=3, thousand_sep=\",\"), \"None\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..a9f7606 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -23,6 +24,8 @@ from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n+from django.urls import reverse\n+import urllib.parse\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n \n@@ -892,7 +895,45 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.create_user(username=\"test_user\", password=\"password\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_with_pk(self):\n+        user = User.objects.create_user(username=\"testclient\", password=\"password\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via pk\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..89af501 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -505,6 +505,21 @@ class HTTPSitemapTests(SitemapTestsBase):\n             \"</urlset>\"\n         )\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_sitemod_no_items(self):\n+        \"\"\"\n+        Test case for sitemaps with no items and callable lastmod.\n+        The sitemap index should not have a Last-Modified header and \n+        should generate the expected XML content.\n+        \"\"\"\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..394cccf 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,8 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock\n import io\n import os\n import pickle\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..f4ebc1e 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,9 +1,12 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n from django.contrib.auth.admin import UserAdmin\n+from .tests import get_perm\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n@@ -33,7 +36,42 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' requires add permission.\n+        \"\"\"\n+        # User with only change permission should not see 'Save as New'.\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with both add and change permissions should see 'Save as New'.\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..f8792fd 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -235,8 +235,33 @@ class OptimizerTests(SimpleTestCase):\n                 alter_bar,\n             ],\n         )\n+    def _test_alter_alter_field(self, alter_foo, alter_bar, expected):\n+        \"\"\"\n+        Two AlterField operations should collapse into the second.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                alter_foo,\n+                alter_bar,\n+            ],\n+            [\n+                expected,\n+            ],\n+        )\n \n-    def test_alter_alter_table_model(self):\n+    def test_alter_alter_field_same(self):\n+        self._test_alter_alter_field(\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True)),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+        )\n+\n+    def test_alter_alter_field_different(self):\n+        self._test_alter_alter_field(\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=256, null=True)),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"Book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+        )\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..885bc36 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -55,6 +56,13 @@ class JoinTests(SimpleTestCase):\n         )\n         self.assertEqual(output, \"alpha & beta &amp; me\")\n \n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        var_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        context = {\"a\": var_list, \"var\": \"<br/>\"}\n+        output = self.engine.render_to_string(\"join_autoescape_off\", context)\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n \n class FunctionTests(SimpleTestCase):\n     def test_list(self):\n@@ -78,4 +86,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..153a942 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -729,6 +729,35 @@ class BulkCreateTests(TestCase):\n         self._test_update_conflicts_unique_two_fields([])\n \n     def _test_update_conflicts(self, unique_fields):\n+        # Test to ensure that IDs are returned when update_conflicts is used.\n+        # Initial insertions.\n+        initial_objects = [\n+            UpsertConflict(number=1, rank=1, name=\"John\"),\n+            UpsertConflict(number=2, rank=2, name=\"Mary\"),\n+            UpsertConflict(number=3, rank=3, name=\"Hannah\"),\n+        ]\n+        UpsertConflict.objects.bulk_create(initial_objects)\n+        self.assertEqual(UpsertConflict.objects.count(), 3)\n+        # Verify that initial objects have IDs.\n+        for obj in initial_objects:\n+            self.assertIsNotNone(obj.pk, \"Initial object missing ID after bulk_create.\")\n+\n+        # Conflicting insertions for update.\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=4, name=\"Steve\"),\n+            UpsertConflict(number=2, rank=2, name=\"Olivia\"),\n+            UpsertConflict(number=3, rank=1, name=\"Hannah\"),\n+        ]\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=unique_fields,\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        # Verify that IDs are returned for updated objects.\n+        for result in results:\n+            self.assertIsNotNone(result.pk, \"Updated object missing ID after bulk_create.\")\n         UpsertConflict.objects.bulk_create(\n             [\n                 UpsertConflict(number=1, rank=1, name=\"John\"),\n@@ -816,4 +845,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..ee58512 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1077,8 +1077,28 @@ def test_slider_horizontal_vertical():\n     box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n     assert_allclose(box.bounds, [.25, 0, .5, 10/24])\n \n+import numpy as np\n+\n+def test_range_slider_initialization():\n+    fig, ax = plt.subplots()\n+\n+    # Test initializing with range [0.0, 0.0]\n+    slider = widgets.RangeSlider(ax=ax, label=\"\", valmin=0.0, valmax=1.0, valinit=[0.0, 0.0])\n+    assert_allclose(slider.val, (0.0, 0.0))\n+    box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n+    assert_allclose(box.get_points().flatten()[:2], [0.0, 0.25])\n+\n+    # Test initializing with range [0.5, 0.5]\n+    slider = widgets.RangeSlider(ax=ax, label=\"\", valmin=0.0, valmax=1.0, valinit=[0.5, 0.5])\n+    assert_allclose(slider.val, (0.5, 0.5))\n+    box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n+    assert_allclose(box.get_points().flatten()[:2], [0.5, 0.25])\n \n-def test_slider_reset():\n+    # Test initializing with range [0.1, 0.9]\n+    slider = widgets.RangeSlider(ax=ax, label=\"\", valmin=0.0, valmax=1.0, valinit=[0.1, 0.9])\n+    assert_allclose(slider.val, (0.1, 0.9))\n+    box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n+    assert_allclose(box.get_points().flatten()[:2], [0.1, 0.25])\n     fig, ax = plt.subplots()\n     slider = widgets.Slider(ax=ax, label='', valmin=0, valmax=1, valinit=.5)\n     slider.set_val(0.75)\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..2fb1a00 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,12 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import sys\n+import pytest\n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n@@ -508,7 +514,16 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+def test_get_backend_does_not_clear_gcf():\n+    # Test to ensure that get_backend() does not clear figures from Gcf.figs\n+    # when created under an rc_context.\n+    with rc_context():\n+        fig2 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, f'Figures were cleared:\\nBefore: {before}\\nAfter: {after}'\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..e65a609 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,7 +21,24 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_axes_3d(fig_test, fig_ref):\n+    # Create a 3D subplot in fig_test and make it invisible\n+    ax = fig_test.add_subplot(111, projection='3d')\n+    ax.scatter([1], [1], [1])\n+    ax.set_visible(False)\n+\n+    # Create a reference figure with no subplot\n+    fig_ref.add_subplot(111, frame_on=False)  # Just to ensure figure structure\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_visible_axes_3d(fig_test, fig_ref):\n+    # Create a 3D subplot in both fig_test and fig_ref and leave them visible\n+    ax1 = fig_test.add_subplot(111, projection='3d')\n+    ax1.scatter([1], [1], [1])\n+\n+    ax2 = fig_ref.add_subplot(111, projection='3d')\n+    ax2.scatter([1], [1], [1])\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..d617b05 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,22 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='shabnams')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() == draggable\n+\n+def test_legend_default_draggable():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='shabnams')\n+    leg = ax.legend()\n+    assert not leg.get_draggable()\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..9cb1278 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -246,7 +246,34 @@ def test_fonttype(fonttype):\n \n def test_linedash():\n     \"\"\"Test that dashed lines do not break PS output\"\"\"\n+import io\n+from matplotlib.figure import Figure\n+import matplotlib.pyplot as plt\n+\n+def test_empty_line():\n+    # Smoke-test for gh#23954\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+\n+def test_multiline_text_with_empty_line():\n+    # Additional test for multiline text with an empty line to ensure fix works\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='Line1\\n\\nLine3', xy=(0.5, 0.5))\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n+\n+def test_title_with_empty_line():\n+    # Test for title containing an empty line\n     fig, ax = plt.subplots()\n+    ax.set_title('Title Line1\\n\\nTitle Line3')\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n \n     ax.plot([0, 1], linestyle=\"--\")\n \n",
  "matplotlib__matplotlib-23987": "",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..b2bfbae 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -12,6 +13,7 @@ from matplotlib.testing.decorators import check_figures_equal\n from matplotlib.dates import rrulewrapper\n from matplotlib.lines import VertexSelector\n import matplotlib.pyplot as plt\n+import pickletools\n import matplotlib.transforms as mtransforms\n import matplotlib.figure as mfigure\n from mpl_toolkits.axes_grid1 import parasite_axes\n",
  "matplotlib__matplotlib-25332": "",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..e5e4007 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -446,7 +446,65 @@ def test_paddedbox():\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n \n+def test_mplcursor_interaction():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    x = np.arange(1, 11)\n+    y = x\n+\n+    fig, ax = plt.subplots()\n+    sc = ax.scatter(x, y)\n+\n+    cursor = mplcursors.cursor(sc)\n+\n+    # Simulate clicks on data points to see if the AttributeError occurs.\n+    # This is a conceptual simulation; in practice, check interaction manually or via a GUI testing tool.\n+    for i in range(len(x)):\n+        cursor._on_click(event=type('test', (object,), {'inaxes': ax, 'xdata': x[i], 'ydata': y[i]}))\n+\n+    plt.close(fig)\n+\n+# Original test case is preserved here\n+def test_remove_draggable():\n+    fig, ax = plt.subplots()\n+    an = ax.annotate(\"foo\", (.5, .5))\n+    an.draggable(True)\n+    an.remove()\n+    from matplotlib.backend_bases import MouseEvent\n+    MouseEvent(\"button_release_event\", fig.canvas, 1, 1)._process()\n+\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+def test_mplcursor_interaction():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    x = np.arange(1, 11)\n+    y = x\n+\n+    fig, ax = plt.subplots()\n+    sc = ax.scatter(x, y)\n+\n+    cursor = mplcursors.cursor(sc)\n+\n+    # Simulate clicks on data points to see if the AttributeError occurs.\n+    # This is a conceptual simulation; in practice, check interaction manually or via a GUI testing tool.\n+    for i in range(len(x)):\n+        cursor._on_click(event=type('test', (object,), {'inaxes': ax, 'xdata': x[i], 'ydata': y[i]}))\n+\n+    plt.close(fig)\n+\n+# Original test case is preserved here\n+def test_remove_draggable():\n+    fig, ax = plt.subplots()\n+    an = ax.annotate(\"foo\", (.5, .5))\n+    an.draggable(True)\n+    an.remove()\n+    from matplotlib.backend_bases import MouseEvent\n+    MouseEvent(\"button_release_event\", fig.canvas, 1, 1)._process()\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..9e7186a 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,8 +9,27 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+from pandas.testing import assert_frame_equal\n \n class TestPolyFit:\n+    \n+    def test_polyfit_with_missing_data(self):\n+        df = pd.DataFrame({\n+            \"x\": [1, 2, 3, None, 4],\n+            \"y\": [1, 2, 3, 4, 5],\n+            \"group\": [\"a\", \"a\", \"a\", \"a\", \"a\"]\n+        })\n+        \n+        groupby = GroupBy([\"group\"])\n+        \n+        # Attempt to run PolyFit with missing data\n+        try:\n+            result = PolyFit()(df[[\"x\", \"y\"]], groupby, \"x\", {})\n+            # Check if result is valid and has expected structure\n+            assert \"x\" in result.columns and \"y\" in result.columns\n+            print(\"PolyFit handled missing data without error.\")\n+        except Exception as e:\n+            assert False, f\"PolyFit failed with missing data: {e}\"\n \n     @pytest.fixture\n     def df(self, rng):\n",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..a39903b 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,7 +1,9 @@\n+\n import json\n import os\n import textwrap\n \n+import tomllib  # tomllib was added in Python 3.11\n import pytest\n \n import flask\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..798d0ea 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,30 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import requests\n+import pytest\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import ConnectionError, ReadTimeout\n+from urllib3.exceptions import DecodeError, ReadTimeoutError\n+\n+def test_urllib3_decode_error():\n+    s = requests.Session()\n+    # Assume 'httpbin' is a function that returns a test URL for httpbin\n+    s.mount('http://', HTTPAdapter(max_retries=False))\n+    \n+    # Insert a URL that could trigger a DecodeError\n+    with pytest.raises(DecodeError):\n+        s.get(httpbin('encoding/utf8'))\n+\n+def test_urllib3_timeout_error():\n+    s = requests.Session()\n+    # Assume 'httpbin' is a function that returns a test URL for httpbin\n+    s.mount('http://', HTTPAdapter(max_retries=False))\n+    \n+    with pytest.raises(ReadTimeout):\n+        # Timeout set low to trigger ReadTimeoutError\n+        s.get(httpbin('delay/3'), timeout=0.1)\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1663,4 +1687,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..3846940 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -973,6 +973,29 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n+    def test_iter_content_decode_unicode(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True to ensure it returns strings.\n+        \"\"\"\n+        r = requests.Response()\n+        r._content_consumed = True\n+        r._content = b'{\"key\": \"value\"}'\n+        r.encoding = 'utf-8'\n+\n+        # Simulate streaming content using iter_content with decode_unicode=True\n+        chunks = r.iter_content(chunk_size=16, decode_unicode=True)\n+        first_chunk = next(chunks)\n+        assert isinstance(first_chunk, str)\n+        assert first_chunk == '{\"key\": \"value\"}'\n+\n+        # Test with a different encoding\n+        r._content = b'\\xe2\\x98\\x83'  # Snowman character in UTF-8\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=True)\n+        first_chunk = next(chunks)\n+        assert isinstance(first_chunk, str)\n+        assert first_chunk == '\u2603'\n+\n         # also for streaming\n         r = requests.Response()\n         r.raw = io.BytesIO(b'the content')\n@@ -980,6 +1003,29 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n+    def test_iter_content_decode_unicode(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True to ensure it returns strings.\n+        \"\"\"\n+        r = requests.Response()\n+        r._content_consumed = True\n+        r._content = b'{\"key\": \"value\"}'\n+        r.encoding = 'utf-8'\n+\n+        # Simulate streaming content using iter_content with decode_unicode=True\n+        chunks = r.iter_content(chunk_size=16, decode_unicode=True)\n+        first_chunk = next(chunks)\n+        assert isinstance(first_chunk, str)\n+        assert first_chunk == '{\"key\": \"value\"}'\n+\n+        # Test with a different encoding\n+        r._content = b'\\xe2\\x98\\x83'  # Snowman character in UTF-8\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=True)\n+        first_chunk = next(chunks)\n+        assert isinstance(first_chunk, str)\n+        assert first_chunk == '\u2603'\n+\n     def test_response_chunk_size_int(self):\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..9722e79 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,8 +743,47 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    def test_hooks_with_multiple_functions(self):\n+        \"\"\"Test that multiple hook functions can be registered and executed correctly.\"\"\"\n \n-    def test_session_persistent_cookies(self):\n+        def modify_url(args):\n+            args['params'] = {'foo': 'bar'}\n+            return args\n+\n+        def modify_data(args):\n+            args['data'] = {'key': 'value'}\n+            return args\n+\n+        # Verify that multiple hooks can modify `params` and `data`.\n+        hooks = [modify_url, modify_data]\n+\n+        # Create a Request object with multiple hooks.\n+        r = requests.models.Request(hooks={'args': hooks})\n+\n+        # Simulate the triggering of hooks\n+        request_args = {'url': 'http://example.com'}\n+        for hook in r.hooks['args']:\n+            request_args = hook(request_args)\n+\n+        # Ensure hooks were called and modified the request_args correctly\n+        assert request_args['params'] == {'foo': 'bar'}\n+        assert request_args['data'] == {'key': 'value'}\n+\n+    def test_hooks_with_no_functions(self):\n+        \"\"\"Test that an empty list of hooks does not cause errors.\"\"\"\n+\n+        hooks = []\n+\n+        # Create a Request object with no hooks.\n+        r = requests.models.Request(hooks={'args': hooks})\n+\n+        # There should be no functions to call, so nothing should happen.\n+        request_args = {'url': 'http://example.com'}\n+        for hook in r.hooks['args']:\n+            request_args = hook(request_args)  # This loop should not alter request_args\n+\n+        # Ensure request_args remains unaltered\n+        assert request_args == {'url': 'http://example.com'}\n \n         s = requests.session()\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..126ad6a 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -106,6 +106,28 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_punctuation_only_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                # ???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n+    @set_config(notes=[\"!!!\", \"###\"])\n+    def test_various_punctuation_codetags(self) -> None:\n+        code = \"\"\"a = 1\n+                # !!!\n+                # ###\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"!!!\", col_offset=17),\n+            MessageTest(msg_id=\"fixme\", line=3, args=\"###\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_dont_trigger_on_todoist(self) -> None:\n         code = \"\"\"\n         # Todoist API: What is this task about?\n@@ -119,4 +141,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..60eabea 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -71,7 +71,11 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: unknown-option=yes\" in output.out\n \n \n-def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n+import pytest\n+from pylint.lint import Run\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+\n+def test_unknown_short_option_name_no_traceback(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n     with pytest.raises(_UnrecognizedOptionError):\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..4280eae 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,25 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_option(self) -> None:\n+        \"\"\"Tests that the --recursive=y option respects ignore-paths in pyproject.toml.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..09ca4e9 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,62 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_lint_identically_named_module_no_init(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for linting a directory containing a file with the same name, without __init__.py\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"same_name_dir/same_name_dir.py\", \"same_name_dir/another.py\"])\n+        linter.check([\"same_name_dir\"])\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_import_from_identically_named_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for linting a module that imports from a directory with an identically named module\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files(\n+            [\n+                \"same_name_dir/same_name_dir.py\",\n+                \"same_name_dir/another.py\",\n+                \"importer.py\",\n+            ]\n+        )\n+        with open(\"importer.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from same_name_dir import another\\n\")\n+        linter.check([\"importer\", \"same_name_dir\"])\n+    assert not linter.stats.by_msg\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_identically_named_module_no_init(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for linting a directory containing a file with the same name, without __init__.py\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"same_name_dir/same_name_dir.py\", \"same_name_dir/another.py\"])\n+        linter.check([\"same_name_dir\"])\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_import_from_identically_named_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for linting a module that imports from a directory with an identically named module\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files(\n+            [\n+                \"same_name_dir/same_name_dir.py\",\n+                \"same_name_dir/another.py\",\n+                \"importer.py\",\n+            ]\n+        )\n+        with open(\"importer.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from same_name_dir import another\\n\")\n+        linter.check([\"importer\", \"same_name_dir\"])\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..3d2d825 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -16,6 +17,7 @@ from typing import TYPE_CHECKING\n import pytest\n \n from pylint import checkers\n+from _pytest.recwarn import WarningsRecorder\n from pylint.interfaces import HIGH\n from pylint.lint import PyLinter\n from pylint.message.message import Message\n@@ -113,6 +115,22 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n+def test_custom_braces_in_template(linter: PyLinter) -> None:\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    \n+    linter.open()\n+    linter.set_current_module(\"test_module\")\n+    \n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"E0401\", line=2, args=(1, 2))\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n+\n+\n def test_deprecation_set_output(recwarn):\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..fdc3382 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -288,7 +288,33 @@ class TestImportPath:\n         fn.write_text(\"def foo(x): return 40 + x\", encoding=\"utf-8\")\n         return fn\n \n+    import sys\n+    import pytest\n+    from pathlib import Path\n+\n     def test_importmode_importlib(self, simple_module: Path, tmp_path: Path) -> None:\n+        \n+        # Additional test cases to verify the import behavior\n+        # This test will ensure that modules are not imported twice when using importlib mode\n+\n+        # Create a module and ensure it gets imported once\n+        fn_other = tmp_path / \"_src/tests/othermod.py\"\n+        fn_other.parent.mkdir(parents=True, exist_ok=True)\n+        fn_other.write_text(\"def bar(y): return 50 + y\", encoding=\"utf-8\")\n+\n+        module_other_1 = import_path(fn_other, mode=\"importlib\", root=tmp_path)\n+        module_other_2 = import_path(fn_other, mode=\"importlib\", root=tmp_path)\n+\n+        # Both import attempts should yield the same module object\n+        assert module_other_1 is module_other_2\n+        assert module_other_1.bar(5) == 55  # type: ignore[attr-defined]\n+        assert fn_other.parent not in sys.path\n+        assert module_other_1.__name__ in sys.modules\n+        assert module_other_1.__name__ == \"_src.tests.othermod\"\n+        assert \"_src.tests.othermod\" in sys.modules\n+\n+        # Clean up the module from sys.modules\n+        sys.modules.pop(module_other_1.__name__, None)\n         \"\"\"`importlib` mode does not change sys.path.\"\"\"\n         module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n         assert module.foo(2) == 42  # type: ignore[attr-defined]\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..2999f4a 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -5,7 +6,22 @@ import py.io\n from _pytest.logging import ColoredLevelFormatter\n \n \n-def test_coloredlogformatter():\n+def test_default_log_format():\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"testmodule\",\n+        level=logging.WARNING,\n+        pathname=\"testpath\",\n+        lineno=20,\n+        msg=\"Default log format test\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    formatter = logging.Formatter(logfmt)\n+    output = formatter.format(record)\n+    assert output == \"WARNING  testmodule:testpath:20 Default log format test\"\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n \n     record = logging.LogRecord(\n@@ -27,10 +43,10 @@ def test_coloredlogformatter():\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n     assert output == (\n-        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n     )\n \n     tw.hasmarkup = False\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n-    assert output == (\"dummypath                   10 INFO     Test Message\")\n+    assert output == (\"INFO     dummy:dummypath:10 Test Message\")\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..0e1b6fa 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -301,6 +301,29 @@ def callequal(left, right, verbose=False):\n \n \n class TestAssert_reprcompare:\n+    def test_bytes_assertion_message_simple(self):\n+        # Test case for empty byte string compared to a non-empty byte string\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+            \"?   ++\",\n+        ]\n+        \n+    def test_bytes_assertion_message_simple_single_byte(self):\n+        # Test case for empty byte string compared to a single-byte string\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+            \"?   +\",\n+        ]\n     def test_different_types(self):\n         assert callequal([0, 1], \"foo\") is None\n \n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..fbd29fe 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,3 +1,4 @@\n+\n import os\n from xml.dom import minidom\n \n@@ -157,7 +158,29 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+        \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+        \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..71bfafa 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -144,6 +144,38 @@ def test_repr_on_newstyle():\n     assert saferepr(Function())\n \n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ and __repr__ methods\n+    \"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Intentional error in __getattribute__\")\n+\n+        def __repr__(self):\n+            raise RuntimeError(\"Intentional error in __repr__\")\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError(\\\"Intentional error in __repr__\\\") raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+\n+def test_broken_getattribute_no_repr_message():\n+    \"\"\"Test saferepr behavior when no message is provided in exception\"\"\"\n+\n+    class NoMessageClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(NoMessageClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] NoMessageClass object at 0x\"\n+    )\n+\n+\n def test_unicode():\n     val = \"\u00a3\u20ac\"\n     reprval = \"'\u00a3\u20ac'\"\n@@ -153,4 +185,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..b3ae4b9 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,6 @@\n import os\n import sys\n+import os\n from unittest import mock\n \n import pytest\n",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..bb13d96 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -397,7 +398,30 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n-    def test_dynamic_xfail_no_run(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Test case for dynamic xfail during runtest, expecting a failure.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Test case for dynamic xfail during runtest with a strict marker.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..09ae5a0 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -21,6 +22,17 @@ from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n from _pytest.tmpdir import get_user\n from _pytest.tmpdir import TempdirFactory\n+from _pytest.monkeypatch import MonkeyPatch\n+\n+def test_tmp_path_factory_handles_invalid_dir_characters(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n+    # _basetemp / _given_basetemp are cached / set in parallel runs, patch them\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n from _pytest.tmpdir import TempPathFactory\n \n \n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..4e6d659 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,29 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifiercv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n \n-def test_ridgecv_sample_weight():\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+    \n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    y = rng.choice([1, -1], size=n_samples)\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # with len(y.shape) == 2 (multi-output case)\n+    y = rng.choice([1, -1], size=(n_samples, 3))\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..5bbd0a9 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -5,7 +5,7 @@\n import numpy as np\n from scipy.special import gammaln\n \n-from sklearn.utils.testing import assert_raise_message\n+from sklearn.utils.testing import assert_raise_message, assert_array_equal\n from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..9635540 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,6 +260,12 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n+from sklearn.preprocessing import OneHotEncoder\n+import pytest\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+from scipy import sparse\n+\n def test_one_hot_encoder_no_categorical_features():\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n@@ -272,8 +278,23 @@ def test_one_hot_encoder_no_categorical_features():\n     assert_array_equal(enc.get_feature_names(), expected_features)\n     assert enc.categories_ == []\n \n-\n-@pytest.mark.parametrize(\"output_dtype\", [np.int32, np.float32, np.float64])\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X_train = np.array(['22', '333', '4444', '11111111']).reshape((-1, 1))\n+    X_test = np.array(['55555', '22']).reshape((-1, 1))\n+\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(X_train)\n+    X_test_copy = X_test.copy()\n+    assert_array_equal(\n+        ohe.transform(X_test_copy).toarray(),\n+        np.array([[0., 0., 0., 0.], [0., 1., 0., 0.]])\n+    )\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X_test, X_test_copy)\n @pytest.mark.parametrize(\"input_dtype\", [np.int32, np.float32, np.float64])\n def test_one_hot_encoder_dtype(input_dtype, output_dtype):\n     X = np.asarray([[0, 1]], dtype=input_dtype).T\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..6206adb 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,19 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    import numpy as np\n+    from sklearn.mixture import GaussianMixture\n+    from sklearn.utils.testing import assert_array_equal\n+\n+    random_state = np.random.RandomState(0)\n+    X = random_state.randn(1000, 5)\n+\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..c6c1ba8 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -13,6 +14,7 @@ from sklearn.pipeline import Pipeline\n from sklearn.model_selection import GridSearchCV\n from sklearn.metrics.pairwise import rbf_kernel\n \n+from sklearn.utils.testing import assert_allclose\n \n def test_kernel_pca():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..ef6a6c6 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1070,4 +1070,33 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n+\n+def test_pipeline_len():\n+    from sklearn.datasets import make_classification\n+    from sklearn.svm import SVC\n+    from sklearn.feature_selection import SelectKBest, f_regression\n+    from sklearn.pipeline import Pipeline\n+\n+    # Generate some data to play with\n+    X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+    # Test __len__ method\n+    assert len(pipe) == 2\n+\n+    # Test slicing with len\n+    sub_pipeline = pipe[:len(pipe)]\n+    assert isinstance(sub_pipeline, Pipeline)\n+    assert len(sub_pipeline) == 2\n+\n+    # Test edge cases\n+    empty_pipe = Pipeline([])\n+    assert len(empty_pipe) == 0\n+\n+    # Test with single step\n+    single_step_pipe = Pipeline([('anova', anova_filter)])\n+    assert len(single_step_pipe) == 1\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..e3d1b0a 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n@@ -294,9 +297,50 @@ def test_score_samples():\n     assert_array_equal(clf1.score_samples([[2., 2.]]),\n                        clf2.score_samples([[2., 2.]]))\n \n-\n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start_behavior():\n+    \"\"\"Test Isolation Forest with and without warm start.\"\"\"\n+    \n+    rng = check_random_state(0)\n+    X = rng.randn(20, 2)\n+\n+    # Fit without warm start\n+    clf_no_warm = IsolationForest(n_estimators=10, max_samples=20,\n+                                  random_state=rng, warm_start=False)\n+    clf_no_warm.fit(X)\n+    trees_no_warm = clf_no_warm.estimators_\n+\n+    # Fit with warm start\n+    clf_warm = IsolationForest(n_estimators=10, max_samples=20,\n+                               random_state=rng, warm_start=True)\n+    clf_warm.fit(X)\n+    trees_warm_initial = clf_warm.estimators_\n+\n+    # Check that they initially have the same number of trees\n+    assert len(trees_no_warm) == len(trees_warm_initial)\n+    \n+    # Increment the number of estimators with warm start\n+    clf_warm.set_params(n_estimators=20)\n+    clf_warm.fit(X)\n+    trees_warm_incremented = clf_warm.estimators_\n+\n+    # Ensure that no trees from initial fit are overwritten\n+    assert len(trees_warm_incremented) == 20\n+    assert all(tree in trees_warm_incremented for tree in trees_warm_initial)\n+\n+    # Check reproducibility with same random state\n+    clf_warm_new = IsolationForest(n_estimators=20, max_samples=20,\n+                                   random_state=rng, warm_start=False)\n+    clf_warm_new.fit(X)\n+    trees_warm_new = clf_warm_new.estimators_\n+\n+    # Ensure the newly fit model matches the warm started model\n+    assert len(trees_warm_new) == len(trees_warm_incremented)\n+    for tree_old, tree_new in zip(trees_warm_incremented, trees_warm_new):\n+        assert_array_equal(tree_old.tree_.feature, tree_new.tree_.feature)\n+        assert_array_equal(tree_old.tree_.threshold, tree_new.tree_.threshold)\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n     X = [[0.0], [1.0]]\n     clf = IsolationForest()\n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..141ad01 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+import sklearn\n+from sklearn.linear_model import LogisticRegressionCV\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,6 +217,29 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_array_param():\n+    \"\"\"Test repr for LogisticRegressionCV with array parameters under print_changed_only=True.\"\"\"\n+    sklearn.set_config(print_changed_only=True)\n+    # make sure array parameters don't throw error (see issue #13583)\n+    repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    \n+    # Verify repr output consistency\n+    expected_repr = \"LogisticRegressionCV(Cs=array([0.1, 1. ]))\"\n+    actual_repr = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    assert expected_repr == actual_repr, f\"Expected repr: {expected_repr}, but got: {actual_repr}\"\n+    \n+    sklearn.set_config(print_changed_only=False)\n+\n+def test_logistic_regression_cv_single_param():\n+    \"\"\"Test repr for LogisticRegressionCV with single scalar parameter under print_changed_only=True.\"\"\"\n+    sklearn.set_config(print_changed_only=True)\n+    # Test with a single value for Cs\n+    expected_repr = \"LogisticRegressionCV(Cs=array([0.5]))\"\n+    actual_repr = repr(LogisticRegressionCV(Cs=np.array([0.5])))\n+    assert expected_repr == actual_repr, f\"Expected repr: {expected_repr}, but got: {actual_repr}\"\n+    \n+    sklearn.set_config(print_changed_only=False)\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..7a8d68f 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,9 +1,12 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_almost_equal, assert_array_equal\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n@@ -503,6 +506,29 @@ def test_transform():\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n                               eclf2.transform(X))\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter, voter_type\",\n+    [\n+        (datasets.load_iris(return_X_y=True), VotingClassifier(\n+            [('lr', LogisticRegression()), ('rf', RandomForestClassifier(n_estimators=5))]), 'classifier'),\n+        (datasets.make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=42), VotingRegressor(\n+            [('lr', LinearRegression()), ('rf', RandomForestRegressor(n_estimators=5))]), 'regressor')\n+    ]\n+)\n+def test_none_estimator_with_weights(X_y, voter, voter_type):\n+    X, y = X_y\n+    # Ensuring that the estimator can be set to None and passing weights works\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    \n+    if voter_type == 'classifier':\n+        y_pred = voter.predict(X)\n+        assert y_pred.shape == y.shape\n+    else:\n+        y_pred = voter.predict(X)\n+        assert y_pred.shape == y.shape[0]\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..7b5b5d2 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,26 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n-\n-def test_transformation_dimensions():\n+import pytest\n+import numpy as np\n+from sklearn.utils._testing import assert_raises\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+\n+@pytest.mark.parametrize('param, value', [\n+    ('tol', 1),  # int instead of float\n+    ('n_components', np.int64(5)),  # np.int64 instead of int\n+    ('tol', np.float32(1e-3)),  # np.float32 instead of float\n+])\n+def test_nca_grid_search_param_types(param, value):\n+    X = np.random.random_sample((10, 5))\n+    y = np.random.randint(2, size=10)\n+    nca = NeighborhoodComponentsAnalysis(**{param: value})\n+    try:\n+        nca.fit(X, y)\n+        valid = True\n+    except (TypeError, ValueError):\n+        valid = False\n+    assert valid, f\"NCA failed to fit with {param}={value} of type {type(value)}\"\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..24d6abb 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,41 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+    \n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_no_error_with_empty_support_vectors():\n+    # Test to ensure no error with empty support vectors\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+    \n+    X_train = sparse.csr_matrix([[0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0]])\n+    y_train = np.array([0, 0, 0, 0])\n+    model = svm.SVR(kernel='linear')\n+    try:\n+        model.fit(X_train, y_train)\n+        print(\"No error raised\")\n+    except ZeroDivisionError:\n+        assert False, \"ZeroDivisionError was raised\"\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..ab95691 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,25 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr_default(RepeatedCV):\n+    # Test default __repr__ output\n+    repeated_cv = RepeatedCV()\n+    expected_repr = ('{}(n_repeats=10, n_splits=5, random_state=None)'\n+                     .format(repeated_cv.__class__.__name__))\n+    assert repr(repeated_cv) == expected_repr\n+\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr_custom(RepeatedCV):\n+    # Test __repr__ output with custom parameters\n+    n_splits, n_repeats, random_state = 3, 7, 42\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)\n+    expected_repr = ('{}(n_repeats=7, n_splits=3, random_state=42)'\n+                     .format(repeated_cv.__class__.__name__))\n+    assert repr(repeated_cv) == expected_repr\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..8da3ad3 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2121,6 +2121,38 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n \n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False, False, False]), [False, False, False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_column_transformer_no_features_with_pandas_output(empty_selection):\n+    \"\"\"Check that pandas output works when there is an empty selection.\n+\n+    Non-regression test for issues related to empty feature handling.\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame([[1.0, 2.0, 3.0, 4.0], [4.0, 2.0, 2.0, 5.0]], columns=[\"a\", \"b\", \"c\", \"d\"])\n+    y = np.array([0, 1])\n+\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", Pipeline([(\"scaler\", RobustScaler()), (\"imputer\", SimpleImputer(strategy=\"median\"))]), [\"a\", \"b\", \"c\"]),\n+        ],\n+        remainder='drop',\n+        verbose_feature_names_out=True,\n+    )\n+\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\", \"numerical__c\"])\n+\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\", \"c\"])\n+\n     # The feature names are prefixed because verbose_feature_names_out=True is default\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n@@ -2128,4 +2160,4 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..5f1f6fc 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -112,6 +112,23 @@ def test_automodule_special_members(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple_classes(app):\n+    # This test case checks the inherited-members option for multiple base classes\n+    options = {\n+        'members': None,\n+        'inherited-members': 'Base, list, tuple'  # Specify multiple classes\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    \n+    assert '.. py:class:: Base()' in actual\n+    assert '.. py:class:: Derived()' in actual\n+    assert '.. py:class:: MyList' in actual  # Ensure MyList is documented\n+    assert 'Base.inheritedclassmeth' in actual  # Method from Base should be included\n+    assert 'MyList.meth' in actual  # Method from MyList should be included\n+    # Ensure methods from list and tuple are excluded\n+    assert 'list.append' not in actual\n+    assert 'tuple.count' not in actual\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n@@ -125,4 +142,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "diff --git a/tests/test_environment_indexentries.py b/tests/test_environment_indexentries.py\nindex 9775484..51dd0de 100644\n--- a/tests/test_environment_indexentries.py\n+++ b/tests/test_environment_indexentries.py\n@@ -15,6 +15,29 @@ from sphinx.testing import restructuredtext\n \n \n @pytest.mark.sphinx('dummy', freshenv=True)\n+def test_index_symbols(app):\n+    text = (\".. index:: @mention\\n\"\n+            \".. index:: \u00a3currency\\n\"\n+            \".. index:: \u2190arrow\\n\"\n+            \".. index:: Aword\\n\"\n+            \".. index:: Zword\\n\")\n+    restructuredtext.parse(app, text)\n+    index = IndexEntries(app.env).create_index(app.builder)\n+    \n+    # Check that there's only one 'Symbols' section\n+    symbols_section_count = sum(1 for section in index if section[0] == 'Symbols')\n+    assert symbols_section_count == 1, f\"Expected 1 'Symbols' section, but found {symbols_section_count}\"\n+    \n+    # Ensure the entries are correctly grouped under 'Symbols'\n+    symbols_entries = next((section[1] for section in index if section[0] == 'Symbols'), [])\n+    assert ('@mention', [[('', '#index-0')], [], None]) in symbols_entries\n+    assert ('\u00a3currency', [[('', '#index-1')], [], None]) in symbols_entries\n+    assert ('\u2190arrow', [[('', '#index-2')], [], None]) in symbols_entries\n+\n+    # Ensure no incorrect 'Symbols' section is created after letters\n+    letters = [section[0] for section in index]\n+    assert 'Symbols' not in letters[letters.index('A'):]  # 'Symbols' should not appear after 'A'\n+\n def test_create_single_index(app):\n     text = (\".. index:: docutils\\n\"\n             \".. index:: Python\\n\"\n",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..279f511 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,9 +1,24 @@\n+\n from __future__ import annotations\n \n from typing import overload\n \n myint = int\n \n+# Added for new test case\n+class String:\n+    \"\"\"A string type alias for testing\"\"\"\n+    pass\n+\n+#: A variable with a type alias\n+var: String\n+\n+class MyString:\n+    \"\"\"A class with a type alias attribute\"\"\"\n+\n+    #: An attribute with a type alias\n+    var: String\n+\n \n def sum(x: myint, y: myint) -> myint:\n     \"\"\"docstring\"\"\"\n@@ -22,4 +37,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..a999f50 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,45 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+from sphinx.domains.std import StandardDomain\n+from sphinx.util.docutils import new_document\n+from sphinx.testing import restructuredtext\n+from docutils import nodes\n+\n+...\n+\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '-j'],\n+                                                                      [addnodes.desc_addname, '[=N]'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '[enable'],\n+                                                                      [addnodes.desc_addname, '=]PATTERN'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+def test_cmd_option_with_complex_brackets(app):\n+    text = \".. option:: [foo=bar]BAZ\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '[foo=bar]'],\n+                                                                      [addnodes.desc_addname, 'BAZ'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[foo=bar]', '[foo=bar]', 'cmdoption', 'index', 'cmdoption-arg-foo-bar', 1) in objects\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..8ddad6f 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -44,6 +46,7 @@ def test_restify():\n     assert restify(None) == \":obj:`None`\"\n     assert restify(Integral) == \":class:`numbers.Integral`\"\n     assert restify(Any) == \":obj:`Any`\"\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n \n \n def test_restify_type_hints_containers():\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..dee6960 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1457,8 +1457,30 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n+    \n+    def test_other_parameters_section(self):\n+        # Test when napoleon_use_param is False\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n \n-    def test_multiple_parameters(self):\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test when napoleon_use_param is True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..01ffa9a 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -321,8 +321,30 @@ def test_mul():\n         h2 = _af_rmuln(*a[:i + 1])\n         assert h == h2\n \n+def test_non_disjoint_cycles():\n+    # Test with identical cycles - should result in identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n \n-def test_args():\n+    # Test with overlapping cycles - should apply cycles in left-to-right order\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([1, 2, 0])\n+\n+    # Test with more complex overlapping cycles\n+    assert Permutation([[0, 1, 3], [1, 2, 3]]) == Permutation([1, 3, 0, 2])\n+\n+    # Test with no overlaps, should work independently\n+    assert Permutation([[0, 1], [2, 3]]) == Permutation([1, 0, 3, 2])\n+\n+    # Test with one cycle being a subset of another\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([1, 2, 0])\n+\n+    # Test with identical cycles multiple times\n+    assert Permutation([[0, 1], [0, 1], [0, 1]]) == Permutation([0, 1])\n+\n+    # Test with one cycle being a singleton\n+    assert Permutation([[0], [1, 2]]) == Permutation([0, 2, 1])\n+\n+    # Test when cycles are empty\n+    assert Permutation([[]]) == Permutation([])\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n     assert Permutation(p) == p\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..5f6ebfe 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,4 +1,5 @@\n-from sympy import Abs, S, Symbol, I, Rational, PurePoly\n+\n+from sympy import Abs, S, Symbol, I, Rational, PurePoly, Matrix\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n \n@@ -26,7 +27,28 @@ def test_sparse_matrix():\n     assert type(a.row_join(b)) == type(a)\n     assert type(a.col_join(b)) == type(a)\n \n-    # test element assignment\n+    # Test horizontal stacking of zero-row matrices\n+    # Corresponds to the issue described: Behavior of Matrix hstack and vstack changed in sympy 1.1\n+    def test_sparse_matrix_hstack_zero_row():\n+        M1 = Matrix.zeros(0, 0)\n+        M2 = Matrix.zeros(0, 1)\n+        M3 = Matrix.zeros(0, 2)\n+        M4 = Matrix.zeros(0, 3)\n+        result = Matrix.hstack(M1, M2, M3, M4)\n+        assert result.shape == (0, 6), f\"Expected shape (0, 6), got {result.shape}\"\n+    \n+    test_sparse_matrix_hstack_zero_row()\n+\n+    # Test vertical stacking of zero-column matrices\n+    def test_sparse_matrix_vstack_zero_column():\n+        M1 = Matrix.zeros(1, 0)\n+        M2 = Matrix.zeros(1, 1)\n+        M3 = Matrix.zeros(1, 2)\n+        M4 = Matrix.zeros(1, 3)\n+        result = Matrix.vstack(M1, M2, M3, M4)\n+        assert result.shape == (4, 3), f\"Expected shape (4, 3), got {result.shape}\"\n+    \n+    test_sparse_matrix_vstack_zero_column()\n     a = SparseMatrix((\n         (1, 0),\n         (0, 1)\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..4e3929b 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -100,6 +100,22 @@ def test_core_symbol():\n         check(c)\n \n \n+def test_pickle_float_expression_p2_to_p3():\n+    import sys\n+    import pickle\n+    from sympy import symbols, Float\n+\n+    # Simulate Python 2 pickling of an expression with a float\n+    x = symbols(\"x\")\n+    expr = x + 1.0\n+    pickled_data_python2 = pickle.dumps(expr, protocol=2)\n+\n+    # Simulate loading that data in Python 3\n+    loaded_expr_python3 = pickle.loads(pickled_data_python2)\n+    expected_expr = x + Float(1.0)\n+\n+    assert loaded_expr_python3 == expected_expr\n+\n def test_core_numbers():\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n         check(c)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..4f01676 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -278,8 +278,24 @@ def test_coth_series():\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n-\n-def test_csch():\n+def test_coth_log_tan_issue():\n+    from sympy import Symbol, coth, log, tan, I, pi\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # These are the problematic substitutions mentioned in the issue.\n+    # They should not raise an error after the fix.\n+    assert e.subs(x, 2).is_finite\n+    assert e.subs(x, 3).is_finite\n+    assert e.subs(x, 5).is_finite\n+    assert e.subs(x, 6).is_finite\n+    assert e.subs(x, 8).is_finite\n+    assert e.subs(x, 9).is_finite\n+    assert e.subs(x, 11).is_finite\n+    assert e.subs(x, 12).is_finite\n+    assert e.subs(x, 13).is_finite\n+    assert e.subs(x, 15).is_finite\n+    assert e.subs(x, 18).is_finite\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..556477e 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -187,6 +187,21 @@ def test_col_join():\n                    [0, 0, 1],\n                    [7, 7, 7]])\n \n+def test_issue_13643():\n+    # This test corresponds to the reported issue with Matrix.col_insert()\n+    from sympy import Matrix, eye, ones\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    expected_result = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected_result\n+\n def test_row_insert():\n     r4 = Matrix([[4, 4, 4]])\n     for i in range(-4, 5):\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..c4919a4 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -616,7 +616,37 @@ def test_latex_Range():\n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n \n+from sympy import symbols, oo\n+from sympy.series.sequences import SeqFormula, SeqPer, SeqAdd, SeqMul\n+\n def test_latex_sequences():\n+    n = symbols('n')\n+    # Test for sequence with infinite range\n+    seq = SeqFormula(n**2, (n, 0, oo))\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(seq) == latex_str\n+\n+    # Test for sequence with finite range\n+    seq = SeqFormula(n**2, (n, 0, 2))\n+    latex_str = r'[0, 1, 4]'\n+    assert latex(seq) == latex_str\n+\n+    # Test for periodic sequence\n+    seq = SeqPer((1, 2), (0, 4))\n+    latex_str = r'[1, 2, 1, 2]'\n+    assert latex(seq) == latex_str\n+\n+    # Test concatenation of sequences\n+    seq1 = SeqFormula(n, (n, 0, oo))\n+    seq2 = SeqPer((1, 2))\n+    combined_seq = SeqAdd(seq1, seq2)\n+    latex_str = r'[1, 3, 5, 9, \\ldots]'\n+    assert latex(combined_seq) == latex_str\n+\n+    # Test multiplication of sequences\n+    combined_seq = SeqMul(seq1, seq2)\n+    latex_str = r'[0, 2, 4, 8, \\ldots]'\n+    assert latex(combined_seq) == latex_str\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..432ef15 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -195,6 +196,16 @@ def test_Domain_preprocess():\n     assert Domain.preprocess('QQ(x)') == QQ.frac_field(x)\n \n     assert Domain.preprocess('Z(x,y)') == ZZ.frac_field(x, y)\n+\n+    # Test cases for the original issue:\n+    assert Domain.preprocess('RR[y,z]') == RR[y, z]\n+    assert Domain.preprocess('CC[y,z]') == CC[y, z]\n+\n+    # Additional test to ensure Poly does not raise OptionError\n+    p = Poly(1.2*x*y*z, x, domain='RR[y,z]')\n+    assert p.as_expr() == 1.2*y*z*x\n+    assert p.gens == (x,)\n+    assert str(p.get_domain()) == 'RR[y,z]'\n     assert Domain.preprocess('Q(x,y)') == QQ.frac_field(x, y)\n \n     assert Domain.preprocess('ZZ(x,y)') == ZZ.frac_field(x, y)\n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..4151929 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,10 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty, symbols\n+\n+n, a = symbols('n a')\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n@@ -6122,7 +6126,24 @@ def test_MatrixSymbol_printing():\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n \n-def test_degree_printing():\n+def test_matadd_pretty_printing():\n+    # Test cases for issue #14814\n+    n = symbols('n')\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    a = symbols('a')\n+\n+    # Original test cases\n+    assert pretty(x + y) == \"x + y*\"\n+    assert pretty(-a*x + -2*y*y) == \"-a*x -2*y**y*\"\n+    \n+    # Additional test cases\n+    z = MatrixSymbol('z', n, n)\n+    assert pretty(x + y + z) == \"x + y* + z\"\n+    assert pretty(-x + y) == \"-x + y*\"\n+    assert pretty(x - y) == \"x - y*\"\n+    assert pretty(-x - y) == \"-x - y*\"\n+    assert pretty(x + (-y)) == \"x - y*\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..092dde6 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,7 +728,17 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n-def test_python_keywords():\n+def test_curly_matrix_symbol():\n+    import sympy as sy\n+    from sympy.utilities.lambdify import lambdify\n+    # Issue #15009\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+    # Check if lambdify works without dummify\n+    lam = lambdify(curlyv, curlyv)\n+    assert (lam([[1], [2]]) == [[1], [2]]).all()\n+    # Check if lambdify works with dummify=True\n+    lam_dummified = lambdify(curlyv, curlyv, dummify=True)\n+    assert (lam_dummified([[1], [2]]) == [[1], [2]]).all()\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..280e6f5 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,23 @@\n+\n+def test_Max_Min():\n+    # Original test patch\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n+    # New test cases for Max function\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x + 1, y, 3)) == \"Max[x + 1, y, 3]\"\n+    assert mcode(Max(x, y, y, z)) == \"Max[x, y, y, z]\"\n+\n+    # Additional test cases for nested Max and Min\n+    assert mcode(Max(Min(x, y), 2)) == \"Max[Min[x, y], 2]\"\n+    assert mcode(Min(Max(x, 2), y)) == \"Min[Max[x, 2], y]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..0b17b8a 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n@@ -1739,6 +1741,15 @@ def test_MatrixElement_printing():\n     assert latex(F) == r\"\\left(A - B\\right)_{0, 0}\"\n \n \n+\n+def test_indexed_matrix_expression_latex():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # The original issue with the incorrect LaTeX representation\n+    expected_latex = r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+    assert latex((M*N)[i, j]) == expected_latex\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..d89f65a 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Symbol, sqrt, Derivative, S\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n@@ -20,6 +21,24 @@ def test_idiff():\n     assert True in [sol.diff(x, 3).equals(explicit) for sol in solve(circ, y)]\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n+    # Additional test cases for the issue with idiff\n+    f = Function('f')\n+    g = Function('g')\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    \n+    # Test case for f(x) scenario\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x)) / (f(x) + 1)\n+    \n+    # Test cases for Eq scenario\n+    eq_expr = Eq(y * exp(y), x * exp(x))\n+    assert idiff(eq_expr, y, x) == (x + 1) * exp(x - y) / (y + 1)\n+    \n+    # Additional variations \n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n \n def test_intersection():\n     assert intersection(Point(0, 0)) == []\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..b0a300d 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,7 +582,39 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n-def test_empty_f_code():\n+from sympy.utilities.codegen import codegen\n+from sympy import MatrixSymbol\n+import numpy as np\n+\n+def test_ccode_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+def test_autowrap_unused_array_arg_with_cython():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..24a93c5 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -339,6 +339,14 @@ def test_intersection():\n \n     assert Intersection(S.Complexes, FiniteSet(S.ComplexInfinity)) == S.EmptySet\n \n+    # Test for intersection removing duplicates\n+    x = Symbol('x')\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    assert Intersection({1}, {1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1, 1, 2}, {2, 2, 3}) == {2}\n+    assert Intersection({1, 2, 3, 4}, {2, 3}, {3, 4}) == {3}\n+    assert Intersection({1, 2, 3}, {4, 5}) == S.EmptySet\n+\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..e052ddc 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,6 +1,8 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n+, Identity\n )\n from sympy import eye\n from sympy.abc import x, i, j, a, b, c, d\n@@ -16,7 +18,23 @@ from sympy.external import import_module\n \n np = import_module('numpy')\n \n-def test_numpy_piecewise_regression():\n+def test_identity_matrix_lambdify():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    from sympy import symbols\n+    n = symbols('n', integer=True)\n+    A = MatrixSymbol(\"A\", n, n)\n+    a = np.array([[1, 2], [3, 4]])\n+    f = lambdify(A, A + Identity(n), 'numpy')\n+    expected_output = np.array([[2, 2], [3, 5]])\n+    \n+    # Ensure the lambdified function produces the correct output\n+    assert (f(a) == expected_output).all()\n+\n+    # Test for a symbolic size matrix, should raise NotImplementedError\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n), 'numpy'))\n     \"\"\"\n     NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n     breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..97e0739 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -814,4 +814,12 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n+\n+def test_issue_17137():\n+    from sympy import Symbol, cos, simplify, I\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(tan(x)**I) == tan(x)**I\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..67f7a8c 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -103,7 +104,14 @@ def test_point():\n         Point(a.n(2), b.n(2), evaluate=False)\n     raises(ValueError, lambda: Point(1, 2) + 1)\n \n-    # test transformations\n+    # Test multiplication of Point and number\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+\n+    # Test both Point * scalar and scalar * Point produce the same results\n+    assert point1 + point2 * scalar == Point(2, 2), \"Expected (0, 0) + 2 * (1, 1) to equal (2, 2)\"\n+    assert point1 + scalar * point2 == Point(2, 2), \"Expected (0, 0) + (1, 1) * 2 to equal (2, 2)\"\n     p = Point(1, 0)\n     assert p.rotate(pi/2) == Point(0, 1)\n     assert p.rotate(pi/2, p) == p\n@@ -181,7 +189,14 @@ def test_point3D():\n         Point(a.n(2), b.n(2), c.n(2), evaluate=False)\n     raises(ValueError, lambda: Point3D(1, 2, 3) + 1)\n \n-    # test transformations\n+    # Test multiplication of Point and number\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+\n+    # Test both Point * scalar and scalar * Point produce the same results\n+    assert point1 + point2 * scalar == Point(2, 2), \"Expected (0, 0) + 2 * (1, 1) to equal (2, 2)\"\n+    assert point1 + scalar * point2 == Point(2, 2), \"Expected (0, 0) + (1, 1) * 2 to equal (2, 2)\"\n     p = Point3D(1, 1, 1)\n     assert p.scale(2, 3) == Point3D(2, 3, 1)\n     assert p.translate(1, 2) == Point3D(2, 3, 1)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..fccb0a3 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,44 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, sympify, Symbol, Basic\n+\n+def test_non_string_equality():\n+    # Expressions should not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Make sure == doesn't try to convert the resulting expression to a string\n+    # (e.g., by calling sympify() instead of _sympify())\n+\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n+def test_eq_with_custom_repr():\n+    x = Symbol('x')\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+\n+    # Related issue: Custom repr with same name should not be equal\n+    class C2:\n+        def __repr__(self):\n+            return 'x'\n+    assert (x == C2()) is False\n+    assert (x != C2()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1940,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..8e7fdb5 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -537,7 +537,11 @@ def test_diophantine():\n         (0, 2, 1)\n     assert diophantine(eq) == \\\n         set([(24*p*q, 2*p**2 - 24*q**2, p**2 + 12*q**2)])\n-    # solvers have not been written for every type\n+    # Test for issue related to symbol order and permute=True\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     raises(NotImplementedError, lambda: diophantine(x*y**2 + 1))\n \n     # rational expressions\n",
  "sympy__sympy-18532": "",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..40a053d 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,42 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_issue_BlockDiagMatrix_single_element_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+\n+    # Create a matrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    \n+    # Create a BlockDiagMatrix with a single Matrix element\n+    D = BlockDiagMatrix(M)\n+    \n+    # Convert back to a regular Matrix\n+    B = Matrix(D)\n+    \n+    # The result should be the same as the original matrix\n+    assert B == M\n+\n+def test_issue_BlockDiagMatrix_two_elements_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+\n+    # Create a matrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    \n+    # Create a BlockDiagMatrix with two identical elements\n+    D = BlockDiagMatrix(M, M)\n+    \n+    # Convert back to a regular Matrix\n+    B = Matrix(D)\n+    \n+    # The result should have two blocks of the original matrix along the diagonal\n+    expected = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    assert B == expected\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..4b4e998 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -82,8 +83,22 @@ def test_block_index():\n \n     assert BI.as_explicit().equals(eye(6))\n \n-\n-def test_slicing():\n+def test_block_index_symbolic_issue():\n+    # Test case derived from the issue description\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    # Since the indices are symbolic, it should not simplify to any specific block\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n+\n+def test_block_index_issue_specific():\n+    n = symbols('n', integer=True, positive=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', 1, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[0, 0] == A[0, 0]\n+    assert C[1, 0] == B[0, 0]\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..f49ded6 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -200,7 +200,22 @@ def test_im():\n     X = FunctionMatrix(3, 3, Lambda((n, m), n + m*I))\n     assert im(X) == Matrix([[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n \n-def test_sign():\n+from sympy import Symbol, Abs, sign, Piecewise, Eq, Function\n+\n+def test_rewrite_sign_as_abs():\n+    x = Symbol('x')\n+    f = Function('f')\n+    # Test for general symbols\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(f(x)).rewrite(Abs) == Piecewise((0, Eq(f(x), 0)), (f(x)/Abs(f(x)), True))\n+    # Test for zero\n+    assert sign(0).rewrite(Abs) == 0\n+    # Test for positive, negative, and complex numbers\n+    pos = Symbol('pos', positive=True)\n+    neg = Symbol('neg', negative=True)\n+    assert sign(pos).rewrite(Abs) == pos/Abs(pos)\n+    assert sign(neg).rewrite(Abs) == neg/Abs(neg)\n+    assert sign(2 + 3*I).rewrite(Abs) == (2 + 3*I) / Abs(2 + 3*I)\n     assert sign(1.2) == 1\n     assert sign(-1.2) == -1\n     assert sign(3*I) == I\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..26246dc 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -472,6 +472,26 @@ def test_multiset_permutations():\n \n \n def test_partitions():\n+    # New test case to ensure that partitions do not reuse dictionary objects\n+    def test_partition_reuse(n, **kwargs):\n+        partitions_list = list(partitions(n, **kwargs))\n+        for i in range(len(partitions_list) - 1):\n+            assert partitions_list[i] is not partitions_list[i + 1], \\\n+                \"Partitions are reusing dictionary objects\"\n+            assert partitions_list[i] != partitions_list[i + 1], \\\n+                \"Partitions are equal but should be distinct objects\"\n+\n+    # Check for partitions of 6 with no k or m specified\n+    test_partition_reuse(6)\n+\n+    # Check for partitions of 6 with k specified\n+    test_partition_reuse(6, k=2)\n+\n+    # Check for partitions of 8 with k and m specified\n+    test_partition_reuse(8, k=4, m=3)\n+\n+    # Check for partitions of 4 with k specified\n+    test_partition_reuse(4, k=3)\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..5bb1e2f 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,6 +254,8 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n+from sympy import S, oo\n+\n def test_zero():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -267,7 +269,10 @@ def test_zero():\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n \n-def test_pow_as_base_exp():\n+def test_issue_19572():\n+    # Test issue 19572: 0**-oo should return zoo (ComplexInfinity)\n+    assert 0**-oo == S.ComplexInfinity\n+    assert Pow(0, -oo) == S.ComplexInfinity\n     x = Symbol('x')\n     assert (S.Infinity**(2 - x)).as_base_exp() == (S.Infinity, 2 - x)\n     assert (S.Infinity**(x - 2)).as_base_exp() == (S.Infinity, x - 2)\n",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..36f9b07 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,23 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import pytest\n+from sympy import Symbol\n+from sympy.core.basic import Basic\n+from sympy.testing.pytest import raises\n+\n+def test_symbol_no_dict():\n+    # Test that Symbol does not have a __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    assert s.__slots__ == ('name',)\n+\n+def test_immutable():\n+    b1 = Basic()\n+    assert not hasattr(b1, '__dict__')\n+    with raises(AttributeError):\n+        b1.x = 1\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..453feee 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n                    atan, atan2, nan, Symbol, re, im, sign)\n from sympy.abc import w, x, y, z\n@@ -160,6 +161,18 @@ def test_sign():\n     x = Symbol('x', complex=True)\n     assert refine(sign(x), Q.zero(x)) == 0\n \n+def test_issue_with_refine_complex_arguments():\n+    a, x = symbols('a x', real=True)\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo))\n+    # Test the refinement of the argument of the solution\n+    result = J.doit()\n+    refined_result = refine(result, Q.positive(a))\n+    assert refined_result == Piecewise((1 / (a**2 + 1), True))\n+\n+    # Additional test cases for arg and abs\n+    assert refine(arg(a), Q.positive(a)) == 0\n+    assert refine(abs(a), Q.positive(a)) == a\n+\n \n def test_func_args():\n     class MyClass(Expr):\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..12a3136 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,6 +20,42 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+def test_issue_polynomial_error_with_subs():\n+    from sympy.functions.elementary.trigonometric import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+    from sympy.core.cache import clear_cache\n+\n+    # Test setup: Create symbols\n+    x, y, z = symbols('x y z')\n+\n+    # Clear cache and create the expression with default assumptions\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+\n+    # Attempt substitution, expect no exceptions\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n+\n+    # Clear cache and create symbols with real assumptions\n+    clear_cache()\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr_real = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    # Attempt substitution, expect no PolynomialError\n+    assert expr_real.subs({1: 1.0}) == expr_real.subs({1: 1.0})\n+\n+    # Verify various modifications that avoid the error\n+    expr_no_division = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)))\n+    assert expr_no_division.subs({1: 1.0}) == expr_no_division.subs({1: 1.0})\n+\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    assert expr_no_exp.subs({1: 1.0}) == expr_no_exp.subs({1: 1.0})\n+\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_cosh.subs({1: 1.0}) == expr_cosh.subs({1: 1.0})\n+\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_tanh.subs({1: 1.0}) == expr_tanh.subs({1: 1.0})\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..d0246dc 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -45,7 +47,10 @@ def test_Matrix_kind():\n         m = cls.zeros(3, 2)\n         assert m.kind is MatrixKind(NumberKind)\n \n-def test_MatMul_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     M = Matrix([[1,2],[3,4]])\n     assert MatMul(2, M).kind is MatrixKind(NumberKind)\n     assert MatMul(comm_x, M).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..1c6af77 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -109,6 +109,20 @@ def test_monomials():\n     assert set(itermonomials([x], [0])) == {S.One}\n     assert set(itermonomials([x], [1])) == {S.One, x}\n     assert set(itermonomials([x], [2])) == {S.One, x, x**2}\n+\n+    # Test cases for issue with min_degrees argument\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x2**3, x3**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x3**2, x1*x2*x3, x2**2*x3, x2*x3**2}\n+    assert set(itermonomials([x1, x2, x3], 4, 3)) == {\n+        x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2, x2**3, x2**2*x3, x2*x3**2, x3**3,\n+        x1**4, x1**3*x2, x1**3*x3, x1**2*x2*x3, x1**2*x3**2, x1*x2**3, x1*x2**2*x3, x1*x2*x3**2, x1*x3**3,\n+        x2**4, x2**3*x3, x2**2*x3**2, x2*x3**3, x3**4\n+    }\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {\n+        x1**2, x1*x2, x1*x3, x2**2, x2*x3, x3**2,\n+        x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2,\n+        x2**3, x2**2*x3, x2*x3**2, x3**3\n+    }\n     assert set(itermonomials([x], [3])) == {S.One, x, x**2, x**3}\n \n     assert set(itermonomials([x], [3], [1])) == {x, x**3, x**2}\n",
  "sympy__sympy-22005": "",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..7f91a40 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n@@ -444,7 +446,25 @@ def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n-def test__normalize_dimension():\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        Point(1, 2)\n+\n+    # Additional tests to verify the behavior with Point2D and evaluate(False)\n+    with evaluate(False):\n+        assert Point2D(1, 2) == Point2D(1, 2)\n+\n+    # Check if it raises the expected error when imaginary coordinates are used\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        with evaluate(False):\n+            Point2D(1 + I, 2)\n+\n+    # Ensure it works without evaluate(False)\n+    assert Point2D(1, 2) == Point2D(1, 2)\n+\n+    # Ensure that evaluate=False in sympify does not raise an error\n+    assert sympify('Point2D(1, 2)', evaluate=False) == Point2D(1, 2)\n     assert Point._normalize_dimension(Point(1, 2), Point(3, 4)) == [\n         Point(1, 2), Point(3, 4)]\n     assert Point._normalize_dimension(\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..075b6fc 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -338,6 +338,8 @@ def test_cse_Indexed():\n     assert len(replacements) > 0\n \n \n+import sympy as sp\n+\n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n     A = MatrixSymbol(\"A\", 3, 3)\n@@ -347,7 +349,27 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n-def test_cse_MatrixExpr():\n+def test_cse_MatrixSymbol_indexing():\n+    A = sp.MatrixSymbol('A', 4, 4)\n+    B = sp.MatrixSymbol('B', 4, 4)\n+\n+    # Simple matrix element multiplication\n+    expr = A[0, 0] * A[0, 1] + A[0, 0] * A[0, 1] * A[0, 2]\n+    replacements, reduced_exprs = cse(expr)\n+    assert replacements == [(sp.Symbol('x0'), A[0, 0] * A[0, 1])]\n+    assert reduced_exprs == [sp.Symbol('x0') * A[0, 2] + sp.Symbol('x0')]\n+\n+    # More complex expression involving two matrices\n+    expr = A[0, 0] * B[0, 0] + A[0, 0] * B[0, 1] + A[1, 1] * B[1, 0] + A[1, 1] * B[1, 1]\n+    replacements, reduced_exprs = cse(expr)\n+    assert replacements == [(sp.Symbol('x0'), A[0, 0]), (sp.Symbol('x1'), B[0, 0]), (sp.Symbol('x2'), B[0, 1]), (sp.Symbol('x3'), A[1, 1]), (sp.Symbol('x4'), B[1, 0]), (sp.Symbol('x5'), B[1, 1])]\n+    assert reduced_exprs == [sp.Symbol('x0') * sp.Symbol('x1') + sp.Symbol('x0') * sp.Symbol('x2') + sp.Symbol('x3') * sp.Symbol('x4') + sp.Symbol('x3') * sp.Symbol('x5')]\n+\n+    # Confirm no common subexpression found for unique operations\n+    expr = A[0, 0] + A[0, 1] + B[0, 0] + B[0, 1]\n+    replacements, reduced_exprs = cse(expr)\n+    assert replacements == []\n+    assert reduced_exprs == [A[0, 0] + A[0, 1] + B[0, 0] + B[0, 1]]\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..5b1b482 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -46,6 +47,19 @@ def test_issue_18361():\n     assert simplify(B) == Array([1, 0])\n     assert simplify(C) == Array([x + 1, sin(2*x)])\n \n+def test_issue_17851():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n+\n+def test_issue_and_18715():\n+    for array_type in mutable_array_types:\n+        A = array_type([0, 1, 2])\n+        A[0] += 5\n+        assert A[0] == 5\n+\n def test_issue_20222():\n     A = Array([[1, 2], [3, 4]])\n     B = Matrix([[1,2],[3,4]])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..a83af28 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,7 +1175,18 @@ def test_scipy_polys():\n \n \n \n-def test_lambdify_inspect():\n+def test_tuple_single_element_printer():\n+    # Test for tuple with a single element\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+    source = inspect.getsource(f_single)\n+    assert 'return (1,)' in source\n+\n+    # Test for tuple with multiple elements\n+    f_multiple = lambdify([], (1, 2))\n+    assert f_multiple() == (1, 2)\n+    source = inspect.getsource(f_multiple)\n+    assert 'return (1, 2)' in source\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..c8e7104 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,28 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+from sympy import exp\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units import Quantity\n+\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..29530b2 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,8 +45,25 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n-\n-def test_tensor_product_commutator():\n+def test_tensor_product_expand():\n+    assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n+        TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n+    \n+    # Tests for fix of issue #24142\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional test cases\n+    assert TP(3*A + 4*B, 5*B + 6*C).expand(tensorproduct=True) == \\\n+        3 * TP(A, 5*B) + 3 * TP(A, 6*C) + 4 * TP(B, 5*B) + 4 * TP(B, 6*C)\n+    assert TP(A, 2*B - 3*C).expand(tensorproduct=True) == \\\n+        2 * TP(A, B) - 3 * TP(A, C)\n+    assert TP(0, A + B).expand(tensorproduct=True) == \\\n+        0\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..61171f0 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,7 +563,65 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_with_different_scales():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 3 * meter / second)  # Different scale factor\n+\n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, 1 * meter / second**2)\n+\n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 3 * second)\n+\n+    expr = A2*T2 + V2\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_with_different_units():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, kilometer\n+    from sympy.physics.units.systems.si import SI\n+\n+    V3 = Quantity('V3')\n+    SI.set_quantity_dimension(V3, velocity)\n+    SI.set_quantity_scale_factor(V3, 0.001 * kilometer / second)  # Different unit, equivalent to meter\n+\n+    A3 = Quantity('A3')\n+    SI.set_quantity_dimension(A3, acceleration)\n+    SI.set_quantity_scale_factor(A3, 1 * kilometer / second**2)\n+\n+    T3 = Quantity('T3')\n+    SI.set_quantity_dimension(T3, time)\n+    SI.set_quantity_scale_factor(T3, 1000 * second)\n+\n+    expr = A3*T3 + V3\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..206c14e 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,11 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, volt\n+from sympy.physics.units import kilo, kiloohm, ohm\n+from sympy.core.singleton import S\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -22,6 +25,18 @@ def test_prefix_operations():\n     assert 1 / m == k\n     assert k / m == M\n \n+    # Testing issue with milli prefix: milli * W should evaluate to milli watts (mW)\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+\n+    # Testing milli with another unit, volt\n+    assert milli * volt == volt / 1000\n+    assert volt * milli == volt / 1000\n+\n+    # Testing combined usage with kilo prefix\n+    assert kilo * milli == 1  # kilo and milli should cancel each other out\n+    assert kiloohm * milli == ohm  # 1000 ohms (kiloohm) * milli = 1 ohm\n+\n     assert dodeca * dodeca == 144\n     assert 1 / dodeca == S.One / 12\n     assert k / dodeca == S(1000) / 12\n",
  "django__django-12470": "",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..dca0a0a 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -342,8 +342,30 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n-\n-    def test_order_by_f_expression(self):\n+    def test_self_referential_foreign_key_ordering(self):\n+        \"\"\"\n+        Test ordering on self-referential foreign key fields.\n+        \"\"\"\n+        one1 = OneModel.objects.create(oneval=1)\n+        one2 = OneModel.objects.create(oneval=2, root=one1)\n+        TwoModel.objects.create(record=one1, twoval=10)\n+        TwoModel.objects.create(record=one2, twoval=20)\n+\n+        # Test if order_by(\"record__root_id\") gives expected result.\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2])\n+        qs = qs.order_by(\"record__root_id\")\n+        expected_order = [one1.id, one2.id]\n+        self.assertEqual(list(qs.values_list('record__root_id', flat=True)), expected_order)\n+\n+        # Test if order_by(\"-record__root_id\") gives expected result.\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2])\n+        qs = qs.order_by(\"-record__root_id\")\n+        expected_order_desc = [one2.id, one1.id]\n+        self.assertEqual(list(qs.values_list('record__root_id', flat=True)), expected_order_desc)\n+\n+        # Test the workaround using annotate\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2]).annotate(root_id=F(\"record__root_id\")).order_by(\"root_id\")\n+        self.assertEqual(list(qs.values_list('root_id', flat=True)), expected_order)\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n                 \"Article 1\",\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..f70b8aa 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_with_choicewidget_options(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the id set by ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='customprefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        \n+        # Check if the id_for_label uses the id from the widget's attrs\n+        self.assertEqual(subwidgets[0].id_for_label, 'customprefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'customprefix_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex de2502e..c70a59e 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1484,4 +1484,36 @@ class CreatePermissionsTests(TestCase):\n                 content_type__app_label=opts.app_label,\n                 codename=codename,\n             ).exists()\n-        )\n+        )\n+\n+from django.test import TestCase, override_settings\n+from django.contrib.auth.models import Permission\n+from django.core.management import call_command\n+from django.db import connections\n+from django.db.utils import ConnectionHandler\n+\n+@override_settings(DATABASES={\n+    'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'},\n+    'other': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'},\n+})\n+class MigrateDatabaseParameterTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        # Ensure both databases are empty before each test\n+        for alias in self.databases:\n+            connection = connections[alias]\n+            with connection.schema_editor() as editor:\n+                editor.create_model(Permission)\n+\n+    def test_migrate_respects_database_parameter(self):\n+        # Ensure permissions table is empty in both databases\n+        for alias in self.databases:\n+            self.assertEqual(Permission.objects.using(alias).count(), 0, f\"{alias} database should be empty.\")\n+\n+        # Run migrate command on 'other' database\n+        call_command('migrate', database='other', verbosity=0)\n+\n+        # Permissions should only be created in the 'other' database, not 'default'\n+        self.assertEqual(Permission.objects.using('default').count(), 0, \"'default' database should still be empty.\")\n+        self.assertGreater(Permission.objects.using('other').count(), 0, \"'other' database should not be empty.\")\n",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..c2411c2 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -630,12 +630,56 @@ def test_colorbar_format(fmt):\n     # make sure that if we change the clim of the mappable that the\n     # formatting is *not* lost:\n     im.set_clim([4, 200])\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm, Normalize\n+import numpy as np\n+\n+def test_colorbar_update_after_norm_change():\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots(1, 1)\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+    \n+    # Change the normalization and update the colorbar\n+    plot.set_norm(LogNorm())\n+    cb.update_normal(plot)\n+    \n+    # Trigger a canvas draw to finalize updates\n     fig.canvas.draw()\n+    \n+    # Check if colorbar ticks change according to LogNorm\n+    tick_labels = [label.get_text() for label in cb.ax.yaxis.get_ticklabels()]\n+    assert tick_labels[0] == '$\\\\mathdefault{10^{0}}$', \"Expected log scale ticks\"\n+\n+# Existing content below\n     assert cbar.ax.yaxis.get_ticklabels()[4].get_text() == '2.00e+02'\n \n     # but if we change the norm:\n     im.set_norm(LogNorm(vmin=0.1, vmax=10))\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm, Normalize\n+import numpy as np\n+\n+def test_colorbar_update_after_norm_change():\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots(1, 1)\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+    \n+    # Change the normalization and update the colorbar\n+    plot.set_norm(LogNorm())\n+    cb.update_normal(plot)\n+    \n+    # Trigger a canvas draw to finalize updates\n     fig.canvas.draw()\n+    \n+    # Check if colorbar ticks change according to LogNorm\n+    tick_labels = [label.get_text() for label in cb.ax.yaxis.get_ticklabels()]\n+    assert tick_labels[0] == '$\\\\mathdefault{10^{0}}$', \"Expected log scale ticks\"\n+\n+# Existing content below\n     assert (cbar.ax.yaxis.get_ticklabels()[0].get_text() ==\n             '$\\\\mathdefault{10^{-2}}$')\n \n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..9d306c6 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -131,6 +131,64 @@ def test_decorators(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    options = {\"members\": None,\n+               \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_with_undoc_members(app):\n+    options = {\"members\": None,\n+               \"inherited-members\": True,\n+               \"undoc-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..45b07bb 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,8 +358,24 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n+def test_issue_rational_trigsimp():\n+    # Test simplification of trigonometric expressions with Rational numbers\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+\n+    # Verify using trigsimp\n+    assert trigsimp(r1) == cos(S(1)/50 - S(1)/25)\n+    assert trigsimp(r2) == cos(S(1)/50 - S(1)/25)\n+\n+    # Check acos simplification\n+    from sympy import acos\n+    assert trigsimp(acos(r1)) == acos(cos(S(1)/50 - S(1)/25))\n \n-def test_exptrigsimp():\n+    # Ensure that simplifying expressions with Rational angles works\n+    assert simplify(r1) == cos(S(1)/50 - S(1)/25)\n+    assert simplify(r2) == cos(S(1)/50 - S(1)/25)\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..a5a873a 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -699,6 +699,16 @@ def test_uniq():\n     assert list(uniq('a')) == ['a']\n     assert list(uniq('ababc')) == list('abc')\n     assert list(uniq([[1], [2, 1], [1]])) == [[1], [2, 1]]\n+\n+    # Test cases to ensure RuntimeError is raised when the list is modified during iteration\n+    f = [1, 2, 3]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = ['a', 'b', 'c', 'a']\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = [[1], [2], [3], [1]]\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n     assert list(uniq(permutations(i for i in [[1], 2, 2]))) == \\\n         [([1], 2, 2), (2, [1], 2), (2, 2, [1])]\n     assert list(uniq([2, 3, 2, 4, [2], [1], [2], [3], [1]])) == \\\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..c49374d 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -7,6 +8,7 @@ from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n+from django.db.models import Max\n from django.test import TestCase, skipUnlessDBFeature\n \n from .models import (\n",
  "django__django-15320": "",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..22883c1 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,7 +153,18 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(\n+                p[0].pool.tournament,\n+                p[0].tournament_pool.tournament,\n+                \"The related tournament object should match after select_related with FilteredRelation.\"\n+            )\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +175,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..86d9a4b 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -13,8 +14,33 @@ from PIL import Image\n \n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n+import pickle\n+from matplotlib.figure import Figure\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n+\n+def test_dpi_remains_constant_after_unpickle():\n+    # Initial DPI value\n+    initial_dpi = 200.0\n+    fig = Figure(dpi=initial_dpi)\n+    \n+    # Pickle and unpickle the figure\n+    fig2 = pickle.loads(pickle.dumps(fig))\n+    \n+    # Assert the DPI is the same after unpickling\n+    assert fig2.dpi == initial_dpi, \"DPI should remain constant after unpickling\"\n+\n+    # Attempt to simulate the issue on an M1 Mac by checking multiple unpickles\n+    for _ in range(10):\n+        fig2 = pickle.loads(pickle.dumps(fig2))\n+        assert fig2.dpi == initial_dpi, \"DPI should remain constant after repeated unpickling\"\n+\n+def test_unpickle_with_device_pixel_ratio():\n+    fig = Figure(dpi=42)\n+    fig.canvas._set_device_pixel_ratio(7)\n+    assert fig.dpi == 42*7\n+    fig2 = pickle.loads(pickle.dumps(fig))\n+    assert fig2.dpi == 42\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..35c4457 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+import seaborn as sns\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,6 +1625,35 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n+    def test_pairgrid_with_categorical_hue(self):\n+        # Load the iris dataset\n+        iris = sns.load_dataset(\"iris\")\n+        \n+        # Create a PairGrid without using the hue parameter initially\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        \n+        # Attempt to map scatterplot with hue as a categorical variable\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            no_error = True\n+        except Exception as e:\n+            print(f\"Encountered Exception: {e}\")\n+            no_error = False\n+        \n+        # Assert that no error occurs when mapping with hue\n+        assert no_error, \"Mapping scatterplot with categorical hue on PairGrid raised an error\"\n+\n+        # Additionally test mapping regplot without scatter\n+        try:\n+            g.map(sns.regplot, scatter=False)\n+            no_error = True\n+        except Exception as e:\n+            print(f\"Encountered Exception: {e}\")\n+            no_error = False\n+        \n+        # Assert that no error occurs when mapping regplot without scatter\n+        assert no_error, \"Mapping regplot without scatter on PairGrid raised an error\"\n+\n     def test_linewidths(self, long_df):\n \n         f, ax = plt.subplots()\n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..db24914 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -323,6 +323,8 @@ class TestTraceback_f_g_h:\n         assert entry.frame.code.name == \"g\"\n \n \n+import pytest\n+\n def test_excinfo_exconly():\n     excinfo = pytest.raises(ValueError, h)\n     assert excinfo.exconly().startswith(\"ValueError\")\n@@ -347,7 +349,21 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n-def test_excinfo_for_later():\n+def test_pytest_raises_context_variable_behavior():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    \n+    # This should check the behavior described in the issue\n+    assert str(excinfo) == \"<ExceptionInfo LookupError tblen=1>\"\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+\n+def test_pytest_raises_context_variable_with_assert():\n+    with pytest.raises(AssertionError) as excinfo:\n+        assert False, \"A\\nB\\nC\"\n+    \n+    # Check that str(excinfo) doesn't return the message directly\n+    assert str(excinfo) == \"<ExceptionInfo AssertionError tblen=1>\"\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n     assert \"for raises\" in str(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..2368abc 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -404,6 +404,10 @@ class TestCustomConftests:\n         testdir.makepyfile(\"def test_x(): pass\")\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # Testing with the new shortcut\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n@@ -435,6 +439,10 @@ class TestCustomConftests:\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n+        \n+        # Testing with the new shortcut\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n class TestSession:\n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..62bd34d 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -90,6 +90,17 @@ def missing_attr(c,\n     # type: (...) -> str\n     return a + (b or \"\")\n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+\n \n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n@@ -98,4 +109,4 @@ class _ClassWithDocumentedInit:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..2747bb6 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,29 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import *\n+from sympy import Q as Query\n \n-def test_Identity_doit():\n+def test_identity_matrix_sum():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    M = MatrixSymbol('M', n, n)\n+    e = None\n+\n+    with assuming(Query.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+\n+    # Ensure the expression e is an identity matrix\n+    assert e[0, 0] == 1\n+    assert e[0, 1] == 0\n+    assert e[1, 0] == 0\n+    assert e[1, 1] == 1\n+\n+    # Ensure the sum of the diagonal elements is n\n+    assert Sum(e[i, i], (i, 0, n-1)).doit() == n\n+\n+    # Verify the total sum of all elements is n\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..ee28770 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,6 +251,14 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n+def test_issue_fraction_parsing():\n+    from sympy.parsing.latex import parse_latex\n+    from sympy import Pow, Add, Mul\n+    a, b, c = symbols('a b c')\n+    expr = parse_latex(r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\")\n+    expected = Mul(Add(Pow(a, 3), b), Pow(c, 2)) / c\n+    assert expr == expected, f\"Expected {expected}, but got {expr}\"\n+\n # These bad LaTeX strings should raise a LaTeXParsingError when parsed\n BAD_STRINGS = [\n     r\"(\",\n"
}