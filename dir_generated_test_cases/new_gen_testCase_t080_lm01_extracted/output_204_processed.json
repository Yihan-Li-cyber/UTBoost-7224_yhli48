{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..80381f9 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,8 +55,30 @@ compound_models = {\n             )\n }\n \n+# Import necessary modules for testing\n+import numpy as np\n+import pytest\n+from astropy.modeling import models\n+from astropy.modeling.separable import separability_matrix, is_separable\n+\n+# Setup some simple model components for tests\n+scl1 = models.Scale(1, name='scl1')\n+scl2 = models.Scale(2, name='scl2')\n+sh1 = models.Shift(1, name='sh1')\n+sh2 = models.Shift(2, name='sh2')\n \n-def test_coord_matrix():\n+# Add new test cases for checking nested compound models issue\n+def test_separability_matrix_for_nested_compound_models():\n+    cm = models.Linear1D(10) & models.Linear1D(5)\n+    # Test the nested compound model\n+    nested_cm = models.Pix2Sky_TAN() & cm\n+    expected = np.array([[True, True, False, False],\n+                         [True, True, False, False],\n+                         [False, False, True, False],\n+                         [False, False, False, True]])\n+    assert np.array_equal(separability_matrix(nested_cm), expected)\n+\n+    # Additional test cases can be added here if necessary\n     c = _coord_matrix(p2, 'left', 2)\n     assert_allclose(np.array([[1, 1], [0, 0]]), c)\n     c = _coord_matrix(p2, 'right', 2)\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..f6591c2 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,49 @@\n+\n+def test_qtable_rst_with_header_rows():\n+    \"\"\"Test QTable writing to RST format with header_rows specified\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.ct})\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    expected_output = [\n+        \"===== ======== =====\",\n+        \"wave response \",\n+        \"  nm       ct \",\n+        \"===== ======== =====\",\n+        \"350.0      0.7    \",\n+        \"950.0      1.2    \",\n+        \"===== ======== =====\",\n+    ]\n+    assert out.getvalue().splitlines() == expected_output\n+\n+\n+def test_read_write_round_trip_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+import astropy.units as u\n+from astropy.table import QTable\n \n from astropy.io import ascii\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..ac07837 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -109,7 +109,33 @@ def test_roundtrip(tmp_path):\n         assert meta_name in new_table.meta\n \n \n-def test_read_example():\n+import pytest\n+from astropy.table import Table\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+def test_read_lowercase_commands(tmp_path):\n+    \"\"\"Test reading QDP files where commands are in lowercase.\"\"\"\n+    example_qdp = \"\"\"\n+    ! QDP file with lowercase commands\n+    read serr 1 2\n+    1 0.5 1 0.5\n+    \"\"\"\n+    path = str(tmp_path / \"test_lowercase.qdp\")\n+\n+    with open(path, \"w\") as fp:\n+        fp.write(example_qdp)\n+\n+    with pytest.warns(AstropyUserWarning, match=\"multiple command blocks\") as record:\n+        table = Table.read(path, format='ascii.qdp')\n+\n+    assert table is not None\n+    assert len(table) == 1\n+    assert table[\"col1\"][0] == 1.0\n+    assert table[\"col2\"][0] == 0.5\n+    assert \"col1_err\" in table.colnames\n+    assert \"col2_err\" in table.colnames\n+    assert table[\"col1_err\"][0] == 1.0\n+    assert table[\"col2_err\"][0] == 0.5\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..d496b24 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,42 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_mask_propagation():\n+    # Define array and mask\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    # Test multiplication with no mask (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # Test multiplication where one operand has a mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_mask.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+    np.testing.assert_equal(\n+        nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # Test multiplication where both operands have masks (mask * mask)\n+    np.testing.assert_equal(\n+        nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # Test with another mask to see bitwise operation\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_mask, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..c8af950 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,32 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Test that the default FILE_UPLOAD_PERMISSIONS is set to 0o644.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n+    def test_file_permissions_after_upload(self):\n+        \"\"\"\n+        Test that the permissions of an uploaded file are 0o644 by default.\n+        \"\"\"\n+        temp_file = tempfile.NamedTemporaryFile(delete=False)\n+        temp_file.write(b\"Test content\")\n+        temp_file.flush()\n+        temp_file.close()\n+\n+        uploaded_file_name = default_storage.save('test_upload.txt', File(open(temp_file.name, 'rb')))\n+        uploaded_file_path = default_storage.path(uploaded_file_name)\n+        \n+        # Check the file permissions\n+        self.assertEqual(oct(os.stat(uploaded_file_path).st_mode & 0o777), '0o644')\n+\n+        # Cleanup\n+        os.remove(uploaded_file_path)\n+        os.remove(temp_file.name)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..5a74d5f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -376,6 +376,29 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertEqual(str(qs.query).count('JOIN'), 2)\n \n+    def test_order_by_multiline_sql(self):\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN status = 'accepted'\n+                     THEN 1 ELSE 2 END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN status = 'rejected'\n+                     THEN 1 ELSE 2 END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN status = 'pending'\n+                     THEN 1 ELSE 2 END\n+            ''', []).asc(),\n+        )\n+        companies = Company.objects.all()\n+        ordered_companies = companies.order_by(*raw_order_by)\n+        self.assertQuerysetEqual(\n+            ordered_companies,\n+            [repr(self.example_inc), repr(self.gmbh), repr(self.foobar_ltd)],\n+            transform=repr\n+        )\n+\n     def test_order_by_exists(self):\n         mary = Employee.objects.create(firstname='Mary', lastname='Mustermann', salary=20)\n         mustermanns_by_seniority = Employee.objects.filter(lastname='Mustermann').order_by(\n",
  "django__django-11039": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex e8d2c40..4e4ed30 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -1,3 +1,4 @@\n+\n from django.apps import apps\n from django.core.management.base import BaseCommand, CommandError\n from django.db import DEFAULT_DB_ALIAS, connections\n@@ -55,8 +56,9 @@ class Command(BaseCommand):\n                 migration_name, app_label))\n         targets = [(app_label, migration.name)]\n \n-        # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        # Show begin/end around output only for atomic migrations and\n+        # if the database supports transactional DDL.\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\n",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..4f80ef3 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -67,7 +67,38 @@ class TestSerialization(SimpleTestCase):\n \n class TestValidation(SimpleTestCase):\n \n-    def test_invalid_string(self):\n+    def test_invalid_format_missing_seconds(self):\n+        field = models.DurationField()\n+        with self.assertRaises(exceptions.ValidationError) as cm:\n+            field.clean('1:15', None)\n+        self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+            \"'1:15' value has an invalid format. \"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n+\n+    def test_invalid_format_only_days(self):\n+        field = models.DurationField()\n+        with self.assertRaises(exceptions.ValidationError) as cm:\n+            field.clean('1', None)  # Only days without seconds\n+        self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+            \"'1' value has an invalid format. \"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n+\n+    def test_invalid_format_hours_without_seconds(self):\n+        field = models.DurationField()\n+        with self.assertRaises(exceptions.ValidationError) as cm:\n+            field.clean('1:00', None)\n+        self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+            \"'1:00' value has an invalid format. \"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n         field = models.DurationField()\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n@@ -75,7 +106,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +115,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..cfdb245 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,7 +238,24 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\n',\n         ]\n+        \n+    def test_unicode_validator_trailing_newline(self):\n+        invalid_usernames = ['username\\n', 'user\\nname', 'name\\n\\n']\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        invalid_usernames = ['username\\n', 'user\\nname', 'name\\n\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +275,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..8b70195 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,16 +356,48 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n         self.assertEqual(r.content, b'12345')\n \n+    def test_empty_memoryview_content(self):\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_slice_content(self):\n+        original_content = b'abcdef'\n+        r = HttpResponse(memoryview(original_content)[1:4])\n+        self.assertEqual(r.content, b'bcd')\n+\n+    def test_memoryview_via_content_setter(self):\n+        r = HttpResponse()\n+        r.content = memoryview(b'settermemoryview')\n+        self.assertEqual(r.content, b'settermemoryview')\n+\n         # test content via property\n         r = HttpResponse()\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n \n+    def test_empty_memoryview_content(self):\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_slice_content(self):\n+        original_content = b'abcdef'\n+        r = HttpResponse(memoryview(original_content)[1:4])\n+        self.assertEqual(r.content, b'bcd')\n+\n+    def test_memoryview_via_content_setter(self):\n+        r = HttpResponse()\n+        r.content = memoryview(b'settermemoryview')\n+        self.assertEqual(r.content, b'settermemoryview')\n+\n     def test_iter_content(self):\n         r = HttpResponse(['abc', 'def', 'ghi'])\n         self.assertEqual(r.content, b'abcdefghi')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..a4d2853 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..0d7b765 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,66 @@\n+\n+class MigrationAuthTests(TestCase):\n+    available_apps = [\n+        'auth_tests',\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+    ]\n+    \n+    def setUp(self):\n+        self.proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        self.permission_codename = 'add_proxy'\n+        self.permission_name = 'Can add proxy'\n+        self.permission = Permission.objects.create(\n+            content_type=self.proxy_model_content_type,\n+            codename=self.permission_codename,\n+            name=self.permission_name,\n+        )\n+\n+    def test_duplicate_key_integrity_error(self):\n+        \"\"\"\n+        Test that running migrate does not raise an IntegrityError for duplicate keys.\n+        This simulates the original issue.\n+        \"\"\"\n+        with self.assertRaises(IntegrityError):\n+            Permission.objects.create(\n+                content_type=self.proxy_model_content_type,\n+                codename=self.permission_codename,\n+                name=self.permission_name,\n+            )\n+    \n+    def test_migrate_resolves_duplicate_permissions(self):\n+        \"\"\"\n+        Test that migrating resolves the duplicate permissions issue.\n+        \"\"\"\n+        # First, simulate the situation where the duplicate permission already exists\n+        Permission.objects.create(\n+            content_type=self.proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        \n+        # Run the migration command that should handle duplicates gracefully\n+        try:\n+            call_command('migrate')\n+        except IntegrityError:\n+            self.fail(\"migrate raised IntegrityError unexpectedly!\")\n+        \n+        # Check that the permissions are correctly resolved\n+        self.assertTrue(\n+            Permission.objects.filter(\n+                content_type=self.proxy_model_content_type,\n+                codename=self.permission_codename,\n+            ).exists()\n+        )\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.core.management import call_command\n+from django.db import IntegrityError\n \n from .models import Proxy, UserProxy\n \n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..1a19d84 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -11,6 +11,7 @@ import weakref\n import zipfile\n from importlib import import_module\n from pathlib import Path\n+import os\n from unittest import mock, skip, skipIf\n \n from django.apps.registry import Apps\n@@ -72,7 +73,19 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n         self.assertFileFound(filename.absolute())\n \n-    def test_check_errors(self):\n+    def test_manage_py_detection(self):\n+        \"\"\"\n+        Test that modifications to manage.py are detected by the autoreloader.\n+        \"\"\"\n+        manage_py = self.temporary_file('manage.py')\n+        manage_py.write_text(\"import os\\n\\nif __name__ == '__main__':\\n    print('Running manage.py')\\n\")\n+        self.assertFileFound(manage_py)\n+\n+        # Simulate modification\n+        manage_py.write_text(\"import os\\n\\nif __name__ == '__main__':\\n    print('Modified manage.py')\\n\")\n+        \n+        # Ensure that the modification is detected\n+        self.assertFileFound(manage_py)\n         \"\"\"\n         When a file containing an error is imported in a function wrapped by\n         check_errors(), gen_filenames() returns it.\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..7ec7b4d 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -5,6 +5,8 @@ import re\n import sys\n import tempfile\n import threading\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from io import StringIO\n from pathlib import Path\n from unittest import mock\n@@ -238,7 +240,33 @@ class DebugViewTests(SimpleTestCase):\n             m.assert_called_once_with(encoding='utf-8')\n \n \n-class DebugViewQueriesAllowedTests(SimpleTestCase):\n+class DebugViewPathConverterTests(SimpleTestCase):\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Verify that raising Http404 in the to_python method of a path converter\n+        results in a technical 404 response when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_technical_404_converter_with_value_error(self):\n+        \"\"\"\n+        Verify that raising ValueError in the to_python method of a path converter\n+        results in trying the next URL pattern instead of a 404 response.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=ValueError):\n+            response = self.client.get('/path-post/1/')\n+            self.assertNotContains(response, 'Page not found', status_code=404)\n+\n+    def test_technical_404_converter_no_exception(self):\n+        \"\"\"\n+        Verify that when no exception is raised in the to_python method,\n+        the URL resolves correctly.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', return_value=1):\n+            response = self.client.get('/path-post/1/')\n+            self.assertEqual(response.status_code, 200)\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..fda1b1c 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -334,6 +334,35 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good'),\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     @unittest.skipUnless(connection.vendor == 'mysql',\n                          \"Test valid only for MySQL\")\n     def test_too_long_char_field_under_mysql(self):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..87fd564 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -261,6 +261,26 @@ class WriterTests(SimpleTestCase):\n             A = b'a-value'\n             B = b'value-b'\n \n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+        \n+        # Test case to ensure Enum serialization uses the name, not the translated value\n+        field = models.CharField(\n+            default=TranslatedEnum.GOOD,\n+            choices=[(tag, tag.value) for tag in TranslatedEnum],\n+            max_length=128\n+        )\n+        serialized_string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            serialized_string,\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', 'Good'), \"\n+            \"('BAD', 'Bad')], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'], \"\n+            \"max_length=128)\"\n+        )\n+\n         class IntEnum(enum.IntEnum):\n             A = 1\n             B = 2\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..966b9fb 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -319,6 +320,27 @@ class HttpDateProcessingTests(unittest.TestCase):\n     def test_parsing_rfc850(self):\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    \n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mocked_year(self, mocked_datetime):\n+        # We'll mock the current year to test the correct behavior\n+        current_year_tests = [\n+            (2019, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (2019, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            # Edge case for the transition\n+            (2020, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (2020, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            # Edge case for year 2000\n+            (2048, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (2048, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        ]\n+        \n+        for year, rfc850str, expected_date in current_year_tests:\n+            with self.subTest(current_year=year, rfc850str=rfc850str):\n+                mocked_datetime.side_effect = datetime\n+                mocked_datetime.utcnow = mock.Mock(return_value=datetime(year, 1, 1))\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..758475c 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,25 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class TestTextChoicesBehavior(SimpleTestCase):\n+    def test_created_object_value_type(self):\n+        obj = MyObject(my_str_value=MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(obj.my_str_value, str)\n+        self.assertEqual(obj.my_str_value, \"first\")\n+        self.assertEqual(str(obj.my_str_value), \"first\")\n+\n+    def test_enum_str(self):\n+        for member in MyChoice:\n+            with self.subTest(member=member):\n+                self.assertEqual(str(MyChoice[member.name]), str(member.value))\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..0ab36d2 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -168,6 +168,19 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsInstance(val, str)\n         self.assertEqual(val, 'translated')\n \n+    def test_overriding_get_FIELD_display(self):\n+        \"\"\"\n+        Test that overriding the get_FIELD_display method works correctly.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_iterator_choices(self):\n         \"\"\"\n         get_choices() works with Iterators.\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..d75b20d 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -2,6 +2,13 @@ from django.urls import include, path, re_path\n \n from . import views\n \n+from django.urls import re_path\n+from . import views\n+\n+urlpatterns += [\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.modules, name='modules'),\n+]\n+\n urlpatterns = [\n     path('articles/2003/', views.empty_view, name='articles-2003'),\n     path('articles/<int:year>/', views.empty_view, name='articles-year'),\n@@ -14,4 +21,4 @@ urlpatterns = [\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+]\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..65e8412 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,35 @@\n+\n+from django.test import SimpleTestCase, TestCase\n+from django.db import models\n+\n+class InheritedChoicesTest(TestCase):\n+    def test_inherited_and_overridden_choices_display(self):\n+        class BaseModel(models.Model):\n+            foo_choice = [('A', 'Base A'), ('B', 'Base B')]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ChildModel(BaseModel):\n+            foo_choice = [('A', 'Child A'), ('B', 'Child B'), ('C', 'Child C')]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+        # Testing existing choices overridden in the child model\n+        instance_a = ChildModel(field_foo='A')\n+        self.assertEqual(instance_a.get_field_foo_display(), 'Child A')\n+\n+        instance_b = ChildModel(field_foo='B')\n+        self.assertEqual(instance_b.get_field_foo_display(), 'Child B')\n+\n+        # Testing a new choice added in the child model\n+        instance_c = ChildModel(field_foo='C')\n+        self.assertEqual(instance_c.get_field_foo_display(), 'Child C')\n+\n+        # Test for a value not in the choices\n+        instance_invalid = ChildModel(field_foo='D')\n+        self.assertEqual(instance_invalid.get_field_foo_display(), 'D')\n+\n import pickle\n \n from django import forms\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..a48dbd7 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,7 +76,26 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_base_language_fallback(self):\n+        \"\"\"\n+        Test that no error is raised for sublanguages when a base language is available.\n+        \"\"\"\n+        tests = [\n+            'de-at',  # Base 'de' is available\n+            'ca-ES-valencia',  # Base 'ca' is available\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..43a6112 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,71 @@\n+\n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_foreign_key_ordering(self):\n+        # Test that foreign key constraints are properly handled.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+class TestDatabaseCreationTransaction(TestCase):\n+    databases = {'default'}\n+\n+    def test_rollback_emulation(self):\n+        \"\"\"\n+        Test rollback emulation by setting serialized_rollback to True\n+        and verifying data integrity.\n+        \"\"\"\n+        Object.objects.create()\n+        ObjectReference.objects.create(obj_id=1)\n+\n+        # Emulate serialized rollback\n+        serialized_data = connection.creation.serialize_db_to_string()\n+        Object.objects.all().delete()\n+        ObjectReference.objects.all().delete()\n+\n+        connection.creation.deserialize_db_from_string(serialized_data)\n+        self.assertEqual(Object.objects.count(), 1)\n+        self.assertEqual(ObjectReference.objects.count(), 1)\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +73,8 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..0f0dc0f 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -128,6 +128,35 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_correct_hint_for_ambiguous_relationship(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+        \n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('members')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.members', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_ambiguous_relationship_model(self):\n \n         class Person(models.Model):\n@@ -159,6 +188,35 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_correct_hint_for_ambiguous_relationship(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+        \n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('members')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.members', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..058b740 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1241,6 +1241,61 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'foo': 'value',\n+            'secret': 'value',\n+            'token': 'value',\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            'foo': 'value',\n+            'secret': reporter_filter.cleansed_substitute,\n+            'token': reporter_filter.cleansed_substitute,\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': reporter_filter.cleansed_substitute},\n+                {'token': reporter_filter.cleansed_substitute},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', tuple(initial.items())),\n+            tuple(cleansed.items()),\n+        )\n+\n     def test_cleanse_setting_recurses_in_dictionary(self):\n         reporter_filter = SafeExceptionReporterFilter()\n         initial = {'login': 'cooper', 'password': 'secret'}\n@@ -1249,6 +1304,61 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n+    def test_cleanse_setting_recurses_in_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'foo': 'value',\n+            'secret': 'value',\n+            'token': 'value',\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            'foo': 'value',\n+            'secret': reporter_filter.cleansed_substitute,\n+            'token': reporter_filter.cleansed_substitute,\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': reporter_filter.cleansed_substitute},\n+                {'token': reporter_filter.cleansed_substitute},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', tuple(initial.items())),\n+            tuple(cleansed.items()),\n+        )\n+\n     def test_request_meta_filtering(self):\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n@@ -1257,6 +1367,61 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'foo': 'value',\n+            'secret': 'value',\n+            'token': 'value',\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            'foo': 'value',\n+            'secret': reporter_filter.cleansed_substitute,\n+            'token': reporter_filter.cleansed_substitute,\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': reporter_filter.cleansed_substitute},\n+                {'token': reporter_filter.cleansed_substitute},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', tuple(initial.items())),\n+            tuple(cleansed.items()),\n+        )\n+\n     def test_exception_report_uses_meta_filtering(self):\n         response = self.client.get('/raises500/', HTTP_SECRET_HEADER='super_secret')\n         self.assertNotIn(b'super_secret', response.content)\n@@ -1265,6 +1430,61 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             HTTP_SECRET_HEADER='super_secret',\n             HTTP_ACCEPT='application/json',\n         )\n+\n+    def test_cleanse_setting_recurses_in_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'foo': 'value',\n+            'secret': 'value',\n+            'token': 'value',\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            'foo': 'value',\n+            'secret': reporter_filter.cleansed_substitute,\n+            'token': reporter_filter.cleansed_substitute,\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': reporter_filter.cleansed_substitute},\n+                {'token': reporter_filter.cleansed_substitute},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', tuple(initial.items())),\n+            tuple(cleansed.items()),\n+        )\n         self.assertNotIn(b'super_secret', response.content)\n \n \n",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..45734df 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -54,8 +54,48 @@ class MigrationTestBase(TransactionTestCase):\n \n     def assertColumnNotNull(self, table, column, using='default'):\n         self.assertFalse(self._get_column_allows_null(table, column, using))\n-\n-    def assertIndexExists(self, table, columns, value=True, using='default', index_type=None):\n+    from django.db import migrations, models\n+    from django.db import connections\n+    from django.test import TestCase\n+    from django.test.utils import skipUnlessDBFeature\n+\n+    class MigrationTestCase(TestCase):\n+\n+        def assertUniqueConstraintExists(self, table, columns, value=True, using='default'):\n+            with connections[using].cursor() as cursor:\n+                constraints = connections[using].introspection.get_constraints(cursor, table).values()\n+                self.assertEqual(\n+                    value,\n+                    any(c['unique'] for c in constraints if c['columns'] == list(columns)),\n+                )\n+\n+        @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+        def test_alter_index_together_remove_with_unique_together(self):\n+            app_label = 'test_alintoremove_wunto'\n+            table_name = '%s_pony' % app_label\n+            project_state = self.set_up_test_model(app_label, unique_together=True)\n+            self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+            # Add index together.\n+            new_state = project_state.clone()\n+            operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+            operation.state_forwards(app_label, new_state)\n+            with connections[using].schema_editor() as editor:\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            self.assertIndexExists(table_name, ['pink', 'weight'])\n+            # Remove index together.\n+            project_state = new_state\n+            new_state = project_state.clone()\n+            operation = migrations.AlterIndexTogether('Pony', set())\n+            operation.state_forwards(app_label, new_state)\n+            with connections[using].schema_editor() as editor:\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+            self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        def set_up_test_model(self, app_label, unique_together=False):\n+            # Mock setup for testing\n+            # Implement this method to set up test model with the given unique_together option\n+            pass\n         with connections[using].cursor() as cursor:\n             self.assertEqual(\n                 value,\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..e5771db 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,7 +685,25 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n-    def test_fast_delete_empty_no_update_can_self_select(self):\n+    def test_zero_deletion_with_foreign_keys(self):\n+        \"\"\"\n+        Test deleting a queryset that results in zero deletions for models with foreign keys.\n+        The result should consistently include the model-label keys with zero values.\n+        \"\"\"\n+        deleted, deleted_objs = HiddenUser.objects.filter(id=-1).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertIn('delete.HiddenUser', deleted_objs)\n+        self.assertEqual(deleted_objs['delete.HiddenUser'], 0)\n+\n+    def test_zero_deletion_without_foreign_keys(self):\n+        \"\"\"\n+        Test deleting a queryset that results in zero deletions for models without foreign keys.\n+        The result should consistently include the model-label keys with zero values.\n+        \"\"\"\n+        deleted, deleted_objs = R.objects.filter(id=-1).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertIn('delete.R', deleted_objs)\n+        self.assertEqual(deleted_objs['delete.R'], 0)\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n         `no_update_can_self_select` feature should work even if the specified\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..411bac2 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,48 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_async_static_file_handling(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/test-file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+\n+        # Construct the file path and read its contents\n+        test_static_root = Path(__file__).parent / 'project' / 'static'\n+        file_path = test_static_root / 'test-file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+\n+        # Validate the response\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"test-file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        await communicator.wait()\n+\n+    async def test_async_static_file_not_found(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/nonexistent-file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..16e3073 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -198,7 +198,18 @@ class TestUtilsText(SimpleTestCase):\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n         )\n-        for value, output, is_unicode in items:\n+        # Additional cases to test the fix for leading/trailing dashes/underscores\n+        additional_items = (\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('--Leading and trailing--', 'leading-and-trailing', False),\n+            ('__Leading and trailing underscores__', 'leading-and-trailing-underscores', False),\n+            ('_Mixed_--_Cases_-_', 'mixed-cases', False),\n+            ('---Multiple---dashes---', 'multiple-dashes', False),\n+            ('___', '', False),  # Edge case with only underscores\n+            ('---', '', False),  # Edge case with only dashes\n+        )\n+\n+        for value, output, is_unicode in items + additional_items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n         # interning the result may be useful, e.g. when fed to Path.\n         self.assertEqual(sys.intern(text.slugify('a')), 'a')\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..ad60084 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2819,7 +2819,71 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Create characters\n+        threepwood = Character.objects.create(username='threepwood', last_action='2023-10-01')\n+        marley = Character.objects.create(username='marley', last_action='2023-10-02')\n+\n+        # Create funny jokes\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+\n+        # Create a non-funny joke (should not affect choices)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        # Add relationships\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13321": "",
  "django__django-13401": "",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..94ba85c 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,6 +39,41 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n+    def test_token_invalid_after_email_change_for_integer_username_user(self):\n+        \"\"\"Updating the email of an IntegerUsernameUser invalidates the token.\"\"\"\n+        user = IntegerUsernameUser.objects.create_user(\n+            username=42,\n+            email='integer@example.com',\n+            password='testpw'\n+        )\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertTrue(p0.check_token(user, tk1))\n+        user.email = 'new_integer@example.com'\n+        user.save()\n+        self.assertFalse(p0.check_token(user, tk1))\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..da556df 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,7 +19,9 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n-from django.core.management.commands.loaddata import Command as LoaddataCommand\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n@@ -1866,8 +1868,30 @@ class ArgumentOrder(AdminScriptTestCase):\n             \"('verbosity', 1)]\" % option_b\n         )\n \n-\n-@override_settings(ROOT_URLCONF='admin_scripts.urls')\n+class ExecuteFromCommandLineTestCase(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_different_prog_name_in_argv(self):\n+        \"\"\"\n+        Test with a different program name passed in argv to ensure the\n+        program name is taken from argv and not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['/usr/local/bin/python'] + args):\n+                execute_from_command_line(['my-django-admin'] + args)\n+        self.assertIn('usage: my-django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n     available_apps = [\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..def70e4 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -30,14 +31,94 @@ class ShellCommandTestCase(SimpleTestCase):\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n         select.return_value = ([], [], [])\n         with self.assertRaisesMessage(CommandError, \"Couldn't import ipython interface.\"):\n             call_command('shell', interface='ipython')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'bpython': None})\n     def test_shell_with_bpython_not_installed(self, select):\n         select.return_value = ([], [], [])\n@@ -49,4 +130,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..9d6f723 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -967,7 +967,22 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n \n-    def test_verbose_name_plural_inline(self):\n+    def test_verbose_name_fallback_to_plural(self):\n+        class FallbackVerboseNameInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Fallback Child'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [FallbackVerboseNameInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        # Check if verbose_name_plural defaults to verbose_name + 's'\n+        self.assertContains(response, '<h2>Fallback Childs</h2>')\n+        self.assertContains(response, 'Add another Fallback Child')\n+        self.assertNotContains(response, '<h2>Profiles</h2>')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name_plural = 'Non-verbose childs'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..81de656 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -582,15 +582,36 @@ class TestQuerying(TestCase):\n \n     def test_isnull_key(self):\n         # key__isnull=False works the same as has_key='key'.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+\n+        # Additional test case for when the key has a value of JSON null\n         self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__a__isnull=True),\n             NullableJSONModel.objects.filter(value__a__isnull=True),\n             self.objs[:3] + self.objs[5:],\n         )\n         self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+\n+        # Additional test case for when the key has a value of JSON null\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__a__isnull=True),\n             NullableJSONModel.objects.filter(value__a__isnull=False),\n             [self.objs[3], self.objs[4]],\n         )\n         self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+\n+        # Additional test case for when the key has a value of JSON null\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__a__isnull=True),\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n         )\n",
  "django__django-13768": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex ad86558..5f05a7b 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -204,12 +204,15 @@ class Signal:\n         # Call each receiver with whatever arguments it can accept.\n         # Return a list of tuple pairs [(receiver, response), ... ].\n         responses = []\n+        import logging\n+        logger = logging.getLogger('django.dispatch')\n+        \n         for receiver in self._live_receivers(sender):\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n                 responses.append((receiver, err))\n-            else:\n+                logger.exception(f\"Error calling {receiver} in Signal.send_robust()\")\n                 responses.append((receiver, response))\n         return responses\n \n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..a0ad73d 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,27 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n+from .models import ChoiceModel\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n \n-class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+class ModelChoiceFieldErrorMessagesTestCase(TestCase):\n+    def test_modelchoicefield_value_placeholder(self):\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        # This test ensures the invalid choice value is shown in the error message\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +326,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..e5efc00 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -81,7 +81,11 @@ class ToFieldChild(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, to_field='name', related_name='to_field_children')\n \n \n-# Multiple paths to the same model (#7110, #7125)\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n class Category(models.Model):\n     name = models.CharField(max_length=20)\n \n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..bc6b61b 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -19,6 +20,17 @@ class QTests(SimpleTestCase):\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n+    def test_combine_with_dict_keys(self):\n+        # Test combining Q objects using dict_keys with | operator\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n+        # Test combining Q objects using dict_keys with & operator\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n     def test_combine_not_q_object(self):\n         obj = object()\n         q = Q(x=1)\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..ce01965 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,12 +28,14 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n+from django.db.models import Q, Exists, OuterRef\n from django.utils.functional import SimpleLazyObject\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n     RemoteEmployee, Result, SimulationRun, Time,\n )\n+from django.db.models import Q, Exists, OuterRef\n \n \n class BasicExpressionsTests(TestCase):\n@@ -43,6 +45,27 @@ class BasicExpressionsTests(TestCase):\n             name=\"Example Inc.\", num_employees=2300, num_chairs=5,\n             ceo=Employee.objects.create(firstname=\"Joe\", lastname=\"Smith\", salary=10)\n         )\n+    \n+    def test_commutativity_of_q_and_exists(self):\n+        # Setting up queries for testing\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        # Test commutativity for AND operation\n+        try:\n+            result1 = Employee.objects.filter(Q() & Exists(is_ceo))\n+            result2 = Employee.objects.filter(Exists(is_ceo) & Q())\n+            self.assertCountEqual(result1, result2, \"AND operation is not commutative between Q and Exists\")\n+        except TypeError:\n+            self.fail(\"TypeError raised during AND operation between Q and Exists\")\n+\n+        # Test commutativity for OR operation\n+        try:\n+            result1 = Employee.objects.filter(Q() | Exists(is_ceo))\n+            result2 = Employee.objects.filter(Exists(is_ceo) | Q())\n+            self.assertCountEqual(result1, result2, \"OR operation is not commutative between Q and Exists\")\n+        except TypeError:\n+            self.fail(\"TypeError raised during OR operation between Q and Exists\")\n         cls.foobar_ltd = Company.objects.create(\n             name=\"Foobar Ltd.\", num_employees=3, num_chairs=4, based_in_eu=True,\n             ceo=Employee.objects.create(firstname=\"Frank\", lastname=\"Meyer\", salary=20)\n@@ -792,6 +815,27 @@ class BasicExpressionsTests(TestCase):\n                 output_field=BooleanField(),\n             ),\n         )\n+    \n+    def test_commutativity_of_q_and_exists(self):\n+        # Setting up queries for testing\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        # Test commutativity for AND operation\n+        try:\n+            result1 = Employee.objects.filter(Q() & Exists(is_ceo))\n+            result2 = Employee.objects.filter(Exists(is_ceo) & Q())\n+            self.assertCountEqual(result1, result2, \"AND operation is not commutative between Q and Exists\")\n+        except TypeError:\n+            self.fail(\"TypeError raised during AND operation between Q and Exists\")\n+\n+        # Test commutativity for OR operation\n+        try:\n+            result1 = Employee.objects.filter(Q() | Exists(is_ceo))\n+            result2 = Employee.objects.filter(Exists(is_ceo) | Q())\n+            self.assertCountEqual(result1, result2, \"OR operation is not commutative between Q and Exists\")\n+        except TypeError:\n+            self.fail(\"TypeError raised during OR operation between Q and Exists\")\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n     def test_boolean_expression_combined(self):\n@@ -803,6 +847,27 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_ceo) | Exists(is_poc)),\n             [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n         )\n+    \n+    def test_commutativity_of_q_and_exists(self):\n+        # Setting up queries for testing\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        \n+        # Test commutativity for AND operation\n+        try:\n+            result1 = Employee.objects.filter(Q() & Exists(is_ceo))\n+            result2 = Employee.objects.filter(Exists(is_ceo) & Q())\n+            self.assertCountEqual(result1, result2, \"AND operation is not commutative between Q and Exists\")\n+        except TypeError:\n+            self.fail(\"TypeError raised during AND operation between Q and Exists\")\n+\n+        # Test commutativity for OR operation\n+        try:\n+            result1 = Employee.objects.filter(Q() | Exists(is_ceo))\n+            result2 = Employee.objects.filter(Exists(is_ceo) | Q())\n+            self.assertCountEqual(result1, result2, \"OR operation is not commutative between Q and Exists\")\n+        except TypeError:\n+            self.fail(\"TypeError raised during OR operation between Q and Exists\")\n         self.assertCountEqual(\n             Employee.objects.filter(Exists(is_ceo) & Exists(is_poc)),\n             [self.max],\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..eb0743e 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1146,6 +1146,11 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from django.urls import resolve, path\n+from django.test import SimpleTestCase, override_settings\n+from urlpatterns_reverse import views\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..e2751db 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import override_settings\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -66,7 +68,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.tests.model_fields.test_autofield.MyBigAutoField')\n+    def test_default_auto_field_setting_mybigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.tests.model_fields.test_autofield.MySmallAutoField')\n+    def test_default_auto_field_setting_mysmallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +104,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.tests.model_fields.test_autofield.MyBigAutoField')\n+    def test_default_auto_field_setting_mybigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.tests.model_fields.test_autofield.MySmallAutoField')\n+    def test_default_auto_field_setting_mysmallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..0b49822 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -14,6 +14,7 @@ from django.core import mail\n from django.core.exceptions import ValidationError\n from django.core.mail import EmailMultiAlternatives\n from django.forms.fields import CharField, Field, IntegerField\n+from django.forms import forms\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n@@ -1020,7 +1021,17 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_password_hash_widget_label(self):\n+        \"\"\"\n+        Test that the ReadOnlyPasswordHashWidget doesn't have a 'for' attribute in\n+        the <label> element because it doesn't have any labelable elements.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..65e268b 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,6 +655,36 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_serialize_models(self):\n+        \"\"\"\n+        Test that models.Model is serialized with the correct import statement.\n+        \"\"\"\n+        self.assertSerializedEqual(models.Model)\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(models.Model),\n+            (\"('models.Model', {'from django.db import models'})\", set())\n+        )\n+\n+    def test_serialize_custom_field_and_mixin(self):\n+        \"\"\"\n+        Test serialization of custom fields and mixins used in a migration.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(MyMixin),\n+            (\"('app.models.MyMixin', {'import app.models'})\", set())\n+        )\n+\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(MyField),\n+            (\"('app.models.MyField', {'import app.models'})\", set())\n+        )\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..60edf2f 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -358,7 +358,31 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n+\n+    def test_formset_non_form_errors_with_nonform_class(self):\n+        \"\"\"Test that nonform errors include the nonform CSS class when rendered.\"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',\n+            'drinks-INITIAL_FORMS': '0',\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n+\n+    def test_formset_non_form_errors_without_data(self):\n+        \"\"\"Test nonform errors when no data is provided (should be empty).\"\"\"\n+        formset = FavoriteDrinksFormSet(prefix='drinks')\n+        self.assertTrue(formset.is_valid())\n+        self.assertEqual(str(formset.non_form_errors()), '<ul class=\"errorlist nonform\"></ul>')\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n",
  "django__django-14672": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 6fb82ec..87148a9 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -821,6 +821,31 @@ class ShadowingFieldsTests(SimpleTestCase):\n             )\n         ])\n \n+    def test_proxy_model_with_m2m_through(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # The test will pass if no TypeError is raised during model check\n+        self.assertEqual(ProxyParent.check(), [])\n+\n     def test_multiinheritance_clash(self):\n         class Mother(models.Model):\n             clash = models.IntegerField()\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..1e31aad 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -294,8 +294,53 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n-@override_settings(ROOT_URLCONF='admin_views.urls')\n-class SeleniumTests(AdminSeleniumTestCase):\n+import json\n+from django.test import RequestFactory\n+from django.urls import path\n+from django.http import JsonResponse\n+from django.utils.decorators import method_decorator\n+from django.test import TestCase\n+from django.contrib.auth.models import User\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from .models import Question\n+\n+class TestAutocompleteJsonView(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser('admin', 'admin@example.com', 'password')\n+        cls.factory = RequestFactory()\n+        cls.url = '/test/'\n+        cls.opts = {'app_label': 'admin_views', 'model_name': 'question'}\n+        cls.as_view_args = {'admin_site': None}\n+\n+    def setUp(self):\n+        self.client.force_login(self.superuser)\n+\n+    def test_serialize_result_with_extra_field(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return super().serialize_result(obj, to_field_name) | {'extra_field': 'extra_value'}\n+\n+        Question.objects.create(question='Question 1')\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = CustomAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertIn('extra_field', data['results'][0])\n+        self.assertEqual(data['results'][0]['extra_field'], 'extra_value')\n+\n+    def test_serialize_result_without_extra_field(self):\n+        class PlainAutocompleteJsonView(AutocompleteJsonView):\n+            pass\n+\n+        Question.objects.create(question='Question 2')\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = PlainAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertNotIn('extra_field', data['results'][0])\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n \n     def setUp(self):\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..4f63132 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5094,6 +5094,68 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         self.assertContains(response, '<div class=\"readonly\">No opinion</div>', html=True)\n \n     def test_readonly_foreignkey_links(self):\n+        \"\"\"\n+        Test that readonly ForeignKey fields link to the correct URL in the\n+        default admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+        response = self.client.get(\n+            reverse('admin:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        )\n+        self.assertContains(\n+            response,\n+            reverse('admin:admin_views_language_change', args=(language.pk,)),\n+        )\n+        self.assertContains(\n+            response,\n+            reverse('admin:auth_user_change', args=(self.superuser.pk,)),\n+        )\n+        self.assertContains(\n+            response,\n+            reverse('admin:admin_views_chapter_change', args=(chapter.pk,)),\n+        )\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test that readonly ForeignKey fields link to the correct URL in a\n+        custom admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+        response = self.client.get(\n+            reverse('site2:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        )\n+        self.assertContains(\n+            response,\n+            reverse('site2:admin_views_language_change', args=(language.pk,)),\n+        )\n+        self.assertContains(\n+            response,\n+            reverse('site2:auth_user_change', args=(self.superuser.pk,)),\n+        )\n+        self.assertContains(\n+            response,\n+            reverse('site2:admin_views_chapter_change', args=(chapter.pk,)),\n+        )\n         \"\"\"\n         ForeignKey readonly fields render as links if the target model is\n         registered in admin.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..1ab1eaf 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +343,22 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_choice_value_in_dictionary(self):\n+        value = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        show_fields = {value: ['first_name', 'last_name']}\n+        self.assertIn(value, show_fields)\n+        self.assertEqual(show_fields[value], ['first_name', 'last_name'])\n+\n+    def test_choice_value_in_set(self):\n+        value = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        values_set = {value}\n+        self.assertIn(value, values_set)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..4d1a307 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,7 +154,23 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n-    def test_form_as_table_data(self):\n+    def test_multivaluefield_label_no_index(self):\n+        form = ComplexFieldForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_field1\">Field1:</label></th>\n+            <td><input type=\"text\" name=\"field1_0\" id=\"id_field1_0\" required>\n+            <select multiple name=\"field1_1\" id=\"id_field1_1\" required>\n+            <option value=\"J\">John</option>\n+            <option value=\"P\">Paul</option>\n+            <option value=\"G\">George</option>\n+            <option value=\"R\">Ringo</option>\n+            </select>\n+            <input type=\"text\" name=\"field1_2_0\" id=\"id_field1_2_0\" required>\n+            <input type=\"text\" name=\"field1_2_1\" id=\"id_field1_2_1\" required></td></tr>\n+            \"\"\",\n+        )\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..4294e27 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -70,6 +70,10 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # IPv6.\n             ('http://[12:34::3a53]/', 'http://[12:34::3a53]/'),\n             ('http://[a34:9238::]:8080/', 'http://[a34:9238::]:8080/'),\n+            # Invalid IPv6 URL should raise ValidationError, not ValueError.\n+            ('////]@N.AN',),\n+            ('http://[::1::2]/',),\n+            ('http://[::ffff:192.0.2.256]/',),\n         ]\n         for url, expected in tests:\n             with self.subTest(url=url):\n@@ -100,6 +104,10 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            # Invalid IPv6 URL should raise ValidationError, not ValueError.\n+            ('////]@N.AN',),\n+            ('http://[::1::2]/',),\n+            ('http://[::ffff:192.0.2.256]/',),\n         ]\n         msg = \"'Enter a valid URL.'\"\n         for value in tests:\n@@ -107,7 +115,22 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n                 with self.assertRaisesMessage(ValidationError, msg):\n                     f.clean(value)\n \n-    def test_urlfield_clean_required(self):\n+    def test_urlfield_clean_invalid_ipv6(self):\n+        f = URLField()\n+        invalid_ipv6_urls = [\n+            '////]@N.AN',  # Invalid IPv6 URL.\n+            'http://[::1::2]/',  # Invalid IPv6 format.\n+            'http://[::ffff:192.0.2.256]/',  # Invalid IP address.\n+            # Invalid IPv6 URL should raise ValidationError, not ValueError.\n+            ('////]@N.AN',),\n+            ('http://[::1::2]/',),\n+            ('http://[::ffff:192.0.2.256]/',),\n+        ]\n+        msg = \"'Enter a valid URL.'\"\n+        for value in invalid_ipv6_urls:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg):\n+                    f.clean(value)\n         f = URLField()\n         msg = \"'This field is required.'\"\n         with self.assertRaisesMessage(ValidationError, msg):\n",
  "django__django-15213": "",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..5239070 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -143,7 +144,29 @@ class CookieTests(BaseTests, SimpleTestCase):\n         for illegal in non_compliant_chars:\n             self.assertEqual(encoded.find(illegal), -1)\n \n-    def test_json_encoder_decoder(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that the extra_tags attribute is correctly preserved through\n+        serialization and deserialization, especially when it is an empty string.\n+        \"\"\"\n+        storage = self.get_storage()\n+        # Create a message with empty extra_tags and encode/decode it\n+        message_with_empty_tags = Message(constants.INFO, 'Test message', extra_tags=\"\")\n+        encoded = storage._encode(message_with_empty_tags)\n+        decoded_message = storage._decode(encoded)\n+        self.assertEqual(decoded_message.extra_tags, \"\")\n+\n+        # Create a message with None extra_tags and encode/decode it\n+        message_with_none_tags = Message(constants.INFO, 'Test message', extra_tags=None)\n+        encoded = storage._encode(message_with_none_tags)\n+        decoded_message = storage._decode(encoded)\n+        self.assertIsNone(decoded_message.extra_tags)\n+\n+        # Create a message with some extra_tags and encode/decode it\n+        message_with_tags = Message(constants.INFO, 'Test message', extra_tags=\"some tags\")\n+        encoded = storage._encode(message_with_tags)\n+        decoded_message = storage._decode(encoded)\n+        self.assertEqual(decoded_message.extra_tags, \"some tags\")\n         \"\"\"\n         A complex nested data structure containing Message\n         instances is properly encoded/decoded by the custom JSON\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..fa1141d 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,6 +1,7 @@\n from pathlib import Path\n from unittest import mock\n \n+from pathlib import Path\n from django.template import autoreload\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import require_jinja2\n@@ -39,7 +40,20 @@ class TemplateReloadTests(SimpleTestCase):\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n         mock_reset.assert_not_called()\n \n-    def test_watch_for_template_changes(self):\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_base_dir_in_template_dirs(self, mock_reset):\n+        \"\"\" Test that adding BASE_DIR to TEMPLATES[0]['DIRS'] doesn't break autoreload. \"\"\"\n+        # Simulate the BASE_DIR being added to the template directories\n+        base_dir_path = Path(ROOT)\n+        with override_settings(TEMPLATES=[{\n+            'DIRS': [base_dir_path],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]):\n+            # Pretend a file change in BASE_DIR\n+            file_path = base_dir_path / 'somefile.txt'\n+            result = autoreload.template_changed(None, file_path)\n+            self.assertTrue(result)\n+            mock_reset.assert_called_once()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n@@ -88,7 +102,20 @@ class TemplateReloadTests(SimpleTestCase):\n @require_jinja2\n @override_settings(INSTALLED_APPS=['template_tests'])\n class Jinja2TemplateReloadTests(SimpleTestCase):\n-    def test_watch_for_template_changes(self):\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_base_dir_in_template_dirs(self, mock_reset):\n+        \"\"\" Test that adding BASE_DIR to TEMPLATES[0]['DIRS'] doesn't break autoreload. \"\"\"\n+        # Simulate the BASE_DIR being added to the template directories\n+        base_dir_path = Path(ROOT)\n+        with override_settings(TEMPLATES=[{\n+            'DIRS': [base_dir_path],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]):\n+            # Pretend a file change in BASE_DIR\n+            file_path = base_dir_path / 'somefile.txt'\n+            result = autoreload.template_changed(None, file_path)\n+            self.assertTrue(result)\n+            mock_reset.assert_called_once()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n",
  "django__django-15400": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\nindex f0097c4..3e5675a 100644\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -297,6 +297,42 @@ class LazyObjectTestCase(TestCase):\n         self.assertIs(obj._wrapped, empty)\n         self.assertIs(obj2._wrapped, empty)\n \n+    def test_radd_with_objects(self):\n+        class CustomInt:\n+            def __init__(self, value):\n+                self.value = value\n+\n+            def __radd__(self, other):\n+                return CustomInt(self.value + other)\n+\n+            def __eq__(self, other):\n+                return isinstance(other, CustomInt) and self.value == other.value\n+\n+            def __str__(self):\n+                return str(self.value)\n+\n+            def __repr__(self):\n+                return f\"CustomInt({self.value})\"\n+\n+        obj1 = self.lazy_wrap(CustomInt(5))\n+        self.assertEqual(3 + obj1, CustomInt(8))\n+        self.assertEqual(obj1 + 3, CustomInt(8))\n+\n+    def test_radd_with_strings(self):\n+        obj1 = self.lazy_wrap(\"world\")\n+        self.assertEqual(\"hello \" + obj1, \"hello world\")\n+        self.assertEqual(obj1 + \"!\", \"world!\")\n+\n+    def test_radd_with_empty(self):\n+        obj1 = self.lazy_wrap(\"\")\n+        self.assertEqual(\"Prefix \" + obj1, \"Prefix \")\n+        self.assertEqual(obj1 + \"Suffix\", \"Suffix\")\n+\n+    def test_radd_with_lists(self):\n+        obj1 = self.lazy_wrap([2, 3])\n+        self.assertEqual([1] + obj1, [1, 2, 3])\n+        self.assertEqual(obj1 + [4, 5], [2, 3, 4, 5])\n+\n \n class SimpleLazyObjectTestCase(LazyObjectTestCase):\n     # By inheriting from LazyObjectTestCase and redefining the lazy_wrap()\n",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..db81747 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,29 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Verify was_modified_since handles an empty string for the If-Modified-Since header.\n+        \"\"\"\n+        mtime = 1\n+        # Assuming empty string should imply the resource is modified.\n+        self.assertTrue(was_modified_since(header=\"\", mtime=mtime))\n+\n+    def test_was_modified_since_invalid_string(self):\n+        \"\"\"\n+        Verify was_modified_since handles invalid date strings gracefully.\n+        \"\"\"\n+        mtime = 1\n+        # Invalid date string, should handle gracefully.\n+        self.assertTrue(was_modified_since(header=\"invalid-date\", mtime=mtime))\n+\n+    def test_was_modified_since_none_header(self):\n+        \"\"\"\n+        Verify was_modified_since handles None as a header gracefully.\n+        \"\"\"\n+        mtime = 1\n+        # None value for header should be treated similar to an empty string.\n+        self.assertTrue(was_modified_since(header=None, mtime=mtime))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..ec39e78 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -8,6 +9,7 @@ from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n from django.core.management import BaseCommand, CommandError, find_commands\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management.utils import (\n     find_command,\n     get_random_secret_key,\n@@ -411,7 +413,37 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_help_formatter_preserves_newlines(self):\n+        \"\"\"\n+        Test that the help formatter preserves new lines in command help strings.\n+        \"\"\"\n+        class TestCommand(BaseCommand):\n+            help = '''\n+            This is a test command.\n+            \n+            Example usage:\n+                ./manage.py test_command arg1 arg2\n+            '''\n+\n+        out = StringIO()\n+        management.call_command(TestCommand(), '--help', stdout=out)\n+        output = out.getvalue()\n+\n+        self.assertIn(\"Example usage:\\n    ./manage.py test_command arg1 arg2\", output)\n+\n+    def test_create_parser_with_argument_defaults_help_formatter(self):\n+        \"\"\"\n+        Test that the ArgumentDefaultsHelpFormatter can be used with the parser.\n+        \"\"\"\n+        epilog = \"some epilog text\"\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"subcommand\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter\n+        )\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+        self.assertEqual(parser.epilog, epilog)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..f0f7c05 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,7 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n+from django.core.serializers.json import DjangoJSONEncoder\n+import json\n from django.utils.functional import lazystr\n from django.utils.html import (\n     conditional_escape,\n@@ -211,7 +214,42 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_with_data(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                if 'special' in o:\n+                    return json.dumps({\"special_key\": \"custom_value\"})\n+                return super().encode(o)\n+\n+        self.assertHTMLEqual(\n+            json_script({\"special\": True}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"special_key\": \"custom_value\"}</script>',\n+        )\n+\n+        self.assertHTMLEqual(\n+            json_script({\"normal\": \"data\"}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"normal\": \"data\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_with_id(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"id_key\": \"id_value\"})\n+\n+        self.assertHTMLEqual(\n+            json_script({\"dummy\": \"value\"}, element_id=\"custom_id\", encoder=CustomDjangoJSONEncoder),\n+            '<script id=\"custom_id\" type=\"application/json\">{\"id_key\": \"id_value\"}</script>',\n+        )\n         self.assertHTMLEqual(\n             json_script({\"key\": \"value\"}),\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n",
  "django__django-15790": "",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..735f482 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,48 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_on_proxy_model(self):\n+        # Create instances for testing\n+        custom_model = CustomModel.objects.create(name=\"Test Name\")\n+        proxy_custom_model = ProxyCustomModel.objects.get(id=custom_model.id)\n+        another_model = AnotherModel.objects.create(custom=proxy_custom_model)\n+\n+        # Test using select_related and only on proxy model\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = queryset.get()\n+\n+        # Verify the result\n+        self.assertEqual(result, another_model)\n+        self.assertEqual(result.custom.name, \"Test Name\")\n+\n+    def test_select_related_only_with_different_field(self):\n+        # Create instances for testing\n+        custom_model = CustomModel.objects.create(name=\"Another Test\")\n+        proxy_custom_model = ProxyCustomModel.objects.get(id=custom_model.id)\n+        another_model = AnotherModel.objects.create(custom=proxy_custom_model)\n+\n+        # Test using select_related and only with a different field\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__id\")\n+        result = queryset.get()\n+\n+        # Verify the result\n+        self.assertEqual(result, another_model)\n+        self.assertEqual(result.custom.id, proxy_custom_model.id)\n+\n+    def test_select_related_only_with_no_field(self):\n+        # Create instances for testing where only is not restricting fields\n+        custom_model = CustomModel.objects.create(name=\"Full Load Test\")\n+        proxy_custom_model = ProxyCustomModel.objects.get(id=custom_model.id)\n+        another_model = AnotherModel.objects.create(custom=proxy_custom_model)\n+\n+        # Test using select_related without using only to restrict fields\n+        queryset = AnotherModel.objects.select_related(\"custom\")\n+        result = queryset.get()\n+\n+        # Verify the result\n+        self.assertEqual(result, another_model)\n+        self.assertEqual(result.custom.name, \"Full Load Test\")\n+\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..c15de0c 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -152,6 +152,11 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         )\n \n     def test_parameters(self):\n+        # Test to ensure additional parameters are before dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +188,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..e443ead 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,14 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_ignored_empty_form(self):\n+        # Ensure empty_permitted has no effect on empty_form\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": True})\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..e1357d7 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -884,6 +885,52 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # original hashed password contains $\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field_with_uuid(self):\n+        user = User.objects.create_user(username=\"uuid_test_user\", password=\"password123\")\n+        user.uuid = \"11111111-aaaa-bbbb-cccc-222222222222\"\n+        user.save()\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (uuid instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.uuid,),\n+            current_app=user._meta.app_label\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+            current_app=user._meta.app_label\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field_with_username(self):\n+        user = User.objects.create_user(username=\"username_test_user\", password=\"password123\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (username instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+            current_app=user._meta.app_label\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+            current_app=user._meta.app_label\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_bug_19349_bound_password_field(self):\n         user = User.objects.get(username=\"testclient\")\n         form = UserChangeForm(data={}, instance=user)\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..3749cd7 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,6 +507,24 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+    def test_callable_lastmod_no_items(self):\n+        \"\"\"\n+        Test that a sitemap with no items and a callable lastmod does not raise an error.\n+        \"\"\"\n+        # Execute the client request to the sitemap index\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        # Verify that 'Last-Modified' is not in the response headers\n+        self.assertNotIn(\"Last-Modified\", response.headers)\n+        # Define the expected XML content for an empty sitemap index\n+        expected_content = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '<sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\\n'\n+            '</sitemapindex>'\n+        )\n+        # Assert that the response content matches the expected XML\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n+\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n",
  "django__django-16379": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..6790e71 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -8,7 +9,9 @@ from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n+from django.contrib.auth import get_permission_codename\n from .admin import ArticleAdmin, site\n+from .tests import get_perm\n from .models import Article, Question\n from .tests import AdminViewBasicTestCase\n \n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..6bbda4e 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -27,6 +28,22 @@ class JoinTests(SimpleTestCase):\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n     # Joining with unsafe joiners doesn't result in unsafe strings.\n+\n+    @setup(\n+        {\n+            \"join_autoescape_off\": (\n+                \"{% autoescape off %}\"\n+                \"{{ some_list|join:some_var }}\"\n+                \"{% endautoescape %}\"\n+            ),\n+        }\n+    )\n+    def test_join_autoescape_off(self):\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_off\", {\"some_list\": some_list, \"some_var\": some_var})\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +95,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..5a3d969 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -569,33 +569,46 @@ class BulkCreateTests(TestCase):\n                 unique_fields=[\"big_auto_fields\"],\n             )\n \n-    def _test_update_conflicts_two_fields(self, unique_fields):\n-        TwoFields.objects.bulk_create(\n-            [\n-                TwoFields(f1=1, f2=1, name=\"a\"),\n-                TwoFields(f1=2, f2=2, name=\"b\"),\n-            ]\n-        )\n-        self.assertEqual(TwoFields.objects.count(), 2)\n-\n+    def test_bulk_create_with_update_conflicts_returns_ids(self):\n+        \"\"\"\n+        Test that bulk_create with update_conflicts=True returns instances with primary keys set.\n+        \"\"\"\n+        new_objects = [\n+            TwoFields(f1=3, f2=3, name=\"e\"),\n+            TwoFields(f1=4, f2=4, name=\"f\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            new_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+        self.assertEqual(len(results), len(new_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        # Also test with conflicting objects\n+        TwoFields.objects.bulk_create([\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ])\n+        \n         conflicting_objects = [\n-            TwoFields(f1=1, f2=1, name=\"c\"),\n-            TwoFields(f1=2, f2=2, name=\"d\"),\n+            TwoFields(f1=1, f2=1, name=\"x\"),\n+            TwoFields(f1=2, f2=2, name=\"y\"),\n         ]\n-        TwoFields.objects.bulk_create(\n+        \n+        results = TwoFields.objects.bulk_create(\n             conflicting_objects,\n             update_conflicts=True,\n-            unique_fields=unique_fields,\n             update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n         )\n-        self.assertEqual(TwoFields.objects.count(), 2)\n-        self.assertCountEqual(\n-            TwoFields.objects.values(\"f1\", \"f2\", \"name\"),\n-            [\n-                {\"f1\": 1, \"f2\": 1, \"name\": \"c\"},\n-                {\"f1\": 2, \"f2\": 2, \"name\": \"d\"},\n-            ],\n-        )\n+        \n+        self.assertEqual(len(results), len(conflicting_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n \n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n@@ -816,4 +829,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..cfb5f96 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -495,8 +495,34 @@ def test_keymaps():\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib._pylab_helpers import Gcf\n+import pytest\n+\n+\n+def test_get_backend_does_not_clear_rccontext_figures():\n+    # Ensure no figures exist initially\n+    Gcf.destroy_all()\n+\n+    # Create a figure within an rc_context\n+    with rc_context():\n+        fig2 = plt.figure()\n+\n+    # Store the initial state of Gcf\n+    before = f'{id(Gcf)} {Gcf.figs!r}'\n+\n+    # Call get_backend() which previously caused an issue\n+    get_backend()\n+\n+    # Store the state of Gcf after calling get_backend()\n+    after = f'{id(Gcf)} {Gcf.figs!r}'\n+\n+    # Assert that calling get_backend() does not clear the figures\n+    assert before == after, 'Gcf.figs was altered by calling get_backend()'\n \n-def test_rcparams_reset_after_fail():\n+    # Clean up\n+    plt.close(fig2)\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..845cd48 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -20,12 +20,29 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d_axes(fig_test, fig_ref):\n+    # Create a 3D subplot and set it visible to False\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter([1], [1], [1], c='b')\n+    ax_test.set_visible(False)\n+    \n+    # Create a reference plot without the 3D subplot\n+    fig_ref.add_subplot(projection='3d')  # Keep the axes reference to test comparison\n \n-def test_aspect_equal_error():\n-    fig = plt.figure()\n-    ax = fig.add_subplot(projection='3d')\n-    with pytest.raises(NotImplementedError):\n-        ax.set_aspect('equal')\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d_axes_multiple(fig_test, fig_ref):\n+    # Create multiple 3D subplots and set one of them visible to False\n+    ax_test1 = fig_test.add_subplot(121, projection='3d')\n+    ax_test1.scatter([1], [1], [1], c='b')\n+    ax_test2 = fig_test.add_subplot(122, projection='3d')\n+    ax_test2.scatter([1], [1], [1], c='r')\n+    ax_test1.set_visible(False)\n+    \n+    # Create reference plots with only the second subplot\n+    fig_ref.add_subplot(122, projection='3d')\n+    ax_ref2 = fig_ref.add_subplot(122, projection='3d')\n+    ax_ref2.scatter([1], [1], [1], c='r')\n \n \n @mpl3d_image_comparison(['bar3d.png'])\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..9385ea0 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -773,6 +773,15 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n     for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n         assert mpl.colors.same_color(text.get_color(), color)\n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='shabnams')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n \n def test_get_set_draggable():\n     legend = plt.legend()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..0d863bd 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -246,7 +246,38 @@ def test_fonttype(fonttype):\n \n def test_linedash():\n     \"\"\"Test that dashed lines do not break PS output\"\"\"\n-    fig, ax = plt.subplots()\n+import io\n+from matplotlib.figure import Figure\n+\n+def test_empty_line_in_annotation():\n+    # Test for bug where empty line in annotation causes TypeError\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n+\n+def test_empty_line_in_title():\n+    # Test for bug where empty line in title causes TypeError\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.set_title('\\nLower title')\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n+\n+def test_empty_line_in_text():\n+    # Original test for empty lines in text\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n \n     ax.plot([0, 1], linestyle=\"--\")\n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..c9f34df 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,27 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+@pytest.mark.parametrize('constrained_layout', [True, False])\n+def test_constrained_layout_and_adjust(constrained_layout):\n+    import warnings\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained_layout)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        plt.subplots_adjust(wspace=0)\n+\n+        if not constrained_layout:\n+            assert all(\"This figure was using a layout engine that is incompatible\" not in str(warning.message) for warning in w)\n+        else:\n+            assert any(\"This figure was using a layout engine that is incompatible\" in str(warning.message) for warning in w)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..608cd32 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -92,7 +93,28 @@ def _generate_complete_test_figure(fig_ref):\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n-def test_complete(fig_test, fig_ref):\n+def test_draggable_legend_pickling():\n+    import pickletools\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    ax.plot([0, 1, 2], [3, 4, 5], label=\"test line\")\n+    legend = ax.legend()\n+    legend.set_draggable(True)\n+\n+    # Try to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure that 'FigureCanvasAgg' is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)], \"FigureCanvasAgg unexpectedly found in pickle stream\"\n+\n+    # Try to load from pickle\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw()\n+\n+    # Cleanup\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n     _generate_complete_test_figure(fig_ref)\n     # plotting is done, now test its pickle-ability\n     pkl = BytesIO()\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..6cd126b 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,31 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickle\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-@mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # align labels, which was causing previous issue\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        print(\"Pickling successful\")\n+    except TypeError as e:\n+        print(f\"Pickling failed: {e}\")\n+        assert False, \"Pickling failed due to a TypeError\"\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..4ea58a9 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -446,7 +446,51 @@ def test_paddedbox():\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n \n+\n+def test_mplcursor_interaction():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+\n+    # Initialize mplcursors\n+    cursor = mplcursors.cursor()\n+\n+    # Simulate a few clicks; this should not raise an AttributeError\n+    fig.canvas.draw_idle()\n+    for _ in range(5):\n+        cursor._funcs['button_press_event'](None)\n+\n+    plt.close(fig)\n+\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+\n+def test_mplcursor_interaction():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+\n+    # Initialize mplcursors\n+    cursor = mplcursors.cursor()\n+\n+    # Simulate a few clicks; this should not raise an AttributeError\n+    fig.canvas.draw_idle()\n+    for _ in range(5):\n+        cursor._funcs['button_press_event'](None)\n+\n+    plt.close(fig)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..688b36f 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -6,6 +7,7 @@ import pytest\n from numpy.testing import assert_array_equal, assert_array_almost_equal\n \n from seaborn._core.groupby import GroupBy\n+from pandas.testing import assert_frame_equal\n from seaborn._stats.regression import PolyFit\n \n \n",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..3fb6e5c 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -1348,6 +1348,13 @@ class TestPairGrid:\n             ax = g.axes[i, j]\n             assert len(ax.collections) == 0\n \n+    def test_pairplot_column_multiindex(self):\n+\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\"], [1, 2]])\n+        df = self.df[[\"x\", \"y\"]].set_axis(cols, axis=1)\n+        g = ag.pairplot(df)\n+        assert g.diag_vars == list(cols)\n+\n     def test_pairplot_reg_hue(self):\n \n         markers = [\"o\", \"s\", \"d\"]\n",
  "pallets__flask-4992": "",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..18349a1 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1635,8 +1635,31 @@ def test_prepared_request_complete_copy():\n     )\n     assert_copy(p, p.copy())\n \n+def test_urllib3_decode_error():\n+    from requests.packages.urllib3.exceptions import DecodeError\n \n-def test_prepare_unicode_url():\n+    class DecodeErrorAdapter(HTTPAdapter):\n+        def send(self, *args, **kwargs):\n+            raise DecodeError(\"This is a decode error\")\n+\n+    s = requests.Session()\n+    s.mount('http://', DecodeErrorAdapter())\n+\n+    with pytest.raises(ConnectionError):\n+        s.get('http://testurl')\n+\n+def test_urllib3_timeout_error():\n+    from requests.packages.urllib3.exceptions import TimeoutError\n+\n+    class TimeoutErrorAdapter(HTTPAdapter):\n+        def send(self, *args, **kwargs):\n+            raise TimeoutError(\"This is a timeout error\")\n+\n+    s = requests.Session()\n+    s.mount('http://', TimeoutErrorAdapter())\n+\n+    with pytest.raises(Timeout):\n+        s.get('http://testurl')\n     p = PreparedRequest()\n     p.prepare(\n         method='GET',\n@@ -1663,4 +1686,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..47ae025 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,18 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_response_iter_content_decode_unicode_json(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True for a JSON response.\n+        \"\"\"\n+        r = requests.Response()\n+        r._content_consumed = True\n+        r._content = b'{\"key\": \"value\"}'\n+        r.encoding = 'utf-8'\n+\n+        chunks = r.iter_content(chunk_size=16, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+        assert ''.join(chunks) == '{\"key\": \"value\"}'\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..b3d398a 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,8 +743,50 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    def test_allow_list_of_hooks_directly_in_init(self):\n+        \"\"\"Test passing a list of hooks directly in Request initialization.\"\"\"\n+        def hook1(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers']['Hook1'] = 'hook1'\n+            return args\n+\n+        def hook2(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers']['Hook2'] = 'hook2'\n+            return args\n+\n+        hooks = [hook1, hook2]\n+\n+        # Create a Request with a list of hooks\n+        r = requests.models.Request(hooks={'args': hooks})\n+\n+        # Verify hooks are registered correctly\n+        assert len(r.hooks['args']) == 2\n+        assert callable(r.hooks['args'][0])\n+        assert callable(r.hooks['args'][1])\n+\n+    def test_register_hook_method_with_list(self):\n+        \"\"\"Test registering multiple hooks using register_hook method.\"\"\"\n+        def hook1(args):\n+            args['hooked'] = 'one'\n+            return args\n+\n+        def hook2(args):\n+            args['hooked'] = 'two'\n+            return args\n+\n+        r = requests.models.Request()\n+        hooks = [hook1, hook2]\n+        \n+        # Register multiple hooks\n+        r.register_hook('args', hooks)\n \n-    def test_session_persistent_cookies(self):\n+        # Verify hooks are registered correctly\n+        assert len(r.hooks['args']) == 2\n+        assert callable(r.hooks['args'][0])\n+        assert callable(r.hooks['args'][1])\n \n         s = requests.session()\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..bf80789 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -53,7 +53,11 @@ reports = \"yes\"\n         f\"${env_var}\", file_to_lint_path\n     )\n     mock_exit.assert_called_once_with(0)\n-    check_configuration_file_reader(runner)\n+import pytest\n+from pylint.lint import Run\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+from pytest import CaptureFixture\n+from tests.functional.utils import EMPTY_MODULE\n \n \n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n@@ -78,8 +82,14 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n-\n-def test_unknown_confidence(capsys: CaptureFixture) -> None:\n+def test_unrecognized_option_traceback(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that a traceback is not printed for an unrecognized option.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err\n+    assert \"Unrecognized option found: Q\" in output.err\n+    assert \"Traceback\" not in output.err\n     \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..f434b1a 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,33 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_flag(self) -> None:\n+        \"\"\"Tests that ignore-paths is respected when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                # Create a temporary directory structure to test\n+                os.makedirs('directory_to_ignore', exist_ok=True)\n+                with open(join('directory_to_ignore', 'ignoreme.py'), 'w') as f:\n+                    f.write('print(\"This should be ignored\")\\n')\n+\n+                self._runtest(\n+                    [\n+                        \".\", \n+                        \"--recursive=y\", \n+                        \"--ignore-paths=^directory_to_ignore/.*\",\n+                    ], \n+                    code=0,\n+                )\n+\n+                # Clean up the temporary files\n+                shutil.rmtree('directory_to_ignore', ignore_errors=True)\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..2a9aade 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,52 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_lint_identically_named_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for modules with the same name as their parent directory.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create directory structure with a module having the same name as the directory\n+        create_files([\"testmodule/testmodule.py\", \"testmodule/another.py\"])\n+        \n+        # Ensure pylint checks the directory without errors\n+        linter.check([\"testmodule\"])\n+        assert not linter.stats.by_msg\n+\n+        # Add a top-level script that imports from the test module\n+        create_files([\"top_level_script.py\"])\n+        with open(\"top_level_script.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from testmodule import another\\n\")\n+        \n+        # Ensure pylint checks both the top-level script and the directory without import errors\n+        linter.check([\"top_level_script.py\", \"testmodule\"])\n+        assert not linter.stats.by_msg\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_identically_named_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for modules with the same name as their parent directory.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create directory structure with a module having the same name as the directory\n+        create_files([\"testmodule/testmodule.py\", \"testmodule/another.py\"])\n+        \n+        # Ensure pylint checks the directory without errors\n+        linter.check([\"testmodule\"])\n+        assert not linter.stats.by_msg\n+\n+        # Add a top-level script that imports from the test module\n+        create_files([\"top_level_script.py\"])\n+        with open(\"top_level_script.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from testmodule import another\\n\")\n+        \n+        # Ensure pylint checks both the top-level script and the directory without import errors\n+        linter.check([\"top_level_script.py\", \"testmodule\"])\n+        assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..b2a13cb 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -14,8 +15,8 @@ from json import dumps\n from typing import TYPE_CHECKING\n \n import pytest\n-\n from pylint import checkers\n+from _pytest.recwarn import WarningsRecorder\n from pylint.interfaces import HIGH\n from pylint.lint import PyLinter\n from pylint.message.message import Message\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..d4e76a0 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -298,6 +298,44 @@ class TestImportPath:\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n \n+    def test_prevent_double_import_with_importlib(self, pytester: Pytester) -> None:\n+        \"\"\"Test to ensure module is not imported twice under importlib mode.\"\"\"\n+        pytester.makepyfile(\n+            **{\n+                \"pmxbot/commands.py\": \"from . import logging\",\n+                \"pmxbot/logging.py\": \"class Logger: store = None\",\n+                \"tests/__init__.py\": \"\",\n+                \"tests/test_commands.py\": '''\n+                    import importlib\n+                    from pmxbot import logging\n+\n+                    class TestCommands:\n+                        def test_no_double_import(self):\n+                            module1 = importlib.import_module('pmxbot.logging')\n+                            module2 = importlib.import_module('pmxbot.logging')\n+                            assert module1 is module2\n+                ''',\n+            }\n+        )\n+        pytester.makeini(\n+            \"\"\"\n+            [pytest]\n+            addopts=\n+                --doctest-modules\n+                --import-mode importlib\n+            \"\"\"\n+        )\n+        result = pytester.runpytest_subprocess()\n+        result.stdout.fnmatch_lines(\"*1 passed*\")\n+        \"\"\"`importlib` mode does not change sys.path.\"\"\"\n+        module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert module.foo(2) == 42  # type: ignore[attr-defined]\n+        assert str(simple_module.parent) not in sys.path\n+        assert module.__name__ in sys.modules\n+        assert module.__name__ == \"_src.tests.mymod\"\n+        assert \"_src\" in sys.modules\n+        assert \"_src.tests\" in sys.modules\n+\n     def test_importmode_twice_is_different_module(\n         self, simple_module: Path, tmp_path: Path\n     ) -> None:\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..1c9415b 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -6,7 +7,7 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n-    logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n \n     record = logging.LogRecord(\n         name=\"dummy\",\n@@ -27,7 +28,7 @@ def test_coloredlogformatter():\n     formatter = ColoredLevelFormatter(tw, logfmt)\n     output = formatter.format(record)\n     assert output == (\n-        \"dummypath                   10 \\x1b[32mINFO    \\x1b[0m Test Message\"\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message\"\n     )\n \n     tw.hasmarkup = False\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..6951da9 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -459,7 +459,59 @@ class TestAssert_reprcompare:\n             \"+ (4,)\",\n         ]\n \n-    def test_set(self):\n+    def test_bytes_diff_normal(self):\n+        \"\"\"Check special handling for bytes diff (#5260)\"\"\"\n+        diff = callequal(b\"spam\", b\"eggs\")\n+        assert diff == [\n+            \"b'spam' == b'eggs'\",\n+            \"At index 0 diff: b's' != b'e'\",\n+            \"Use -v to get the full diff\",\n+        ]\n+\n+    def test_bytes_diff_verbose(self):\n+        \"\"\"Check special handling for bytes diff (#5260)\"\"\"\n+        diff = callequal(b\"spam\", b\"eggs\", verbose=True)\n+        assert diff == [\n+            \"b'spam' == b'eggs'\",\n+            \"At index 0 diff: b's' != b'e'\",\n+            \"Full diff:\",\n+            \"- b'spam'\",\n+            \"+ b'eggs'\",\n+        ]\n+\n+    def test_bytes_empty_vs_non_empty(self):\n+        \"\"\"Test empty byte string versus non-empty byte string comparison.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Use -v to get the full diff\",\n+        ]\n+        diff = callequal(b\"\", b\"42\", verbose=True)\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+        ]\n+\n+    def test_bytes_empty_vs_single_byte(self):\n+        \"\"\"Test empty byte string versus single byte string comparison.\"\"\"\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Use -v to get the full diff\",\n+        ]\n+        diff = callequal(b\"\", b\"1\", verbose=True)\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+        ]\n         expl = callequal({0, 1}, {0, 2})\n         assert len(expl) > 1\n \n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..2dd573a 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,5 +1,8 @@\n+\n import os\n from xml.dom import minidom\n+import platform\n+from datetime import datetime\n \n import py\n \n@@ -139,7 +142,29 @@ class TestPython:\n         node = dom.find_first_by_tag(\"testsuite\")\n         node.assert_attr(name=\"pytest\", errors=1, failures=2, skipped=1, tests=5)\n \n-    def test_timing_function(self, testdir):\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n         testdir.makepyfile(\n             \"\"\"\n             import time, pytest\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..cd10dea 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,34 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\n+    \"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_broken_repr_with_different_exceptions():\n+    \"\"\"Test saferepr with different exceptions in __repr__ and __getattribute__.\"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise KeyError(\"Attribute not found\")\n+\n+        def __repr__(self):\n+            raise ValueError(\"Bad repr\")\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[ValueError('Bad repr') raised in repr()] SomeClass object at 0x\"\n+    )\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +181,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..e931e87 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,6 @@\n import os\n import sys\n+import os\n from unittest import mock\n \n import pytest\n@@ -11,6 +12,36 @@ from _pytest.nodes import Node\n \n \n class TestMark:\n+    def test_skipif_caching_across_modules(self, testdir):\n+        \"\"\"Test to verify that skipif conditions are not incorrectly cached across modules.\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_skipif_caching1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert False\n+            \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_skipif_caching2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+            \"\"\"\n+        )\n+        \n+        # Run both test files and check outcomes\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n     @pytest.mark.parametrize(\"attr\", [\"mark\", \"param\"])\n     @pytest.mark.parametrize(\"modulename\", [\"py.test\", \"pytest\"])\n     def test_pytest_exists_in_namespace_all(self, attr: str, modulename: str) -> None:\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..904d0ec 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -153,6 +153,32 @@ class TestEvaluation:\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n \n+class TestSkipAndXFail:\n+    @pytest.mark.parametrize(\n+        \"test_input, expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_location_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..b34676b 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -397,7 +398,44 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n-    def test_dynamic_xfail_no_run(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Test dynamic xfail set during the test is handled correctly with failure.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed(self, testdir: Testdir) -> None:\n+        # Test dynamic xfail set during the test is handled correctly with pass.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 1\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xpassed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Test dynamic xfail with strict mode set during the test with pass.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                assert 1\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..634611c 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -21,6 +22,7 @@ from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n from _pytest.tmpdir import get_user\n from _pytest.tmpdir import TempdirFactory\n+from _pytest.monkeypatch import MonkeyPatch\n from _pytest.tmpdir import TempPathFactory\n \n \n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..93a5ddd 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,35 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n \n-def test_ridgecv_store_cv_values():\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas), \\\n+        \"Unexpected shape of cv_values_ with single target\"\n+\n+    # Check with multiple targets\n+    y_multi = np.array([[1, 1, 1, -1, -1],\n+                        [1, -1, 1, -1, 1],\n+                        [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets_multi = y_multi.shape[1]\n+\n+    r.fit(x, y_multi)\n+    assert r.cv_values_.shape == (n_samples, n_targets_multi, n_alphas), \\\n+        \"Unexpected shape of cv_values_ with multiple targets\"\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..a51d310 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -5,7 +5,7 @@\n import numpy as np\n from scipy.special import gammaln\n \n-from sklearn.utils.testing import assert_raise_message\n+from sklearn.utils.testing import assert_raise_message, assert_greater, assert_array_equal\n from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..170f0ca 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,44 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+import numpy as np\n+import pytest\n+from sklearn.preprocessing import OneHotEncoder\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+    \n+def test_one_hot_encoder_ignore_unknown_long_string():\n+    X = np.array(['short', 'medium', 'longest']).reshape((-1, 1))\n+    X_test = np.array(['unknown', 'medium']).reshape((-1, 1))\n+    encoder = OneHotEncoder(handle_unknown='ignore')\n+    encoder.fit(X)\n+    transformed = encoder.transform(X_test)\n+    expected = np.array([[0., 0., 0.], [0., 1., 0.]])\n+    assert_array_equal(transformed.toarray(), expected)\n+\n+def test_one_hot_encoder_ignore_unknown_mixed_length_strings():\n+    X = np.array(['a', 'bb', 'ccc', 'dddd']).reshape((-1, 1))\n+    X_test = np.array(['eeeee', 'a']).reshape((-1, 1))\n+    encoder = OneHotEncoder(handle_unknown='ignore')\n+    encoder.fit(X)\n+    transformed = encoder.transform(X_test)\n+    expected = np.array([[0., 0., 0., 0.], [1., 0., 0., 0.]])\n+    assert_array_equal(transformed.toarray(), expected)\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..9a81aa6 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,15 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..11bd1cb 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -12,9 +13,21 @@ from sklearn.linear_model import Perceptron\n from sklearn.pipeline import Pipeline\n from sklearn.model_selection import GridSearchCV\n from sklearn.metrics.pairwise import rbf_kernel\n+from sklearn.utils.testing import assert_allclose\n+\n+def test_kernel_pca_sign_consistency():\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(10, 10)\n+\n+    # Test with rbf kernel\n+    kpca_1 = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+    kpca_2 = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n \n+    transformed_1 = kpca_1.fit_transform(X)\n+    transformed_2 = kpca_2.fit_transform(X)\n \n-def test_kernel_pca():\n+    # We check that the absolute values of transformed_1 and transformed_2 match\n+    assert_allclose(np.abs(transformed_1), np.abs(transformed_2))\n     rng = np.random.RandomState(0)\n     X_fit = rng.random_sample((5, 4))\n     X_pred = rng.random_sample((2, 4))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..d5b5da0 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1058,6 +1058,40 @@ def test_pipeline_memory():\n         shutil.rmtree(cachedir)\n \n \n+def test_pipeline_len():\n+    from sklearn import svm\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SelectKBest, f_regression\n+    from sklearn.pipeline import Pipeline\n+\n+    # generate some data to play with\n+    X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = svm.SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+    # original test patch\n+    assert len(pipe) == 2\n+\n+    # additional test cases\n+    # Test with no steps\n+    empty_pipe = Pipeline([])\n+    assert len(empty_pipe) == 0\n+\n+    # Test with one step\n+    single_step_pipe = Pipeline([('anova', anova_filter)])\n+    assert len(single_step_pipe) == 1\n+\n+    # Test with three steps\n+    additional_step = Pipeline([\n+        ('anova', anova_filter), \n+        ('svc', clf), \n+        ('svc2', clf)\n+    ])\n+    assert len(additional_step) == 3\n+\n+\n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n@@ -1070,4 +1104,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..584b7d6 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,9 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n+from sklearn.utils._testing import assert_array_equal, assert_warns_message\n \n import numpy as np\n \n@@ -295,6 +299,27 @@ def test_score_samples():\n                        clf2.score_samples([[2., 2.]]))\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start():\n+    \"\"\"Test iterative addition of iTrees to an iForest \"\"\"\n+\n+    rng = check_random_state(0)\n+    X = rng.randn(20, 2)\n+\n+    # fit first 10 trees\n+    clf = IsolationForest(n_estimators=10, max_samples=20,\n+                          random_state=rng, warm_start=True)\n+    clf.fit(X)\n+    # remember the 1st tree\n+    tree_1 = clf.estimators_[0]\n+    # fit another 10 trees\n+    clf.set_params(n_estimators=20)\n+    clf.fit(X)\n+    # expecting 20 fitted trees and no overwritten trees\n+    assert len(clf.estimators_) == 20\n+    assert clf.estimators_[0] is tree_1\n+\n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..e2cafe8 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,6 +217,14 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_with_array():\n+    # Test for the issue where array parameters in LogisticRegressionCV\n+    # with print_changed_only=True would raise a ValueError\n+    set_config(print_changed_only=True)\n+    # This should not raise an error\n+    repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    set_config(print_changed_only=False)  # Reset configuration\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..f24512c 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -11,6 +12,8 @@ from sklearn.exceptions import NotFittedError\n from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.ensemble import VotingClassifier, VotingRegressor\n from sklearn.model_selection import GridSearchCV\n from sklearn import datasets\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..a44fbc8 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -119,6 +119,17 @@ def test_finite_differences():\n     np.testing.assert_almost_equal(rel_diff, 0., decimal=5)\n \n \n+import numpy as np\n+import pytest\n+from sklearn.utils.testing import assert_raises, assert_raise_message, assert_warns_message\n+from sklearn.model_selection import GridSearchCV\n+from sklearn.pipeline import Pipeline\n+from sklearn.neighbors import KNeighborsClassifier\n+from sklearn.datasets import load_iris\n+\n+iris = load_iris()\n+iris_data, iris_target = iris.data, iris.target\n+\n def test_params_validation():\n     # Test that invalid parameters raise value error\n     X = np.arange(12).reshape(4, 3)\n@@ -160,6 +171,27 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+@pytest.mark.parametrize(\"tol_value\", [0.1, 0.5, np.float32(1)])\n+def test_tol_accepts_numpy_float32(tol_value):\n+    # Check that NCA accepts numpy.float32 for tol parameter\n+    X = np.array([[0, 0], [1, 1], [2, 2]])\n+    y = [0, 1, 1]\n+    nca = NeighborhoodComponentsAnalysis(tol=tol_value)\n+    try:\n+        nca.fit(X, y)\n+    except TypeError:\n+        pytest.fail(f\"NCA raised TypeError with tol={tol_value}\")\n+\n+@pytest.mark.parametrize(\"n_components_value\", [2, np.int64(2)])\n+def test_n_components_accepts_numpy_int64(n_components_value):\n+    # Check that NCA accepts numpy.int64 for n_components parameter\n+    X = np.array([[0, 0], [1, 1], [2, 2]])\n+    y = [0, 1, 1]\n+    nca = NeighborhoodComponentsAnalysis(n_components=n_components_value)\n+    try:\n+        nca.fit(X, y)\n+    except TypeError:\n+        pytest.fail(f\"NCA raised TypeError with n_components={n_components_value}\")\n \n def test_transformation_dimensions():\n     X = np.arange(12).reshape(4, 3)\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..96f4c18 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,47 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+\n+def test_sparse_fit_no_support_vectors():\n+    # Test SVR with sparse data where no support vectors are expected\n+    X_train = sparse.csr_matrix([[1, 0, 0, 0],\n+                                 [1, 0, 0, 0],\n+                                 [1, 0, 0, 0],\n+                                 [1, 0, 0, 0]])\n+    y_train = np.array([0.1, 0.1, 0.1, 0.1])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+    assert model.n_support_ == [0]\n+\n+\n+def test_sparse_fit_with_support_vectors():\n+    # Test SVR with sparse data where support vectors are expected\n+    X_train = sparse.csr_matrix([[0, 0, 1, 0],\n+                                 [1, 0, 0, 0],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.15, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert model.support_vectors_.data.size > 0\n+    assert model.dual_coef_.data.size > 0\n+    assert sum(model.n_support_) > 0\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..5ef079d 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,10 +1,16 @@\n+\n import warnings\n import numpy as np\n import pickle\n import copy\n \n import pytest\n-\n+import pytest\n+import numpy as np\n+import pandas as pd\n+from sklearn import set_config\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n from sklearn.datasets import make_regression\n from sklearn.isotonic import (\n     check_increasing,\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..b822957 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2121,6 +2121,38 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n \n+\n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False]), [False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_empty_selection_pandas_output_with_no_features(empty_selection):\n+    \"\"\"Check that pandas output works when there is an empty selection.\n+    \n+    Non-regression test for issue described in the bug report.\n+    \"\"\"\n+    import pandas as pd\n+    from sklearn.compose import ColumnTransformer\n+    from sklearn.preprocessing import StandardScaler\n+    from numpy.testing import assert_array_equal\n+\n+    X = pd.DataFrame([[1.0, 2.2], [3.0, 1.0]], columns=[\"a\", \"b\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\"])\n+\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\"])\n+\n     # The feature names are prefixed because verbose_feature_names_out=True is default\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n@@ -2128,4 +2160,4 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..13e7eb9 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -112,6 +112,64 @@ def test_automodule_special_members(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple_classes(app):\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'Base, list, set'\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '.. py:class:: MyList(iterable=(), /)',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n@@ -125,4 +183,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..41a721c 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -78,7 +78,31 @@ def test_get_full_qualified_name():\n     domain = StandardDomain(env)\n \n     # normal references\n-    node = nodes.reference()\n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+from sphinx import domains\n+from sphinx import application\n+import restructuredtext\n+\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '-j'],\n+                                                                     [addnodes.desc_addname, '[=N]'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '[enable'],\n+                                                                     [addnodes.desc_addname, '=]PATTERN'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n     assert domain.get_full_qualified_name(node) is None\n \n     # simple reference to options\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..f3f96e7 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -45,6 +46,21 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_additional(app):\n+    \"\"\"Test that no members are documented when __all__ is empty.\"\"\"\n+    options = {'members': True}\n+    # Assuming 'target.empty_all_additional' is another module similar to `target.empty_all`\n+    actual = do_autodoc(app, 'module', 'target.empty_all_additional', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all_additional',\n+        '',\n+        'docstring of empty_all_additional module.',\n+        '',\n+    ]\n+\n+\n def make_directive_bridge(env):\n     options = Options(\n         inherited_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..3ec4d00 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -16,6 +17,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n import pytest\n \n from sphinx.util.typing import restify, stringify\n+from struct import Struct\n \n \n class MyClass1:\n@@ -44,6 +46,8 @@ def test_restify():\n     assert restify(None) == \":obj:`None`\"\n     assert restify(Integral) == \":class:`numbers.Integral`\"\n     assert restify(Any) == \":obj:`Any`\"\n+    # Test for struct.Struct\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n \n \n def test_restify_type_hints_containers():\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..f14bc6f 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,33 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_with_napoleon_use_param(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+y : float\n+    Description of y.\n+\n+\"\"\"\n+\n+        # Test when napoleon_use_param is False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **y** (*float*) -- Description of y.\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+        # Test when napoleon_use_param is True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param y:\n+:type y: float\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..3fe810a 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -60,8 +60,18 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/c/' in stuff\n     assert 'http://foobar/cpp/' in stuff\n \n+import pytest\n+from sphinx.application import Sphinx\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_default(app, status, warning):\n+    app.builder.build_all()\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n \n-@pytest.mark.sphinx(testroot='ext-viewcode-find')\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n         if modname == 'not_a_package':\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..4c67801 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -350,6 +350,13 @@ def test_args():\n            # enclosing brackets needed on 0\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n     raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n+\n+    # New test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([0, 1, 2])\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[0, 1], [2, 3], [0, 2]]) == Permutation([1, 0, 3, 2])\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..aa90359 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -449,6 +450,21 @@ def test_sparse_matrix():\n     assert SparseMatrix.eye(2).nnz() == 2\n \n \n+def test_hstack_vstack_zero_matrices():\n+    # Test hstack with zero-dimension matrices\n+    sparse_matrices_h = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_h).shape == (0, 6)\n+\n+    sparse_matrices_h = [SparseMatrix.zeros(1, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_h).shape == (1, 6)\n+\n+    # Test vstack with zero-dimension matrices\n+    sparse_matrices_v = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_v).shape == (6, 0)\n+\n+    sparse_matrices_v = [SparseMatrix.zeros(n, 1) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_v).shape == (6, 1)\n+\n def test_transpose():\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n         SparseMatrix(((1, 3), (2, 4)))\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..e3a30ff 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -81,8 +81,18 @@ def check(a, exclude=[], check_attr=True):\n \n #================== core =========================\n \n-\n-def test_core_basic():\n+import sympy\n+import pickle\n+import sys\n+from sympy import Float\n+\n+def test_pickle_cross_version_float_expression():\n+    # Simulate the pickling behavior from Python 2 to Python 3\n+    # by manually creating the pickle data representing a sympy expression with a float\n+    python2_pickle_data = pickle.dumps(Float((0, '1L', 0, 1)), protocol=2)  # Simulate Python 2 behavior\n+    loaded_expr = pickle.loads(python2_pickle_data)\n+    expected_expr = Float(1.0)\n+    assert loaded_expr == expected_expr, \"Unpickled expression does not match the expected expression\"\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n               # XXX: dynamically created types are not picklable\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..ee46543 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -278,8 +278,23 @@ def test_coth_series():\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n-\n-def test_csch():\n+def test_coth_log_tan_issue():\n+    from sympy import Symbol, coth, log, tan, I, pi\n+    x = Symbol('x')\n+    \n+    # Checking against the previously failing integral values\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for val in test_values:\n+        assert coth(log(tan(val)))  # Should not raise an error\n+    \n+    # Check for more values to ensure function stability\n+    additional_test_values = [0.5, 1, 4, 7, 10, 14, 16, 17, 19, 20]\n+    for val in additional_test_values:\n+        assert coth(log(tan(val)))  # Should not raise an error\n+\n+    # Ensure no import issues and calculations return expected types \n+    assert coth(log(tan(1))) is not None\n+    assert coth(log(tan(1 + I*pi/2))) == coth(log(-tan(1)))\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..c629625 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,58 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import eye, Matrix, ones\n+\n+    # Original issue case\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    expected_result = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected_result\n+\n+    # Additional test cases\n+    # Test inserting a single column at the beginning\n+    M = eye(3)\n+    V = Matrix([1, 1, 1])\n+    expected_result = Matrix([\n+        [1, 1, 0, 0],\n+        [1, 0, 1, 0],\n+        [1, 0, 0, 1]\n+    ])\n+    assert M.col_insert(0, V) == expected_result\n+\n+    # Test inserting a single column at the end\n+    M = eye(3)\n+    V = Matrix([2, 2, 2])\n+    expected_result = Matrix([\n+        [1, 0, 0, 2],\n+        [0, 1, 0, 2],\n+        [0, 0, 1, 2]\n+    ])\n+    assert M.col_insert(3, V) == expected_result\n+\n+    # Test inserting multiple columns in the middle of a larger matrix\n+    M = eye(4)\n+    V = Matrix([\n+        [3, 3],\n+        [3, 3],\n+        [3, 3],\n+        [3, 3]\n+    ])\n+    expected_result = Matrix([\n+        [1, 0, 3, 3, 0, 0],\n+        [0, 1, 3, 3, 0, 0],\n+        [0, 0, 3, 3, 1, 0],\n+        [0, 0, 3, 3, 0, 1]\n+    ])\n+    assert M.col_insert(2, V) == expected_result\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..f6139ea 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -620,46 +620,46 @@ def test_latex_sequences():\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n     assert latex(s1) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n+    latex_str = r'[1, 2, 1, 2, \\ldots]'\n     assert latex(s2) == latex_str\n \n     s3 = SeqFormula(a**2, (0, 2))\n     s4 = SeqPer((1, 2), (0, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4\\right\\]'\n+    latex_str = r'[0, 1, 4]'\n     assert latex(s3) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1\\right\\]'\n+    latex_str = r'[1, 2, 1]'\n     assert latex(s4) == latex_str\n \n     s5 = SeqFormula(a**2, (-oo, 0))\n     s6 = SeqPer((1, 2), (-oo, 0))\n \n-    latex_str = r'\\left\\[\\ldots, 9, 4, 1, 0\\right\\]'\n+    latex_str = r'[\\ldots, 9, 4, 1, 0]'\n     assert latex(s5) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 2, 1, 2, 1\\right\\]'\n+    latex_str = r'[\\ldots, 2, 1, 2, 1]'\n     assert latex(s6) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5, 11, \\ldots\\right\\]'\n+    latex_str = r'[1, 3, 5, 11, \\ldots]'\n     assert latex(SeqAdd(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5\\right\\]'\n+    latex_str = r'[1, 3, 5]'\n     assert latex(SeqAdd(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 11, 5, 3, 1\\right\\]'\n+    latex_str = r'[\\ldots, 11, 5, 3, 1]'\n     assert latex(SeqAdd(s5, s6)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4, 18, \\ldots\\right\\]'\n+    latex_str = r'[0, 2, 4, 18, \\ldots]'\n     assert latex(SeqMul(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4\\right\\]'\n+    latex_str = r'[0, 2, 4]'\n     assert latex(SeqMul(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n+    latex_str = r'[\\ldots, 18, 4, 2, 0]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..b1ceff6 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,15 @@\n+\n+def test_Poly_with_RR_domain():\n+    from sympy import Poly\n+    from sympy.abc import x, y, z\n+\n+    # Test case for the reported issue\n+    raises(OptionError, lambda: Poly(1.2 * x * y * z, x, domain='RR[y,z]'))\n+\n+    # Additional test case to verify a valid domain usage\n+    p = Poly(1.2 * x * y * z, x, domain=RR[y, z])\n+    assert str(p) == \"Poly(1.2*y*z*x, x, domain='RR[y,z]')\"\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +18,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -174,6 +186,15 @@ def test_Domain_preprocess():\n \n     raises(OptionError, lambda: Domain.preprocess('Z[]'))\n \n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n     assert Domain.preprocess('Z[x]') == ZZ[x]\n     assert Domain.preprocess('Q[x]') == QQ[x]\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..05c0818 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,7 +6111,21 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n-def test_MatrixSymbol_printing():\n+def test_MatAdd_pretty_printing_issue():\n+    # Issue #14814 Test Cases\n+    n = 3\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+\n+    # Test case that caused the original issue\n+    assert pretty(x + y_star) == \"x + y*\"\n+\n+    # Additional cases to ensure robustness\n+    a = MatrixSymbol('a', n, n)\n+    b = MatrixSymbol('b', n, n)\n+    assert pretty(-a*x + -2*y_star*b) == \"-a*x - 2*y**b\"\n+    assert pretty(a - y_star) == \"a - y*\"\n+    assert pretty(-x + y_star) == \"-x + y*\"\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n     B = MatrixSymbol(\"B\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..150dbf6 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,6 +728,26 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n+def test_curly_matrix_symbol():\n+    # Test for issue related to lambdify and MatrixSymbol with curly braces.\n+    import sympy as sy\n+    curlyx = sy.symbols(\"{x}\")\n+    v = sy.MatrixSymbol(\"v\", 2, 1)\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # These should work without errors\n+    curlyScalarId = sy.lambdify(curlyx, curlyx)\n+    assert curlyScalarId(1) == 1\n+    vectorId = sy.lambdify(v, v)\n+    assert (vectorId([[1], [2]]) == [[1], [2]]).all()\n+\n+    # These were the problematic cases previously\n+    curlyVectorId = sy.lambdify(curlyv, curlyv)\n+    assert (curlyVectorId([[1], [2]]) == [[1], [2]]).all()\n+\n+    curlyVectorIdDummified = sy.lambdify(curlyv, curlyv, dummify=True)\n+    assert (curlyVectorIdDummified([[1], [2]]) == [[1], [2]]).all()\n+\n def test_python_keywords():\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..8c3857f 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,23 @@\n+\n+def test_Max_Min():\n+    # Test for Max function with different arguments\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(3, x, y)) == \"Max[3, x, y]\"\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    # Test for Min function as a comparison\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+    assert mcode(Min(x, y, z)) == \"Min[x, y, z]\"\n+    \n+    # Original test case to verify that it still works.\n+    assert mcode(Max(x,y,z)*Min(y,z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..e85f65b 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n@@ -1726,7 +1728,12 @@ def test_latex_UnevaluatedExpr():\n     assert latex(x*he) == r\"x \\frac{1}{x}\"\n \n \n-def test_MatrixElement_printing():\n+def test_indexed_matrix_expression():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Verify that the LaTeX string for the indexed matrix expression is correct\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n     # test cases for issue #11821\n     A = MatrixSymbol(\"A\", 1, 3)\n     B = MatrixSymbol(\"B\", 1, 3)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..60ef3a5 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -6,6 +7,20 @@ from sympy.utilities.pytest import raises\n \n \n def test_idiff():\n+    f = Function('f')\n+    g = Function('g')\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+\n+    # Original test cases from the test patch\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # New test cases for Eq and function input\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x).simplify() == (x + 1) * exp(x - y) / (y + 1)\n+    assert idiff(y * exp(y) - x * exp(x), y, x) == (x + 1) * exp(x - y) / (y + 1)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n",
  "sympy__sympy-16792": "",
  "sympy__sympy-16988": "",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..ddfc324 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -8,6 +9,11 @@ from sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Cbr\n from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayTensorProduct, CodegenArrayDiagonal,\n         CodegenArrayPermuteDims, CodegenArrayElementwiseAdd)\n+from sympy import Identity\n+from sympy.utilities.pytest import raises\n+from sympy.external import import_module\n+\n+np = import_module('numpy')\n from sympy.printing.lambdarepr import NumPyPrinter\n \n from sympy.utilities.pytest import warns_deprecated_sympy\n@@ -16,7 +22,27 @@ from sympy.external import import_module\n \n np = import_module('numpy')\n \n-def test_numpy_piecewise_regression():\n+def test_issue_with_identity_matrix():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    n = symbols('n', integer=True)\n+    A = MatrixSymbol(\"A\", n, n)\n+    a = np.array([[1, 2], [3, 4]])\n+    f = lambdify(A, A + Identity(n))\n+    \n+    # Test if the issue is resolved\n+    assert np.array_equal(f(a), np.array([[2, 2], [3, 5]])), \"The result with Identity matrix was incorrect.\"\n+\n+    # Test with a different matrix size\n+    B = MatrixSymbol(\"B\", 3, 3)\n+    b = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n+    f2 = lambdify(B, B + Identity(3))\n+    assert np.array_equal(f2(b), np.array([[2, 2, 3], [4, 6, 6], [7, 8, 10]])), \"The result with Identity matrix was incorrect for 3x3.\"\n+\n+    # Test that raises NotImplementedError for symbolic dimensions\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n     \"\"\"\n     NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n     breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..9aece46 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -801,6 +801,17 @@ def test_nc_simplify():\n     # commutative expressions should be returned without an error\n     assert nc_simplify(2*x**2) == 2*x**2\n \n+def test_issue_17137():\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n+    # Additional test cases for different expressions involving complex exponents\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(sin(x)**(1 + I)) == sin(x)**(1 + I)\n+    assert simplify(exp(x)**I) == exp(x)**I\n+    assert simplify(exp(x)**(1 + I)) == exp(x)**(1 + I)\n+\n def test_issue_15965():\n     A = Sum(z*x**y, (x, 1, a))\n     anew = z*Sum(x**y, (x, 1, a))\n@@ -814,4 +825,4 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..c0de7fa 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -6,7 +7,16 @@ from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n \n+from sympy import sympify\n+\n def test_point():\n+    # Test multiplication with Point and sympify\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+    # Check both multiplication orders\n+    assert p1 + p2 * scalar == Point(2, 2)\n+    assert p1 + scalar * p2 == Point(2, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..a27ae99 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,45 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, sympify, Symbol, parse_expr\n+from sympy.core.tests.test_sympify import raises\n+\n+def test_non_string_equality():\n+    # Test that expressions do not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Ensure that the equality check does not attempt to evaluate the repr of a custom object\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n+    # Test for class C from the issue\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    # This should not raise an AttributeError\n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+\n+    # Test for unknown object whose repr is 'x'\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert (x == D()) is False\n+    assert (x != D()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1941,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..fcdc9f9 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,7 +547,17 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n-    # issue 18122\n+    # test issue 18186\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy import symbols\n+\n+    x, y = symbols('x y', integer=True)\n+\n+    # Test case for verifying the fix of issue 18186\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..95d43ff 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -66,7 +67,8 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    # Ensure that sz.atoms() returns the expected leaf nodes (no args objects)\n+    assert sz.atoms() == {String(typename), String('sizeof')}\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..af2aaaa 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,25 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_issue_single_block_diagonal():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_issue_multiple_block_diagonal():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    assert B == Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..052e680 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -83,7 +84,14 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_blockmatrix_symbolic_indexing_issue():\n+    from sympy import MatrixSymbol, BlockMatrix, MatrixElement, symbols\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    # Ensure that C[i, 0] returns MatrixElement, not simplified\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..6c6786f 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -305,6 +305,27 @@ def test_sign():\n     # evaluate what can be evaluated\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n+def test_sign_rewrite_abs():\n+    x = Symbol('x')\n+    f = Function('f')\n+\n+    # Test the rewriting of sign in terms of Abs\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x / Abs(x), True))\n+    assert sign(f(x)).rewrite(Abs) == Piecewise((0, Eq(f(x), 0)), (f(x) / Abs(f(x)), True))\n+\n+    # Test specific numerical cases\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(2).rewrite(Abs) == 1\n+    assert sign(-3).rewrite(Abs) == -1\n+    assert sign(I).rewrite(Abs) == I\n+    assert sign(-I).rewrite(Abs) == -I\n+\n+    # Test with symbolic expressions\n+    y = Symbol('y', real=True, zero=False)\n+    assert sign(y).rewrite(Abs) == y / Abs(y)\n+    z = Symbol('z', imaginary=True, nonzero=True)\n+    assert sign(z).rewrite(Abs) == z / Abs(z)\n+\n     eq = -sqrt(10 + 6*sqrt(3)) + sqrt(1 + sqrt(3)) + sqrt(3 + 3*sqrt(3))\n     # if there is a fast way to know when and when you cannot prove an\n     # expression like this is zero then the equality to zero is ok\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..299c650 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -472,6 +472,17 @@ def test_multiset_permutations():\n \n \n def test_partitions():\n+    \n+    # Check that each partition is distinct by modifying the partitions\n+    original_partitions = list(partitions(6, k=3))\n+    modified_partitions = copy.deepcopy(original_partitions)\n+\n+    # Modify one of the copied partitions\n+    modified_partitions[0][3] = 999\n+\n+    # Ensure the modification did not affect the original partitions\n+    assert original_partitions != modified_partitions\n+    assert original_partitions[0][3] != 999\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..add553d 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,6 +254,8 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n+from sympy import S, oo, zoo, power\n+\n def test_zero():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -267,7 +269,10 @@ def test_zero():\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n \n-def test_pow_as_base_exp():\n+def test_issue_19572():\n+    # Test issue 19572\n+    assert 0**-oo is zoo\n+    assert power(0, -oo) is zoo\n     x = Symbol('x')\n     assert (S.Infinity**(2 - x)).as_base_exp() == (S.Infinity, 2 - x)\n     assert (S.Infinity**(x - 2)).as_base_exp() == (S.Infinity, x - 2)\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..80b7c36 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n@@ -46,7 +47,22 @@ def test_convert_to():\n     assert speed_of_light.convert_to(m) == speed_of_light\n \n \n-def test_Quantity_definition():\n+def test_convert_to_issue():\n+    # Test case for the reported issue\n+    expr = joule * second\n+    conv = convert_to(expr, joule)\n+    assert conv == expr, f\"Expected {expr}, but got {conv}\"\n+\n+    # Additional test cases to ensure thorough checking\n+    conv = convert_to(expr, joule * second)\n+    assert conv == expr, f\"Expected {expr}, but got {conv}\"\n+\n+    conv = convert_to(expr, kg * m**2 / s)\n+    assert conv == kg * m**2 / s, f\"Expected {kg * m**2 / s}, but got {conv}\"\n+\n+    conv = convert_to(expr, minute)\n+    expected = expr / 60\n+    assert conv == expected, f\"Expected {expected}, but got {conv}\"\n     q = Quantity(\"s10\", abbrev=\"sabbr\")\n     q.set_global_relative_scale_factor(10, second)\n     u = Quantity(\"u\", abbrev=\"dam\")\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..13c71a2 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,22 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import pytest\n+from sympy import Symbol\n+from sympy.core.rules import Transform\n+from sympy.testing.pytest import raises\n+\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n+def test_symbol_slots():\n+    s = Symbol('s')\n+    assert hasattr(s, '__slots__')\n+    assert s.__slots__ == ('name',)\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..092bf17 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,23 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_arg():\n+    x = Symbol('x', complex=True)\n+    a = Symbol('a', real=True)\n+\n+    # Tests from the original test patch\n+    assert refine(arg(x), Q.positive(x)) == 0\n+    assert refine(arg(x), Q.negative(x)) == pi\n+\n+    # Additional test cases\n+    assert refine(arg(a), Q.positive(a)) == 0\n+    assert refine(arg(a), Q.negative(a)) == pi\n+    assert refine(arg(a), Q.nonnegative(a)) == Piecewise((0, a > 0), (pi, a < 0), (arg(a), True))\n+    assert refine(arg(a), Q.nonpositive(a)) == Piecewise((pi, a < 0), (0, a > 0), (arg(a), True))\n+\n+    # Test with other assumptions\n+    assert refine(arg(a), Q.real(a)) == Piecewise((0, a > 0), (pi, a < 0), (arg(a), True))\n+    assert refine(arg(x), Q.imaginary(x)) == Piecewise((pi/2, im(x) > 0), (-pi/2, im(x) < 0), (arg(x), True))\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..ef91057 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -45,7 +46,13 @@ def test_Matrix_kind():\n         m = cls.zeros(3, 2)\n         assert m.kind is MatrixKind(NumberKind)\n \n-def test_MatMul_kind():\n+def test_Derivative_kind():\n+    from sympy.core.function import Derivative\n+    A = MatrixSymbol('A', 2, 2)\n+    # This should test the fix for the issue\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n+    # Additional test with noncommutative symbol\n+    assert Derivative(A, noncomm_x).kind is MatrixKind(NumberKind)\n     M = Matrix([[1,2],[3,4]])\n     assert MatMul(2, M).kind is MatrixKind(NumberKind)\n     assert MatMul(comm_x, M).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..bc0670f 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -130,8 +130,26 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 1])) == {S.One, x, y, x*y, x**2, x**2*y}\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n-\n-    i, j, k = symbols('i j k', commutative=False)\n+    from sympy import symbols\n+    from sympy.polys.monomials import itermonomials\n+    \n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x3*x1**2, x2**2*x3, x1*x3**2, x2*x3**2, x1*x2*x3}\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2, x2**3, x2**2*x3, x2*x3**2, x3**3, x1**2, x2**2, x3**2, x1*x2, x1*x3, x2*x3}\n+    \n+    assert set(itermonomials([x1, x2, x3], 4, 4)) == {x1**4, x2**4, x3**4, x1**3*x2, x1**3*x3, x1*x2**3, x1*x3**3, x2**3*x3, x2*x3**3, x1**2*x2**2, x1**2*x3**2, x2**2*x3**2, x1**2*x2*x3, x1*x2**2*x3, x1*x2*x3**2}\n+    assert set(itermonomials([x1, x2, x3], 4, 3)) >= {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x3*x1**2, x2**2*x3, x1*x3**2, x2*x3**2, x1*x2*x3}\n+    \n+    # Boundary test cases for min_degrees greater than max_degrees should raise ValueError\n+    raises(ValueError, lambda: set(itermonomials([x1, x2, x3], 2, 3)))\n+    raises(ValueError, lambda: set(itermonomials([x1, x2, x3], 3, 4)))\n+    \n+    # Tests with max_degrees and min_degrees as lists\n+    assert set(itermonomials([x1, x2, x3], [2, 2, 2], [1, 1, 1])) == {x1, x2, x3, x1*x2, x1*x3, x2*x3, x1**2, x2**2, x3**2, x1*x2*x3}\n+    assert set(itermonomials([x1, x2, x3], [3, 2, 1], [2, 1, 0])) == {x1**2, x1**2*x2, x1**2*x3, x1*x2, x1*x2*x3, x1*x3, x2, x2*x3, x3}\n+    \n+    # Ensure that only monomials with total degree between min_degrees and max_degrees are returned\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2, x2**3, x2**2*x3, x2*x3**2, x3**3, x1**2, x2**2, x3**2, x1*x2, x1*x3, x2*x3}\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n     assert set(itermonomials([i, j, k], [0, 1, 0])) == {1, j}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..05bb03a 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -48,6 +49,16 @@ def test_solve_poly_system():\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n+    \n+    # Additional test cases for infinite solutions detection\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y - 1], x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        Poly(x - 1, x, y), (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        Poly(y - 1, x, y), (x, y)))\n \n \n def test_solve_biquadratic():\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..760aed0 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -10,7 +11,13 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n+\n \n+def test_issue_22684():\n+    # Original issue test: Used to give an error\n+    with evaluate(False):\n+        Point(1, 2)\n \n def test_point():\n     x = Symbol('x', real=True)\n@@ -444,7 +451,22 @@ def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n-def test__normalize_dimension():\n+def test_issue_22684_advanced():\n+    from sympy.core.numbers import Integer\n+    from sympy.geometry import Point2D\n+    \n+    # Additional advanced test cases for issue\n+    with evaluate(False):\n+        p = Point2D(Integer(1), Integer(2))\n+        assert p == Point2D(1, 2)\n+\n+    # Test with non-integer but real inputs\n+    with evaluate(False):\n+        p = Point2D(Rational(1, 2), Rational(3, 4))\n+        assert p == Point2D(Rational(1, 2), Rational(3, 4))\n+\n+    # Confirming that complex components still raise an error\n+    raises(ValueError, lambda: Point2D(1 + I, 2))\n     assert Point._normalize_dimension(Point(1, 2), Point(3, 4)) == [\n         Point(1, 2), Point(3, 4)]\n     assert Point._normalize_dimension(\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..bf943a6 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -337,8 +337,16 @@ def test_cse_Indexed():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n-\n-def test_cse_MatrixSymbol():\n+from sympy import symbols, MatrixSymbol, cse, Matrix\n+import sympy as sp\n+\n+def test_cse_matrixsymbol_indexing():\n+    A = MatrixSymbol('A', 4, 4)\n+    B = MatrixSymbol('B', 4, 4)\n+    expr = A[0, 0] * B[0, 0] + A[0, 1] * B[1, 0]\n+    replacements, reduced_exprs = cse(expr)\n+    assert replacements == [(sp.Symbol('x0'), A[0, 0] * B[0, 0]), (sp.Symbol('x1'), A[0, 1] * B[1, 0])]\n+    assert reduced_exprs == [replacements[0][0] + replacements[1][0]]\n     # MatrixSymbols have non-Basic args, so make sure that works\n     A = MatrixSymbol(\"A\", 3, 3)\n     assert cse(A) == ([], [A])\n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..11d7a25 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -37,6 +38,18 @@ def test_array_negative_indices():\n \n         assert test_array[-1, -1] == 10\n \n+def test_issue_17851_empty_array():\n+    for ArrayType in array_types:\n+        A = ArrayType([])\n+        assert isinstance(A, ArrayType)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n+\n+def test_issue_17851_empty_immutable_array():\n+    A = ImmutableDenseNDimArray([])\n+    assert isinstance(A, ImmutableDenseNDimArray)\n+    assert A.shape == (0,)\n+    assert list(A) == []\n \n def test_issue_18361():\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..c9bb77c 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,23 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n+def test_lambdify_tuple_single_element():\n+    # Check if the generated code for a single-element tuple includes the trailing comma\n+    f2b = lambdify([], (1,))\n+    source_code = inspect.getsource(f2b)\n+    assert \"return (1,)\" in source_code, \"The trailing comma for single-element tuple is missing in the generated code.\"\n+    assert f2b() == (1,), \"The function should return a tuple with one element.\"\n+\n+def test_lambdify_tuple_multiple_elements():\n+    # Ensure that tuples with multiple elements are handled correctly\n+    f2b_multi = lambdify([], (1, 2))\n+    source_code_multi = inspect.getsource(f2b_multi)\n+    assert \"return (1, 2)\" in source_code_multi, \"The generated code for multi-element tuple is incorrect.\"\n+    assert f2b_multi() == (1, 2), \"The function should return a tuple with multiple elements.\"\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..37edda2 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,30 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..c8e20bc 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,6 +45,29 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_issue_24142_fix():\n+    # Test tensor products with scalar factors that previously caused incomplete expansion\n+    assert TP(2*A - B, A + B).expand(tensorproduct=True) == \\\n+        2*TP(A, A) + 2*TP(A, B) - TP(B, A) - TP(B, B)\n+\n+    # Test tensor products with composite scalar and tensor factors\n+    assert TP(x*(A - B), y*(B + C)).expand(tensorproduct=True) == \\\n+        x*y*(TP(A, B) + TP(A, C) - TP(B, B) - TP(B, C))\n+\n+    # Test zero tensor product to ensure proper handling of zero terms\n+    assert TP(A - A, B + C).expand(tensorproduct=True) == 0\n+\n+    # Test cases involving multiple levels of nested tensor products\n+    assert TP(TP(2*A, B) + TP(C, D), E).expand(tensorproduct=True) == \\\n+        2*TP(A, B, E) + TP(C, D, E)\n+\n+    # Test tensor product with complex multiplication within factors\n+    assert TP(I*A - B, A + I*B).expand(tensorproduct=True) == \\\n+        I*TP(A, A) + I*TP(A, I*B) - TP(B, A) - I*TP(B, B)\n+\n+    # Test original problematic case\n+    assert TP(2*U - V, U + V).expand(tensorproduct=True) == \\\n+        2*TP(U, U) + 2*TP(U, V) - TP(V, U) - TP(V, V)\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..c56bbc0 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -9,6 +10,8 @@ from sympy.functions.elementary.complexes import Abs\n from sympy.functions.elementary.exponential import (exp, log)\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.functions.elementary.trigonometric import sin\n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n from sympy.integrals.integrals import integrate\n from sympy.physics.units import (amount_of_substance, area, convert_to, find_unit,\n                                  volume, kilometer, joule, molar_gas_constant,\n@@ -561,8 +564,39 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+    \n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_equivalent_dimensions_with_different_scale():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n \n-def test_prefixed_property():\n+    expr1 = a1 * t1 + v1\n+    # Should not raise an error, dimensions should be equivalent\n+    SI._collect_factor_and_dimension(expr1)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..3102c42 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, V\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..8a158ba 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -185,6 +185,8 @@ class GrandParent(models.Model):\n \n \n class Parent(GrandParent):\n+    class Meta:\n+        ordering = [\"-pk\"]\n     pass\n \n \n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..954d4ff 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,31 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk_root_id(self):\n+        # Setup: Create authors with self-referencing 'editor' fields\n+        author1 = Author.objects.create(name=\"Author 1\")\n+        author2 = Author.objects.create(name=\"Author 2\", editor=author1)\n+        author3 = Author.objects.create(name=\"Author 3\", editor=author2)\n+\n+        # Create articles linked to authors\n+        article1 = Article.objects.create(headline=\"Article 1\", author=author1)\n+        article2 = Article.objects.create(headline=\"Article 2\", author=author2)\n+        article3 = Article.objects.create(headline=\"Article 3\", author=author3)\n+\n+        # Test ordering by self-referential foreign key field 'editor'\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'), \n+            ['Article 1', 'Article 2', 'Article 3'],\n+            attrgetter('headline')\n+        )\n+\n+        # Test ordering by self-referential foreign key with explicit descending order\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'), \n+            ['Article 3', 'Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..25a7688 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3189,6 +3189,38 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n \n         self.assertEqual(SomeForm()['field'].id_for_label, 'id_field')\n \n+    def test_boundfield_subwidget_id_for_label(self):\n+        \"\"\"\n+        If auto_id is provided when initializing the form, the generated ID in\n+        subwidgets must reflect that prefix.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n+\n+    def test_boundwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Ensure that the custom ID set in widget attributes is used for label\n+        when specified, for subwidgets as well.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n+\n+        form = SomeForm()\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n+\n     def test_boundfield_id_for_label_override_by_attrs(self):\n         \"\"\"\n         If an id is provided in `Widget.attrs`, it overrides the generated ID,\n",
  "django__django-16400": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex de2502e..fbc8709 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1484,4 +1484,48 @@ class CreatePermissionsTests(TestCase):\n                 content_type__app_label=opts.app_label,\n                 codename=codename,\n             ).exists()\n-        )\n+        )\n+\n+import django\n+from django.db import connections\n+from django.test.utils import override_settings\n+from django.test import TestCase\n+from django.contrib.auth.models import Permission\n+from django.apps import apps\n+from django.core.management import call_command\n+from io import StringIO\n+from django.core.management.base import CommandError\n+\n+class DefaultDBRouter:\n+    \"\"\"Route all writes to default.\"\"\"\n+\n+    def db_for_write(self, model, **hints):\n+        return \"default\"\n+\n+@override_settings(DATABASE_ROUTERS=[DefaultDBRouter()])\n+class CreatePermissionsMultipleDatabasesTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def test_set_permissions_fk_to_using_parameter(self):\n+        Permission.objects.using(\"other\").delete()\n+        with self.assertNumQueries(6, using=\"other\") as captured_queries:\n+            create_permissions(apps.get_app_config(\"auth\"), verbosity=0, using=\"other\")\n+        self.assertIn(\"INSERT INTO\", captured_queries[-1][\"sql\"].upper())\n+        self.assertGreater(Permission.objects.using(\"other\").count(), 0)\n+\n+    def test_migrate_command_respects_database_parameter(self):\n+        # Redirect stdout to capture command output\n+        out = StringIO()\n+        # Run the migrate command with the specified database\n+        call_command('migrate', database='other', stdout=out)\n+        # Check the output or any expected database operations\n+        output = out.getvalue()\n+        # Assert no CommandError is raised and output is as expected\n+        self.assertNotIn('CommandError', output)\n+        # Further checks can be done to ensure the 'other' database was used\n+        self.assertIn('Running migrations:', output)\n+\n+    def test_custom_db_router_usage_with_migrate(self):\n+        # Custom test to ensure the db router respects the 'using' parameter\n+        with self.assertRaises(CommandError):\n+            call_command('migrate', database='nonexistent')\n",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..768b3a9 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -657,6 +657,14 @@ def test_colorbar_scale_reset():\n \n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n+    # Test updating the colorbar after changing mappable.norm to LogNorm\n+    pcm.set_norm(LogNorm(vmin=z.min(), vmax=z.max()))\n+    cbar.update_normal(pcm)\n+    fig.canvas.draw()\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+    tick_texts = [tick.get_text() for tick in cbar.ax.yaxis.get_ticklabels()]\n+    assert all(t.startswith('$\\\\mathdefault{10^{') for t in tick_texts if t)  # Check Log scale ticks\n+\n \n def test_colorbar_get_ticks_2():\n     plt.rcParams['_internal.classic_mode'] = False\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..ed54c6c 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,30 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_stacked_array_to_unstacked_dataset_single_dim(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n+\n+    def test_to_unstacked_dataset_single_dim_different_values(self):\n+        # test unstacking with single dimensions but different data values\n+        arr1 = xr.DataArray(np.array([1, 2, 3]), coords=[(\"x\", [0, 1, 2])])\n+        arr2 = xr.DataArray(np.array([4, 5, 6]), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr1, \"b\": arr2})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n+\n+    def test_to_unstacked_dataset_single_dim_with_nan(self):\n+        # test unstacking with NaN values\n+        arr = xr.DataArray(np.array([1, np.nan, 3]), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..ae97369 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,29 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output and custom aggregation.\"\"\"\n+\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    transformer = FeatureUnion([(\"custom\", MyTransformer())]).set_output(transform=\"pandas\")\n+    result = transformer.fit_transform(data)\n+    \n+    # Expected result is the sum of 24 hours * 10 = 240 for 4 days\n+    expected = pd.DataFrame({\"custom__value\": [240, 240, 240, 240]})\n+    pd.testing.assert_frame_equal(result, expected)\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..fd96ca7 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -131,6 +131,51 @@ def test_decorators(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    # Test case to verify that annotation-only members in a superclass are documented\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only.SuperClass', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: SuperClass()',\n+        '   :module: target.annotation_only',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: SuperClass.attr1',\n+        '      :module: target.annotation_only',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+    # Verify for the subclass if the annotation-only attribute of the superclass is documented\n+    actual = do_autodoc(app, 'class', 'target.annotation_only.SubClass', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: SubClass()',\n+        '   :module: target.annotation_only',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: SubClass.attr1',\n+        '      :module: target.annotation_only',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: SubClass.attr2',\n+        '      :module: target.annotation_only',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..a5936ae 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -9,8 +10,23 @@ from sympy.utilities.pytest import XFAIL\n from sympy.abc import x, y, z, t, a, b, c, d, e, f, g, h, i, k\n \n \n+def test_issue_15129_trigsimp_methods_with_rationals():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    \n+    # Test simplification\n+    assert simplify(r1) == cos(S(1)/50)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+\n+    # Direct expression\n+    r2 = sin(Rational(1, 50)) * sin(Rational(1, 25)) + cos(Rational(1, 50)) * cos(Rational(1, 25))\n+    assert simplify(r2) == cos(S(1)/50)\n+    assert trigsimp(r2) == cos(S(1)/50)\n \n-def test_trigsimp1():\n+    # acos should simplify to the angle difference\n+    assert simplify(acos(r2)) == acos(cos(S(1)/50))\n+    assert trigsimp(acos(r2)) == acos(cos(S(1)/50))\n     x, y = symbols('x,y')\n \n     assert trigsimp(1 - sin(x)**2) == cos(x)**2\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..5b511dd 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,28 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_with_addition():\n+    from sympy import Sum, oo, pprint\n+    from sympy.abc import x\n \n-def test_units():\n+    # Test the centering for Sum pretty print\n+    expr = Sum(x, (x, 1, oo)) + 3\n+\n+    # Pretty print to a string\n+    result = pprint(expr, use_unicode=True, num_columns=40)\n+\n+    # Verify the output aligns `x` and `+ 3` correctly\n+    expected = u(\"\"\"\\\n+  \u221e    \\n\\\n+ ___   \\n\\\n+ \u2572     \\n\\\n+  \u2572   x\\n\\\n+  \u2571     + 3\\n\\\n+ \u2571     \\n\\\n+ \u203e\u203e\u203e   \\n\\\n+x = 1  \\\n+\"\"\")\n+    assert result == expected\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..6fd985e 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -704,8 +704,31 @@ def test_uniq():\n     assert list(uniq([2, 3, 2, 4, [2], [1], [2], [3], [1]])) == \\\n         [2, 3, 4, [2], [1], [3]]\n \n-\n-def test_kbins():\n+def test_uniq_runtime_error():\n+    from sympy.utilities.iterables import uniq\n+    from sympy.utilities.pytest import raises\n+\n+    # Original test case from the patch\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # Additional cases to test different sequence modifications\n+    g = list('THISTLE')\n+    raises(RuntimeError, lambda: [g.remove(i) for i in uniq(g)])\n+    \n+    h = [2, 3, 2, 4, 2]\n+    raises(RuntimeError, lambda: [h.remove(i) for i in uniq(h)])\n+\n+    i = [1, 2, 3, 1, 2, 3]\n+    raises(RuntimeError, lambda: [i.pop() for i in uniq(i)])\n+\n+    j = [1, 2, 3, 4, 5]\n+    # No modification in j, should not raise\n+    result = [x for x in uniq(j)]\n+    assert result == [1, 2, 3, 4, 5]\n     assert len(list(kbins('1123', 2, ordered=1))) == 24\n     assert len(list(kbins('1123', 2, ordered=11))) == 36\n     assert len(list(kbins('1123', 2, ordered=10))) == 10\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..b50247b 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -8,6 +9,7 @@ from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n+from django.db.models import Max\n \n from .models import (\n     Article, Author, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..ea662d8 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,6 +546,23 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n+    def test_subquery_sql_generation(self):\n+        from django.db import connection\n+        from django.db.models import Subquery\n+        from apps.models import App\n+\n+        # Create a queryset and a Subquery object\n+        queryset = App.objects.all()\n+        subquery = Subquery(queryset)\n+\n+        # Ensure the subquery attribute is set to True\n+        self.assertTrue(subquery.query.subquery)\n+\n+        # Compile the SQL and check it starts and ends with parentheses\n+        compiler = subquery.query.get_compiler(connection=connection)\n+        sql, params = subquery.as_sql(compiler, connection)\n+        self.assertTrue(sql.startswith('(') and sql.endswith(')'))\n+\n     def test_uuid_pk_subquery(self):\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..c66de4a 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,26 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +184,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..8ee5be6 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -12,7 +13,32 @@ import pytest\n from PIL import Image\n \n import matplotlib as mpl\n-from matplotlib import gridspec, rcParams\n+def test_dpi_after_unpickling():\n+    # Create a figure with a specific DPI\n+    original_dpi = 200\n+    fig = plt.figure(dpi=original_dpi)\n+    \n+    # Pickle and unpickle the figure\n+    fig_pickled = pickle.dumps(fig)\n+    fig_unpickled = pickle.loads(fig_pickled)\n+    \n+    # Assert that the DPI has not changed\n+    assert fig_unpickled.dpi == original_dpi, (\n+        f\"Expected DPI to remain {original_dpi} after unpickling, but got {fig_unpickled.dpi}\"\n+    )\n+\n+def test_dpi_stability_in_loop():\n+    # Create a figure with a specific DPI\n+    initial_dpi = 200\n+    fig = plt.figure(dpi=initial_dpi)\n+    \n+    # Run a loop to repeatedly pickle and unpickle the figure\n+    for i in range(5):\n+        fig_pickled = pickle.dumps(fig)\n+        fig = pickle.loads(fig_pickled)\n+        assert fig.dpi == initial_dpi, (\n+            f\"Expected DPI to be {initial_dpi} after {i + 1} iterations, but got {fig.dpi}\"\n+        )\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n from matplotlib.figure import Figure, FigureBase\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..07f75e3 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+import seaborn as sns\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,6 +1625,23 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n+    def test_pairgrid_with_hue_in_map(self):\n+        # This test emulates the described issue with the PairGrid and hue mapping in Seaborn\n+\n+        # Load iris dataset\n+        iris = sns.load_dataset(\"iris\")\n+\n+        # Create a PairGrid without hue\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        \n+        try:\n+            # Attempt to map a scatterplot with hue\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+        except Exception as e:\n+            # If an exception occurs, the test should fail and print the exception\n+            pytest.fail(f\"PairGrid mapping failed with hue in map: {e}\")\n+        \n     def test_linewidths(self, long_df):\n \n         f, ax = plt.subplots()\n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..b2b02c3 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -323,6 +323,7 @@ class TestTraceback_f_g_h:\n         assert entry.frame.code.name == \"g\"\n \n \n+import pytest\n def test_excinfo_exconly():\n     excinfo = pytest.raises(ValueError, h)\n     assert excinfo.exconly().startswith(\"ValueError\")\n@@ -346,8 +347,23 @@ def test_excinfo_str():\n     assert s.endswith(\"ValueError\")\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n-\n-def test_excinfo_for_later():\n+def test_excinfo_raises_str_behavior():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    \n+    # Verify that str(excinfo) does not give the full exception message\n+    assert str(excinfo).startswith(\"<ExceptionInfo LookupError\")\n+    \n+    # Verify that str(excinfo.value) gives the full exception message\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+\n+def test_excinfo_raises_value():\n+    # Test to ensure e.value behaves correctly\n+    with pytest.raises(ValueError) as excinfo:\n+        raise ValueError(\"hello\\nworld\")\n+    \n+    # Check that str(excinfo.value) returns the exception message\n+    assert str(excinfo.value) == \"hello\\nworld\"\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n     assert \"for raises\" in str(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..2a73bf0 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,7 +405,18 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n-    def test_pytest_collect_file_from_sister_dir(self, testdir):\n+    def test_collect_only_with_shortcut(self, testdir):\n+        # Create a simple test file\n+        testdir.makepyfile(\"def test_x(): pass\")\n+        # Run pytest with the long-form collect-only option\n+        result_long = testdir.runpytest(\"--collect-only\")\n+        result_long.stdout.fnmatch_lines([\"*test_x*\"])\n+        assert result_long.ret == 0\n+        \n+        # Run pytest with the short-form collect-only option (assuming \"-c\" is the new shortcut)\n+        result_short = testdir.runpytest(\"-c\")\n+        result_short.stdout.fnmatch_lines([\"*test_x*\"])\n+        assert result_short.ret == 0\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n         conf1 = testdir.makeconftest(\n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..f363a64 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -90,6 +90,16 @@ def missing_attr(c,\n     # type: (...) -> str\n     return a + (b or \"\")\n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n \n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n@@ -98,4 +108,4 @@ class _ClassWithDocumentedInit:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..260c938 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,16 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Sum, Symbol, symbols, Identity\n+from sympy.matrices.expressions import MatrixSymbol\n+from sympy.abc import n\n \n-def test_Identity_doit():\n+def test_Identity_sum_elements():\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+    # Verify that the sum of elements in an identity matrix should be 'n'\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 3) == 3\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 4) == 4\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..6062be8 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,15 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_issue_latex_parsing_of_nested_fractions():\n+    from sympy.parsing.latex import parse_latex\n+    from sympy import symbols, Rational, Pow\n+    \n+    a, b, c = symbols('a b c')\n+    # Test the specific issue with nested fractions\n+    expr = parse_latex(r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\")\n+    expected = ((a**3 + b)/c) / (1/(c**2))\n+    assert expr == expected, f\"Expected: {expected}, but got: {expr}\"\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}