{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..1a38fba 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -18,6 +18,39 @@ from astropy.modeling.core import ModelDefinitionError\n sh1 = models.Shift(1, name='shift1')\n sh2 = models.Shift(2, name='sh2')\n scl1 = models.Scale(1, name='scl1')\n+from astropy.modeling import models\n+import numpy as np\n+from numpy.testing import assert_allclose\n+from astropy.modeling.separable import separability_matrix, is_separable\n+from astropy.modeling.mappings import Mapping\n+import pytest\n+\n+# Define additional models needed for testing\n+sh1 = models.Shift(1)\n+sh2 = models.Shift(2)\n+rot = models.Rotation2D(2)\n+scl1 = models.Scale(1)\n+scl2 = models.Scale(2)\n+\n+# Add new test case for nested CompoundModels\n+def test_nested_compound_model_separability():\n+    \"\"\"Test separability for nested CompoundModels\"\"\"\n+\n+    # Simple compound model\n+    cm = models.Linear1D(10) & models.Linear1D(5)\n+    # Expecting a diagonal separability matrix\n+    expected_simple = np.array([[True, False], [False, True]])\n+    assert_allclose(separability_matrix(cm), expected_simple)\n+\n+    # More complex nested compound model\n+    nested_cm = models.Pix2Sky_TAN() & cm\n+    # Test for correct separability of nested models\n+    expected_nested = np.array([[True, True, False, False],\n+                                [True, True, False, False],\n+                                [False, False, True, True],\n+                                [False, False, True, True]])\n+    assert_allclose(separability_matrix(nested_cm), expected_nested)\n+\n scl2 = models.Scale(2, name='scl2')\n map1 = Mapping((0, 1, 0, 1), name='map1')\n map2 = Mapping((0, 0, 1), name='map2')\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..acd4fee 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,10 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n \n from astropy.io import ascii\n \n@@ -10,8 +14,28 @@ from .common import assert_almost_equal, assert_equal\n def assert_equal_splitlines(arg1, arg2):\n     assert_equal(arg1.splitlines(), arg2.splitlines())\n \n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n \n-def test_read_normal():\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n     \"\"\"Normal SimpleRST Table\"\"\"\n     table = \"\"\"\n # comment (with blank line above)\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..4fc2047 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,68 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+import numpy as np\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+from astropy.utils.exceptions import AstropyUserWarning\n \n-def test_read_example():\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip_lowercase(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    ! WT -- soft data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592\n+    NO NO NO NO NO\n+    ! WT -- hardness ratio\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    ! Add command, just to raise the warning.\n+    READ TERR 1\n+    ! WT -- whatever\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    \"\"\"\n+    \n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+    \n+    path = str(tmp_path / \"test.qdp\")\n+    with open(path, \"w\") as fp:\n+        fp.write(example_qdp)\n+    \n+    table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n+    assert np.isclose(table[\"MJD_nerr\"][0], -2.37847222222222e-05)\n+    \n+    path2 = str(tmp_path / \"test2.qdp\")\n+    _write_table_qdp(table, path2)\n+    new_table = _read_table_qdp(path2, names=[\"MJD\", \"Rate\"], table_id=0)\n+\n+    for col in new_table.colnames:\n+        assert np.allclose(new_table[col], table[col], equal_nan=True)\n+\n+    for meta_name in [\"initial_comments\", \"comments\"]:\n+        assert meta_name in new_table.meta\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..ab117a2 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,41 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+def test_nddata_mask_propagation():\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..30e0abe 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,23 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+        \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Test that the default FILE_UPLOAD_PERMISSIONS is set to 0o644.\n+        \"\"\"\n+        # Assuming default_storage is available and correctly configured\n+        expected_default_permission = 0o644\n+        self.assertEqual(default_storage.file_permissions_mode or expected_default_permission, expected_default_permission)\n+\n+    def test_file_upload_permissions_with_temp_file(self):\n+        \"\"\"\n+        Test file permissions when using temporary file storage.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_TEMP_DIR='/tmp'):\n+            # Simulate an upload and verify if permissions are set correctly\n+            expected_default_permission = 0o644\n+            self.assertEqual(default_storage.file_permissions_mode or expected_default_permission, expected_default_permission)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..be18054 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -514,6 +514,22 @@ class MigrateTests(MigrationTestBase):\n             out.getvalue()\n         )\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_sqlmigrate_for_non_transactional_databases(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support\n+        transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n     def test_showmigrations_plan_app_label_no_migrations(self):\n         out = io.StringIO()\n",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..65c24ce 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,7 +238,13 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            \"trailingnewline\\n\",  # Test with a trailing newline\n         ]\n+        # Adding a test case with a trailing newline to ensure it raises a ValidationError\n+        invalid_usernames.extend([\n+            \"trailingnewline\\n\",\n+            \"newlineinmiddle\\nname\",\n+        ])\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -250,7 +256,21 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\n+            \"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\",\n+            \"trailingnewline\\n\",  # Test with a trailing newline\n+            \"trailingnewline\\n\",  # Test with a trailing newline\n+        ]\n+        # Adding a test case with a trailing newline to ensure it raises a ValidationError\n+        invalid_usernames.extend([\n+            \"trailingnewline\\n\",\n+            \"newlineinmiddle\\nname\",\n+        ])\n+        # Adding a test case with a trailing newline to ensure it raises a ValidationError\n+        invalid_usernames.extend([\n+            \"trailingnewline\\n\",\n+            \"newlineinmiddle\\nname\",\n+        ])\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +278,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..4758b25 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,11 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        # Test handling of memoryview content\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n@@ -366,6 +371,25 @@ class HttpResponseTests(unittest.TestCase):\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n \n+    def test_memoryview_large_content(self):\n+        # Test handling of large memoryview content\n+        large_content = b'x' * 10**6  # 1 MB of data\n+        r = HttpResponse(memoryview(large_content))\n+        self.assertEqual(r.content, large_content)\n+\n+    def test_memoryview_setter(self):\n+        # Test using memoryview in content setter\n+        r = HttpResponse()\n+        r.content = memoryview(b'memoryview setter test')\n+        self.assertEqual(r.content, b'memoryview setter test')\n+\n+    def test_memoryview_partial_content(self):\n+        # Test partial memoryview\n+        data = b'0123456789'\n+        mv = memoryview(data)\n+        r = HttpResponse(mv[2:8])\n+        self.assertEqual(r.content, b'234567')\n+\n     def test_iter_content(self):\n         r = HttpResponse(['abc', 'def', 'ghi'])\n         self.assertEqual(r.content, b'abcdefghi')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..792ae7a 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,5 +1,7 @@\n+\n from math import ceil\n \n+from django.db.models.deletion import Collector\n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -464,7 +466,37 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Test to ensure the PK is set to None after deleting a model instance without dependencies\n+        u = User.objects.create()\n+        # Verify the User instance can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_set_pk_none_multiple_instances(self):\n+        # Test to ensure the PK of multiple instances is set to None after deletion\n+        u1 = User.objects.create()\n+        u2 = User.objects.create()\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u1))\n+        self.assertTrue(collector.can_fast_delete(u2))\n+        u1.delete()\n+        u2.delete()\n+        self.assertIsNone(u1.pk)\n+        self.assertIsNone(u2.pk)\n+\n+    def test_fast_delete_instance_with_no_fast_delete(self):\n+        # Test a situation where fast delete is not possible to ensure regular behavior\n+        class CustomModel(models.Model):\n+            name = models.CharField(max_length=100)\n+        # Assuming that we have some logic making fast delete false\n+        instance = CustomModel.objects.create(name='Test')\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(instance))  # Fast delete is not possible\n+        instance.delete()\n+        self.assertIsNone(instance.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..ba08cb0 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,49 @@\n+\n+class MigrationTests(TestCase):\n+    available_apps = [\n+        'auth_tests',\n+        'django.contrib.auth',\n+        'django.contrib.contenttypes',\n+    ]\n+\n+    def test_duplicate_permission_migration(self):\n+        \"\"\"\n+        Test for handling duplicate permissions during migration.\n+        \"\"\"\n+        # Create a proxy model content type\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        \n+        # Create a duplicate permission\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+\n+        # Attempt migration and catch IntegrityError\n+        with self.assertRaises(IntegrityError):\n+            call_command('migrate', 'auth', '0011_update_proxy_permissions')\n+\n+    def test_migrate_without_errors(self):\n+        \"\"\"\n+        Ensure migrations apply without IntegrityError when no duplicates exist.\n+        \"\"\"\n+        # Ensure no duplicates exist in the setup\n+        Permission.objects.filter(codename='add_proxy').delete()\n+\n+        try:\n+            call_command('migrate', 'auth')\n+        except IntegrityError:\n+            self.fail(\"Migration raised IntegrityError unexpectedly!\")\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.core.management import call_command\n+from django.db import IntegrityError\n \n from .models import Proxy, UserProxy\n \n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..088a0ba 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -3,6 +3,23 @@ import os\n import py_compile\n import shutil\n import sys\n+class TestManagePyChangeDetection(SimpleTestCase):\n+    def test_manage_py_file_change_detection(self):\n+        \"\"\"\n+        Test that changes to the manage.py file are detected by the autoreloader.\n+        \"\"\"\n+        manage_py_path = Path(sys.modules['__main__'].__file__)\n+        \n+        # Simulate a change in the manage.py file\n+        with manage_py_path.open('a') as manage_file:\n+            manage_file.write(\"# Test change\\n\")\n+\n+        # Clear caches to simulate the autoreloader behavior\n+        self.clear_autoreload_caches()\n+\n+        # Check that the manage.py file is detected in the list of module files\n+        self.assertFileFound(manage_py_path)\n+\n import tempfile\n import threading\n import time\n@@ -17,6 +34,7 @@ from django.apps.registry import Apps\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n from django.utils import autoreload\n+import sys\n from django.utils.autoreload import WatchmanUnavailable\n \n from .utils import on_macos_with_hfs\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..0c57969 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -9,6 +9,8 @@ from io import StringIO\n from pathlib import Path\n from unittest import mock\n \n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.core import mail\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.db import DatabaseError, connection\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..3d98f53 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -211,8 +211,59 @@ class CharFieldTests(SimpleTestCase):\n             thing = models.CharField(max_length=100, blank=True, choices=Things())\n \n         self.assertEqual(ThingWithIterableChoices._meta.get_field('thing').check(), [])\n+    def test_max_length_exactly_longest_choice(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=3,\n+                choices=[\n+                    ('OK', 'OK'),\n+                    ('YES', 'Yes!'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n+\n+    def test_max_length_with_no_choices(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=5,\n+                choices=[],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n+\n+    def test_max_length_equal_to_longest_choice(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=4,\n+                choices=[\n+                    ('SAVE', 'Save'),\n+                    ('EDIT', 'Edit'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n+\n+    def test_max_length_too_small_for_nested_choices(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=5,\n+                choices=[\n+                    ('Group', [('TOO LONG', 'Too Long')]),\n+                ],\n+            )\n \n-    def test_choices_containing_non_pairs(self):\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (8 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n         class Model(models.Model):\n             field = models.CharField(max_length=10, choices=[(1, 2, 3), (1, 2, 3)])\n \n",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..3db3fd5 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,7 +318,31 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_two_digit_years(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        \n+        # Simulate different current UTC times to test two-digit year handling\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        \n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        \n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..cc282f5 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,30 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+class TestChoices(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class TestEnumModel(models.Model):\n+    choice_field = models.CharField(max_length=10, choices=TestChoices.choices)\n+\n+class ModelEnumTests(SimpleTestCase):\n+    def test_enum_choice_value_type(self):\n+        instance = TestEnumModel(choice_field=TestChoices.FIRST_CHOICE)\n+        # Test the value type directly\n+        self.assertIsInstance(instance.choice_field, str)\n+        self.assertEqual(instance.choice_field, \"first\")\n+        # Test the str conversion\n+        self.assertEqual(str(instance.choice_field), \"first\")\n+\n+    def test_enum_choice_retrieval(self):\n+        # Simulate saving and then retrieving the model instance\n+        TestEnumModel.objects.create(choice_field=TestChoices.FIRST_CHOICE)\n+        retrieved_instance = TestEnumModel.objects.last()\n+        self.assertIsInstance(retrieved_instance.choice_field, str)\n+        self.assertEqual(retrieved_instance.choice_field, \"first\")\n+        self.assertEqual(str(retrieved_instance.choice_field), \"first\")\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..5b6dc8e 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,7 +148,21 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+from django.test import TestCase\n+\n class GetFieldDisplayTests(SimpleTestCase):\n+    \n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..9fa8857 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,9 +1,10 @@\n+\n import pickle\n \n from django import forms\n from django.core.exceptions import ValidationError\n from django.db import models\n-from django.test import SimpleTestCase, TestCase\n+from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils.functional import lazy\n \n from .models import (\n",
  "django__django-12286": "",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..b751592 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +6,8 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TransactionTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..fefb327 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -152,14 +152,41 @@ class RelativeFieldTests(SimpleTestCase):\n                 \"keyword argument.\",\n                 hint=(\n                     'If you want to create a recursive relationship, use '\n-                    'ForeignKey(\"self\", symmetrical=False, through=\"AmbiguousRelationship\").'\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n                 ),\n                 obj=field,\n                 id='fields.E335',\n             ),\n         ])\n \n-    def test_relationship_model_with_foreign_key_to_wrong_model(self):\n+    def test_corrected_recursive_relationship_hint(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('members')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.members', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must specify \"\n+                \"which foreign key Django should use via the through_fields \"\n+                \"keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n         class WrongModel(models.Model):\n             pass\n \n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..ffc81f3 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1241,6 +1241,72 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_cleanse_setting_with_nested_structures(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'key1': {\n+                'key2': [\n+                    {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+                    'value'\n+                ]\n+            },\n+            'key3': (\n+                {'token': '12345'},\n+                [ {'password': 'secret'} ]\n+            )\n+        }\n+        expected = {\n+            'key1': {\n+                'key2': [\n+                    {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+                    'value'\n+                ]\n+            },\n+            'key3': (\n+                {'token': reporter_filter.cleansed_substitute},\n+                [ {'password': reporter_filter.cleansed_substitute} ]\n+            )\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            expected,\n+        )\n+\n     def test_cleanse_setting_recurses_in_dictionary(self):\n         reporter_filter = SafeExceptionReporterFilter()\n         initial = {'login': 'cooper', 'password': 'secret'}\n@@ -1249,6 +1315,72 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_cleanse_setting_with_nested_structures(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'key1': {\n+                'key2': [\n+                    {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+                    'value'\n+                ]\n+            },\n+            'key3': (\n+                {'token': '12345'},\n+                [ {'password': 'secret'} ]\n+            )\n+        }\n+        expected = {\n+            'key1': {\n+                'key2': [\n+                    {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+                    'value'\n+                ]\n+            },\n+            'key3': (\n+                {'token': reporter_filter.cleansed_substitute},\n+                [ {'password': reporter_filter.cleansed_substitute} ]\n+            )\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            expected,\n+        )\n+\n     def test_request_meta_filtering(self):\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n@@ -1257,6 +1389,72 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_cleanse_setting_with_nested_structures(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'key1': {\n+                'key2': [\n+                    {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+                    'value'\n+                ]\n+            },\n+            'key3': (\n+                {'token': '12345'},\n+                [ {'password': 'secret'} ]\n+            )\n+        }\n+        expected = {\n+            'key1': {\n+                'key2': [\n+                    {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+                    'value'\n+                ]\n+            },\n+            'key3': (\n+                {'token': reporter_filter.cleansed_substitute},\n+                [ {'password': reporter_filter.cleansed_substitute} ]\n+            )\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            expected,\n+        )\n+\n     def test_exception_report_uses_meta_filtering(self):\n         response = self.client.get('/raises500/', HTTP_SECRET_HEADER='super_secret')\n         self.assertNotIn(b'super_secret', response.content)\n@@ -1265,6 +1463,72 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             HTTP_SECRET_HEADER='super_secret',\n             HTTP_ACCEPT='application/json',\n         )\n+\n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_cleanse_setting_with_nested_structures(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'key1': {\n+                'key2': [\n+                    {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+                    'value'\n+                ]\n+            },\n+            'key3': (\n+                {'token': '12345'},\n+                [ {'password': 'secret'} ]\n+            )\n+        }\n+        expected = {\n+            'key1': {\n+                'key2': [\n+                    {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+                    'value'\n+                ]\n+            },\n+            'key3': (\n+                {'token': reporter_filter.cleansed_substitute},\n+                [ {'password': reporter_filter.cleansed_substitute} ]\n+            )\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            expected,\n+        )\n         self.assertNotIn(b'super_secret', response.content)\n \n \n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..795311a 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,7 +1759,28 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together(self):\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..479e096 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,7 +685,22 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n-    def test_fast_delete_empty_no_update_can_self_select(self):\n+    def test_queryset_delete_zero_objects(self):\n+        \"\"\"\n+        Test that QuerySet.delete returns a consistent result format when\n+        zero objects are deleted, ensuring it returns a dictionary with model-label keys and zero values.\n+        \"\"\"\n+        # Case 1: Model with a foreign key (should return (0, {'model_label': 0}))\n+        r = R.objects.create()\n+        HiddenUser.objects.filter(r=r).delete()\n+        deleted, deleted_objs = HiddenUser.objects.filter(r=r).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {HiddenUser._meta.label: 0})\n+\n+        # Case 2: Simple model without a foreign key (should return (0, {'model_label': 0}))\n+        deleted, deleted_objs = R.objects.filter(id=0).delete()  # Non-existent ID\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {R._meta.label: 0})\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n         `no_update_can_self_select` feature should work even if the specified\n@@ -697,7 +712,22 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_queryset_delete_zero_objects(self):\n+        \"\"\"\n+        Test that QuerySet.delete returns a consistent result format when\n+        zero objects are deleted, ensuring it returns a dictionary with model-label keys and zero values.\n+        \"\"\"\n+        # Case 1: Model with a foreign key (should return (0, {'model_label': 0}))\n+        r = R.objects.create()\n+        HiddenUser.objects.filter(r=r).delete()\n+        deleted, deleted_objs = HiddenUser.objects.filter(r=r).delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {HiddenUser._meta.label: 0})\n+\n+        # Case 2: Simple model without a foreign key (should return (0, {'model_label': 0}))\n+        deleted, deleted_objs = R.objects.filter(id=0).delete()  # Non-existent ID\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {R._meta.label: 0})\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..e982beb 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,52 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_async_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request for an existing static file\n+        scope = self.async_request_factory._base_scope(path='/static/existing_file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        existing_file_path = TEST_STATIC_ROOT / 'existing_file.txt'\n+        with open(existing_file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = existing_file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"existing_file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_async_static_file_not_found(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request for a non-existing static file\n+        scope = self.async_request_factory._base_scope(path='/static/non_existing_file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Read the response.\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], b'')\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..fb807c1 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -203,7 +203,27 @@ class TestUtilsText(SimpleTestCase):\n         # interning the result may be useful, e.g. when fed to Path.\n         self.assertEqual(sys.intern(text.slugify('a')), 'a')\n \n-    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_slugify_strip_dashes_and_underscores(self):\n+        items = [\n+            # Original test cases from the issue\n+            (' multiple---dash and  space ', 'multiple-dash-and-space', False),\n+            ('\\t whitespace-in-value \\n', 'whitespace-in-value', False),\n+            ('underscore_in-value', 'underscore_in-value', False),\n+            ('__strip__underscore-value___', 'strip-underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n+            \n+            # New test cases to verify the fix\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('___Leading and trailing___', 'leading-and-trailing', False),\n+            ('---Only-dashes---', 'only-dashes', False),\n+            ('__Only_underscores__', 'only-underscores', False),\n+            ('---Mixed---_---characters_---', 'mixed-characters', False),\n+            ('_ _ _Multiple_ _ _spaces_ _ _', 'multiple-spaces', False),\n+        ]\n+        for value, output, is_unicode in items:\n+            self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n     def test_unescape_entities(self):\n         items = [\n             ('', ''),\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..c103d5f 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -86,6 +87,27 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.difference(qs2).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_union_none_behavior(self):\n+        # This test ensures that calling .none() on a union queryset returns an empty result.\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        union_qs = qs1.union(qs2)\n+        \n+        # Calling .none() should produce an empty queryset\n+        self.assertEqual(union_qs.none().count(), 0)\n+\n+        # Ensure that after calling .none(), the queryset is still equivalent to calling none() directly.\n+        self.assertEqual(list(union_qs.none()), list(Number.objects.none()))\n+\n+    def test_union_with_mixed_empty_and_non_empty_qs(self):\n+        # This test checks behavior with a mix of empty and non-empty querysets.\n+        qs1 = Number.objects.none()  # An empty queryset\n+        qs2 = Number.objects.filter(num__gte=8)  # A non-empty queryset\n+        union_qs = qs1.union(qs2)\n+\n+        # Ensure the union of an empty and non-empty queryset behaves correctly\n+        self.assertNumbersEqual(union_qs, [8, 9], ordered=False)\n+\n     def test_union_with_empty_qs(self):\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.none()\n@@ -313,4 +335,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..b0ae0c9 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2819,7 +2819,70 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Setup characters\n+        marley = Character.objects.create(username=\"Marley\", last_action=\"2023-10-12\")\n+        threepwood = Character.objects.create(username=\"Threepwood\", last_action=\"2023-10-11\")\n+\n+        # Create jokes\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+\n+        # Associate characters with jokes\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        # Define Model and Form\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        # Check queryset for duplicates\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..cb9f633 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -9,8 +9,32 @@ from django.test import SimpleTestCase\n from django.test.utils import isolate_apps\n \n \n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n+\n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n+    def test_abstract_inherited_fields_equality_and_hash(self):\n+        \"\"\"Field instances from different models with the same abstract model are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n@@ -347,4 +371,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..0271fb2 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,6 +39,27 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..b6822e7 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -8,6 +9,7 @@ from unittest import mock\n \n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n+from collections import namedtuple\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n     DateField, DateTimeField, DecimalField, DurationField, Exists, Expression,\n@@ -875,6 +877,14 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'],\n             ordered=False\n         )\n+\n+    def test_range_lookup_namedtuple(self):\n+        # Ensure named tuples can be used with range lookups without errors\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n         self.assertQuerysetEqual(\n             Company.objects.filter(num_employees__range=(1, 100)),\n             [\n@@ -884,6 +894,14 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_namedtuple(self):\n+        # Ensure named tuples can be used with range lookups without errors\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..21f46fd 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,6 +19,39 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_main_py(self):\n+        \"\"\"\n+        Test when the program name is '__main__.py' and should convert to 'python -m django'.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['__main__.py'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_empty_argv(self):\n+        \"\"\"\n+        Test when argv is empty, should default to 'help'.\n+        \"\"\"\n+        with captured_stdout() as out, captured_stderr() as err:\n+            execute_from_command_line(['django-admin'])\n+        self.assertIn('usage: django-admin', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..5df701c 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -7,9 +8,50 @@ from django.core.management import CommandError, call_command\n from django.test import SimpleTestCase\n from django.test.utils import captured_stdin, captured_stdout\n \n+script_globals = 'print(\"__name__\" in globals())'\n+script_with_inline_function = (\n+    'import django\\n'\n+    'def f():\\n'\n+    '    print(django.__version__)\\n'\n+    'f()'\n+)\n \n class ShellCommandTestCase(SimpleTestCase):\n \n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n     def test_command_option(self):\n         with self.assertLogs('test', 'INFO') as cm:\n             call_command(\n@@ -49,4 +91,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..204bad3 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -966,8 +966,46 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n+    from django.urls import reverse\n+    from django.contrib.admin.sites import site as admin_site\n+    from django.test import TestCase, RequestFactory\n+    from .models import Profile, VerboseNameProfile, VerboseNamePluralProfile, BothVerboseNameProfile, ProfileCollection\n+    from django.contrib.admin import ModelAdmin, TabularInline\n+\n+    def test_default_verbose_name_plural_from_verbose_name(self):\n+        class ProfileInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Single Profile'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [ProfileInline]\n+\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        self.assertContains(response, '<h2>Single Profiles</h2>')\n+        self.assertContains(response, 'Add another Single Profile')\n+\n+    def test_explicit_verbose_name_plural(self):\n+        class ProfileInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Single Profile'\n+            verbose_name_plural = 'Custom Profiles'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [ProfileInline]\n+\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n \n-    def test_verbose_name_plural_inline(self):\n+        self.assertContains(response, '<h2>Custom Profiles</h2>')\n+        self.assertContains(response, 'Add another Single Profile')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name_plural = 'Non-verbose childs'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..bd3ae1d 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -596,6 +596,21 @@ class TestQuerying(TestCase):\n         )\n \n     def test_isnull_key_or_none(self):\n+        # Test that using __isnull=True does not match JSON null values.\n+        # This is specifically to catch the issue described for SQLite and Oracle.\n+        \n+        # Test case where the key 'j' is missing\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+\n+        # Test case where the key 'j' is present and has a JSON null value\n+        obj_with_null = NullableJSONModel.objects.create(value={'j': None})\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=False),\n+            [self.objs[4], obj_with_null],\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..472a8df 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -154,6 +154,31 @@ class DispatcherTests(SimpleTestCase):\n         result = a_signal.send_robust(sender=self, val='test')\n         self.assertEqual(result, [])\n \n+    def test_send_robust_logs_exceptions(self):\n+        def fails(val, **kwargs):\n+            raise ValueError('this')\n+        a_signal.connect(fails)\n+        with self.assertLogs('django.dispatch', 'ERROR') as cm:\n+            result = a_signal.send_robust(sender=self, val='test')\n+        err = result[0][1]\n+        self.assertIsInstance(err, ValueError)\n+        self.assertEqual(err.args, ('this',))\n+        self.assertTrue(hasattr(err, '__traceback__'))\n+        self.assertIsInstance(err.__traceback__, TracebackType)\n+\n+        log_record = cm.records[0]\n+        self.assertEqual(\n+            log_record.getMessage(),\n+            'Error calling DispatcherTests.test_send_robust_logs_exceptions.<locals>.fails in '\n+            'Signal.send_robust() (this)',\n+        )\n+        self.assertIsNotNone(log_record.exc_info)\n+        _, exc_value, _ = log_record.exc_info\n+        self.assertIsInstance(exc_value, ValueError)\n+        self.assertEqual(str(exc_value), 'this')\n+\n+        a_signal.disconnect(fails)\n+\n     def test_send_robust_ignored_sender(self):\n         a_signal.connect(receiver_1_arg)\n         result = a_signal.send_robust(sender=self, val='test')\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..ed8ff50 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -282,6 +282,19 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         )\n \n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+\n+class AssertFormErrorsMixin:\n+    def assertFormErrors(self, expected_errors, clean_method, *args, **kwargs):\n+        try:\n+            clean_method(*args, **kwargs)\n+        except Exception as e:\n+            self.assertEqual(expected_errors, e.messages)\n+        else:\n+            self.fail('Expected ValidationError not raised.')\n+\n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n@@ -307,4 +320,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..e6ef23d 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -549,7 +550,36 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        # Test case based on the original issue description\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'jeff'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_with_non_numeric_pk_without_initialization(self):\n+        # Test case where the primary key is not initialized before setting\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent()\n+        child.parent = parent\n+        child.parent.name = 'jeff'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_with_non_numeric_pk_initialized_before_assignment(self):\n+        # Test case where the primary key is initialized before assigning to child\n+        parent = ParentStringPrimaryKey(name='jeff')\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        parent.save()\n+        child.save()\n+        self.assertTrue(ChildStringPrimaryKeyParent.objects.filter(parent=parent).exists())\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..a2af2af 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,9 +1,19 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n+from django.db.models import Q\n \n \n class QTests(SimpleTestCase):\n-    def test_combine_and_empty(self):\n+    def test_q_with_dict_keys_and(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n+    def test_q_with_dict_keys_or(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n         q = Q(x=1)\n         self.assertEqual(q & Q(), q)\n         self.assertEqual(Q() & q, q)\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..d2ea659 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -43,6 +43,36 @@ class BasicExpressionsTests(TestCase):\n             name=\"Example Inc.\", num_employees=2300, num_chairs=5,\n             ceo=Employee.objects.create(firstname=\"Joe\", lastname=\"Smith\", salary=10)\n         )\n+    \n+    def test_commutative_property_of_q_and_exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        tests_and = [\n+            (Exists(is_ceo), Q(salary__gte=20)),\n+            (Q(salary__gte=20), Exists(is_ceo)),\n+        ]\n+\n+        tests_or = [\n+            (Exists(is_poc), Q(salary__lt=15)),\n+            (Q(salary__lt=15), Exists(is_poc)),\n+        ]\n+\n+        for first, second in tests_and:\n+            with self.subTest(\"Testing commutative property with &\", first=first, second=second):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(first & second),\n+                    [self.foobar_ltd.ceo],\n+                )\n+\n+        for first, second in tests_or:\n+            with self.subTest(\"Testing commutative property with |\", first=first, second=second):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(first | second),\n+                    [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n+                )\n         cls.foobar_ltd = Company.objects.create(\n             name=\"Foobar Ltd.\", num_employees=3, num_chairs=4, based_in_eu=True,\n             ceo=Employee.objects.create(firstname=\"Frank\", lastname=\"Meyer\", salary=20)\n@@ -792,6 +822,36 @@ class BasicExpressionsTests(TestCase):\n                 output_field=BooleanField(),\n             ),\n         )\n+    \n+    def test_commutative_property_of_q_and_exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        tests_and = [\n+            (Exists(is_ceo), Q(salary__gte=20)),\n+            (Q(salary__gte=20), Exists(is_ceo)),\n+        ]\n+\n+        tests_or = [\n+            (Exists(is_poc), Q(salary__lt=15)),\n+            (Q(salary__lt=15), Exists(is_poc)),\n+        ]\n+\n+        for first, second in tests_and:\n+            with self.subTest(\"Testing commutative property with &\", first=first, second=second):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(first & second),\n+                    [self.foobar_ltd.ceo],\n+                )\n+\n+        for first, second in tests_or:\n+            with self.subTest(\"Testing commutative property with |\", first=first, second=second):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(first | second),\n+                    [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n+                )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n     def test_boolean_expression_combined(self):\n@@ -803,6 +863,36 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_ceo) | Exists(is_poc)),\n             [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n         )\n+    \n+    def test_commutative_property_of_q_and_exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        tests_and = [\n+            (Exists(is_ceo), Q(salary__gte=20)),\n+            (Q(salary__gte=20), Exists(is_ceo)),\n+        ]\n+\n+        tests_or = [\n+            (Exists(is_poc), Q(salary__lt=15)),\n+            (Q(salary__lt=15), Exists(is_poc)),\n+        ]\n+\n+        for first, second in tests_and:\n+            with self.subTest(\"Testing commutative property with &\", first=first, second=second):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(first & second),\n+                    [self.foobar_ltd.ceo],\n+                )\n+\n+        for first, second in tests_or:\n+            with self.subTest(\"Testing commutative property with |\", first=first, second=second):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(first | second),\n+                    [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n+                )\n         self.assertCountEqual(\n             Employee.objects.filter(Exists(is_ceo) & Exists(is_poc)),\n             [self.max],\n",
  "django__django-14155": "",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..3a88a29 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,7 +1,11 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n+from django.db import models\n+from django.test import SimpleTestCase, override_settings\n+from django.test.utils import isolate_apps\n \n \n @isolate_apps('model_options')\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..4221ed8 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2217,7 +2217,12 @@ class StartApp(AdminScriptTestCase):\n             \"won't replace conflicting files.\"\n         )\n \n-    def test_template(self):\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n         out, err = self.run_django_admin(['startapp', 'new_app'])\n         self.assertNoOutput(err)\n         app_path = os.path.join(self.test_dir, 'new_app')\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..eb1db09 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -14,6 +14,7 @@ from django.core import mail\n from django.core.exceptions import ValidationError\n from django.core.mail import EmailMultiAlternatives\n from django.forms.fields import CharField, Field, IntegerField\n+from django.forms import forms\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..f1670fc 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,6 +658,39 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n+    def test_serialize_type_model(self):\n+        \"\"\"\n+        Test that models.Model is serialized correctly with necessary imports.\n+        \"\"\"\n+        self.assertSerializedEqual(models.Model)\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(models.Model),\n+            (\"('models.Model', {'from django.db import models'})\", set()),\n+        )\n+\n+    def test_serialize_custom_model_with_mixin(self):\n+        \"\"\"\n+        Test serializing a custom model with a mixin and an abstract base class.\n+        This is to ensure that the migration writer correctly handles complex bases.\n+        \"\"\"\n+        class MyMixin:\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = models.TextField(primary_key=True)\n+\n+        expected_serialized_model = (\n+            \"('app.models.MyModel', {'import app.models'})\", set()\n+        )\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(MyModel),\n+            expected_serialized_model,\n+        )\n+\n     def test_simple_migration(self):\n         \"\"\"\n         Tests serializing a simple migration.\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..8a0912b 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,7 +984,62 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n-    def test_formset_iteration(self):\n+    def test_formset_nonform_error_class(self):\n+        \"\"\"\n+        Test that nonform errors in formsets have the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '1',\n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '0',\n+            'choices-1-choice': 'One',\n+            'choices-1-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertIn('nonform', str(formset.non_form_errors()))\n+        self.assertEqual(str(formset.non_form_errors()), '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>')\n+\n+    def test_formset_min_forms_error_class(self):\n+        \"\"\"\n+        Test that min_num forms validation errors have the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '3',\n+            'choices-MAX_NUM_FORMS': '0',\n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '0',\n+            'choices-1-choice': 'One',\n+            'choices-1-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertIn('nonform', str(formset.non_form_errors()))\n+        self.assertEqual(str(formset.non_form_errors()), '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>')\n+\n+    def test_formset_duplicate_error_class(self):\n+        \"\"\"\n+        Test that duplicate entry errors have the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',\n+            'drinks-INITIAL_FORMS': '0',\n+            'drinks-MIN_NUM_FORMS': '0',\n+            'drinks-MAX_NUM_FORMS': '0',\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        self.assertIn('nonform', str(formset.non_form_errors()))\n+        self.assertEqual(str(formset.non_form_errors()), '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>')\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n         formset = ChoiceFormset()\n",
  "django__django-14672": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 6fb82ec..4fcb7a0 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -821,6 +821,33 @@ class ShadowingFieldsTests(SimpleTestCase):\n             )\n         ])\n \n+    def test_field_name_clash_with_m2m_through(self):\n+        class Parent(models.Model):\n+            clash_id = models.IntegerField()\n+\n+        class Child(Parent):\n+            clash = models.ForeignKey('Child', models.CASCADE)\n+\n+        class Model(models.Model):\n+            parents = models.ManyToManyField(\n+                to=Parent,\n+                through='Through',\n+                through_fields=['parent', 'model'],\n+            )\n+\n+        class Through(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE)\n+            model = models.ForeignKey(Model, models.CASCADE)\n+\n+        self.assertEqual(Child.check(), [\n+            Error(\n+                \"The field 'clash' clashes with the field 'clash_id' from \"\n+                \"model 'invalid_models_tests.parent'.\",\n+                obj=Child._meta.get_field('clash'),\n+                id='models.E006',\n+            )\n+        ])\n+\n     def test_multiinheritance_clash(self):\n         class Mother(models.Model):\n             clash = models.IntegerField()\n",
  "django__django-14752": "",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..933cedf 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -426,6 +426,76 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n+from django.utils.decorators import method_decorator\n+from functools import wraps\n+import unittest\n+\n+class TestMethodDecorator(TestCase):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n+    def test_partial_function(self):\n+        \"\"\"Test that method_decorator works with functools.partial.\"\"\"\n+        from functools import partial\n+\n+        def sample_function(x, y):\n+            \"\"\"Sample function to demonstrate partial.\"\"\"\n+            return x + y\n+\n+        partial_function = partial(sample_function, y=2)\n+\n+        def simple_decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(simple_decorator)\n+            def method(self, x):\n+                return partial_function(x)\n+\n+        result = Test().method(3)\n+        self.assertEqual(result, 5)\n+        self.assertEqual(partial_function.__name__, 'sample_function')\n+\n+    def test_decorator_without_wraps(self):\n+        \"\"\"Test method_decorator with a decorator that does not use wraps.\"\"\"\n+        def no_wraps_decorator(func):\n+            def inner(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(no_wraps_decorator)\n+            def method(self):\n+                \"\"\"Method docstring.\"\"\"\n+                return 'hello'\n+\n+        method = Test().method\n+        self.assertIsNone(getattr(method, '__name__', None))\n+        self.assertIsNone(getattr(method, '__doc__', None))\n+\n class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8bb77cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_splitdatetimefield.py b/tests/forms_tests/field_tests/test_splitdatetimefield.py\nindex 64c3822..073b9ad 100644\n--- a/tests/forms_tests/field_tests/test_splitdatetimefield.py\n+++ b/tests/forms_tests/field_tests/test_splitdatetimefield.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.core.exceptions import ValidationError\n@@ -8,7 +9,21 @@ from django.test import SimpleTestCase\n \n class SplitDateTimeFieldTest(SimpleTestCase):\n \n-    def test_splitdatetimefield_1(self):\n+    def test_splitdatetimefield_label_id(self):\n+        class TestForm(Form):\n+            datetime = SplitDateTimeField()\n+\n+        form = TestForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_datetime_0\">Datetime:</label></th>\n+            <td>\n+            <input type=\"text\" name=\"datetime_0\" id=\"id_datetime_0\" required>\n+            <input type=\"text\" name=\"datetime_1\" id=\"id_datetime_1\" required>\n+            </td></tr>\n+            \"\"\"\n+        )\n         f = SplitDateTimeField()\n         self.assertIsInstance(f.widget, SplitDateTimeWidget)\n         self.assertEqual(\n@@ -59,4 +74,4 @@ class SplitDateTimeFieldTest(SimpleTestCase):\n         self.assertFalse(f.has_changed(['11/01/2012', '09:18:15'], ['11/01/2012', '09:18:15']))\n         self.assertTrue(f.has_changed(datetime.datetime(2008, 5, 6, 12, 40, 00), ['2008-05-06', '12:40:00']))\n         self.assertFalse(f.has_changed(datetime.datetime(2008, 5, 6, 12, 40, 00), ['06/05/2008', '12:40']))\n-        self.assertTrue(f.has_changed(datetime.datetime(2008, 5, 6, 12, 40, 00), ['06/05/2008', '12:41']))\n+        self.assertTrue(f.has_changed(datetime.datetime(2008, 5, 6, 12, 40, 00), ['06/05/2008', '12:41']))\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..109f16e 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -107,7 +107,17 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n                 with self.assertRaisesMessage(ValidationError, msg):\n                     f.clean(value)\n \n-    def test_urlfield_clean_required(self):\n+    def test_urlfield_clean_issue(self):\n+        f = URLField()\n+        tests = [\n+            '////]@N.AN',  # Invalid IPv6 URL\n+            '#@A.bO',     # Empty hostname\n+        ]\n+        msg = \"'Enter a valid URL.'\"\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg):\n+                    f.clean(value)\n         f = URLField()\n         msg = \"'This field is required.'\"\n         with self.assertRaisesMessage(ValidationError, msg):\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..5a72c28 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -197,7 +197,28 @@ class NonAggregateAnnotationTestCase(TestCase):\n         combined = int(test.pages + test.rating)\n         self.assertEqual(b.combined, combined)\n \n-    def test_empty_expression_annotation(self):\n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_full_expression_annotation(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_full_expression_annotation_with_aggregation(self):\n+        qs = Book.objects.filter(isbn='159059725').annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1])\n+\n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_aggregate_over_full_expression_annotation(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n         books = Book.objects.annotate(\n             selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n         )\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..618d8ff 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -10,6 +11,7 @@ from django.contrib.messages.storage.cookie import (\n from django.test import SimpleTestCase, override_settings\n from django.utils.crypto import get_random_string\n from django.utils.safestring import SafeData, mark_safe\n+from django.utils.safestring import SafeData, mark_safe\n \n from .base import BaseTests\n \n@@ -143,7 +145,18 @@ class CookieTests(BaseTests, SimpleTestCase):\n         for illegal in non_compliant_chars:\n             self.assertEqual(encoded.find(illegal), -1)\n \n-    def test_json_encoder_decoder(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that extra_tags is correctly preserved\n+        during serialization/deserialization.\n+        \"\"\"\n+        storage = self.get_storage()\n+        for extra_tags in ['', None, 'some tags']:\n+            with self.subTest(extra_tags=extra_tags):\n+                message = Message(constants.DEBUG, \"Test message\", extra_tags=extra_tags)\n+                encoded = storage._encode(message)\n+                decoded = storage._decode(encoded)\n+                self.assertEqual(decoded.extra_tags, extra_tags)\n         \"\"\"\n         A complex nested data structure containing Message\n         instances is properly encoded/decoded by the custom JSON\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..9b4fbe1 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,6 +1,7 @@\n from pathlib import Path\n from unittest import mock\n \n+from pathlib import Path\n from django.template import autoreload\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import require_jinja2\n@@ -64,6 +65,19 @@ class TemplateReloadTests(SimpleTestCase):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n \n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [ROOT],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_template_with_base_dir(self, mock_reset):\n+        # Simulate a file change that should trigger the server restart.\n+        changed_file = ROOT / 'some_file.py'\n+        self.assertTrue(autoreload.template_changed(None, changed_file))\n+        mock_reset.assert_called_once()\n+\n     @override_settings(\n         TEMPLATES=[{\n             'DIRS': [\n",
  "django__django-15400": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\nindex f0097c4..d92aa33 100644\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -297,6 +297,24 @@ class LazyObjectTestCase(TestCase):\n         self.assertIs(obj._wrapped, empty)\n         self.assertIs(obj2._wrapped, empty)\n \n+    def test_radd_with_lazy_object(self):\n+        obj1 = self.lazy_wrap(5)\n+        obj2 = self.lazy_wrap(10)\n+        # Test __radd__ with a SimpleLazyObject on the right\n+        self.assertEqual(7 + obj1, 12)\n+        # Test __radd__ when both objects are SimpleLazyObjects\n+        self.assertEqual(obj1 + obj2, 15)\n+        self.assertEqual(obj2 + obj1, 15)\n+        # Test __radd__ with different types\n+        obj3 = self.lazy_wrap(\"test\")\n+        self.assertEqual(\"123\" + obj3, \"123test\")\n+\n+    def test_add_with_non_lazy_object(self):\n+        obj1 = self.lazy_wrap(5)\n+        # Test adding a non-lazy object to a SimpleLazyObject\n+        self.assertEqual(obj1 + 5, 10)\n+        self.assertEqual(5 + obj1, 10)\n+\n \n class SimpleLazyObjectTestCase(LazyObjectTestCase):\n     # By inheriting from LazyObjectTestCase and redefining the lazy_wrap()\n",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..dea0587 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,13 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        was_modified_since should not raise an exception for an empty string\n+        and should return True for an empty If-Modified-Since header.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..2baf952 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -411,6 +412,26 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n+    def test_custom_formatter_for_help_output(self):\n+        \"\"\"Test that the parser uses the correct formatter class.\"\"\"\n+        help_text = '''\n+            Import a contract from tzkt.\n+            Example usage:\n+                ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+        '''\n+        class CustomCommand(BaseCommand):\n+            help = help_text\n+\n+        command = CustomCommand()\n+        parser = command.create_parser(\"manage.py\", \"tzkt_import\")\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+\n+        with mock.patch('sys.stdout', new_callable=StringIO) as mock_stdout:\n+            parser.print_help()\n+            output = mock_stdout.getvalue()\n+            self.assertIn(\"Example usage:\", output)\n+            self.assertIn(\"./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\", output)\n+\n     def test_outputwrapper_flush(self):\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..fc1929d 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,3 +1,4 @@\n+\n import os\n from datetime import datetime\n \n@@ -211,7 +212,49 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n+    def test_json_script_with_default_encoder(self):\n+        # Test to ensure the default encoder works as expected\n+        data = {\"key\": \"value\"}\n+        self.assertHTMLEqual(\n+            json_script(data),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder(self):\n+        # Existing test case for custom encoder\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_with_id(self):\n+        # Test custom encoder with an element ID\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"foo\": \"bar\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, element_id=\"test_id\", encoder=CustomDjangoJSONEncoder),\n+            '<script id=\"test_id\" type=\"application/json\">{\"foo\": \"bar\"}</script>',\n+        )\n+\n+    def test_json_script_with_different_data_types(self):\n+        # Test custom encoder with different data types\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, datetime):\n+                    return obj.strftime(\"%Y-%m-%d\")\n+                return super().default(obj)\n+\n+        data = {\"date\": datetime(2023, 1, 1)}\n+        self.assertHTMLEqual(\n+            json_script(data, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"date\": \"2023-01-01\"}</script>',\n+        )\n         self.assertHTMLEqual(\n             json_script({\"key\": \"value\"}),\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..7e9ac22 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -186,6 +186,30 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 ],\n             )\n \n+    def test_template_tags_with_same_name_in_templates_options(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"my_tags\", \"someapp.templatetags.my_tags\"\n+                ),\n+                self.get_settings(\n+                    \"my_tags\", \"someapp.templatetags.my_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [\n+                    Error(\n+                        E003.msg.format(\n+                            \"'my_tags'\",\n+                            \"'someapp.templatetags.my_tags', \"\n+                            \"'someapp.templatetags.my_tags'\",\n+                        ),\n+                        id=E003.id,\n+                    )\n+                ],\n+            )\n     def test_template_tags_with_different_library_name(self):\n         with self.settings(\n             TEMPLATES=[\n@@ -206,4 +230,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..63c95c3 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,6 +399,62 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from django.db import models\n+from django.core.management import call_command\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+class TestProxySelectRelatedWithOnly(TestCase):\n+    def test_select_related_only_on_proxy(self):\n+        # Setting up models\n+        custom_obj = ProxyCustomModel.objects.create(name=\"ProxyName\")\n+        another_model_instance = AnotherModel.objects.create(custom=custom_obj)\n+\n+        # This should not raise an error\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+\n+        # Verifying that the result is as expected\n+        self.assertEqual(result, another_model_instance)\n+        self.assertEqual(result.custom.name, \"ProxyName\")\n+\n+    def test_select_related_only_multiple_fields(self):\n+        # Testing multiple fields in `only()`\n+        custom_obj = ProxyCustomModel.objects.create(name=\"MultipleFieldsTest\")\n+        another_model_instance = AnotherModel.objects.create(custom=custom_obj)\n+\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\", \"id\")\n+        result = qs.get()\n+\n+        self.assertEqual(result, another_model_instance)\n+        self.assertEqual(result.custom.name, \"MultipleFieldsTest\")\n+        self.assertIsNotNone(result.id)\n+\n+    def test_select_related_only_no_related_field(self):\n+        # Testing with no related field in `only()`\n+        custom_obj = ProxyCustomModel.objects.create(name=\"NoRelatedFieldTest\")\n+        another_model_instance = AnotherModel.objects.create(custom=custom_obj)\n+\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"id\")\n+        result = qs.get()\n+\n+        self.assertEqual(result, another_model_instance)\n+        self.assertIsNotNone(result.id)\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..1dd34ed 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,7 +151,44 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n-    def test_parameters(self):\n+    def test_parameters_order(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n+\n+    def test_parameters_with_user_and_host(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\n+                    \"NAME\": \"dbname\",\n+                    \"USER\": \"someuser\",\n+                    \"HOST\": \"somehost\",\n+                },\n+                [\"--echo-all\"],\n+            ),\n+            (\n+                [\"psql\", \"-U\", \"someuser\", \"-h\", \"somehost\", \"--echo-all\", \"dbname\"],\n+                None,\n+            ),\n+        )\n+\n+    def test_parameters_with_service_and_passfile(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\n+                    \"OPTIONS\": {\n+                        \"service\": \"django_test\",\n+                        \"passfile\": \"~/.custompgpass\",\n+                    },\n+                },\n+                [\"--set\", \"ON_ERROR_STOP=on\"],\n+            ),\n+            (\n+                [\"psql\", \"--set\", \"ON_ERROR_STOP=on\"],\n+                {\"PGSERVICE\": \"django_test\", \"PGPASSFILE\": \"~/.custompgpass\"},\n+            ),\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +220,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..2ea5833 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -179,7 +179,22 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(hasattr(formset.empty_form, \"custom_kwarg\"))\n         self.assertEqual(formset.empty_form.custom_kwarg, 1)\n \n-    def test_formset_validation(self):\n+    def test_empty_permitted_ignored_empty_form(self):\n+        ArticleFormSet = modelformset_factory(MyModel, fields=['a_field'])\n+        formset = ArticleFormSet(form_kwargs={\"empty_permitted\": False})\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n+    def test_empty_permitted_true_ignored_empty_form(self):\n+        ArticleFormSet = modelformset_factory(MyModel, fields=['a_field'])\n+        formset = ArticleFormSet(form_kwargs={\"empty_permitted\": True})\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n+    def test_empty_permitted_no_crash_on_render(self):\n+        ArticleFormSet = modelformset_factory(MyModel, fields=['a_field'])\n+        formset = ArticleFormSet(queryset=MyModel.objects.none(), form_kwargs={\"empty_permitted\": False})\n+        # Render formset.empty_form to ensure no crash occurs\n+        rendered_empty_form = formset.empty_form.as_p()\n+        self.assertIn('<p>', rendered_empty_form)  # Check if the form renders HTML\n         # FormSet instances can also have an error attribute if validation failed for\n         # any of the forms.\n         formset = self.make_choiceformset([(\"Calexico\", \"\")])\n",
  "django__django-16046": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..d36c793 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,8 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+import urllib.parse\n+from django.urls import reverse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -892,7 +894,33 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        # Set up a user instance\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        \n+        # Extract the password help text and find the URL link\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+        \n+        # Construct the expected URL to UserChangeForm in admin via to_field (instead of pk)\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        \n+        # Join the base URL with the found relative URL\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+        \n+        # Construct the expected password change URL\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        \n+        # Assert that the constructed URL matches the expected URL\n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..f4cbd12 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,27 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from django.test import TestCase\n+from django.urls import reverse\n+from django.contrib.sitemaps import Sitemap\n \n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+class TestEmptyItemsCallableLastmod(Sitemap):\n+    location = \"/location/\"\n+    \n+    def items(self):\n+        return []\n+    \n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapEmptyItemsTestCase(TestCase):\n+    def setUp(self):\n+        self.sitemap = {'callable-lastmod': TestEmptyItemsCallableLastmod}\n+\n+    def test_empty_items_callable_lastmod_does_not_raise(self):\n+        response = self.client.get(reverse('django.contrib.sitemaps.views.index'), {'sitemaps': self.sitemap})\n+        self.assertEqual(response.status_code, 200)\n+        self.assertNotIn(\"Last-Modified\", response.headers)\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..9b0c5d0 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,9 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock\n+from django.core.cache import cache\n import io\n import os\n import pickle\n@@ -1755,7 +1758,38 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n-    def test_empty_cache_file_considered_expired(self):\n+    def test_has_key_race_handling(self):\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+\n+    def test_has_key_race_handling_exists_then_deleted(self):\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        cache_file = cache._key_to_file(\"key\")\n+        \n+        # First, we simulate the file existing\n+        with open(cache_file, \"wb\") as fh:\n+            fh.write(b\"some data\")\n+        \n+        # Now we simulate its deletion just after the os.path.exists call\n+        with mock.patch(\"os.path.exists\", side_effect=lambda fname: fname == cache_file) as mocked_exists:\n+            with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+                self.assertIs(cache.has_key(\"key\"), False)\n+                mocked_exists.assert_called_once_with(cache_file)\n+                mocked_open.assert_called_once_with(cache_file, \"rb\")\n+\n+    def test_has_key_when_file_exists_and_is_not_expired(self):\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        cache_file = cache._key_to_file(\"key\")\n+        \n+        # Simulate a valid, non-expired cache file\n+        with open(cache_file, \"wb\") as fh:\n+            fh.write(b\"data that is not expired\")\n+        \n+        with mock.patch.object(cache, '_is_expired', return_value=False) as mocked_is_expired:\n+            self.assertIs(cache.has_key(\"key\"), True)\n+            mocked_is_expired.assert_called_once()\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n             fh.write(b\"\")\n",
  "django__django-16527": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..fc98a1d 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -236,7 +236,29 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n-    def test_alter_alter_table_model(self):\n+    def _test_alter_alter_field(self, alter_foo, alter_bar):\n+        \"\"\"\n+        Two AlterField operations should collapse into the second.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                alter_foo,\n+                alter_bar,\n+            ],\n+            [\n+                alter_bar,\n+            ],\n+        )\n+\n+    def test_alter_alter_field(self):\n+        self._test_alter_alter_field(\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+        )\n+        self._test_alter_alter_field(\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        )\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..d6b666c 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,4 +1,5 @@\n-from django.template.defaultfilters import join\n+\n+from django.template.defaultfilters import join, escape\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n \n@@ -72,10 +73,18 @@ class FunctionTests(SimpleTestCase):\n             \"<a>&lt;br&gt;<img>&lt;br&gt;</a>\",\n         )\n \n-    def test_noniterable_arg(self):\n+    @setup({\"join_autoescape_disabled\": '{% autoescape off %}{{ a|join:b }}{% endautoescape %}'})\n+    def test_join_autoescape_disabled(self):\n+        # Test that the joiner is not escaped when autoescape is off\n+        output = self.engine.render_to_string(\n+            \"join_autoescape_disabled\", \n+            {\"a\": [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"b\": \"<br/>\"}\n+        )\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n         obj = object()\n         self.assertEqual(join(obj, \"<br>\"), obj)\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..66ed706 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -654,7 +654,35 @@ class BulkCreateTests(TestCase):\n     def test_update_conflicts_two_fields_no_unique_fields(self):\n         self._test_update_conflicts_two_fields([])\n \n-    def _test_update_conflicts_unique_two_fields(self, unique_fields):\n+    @skipUnlessDBFeature(\"can_return_rows_from_bulk_insert\")\n+    def test_bulk_create_return_ids_with_update_conflicts(self):\n+        initial_objects = [\n+            UpsertConflict(number=1, rank=1, name=\"John\"),\n+            UpsertConflict(number=2, rank=2, name=\"Mary\"),\n+        ]\n+        UpsertConflict.objects.bulk_create(initial_objects)\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+\n+        # Conflicting and new objects\n+        new_objects = [\n+            UpsertConflict(number=1, rank=3, name=\"Steve\"),\n+            UpsertConflict(number=2, rank=4, name=\"Olivia\"),\n+            UpsertConflict(number=3, rank=5, name=\"Mark\"),\n+        ]\n+        results = UpsertConflict.objects.bulk_create(\n+            new_objects, update_conflicts=True, update_fields=[\"name\", \"rank\"], unique_fields=[\"number\"]\n+        )\n+        self.assertEqual(UpsertConflict.objects.count(), 3)\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        self.assertCountEqual(\n+            UpsertConflict.objects.values(\"number\", \"rank\", \"name\"),\n+            [\n+                {\"number\": 1, \"rank\": 3, \"name\": \"Steve\"},\n+                {\"number\": 2, \"rank\": 4, \"name\": \"Olivia\"},\n+                {\"number\": 3, \"rank\": 5, \"name\": \"Mark\"},\n+            ],\n+        )\n         Country.objects.bulk_create(self.data)\n         self.assertEqual(Country.objects.count(), 4)\n \n@@ -816,4 +844,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..1e5d156 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1119,6 +1119,26 @@ def test_range_slider(orientation):\n     slider.reset()\n     assert_allclose(slider.val, [0.1, 0.34])\n \n+def test_range_slider_initial_values():\n+    fig, ax = plt.subplots()\n+    # Create a RangeSlider with initial values\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"\", valmin=0.0, valmax=1.0, valinit=[0.2, 0.8]\n+    )\n+    \n+    # Check if the initial values are set correctly\n+    assert_allclose(slider.val, (0.2, 0.8))\n+    \n+    # Set new values for the RangeSlider\n+    slider.set_val((0.3, 0.7))\n+    assert_allclose(slider.val, (0.3, 0.7))\n+    \n+    # Reset and check initial values again\n+    slider.reset()\n+    assert_allclose(slider.val, (0.2, 0.8))\n+\n+\n+@pytest.mark.parametrize(\"orientation\", [\"horizontal\", \"vertical\"])\n \n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..e28fb39 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,18 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+def test_get_backend_does_not_clear_figs_within_rc_context():\n+    \"\"\"Test that get_backend does not clear Gcf.figs if a figure is created in an rc_context.\"\"\"\n+    with rc_context():\n+        fig1 = plt.figure()\n+        assert len(plt._pylab_helpers.Gcf.figs) == 1  # Ensure the figure is created\n+\n+    before_get_backend = len(plt._pylab_helpers.Gcf.figs)\n+    get_backend()\n+    after_get_backend = len(plt._pylab_helpers.Gcf.figs)\n+\n+    assert before_get_backend == after_get_backend, \"Figures were cleared after calling get_backend\"\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..f120d6c 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,7 +21,16 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible_false(fig_test, fig_ref):\n+    # Create one subplot with 3d projection in fig_test\n+    ax = fig_test.add_subplot(111, projection='3d')\n+    ax.scatter([1], [1], [1], c='b')\n+    ax.set_visible(False)\n+    \n+    # Create an empty figure for fig_ref as a reference.\n+    fig_ref.add_subplot(111, frame_on=False).set_visible(False)\n+    fig_ref.canvas.draw()\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..9a663eb 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,24 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable_creation(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='shabnams')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import needs_usetex\n+from matplotlib import rcParams, colors\n+from matplotlib.font_manager import FontProperties\n+from matplotlib.patches import FancyBboxPatch\n+import itertools\n+from matplotlib.legend import Legend\n+from matplotlib import _api\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..f1ffe23 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -255,8 +255,34 @@ def test_linedash():\n \n     assert buf.tell() > 0\n \n+import io\n+from matplotlib.figure import Figure\n \n-def test_no_duplicate_definition():\n+def test_empty_line():\n+    # Smoke-test specifically for the issue described\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+\n+def test_empty_line_annotation():\n+    # Test case for annotation with an empty line\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+\n+def test_empty_line_title():\n+    # Test case for title with an empty line\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.set_title('\\nLower title')\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n \n     fig = Figure()\n     axs = fig.subplots(4, 4, subplot_kw=dict(projection=\"polar\"))\n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..dc795ef 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,23 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+\n+def test_constrained_layout_warning():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import pytest\n+\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+\n+    with pytest.warns(None) as record:\n+        fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+        ax[0].plot(a, b)\n+        ax[1].plot(a, c)\n+        plt.subplots_adjust(wspace=0)\n+\n+    # Check that no warnings are triggered\n+    assert not any(item.category == UserWarning for item in record)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..efb087b 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5733,6 +5733,43 @@ def test_set_get_ticklabels():\n \n \n @check_figures_equal(extensions=[\"png\"])\n+def test_set_ticks_kwargs_raise_error_without_labels():\n+    \"\"\"\n+    When labels=None and any kwarg is passed, axis.set_ticks() raises a\n+    ValueError.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, alpha=0.5)\n+\n+\n+def test_set_ticks_with_valid_labels_and_kwargs():\n+    \"\"\"\n+    Test that set_ticks works correctly when labels and valid kwargs are passed.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1]\n+    labels = [\"a\", \"b\"]\n+    try:\n+        ax.xaxis.set_ticks(ticks, labels=labels, fontsize=12)\n+    except ValueError:\n+        pytest.fail(\"Unexpected ValueError: kwargs should be valid with labels set\")\n+\n+\n+def test_set_ticks_with_invalid_kwargs():\n+    \"\"\"\n+    Test that set_ticks raises an error when invalid kwargs are passed even with labels.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1]\n+    labels = [\"a\", \"b\"]\n+    with pytest.raises(TypeError):\n+        ax.xaxis.set_ticks(ticks, labels=labels, invalid_kwarg=10)\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n     Test that these two are identical::\n",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..ef17e78 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,6 +90,35 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+def test_pickle_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 2, 3], [4, 5, 6], label='Line')\n+    legend = ax.legend()\n+    legend.set_draggable(True)\n+\n+    # Attempt to pickle the figure\n+    pickled_fig = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pickled_fig)]\n+\n+    # Load the pickled figure\n+    loaded_fig = pickle.loads(pickled_fig)\n+    assert loaded_fig is not None\n+\n+def test_pickle_draggable_annotation():\n+    fig, ax = plt.subplots()\n+    line, = ax.plot([1, 2, 3], [4, 5, 6])\n+    \n+    annot = ax.annotate('Test', xy=(2, 5))\n+    annot.draggable(True)\n+\n+    # Attempt to pickle the figure\n+    pickled_fig = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pickled_fig)]\n+\n+    # Load the pickled figure\n+    loaded_fig = pickle.loads(pickled_fig)\n+    assert loaded_fig is not None\n+\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..92ed21d 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,34 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+import numpy as np\n+from io import BytesIO\n \n-@mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Try to pickle the figure\n+    pkl = BytesIO()\n+    try:\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+        success = True\n+    except Exception as e:\n+        success = False\n+\n+    assert success, \"Figure with aligned labels could not be pickled\"\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..cf9925c 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -445,8 +445,31 @@ def test_paddedbox():\n     pb = PaddedBox(ta, pad=10, patch_attrs={'facecolor': 'b'})\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mplcursors\n+\n+def test_mplcursor_integration():\n+    # Setting up a simple plot\n+    x = np.arange(1, 11)\n+    y = x\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y)\n \n+    # Adding mplcursor to the plot\n+    mplcursors.cursor(ax)\n+\n+    # Simulate clicking on the plot, which previously caused an AttributeError\n+    def on_click(event):\n+        # Verify that the event does not raise an AttributeError\n+        assert event.canvas is not None, \"Canvas should not be None\"\n+\n+    fig.canvas.mpl_connect('button_press_event', on_click)\n+\n+    # Display the plot\n+    plt.show()\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..3b66004 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -10,6 +11,7 @@ from seaborn._stats.regression import PolyFit\n \n \n class TestPolyFit:\n+    from pandas.testing import assert_frame_equal\n \n     @pytest.fixture\n     def df(self, rng):\n",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..b61dd8d 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -102,7 +102,28 @@ class TestContinuous:\n         s = Continuous(\"viridis\")._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n-    def test_color_tuple_values(self, x):\n+    def test_interval_with_bools(self):\n+        import pandas as pd\n+        from numpy.testing import assert_array_equal\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import IntervalProperty\n+\n+        x = pd.Series([True, False, False])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 0])\n+\n+    def test_color_handling_with_booleans(self):\n+        import pandas as pd\n+        from numpy.testing import assert_array_equal\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import Color\n+        from seaborn import color_palette\n+\n+        x = pd.Series([True, False, True, False])\n+        cmap = color_palette(\"ch:\", as_cmap=True)\n+        s = Continuous()._setup(x, Color())\n+        expected_colors = cmap([1, 0, 1, 0])[:, :3]  # Convert True/False to 1/0 for color mapping\n+        assert_array_equal(s(x), expected_colors)\n \n         cmap = color_palette(\"blend:b,g\", as_cmap=True)\n         s = Continuous((\"b\", \"g\"))._setup(x, Color())\n",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..9eabb96 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -1314,6 +1314,27 @@ class TestPairGrid:\n         for ax in g.diag_axes:\n             assert len(ax.collections) == n\n \n+    def test_pairplot_column_multiindex(self):\n+\n+        # Set up a MultiIndex DataFrame\n+        cols = pd.MultiIndex.from_arrays([[\"A\", \"A\", \"B\", \"B\"], [\"1\", \"2\", \"1\", \"2\"]])\n+        df = pd.DataFrame(np.random.rand(100, 4), columns=cols)\n+        \n+        # Attempt to create a pairplot\n+        g = ag.pairplot(df)\n+\n+        # Verify that the pairplot has been created without errors\n+        assert g is not None\n+\n+        # Verify if the diagonal variables match the columns of the DataFrame\n+        assert g.diag_vars == list(cols)\n+\n+        # Test a flattened version of the columns\n+        df.columns = [\"\".join(col) for col in df.columns]\n+        g_flat = ag.pairplot(df)\n+        assert g_flat is not None\n+        assert g_flat.diag_vars == list(df.columns)\n+\n     def test_pairplot_reg(self):\n \n         vars = [\"x\", \"y\", \"z\"]\n",
  "pallets__flask-4992": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex 73be34c..85fa8c1 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -261,7 +261,7 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode='rb' if 'b' in getattr(load, '__annotations__', {}).get('return', '') else 'r') as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..e6cc41c 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,37 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import pytest\n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import DecodeError, Timeout\n+from requests.packages.urllib3.exceptions import DecodeError as Urllib3DecodeError\n+from requests.packages.urllib3.exceptions import ReadTimeoutError\n+from requests.sessions import Session\n+\n+def httpbin(path):\n+    return f'http://httpbin.org/{path}'\n+\n+# Test case to verify that DecodeError is wrapped as a requests DecodeError\n+def test_decode_error_wrapped():\n+    session = Session()\n+    adapter = HTTPAdapter()\n+    session.mount('http://', adapter)\n+\n+    with pytest.raises(DecodeError):\n+        # This should raise a DecodeError from requests, not urllib3\n+        raise DecodeError(\"Decode error\")\n+\n+# Test case to verify that TimeoutError is wrapped as a requests Timeout\n+def test_timeout_error_wrapped():\n+    session = Session()\n+    adapter = HTTPAdapter()\n+    session.mount('http://', adapter)\n+\n+    with pytest.raises(Timeout):\n+        # Simulate a timeout error\n+        raise Timeout(\"Timeout error\")\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1663,4 +1694,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..4f80249 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,29 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_iter_content_decode_unicode_true(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True.\n+        Should return unicode strings (str in Python 3).\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'some json content')\n+        r.encoding = 'utf-8'  # Set encoding to utf-8\n+\n+        chunks = r.iter_content(16*1024, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"All chunks should be str instances\"\n+\n+    def test_iter_content_decode_unicode_false(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=False.\n+        Should return bytes.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'some json content')\n+        r.encoding = 'utf-8'  # Set encoding to utf-8\n+\n+        chunks = r.iter_content(16*1024, decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks), \"All chunks should be bytes instances\"\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..4da49c6 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -744,7 +744,40 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             assert 'foo' in response.text\n             assert 'bar' in response.text\n \n-    def test_session_persistent_cookies(self):\n+    def test_hooks_accept_list_of_functions(self):\n+        \"\"\"Test that the Request class accepts a list of hook functions for each event.\"\"\"\n+        def mock_hook_1(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers']['X-Mock-1'] = 'mock_value_1'\n+            return args\n+        \n+        def mock_hook_2(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers']['X-Mock-2'] = 'mock_value_2'\n+            return args\n+\n+        hooks = {'args': [mock_hook_1, mock_hook_2]}\n+        r = requests.models.Request(hooks=hooks)\n+        assert len(r.hooks['args']) == 2\n+        for hook in r.hooks['args']:\n+            assert callable(hook)\n+\n+    def test_register_hook_with_list(self):\n+        \"\"\"Test that register_hook can handle a list of hooks.\"\"\"\n+        def mock_hook_3(args):\n+            return args\n+\n+        def mock_hook_4(args):\n+            return args\n+\n+        hooks = [mock_hook_3, mock_hook_4]\n+        r = requests.models.Request()\n+        r.register_hook('args', hooks)\n+        assert len(r.hooks['args']) == 2\n+        for hook in r.hooks['args']:\n+            assert callable(hook)\n \n         s = requests.session()\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..0357f65 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -78,15 +78,16 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n-\n-def test_unknown_confidence(capsys: CaptureFixture) -> None:\n-    \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n+def test_unrecognized_option_no_traceback(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure no traceback is printed for an unrecognized option and a user-friendly message is shown.\"\"\"\n     with pytest.raises(SystemExit):\n-        Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"argument --confidence: UNKNOWN_CONFIG should be in\" in output.err\n-\n-\n+    assert \"E0015: Unrecognized option found: Q\" in output.err\n+    assert \"usage: pylint\" in output.err\n+    # Ensure no traceback is present in the output\n+    assert \"Traceback\" not in output.err\n+    assert \"pylint.config.exceptions._UnrecognizedOptionError\" not in output.err\n def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown yes/no value.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..d5a11e7 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,39 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_path_recursive(self) -> None:\n+        \"\"\"Test that `ignore-paths` is respected with `--recursive=y`.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path for path in sys.path if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^directory/ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n+    def test_ignore_path_non_recursive(self) -> None:\n+        \"\"\"Test that `ignore-paths` is respected without `--recursive=y`.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path for path in sys.path if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--ignore-paths=^directory/ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..e179a6a 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,20 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+import os\n+from pylint.lint import PyLinter\n+from pylint.testutils import tempdir, create_files\n+\n+def test_module_with_same_name_as_directory(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that pylint does not fail when a module has the same name as its directory.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Creating directory and file structure\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        # Test without __init__.py\n+        linter.check([\"a\"])\n+        # Ensure no parse-error message is in the stats\n+        assert \"parse-error\" not in linter.stats.by_msg\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +955,4 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..c23ec6c 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -112,8 +113,26 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[1] == \"my_mod:1::()\"\n     assert out_lines[2] == \"my_mod:2::()\"\n \n+from _pytest.recwarn import WarningsRecorder\n+from pylint.lint import PyLinter\n+from io import StringIO\n \n-def test_deprecation_set_output(recwarn):\n+def test_custom_braces_in_msg_template():\n+    \"\"\"Test using custom braces in msg-template.\"\"\"\n+    linter = PyLinter()\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"E0001\", line=2, args=(3, 4))\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[0] == '************* Module my_mod'\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/acceptance_test.py b/testing/acceptance_test.py\nindex 0cc5057..e549ba9 100644\n--- a/testing/acceptance_test.py\n+++ b/testing/acceptance_test.py\n@@ -1306,6 +1306,8 @@ def test_no_brokenpipeerror_message(pytester: Pytester) -> None:\n     popen.stderr.close()\n \n \n+from typing import Iterator\n+\n def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n@@ -1314,4 +1316,4 @@ def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     \"\"\"\n     )\n     res = pytester.runpytest()\n-    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n+    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..73d5dfd 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -5,6 +6,36 @@ import py.io\n from _pytest.logging import ColoredLevelFormatter\n \n \n+def test_coloredlogformatter_with_module():\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"dummy\",\n+        level=logging.INFO,\n+        pathname=\"dummypath\",\n+        lineno=10,\n+        msg=\"Test Message with module\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    class ColorConfig(object):\n+        class option(object):\n+            pass\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = True\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == (\n+        \"\\x1b[32mINFO    \\x1b[0m dummy:dummypath:10 Test Message with module\"\n+    )\n+\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == (\"INFO     dummy:dummypath:10 Test Message with module\")\n+\n def test_coloredlogformatter():\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n \n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..60251d5 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -495,6 +495,28 @@ class TestAssert_reprcompare:\n         expl = callequal(TestSequence([0, 1]), list([0, 2]))\n         assert len(expl) > 1\n \n+    def test_bytes_diff_empty_vs_nonempty(self):\n+        \"\"\"Test byte string diff with an empty byte string against a non-empty byte string.\"\"\"\n+        diff = callequal(b\"\", b\"42\", verbose=True)\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+        ]\n+\n+    def test_bytes_diff_single_char(self):\n+        \"\"\"Test byte string diff with a single character difference.\"\"\"\n+        diff = callequal(b\"\", b\"1\", verbose=True)\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+        ]\n+\n     def test_list_tuples(self):\n         expl = callequal([], [(1, 2)])\n         assert len(expl) > 1\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..b97f95b 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,5 +1,8 @@\n+\n import os\n from xml.dom import minidom\n+import platform\n+from datetime import datetime\n \n import py\n \n@@ -157,6 +160,30 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n+\n     @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..5df9720 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,26 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute_and_repr():\n+    \"\"\"Test saferepr() with classes having broken __getattribute__ and __repr__\"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Broken __getattribute__\")\n+\n+        def __repr__(self):\n+            raise RuntimeError(\"Broken __repr__\")\n+    \n+    result = saferepr(SomeClass())\n+    assert result.startswith(\"<[RuntimeError('Broken __repr__') raised in repr()] SomeClass object at 0x\")\n+    \n+    # Ensure that we see the message from the broken __getattribute__\n+    obj = SomeClass()\n+    try:\n+        obj.some_attribute\n+    except RuntimeError as e:\n+        assert str(e) == \"Broken __getattribute__\"\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +173,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..3a24e22 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -70,8 +70,31 @@ def test_make_hook_recorder(testdir) -> None:\n     recorder.hook.pytest_runtest_logreport(report=rep3)\n     pytest.raises(ValueError, recorder.getfailures)\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct.\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n \n-def test_parseconfig(testdir) -> None:\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'tempdir'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     config1 = testdir.parseconfig()\n     config2 = testdir.parseconfig()\n     assert config2 is not config1\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..4a29c71 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,6 +1,110 @@\n import os\n import sys\n from unittest import mock\n+import os\n+import pytest\n+from _pytest.config import ExitCode\n+from _pytest.mark import EMPTY_PARAMETERSET_OPTION\n+from _pytest.mark import MarkGenerator as Mark\n+from _pytest.nodes import Collector\n+from _pytest.nodes import Node\n+\n+class TestMark:\n+    ...\n+    \n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360 - Ensure skipif condition is reevaluated correctly across multiple files\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+            \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+            \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n+    # Adding a new test to ensure global variables don't interfere\n+    def test_no_caching_interference(self, testdir):\n+        py_file1 = testdir.makepyfile(\n+            test_no_caching_interference1=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+            \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_no_caching_interference2=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+            \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n+    # Adding a test case to ensure new globals do not affect skipif\n+    def test_new_globals_handling(self, testdir):\n+        py_file1 = testdir.makepyfile(\n+            test_new_globals_handling1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+            new_global = 42\n+\n+            @pytest.mark.skipif(\"skip or new_global == 42\")\n+            def test_should_skip():\n+                assert True\n+            \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_new_globals_handling2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+            new_global = 0\n+\n+            @pytest.mark.skipif(\"skip or new_global == 42\")\n+            def test_should_not_skip():\n+                assert True\n+            \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n+from unittest import mock\n \n import pytest\n from _pytest.config import ExitCode\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..594ceff 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -154,6 +154,26 @@ class TestEvaluation:\n \n \n class TestXFail:\n+    \n+    @pytest.mark.parametrize(\n+        \"test_input, expected\",\n+        [\n+            ([\"-rs\"], [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"]),\n+            ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"]),\n+        ],\n+    )\n+    def test_skip_mark_location_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-7490": "",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..92a08cb 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,5 +1,37 @@\n+\n import os\n import stat\n+def test_tmp_path_factory_handles_invalid_dir_characters(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    # Simulate an invalid username that might be returned by getpass.getuser()\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n+    # _basetemp / _given_basetemp are cached / set in parallel runs, patch them\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+def test_tmp_path_factory_handles_backslash_in_username(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    # Simulate a username containing a backslash\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"contoso\\\\john_doe\")\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+def test_tmp_path_factory_handles_forward_slash_in_username(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    # Simulate a username containing a forward slash\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"contoso/john_doe\")\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n import sys\n from pathlib import Path\n from typing import Callable\n@@ -19,6 +51,7 @@ from _pytest.pathlib import on_rm_rf_error\n from _pytest.pathlib import register_cleanup_lock_removal\n from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n+from _pytest.monkeypatch import MonkeyPatch\n from _pytest.tmpdir import get_user\n from _pytest.tmpdir import TempdirFactory\n from _pytest.tmpdir import TempPathFactory\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..49ea38f 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,6 +597,33 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    import numpy as np\n+    from sklearn.linear_model import RidgeClassifierCV\n+\n+    # Define some test data\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Initialize RidgeClassifierCV with store_cv_values set to True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # Fit the model and check the shape of cv_values_\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, 1, n_alphas)\n+\n+    # Test with multi-target y\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n \n def test_ridgecv_sample_weight():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..091b25e 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -16,6 +16,7 @@ from sklearn.mixture import BayesianGaussianMixture\n from sklearn.mixture.tests.test_gaussian_mixture import RandomData\n from sklearn.exceptions import ConvergenceWarning\n from sklearn.utils.testing import assert_greater_equal, ignore_warnings\n+from sklearn.utils.testing import assert_raises\n \n \n COVARIANCE_TYPE = ['full', 'tied', 'diag', 'spherical']\n",
  "scikit-learn__scikit-learn-12471": "",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..a4dfb11 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,7 +598,21 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n-def test_gaussian_mixture_fit():\n+def test_bayesian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=10, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..6c06714 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n@@ -71,7 +72,17 @@ def test_kernel_pca_consistent_transform():\n     assert_array_almost_equal(transformed1, transformed2)\n \n \n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_consistency():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+    transformed_X1 = kpca.fit_transform(X)\n+    transformed_X2 = kpca.fit_transform(X)\n+\n+    # Check if the absolute values are consistent, regardless of sign\n+    assert_allclose(np.abs(transformed_X1), np.abs(transformed_X2),\n+                    err_msg=\"KernelPCA results differ in sign across runs\")\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..c8c9924 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1070,4 +1070,27 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n+\n+\n+def test_pipeline_length():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.svm import SVC\n+    from sklearn.preprocessing import StandardScaler\n+\n+    # Create a Pipeline with two steps\n+    pipe = Pipeline([\n+        ('scaler', StandardScaler()),\n+        ('svc', SVC())\n+    ])\n+    assert len(pipe) == 2, \"Pipeline with two steps should have length 2\"\n+\n+    # Create a Pipeline with one step\n+    pipe_single = Pipeline([\n+        ('svc', SVC())\n+    ])\n+    assert len(pipe_single) == 1, \"Pipeline with one step should have length 1\"\n+\n+    # Create an empty Pipeline\n+    pipe_empty = Pipeline([])\n+    assert len(pipe_empty) == 0, \"Empty pipeline should have length 0\"\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..4fcdb37 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,8 +8,9 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n-\n+from sklearn.ensemble import IsolationForest\n import numpy as np\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..8ad6c6b 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,9 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,6 +218,21 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+@pytest.mark.parametrize(\"Cs_values\", [\n+    (np.array([0.1, 1])),\n+    ([0.1, 1]),\n+    ((0.1, 1)),\n+    (np.array([0.1])),\n+    (np.array([])),\n+])\n+def test_logistic_regression_cv_repr(Cs_values):\n+    \"\"\"Test repr for LogisticRegressionCV with various array-like Cs values.\"\"\"\n+    set_config(print_changed_only=True)\n+    # Ensure no ValueError is raised\n+    repr_output = repr(LogisticRegressionCV(Cs=Cs_values))\n+    assert isinstance(repr_output, str)\n+    set_config(print_changed_only=False)\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..670e82d 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -8,6 +9,8 @@ from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n from sklearn.exceptions import NotFittedError\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..34dc5ad 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,24 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+@pytest.mark.parametrize('param, value', [\n+    ('tol', 1),  # Test integer for a parameter that expects float\n+    ('n_components', np.int64(5))  # Test np.int64 for a parameter that expects int\n+])\n+def test_gridsearchcv_integration(param, value):\n+    # Test that GridSearchCV can handle numpy types that are not the exact match\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n \n-def test_transformation_dimensions():\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+    params = {f'nca__{param}': [value]}\n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    gs.fit(X, y)\n+\n+    assert gs.best_estimator_ is not None\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..be805d7 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,32 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for issue #14893 about ZeroDivisionError\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.size\n+    assert not model.dual_coef_.size\n+\n+def test_sparse_fit_no_support_vectors():\n+    # Test when there are no support vectors, SVR should not fail\n+    X_train = sparse.csr_matrix([[0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0]])\n+    y_train = np.array([0.0, 0.0, 0.0, 0.0])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert model.support_.size == 0\n+    assert model.dual_coef_.size == 0\n+    assert model.support_vectors_.shape == (0, X_train.shape[1])\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..87395e8 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,7 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n+import pytest\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n@@ -980,7 +980,15 @@ def test_repeated_cv_value_errors():\n         assert_raises(ValueError, cv, n_repeats=1.5)\n \n \n-def test_repeated_kfold_determinstic_split():\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 5, 10\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = (\n+        \"{}(n_splits={}, n_repeats={}, random_state=None)\"\n+        .format(repeated_cv.__class__.__name__, n_splits, n_repeats)\n+    )\n+    assert repeated_cv_repr == repr(repeated_cv)\n     X = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n     random_state = 258173307\n     rkf = RepeatedKFold(\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..1635427 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -14,6 +15,9 @@ from sklearn.isotonic import (\n )\n \n from sklearn.utils.validation import check_array\n+from sklearn import set_config\n+from sklearn.linear_model import SGDClassifier\n+from sklearn.calibration import CalibratedClassifierCV\n from sklearn.utils._testing import (\n     assert_allclose,\n     assert_array_equal,\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..b6ba4f6 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2125,7 +2125,34 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n     assert_array_equal(X_trans_df0.columns, expected_verbose_names)\n+    ct.set_params(verbose_feature_names_out=False)\n+\n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False]), [False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_empty_selection_pandas_output(empty_selection):\n+    \"\"\"Check that pandas output works when there is an empty selection.\n+\n+    Non-regression test for gh-25487\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame([[1.0, 2.2], [3.0, 1.0]], columns=[\"a\", \"b\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\"])\n \n     ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\"])\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..4dc52c8 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,7 +1,12 @@\n+\n+from __future__ import annotations\n from __future__ import annotations\n \n from typing import overload\n \n+#: Module level variable with type alias\n+variable: myint\n+\n myint = int\n \n \n@@ -22,4 +27,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..d03b55d 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,50 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+from sphinx.testing.util import SphinxTestApp\n+from sphinx import addnodes\n+from docutils.parsers.rst import directives\n+\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '-j'],\n+                                                                      [addnodes.desc_addname, '[=N]'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '[enable'],\n+                                                                      [addnodes.desc_addname, '=]PATTERN'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+def test_cmd_option_with_multiple_brackets(app):\n+    text = \".. option:: [foo=][bar=]VALUE\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '[foo'],\n+                                                                      [addnodes.desc_addname, '=][bar=]VALUE'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[foo', '[foo', 'cmdoption', 'index', 'cmdoption-arg-foo', 1) in objects\n+\n+def test_cmd_option_with_invalid_syntax(app):\n+    text = \".. option:: -invalid-option\"\n+    with pytest.raises(AssertionError):\n+        doctree = restructuredtext.parse(app, text)\n+        assert_node(doctree, (addnodes.index,\n+                              [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '-invalid-option'])],\n+                                               [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-invalid-option', '-invalid-option', 'cmdoption', 'index', 'cmdoption-invalid-option', 1) not in objects\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..8ddad6f 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -44,6 +46,7 @@ def test_restify():\n     assert restify(None) == \":obj:`None`\"\n     assert restify(Integral) == \":class:`numbers.Integral`\"\n     assert restify(Any) == \":obj:`Any`\"\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n \n \n def test_restify_type_hints_containers():\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..98aaedd 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,31 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    \n+    def test_other_parameters_section_with_use_param(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..887fad7 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -48,8 +48,22 @@ def test_viewcode(app, status, warning):\n             '<span>    this is Class1</span>\\n'\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n+import pytest\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+    \n+    # Ensure that the module pages are not created when viewcode_enable_epub=False\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode',\n+                    confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled_explicitly(app, status, warning):\n+    app.builder.build_all()\n \n-@pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n+    # Ensure that the module pages are created when viewcode_enable_epub=True\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n \n",
  "sympy__sympy-12481": "",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..2068862 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -449,7 +450,24 @@ def test_sparse_matrix():\n     assert SparseMatrix.eye(2).nnz() == 2\n \n \n-def test_transpose():\n+def test_sparse_matrix_stacking():\n+    # Test horizontal stacking with 0-row matrices\n+    sparse_matrices_0_rows = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_0_rows).shape == (0, 6)\n+    \n+    # Test vertical stacking with 0-column matrices\n+    sparse_matrices_0_cols = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_0_cols).shape == (6, 0)\n+    \n+    # Test horizontal stacking with 1-row matrices\n+    sparse_matrices_1_rows = [SparseMatrix.zeros(1, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_1_rows).shape == (1, 6)\n+    \n+    # Test vertical stacking with 1-column matrices\n+    sparse_matrices_1_cols = [SparseMatrix.zeros(n, 1) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_1_cols).shape == (6, 1)\n+\n+    print(\"All tests for sparse matrix stacking passed.\")\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n         SparseMatrix(((1, 3), (2, 4)))\n \n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..3aeb64b 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -100,6 +100,31 @@ def test_core_symbol():\n         check(c)\n \n \n+import sys\n+import sympy\n+from sympy import Float, Symbol, Add\n+import pickle\n+import subprocess\n+\n+def test_pickle_float_expression_python2_to_python3():\n+    # Test the pickling of a sympy expression containing a float from Python 2 to 3\n+    if sys.version_info[0] < 3:\n+        x = sympy.symbols(\"x\")\n+        expr = x + 1.0\n+        pickled_expr = pickle.dumps(expr, protocol=2)\n+        \n+        # Use a subprocess to simulate loading in Python 3\n+        command = (\n+            \"python3 -c 'import pickle, sys;\"\n+            \"expr = pickle.loads(sys.stdin.buffer.read());\"\n+            \"assert expr == Symbol(\\\"x\\\") + Float(1.0), \\\"Unpickled expression is incorrect\\\"'\"\n+        )\n+        \n+        process = subprocess.run(\n+            command, input=pickled_expr, shell=True, check=True\n+        )\n+        assert process.returncode == 0, \"Process failed when unpickling in Python 3\"\n+\n def test_core_numbers():\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n         check(c)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..bf6ccd4 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -279,6 +279,23 @@ def test_coth_series():\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n \n+def test_issue_coth_log_tan_subs():\n+    from sympy import Symbol, coth, log, tan, I, pi\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # The values that originally caused the issue\n+    problematic_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+\n+    # Test that substituting these values does not raise an error\n+    for val in problematic_values:\n+        result = e.subs(x, val)\n+        assert result is not None, f\"Substitution failed for x={val}\"\n+\n+    # Ensure substitution for non-problematic values still works\n+    assert coth(log(tan(1))) == coth(log(tan(1)))\n+    assert coth(log(tan(pi/4))) == coth(log(1))\n+\n def test_csch():\n     x, y = symbols('x,y')\n \n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..0a9ba8b 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,48 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    import sympy as sm\n+    # Test case from the issue description\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1],\n+    ])\n+    assert result == expected\n+\n+    # Additional test case: inserting at the start\n+    M = sm.eye(3)\n+    V = sm.ones(3, 1)\n+    result = M.col_insert(0, V)\n+    expected = sm.Matrix([\n+        [1, 1, 0, 0],\n+        [1, 0, 1, 0],\n+        [1, 0, 0, 1],\n+    ])\n+    assert result == expected\n+\n+    # Additional test case: inserting at the end\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 1],\n+        [0, 1, 0, 1],\n+        [0, 0, 1, 1],\n+    ])\n+    assert result == expected\n+\n+    # Edge case: inserting into an empty matrix\n+    M = sm.Matrix([])\n+    V = sm.Matrix([1, 2, 3]).reshape(3, 1)\n+    result = M.col_insert(0, V)\n+    expected = V\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..f6139ea 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -620,46 +620,46 @@ def test_latex_sequences():\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n     assert latex(s1) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n+    latex_str = r'[1, 2, 1, 2, \\ldots]'\n     assert latex(s2) == latex_str\n \n     s3 = SeqFormula(a**2, (0, 2))\n     s4 = SeqPer((1, 2), (0, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4\\right\\]'\n+    latex_str = r'[0, 1, 4]'\n     assert latex(s3) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1\\right\\]'\n+    latex_str = r'[1, 2, 1]'\n     assert latex(s4) == latex_str\n \n     s5 = SeqFormula(a**2, (-oo, 0))\n     s6 = SeqPer((1, 2), (-oo, 0))\n \n-    latex_str = r'\\left\\[\\ldots, 9, 4, 1, 0\\right\\]'\n+    latex_str = r'[\\ldots, 9, 4, 1, 0]'\n     assert latex(s5) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 2, 1, 2, 1\\right\\]'\n+    latex_str = r'[\\ldots, 2, 1, 2, 1]'\n     assert latex(s6) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5, 11, \\ldots\\right\\]'\n+    latex_str = r'[1, 3, 5, 11, \\ldots]'\n     assert latex(SeqAdd(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5\\right\\]'\n+    latex_str = r'[1, 3, 5]'\n     assert latex(SeqAdd(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 11, 5, 3, 1\\right\\]'\n+    latex_str = r'[\\ldots, 11, 5, 3, 1]'\n     assert latex(SeqAdd(s5, s6)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4, 18, \\ldots\\right\\]'\n+    latex_str = r'[0, 2, 4, 18, \\ldots]'\n     assert latex(SeqMul(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4\\right\\]'\n+    latex_str = r'[0, 2, 4]'\n     assert latex(SeqMul(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n+    latex_str = r'[\\ldots, 18, 4, 2, 0]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..193c150 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -195,6 +196,37 @@ def test_Domain_preprocess():\n     assert Domain.preprocess('QQ(x)') == QQ.frac_field(x)\n \n     assert Domain.preprocess('Z(x,y)') == ZZ.frac_field(x, y)\n+\n+    # Additional test cases for the issue\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n+    # New test cases based on the issue description\n+    assert Domain.preprocess('R[y,z]') == RR[y, z]\n+    assert Domain.preprocess('C[y,z]') == CC[y, z]\n+    assert Domain.preprocess('RR[y,z]') == RR[y, z]\n+    assert Domain.preprocess('CC[y,z]') == CC[y, z]\n+\n+    # Test using Poly with domain specification\n+    from sympy import Poly\n+    from sympy.abc import x, y, z\n+\n+    # This should work without raising an OptionError\n+    p1 = Poly(1.2*x*y*z, x, domain='RR[y,z]')\n+    assert str(p1) == \"Poly(1.2*y*z*x, x, domain='RR[y,z]')\"\n+\n+    # Additional cases to ensure robustness\n+    p2 = Poly(1.2*x*y*z, x, domain='CC[y,z]')\n+    assert str(p2) == \"Poly(1.2*y*z*x, x, domain='CC[y,z]')\"\n+\n+    p3 = Poly(2.3*x*y + 4.5*z, x, domain='RR[y,z]')\n+    assert str(p3) == \"Poly(2.3*y*x + 4.5*z, x, domain='RR[y,z]')\"\n     assert Domain.preprocess('Q(x,y)') == QQ.frac_field(x, y)\n \n     assert Domain.preprocess('ZZ(x,y)') == ZZ.frac_field(x, y)\n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..fe9e574 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,7 +6111,18 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n-def test_MatrixSymbol_printing():\n+def test_issue_14814():\n+    # Test for the issue with special characters in MatrixSymbol names.\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    \n+    # Test pretty printing of MatAdd with special characters\n+    assert pretty(x + y_star) == \"x + y*\"\n+\n+    # Test pretty printing negative coefficients and special character symbols\n+    a = symbols('a')\n+    y = MatrixSymbol('y', n, n)\n+    assert pretty(-a*x - 2*y_star*y) == \"-a*x - 2*y**y*\"\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n     B = MatrixSymbol(\"B\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..eb138e7 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -720,6 +720,22 @@ def test_dummification():\n     lam = lambdify((F(t), G(t)), some_expr)\n     assert lam(3, 9) == 2\n     lam = lambdify(sin(t), 2 * sin(t)**2)\n+\n+def test_curly_matrix_symbol():\n+    # Issue #15009\n+    from sympy import MatrixSymbol, lambdify\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    try:\n+        lam = lambdify(curlyv, curlyv)\n+        assert lam(1) == 1\n+    except SyntaxError:\n+        assert False, \"The SyntaxError issue with curly MatrixSymbol should be fixed\"\n+\n+    try:\n+        lam = lambdify(curlyv, curlyv, dummify=True)\n+        assert lam(1) == 1\n+    except SyntaxError:\n+        assert False, \"The SyntaxError issue with curly MatrixSymbol with dummify=True should be fixed\"\n     assert lam(F(t)) == 2 * F(t)**2\n     #Test that \\alpha was properly dummified\n     lam = lambdify((alpha, t), 2*alpha + t)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..51d3eb4 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -23,6 +24,21 @@ def test_Rational():\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n+def test_Max():\n+    # Test Max with two symbolic variables\n+    assert mcode(Max(x, y)) == \"Max[x, y]\"\n+    # Test Max with a symbolic variable and a number\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    # Test Max with numbers only\n+    assert mcode(Max(1, 2)) == \"Max[1, 2]\"\n+    # Test Max with three arguments\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    # Test Max with negative numbers\n+    assert mcode(Max(-1, -2, x)) == \"Max[-1, -2, x]\"\n+    # Test composition of Max in expressions\n+    assert mcode(Max(x, y) + z) == \"Max[x, y] + z\"\n+    assert mcode(Max(x, y) * Min(x, y)) == \"Max[x, y]*Min[x, y]\"\n+\n \n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..876e6f6 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,15 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex():\n+    # Test case for the issue described where indexed matrix-expression LaTeX printer is not compilable\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    assert latex((M*N)[i, j]) == r'\\\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..bdd9114 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -20,8 +21,20 @@ def test_idiff():\n     assert True in [sol.diff(x, 3).equals(explicit) for sol in solve(circ, y)]\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n+def test_issue_idiff_supports_eq_and_functions():\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Test case for idiff supporting Eq\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x) == (x + 1) * exp(x - y)/(y + 1)\n \n-def test_intersection():\n+    # Test case for idiff supporting functions\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..2a03415 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,40 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import codegen, CCodeGen\n+    from sympy import MatrixSymbol\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+def test_autowrap_with_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n+    assert source == expected\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..4efaa0f 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,25 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, Symbol, Eq, Piecewise, S, FiniteSet\n \n-def test_issue_9623():\n+def test_intersection_remove_duplicates():\n+    x = Symbol('x')\n+    \n+    # Test case 1: Duplicates in all sets\n+    assert Intersection({1}, {1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+\n+    # Test case 2: Different sets with duplicates\n+    assert Intersection({1}, {1}, {2}) == S.EmptySet\n+\n+    # Test case 3: Sets with symbolic elements\n+    assert Intersection({1, x}, {1, x}, {x}) == Piecewise(({1, x}, Eq(x, 1)), ({x}, True))\n+\n+    # Test case 4: No duplicates, should remain unevaluated\n+    assert Intersection({1}, {2}, {x}) == Intersection({1}, {2}, {x})\n+\n+    # Test case 5: More duplicates, same value\n+    assert Intersection({1, 1}, {1, 1}, {1, x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex bd254ca..ae14b88 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -384,6 +384,36 @@ def test_numpy_matrix():\n     assert numpy.all(f_dot2(inp) == 0)\n \n     p3 = NumPyPrinter(strict_kw)\n+\n+def test_lambdify_identity_matrix():\n+    if not numpy:\n+        skip(\"NumPy not installed\")\n+\n+    from sympy import Identity, MatrixSymbol, symbols\n+    n = symbols('n', integer=True)\n+\n+    # Test with specific size\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2), modules='numpy')\n+    mat_input = numpy.array([[1, 2], [3, 4]])\n+    expected_output = numpy.array([[2, 2], [3, 5]])\n+    numpy.testing.assert_array_equal(f(mat_input), expected_output)\n+\n+    # Test with symbolic size; should raise NotImplementedError\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n), modules='numpy'))\n+\n+    # Test with identity matrix only\n+    Id3 = Identity(3)\n+    f_identity = lambdify((), Id3, modules='numpy')\n+    expected_identity_output = numpy.eye(3)\n+    numpy.testing.assert_array_equal(f_identity(), expected_identity_output)\n+\n+    # Test adding identity to zero matrix\n+    Zero2 = numpy.zeros((2, 2))\n+    f_zero_plus_identity = lambdify((), Identity(2) + Zero2, modules='numpy')\n+    expected_zero_plus_identity = numpy.eye(2)\n+    numpy.testing.assert_array_equal(f_zero_plus_identity(), expected_zero_plus_identity)\n     # The line below should probably fail upon construction (before calling with \"(inp)\"):\n     raises(Exception, lambda: lambdify(x, x_dot_mtx, printer=p3)(inp))\n \n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..f9505ba 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -814,4 +814,16 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n+\n+def test_issue_17137():\n+    from sympy import simplify, Symbol, I, cos, sin\n+    x = Symbol('x')\n+    # Test cases from the original test patch\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    # Additional test cases to ensure robustness\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(sin(x)**(2 + 3*I)) == sin(x)**(2 + 3*I)\n+    assert simplify((cos(x) + sin(x))**I) == (cos(x) + sin(x))**I\n+    assert simplify((cos(x)*sin(x))**(2*I)) == (cos(x)*sin(x))**(2*I)\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..7a15ea5 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,5 +1,7 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n+from sympy import sympify\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n@@ -93,6 +95,14 @@ def test_point():\n     assert p4 * 5 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n+    # Test multiplication with sympify and number\n+    assert p3 + p4 * sympify(2.0) == Point(2, 2)\n+    assert p3 + sympify(2.0) * p4 == Point(2, 2)\n+    assert sympify(2.0) * p4 == Point(2, 2)\n+    assert p4 * sympify(2.0) == Point(2, 2)\n+    assert 2 * p4 == Point(2, 2)\n+    assert p4 * 2 == Point(2, 2)\n+\n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n     # Point differences should be simplified\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..1ff7fb9 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,43 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, Symbol, sympify\n+\n+def test_non_string_equality():\n+    # Expressions should not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Make sure == doesn't try to convert the resulting expression to a string\n+    # (e.g., by calling sympify() instead of _sympify())\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+    \n+    # Additional tests for the specific issue\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+    \n+    assert (x == C()) is False  # Ensure this doesn't attempt eval and fail\n+    assert (x != C()) is True\n+\n+    class C2:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert (x == C2()) is False  # Ensure this doesn't wrongly compare equal\n+    assert (x != C2()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1939,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..23fe17b 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,7 +547,15 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n-    # issue 18122\n+    # issue 18186\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy.abc import x, y\n+\n+    # Verify that diophantine gives the same set of solutions regardless of the symbol order\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..4119035 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,8 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n+from sympy.core import Basic\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -66,7 +68,15 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n+\n+def test_atoms_on_variable():\n+    v = Variable('x', type=float64)\n+    assert v.atoms() == set()\n+\n+def test_atoms_on_basic():\n+    b = Basic()\n+    assert b.atoms() == set([b])\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..223c130 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,28 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_single_element_BlockDiagMatrix_to_Matrix():\n+    # Import necessary functions for the test\n+    from sympy import Matrix, BlockDiagMatrix\n+\n+    # Test case for a single element BlockDiagMatrix\n+    M_single = Matrix([[1, 2], [3, 4]])\n+    D_single = BlockDiagMatrix(M_single)\n+    B_single = Matrix(D_single)\n+    assert B_single == M_single\n+\n+    # Test case for two elements BlockDiagMatrix to ensure the fix doesn't break existing functionality\n+    M_double = Matrix([[1, 2], [3, 4]])\n+    D_double = BlockDiagMatrix(M_double, M_double)\n+    B_double = Matrix(D_double)\n+    expected_double = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    assert B_double == expected_double\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..c928a19 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -67,6 +68,18 @@ def test_Identity_index():\n \n \n def test_block_index():\n+    # Test case based on the reported issue with C[i, 0]\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[i, 0] == MatrixElement(C, i, 0)  # Cannot be simplified to A[i, 0] or B[i, 0]\n+\n+    # Additional test cases for non-trivial symbolic indices\n+    D = MatrixSymbol('D', n, n)\n+    E = MatrixSymbol('E', n, 1)\n+    F = BlockMatrix([[D, E]])\n+    assert F[i, j] == MatrixElement(F, i, j)  # Should not simplify to any block sub-matrix element\n+    assert F[i, n] == MatrixElement(F, i, n)  # Beyond the boundary of first block\n     I = Identity(3)\n     Z = ZeroMatrix(3, 3)\n     B = BlockMatrix([[I, I], [I, I]])\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..d0b491f 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -200,7 +200,40 @@ def test_im():\n     X = FunctionMatrix(3, 3, Lambda((n, m), n + m*I))\n     assert im(X) == Matrix([[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n \n+from sympy import Abs, Piecewise, Eq, Function\n+\n def test_sign():\n+    # Test rewrite of sign in terms of Abs for various cases\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    # Basic rewrite test\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+\n+    # Test with a function\n+    f = Function('f')\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y)/Abs(f(y)), True))\n+\n+    # Edge case: x is zero\n+    assert sign(0).rewrite(Abs) == 0\n+\n+    # Test with a complex number\n+    z = Symbol('z', complex=True)\n+    assert sign(z).rewrite(Abs) == Piecewise((0, Eq(z, 0)), (z/Abs(z), True))\n+\n+    # Test with specific numeric values\n+    assert sign(5).rewrite(Abs) == 1\n+    assert sign(-5).rewrite(Abs) == -1\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(3*I).rewrite(Abs) == I\n+    assert sign(-3*I).rewrite(Abs) == -I\n+\n+    # Check the behavior for known symbolic positive and negative values\n+    p = Symbol('p', positive=True)\n+    n = Symbol('n', negative=True)\n+    assert sign(p).rewrite(Abs) == 1\n+    assert sign(n).rewrite(Abs) == -1\n     assert sign(1.2) == 1\n     assert sign(-1.2) == -1\n     assert sign(3*I) == I\n",
  "sympy__sympy-20154": "",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..88326fb 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -253,8 +253,12 @@ def test_power_rewrite_exp():\n     assert all((1/func(x)).rewrite(exp) == 1/(func(x).rewrite(exp)) for func in\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n+from sympy import S, zoo, oo, power\n \n-def test_zero():\n+def test_issue_19572():\n+    # Test for issue where 0**-oo should return zoo (ComplexInfinity)\n+    assert 0**-oo == zoo\n+    assert power(0, -oo) == zoo\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..a72b871 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n@@ -30,7 +31,16 @@ def test_eq():\n     assert 10*m != 10*s\n \n \n-def test_convert_to():\n+def test_issue_convert_to_combines_orthogonal_units():\n+    # Original issue with convert_to function combining orthogonal units\n+    expr = joule * second\n+    result = convert_to(expr, joule)\n+    assert result == expr, \"convert_to should return original expression for orthogonal units\"\n+\n+    # Related sensible results from issue description\n+    assert convert_to(joule * second, joule * second) == joule * second\n+    assert convert_to(joule * second, kg * m**2 / s) == kg * m**2 / s\n+    assert convert_to(joule * second, minute) == joule * minute / 60\n     q = Quantity(\"q1\")\n     q.set_global_relative_scale_factor(S(5000), meter)\n \n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..205a8fc 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,19 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    # Test that Symbol instances do not have __dict__\n+    assert not hasattr(s, '__dict__')\n+    # Test that Symbol instances have __slots__\n+    assert hasattr(s, '__slots__')\n+    with raises(AttributeError):\n+        # Attempt to set an attribute should raise an AttributeError\n+        s.some_attribute = 42\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..78c9904 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..c8c7aa1 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -7,6 +8,38 @@ from sympy import (\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+from sympy import sinh, exp, Piecewise, Symbol, clear_cache\n+\n+def test_issue_polynomial_error_with_subs():\n+    # Clear cache to simulate a fresh environment as described in the issue\n+    clear_cache()\n+    \n+    # Define symbols without any assumptions\n+    x, y, z = symbols('x y z')\n+\n+    # Define the expression that caused the issue\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+\n+    # Perform the substitution and ensure no errors occur\n+    try:\n+        result = expr.subs({1: 1.0})\n+        assert result is not None, \"Substitution failed to produce a result\"\n+    except Exception as e:\n+        assert False, f\"Expected no exception but got: {e}\"\n+\n+    # Clear cache and redefine symbols with real=True assumption\n+    clear_cache()\n+    x_r, y_r, z = symbols('x_r y_r z', real=True)\n+\n+    # Redefine the expression with real symbols\n+    expr_real = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+\n+    # Perform the substitution and ensure no errors occur\n+    try:\n+        result_real = expr_real.subs({1: 1.0})\n+        assert result_real is not None, \"Substitution failed to produce a result\"\n+    except Exception as e:\n+        assert False, f\"Expected no exception with real symbols but got: {e}\"\n \n def test_subs():\n     n3 = Rational(3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..a4b6f68 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,9 +1,11 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n+from sympy.core.function import Derivative\n from sympy.integrals.integrals import Integral\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n@@ -34,7 +36,10 @@ def test_Symbol_kind():\n     assert comm_x.kind is NumberKind\n     assert noncomm_x.kind is UndefinedKind\n \n-def test_Integral_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    d = Derivative(A, comm_x)\n+    assert d.kind is MatrixKind(NumberKind)\n     A = MatrixSymbol('A', 2,2)\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..2a93b3d 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -101,6 +101,32 @@ def test_monomials():\n \n     raises(ValueError, lambda: set(itermonomials([], [], 1)))\n     raises(ValueError, lambda: set(itermonomials([], [], 2)))\n+\n+    # Test cases for the issue with itermonomials and min_degrees argument\n+\n+    from sympy import symbols, itermonomials\n+    from sympy.polys.orderings import monomial_key\n+    from sympy.abc import x, y\n+\n+    # Test case 1: Check total degree 3 monomials\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+    monomials = sorted(set(itermonomials(states, max_degrees, min_degrees)), key=monomial_key('grlex', states))\n+    expected_monomials = {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x1*x3**2, x1**2*x3, x2*x3**2, x2**2*x3, x1*x2*x3}\n+    assert set(monomials) == expected_monomials\n+\n+    # Test case 2: Check monomials with min degree 2 and max degree 3\n+    monomials = sorted(set(itermonomials([x, y], 3, 2)), key=monomial_key('grlex', [x, y]))\n+    expected_monomials = {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+    assert set(monomials) == expected_monomials\n+\n+    # Test case 3: Verify behavior with three variables\n+    i, j, k = symbols('i j k')\n+    monomials = sorted(set(itermonomials([i, j, k], 3, 2)), key=monomial_key('grlex', [i, j, k]))\n+    expected_monomials = {i**2, j**2, k**2, i*j, i*k, j*k, i**2*j, i**2*k, j**2*k, j**2*i, k**2*i, k**2*j, i*j*k, j*i*k, k*i}\n+    assert set(monomials) == expected_monomials\n     raises(ValueError, lambda: set(itermonomials([], [], 3)))\n \n     raises(ValueError, lambda: set(itermonomials([x, y], [0, 1], [1, 2])))\n",
  "sympy__sympy-22005": "",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..7057531 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n",
  "sympy__sympy-22840": "",
  "sympy__sympy-23117": "",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..daafe0a 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,21 @@ def test_scipy_polys():\n \n \n \n+def test_lambdify_single_element_tuple():\n+    # Original test case to verify the fix\n+    f2b = lambdify([], (1,))\n+    assert f2b() == (1,)\n+\n+    # Additional tests to verify the source code respects single element tuple\n+    generated_source = inspect.getsource(lambdify([], (1,)))\n+    assert 'return (1,)' in generated_source\n+\n+    # Test with a different single element tuple\n+    f2c = lambdify([], (2,))\n+    assert f2c() == (2,)\n+    generated_source_c = inspect.getsource(lambdify([], (2,)))\n+    assert 'return (2,)' in generated_source_c\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..fe3881e 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,30 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy import exp\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    \n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+    \n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..550448e 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,6 +45,28 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_issue_fix():\n+    # Test cases to verify the fix for issue #24142\n+\n+    # Verify the expansion when tensor factors have scalar multipliers\n+    assert TP(2*A - B, A + B).expand(tensorproduct=True) == \\\n+        2*TP(A, A) + 2*TP(A, B) - TP(B, A) - TP(B, B)\n+\n+    # Verify expansion with nested scalar factors\n+    assert TP(3*(A - B), (2*A + B)).expand(tensorproduct=True) == \\\n+        6*TP(A, A) + 3*TP(A, B) - 6*TP(B, A) - 3*TP(B, B)\n+\n+    # Test with zero terms, should collapse appropriately\n+    assert TP(0*A, A + B).expand(tensorproduct=True) == 0\n+    assert TP(A, 0*B).expand(tensorproduct=True) == 0\n+\n+    # Tests for the original test patch\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..415729d 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,6 +563,28 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    # Expression should equate to having compatible dimensions\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..2a02161 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, V, milli\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +28,19 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    # Test cases for the milli prefix bug\n+    assert milli * W == W / 1000, \"milli*W should be equivalent to mW\"\n+    assert W * milli == W / 1000, \"W*milli should be equivalent to mW\"\n+\n+    assert milli * V == V / 1000, \"milli*V should be equivalent to mV\"\n+    assert V * milli == V / 1000, \"V*milli should be equivalent to mV\"\n+\n+    # Additional tests for other units with milli prefix if needed\n+    # For example, kilogram (kg) can be tested similarly\n+    # Note: Conversion and behavior might depend if kilo is set as the base for mass.\n+    assert milli * meter == meter / 1000, \"milli*meter should be equivalent to mm\"\n+    assert meter * milli == meter / 1000, \"meter*milli should be equivalent to mm\"\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..42f0a22 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -185,11 +185,13 @@ class GrandParent(models.Model):\n \n \n class Parent(GrandParent):\n-    pass\n+    class Meta:\n+        ordering = [\"-pk\"]\n \n \n class Child(Parent):\n-    pass\n+    class Meta:\n+        ordering = [\"-pk\"]\n \n \n class GrandChild(Child):\n",
  "django__django-13033": "",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..2a40423 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,6 +3202,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n+    def test_boundfield_subwidget_id_for_label_custom_id(self):\n+        \"\"\"\n+        Ensures that subwidgets of CheckboxSelectMultiple use the correct id\n+        from ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id_%s'}),\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_field_1')\n+        \n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n             first_name = CharField()\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..c0dc677 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,10 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm, Normalize\n+import numpy as np\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n@@ -658,7 +662,30 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n-def test_colorbar_get_ticks_2():\n+def test_colorbar_update_after_norm_change():\n+    # Create random image data\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    # Plot the data\n+    fig, ax = plt.subplots(1, 1)\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+\n+    # Update the norm of the plot\n+    plot.set_norm(LogNorm())\n+    \n+    # Check if the colorbar updates correctly\n+    fig.canvas.draw()  # Force a draw to update the colorbar\n+    assert cb.ax.yaxis.get_scale() == 'log', \"Colorbar did not update to log scale.\"\n+\n+    # Check that the colorbar updates with the correct limits\n+    assert plot.norm.vmin == img.min(), \"Colorbar vmin did not update correctly.\"\n+    assert plot.norm.vmax == img.max(), \"Colorbar vmax did not update correctly.\"\n+\n+    # Change back to linear scale and check again\n+    plot.set_norm(Normalize(vmin=0, vmax=1))\n+    fig.canvas.draw()\n+    assert cb.ax.yaxis.get_scale() == 'linear', \"Colorbar did not update back to linear scale.\"\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..654b773 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3044,8 +3044,13 @@ class TestDataset:\n         x0 = y[0].to_unstacked_dataset(\"features\")\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n-\n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_unstacked_dataset_single_dimension(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..825f522 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,39 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with a transformer that outputs a pandas DataFrame\"\"\"\n+\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion, make_union\n+    from sklearn import set_config\n+    from numpy.testing import assert_array_equal\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X, y=None):\n+            return self\n+\n+        def transform(self, X):\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Set pandas output configuration\n+    set_config(transform_output=\"pandas\")\n+\n+    # Create FeatureUnion with the custom transformer\n+    feature_union = make_union(MyTransformer())\n+\n+    # Fit and transform the data\n+    result = feature_union.fit_transform(data)\n+\n+    # Expected result\n+    expected_result = data[\"value\"].groupby(data[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Check if the output matches the expected result\n+    assert result.equals(expected_result)\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..7e319e7 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,67 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import sys\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from tests.utils import do_autodoc\n+\n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='Python 3.6+ required')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app: SphinxTestApp):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='Python 3.6+ required')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_show_undoc(app: SphinxTestApp):\n+    options = {\"members\": None, \"inherited-members\": True, \"undoc-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..70edca1 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n-    Symbol, coth, pi, log, count_ops, sqrt, E, expand, Piecewise)\n+    Symbol, coth, pi, log, count_ops, sqrt, E, expand, Piecewise, Rational)\n \n from sympy.core.compatibility import long\n from sympy.utilities.pytest import XFAIL\n@@ -358,7 +359,26 @@ def test_issue_2827_trigsimp_methods():\n     assert exptrigsimp(eq) == eq\n \n \n-def test_exptrigsimp():\n+def test_issue_15129_trigsimp_methods():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+def test_issue_15129_trigsimp_simplify():\n+    # Direct simplification test\n+    r = sin(Rational(1, 50)) * sin(Rational(1, 25)) + cos(Rational(1, 50)) * cos(Rational(1, 25))\n+    assert simplify(r) == cos(S(1)/50)\n+\n+    # Test with acos\n+    r_acos = acos(r)\n+    assert simplify(r_acos) == acos(cos(S(1)/50))\n+    \n+    # Test using trigsimp directly\n+    assert trigsimp(r) == cos(S(1)/50)\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..f8fe047 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,26 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+from sympy import Sum, pprint, oo\n+from sympy.abc import x\n \n-def test_units():\n+def test_sum_alignment_with_addition():\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    # Pretty print the expression to visually check if the alignment is correct.\n+    # Note: The output here is meant to be visually checked rather than asserted.\n+    pprinted = upretty(expr)\n+    expected_output = \\\n+u(\"\"\"\\\n+  \u221e     \\n\\\n+ ___    \\n\\\n+ \u2572      \\n\\\n+  \u2572   x \\n\\\n+  \u2571    + 3\\n\\\n+ \u2571      \\n\\\n+ \u203e\u203e\u203e    \\n\\\n+x = 1   \\\n+\"\"\")\n+    assert pprinted == expected_output\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..1491d80 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,24 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.utilities.pytest import raises\n+\n def test_uniq():\n+    # Test for the RuntimeError when the input list is modified during iteration\n+    f = [1, 2, 3, 4]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = [[1], [2], [3], [4]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = []\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = [1, 1, 2, 2]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    # Additional tests to ensure correct functionality with non-modified lists\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..b50247b 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -8,6 +9,7 @@ from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n+from django.db.models import Max\n \n from .models import (\n     Article, Author, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..6588275 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -545,6 +545,27 @@ class BasicExpressionsTests(TestCase):\n         self.assertCountEqual(subquery_test, [self.foobar_ltd, self.gmbh])\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n+    def test_subquery_sql_generation(self):\n+        # Setup initial queryset and subquery\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        \n+        # Ensuring the subquery attribute is set correctly\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+        \n+        # Compile and generate SQL, then verify it's correct\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        self.assertTrue(sql.strip().endswith(')'))\n+        \n+        # Testing subquery generation with an additional filter\n+        filtered_employees = employees.filter(name__contains=\"John\")\n+        filtered_subquery = Subquery(filtered_employees)\n+        filtered_sql, _ = filtered_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', filtered_sql)\n+        self.assertTrue(filtered_sql.strip().endswith(')'))\n \n     def test_uuid_pk_subquery(self):\n         u = UUIDPK.objects.create()\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..c66de4a 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,26 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +184,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..70b696c 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -9,12 +10,14 @@ import warnings\n \n import numpy as np\n import pytest\n+import pickle\n+from matplotlib.figure import Figure\n from PIL import Image\n \n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n-from matplotlib.axes import Axes\n+from matplotlib.backends.backend_macosx import FigureCanvasMac\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..d97c512 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+from seaborn._oldcore import categorical_order\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,6 +1625,30 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n+    def test_pairgrid_scatterplot_with_categorical_hue(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+\n+        # Test to replicate issue with PairGrid using categorical hue \n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        # The following line should execute without raising a KeyError\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            error_raised = False\n+        except KeyError:\n+            error_raised = True\n+\n+        assert not error_raised, \"KeyError was raised when using categorical hue with PairGrid\"\n+\n+        # Additionally, use regplot without scatter to ensure that it works with regression line\n+        try:\n+            g.map(sns.regplot, scatter=False)\n+            regression_error_raised = False\n+        except Exception:\n+            regression_error_raised = True\n+\n+        assert not regression_error_raised, \"Error was raised when using regplot with PairGrid\"\n+\n     def test_linewidths(self, long_df):\n \n         f, ax = plt.subplots()\n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..6ea8284 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -346,8 +346,17 @@ def test_excinfo_str():\n     assert s.endswith(\"ValueError\")\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n+import pytest\n \n-def test_excinfo_for_later():\n+def test_pytest_raises_str_behavior():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    \n+    # Ensure str(excinfo) outputs the expected format\n+    assert str(excinfo) == \"<ExceptionInfo LookupError tblen=1>\"\n+    \n+    # Ensure str(excinfo.value) outputs the full message\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n     assert \"for raises\" in str(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..6608816 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,16 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # New test to verify the shortcut --co works the same way\n+        result = testdir.runpytest(\"--co\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n+\n+        # New test to verify the shortcut --co works the same way\n+        result = testdir.runpytest(\"--co\")\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +444,16 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+        # New test to verify the shortcut --co works the same way\n+        result = testdir.runpytest(\"--co\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n+\n+        # New test to verify the shortcut --co works the same way\n+        result = testdir.runpytest(\"--co\")\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..2ec00cb 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -84,7 +84,25 @@ def test_Identity():\n     assert In.inverse() == In\n     assert In.conjugate() == In\n \n-def test_Identity_doit():\n+def test_issue_sum_of_identity_matrix_elements():\n+    from sympy import Symbol, Sum, MatrixSymbol, Q, assuming, ask\n+    \n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    M = MatrixSymbol('M', n, n)\n+\n+    e = None\n+    with assuming(Q.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+\n+    # Check if the matrix is identity\n+    assert e.is_Identity, \"The matrix should be identified as identity.\"\n+    \n+    # Check the sum of diagonal elements is 'n'\n+    assert Sum(e[i, i], (i, 0, n-1)).doit() == n, \"Sum of diagonal elements should be n.\"\n+    \n+    # Check the total sum of all elements is 'n'\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n, \"Total sum of elements should be n.\"\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": ""
}