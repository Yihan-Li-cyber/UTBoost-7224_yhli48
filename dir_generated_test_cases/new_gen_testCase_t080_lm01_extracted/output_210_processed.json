{
  "astropy__astropy-12907": "",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..587543f 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,78 @@\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ==== \",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ==== \",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ==== \",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n+\n+def test_rst_write_with_header_names():\n+    \"\"\"Test writing an RST table with header names only.\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.count})\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\"])\n+    expected_output = [\n+        \"===== ======== \",\n+        \" wave response \",\n+        \"===== ======== \",\n+        \"350.0      0.7 \",\n+        \"950.0      1.2 \",\n+        \"===== ======== \",\n+    ]\n+    assert out.getvalue().splitlines() == expected_output\n+\n+\n+def test_rst_write_with_header_units():\n+    \"\"\"Test writing an RST table with header units only.\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.count})\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"unit\"])\n+    expected_output = [\n+        \"===== ======== \",\n+        \"   nm       ct \",\n+        \"===== ======== \",\n+        \"350.0      0.7 \",\n+        \"950.0      1.2 \",\n+        \"===== ======== \",\n+    ]\n+    assert out.getvalue().splitlines() == expected_output\n+\n+\n+def test_rst_with_invalid_header_rows():\n+    \"\"\"Test RST write with invalid header row options.\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.count})\n+    out = StringIO()\n+    try:\n+        tbl.write(out, format=\"ascii.rst\", header_rows=[\"invalid\"])\n+        assert False, \"Expected an error with invalid header_rows\"\n+    except TypeError as e:\n+        assert \"unexpected keyword argument\" not in str(e), \"Did not expect unexpected keyword argument error.\"\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n+from astropy.table import QTable\n+import astropy.units as u\n+import numpy as np\n \n from .common import assert_almost_equal, assert_equal\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..7968025 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,36 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_case_insensitive_commands(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Example QDP file with lower and upper case commands\n+    read terr 1\n+    READ SERR 2\n+    ! Data table\n+    !MJD   Error Rate  Error\n+    53000.123456 2.378e-05 -0.292 0.375\n+    55045.099887 1.145e-05  0.000 0.000\n+    NO NO NO NO\n+    \"\"\"\n+    if lowercase:\n+        example_qdp = example_qdp.lower()\n+\n+    path = str(tmp_path / \"test_case_insensitive.qdp\")\n+\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+\n+    table = Table.read(path, format='ascii.qdp')\n+    assert np.isclose(table[\"MJD\"][0], 53000.123456)\n+    assert np.isclose(table[\"Rate\"][0], -0.292)\n+\n+    # Ensure errors are correctly read\n+    assert np.isclose(table[\"MJD_nerr\"][0], -2.378e-05)\n+    assert np.isclose(table[\"Rate_nerr\"][0], 0.375)\n \n-def test_read_example():\n+    assert np.isclose(table[\"MJD_perr\"][1], 1.145e-05)\n+    assert np.isclose(table[\"Rate_perr\"][1], 0.0)\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..943163b 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,47 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_bitmask_arithmetic_issue():\n+    # This test is to verify the mask propagation fix for issue where one operand has no mask.\n+\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..81cced9 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,21 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_fitsrec_d_exponent_replacement(self):\n+        # Test the D exponent replacement in FITS ASCII tables\n+        a = np.array([1.23e4, 5.67e8])\n+        c = fits.Column(name='exponent_test', format='D', array=a)\n+        hdu = fits.TableHDU.from_columns([c])\n+        hdu.writeto(self.temp('exponent_test.fits'), overwrite=True)\n+        \n+        with open(self.temp('exponent_test.fits'), 'rb') as f:\n+            content = f.read().decode('ascii')\n+            assert '1.2300000000000000D+04' in content\n+            assert '5.6700000000000000D+08' in content\n+\n+        with fits.open(self.temp('exponent_test.fits')) as hdul:\n+            assert np.allclose(hdul[1].data['exponent_test'], a)\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..bc6cefa 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1093,6 +1093,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default FILE_UPLOAD_PERMISSIONS should be 0o644 if not explicitly set.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n     def test_override_file_upload_permissions(self):\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..9bd49f6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -384,7 +384,36 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertSequenceEqual(mustermanns_by_seniority, [self.max, mary])\n \n-    def test_outerref(self):\n+    def test_order_by_multiline_rawsql(self):\n+        # Test ordering with multiline RawSQL to ensure no incorrect removal\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN status = 'active'\n+                     THEN start_date\n+                     ELSE end_date END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN grade > 5\n+                     THEN priority\n+                     ELSE 0 END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN is_open\n+                     THEN open_date\n+                     ELSE close_date END\n+            ''', []).desc(),\n+        )\n+        for qs in (\n+            Company.objects.all(),\n+            Company.objects.distinct(),\n+        ):\n+            with self.subTest(qs=qs):\n+                # This assumes that the queryset returns the objects in the expected order\n+                # according to the specified raw SQL ordering logic.\n+                self.assertSequenceEqual(\n+                    qs.order_by(*raw_order_by),\n+                    [self.company_a, self.company_b, self.company_c],  # Replace with actual expected order\n+                )\n         inner = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         msg = (\n             'This queryset contains a reference to an outer query and may only '\n",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..e7baf67 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -514,6 +514,22 @@ class MigrateTests(MigrationTestBase):\n             out.getvalue()\n         )\n \n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_sqlmigrate_transactional_ddl_support(self):\n+        \"\"\"\n+        Test that sqlmigrate does not output transaction statements\n+        for databases that do not support transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n     def test_showmigrations_plan_app_label_no_migrations(self):\n         out = io.StringIO()\n",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..413fc48 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -69,13 +69,41 @@ class TestValidation(SimpleTestCase):\n \n     def test_invalid_string(self):\n         field = models.DurationField()\n+        # Test with missing seconds\n+        with self.assertRaises(exceptions.ValidationError) as cm:\n+            field.clean('1:15', None)\n+        self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+            \"'1:15' value has an invalid format. It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n+\n+        # Test with correct format but invalid string\n+        with self.assertRaises(exceptions.ValidationError) as cm:\n+            field.clean('not a datetime', None)\n+        self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+            \"'not a datetime' value has an invalid format. It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n+\n+    def test_valid_durations(self):\n+        field = models.DurationField()\n+        # Test the valid format that should not raise error\n+        try:\n+            field.clean('1:15:30', None)  # HH:MM:SS\n+            field.clean('15:30', None)    # MM:SS\n+            field.clean('30', None)       # SS\n+        except exceptions.ValidationError:\n+            self.fail(\"DurationField.clean() raised ValidationError unexpectedly!\")\n+        field = models.DurationField()\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +112,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..df545a5 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,8 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n',\n+            'trailingnewline\\u000A',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -248,7 +250,21 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_unicode_validator_with_trailing_newline(self):\n+        v = validators.UnicodeUsernameValidator()\n+        invalid_usernames = ['newline\\n', 'newline\\u000A']\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_with_trailing_newline(self):\n+        v = validators.ASCIIUsernameValidator()\n+        invalid_usernames = ['newline\\n', 'newline\\u000A']\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +274,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..a4f43f3 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -366,7 +366,23 @@ class HttpResponseTests(unittest.TestCase):\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n \n-    def test_iter_content(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_empty_content(self):\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_large_content(self):\n+        large_content = memoryview(b'a' * 10**6)\n+        r = HttpResponse(large_content)\n+        self.assertEqual(r.content, b'a' * 10**6)\n+\n+    def test_memoryview_content_with_property(self):\n+        r = HttpResponse()\n+        r.content = memoryview(b'property test')\n+        self.assertEqual(r.content, b'property test')\n         r = HttpResponse(['abc', 'def', 'ghi'])\n         self.assertEqual(r.content, b'abcdefghi')\n \n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..a4d2853 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..ebbc68b 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,7 +1,9 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n-from django.contrib.auth.models import Permission, User\n+from django.contrib.auth.models import Permission, User, Group\n+from django.test.utils import captured_stdout\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n \n@@ -140,7 +142,54 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Permissions may already exist:\n+\n+        - Old workaround was to manually create permissions for proxy models.\n+        - Model may have been concrete and then converted to proxy.\n+\n+        Output a reminder to audit relevant permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_duplicate_permission_handling(self):\n+        \"\"\"\n+        Test handling of duplicate permissions when migrating proxy permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        # Create a permission that will be duplicated\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='duplicate_permission',\n+            name='Duplicate permission',\n+        )\n+        # Try creating a duplicate permission directly\n+        try:\n+            Permission.objects.create(\n+                content_type=proxy_model_content_type,\n+                codename='duplicate_permission',\n+                name='Duplicate permission',\n+            )\n+        except IntegrityError as e:\n+            self.fail(f\"IntegrityError raised: {e}\")\n+\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..a8388fb 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -17,7 +17,7 @@ from django.apps.registry import Apps\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n from django.utils import autoreload\n-from django.utils.autoreload import WatchmanUnavailable\n+from django.utils.autoreload import StatReloader\n \n from .utils import on_macos_with_hfs\n \n@@ -97,7 +97,24 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 autoreload.check_errors(import_module)('test_exception')\n         self.assertFileFound(filename)\n \n-    def test_zip_reload(self):\n+    def test_manage_py_change_detection(self):\n+        \"\"\"\n+        Ensure that changes to the manage.py file are detected by StatReloader.\n+        \"\"\"\n+        manage_py = self.temporary_file('manage.py')\n+        manage_py.write_text(\"print('Original content')\")\n+\n+        def run_reloader():\n+            reloader = StatReloader()\n+            reloader.watch_file(manage_py)\n+            self.assertFileFound(manage_py)\n+            # Simulate changing the file\n+            manage_py.write_text(\"print('Modified content')\")\n+            # Check if the change is detected\n+            changed_files = list(reloader.run(dry_run=True))\n+            self.assertIn(manage_py, changed_files)\n+\n+        run_reloader()\n         \"\"\"\n         Modules imported from zipped files have their archive location included\n         in the result.\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..a29e2f6 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -6,6 +6,9 @@ import sys\n import tempfile\n import threading\n from io import StringIO\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n+from unittest import mock\n from pathlib import Path\n from unittest import mock\n \n@@ -242,11 +245,34 @@ class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n-    def test_handle_db_exception(self):\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test that raising Http404 in a path converter's to_python method\n+        results in a technical 404 response when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_technical_404_converter_with_value_error(self):\n+        \"\"\"\n+        Test that raising a ValueError in a path converter's to_python method\n+        results in trying the next available route.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=ValueError):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_technical_404_with_debug_false(self):\n         \"\"\"\n-        Ensure the debug view works when a database exception is raised by\n-        performing an invalid query and passing the exception to the debug view.\n+        Test that when DEBUG is False, a 404 results in the default error message,\n+        not a technical response.\n         \"\"\"\n+        with override_settings(DEBUG=False):\n+            with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+                response = self.client.get('/path-post/1/')\n+                self.assertNotContains(response, 'Page not found', status_code=404)\n+                self.assertContains(response, 'A server error occurred. Please contact the administrator.', status_code=404)\n         with connection.cursor() as cursor:\n             try:\n                 cursor.execute('INVALID SQL')\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..4a6e6df 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -212,7 +212,45 @@ class CharFieldTests(SimpleTestCase):\n \n         self.assertEqual(ThingWithIterableChoices._meta.get_field('thing').check(), [])\n \n-    def test_choices_containing_non_pairs(self):\n+    def test_choices_length_exceeds_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'),  # Actual value 'ABC' exceeds max_length\n+                    ('OK', 'Good')\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value \"\n+                \"in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_choices_length_exceeds_max_length_with_named_groups(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=3,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Value Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value \"\n+                \"in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n         class Model(models.Model):\n             field = models.CharField(max_length=10, choices=[(1, 2, 3), (1, 2, 3)])\n \n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..94ae697 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -253,6 +253,30 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n     def test_serialize_enums(self):\n+        # Enum with translated values\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+\n+        # Verify serialized result uses Enum name instead of its translated value\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+        \n+        # Additional test for checking translated Enum in a Django model default\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m.name) for m in TextTranslatedEnum],\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..e294ebb 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,7 +318,32 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        # Original test cases with mocked current datetime\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        \n+        # Set up different current times to test against\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        \n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        \n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..55f0ff5 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -40,7 +40,26 @@ class Gender(models.TextChoices):\n     __empty__ = '(Undeclared)'\n \n \n+from django.test import SimpleTestCase\n+\n class ChoicesTests(SimpleTestCase):\n+    def test_textchoices_getter_returns_str(self):\n+        class MyChoice(models.TextChoices):\n+            FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+            SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+        \n+        instance_value = MyChoice.FIRST_CHOICE\n+        self.assertIsInstance(instance_value, str)\n+        self.assertEqual(instance_value, \"first\")\n+\n+    def test_integerchoices_getter_returns_int(self):\n+        class MyIntChoice(models.IntegerChoices):\n+            FIRST = 1, \"First\"\n+            SECOND = 2, \"Second\"\n+        \n+        instance_value = MyIntChoice.FIRST\n+        self.assertIsInstance(instance_value, int)\n+        self.assertEqual(instance_value, 1)\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..0c97763 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,8 +148,47 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.db import models\n+from django.test import SimpleTestCase\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overriding_FIELD_display(self):\n+        \"\"\"\n+        Verify that overriding get_FIELD_display returns the overridden value.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_default_get_FIELD_display(self):\n+        \"\"\"\n+        Verify that the default get_FIELD_display returns the choice value.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'foo')\n+        \n+        f.foo_bar = 2\n+        self.assertEqual(f.get_foo_bar_display(), 'bar')\n+\n+    def test_get_FIELD_display_with_invalid_value(self):\n+        \"\"\"\n+        Verify get_FIELD_display returns the value when it's not in choices.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+        f = FooBar(foo_bar=3)\n+        self.assertEqual(f.get_foo_bar_display(), 3)\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 7b8648d..86aa851 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -68,7 +68,22 @@ class SimplifiedURLTests(SimpleTestCase):\n                     r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n                 )\n \n-    def test_path_lookup_with_inclusion(self):\n+    def test_re_path_with_optional_format_parameter(self):\n+        match = resolve('/module/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': None})\n+        \n+        match = resolve('/module/html/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'html'})\n+        \n+        match = resolve('/module/json/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'json'})\n+        \n+        match = resolve('/module/xml/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'xml'})\n         match = resolve('/included_urls/extra/something/')\n         self.assertEqual(match.url_name, 'inner-extra')\n         self.assertEqual(match.route, 'included_urls/extra/<extra>/')\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..868a571 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,47 @@\n+\n+# Import necessary modules for testing\n+from django.test import TestCase\n+from django.db import models\n+\n+# Define test classes based on the issue description\n+class OverridingInheritedFieldDisplayTests(TestCase):\n+    def test_overriding_inherited_foo_display(self):\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B')])\n+\n+        # Test if get_foo_display() works correctly for overridden choices\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+\n+    def test_inherited_choices_with_additional_option(self):\n+        # Testing with additional choice, similar to the issue\n+        class AbstractParent(models.Model):\n+            foo_choice = [('A', 'output1'), ('B', 'output2')]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ChildWithExtraChoice(AbstractParent):\n+            foo_choice = [('A', 'output1'), ('B', 'output2'), ('C', 'output3')]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+        # Test if get_field_foo_display() works correctly for inherited and new choices\n+        instance = ChildWithExtraChoice(field_foo='A')\n+        self.assertEqual(instance.get_field_foo_display(), 'output1')\n+\n+        instance = ChildWithExtraChoice(field_foo='B')\n+        self.assertEqual(instance.get_field_foo_display(), 'output2')\n+\n+        instance = ChildWithExtraChoice(field_foo='C')\n+        self.assertEqual(instance.get_field_foo_display(), 'output3')\n+\n import pickle\n \n from django import forms\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..4b53831 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,7 +76,30 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n+    def test_valid_sublanguage_fallback(self):\n+        with self.settings(\n+            LANGUAGE_CODE='de-at', \n+            LANGUAGES=[('de', 'German'), ('es', 'Spanish')]\n+        ):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+\n+        with self.settings(\n+            LANGUAGE_CODE='fr-ca', \n+            LANGUAGES=[('fr', 'French')]\n+        ):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+\n+        with self.settings(\n+            LANGUAGE_CODE='pt-br', \n+            LANGUAGES=[('pt', 'Portuguese')]\n+        ):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+\n+        with self.settings(\n+            LANGUAGE_CODE='zh-hans-cn', \n+            LANGUAGES=[('zh-hans', 'Simplified Chinese')]\n+        ):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..7530f53 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,80 @@\n+\n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_foreign_key_order(self):\n+        # Test that foreign keys are correctly handled in serialization order.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj\": 2}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=2)\n+        obj_ref = ObjectReference.objects.get(pk=2)\n+        self.assertEqual(obj_ref.obj, obj)\n+        self.assertIsNone(obj.obj_ref)\n+\n+    def test_multiple_references(self):\n+        # Test that multiple references are correctly deserialized.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 3,\n+                \"fields\": {\"obj_ref\": 3, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 3,\n+                \"fields\": {\"obj\": 3}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 4,\n+                \"fields\": {\"obj\": 3}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=3)\n+        obj_ref1 = ObjectReference.objects.get(pk=3)\n+        obj_ref2 = ObjectReference.objects.get(pk=4)\n+        self.assertEqual(obj.obj_ref, obj_ref1)\n+        self.assertEqual(obj_ref1.obj, obj)\n+        self.assertEqual(obj_ref2.obj, obj)\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +83,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..e285748 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,7 +159,26 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_relationship_model_with_foreign_key_to_wrong_model(self):\n+    def test_foreign_key_hint_message(self):\n+        class Location(models.Model):\n+            pass\n+        \n+        class Event(models.Model):\n+            participants = models.ManyToManyField('Location', through='Participant')\n+        \n+        class Participant(models.Model):\n+            location = models.ForeignKey(Location, models.CASCADE)\n+            first_event = models.ForeignKey(Event, models.CASCADE, related_name='first_event')\n+            second_event = models.ForeignKey(Event, models.CASCADE, related_name='second_event')\n+        \n+        field = Event._meta.get_field('participants')\n+        errors = field.check(from_model=Event)\n+        self.assertEqual(len(errors), 1)\n+        hint_text = (\n+            'If you want to create a recursive relationship, use '\n+            'ManyToManyField(\"self\", through=\"Participant\").'\n+        )\n+        self.assertEqual(errors[0].hint, hint_text)\n         class WrongModel(models.Model):\n             pass\n \n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..4e6b4fb 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,7 +1249,56 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n-    def test_request_meta_filtering(self):\n+    def test_cleanse_setting_recurses_in_lists_and_tuples_within_dict(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            \"foo\": \"value\",\n+            \"secret\": \"value\",\n+            \"token\": \"value\",\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": \"value\"},\n+                {\"token\": \"value\"},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            \"foo\": \"value\",\n+            \"secret\": reporter_filter.cleansed_substitute,\n+            \"token\": reporter_filter.cleansed_substitute,\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": reporter_filter.cleansed_substitute},\n+                {\"token\": reporter_filter.cleansed_substitute},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n         self.assertEqual(\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..bef2b41 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1751,6 +1751,63 @@ class OperationTests(OperationTestBase):\n         self.assertIndexNotExists(\"test_alinto_pony\", [\"pink\", \"weight\"])\n         # And deconstruction\n         definition = operation.deconstruct()\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_remove_index_together_with_unique_together(self):\n+        \"\"\"\n+        Test that removing an index_together while having a unique_together on the same fields\n+        does not cause a migration crash.\n+        \"\"\"\n+        app_label = 'test_remove_idx_with_uniq_together'\n+        table_name = '%s_pony' % app_label\n+\n+        # Setting up the initial model state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_declaration_movement(self):\n+        \"\"\"\n+        Test that moving the declaration of an index does not result in re-creation.\n+        \"\"\"\n+        app_label = 'test_index_movement'\n+        table_name = '%s_pony' % app_label\n+\n+        # Initial setup with unique_together and index_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Move index declaration\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+\n+        # Re-apply the same operation to ensure no re-creation happens\n+        project_state = new_state.clone()\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n         self.assertEqual(definition[0], \"AlterIndexTogether\")\n         self.assertEqual(definition[1], [])\n         self.assertEqual(definition[2], {'name': \"Pony\", 'index_together': {(\"pink\", \"weight\")}})\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..87410f1 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,6 +685,20 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n+    def test_queryset_delete_zero_objects(self):\n+        \"\"\"\n+        Test that QuerySet.delete() returns consistent results when zero objects are deleted.\n+        \"\"\"\n+        # Case 1: No objects exist in the model with a foreign key relationship\n+        deleted, deleted_objs = HiddenUser.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.HiddenUser': 0})\n+\n+        # Case 2: No objects exist in the model without a foreign key relationship\n+        deleted, deleted_objs = R.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.R': 0})\n+\n     def test_fast_delete_empty_no_update_can_self_select(self):\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..56564f4 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,32 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n+    async def test_get_async_response_subdirectory(self):\n+        request = self.async_request_factory.get('/static/test/subdir/file2.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_empty_path(self):\n+        request = self.async_request_factory.get('/static/')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..20b8ce9 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,11 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('__strip__underscore-value___', 'strip-underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..c185914 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -86,7 +87,28 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.difference(qs2).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_empty_qs(self):\n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        self.assertQuerysetEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+\n+    @skipUnlessDBFeature('supports_select_intersection')\n+    def test_intersection_none(self):\n+        qs1 = Number.objects.filter(num__lte=5)\n+        qs2 = Number.objects.filter(num__gte=5)\n+        qs3 = qs1.intersection(qs2)\n+        self.assertQuerysetEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [5], ordered=False)\n+\n+    @skipUnlessDBFeature('supports_select_difference')\n+    def test_difference_none(self):\n+        qs1 = Number.objects.filter(num__lte=5)\n+        qs2 = Number.objects.filter(num__lte=4)\n+        qs3 = qs1.difference(qs2)\n+        self.assertQuerysetEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [5], ordered=False)\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.none()\n         qs3 = Number.objects.filter(pk__in=[])\n@@ -313,4 +335,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..f7d94b1 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2819,6 +2819,72 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates_in_formfield(self):\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+\n     def test_callable_called_each_time_form_is_instantiated(self):\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..86c2861 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -11,7 +11,38 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n-    def test_single_parent(self):\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Assert that fields from different models are not equal\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Assert ordering between fields\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        # Assert that hash values are different\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n \n@@ -347,4 +378,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..45644db 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,7 +45,25 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n-    def test_available_apps(self):\n+    def test_model_class_in_app_list(self):\n+        ctx = self.ctx\n+        apps = ctx['available_apps']\n+\n+        # admin_views.Article\n+        admin_views = apps[0]\n+        article = admin_views['models'][0]\n+        self.assertEqual(article['model'], Article)\n+\n+        # auth.User\n+        auth = apps[1]\n+        user = auth['models'][0]\n+        self.assertEqual(user['model'], User)\n+\n+    def test_build_app_dict_accessibility(self):\n+        request = RequestFactory().get('/')\n+        site = AdminSite()\n+        app_dict = site._build_app_dict(request)\n+        self.assertIsInstance(app_dict, dict)\n         ctx = self.ctx\n         apps = ctx['available_apps']\n         # we have registered two models from two different apps\n",
  "django__django-13551": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..bd875de 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,10 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n-from unittest import mock\n+from collections import namedtuple\n \n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n@@ -875,6 +876,13 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'],\n             ordered=False\n         )\n+\n+    def test_range_lookup_namedtuple_with_different_values(self):\n+        ChairRange = namedtuple('ChairRange', ['min_value', 'max_value'])\n+        qs = Company.objects.filter(\n+            num_chairs__range=ChairRange(min_value=250, max_value=350),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n         self.assertQuerysetEqual(\n             Company.objects.filter(num_employees__range=(1, 100)),\n             [\n@@ -884,6 +892,13 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_namedtuple_with_different_values(self):\n+        ChairRange = namedtuple('ChairRange', ['min_value', 'max_value'])\n+        qs = Company.objects.filter(\n+            num_chairs__range=ChairRange(min_value=250, max_value=350),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..48b0f15 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -23,6 +23,8 @@ from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n",
  "django__django-13660": "",
  "django__django-13710": "",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..29b3225 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -582,14 +582,26 @@ class TestQuerying(TestCase):\n \n     def test_isnull_key(self):\n         # key__isnull=False works the same as has_key='key'.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=True),\n             self.objs[:3] + self.objs[5:],\n         )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__a__isnull=False),\n             [self.objs[3], self.objs[4]],\n         )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n",
  "django__django-13768": "",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..99be78a 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -296,9 +296,32 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         }\n         f = ModelChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n+        # Test with an integer not in queryset\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n+        \n+        # Test ModelChoiceField with a string not in queryset\n+        f = ModelChoiceField(queryset=ChoiceModel.objects.all(), error_messages={\n+            'invalid_choice': 'Select a valid choice. \"%(value)s\" is not one of the available choices.',\n+        })\n+        self.assertFormErrors(\n+            ['Select a valid choice. \"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid'\n+        )\n \n-        # ModelMultipleChoiceField\n+        # Test ModelChoiceField value placeholder\n+        def test_modelchoicefield_value_placeholder(self):\n+            f = ModelChoiceField(\n+                queryset=ChoiceModel.objects.all(),\n+                error_messages={\n+                    'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+                },\n+            )\n+            self.assertFormErrors(\n+                ['\"invalid\" is not one of the available choices.'],\n+                f.clean,\n+                'invalid',\n+            )\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': '%(value)s IS INVALID CHOICE',\n@@ -307,4 +330,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..d229228 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -89,6 +89,12 @@ class Category(models.Model):\n         return self.name\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Record(models.Model):\n     category = models.ForeignKey(Category, models.CASCADE)\n \n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..5fd8d87 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -16,6 +17,13 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n+    def test_combine_with_dict_keys(self):\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..816cba4 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,7 +28,8 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n-from django.utils.functional import SimpleLazyObject\n+from django.db.models import Q, OuterRef, Exists\n+from django.test import TestCase\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n",
  "django__django-14155": "",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..d9d2959 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -66,7 +68,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_custom_bigautofield_default_auto_field(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_custom_smallautofield_default_auto_field(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +104,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_custom_bigautofield_default_auto_field(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_custom_smallautofield_default_auto_field(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..9679860 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2197,6 +2197,16 @@ class StartApp(AdminScriptTestCase):\n                     \"make sure the directory is a valid identifier.\" % bad_target\n                 )\n \n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Test that django-admin startapp handles trailing slashes in target directory.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n     def test_importable_target_name(self):\n         _, err = self.run_django_admin(['startapp', 'app', 'os'])\n         self.assertOutput(\n",
  "django__django-14411": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..45ddfeb 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,6 +658,40 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n+    def test_serialize_type_model(self):\n+        \"\"\"\n+        Test that a model class is serialized correctly with necessary imports.\n+        \"\"\"\n+        self.assertSerializedEqual(models.Model)\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(models.Model),\n+            (\"('models.Model', {'from django.db import models'})\", set()),\n+        )\n+\n+    def test_serialize_mixin_and_base_model(self):\n+        \"\"\"\n+        Test that a model with a mixin and a base model is serialized correctly\n+        and the migration includes the necessary imports.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        # Simulate what the migration writer would do\n+        serialized_bases = MigrationWriter.serialize(MyModel)\n+        # Check that 'models.Model' is serialized and imported correctly\n+        self.assertIn(\"'models.Model'\", serialized_bases)\n+        self.assertIn(\"from django.db import models\", serialized_bases)\n+\n     def test_simple_migration(self):\n         \"\"\"\n         Tests serializing a simple migration.\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..3fe5b9c 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -982,7 +982,40 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n+\n+    def test_formset_no_errors(self):\n+        \"\"\"Test that a valid formset returns an empty ErrorList.\"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '1',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '0',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=0)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertTrue(formset.is_valid())\n+        self.assertEqual(str(formset.non_form_errors()), '<ul class=\"errorlist nonform\"></ul>')\n+\n+    def test_formset_multiple_errors(self):\n+        \"\"\"Test that multiple non-form errors are correctly formatted.\"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '0',\n+            'choices-INITIAL_FORMS': '0',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=2, validate_min=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = str(formset.non_form_errors())\n+        expected_errors = (\n+            '<ul class=\"errorlist nonform\">'\n+            '<li>Please submit at least 2 forms.</li>'\n+            '</ul>'\n+        )\n+        self.assertEqual(non_form_errors, expected_errors)\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 6fb82ec..c9b737d 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -820,8 +820,31 @@ class ShadowingFieldsTests(SimpleTestCase):\n                 id='models.E006',\n             )\n         ])\n+    def test_m2m_through_fields_hashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n \n-    def test_multiinheritance_clash(self):\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+        \n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+        \n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        reverse_m2m = Child._meta.get_field('many_to_many_field')\n+        self.assertEqual(reverse_m2m.through_fields, ['child', 'parent'])\n+        self.assertTrue(isinstance(hash(reverse_m2m), int))\n         class Mother(models.Model):\n             clash = models.IntegerField()\n \n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..9c4926d 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -293,6 +293,25 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'pagination': {'more': False},\n         })\n \n+    def test_autocomplete_with_custom_fields(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {**super().serialize_result(obj, to_field_name), 'custom_field': 'custom_value'}\n+\n+        Question.objects.create(question='Test question 1')\n+        Question.objects.create(question='Test question 2')\n+        \n+        request = self.factory.get(self.url, {'term': 'Test', **self.opts})\n+        request.user = self.superuser\n+        with model_admin(Question, QuestionAdmin):\n+            response = CustomAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        \n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        for result in data['results']:\n+            self.assertIn('custom_field', result)\n+            self.assertEqual(result['custom_field'], 'custom_value')\n+\n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..3fc08bb 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -425,8 +425,37 @@ class MethodDecoratorTests(SimpleTestCase):\n                 def __module__(cls):\n                     return \"tests\"\n \n+from functools import partial, wraps\n+from django.utils.decorators import method_decorator\n+from django.test import TestCase\n+\n+class DecoratorAttributePreservationTests(TestCase):\n+    def test_wrapper_assignments_with_partial(self):\n+        \"\"\"Test that method_decorator preserves wrapper assignments with partial.\"\"\"\n+        func_name = None\n+        func_module = None\n+        \n+        def sample_decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class TestClass:\n+            @method_decorator(sample_decorator)\n+            def method(self):\n+                return 'hello'\n+\n+        # Create a partial function\n+        test_instance = TestClass()\n+        partial_method = partial(test_instance.method)\n+        partial_method()\n \n-class XFrameOptionsDecoratorsTests(TestCase):\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..f57c1df 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5083,6 +5083,38 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n     def test_user_password_change_limited_queryset(self):\n         su = User.objects.filter(is_superuser=True)[0]\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n+\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper method to test readonly ForeignKey links for different admin sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,)))\n+        self.assertContains(response, reverse(f'{admin_site}:admin_views_chapter_change', args=(chapter.pk,)))\n+        self.assertContains(response, reverse(f'{admin_site}:admin_views_language_change', args=(language.pk,)))\n+        self.assertContains(response, reverse(f'{admin_site}:auth_user_change', args=(self.superuser.pk,)))\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links on default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links on custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('namespaced_admin')\n         self.assertEqual(response.status_code, 404)\n \n     def test_change_form_renders_correct_null_choice_value(self):\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..560918d 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -346,7 +348,39 @@ class ModelChoiceFieldTests(TestCase):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n \n-    def test_queryset_manager(self):\n+    def test_model_choice_iterator_value_hashable(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Test that the value is hashable and the hash is consistent\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_model_choice_iterator_value_in_dict(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        show_fields = {value_1: ['first_name', 'last_name']}\n+        \n+        self.assertIn(value_1, show_fields)\n+        self.assertNotIn(value_2, show_fields)\n+\n+    def test_model_choice_iterator_value_custom_option(self):\n+        class CustomSelect(forms.Select):\n+            def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+                context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+                if not value:\n+                    return context\n+                if value in show_fields:  # This is a dict\n+                    context['attrs']['data-fields'] = json.dumps(show_fields[value])\n+                return context\n+\n+        show_fields = {\n+            ModelChoiceIteratorValue(self.c1.pk, self.c1): ['first_name', 'last_name']\n+        }\n+        widget = CustomSelect(choices=[(self.c1.pk, 'Choice 1'), (self.c2.pk, 'Choice 2')])\n+        rendered_widget = widget.render('name', self.c1.pk)\n+        \n+        self.assertIn('data-fields=\"[\\\\\"first_name\\\\\", \\\\\"last_name\\\\\"]\"', rendered_widget)\n         f = forms.ModelChoiceField(Category.objects)\n         self.assertEqual(len(f.choices), 4)\n         self.assertEqual(list(f.choices), [\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..c525cba 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -792,8 +792,34 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Pony.objects.count(), 2)\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n+    from django.db import connection\n+    from django.db.migrations.state import ProjectState\n+    from django.test import TestCase\n+    from django.db import models\n+    from django.db import migrations\n+\n+    class RenameModelWithDbTableNoopTests(TestCase):\n+        def test_rename_model_with_db_table_noop(self):\n+            app_label = 'test_rmwdbtn'\n+            project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+                migrations.CreateModel('Rider', fields=[\n+                    ('id', models.AutoField(primary_key=True)),\n+                ], options={'db_table': 'rider'}),\n+                migrations.CreateModel('Pony', fields=[\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+                ]),\n+            ])\n+            new_state = project_state.clone()\n+            operation = migrations.RenameModel('Rider', 'Runner')\n+            operation.state_forwards(app_label, new_state)\n \n-    def test_rename_m2m_target_model(self):\n+            with connection.schema_editor() as editor:\n+                with self.assertNumQueries(0):\n+                    operation.database_forwards(app_label, editor, project_state, new_state)\n+            with connection.schema_editor() as editor:\n+                with self.assertNumQueries(0):\n+                    operation.database_backwards(app_label, editor, new_state, project_state)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..d8176ef 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,7 +154,23 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n-    def test_form_as_table_data(self):\n+    def test_multivaluefield_label_without_index(self):\n+        form = ComplexFieldForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_field1_0\">Field1:</label></th>\n+            <td><input type=\"text\" name=\"field1_0\" id=\"id_field1_0\" required>\n+            <select multiple name=\"field1_1\" id=\"id_field1_1\" required>\n+            <option value=\"J\">John</option>\n+            <option value=\"P\">Paul</option>\n+            <option value=\"G\">George</option>\n+            <option value=\"R\">Ringo</option>\n+            </select>\n+            <input type=\"text\" name=\"field1_2_0\" id=\"id_field1_2_0\" required>\n+            <input type=\"text\" name=\"field1_2_1\" id=\"id_field1_2_1\" required></td></tr>\n+            \"\"\",\n+        )\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..d593d8d 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -90,6 +90,8 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://inv-.alid-.com',\n             'http://inv-.-alid.com',\n             '[a',\n+            # Test case for an invalid IPv6 URL that should raise ValidationError instead of ValueError.\n+            '////]@N.AN',\n             'http://[a',\n             # Non-string.\n             23,\n",
  "django__django-15213": "",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..3b1b3de 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -143,7 +144,18 @@ class CookieTests(BaseTests, SimpleTestCase):\n         for illegal in non_compliant_chars:\n             self.assertEqual(encoded.find(illegal), -1)\n \n-    def test_json_encoder_decoder(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Ensure that extra_tags is correctly serialized and deserialized\n+        when it is an empty string.\n+        \"\"\"\n+        message = Message(constants.INFO, \"Test message\", extra_tags=\"\")\n+        encoder = MessageEncoder()\n+        encoded_message = encoder.encode(message)\n+        decoded_message = json.loads(encoded_message, cls=MessageDecoder)\n+        \n+        # Verify that the extra_tags are preserved as an empty string\n+        self.assertEqual(decoded_message.extra_tags, \"\")\n         \"\"\"\n         A complex nested data structure containing Message\n         instances is properly encoded/decoded by the custom JSON\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..666ac1c 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,4 +1,5 @@\n from pathlib import Path\n+from pathlib import Path\n from unittest import mock\n \n from django.template import autoreload\n@@ -39,7 +40,22 @@ class TemplateReloadTests(SimpleTestCase):\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n         mock_reset.assert_not_called()\n \n-    def test_watch_for_template_changes(self):\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [ROOT],  # Simulating BASE_DIR being added\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_dev_server_restart_on_non_template_change(self, mock_reset):\n+        \"\"\"\n+        Test that changes outside the template directories do not trigger a reset\n+        when BASE_DIR is included in DIRS.\n+        \"\"\"\n+        non_template_path = Path(__file__).parent / 'non_template_file.txt'\n+        # Simulate a change in a non-template file\n+        self.assertIsNone(autoreload.template_changed(None, non_template_path))\n+        mock_reset.assert_not_called()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n@@ -88,7 +104,22 @@ class TemplateReloadTests(SimpleTestCase):\n @require_jinja2\n @override_settings(INSTALLED_APPS=['template_tests'])\n class Jinja2TemplateReloadTests(SimpleTestCase):\n-    def test_watch_for_template_changes(self):\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [ROOT],  # Simulating BASE_DIR being added\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_dev_server_restart_on_non_template_change(self, mock_reset):\n+        \"\"\"\n+        Test that changes outside the template directories do not trigger a reset\n+        when BASE_DIR is included in DIRS.\n+        \"\"\"\n+        non_template_path = Path(__file__).parent / 'non_template_file.txt'\n+        # Simulate a change in a non-template file\n+        self.assertIsNone(autoreload.template_changed(None, non_template_path))\n+        mock_reset.assert_not_called()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..031cb3d 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,37 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test handling of empty string for If-Modified-Since header.\n+        \"\"\"\n+        # Ensure that an empty string does not cause an exception and returns True\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_none_header(self):\n+        \"\"\"\n+        Test handling of None for If-Modified-Since header.\n+        \"\"\"\n+        # Ensure that None is handled gracefully and returns True\n+        self.assertTrue(was_modified_since(header=None, mtime=1))\n+\n+    def test_was_modified_since_valid_date(self):\n+        \"\"\"\n+        Test handling of a valid date string for If-Modified-Since header.\n+        \"\"\"\n+        import time\n+        current_time = time.time()\n+        header = http_date(current_time)\n+        # Expect False because the resource has not been modified since the given time\n+        self.assertFalse(was_modified_since(header=header, mtime=current_time))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        Test handling of an invalid date string for If-Modified-Since header.\n+        \"\"\"\n+        invalid_header = \"not-a-date\"\n+        # Ensure that an invalid date does not raise an exception and returns True\n+        self.assertTrue(was_modified_since(header=invalid_header, mtime=1))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..06b52b7 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -8,6 +9,8 @@ from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n from django.core.management import BaseCommand, CommandError, find_commands\n+from io import StringIO\n+from django.core.management import call_command\n from django.core.management.utils import (\n     find_command,\n     get_random_secret_key,\n@@ -411,7 +414,30 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_command_help_formatting(self):\n+        \"\"\"\n+        Test that the help output of a command with multiline help text is formatted correctly.\n+        \"\"\"\n+        class TestCommand(BaseCommand):\n+            help = '''Import a contract from tzkt\n+Example usage:\n+    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+'''\n+\n+        command = TestCommand()\n+        out = StringIO()\n+        with mock.patch('sys.stdout', new=out):\n+            call_command(command, '--help')\n+        output = out.getvalue()\n+        expected_help = (\n+            \"usage: manage.py testcommand [-h]\\n\\n\"\n+            \"Import a contract from tzkt\\n\"\n+            \"Example usage:\\n\"\n+            \"    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\\n\"\n+            \"optional arguments:\\n\"\n+            \"  -h, --help  show this help message and exit\\n\"\n+        )\n+        self.assertIn(expected_help, output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..8d94ac4 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,8 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n+from django.core.serializers.json import DjangoJSONEncoder\n from django.utils.html import (\n     conditional_escape,\n     escape,\n@@ -217,6 +219,46 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n+    \n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_with_custom_encoder_and_id(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"custom\": \"output\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder, element_id='custom_id'),\n+            '<script id=\"custom_id\" type=\"application/json\">{\"custom\": \"output\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        # Test the default behavior using DjangoJSONEncoder\n+        self.assertHTMLEqual(\n+            json_script({\"name\": \"Django\"}),\n+            '<script type=\"application/json\">{\"name\": \"Django\"}</script>',\n+        )\n+\n+    def test_json_script_encoder_handling_complex_object(self):\n+        class ComplexObjectEncoder(DjangoJSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, complex):\n+                    return [obj.real, obj.imag]\n+                return super().default(obj)\n+\n+        self.assertHTMLEqual(\n+            json_script({\"complex\": complex(1, 2)}, encoder=ComplexObjectEncoder),\n+            '<script type=\"application/json\">{\"complex\": [1.0, 2.0]}</script>',\n+        )\n+\n     def test_smart_urlquote(self):\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..b293ecb 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -143,6 +143,43 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         )\n \n     def test_template_tags_with_same_library_name(self):\n+        # Test when there are no conflicts in libraries\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags_1\", \"unique_tags_app_1.templatetags.unique_tags\"\n+                ),\n+                self.get_settings(\n+                    \"unique_tags_2\", \"unique_tags_app_2.templatetags.unique_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n+        # Test when the same name is used but different apps, should raise an error\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"conflict_tags\", \"conflict_app_1.templatetags.conflict_tags\"\n+                ),\n+                self.get_settings(\n+                    \"conflict_tags\", \"conflict_app_2.templatetags.conflict_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [\n+                    Error(\n+                        E003.msg.format(\n+                            \"'conflict_tags'\",\n+                            \"'check_framework.template_test_apps.conflict_app_1.templatetags.conflict_tags', \"\n+                            \"'check_framework.template_test_apps.conflict_app_2.templatetags.conflict_tags'\",\n+                        ),\n+                        id=E003.id,\n+                    )\n+                ],\n+            )\n         with self.settings(\n             TEMPLATES=[\n                 self.get_settings(\n@@ -206,4 +243,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..f09fb98 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,9 +398,20 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n-\n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n-class ProxyModelAdminTests(TestCase):\n+    def test_select_related_only_with_proxy_model(self):\n+        # Creating instances of the models\n+        custom_model_instance = CustomModel.objects.create(name=\"Example Name\")\n+        proxy_custom_instance = ProxyCustomModel.objects.create(name=\"Proxy Example\")\n+        \n+        # Assign the proxy model instance to AnotherModel\n+        another_model_instance = AnotherModel.objects.create(custom=proxy_custom_instance)\n+\n+        # Perform the select_related and only operation\n+        qs = AnotherModel.objects.select_related('custom').only('custom__name')\n+\n+        # Fetch the result and assert the values\n+        obj = qs.get(pk=another_model_instance.pk)\n+        self.assertEqual(obj.custom.name, \"Proxy Example\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.superuser = AuthUser.objects.create(is_superuser=True, is_staff=True)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..8caa1b5 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,7 +151,14 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n-    def test_parameters(self):\n+    def test_parameters_correct_order(self):\n+        # This test ensures that parameters are correctly placed before the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n+    def test_parameters_incorrect_order(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +190,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..9798513 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,6 +1901,26 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.forms import formset_factory, BaseFormSet\n+        from django.test import SimpleTestCase\n+        from django.test.utils import isolate_lru_cache\n+        from django.forms.renderers import get_default_renderer\n+        import warnings\n+\n+        class ManagementFormDeprecationWarningTests(SimpleTestCase):\n+            def test_no_management_form_warning(self):\n+                \"\"\"\n+                Management forms are already rendered with the new div template.\n+                \"\"\"\n+                with isolate_lru_cache(get_default_renderer), self.settings(\n+                    FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+                ), warnings.catch_warnings(record=True) as w:\n+                    warnings.simplefilter(\"always\")\n+                    ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+                    formset = ChoiceFormSet()\n+                    str(formset.management_form)\n+                    # Assert no warning is raised for management form rendering\n+                    self.assertFalse(any(item.category == RemovedInDjango50Warning for item in w))\n \n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n@@ -1909,4 +1929,4 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..5d42ecd 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,15 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_ignored_empty_form(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        # Test with empty_permitted set to False\n+        formset_false = FormSet(form_kwargs={\"empty_permitted\": False})\n+        self.assertIs(formset_false.empty_form.empty_permitted, True)\n+        # Test with empty_permitted set to True\n+        formset_true = FormSet(form_kwargs={\"empty_permitted\": True})\n+        self.assertIs(formset_true.empty_form.empty_permitted, True)\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..0e0c039 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,23 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_null_and_empty_handling(self):\n+        # Test with null string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        # Test with None\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+        # Test with None and decimal_pos specified\n+        self.assertEqual(nformat(None, \".\", decimal_pos=2), \"None\")\n+        # Test with None and grouping specified\n+        self.assertEqual(nformat(None, \".\", grouping=2), \"None\")\n+        # Test with None, grouping, and force_grouping specified\n+        self.assertEqual(nformat(None, \".\", grouping=2, thousand_sep=\",\", force_grouping=True), \"None\")\n+        # Test with None and negative sign handling\n+        self.assertEqual(nformat(-None, \".\"), \"None\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..1e88fcb 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -20,6 +21,8 @@ from django.core import mail\n from django.core.exceptions import ValidationError\n from django.core.mail import EmailMultiAlternatives\n from django.forms import forms\n+from django.urls import reverse\n+import urllib.parse\n from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n@@ -892,6 +895,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..913b1a6 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,8 +507,58 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+import os\n+from django.contrib.sitemaps import Sitemap\n+from django.test import TestCase\n+from django.urls import path\n+from django.utils.decorators import override_settings\n+from django.test import Client\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+callable_lastmod_no_items_sitemap = {\n+    \"callable-lastmod\": CallableLastmodNoItemsSitemap,\n+}\n+\n+class SitemapTests(TestCase):\n+    def setUp(self):\n+        self.client = Client()\n+\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_non_callable_sitemod_no_items(self):\n+        class NonCallableLastmodNoItemsSitemap(Sitemap):\n+            location = \"/location/\"\n+\n+            def items(self):\n+                return []\n+\n+        non_callable_lastmod_no_items_sitemap = {\n+            \"non-callable-lastmod\": NonCallableLastmodNoItemsSitemap,\n+        }\n \n-# RemovedInDjango50Warning\n+        index_response = self.client.get(\"/non-callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16379": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..cea8dac 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -10,7 +11,8 @@ from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n from .models import Article, Question\n-from .tests import AdminViewBasicTestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import AdminViewBasicTestCase, get_perm\n \n \n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n@@ -33,7 +35,37 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..7896723 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -236,7 +236,45 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n-    def test_alter_alter_table_model(self):\n+    def test_alter_alter_field(self):\n+        \"\"\"\n+        Ensure multiple AlterField operations on the same field collapse into one.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=256, null=True),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(\n+                        max_length=128, null=True, help_text=\"help\", default=None\n+                    ),\n+                ),\n+            ],\n+            [\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(\n+                        max_length=128, null=True, help_text=\"help\", default=None\n+                    ),\n+                ),\n+            ],\n+        )\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..6c13091 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -72,10 +73,19 @@ class FunctionTests(SimpleTestCase):\n             \"<a>&lt;br&gt;<img>&lt;br&gt;</a>\",\n         )\n \n+    def test_autoescape_off_with_joiner(self):\n+        # Test with autoescape off, joiner should not be escaped\n+        a = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        var = \"<br/>\"\n+        output = self.engine.render_to_string(\n+            \"join_autoescape_off\", {\"a\": a, \"var\": var}\n+        )\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n+\n     def test_noniterable_arg(self):\n         obj = object()\n         self.assertEqual(join(obj, \"<br>\"), obj)\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..02ffe6f 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -569,6 +569,33 @@ class BulkCreateTests(TestCase):\n                 unique_fields=[\"big_auto_fields\"],\n             )\n \n+    def test_bulk_create_returning_ids_with_update_conflicts(self):\n+        \"\"\"\n+        Test that bulk_create with update_conflicts=True returns IDs for the inserted/updated objects.\n+        \"\"\"\n+        initial_objects = [\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_objects)\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"c\"),\n+            TwoFields(f1=3, f2=3, name=\"d\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"f1\"],\n+            update_fields=[\"name\"],\n+        )\n+        # Ensure that the number of results matches the number of conflicting objects.\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        # Ensure that IDs are set for all returned objects.\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     def _test_update_conflicts_two_fields(self, unique_fields):\n         TwoFields.objects.bulk_create(\n             [\n@@ -816,4 +843,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..af1d52e 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -210,8 +210,32 @@ class WriterTests(SimpleTestCase):\n     class NestedChoices(models.TextChoices):\n         X = \"X\", \"X value\"\n         Y = \"Y\", \"Y value\"\n+    class NestedProfile(models.Model):\n+        class Capability(models.TextChoices):\n+            BASIC = (\"BASIC\", \"Basic\")\n+            PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n \n-    def safe_exec(self, string, value=None):\n+            @classmethod\n+            def default(cls):\n+                return [cls.BASIC]\n+\n+        capabilities = ArrayField(\n+            models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+            null=True,\n+            default=Capability.default,\n+        )\n+\n+    def test_serialize_nested_class_method_as_default(self):\n+        \"\"\"\n+        Test that the method from a nested class can be used as a default\n+        and is serialized correctly in migrations.\n+        \"\"\"\n+        field = self.NestedProfile._meta.get_field(\"capabilities\")\n+        serialized_field = MigrationWriter.serialize(field)[0]\n+        self.assertIn(\n+            \"default=migrations.test_writer.WriterTests.NestedProfile.Capability.default\",\n+            serialized_field,\n+        )\n         d = {}\n         try:\n             exec(string, globals(), d)\n@@ -1032,4 +1056,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..dfcfaff 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1119,6 +1119,18 @@ def test_range_slider(orientation):\n     slider.reset()\n     assert_allclose(slider.val, [0.1, 0.34])\n \n+def test_range_slider_initial_value():\n+    fig, ax = plt.subplots()\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Test\", valmin=0.0, valmax=1.0, valinit=[0.2, 0.8]\n+    )\n+    # Assert that the initial value is set correctly\n+    assert_allclose(slider.val, (0.2, 0.8))\n+    # Assert that the polygon coordinates match the initial values\n+    box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n+    idx = [0, 1, 2, 3]  # horizontal by default\n+    assert_allclose(box.get_points().flatten()[idx], [0.2, 0.25, 0.8, 0.75])\n+\n \n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 0e7274f..a431038 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7326,6 +7326,14 @@ def test_invisible_axes():\n     ax.set_visible(False)\n     assert fig.canvas.inaxes((200, 200)) is None\n \n+def test_set_visible_2d():\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 2, 3])\n+    ax.set_visible(False)\n+    assert not ax.get_visible()\n+    fig.canvas.draw()\n+    assert fig.canvas.inaxes((150, 150)) is None\n+\n \n def test_xtickcolor_is_not_markercolor():\n     plt.rcParams['lines.markeredgecolor'] = 'white'\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..9bba409 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,16 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable_on_creation(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_label')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n",
  "matplotlib__matplotlib-23964": "",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..c2da407 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,25 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+\n+def test_no_userwarning_with_constrained_layout_false():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import warnings\n+\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        \n+        # Code for reproduction from the issue\n+        a = np.linspace(0, 2*np.pi, 100)\n+        b = np.sin(a)\n+        c = np.cos(a)\n+        fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+        ax[0].plot(a, b)\n+        ax[1].plot(a, c)\n+        plt.subplots_adjust(wspace=0)\n+\n+        # Check if any UserWarning was raised\n+        assert not any(item.category == UserWarning for item in w)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..619e129 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,4 +1,6 @@\n+\n from io import BytesIO\n+import pickletools\n import ast\n import pickle\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..dd63aaa 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,6 +89,35 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+import pytest\n+\n+@mpl.style.context(\"default\")\n+@check_figures_equal(extensions=[\"png\"])\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Attempt to pickle and unpickle the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    pkl.seek(0)\n+    loaded_fig = pickle.load(pkl)\n+\n+    assert loaded_fig is not None\n+    # Optionally, we could do more checks here, like verifying the labels are correct, etc.\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..91fafd6 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -96,12 +96,38 @@ class TestContinuous:\n         s = Continuous()._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_color_mapping_with_boolean_data(self):\n+        import pandas as pd\n+        from numpy.testing import assert_array_equal\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import Color\n+\n+        # Test with boolean data\n+        x = pd.Series([True, False, True])\n+        cmap = color_palette(\"ch:\", as_cmap=True)\n+        s = Continuous()._setup(x, Color())\n+        expected_colors = cmap([1, 0, 1])[:, :3]  # Assuming True maps to 1 and False maps to 0\n+        assert_array_equal(s(x), expected_colors)\n+\n     def test_color_named_values(self, x):\n \n         cmap = color_palette(\"viridis\", as_cmap=True)\n         s = Continuous(\"viridis\")._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_color_mapping_with_boolean_data(self):\n+        import pandas as pd\n+        from numpy.testing import assert_array_equal\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import Color\n+\n+        # Test with boolean data\n+        x = pd.Series([True, False, True])\n+        cmap = color_palette(\"ch:\", as_cmap=True)\n+        s = Continuous()._setup(x, Color())\n+        expected_colors = cmap([1, 0, 1])[:, :3]  # Assuming True maps to 1 and False maps to 0\n+        assert_array_equal(s(x), expected_colors)\n+\n     def test_color_tuple_values(self, x):\n \n         cmap = color_palette(\"blend:b,g\", as_cmap=True)\n",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..af42ec7 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -698,14 +698,16 @@ class TestFacetGrid:\n \n         g = ag.FacetGrid(self.df, row=\"a\", col=\"b\")\n         color = \"blue\"\n-        pad = 3\n-        g.tick_params(pad=pad, color=color)\n-        for ax in g.axes.flat:\n-            for axis in [\"xaxis\", \"yaxis\"]:\n-                for tick in getattr(ax, axis).get_major_ticks():\n-                    assert mpl.colors.same_color(tick.tick1line.get_color(), color)\n-                    assert mpl.colors.same_color(tick.tick2line.get_color(), color)\n-                    assert tick.get_pad() == pad\n+    def test_pairplot_column_multiindex(self):\n+        # Create a MultiIndex DataFrame\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\"], [1, 2]])\n+        df_multiindex = self.df[[\"x\", \"y\"]].set_axis(cols, axis=1)\n+\n+        # Attempt to create a pairplot with the MultiIndex DataFrame\n+        g = ag.pairplot(df_multiindex)\n+\n+        # Assert that the grid's diag_vars match the MultiIndex columns\n+        assert g.diag_vars == list(cols)\n \n \n class TestPairGrid:\n@@ -1446,14 +1448,16 @@ class TestPairGrid:\n \n         g = ag.PairGrid(self.df)\n         color = \"red\"\n-        pad = 3\n-        g.tick_params(pad=pad, color=color)\n-        for ax in g.axes.flat:\n-            for axis in [\"xaxis\", \"yaxis\"]:\n-                for tick in getattr(ax, axis).get_major_ticks():\n-                    assert mpl.colors.same_color(tick.tick1line.get_color(), color)\n-                    assert mpl.colors.same_color(tick.tick2line.get_color(), color)\n-                    assert tick.get_pad() == pad\n+    def test_pairplot_column_multiindex(self):\n+        # Create a MultiIndex DataFrame\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\"], [1, 2]])\n+        df_multiindex = self.df[[\"x\", \"y\"]].set_axis(cols, axis=1)\n+\n+        # Attempt to create a pairplot with the MultiIndex DataFrame\n+        g = ag.pairplot(df_multiindex)\n+\n+        # Assert that the grid's diag_vars match the MultiIndex columns\n+        assert g.diag_vars == list(cols)\n \n \n class TestJointGrid:\n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..9f75594 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,10 @@\n+\n import json\n import os\n import textwrap\n-\n import pytest\n+import tomllib\n+import json\n \n import flask\n \n@@ -18,7 +20,22 @@ def common_object_test(app):\n     assert \"TestConfig\" not in app.config\n \n \n-def test_config_from_pyfile():\n+def test_config_from_file_toml_binary_mode():\n+    tomllib = pytest.importorskip(\"tomllib\", reason=\"tomllib added in 3.11\")\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    app.config.from_file(\n+        os.path.join(current_dir, \"static\", \"config.toml\"), tomllib.load, mode=\"rb\"\n+    )\n+    common_object_test(app)\n+\n+def test_config_from_file_json_text_mode():\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    app.config.from_file(\n+        os.path.join(current_dir, \"static\", \"config.json\"), json.load, mode=\"rt\"\n+    )\n+    common_object_test(app)\n     app = flask.Flask(__name__)\n     app.config.from_pyfile(f\"{__file__.rsplit('.', 1)[0]}.py\")\n     common_object_test(app)\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..0cf18d4 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,36 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import ConnectionError, ReadTimeout, HTTPError\n+import pytest\n+from unittest.mock import patch\n+\n+def httpbin(path):\n+    \"\"\" Helper function for constructing HTTPBin URLs. \"\"\"\n+    return f\"http://httpbin.org/{path}\"\n+\n+def test_urllib3_decode_error_wrapped():\n+    # Simulate a DecodeError raised by urllib3\n+    with patch('requests.adapters.HTTPAdapter.send') as mock_send:\n+        mock_send.side_effect = requests.packages.urllib3.exceptions.DecodeError(\"Decoding failed\")\n+        \n+        with pytest.raises(HTTPError) as excinfo:\n+            requests.get(httpbin('get'))\n+\n+        assert \"Decoding failed\" in str(excinfo.value)\n+\n+def test_urllib3_timeout_error_wrapped():\n+    # Simulate a TimeoutError raised by urllib3\n+    with patch('requests.adapters.HTTPAdapter.send') as mock_send:\n+        mock_send.side_effect = requests.packages.urllib3.exceptions.TimeoutError(\"The request timed out\")\n+\n+        with pytest.raises(ReadTimeout) as excinfo:\n+            requests.get(httpbin('get'), timeout=0.001)\n+\n+        assert \"The request timed out\" in str(excinfo.value)\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1663,4 +1693,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..2b4b3c9 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -950,7 +950,8 @@ class TestRequests:\n \n     def test_response_is_iterable(self):\n         r = requests.Response()\n-        io = StringIO.StringIO('abc')\n+        import io\n+        io = io.StringIO('abc')\n         read_ = io.read\n \n         def read_mock(amt, decode_content=None):\n@@ -980,7 +981,29 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_response_iter_content_with_decode_unicode_true(self):\n+        \"\"\"\n+        Test that iter_content with decode_unicode=True returns strings for JSON content.\n+        \"\"\"\n+        r = requests.Response()\n+        r._content_consumed = True\n+        r._content = b'{\"key\": \"value\"}'\n+        r.encoding = 'utf-8'\n+\n+        chunks = r.iter_content(5, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+\n+    def test_response_iter_content_with_decode_unicode_false(self):\n+        \"\"\"\n+        Test that iter_content with decode_unicode=False returns bytes for JSON content.\n+        \"\"\"\n+        r = requests.Response()\n+        r._content_consumed = True\n+        r._content = b'{\"key\": \"value\"}'\n+        r.encoding = 'utf-8'\n+\n+        chunks = r.iter_content(5, decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks)\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..3f712d3 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -731,18 +731,64 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             })\n \n             return args\n-\n-        for service in SERVICES:\n-            url = service('headers')\n-\n-            response = get(url=url,\n-                hooks={\n-                    'args': [add_foo_header, add_bar_header]\n-                }\n-            )\n-\n-            assert 'foo' in response.text\n-            assert 'bar' in response.text\n+import requests\n+from requests.models import Request\n+\n+def test_register_single_hook():\n+    def add_foo_header(args):\n+        if not args.get('headers'):\n+            args['headers'] = {}\n+        args['headers'].update({'X-Foo': 'foo'})\n+        return args\n+\n+    hooks = [add_foo_header]\n+    r = Request()\n+    r.register_hook('args', hooks)\n+    assert len(r.hooks['args']) == 1\n+    assert callable(r.hooks['args'][0])\n+\n+def test_register_multiple_hooks():\n+    def add_foo_header(args):\n+        if not args.get('headers'):\n+            args['headers'] = {}\n+        args['headers'].update({'X-Foo': 'foo'})\n+        return args\n+\n+    def add_bar_header(args):\n+        if not args.get('headers'):\n+            args['headers'] = {}\n+        args['headers'].update({'X-Bar': 'bar'})\n+        return args\n+\n+    hooks = [add_foo_header, add_bar_header]\n+    r = Request(hooks={'args': hooks})\n+    assert len(r.hooks['args']) == 2\n+    for hook in r.hooks['args']:\n+        assert callable(hook)\n+\n+def test_hooks_invoke_correctly():\n+    def add_foo_header(args):\n+        if not args.get('headers'):\n+            args['headers'] = {}\n+        args['headers'].update({'X-Foo': 'foo'})\n+        return args\n+\n+    def add_bar_header(args):\n+        if not args.get('headers'):\n+            args['headers'] = {}\n+        args['headers'].update({'X-Bar': 'bar'})\n+        return args\n+\n+    def invoke_hooks(hooks, args):\n+        for hook in hooks['args']:\n+            args = hook(args)\n+        return args\n+\n+    hooks = [add_foo_header, add_bar_header]\n+    r = Request(hooks={'args': hooks})\n+    result_args = invoke_hooks(r.hooks, {})\n+    assert 'X-Foo' in result_args['headers']\n+    assert 'X-Bar' in result_args['headers']\n \n     def test_session_persistent_cookies(self):\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..5a11857 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -56,6 +56,13 @@ reports = \"yes\"\n     check_configuration_file_reader(runner)\n \n \n+from pylint.config.exceptions import _UnrecognizedOptionError\n+import pytest\n+from pylint.lint import Run\n+from _pytest.capture import CaptureFixture\n+\n+EMPTY_MODULE = \"module_name\"  # This should be defined appropriately elsewhere in your test setup\n+\n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown id.\"\"\"\n     Run([str(EMPTY_MODULE), \"--disable=12345\"], exit=False)\n@@ -79,7 +86,21 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n \n-def test_unknown_confidence(capsys: CaptureFixture) -> None:\n+def test_unrecognized_option_no_traceback(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure no traceback is printed for unrecognized options.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"E0015: Unrecognized option found: Q\" in output.err\n+    assert \"Traceback\" not in output.err\n+\n+def test_unrecognized_option_usage_tip(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure usage tips are provided for unrecognized options.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"E0015: Unrecognized option found: Q\" in output.err\n+    assert \"usage: pylint\" in output.err\n     \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..8f3cb35 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1341,6 +1341,28 @@ class TestRunTC:\n             ]\n             with _test_cwd():\n                 os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+\n+    def test_ignore_paths_with_recursive_option(self) -> None:\n+        \"\"\"Test that ignore-paths is respected when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            # Adjust the sys.path to exclude unwanted directories for the test context\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                # This assumes that \"ignored_subdirectory\" exists in the test data\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    # Verify that the ignored path is not checked, assuming no code issues\n+                    code=0,\n+                )\n                 self._test_output(\n                     [\".\"],\n                     expected_output=\"No such file or directory\",\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..d182b38 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,24 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test linting a package containing a module with the same name as the package\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"package/package.py\", \"package/other.py\"])\n+        linter.check([\"package\"])\n+    assert not linter.stats.by_msg\n+\n+def test_import_from_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test linting where an import is made from a module with the same name as the package\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"package/package.py\", \"package/other.py\", \"script.py\"])\n+        with open(\"script.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from package import other\\n\")\n+        linter.check([\"script\", \"package\"])\n+    assert not linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +959,22 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test linting a package containing a module with the same name as the package\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"package/package.py\", \"package/other.py\"])\n+        linter.check([\"package\"])\n+    assert not linter.stats.by_msg\n+\n+def test_import_from_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test linting where an import is made from a module with the same name as the package\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"package/package.py\", \"package/other.py\", \"script.py\"])\n+        with open(\"script.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from package import other\\n\")\n+        linter.check([\"script\", \"package\"])\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..617a807 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -111,9 +112,20 @@ def test_template_option_non_existing(linter) -> None:\n     out_lines = output.getvalue().split(\"\\n\")\n     assert out_lines[1] == \"my_mod:1::()\"\n     assert out_lines[2] == \"my_mod:2::()\"\n+def test_custom_braces_in_message_template(linter: PyLinter) -> None:\n+    \"\"\"Test using custom braces in message template.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n \n+    linter.open()\n+    linter.set_current_module(\"test_module\")\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"E0401\", line=2, args=(3, 4))\n \n-def test_deprecation_set_output(recwarn):\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }', f\"Output was: {out_lines[1]}\"\n+    assert out_lines[2] == '{ \"Category\": \"error\" }', f\"Output was: {out_lines[2]}\"\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/acceptance_test.py b/testing/acceptance_test.py\nindex 0cc5057..e549ba9 100644\n--- a/testing/acceptance_test.py\n+++ b/testing/acceptance_test.py\n@@ -1306,6 +1306,8 @@ def test_no_brokenpipeerror_message(pytester: Pytester) -> None:\n     popen.stderr.close()\n \n \n+from typing import Iterator\n+\n def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n@@ -1314,4 +1316,4 @@ def test_function_return_non_none_warning(pytester: Pytester) -> None:\n     \"\"\"\n     )\n     res = pytester.runpytest()\n-    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n+    res.stdout.fnmatch_lines([\"*Did you mean to use `assert` instead of `return`?*\"])\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..cec67cb 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,9 +1,29 @@\n+\n import logging\n \n import py.io\n \n-from _pytest.logging import ColoredLevelFormatter\n+import pytest\n+from _pytest.logging import ColoredLevelFormatter, DEFAULT_LOG_FORMAT\n+\n+\n+def test_default_log_format():\n+    logfmt = DEFAULT_LOG_FORMAT\n+    \n+    record = logging.LogRecord(\n+        name=\"dummy_module\",\n+        level=logging.DEBUG,\n+        pathname=\"dummypath/utils.py\",\n+        lineno=114,\n+        msg=\"Debug message for testing\",\n+        args=(),\n+        exc_info=False,\n+    )\n \n+    formatter = logging.Formatter(logfmt)\n+    output = formatter.format(record)\n+    expected_output = \"utils.py                   114 DEBUG    Debug message for testing\"\n+    assert output == expected_output\n \n def test_coloredlogformatter():\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..f330850 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -300,7 +300,68 @@ def callequal(left, right, verbose=False):\n     return plugin.pytest_assertrepr_compare(config, \"==\", left, right)\n \n \n+import pytest\n+\n class TestAssert_reprcompare:\n+    def test_bytes_diff_normal(self):\n+        \"\"\"Check special handling for bytes diff\"\"\"\n+        diff = callequal(b\"spam\", b\"eggs\")\n+        assert diff == [\n+            \"b'spam' == b'eggs'\",\n+            \"At index 0 diff: b's' != b'e'\",\n+            \"Use -v to get the full diff\",\n+        ]\n+\n+    def test_bytes_diff_verbose(self):\n+        \"\"\"Check special handling for bytes diff\"\"\"\n+        diff = callequal(b\"spam\", b\"eggs\", verbose=True)\n+        assert diff == [\n+            \"b'spam' == b'eggs'\",\n+            \"At index 0 diff: b's' != b'e'\",\n+            \"Full diff:\",\n+            \"- b'spam'\",\n+            \"+ b'eggs'\",\n+        ]\n+\n+    def test_bytes_empty_diff(self):\n+        \"\"\"Check special handling for bytes diff with empty left\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Use -v to get the full diff\",\n+        ]\n+\n+    def test_bytes_empty_diff_verbose(self):\n+        \"\"\"Check special handling for bytes diff with empty left\"\"\"\n+        diff = callequal(b\"\", b\"42\", verbose=True)\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+        ]\n+\n+    def test_bytes_single_diff(self):\n+        \"\"\"Check special handling for bytes diff with single byte\"\"\"\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Use -v to get the full diff\",\n+        ]\n+\n+    def test_bytes_single_diff_verbose(self):\n+        \"\"\"Check special handling for bytes diff with single byte\"\"\"\n+        diff = callequal(b\"\", b\"1\", verbose=True)\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+        ]\n     def test_different_types(self):\n         assert callequal([0, 1], \"foo\") is None\n \n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..b97f95b 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,5 +1,8 @@\n+\n import os\n from xml.dom import minidom\n+import platform\n+from datetime import datetime\n \n import py\n \n@@ -157,6 +160,30 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n+\n     @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..2d71e32 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,31 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_repr():\n+    \"\"\"Test saferepr() with broken __repr__ that raises different exceptions.\"\"\"\n+\n+    class RaisesException:\n+        def __repr__(self):\n+            raise Exception(\"General exception\")\n+\n+    class RaisesValueError:\n+        def __repr__(self):\n+            raise ValueError(\"Value error\")\n+\n+    class RaisesTypeError:\n+        def __repr__(self):\n+            raise TypeError(\"Type error\")\n+\n+    assert saferepr(RaisesException()).startswith(\n+        \"<[Exception('General exception') raised in repr()] RaisesException object at 0x\"\n+    )\n+    assert saferepr(RaisesValueError()).startswith(\n+        \"<[ValueError('Value error') raised in repr()] RaisesValueError object at 0x\"\n+    )\n+    assert saferepr(RaisesTypeError()).startswith(\n+        \"<[TypeError('Type error') raised in repr()] RaisesTypeError object at 0x\"\n+    )\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +178,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..6bcf97d 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -77,6 +77,34 @@ def test_parseconfig(testdir) -> None:\n     assert config2 is not config1\n \n \n+def test_failure_with_changed_cwd(testdir) -> None:\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct.\n+    \"\"\"\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(test_file) + \":*: AssertionError\", \"*1 failed in *\"])\n+\n+\n def test_testdir_runs_with_plugin(testdir) -> None:\n     testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..c0e5897 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -3,6 +3,7 @@ import sys\n from unittest import mock\n \n import pytest\n+import os\n from _pytest.config import ExitCode\n from _pytest.mark import EMPTY_PARAMETERSET_OPTION\n from _pytest.mark import MarkGenerator as Mark\n@@ -36,6 +37,36 @@ class TestMark:\n         assert pytest.mark.foo(SomeClass) is SomeClass\n         assert pytest.mark.foo.with_args(SomeClass) is not SomeClass  # type: ignore[comparison-overlap] # noqa: F821\n \n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n     def test_pytest_mark_name_starts_with_underscore(self):\n         mark = Mark()\n         with pytest.raises(AttributeError):\n",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..2b2c1d4 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,5 +1,8 @@\n+\n import os\n import stat\n+from _pytest.monkeypatch import MonkeyPatch\n+\n import sys\n from pathlib import Path\n from typing import Callable\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..71f86b9 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,7 +574,37 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n-def test_ridgecv_store_cv_values():\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Initialize RidgeClassifierCV with store_cv_values=True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    \n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # with len(y.shape) == 2\n+    y_multi = np.array([[1, 1, 1, -1, -1], [1, -1, 1, -1, 1], [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y_multi.shape[1]\n+    r.fit(x, y_multi)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # Ensure ValueError is raised when cv is not None and store_cv_values=True\n+    from sklearn.model_selection import KFold\n+    cv = KFold(2)\n+    try:\n+        RidgeClassifierCV(alphas=alphas, store_cv_values=True, cv=cv).fit(x, y)\n+        raise AssertionError(\"Expected ValueError\")\n+    except ValueError as e:\n+        assert \"cv!=None and store_cv_values=True are incompatible\" in str(e)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex 7097f7e..5108340 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -1,3 +1,4 @@\n+\n # Author: Wei Xue <xuewei4d@gmail.com>\n #         Thierry Guillemot <thierry.guillemot.work@gmail.com>\n # License: BSD 3 clause\n@@ -13,6 +14,7 @@ from sklearn.covariance import EmpiricalCovariance\n from sklearn.datasets.samples_generator import make_spd_matrix\n from sklearn.externals.six.moves import cStringIO as StringIO\n from sklearn.metrics.cluster import adjusted_rand_score\n+from sklearn.utils.testing import assert_array_equal, assert_raises\n from sklearn.mixture.gaussian_mixture import GaussianMixture\n from sklearn.mixture.gaussian_mixture import (\n     _estimate_gaussian_covariances_full,\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..ba4f75b 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -272,8 +272,27 @@ def test_one_hot_encoder_no_categorical_features():\n     assert_array_equal(enc.get_feature_names(), expected_features)\n     assert enc.categories_ == []\n \n+from sklearn.preprocessing import OneHotEncoder\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+import pytest\n \n-@pytest.mark.parametrize(\"output_dtype\", [np.int32, np.float32, np.float64])\n+def test_one_hot_encoder_handle_unknown_strings_with_long_known_category():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n @pytest.mark.parametrize(\"input_dtype\", [np.int32, np.float32, np.float64])\n def test_one_hot_encoder_dtype(input_dtype, output_dtype):\n     X = np.asarray([[0, 1]], dtype=input_dtype).T\n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..ecd1ae8 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n@@ -70,8 +71,17 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n-\n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_indeterminacy():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+    \n+    # Transform the data multiple times and check for sign consistency\n+    transformed_1 = kpca.fit_transform(X)\n+    transformed_2 = kpca.fit_transform(X)\n+    \n+    # We expect the absolute values to be close even if signs vary\n+    assert_allclose(np.abs(transformed_1), np.abs(transformed_2))\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..77282b7 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,7 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..e8dacb4 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,8 +217,17 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_array_parameters_repr():\n+    # Test that array parameters in an estimator's repr do not cause errors\n+    set_config(print_changed_only=True)\n+    \n+    lr_cv = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+    expected_repr = \"LogisticRegressionCV(Cs=array([0.1, 1.]))\"\n+    \n+    # Check that the __repr__ doesn't raise an error and matches expected output\n+    assert repr(lr_cv) == expected_repr\n \n-def test_pipeline():\n+    set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..670e82d 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -8,6 +9,8 @@ from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n from sklearn.exceptions import NotFittedError\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..16bf72d 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,25 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the issue where sparse fit results in ZeroDivisionError\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    # Verify that support_vectors_ is empty\n+    assert not model.support_vectors_.data.size\n+    # Verify that dual_coef_ is also empty\n+    assert not model.dual_coef_.data.size\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..7e4bea7 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,33 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = (\n+        f\"{repeated_cv.__class__.__name__}(n_repeats=6, n_splits=2, random_state=None)\"\n+    )\n+    assert repeated_cv_repr == repr(repeated_cv)\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV, n_splits, n_repeats, random_state\",\n+    [\n+        (RepeatedKFold, 5, 10, None),\n+        (RepeatedStratifiedKFold, 3, 7, 42),\n+    ]\n+)\n+def test_repeated_cv_repr_varied_params(RepeatedCV, n_splits, n_repeats, random_state):\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)\n+    repeated_cv_repr = (\n+        f\"{repeated_cv.__class__.__name__}(n_repeats={n_repeats}, n_splits={n_splits}, random_state={random_state})\"\n+    )\n+    assert repeated_cv_repr == repr(repeated_cv)\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..bb8a966 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -668,7 +669,32 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_calibrated_classifier_cv_with_isotonic():\n+    \"\"\"Test CalibratedClassifierCV with isotonic regression under pandas config.\"\"\"\n+\n+    # Set transform_output to \"pandas\"\n+    set_config(transform_output=\"pandas\")\n+    \n+    # Generate a simple classification dataset\n+    X, y = make_classification(n_samples=100, n_features=2, n_informative=2, n_redundant=0, random_state=42)\n+    \n+    # Initialize base classifier\n+    base_clf = SGDClassifier(max_iter=1000, tol=1e-3, random_state=0)\n+    \n+    # Initialize calibrated classifier with isotonic regression\n+    calibrated_clf = CalibratedClassifierCV(base_clf, method='isotonic', cv=3)\n+    \n+    # Fit the model\n+    calibrated_clf.fit(X, y)\n+    \n+    # Try predicting on the input data\n+    predictions = calibrated_clf.predict(X)\n+    \n+    assert predictions is not None\n+    assert predictions.shape == (100,)\n+    \n+    # Reset the config\n+    set_config(transform_output=\"default\")\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..df4ecf2 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,9 +1,20 @@\n+\n from __future__ import annotations\n \n from typing import overload\n \n myint = int\n \n+#: This is a test variable\n+variable: myint\n+\n+\n+class Foo:\n+    \"\"\"This is a test class\"\"\"\n+\n+    #: This is a test attribute\n+    attr: myint\n+\n \n def sum(x: myint, y: myint) -> myint:\n     \"\"\"docstring\"\"\"\n@@ -22,4 +33,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..2ef300b 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,34 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        index,\n+        [desc, ([desc_signature, ([desc_name, '-j'],\n+                                  [desc_addname, '[=N]'])],\n+                [desc_content, ()])\n+        ]\n+    ))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        index,\n+        [desc, ([desc_signature, ([desc_name, '[enable'],\n+                                  [desc_addname, '=]PATTERN'])],\n+                [desc_content, ()])\n+        ]\n+    ))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..e9ead96 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -45,6 +45,52 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_module_with_empty_all(app):\n+    # Test a module with an empty __all__ attribute\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    \n+    # If __all__ is empty, no members should be documented\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_module_with_no_all(app):\n+    # Test a module without an __all__ attribute\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.no_all', options)\n+    \n+    # If __all__ is not present, all members should be documented\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.no_all',\n+        '',\n+        'docstring of the no_all module.',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.no_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: bar()',\n+        '   :module: target.no_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: baz()',\n+        '   :module: target.no_all',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+\n def make_directive_bridge(env):\n     options = Options(\n         inherited_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..b423327 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -10,6 +11,7 @@\n \n import sys\n from numbers import Integral\n+from struct import Struct\n from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar,\n                     Union)\n \n@@ -44,6 +46,7 @@ def test_restify():\n     assert restify(None) == \":obj:`None`\"\n     assert restify(Integral) == \":class:`numbers.Integral`\"\n     assert restify(Any) == \":obj:`Any`\"\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n \n \n def test_restify_type_hints_containers():\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..750f0f1 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,55 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_with_class_reference(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+    def test_other_parameters_with_multiple_types(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param3 : int or str\n+    Description for param3.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param3** (*int or str*) -- Description for param3.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param3:\n+:type param3: int or str\n+    Description for param3.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..e15eacb 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,14 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+\n+    # Ensure viewcode pages are not created for epub when viewcode is disabled\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..33584d1 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -323,6 +323,14 @@ def test_mul():\n \n \n def test_args():\n+    # Additional test case for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[1, 2], [0, 1]]) == Permutation([1, 0, 2])\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])\n+    assert Permutation([[1, 2], [2, 1]]) == Permutation([0, 1, 2])\n+    assert Permutation([[0, 2], [1, 2]]) == Permutation([1, 0, 2])\n+    assert Permutation([[0, 1, 2], [2, 0]]) == Permutation([2, 0, 1])\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n     assert Permutation(p) == p\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..4005120 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,6 +1,7 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n-from sympy.utilities.pytest import raises\n+from sympy import Matrix, SparseMatrix\n \n def test_sparse_matrix():\n     def sparse_eye(n):\n",
  "sympy__sympy-13471": "",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..2ca3bb9 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,24 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+def test_coth_subs_issue():\n+    from sympy import Symbol, coth, log, tan\n+\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Test the problematic integral values\n+    assert e.subs(x, 2).is_real\n+    assert e.subs(x, 3).is_real\n+    assert e.subs(x, 5).is_real\n+    assert e.subs(x, 6).is_real\n+    assert e.subs(x, 8).is_real\n+    assert e.subs(x, 9).is_real\n+    assert e.subs(x, 11).is_real\n+    assert e.subs(x, 12).is_real\n+    assert e.subs(x, 13).is_real\n+    assert e.subs(x, 15).is_real\n+    assert e.subs(x, 18).is_real\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..46b643f 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,23 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+\n+    # Original issue setup\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+\n+    assert M.col_insert(3, V) == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..43774cd 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,8 +615,32 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+from sympy import symbols, SeqFormula, oo, latex\n \n-def test_latex_sequences():\n+def test_latex_seqformula_no_backslashes():\n+    # Test to ensure the LaTeX rendering of SeqFormula does not escape brackets\n+\n+    n = symbols('n', integer=True)\n+    s1 = SeqFormula(n**2, (n, 0, oo))\n+    expected_latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s1) == expected_latex_str\n+\n+    s2 = SeqFormula(n**3, (n, 0, 3))\n+    expected_latex_str = r'[0, 1, 8, 27]'\n+    assert latex(s2) == expected_latex_str\n+\n+    s3 = SeqFormula(n, (n, -3, 0))\n+    expected_latex_str = r'[\\ldots, -2, -1, 0]'\n+    assert latex(s3) == expected_latex_str\n+\n+    s4 = SeqFormula(n, (n, -oo, 0))\n+    expected_latex_str = r'[\\ldots, -3, -2, -1, 0]'\n+    assert latex(s4) == expected_latex_str\n+\n+    # Ensure no extra backslashes appear in sequences with few elements\n+    s5 = SeqFormula(n + 1, (n, 1, 2))\n+    expected_latex_str = r'[2, 3]'\n+    assert latex(s5) == expected_latex_str\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..5307348 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,10 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, EX, RR, CC\n+from sympy.polys.polytools import Poly\n+from sympy.abc import x, y, z\n+from sympy.polys.polyerrors import OptionError\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -172,7 +176,26 @@ def test_Domain_preprocess():\n     assert Domain.preprocess('FF(23)') == FF(23)\n     assert Domain.preprocess('GF(23)') == GF(23)\n \n-    raises(OptionError, lambda: Domain.preprocess('Z[]'))\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n+    # Additional test cases for RR[y,z] issue\n+    assert Domain.preprocess('RR[y,z]') == RR[y, z]\n+    raises(OptionError, lambda: Domain.preprocess('RR(y,z)'))\n+\n+    # Test Poly with domain 'RR[y,z]'\n+    p = Poly(1.2*x*y*z, x, domain='RR[y,z]')\n+    assert str(p) == \"Poly(1.2*y*z*x, x, domain='RR[y,z]')\"\n+    assert p.domain == RR[y, z]\n+\n+    # Check that an invalid domain raises an error\n+    raises(OptionError, lambda: Poly(1.2*x*y*z, x, domain='InvalidDomain'))\n \n     assert Domain.preprocess('Z[x]') == ZZ[x]\n     assert Domain.preprocess('Q[x]') == QQ[x]\n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..15d2acc 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,10 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty, symbols\n+\n+n = symbols('n')\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n@@ -6121,8 +6125,29 @@ def test_MatrixSymbol_printing():\n     assert pretty(A - B) == \"-B + A\"\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n-\n-def test_degree_printing():\n+def test_MatAdd_pretty_printing_issue():\n+    # issue #14814 test cases\n+    n = symbols('n')\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    a = symbols('a')\n+    y = MatrixSymbol('y', n, n)\n+    \n+    assert pretty(x + y_star) == \"x + y*\"\n+    assert pretty(-a*x - 2*y*y_star) == \"-a*x - 2*y*y*\"\n+    \n+    # Additional test cases for special characters\n+    z_dash = MatrixSymbol('z-', n, n)\n+    assert pretty(x + z_dash) == \"x + z-\"\n+    assert pretty(-a*x + z_dash) == \"-a*x + z-\"\n+\n+    # Testing with negative matrix symbols\n+    neg_y_star = -y_star\n+    assert pretty(neg_y_star) == \"-y*\"\n+    assert pretty(neg_y_star + x) == \"-y* + x\"\n+\n+    # Compound expressions\n+    assert pretty(x + y_star + z_dash) == \"x + y* + z-\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..2b5eb8d 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -727,8 +727,23 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n-\n-def test_python_keywords():\n+def test_curly_matrix_symbol_issue():\n+    # Setup for the issue test case\n+    curlyx = sy.symbols(\"{x}\")\n+    v = sy.MatrixSymbol(\"v\", 2, 1)\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # Test cases that work\n+    curlyScalarId = lambdify(curlyx, curlyx)\n+    vectorId = lambdify(v, v)\n+    assert curlyScalarId(3) == 3\n+    assert (vectorId([1, 2]) == [1, 2]).all()\n+\n+    # Test cases that should work after resolving the issue\n+    curlyVectorId = lambdify(curlyv, curlyv)\n+    curlyVectorIdDummified = lambdify(curlyv, curlyv, dummify=True)\n+    assert (curlyVectorId([1, 2]) == [1, 2]).all()\n+    assert (curlyVectorIdDummified([3, 4]) == [3, 4]).all()\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..4d2f4e5 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,18 @@\n+\n+def test_Max_Min():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(2, y, x)) == \"Max[2, y, x]\"\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(x, y, 2)) == \"Min[x, y, 2]\"\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..436b7de 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,7 +1717,20 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n-def test_latex_UnevaluatedExpr():\n+def test_indexed_matrix_expression_latex_compilation():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    \n+    # Test the LaTeX output for the matrix multiplication element\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+    \n+    # Additional test with different symbols\n+    p, q, r = symbols(\"p q r\")\n+    P = MatrixSymbol(\"P\", r, r)\n+    Q = MatrixSymbol(\"Q\", r, r)\n+\n+    assert latex((P*Q)[p, q]) == r'\\sum_{i_{1}=0}^{r - 1} P_{p, i_{1}} Q_{i_{1}, q}'\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n     assert latex(he) == latex(1/x) == r\"\\frac{1}{x}\"\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..c615c2d 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -9,7 +10,14 @@ def test_idiff():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n-    # the use of idiff in ellipse also provides coverage\n+    # Additional test cases for the issue with idiff\n+    f = Function('f')\n+    g = Function('g')\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x) == (x + 1) * exp(x - y)/(y + 1)\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     circ = x**2 + y**2 - 4\n     ans = -3*x*(x**2 + y**2)/y**5\n     assert ans == idiff(circ, y, x, 3).simplify()\n",
  "sympy__sympy-16792": "",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..46c87d5 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,15 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, FiniteSet, Eq, Symbol, S\n \n-def test_issue_9623():\n+def test_intersection_remove_duplicates():\n+    x = Symbol('x')\n+    # Test with duplicate element sets\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    # Test with variables\n+    expected_result = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1}, {1}, {x}).doit() == expected_result\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..c279a6a 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,9 +1,13 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n )\n from sympy import eye\n from sympy.abc import x, i, j, a, b, c, d\n+from sympy.matrices import MatrixSymbol, Identity\n+from sympy.utilities.pytest import raises\n+import numpy as np\n from sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Cbrt, Sqrt\n from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayTensorProduct, CodegenArrayDiagonal,\n@@ -25,8 +29,21 @@ def test_numpy_piecewise_regression():\n     p = Piecewise((1, x < 0), (0, True))\n     assert NumPyPrinter().doprint(p) == 'numpy.select([numpy.less(x, 0),True], [1,0], default=numpy.nan)'\n \n+def test_issue_lambdify_identity():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2))\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+\n+    assert (f(ma) == mr).all()\n \n-def test_sum():\n+    from sympy import symbols\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"M\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n     if not np:\n         skip(\"NumPy not installed\")\n \n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..49c7edb 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,15 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n+def test_issue_17137():\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify((sin(x) + cos(x))**I) == (sin(x) + cos(x))**I\n+    assert simplify((sin(x) * cos(x))**I) == (sin(x) * cos(x))**I\n+\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..2df3a59 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,7 +1894,29 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, Symbol, sympify, tan, oo, Mul\n+from sympy.core.expr import ExprBuilder\n+from sympy.testing.pytest import raises\n+\n def test_expr():\n+    # Test case for issue: Ensure that objects with a repr that should not be evaluated are not causing `__eq__` to fail.\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    x = symbols('x')\n+    \n+    # Ensure that the equality check does not evaluate repr\n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+\n+    # Test case where repr matches existing symbol but should not be evaluated\n+    class C2:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert (x == C2()) is False\n+    assert (x != C2()) is True\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n \n@@ -1902,4 +1924,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..c9fc60f 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,7 +547,13 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n-    # issue 18122\n+    # issue 18186: Test for correct permute behavior irrespective of symbol order\n+    from sympy import symbols\n+    x, y = symbols('x y', integer=True)\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..8d135a6 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -66,7 +67,9 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    # Ensure all atoms are strings with no args\n+    assert sz.atoms() == {String(typename), String('sizeof')}\n+    assert all(atom.args == () for atom in sz.atoms())\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..323bd11 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -101,9 +101,17 @@ def test_block_collapse_explicit_matrices():\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n-    assert block_collapse(BlockMatrix([[A]])) == A\n-\n-def test_issue_17624():\n+from sympy import Matrix, BlockDiagMatrix\n+\n+def test_issue_single_element_BlockDiagMatrix():\n+    # Test case to verify the fix for conversion issue of single element BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    try:\n+        B = Matrix(D)\n+        assert B == M, \"Conversion failed, expected Matrix M\"\n+    except Exception as e:\n+        assert False, f\"Conversion raised an exception: {e}\"\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n     b = BlockMatrix([[a, z], [z, z]])\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..0c02813 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,26 @@\n+\n+def test_block_index_symbolic_issue():\n+    # Reproduce the original issue with symbolic indexing\n+    n, i = symbols('n, i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+\n+    # Verify the block matrix is constructed correctly\n+    assert C.shape == (n + 1, 1)\n+\n+    # Check the specific problematic index access\n+    # C[i, 0] should not resolve to A[i, 0] directly as i is symbolic\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n+    # Explicitly check elements\n+    assert C[0, 0] == A[0, 0]\n+    assert C[1, 0] == B[0, 0]  # Next element should be part of B\n+    assert C[n, 0] == B[n-1, 0]  # Last element should be the last element in B\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..f3bbe19 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -305,7 +305,18 @@ def test_sign():\n     # evaluate what can be evaluated\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n-    eq = -sqrt(10 + 6*sqrt(3)) + sqrt(1 + sqrt(3)) + sqrt(3 + 3*sqrt(3))\n+    x = Symbol('x', real=True)\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x / Abs(x), True))\n+    \n+    y = Symbol('y', complex=True)\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y / Abs(y), True))\n+    \n+    z = Symbol('z', nonzero=True)\n+    assert sign(z).rewrite(Abs) == z / Abs(z)\n+    \n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(1).rewrite(Abs) == 1\n+    assert sign(-1).rewrite(Abs) == -1\n     # if there is a fast way to know when and when you cannot prove an\n     # expression like this is zero then the equality to zero is ok\n     assert sign(eq).func is sign or sign(eq) == 0\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..590bd6a 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,7 +471,25 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions\n+\n def test_partitions():\n+    # Test that modifying yielded partitions does not affect others\n+    parts = list(partitions(6, k=2))\n+    parts_copy = [p.copy() for p in parts]\n+    \n+    # Modify the first partition\n+    parts[0][2] = 0\n+    \n+    # Verify that original partitions are not modified\n+    assert parts_copy == [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    \n+    # Test that each partition is a new instance\n+    partitions_list = list(partitions(6, k=2))\n+    for i, p in enumerate(partitions_list):\n+        for j, q in enumerate(partitions_list):\n+            if i != j:\n+                assert p is not q  # Ensure different instances\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..8a1ccb2 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,22 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_no_dict():\n+    # This test checks that Symbol instances do not have a __dict__ attribute\n+    # Initialize a Symbol\n+    s = Symbol('s')\n+    # Check that accessing __dict__ raises an AttributeError\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n+def test_symbol_slots():\n+    # This test checks the __slots__ of a Symbol instance\n+    s = Symbol('s')\n+    assert s.__slots__ == ('name',)\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..ee50247 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,15 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_issue_refine_complex_arguments():\n+    a = Symbol('a', real=True)\n+    x = Symbol('x', real=True)\n+    \n+    J = Integral(sin(x) * exp(-a*x), (x, 0, oo))\n+    assert refine(J.doit(), Q.positive(a)) == 1/(a**2 + 1)\n+    \n+    assert refine(arg(a), Q.positive(a)) == 0\n+    assert refine(arg(-a), Q.positive(a)) == pi\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..0ae1561 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -8,7 +9,50 @@ from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n-def test_subs():\n+def test_issue_21373():\n+    from sympy import exp, sinh, Piecewise, symbols, clear_cache, Rational, cosh, tanh\n+\n+    x, y, z = symbols('x y z')\n+    # Test case with default assumptions\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n+\n+    # Real assumptions\n+    clear_cache()\n+    x, y, z = symbols('x y z', real=True)\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n+\n+    # With cosh\n+    clear_cache()\n+    expr = exp(cosh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n+\n+    # With tanh\n+    clear_cache()\n+    expr = exp(tanh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n+\n+    # Removing division by z\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True))))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n+\n+    # Removing exp\n+    clear_cache()\n+    expr = sinh(Piecewise((x, y > x), (y, True)) / z)\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n+\n+    # Using `sin` instead of `sinh`\n+    clear_cache()\n+    expr = exp(sin(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n+\n+    # Using `log` instead of `sinh`\n+    clear_cache()\n+    expr = exp(log(Piecewise((x + 1, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..c4278f3 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -34,7 +36,10 @@ def test_Symbol_kind():\n     assert comm_x.kind is NumberKind\n     assert noncomm_x.kind is UndefinedKind\n \n-def test_Integral_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    d = Derivative(A, comm_x)\n+    assert d.kind is MatrixKind(NumberKind)\n     A = MatrixSymbol('A', 2,2)\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..6710443 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -131,6 +131,14 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n+    # Test cases for issue with min_degrees argument\n+    x, y, z = symbols('x y z')\n+    assert set(itermonomials([x, y, z], 3, 3)) == {x**3, y**3, z**3, x**2*y, x**2*z, y**2*x, y**2*z, z**2*x, z**2*y, x*y**2, x*z**2, y*z**2, y*z*x, x*y*z}\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, y**3, x**2*y, x*y**2}\n+    assert set(itermonomials([x, y, z], 3, 2)) == {x**3, y**3, z**3, x**2, y**2, z**2, x*y, x*z, y*z, x**2*y, x**2*z, y**2*x, y**2*z, z**2*x, z**2*y, x*y**2, x*z**2, y*z**2, y*z*x, x*y*z}\n+    assert set(itermonomials([x, y, z], 2, 2)) == {x*y, x*z, y*z, x**2, y**2, z**2}\n+    assert set(itermonomials([x, y], 2, 2)) == {x**2, y**2, x*y}\n+\n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n",
  "sympy__sympy-22005": "",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..9dec102 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,9 +1,11 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.core.sympify import sympify\n from sympy.functions.elementary.miscellaneous import sqrt\n+from sympy.core.parameters import evaluate\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..22983cf 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,7 +347,18 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n-def test_cse_MatrixExpr():\n+def test_cse_MatrixSymbol_indexing():\n+    # Test cse with indexed MatrixSymbol\n+    a = MatrixSymbol(\"a\", 4, 4)\n+    b = MatrixSymbol(\"b\", 4, 4)\n+    \n+    # Simplified representation of the issue example\n+    expr = a[0, 0]*b[0, 0] + a[0, 1]*b[1, 0] + a[0, 0]*b[0, 0]\n+    cse_subs, cse_reduced = cse(expr)\n+    \n+    # Verify that common subexpression a[0, 0]*b[0, 0] is identified\n+    assert cse_subs == [(symbols('x0'), a[0, 0]*b[0, 0])]\n+    assert cse_reduced == [symbols('x0') + a[0, 1]*b[1, 0]]\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..447e760 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -7,6 +8,10 @@ from sympy.tensor.array.dense_ndim_array import (\n     ImmutableDenseNDimArray, MutableDenseNDimArray)\n from sympy.tensor.array.sparse_ndim_array import (\n     ImmutableSparseNDimArray, MutableSparseNDimArray)\n+from sympy.tensor.array.dense_ndim_array import (\n+    ImmutableDenseNDimArray, MutableDenseNDimArray)\n+from sympy.tensor.array.sparse_ndim_array import (\n+    ImmutableSparseNDimArray, MutableSparseNDimArray)\n \n from sympy.abc import x, y\n \n@@ -38,7 +43,19 @@ def test_array_negative_indices():\n         assert test_array[-1, -1] == 10\n \n \n-def test_issue_18361():\n+def test_empty_array_construction():\n+    # Test if Array can be constructed with an empty list\n+    A = Array([])\n+    assert isinstance(A, Array)\n+    assert A.shape == (0,)\n+    assert list(A) == []\n+\n+    # Test for other array types\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n     C = Array([(x + x**2)/(x*sin(y)**2 + x*cos(y)**2), 2*sin(x)*cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..d2baec2 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1182,7 +1182,20 @@ def test_lambdify_inspect():\n     assert 'x**2' in inspect.getsource(f)\n \n \n-def test_issue_14941():\n+def test_single_element_tuple():\n+    # Test for a tuple with a single element\n+    f = lambdify([], (1,))\n+    assert f() == (1,)\n+    \n+    # Verify that the source code of the lambda contains the single element tuple with a comma\n+    code = inspect.getsource(f)\n+    assert \"return (1,)\" in code\n+\n+    # Test for a tuple with multiple elements for comparison\n+    f_multi = lambdify([], (1, 2))\n+    assert f_multi() == (1, 2)\n+    code_multi = inspect.getsource(f_multi)\n+    assert \"return (1, 2)\" in code_multi\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..baca9c9 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import Quantity, impedance, capacitance, time, ohm, farad, second\n+    from sympy import exp\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..7568254 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -42,6 +42,35 @@ def test_tensor_product_abstract():\n \n \n def test_tensor_product_expand():\n+    # Test cases for verifying the fix of the TensorProduct expansion issue\n+\n+    # Original test cases from the patch\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional test cases to ensure robustness\n+    assert TP(x*(A + B), C + D).expand(tensorproduct=True) == \\\n+        x * TP(A, C) + x * TP(A, D) + x * TP(B, C) + x * TP(B, D)\n+\n+    assert TP(3*A - B, 2*B + C).expand(tensorproduct=True) == \\\n+        3 * TP(A, 2*B) + 3 * TP(A, C) - TP(B, 2*B) - TP(B, C)\n+\n+    assert TP(0, A + B).expand(tensorproduct=True) == 0\n+\n+    assert TP(A, 0).expand(tensorproduct=True) == 0\n+\n+    assert TP(1, A + B).expand(tensorproduct=True) == \\\n+        TP(1, A) + TP(1, B)\n+\n+    assert TP(A + B, 1).expand(tensorproduct=True) == \\\n+        TP(A, 1) + TP(B, 1)\n+\n+    assert TP(U + V, 2*U - V).expand(tensorproduct=True) == \\\n+        TP(U, 2*U) - TP(U, V) + TP(V, 2*U) - TP(V, V)\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..fd5bbb5 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,7 +563,45 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+    \n+    # Define quantities\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+    \n+    # Expression that should not raise ValueError\n+    expr = A1 * T1 + V1\n+\n+    try:\n+        SI._collect_factor_and_dimension(expr)\n+    except ValueError as e:\n+        assert False, f\"Unexpected ValueError: {e}\"\n+\n+    # Additional test case to verify edge cases\n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, 9.8 * meter / second**2)\n+    \n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 1 * second)\n+    \n+    expr2 = A2 * T2 + V1\n+    try:\n+        SI._collect_factor_and_dimension(expr2)\n+    except ValueError as e:\n+        assert False, f\"Unexpected ValueError: {e}\"\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..df0cc40 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +28,22 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    # Test cases for the milli prefix issue\n+    # Test milli * W == 1 (issue case)\n+    assert milli * W != 1\n+\n+    # Test milli * W == milliWatt\n+    from sympy.physics.units import watt\n+    assert milli * W == watt / 1000\n+\n+    # Test W * milli == milliWatt\n+    assert W * milli == watt / 1000\n+\n+    # Additional tests for different units\n+    from sympy.physics.units import volt\n+    assert milli * volt == volt / 1000\n+    assert volt * milli == volt / 1000\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/models.py b/tests/model_inheritance/models.py\nindex 5dd5a37..9450d58 100644\n--- a/tests/model_inheritance/models.py\n+++ b/tests/model_inheritance/models.py\n@@ -189,7 +189,8 @@ class Parent(GrandParent):\n \n \n class Child(Parent):\n-    pass\n+    class Meta:\n+        ordering = ['-pk']\n \n \n class GrandChild(Child):\n",
  "django__django-13033": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\nindex ec1f9e4..46d13f3 100644\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -6,6 +6,21 @@ should be a list or tuple of field names. This tells Django how to order\n ``QuerySet`` results.\n \n If a field name in ``ordering`` starts with a hyphen, that field will be\n+from django.db import models\n+from django.db.models import F\n+\n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"OneModel\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n ordered in descending order. Otherwise, it'll be ordered in ascending order.\n The special-case field name ``\"?\"`` specifies random order.\n \n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..0d86437 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,36 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundfield_subwidget_id_for_label(self):\n+        \"\"\"\n+        If auto_id is provided when initializing the form, the generated ID in\n+        subwidgets must reflect that prefix.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n+\n+    def test_boundwidget_id_for_label_uses_attrs_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the id from self.data['attrs'] if available.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n+\n+        form = SomeForm()\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..f2ddb8b 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,10 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm, Normalize\n+import numpy as np\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n@@ -657,8 +661,30 @@ def test_colorbar_scale_reset():\n \n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n+def test_colorbar_update_after_norm_change():\n+    # Generate random data\n+    data = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    # Plot the data and create a colorbar\n+    fig, ax = plt.subplots()\n+    im = ax.imshow(data, cmap='gray')\n+    cbar = fig.colorbar(im, ax=ax)\n+\n+    # Change the norm to LogNorm\n+    im.set_norm(LogNorm())\n+    cbar.update_normal(im)\n+    fig.canvas.draw()\n+\n+    # Verify that the colorbar scale is updated to log\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n \n-def test_colorbar_get_ticks_2():\n+    # Change the norm back to Normalize\n+    im.set_norm(Normalize())\n+    cbar.update_normal(im)\n+    fig.canvas.draw()\n+\n+    # Verify that the colorbar scale is updated back to linear\n+    assert cbar.ax.yaxis.get_scale() == 'linear'\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..9839798 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,38 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with a transformer producing a DataFrame output with pandas config.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+    from sklearn.pipeline import FeatureUnion\n+    \n+    # Define custom transformer\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Create test data\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Configure pandas output\n+    set_config(transform_output=\"pandas\")\n+    \n+    # Create FeatureUnion and transform data\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    \n+    # Check if transform raises an error\n+    try:\n+        result = union.fit_transform(data)\n+        assert isinstance(result, pd.DataFrame), \"The result should be a pandas DataFrame.\"\n+        print(\"FeatureUnion worked successfully with pandas output.\")\n+    except Exception as e:\n+        print(f\"An error occurred: {e}\")\n",
  "sphinx-doc__sphinx-8801": "",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..123c57f 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,8 +358,24 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n+def test_issue_15129_rational_trigsimp():\n+    from sympy import Rational, acos\n+\n+    # Test that trigsimp can handle rational arguments in trigonometric functions\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+\n+    # Direct calculation without Matrix\n+    r2 = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert trigsimp(r2) == cos(S(1)/50)\n+\n+    # Test with acos to ensure it simplifies correctly\n+    assert trigsimp(acos(r2)) == acos(cos(S(1)/50))\n \n-def test_exptrigsimp():\n+    # Ensure that acos of the simplified result is consistent\n+    assert trigsimp(acos(cos(S(1)/50))) == S(1)/50\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..e894d3b 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4332,8 +4332,25 @@ def test_pretty_class():\n     assert pretty( C ) == str( C )\n     assert pretty( D ) == str( D )\n \n+from sympy import Sum, oo, pprint\n+from sympy.abc import x\n \n-def test_pretty_no_wrap_line():\n+def test_pretty_sum_alignment():\n+    # This test checks the alignment of the summation with an additional term\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    result = pprint(expr, use_unicode=True)\n+    expected_result = \\\n+u(\"\"\"\\\n+  \u221e    \\n\\\n+ ___   \\n\\\n+ \u2572     \\n\\\n+  \u2572   x\\n\\\n+  \u2571    \\n\\\n+ \u2571   + 3\\n\\\n+ \u203e\u203e\u203e   \\n\\\n+x = 1  \\\n+\"\"\")\n+    assert result == expected_result\n     huge_expr = 0\n     for i in range(20):\n         huge_expr += i*sin(i + x)\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..349a82f 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,20 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.utilities.pytest import raises\n+\n def test_uniq():\n+    f = [1, 2, 1, 3]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    f = list('abcabc')\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+    \n+    f = [[1], [2, 1], [1]]\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+\n+    # Ensure the function works correctly for non-modifying iterations\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..223b1be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,7 +546,20 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n-    def test_uuid_pk_subquery(self):\n+    def test_subquery_initialization(self):\n+        # Testing that Subquery sets the subquery attribute to True during initialization.\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertIs(employees_subquery.query.subquery, True)\n+\n+    def test_subquery_sql_generation(self):\n+        # Verify that the SQL generated by Subquery.as_sql() is valid.\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertTrue(sql.startswith('(SELECT '))\n+        self.assertTrue(sql.endswith(')'))\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 0ecd041..7273548 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -437,7 +437,37 @@ class InspectDBTestCase(TestCase):\n class InspectDBTransactionalTests(TransactionTestCase):\n     available_apps = [\"inspectdb\"]\n \n-    def test_include_views(self):\n+    def test_autogenerated_related_name_for_same_relation(self):\n+        \"\"\"Test inspectdb generates related_name for models with multiple FK to the same model.\"\"\"\n+        with connection.cursor() as cursor:\n+            cursor.execute(\n+                \"CREATE TABLE inspectdb_duplicate_fk_model (\"\n+                \"id serial PRIMARY KEY, \"\n+                \"first_reference_id INTEGER NOT NULL, \"\n+                \"second_reference_id INTEGER NOT NULL\"\n+                \")\"\n+            )\n+            cursor.execute(\n+                \"ALTER TABLE inspectdb_duplicate_fk_model \"\n+                \"ADD CONSTRAINT fk_first_reference FOREIGN KEY (first_reference_id) REFERENCES inspectdb_people(id)\"\n+            )\n+            cursor.execute(\n+                \"ALTER TABLE inspectdb_duplicate_fk_model \"\n+                \"ADD CONSTRAINT fk_second_reference FOREIGN KEY (second_reference_id) REFERENCES inspectdb_people(id)\"\n+            )\n+\n+        out = StringIO()\n+        call_command(\"inspectdb\", stdout=out)\n+        output = out.getvalue()\n+\n+        self.assertIn(\n+            \"first_reference = models.ForeignKey('InspectdbPeople', models.DO_NOTHING, related_name='inspectdbduplicatefkmodel_first_reference_set')\",\n+            output,\n+        )\n+        self.assertIn(\n+            \"second_reference = models.ForeignKey('InspectdbPeople', models.DO_NOTHING, related_name='inspectdbduplicatefkmodel_second_reference_set')\",\n+            output,\n+        )\n         \"\"\"inspectdb --include-views creates models for database views.\"\"\"\n         with connection.cursor() as cursor:\n             cursor.execute(\n",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..c66de4a 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,26 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +184,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..79103f9 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,4 +1,6 @@\n-import copy\n+\n+import pickle  # Required for pickling and unpickling figures\n+import matplotlib.pyplot as plt\n from datetime import datetime\n import io\n from pathlib import Path\n@@ -12,7 +14,7 @@ import pytest\n from PIL import Image\n \n import matplotlib as mpl\n-from matplotlib import gridspec, rcParams\n+from matplotlib import gridspec, rcParams, Figure\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n from matplotlib.figure import Figure, FigureBase\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..11cd5d4 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+import seaborn as sns\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1625,18 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_categorical_hue(self):\n+        # This test is designed to replicate and verify the resolution of the error described in the issue\n+        iris = sns.load_dataset(\"iris\")\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        \n+        try:\n+            # Attempt to map a scatterplot with a categorical hue\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            assert True, \"No error raised when mapping scatterplot with categorical hue in PairGrid\"\n+        except Exception as e:\n+            pytest.fail(f\"Mapping scatterplot with categorical hue in PairGrid raised an error: {e}\")\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..f96bb82 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -404,6 +404,12 @@ class TestCustomConftests:\n         testdir.makepyfile(\"def test_x(): pass\")\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+    def test_collect_only_shortcut(self, testdir):\n+        testdir.makepyfile(\"def test_y(): pass\")\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_y*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n@@ -434,6 +440,12 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+    def test_collect_only_shortcut(self, testdir):\n+        testdir.makepyfile(\"def test_y(): pass\")\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_y*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..bc6d551 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -90,12 +90,20 @@ def missing_attr(c,\n     # type: (...) -> str\n     return a + (b or \"\")\n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n \n-class _ClassWithDocumentedInit:\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n     \"\"\"Class docstring.\"\"\"\n \n     def __init__(self, x: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..75415db 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,19 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Sum, symbols\n \n-def test_Identity_doit():\n+def test_Identity_sum_of_elements():\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+\n+    # Check that the sum of all elements equals n\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n\n+\n+    # Check that the sum of diagonal elements equals n\n+    diagonal_sum = Sum(In[i, i], (i, 0, n-1)).doit()\n+    assert diagonal_sum == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..0dd174d 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,6 +251,12 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n+def test_issue_21537_latex_parsing():\n+    from sympy.parsing.latex import parse_latex\n+    expr = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    expected = ((a**3 + b)/c)/(1/(c**2))\n+    assert expr == expected, f\"Expected {expected}, but got {expr}\"\n+\n # These bad LaTeX strings should raise a LaTeXParsingError when parsed\n BAD_STRINGS = [\n     r\"(\",\n"
}